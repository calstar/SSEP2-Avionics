
STM32BlankStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009328  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080095f8  080095f8  000195f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080096cc  080096cc  000196cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080096d0  080096d0  000196d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000160  24000000  080096d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001d7c  24000160  08009834  00020160  2**2
                  ALLOC
  7 ._user_heap_stack 00000b04  24001edc  08009834  00021edc  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002018e  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011f87  00000000  00000000  000201d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030cc  00000000  00000000  00032158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ef8  00000000  00000000  00035228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b17  00000000  00000000  00036120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034283  00000000  00000000  00036c37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000139ef  00000000  00000000  0006aeba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013d33e  00000000  00000000  0007e8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000043dc  00000000  00000000  001bbbe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006b  00000000  00000000  001bffc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000160 	.word	0x24000160
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080095e0 	.word	0x080095e0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000164 	.word	0x24000164
 800030c:	080095e0 	.word	0x080095e0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <CDC_Transmit_String>:

/**
  * @brief  The application entry point.
  * @retval int
  */
void CDC_Transmit_String(char *str) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
    uint8_t *buf = (uint8_t *)str;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	60fb      	str	r3, [r7, #12]
    uint16_t len = strlen(str);
 80003cc:	6878      	ldr	r0, [r7, #4]
 80003ce:	f7ff ff9f 	bl	8000310 <strlen>
 80003d2:	4603      	mov	r3, r0
 80003d4:	817b      	strh	r3, [r7, #10]
    CDC_Transmit_HS(buf, len);
 80003d6:	897b      	ldrh	r3, [r7, #10]
 80003d8:	4619      	mov	r1, r3
 80003da:	68f8      	ldr	r0, [r7, #12]
 80003dc:	f007 fd38 	bl	8007e50 <CDC_Transmit_HS>
}
 80003e0:	bf00      	nop
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <main>:
int main(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003ec:	f000 fa42 	bl	8000874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003f0:	f000 f80e 	bl	8000410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f4:	f000 f86c 	bl	80004d0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003f8:	f007 fc6c 	bl	8007cd4 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CDC_Transmit_String("Hello, World!\r\n");
 80003fc:	4803      	ldr	r0, [pc, #12]	; (800040c <main+0x24>)
 80003fe:	f7ff ffdf 	bl	80003c0 <CDC_Transmit_String>
	  HAL_Delay(1000);
 8000402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000406:	f000 fac7 	bl	8000998 <HAL_Delay>
	  CDC_Transmit_String("Hello, World!\r\n");
 800040a:	e7f7      	b.n	80003fc <main+0x14>
 800040c:	080095f8 	.word	0x080095f8

08000410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b09c      	sub	sp, #112	; 0x70
 8000414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041a:	224c      	movs	r2, #76	; 0x4c
 800041c:	2100      	movs	r1, #0
 800041e:	4618      	mov	r0, r3
 8000420:	f008 fa89 	bl	8008936 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000424:	1d3b      	adds	r3, r7, #4
 8000426:	2220      	movs	r2, #32
 8000428:	2100      	movs	r1, #0
 800042a:	4618      	mov	r0, r3
 800042c:	f008 fa83 	bl	8008936 <memset>
  */

  /** Configure the main internal regulator output voltage
  */

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000430:	bf00      	nop
 8000432:	4b26      	ldr	r3, [pc, #152]	; (80004cc <SystemClock_Config+0xbc>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800043a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800043e:	d1f8      	bne.n	8000432 <SystemClock_Config+0x22>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000440:	2303      	movs	r3, #3
 8000442:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000448:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800044a:	2301      	movs	r3, #1
 800044c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800044e:	2340      	movs	r3, #64	; 0x40
 8000450:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000452:	2302      	movs	r3, #2
 8000454:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000456:	2302      	movs	r3, #2
 8000458:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800045a:	2305      	movs	r3, #5
 800045c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800045e:	2330      	movs	r3, #48	; 0x30
 8000460:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000462:	2302      	movs	r3, #2
 8000464:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000466:	2305      	movs	r3, #5
 8000468:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800046a:	2302      	movs	r3, #2
 800046c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800046e:	2308      	movs	r3, #8
 8000470:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000472:	2300      	movs	r3, #0
 8000474:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800047e:	4618      	mov	r0, r3
 8000480:	f001 fe86 	bl	8002190 <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800048a:	f000 f859 	bl	8000540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	233f      	movs	r3, #63	; 0x3f
 8000490:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004aa:	2300      	movs	r3, #0
 80004ac:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ae:	1d3b      	adds	r3, r7, #4
 80004b0:	2101      	movs	r1, #1
 80004b2:	4618      	mov	r0, r3
 80004b4:	f002 fa46 	bl	8002944 <HAL_RCC_ClockConfig>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80004be:	f000 f83f 	bl	8000540 <Error_Handler>
  }
}
 80004c2:	bf00      	nop
 80004c4:	3770      	adds	r7, #112	; 0x70
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	58024800 	.word	0x58024800

080004d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b19      	ldr	r3, [pc, #100]	; (800053c <MX_GPIO_Init+0x6c>)
 80004d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004dc:	4a17      	ldr	r2, [pc, #92]	; (800053c <MX_GPIO_Init+0x6c>)
 80004de:	f043 0304 	orr.w	r3, r3, #4
 80004e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004e6:	4b15      	ldr	r3, [pc, #84]	; (800053c <MX_GPIO_Init+0x6c>)
 80004e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ec:	f003 0304 	and.w	r3, r3, #4
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <MX_GPIO_Init+0x6c>)
 80004f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004fa:	4a10      	ldr	r2, [pc, #64]	; (800053c <MX_GPIO_Init+0x6c>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000504:	4b0d      	ldr	r3, [pc, #52]	; (800053c <MX_GPIO_Init+0x6c>)
 8000506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <MX_GPIO_Init+0x6c>)
 8000514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000518:	4a08      	ldr	r2, [pc, #32]	; (800053c <MX_GPIO_Init+0x6c>)
 800051a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000522:	4b06      	ldr	r3, [pc, #24]	; (800053c <MX_GPIO_Init+0x6c>)
 8000524:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000530:	bf00      	nop
 8000532:	3714      	adds	r7, #20
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr
 800053c:	58024400 	.word	0x58024400

08000540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000544:	b672      	cpsid	i
}
 8000546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000548:	e7fe      	b.n	8000548 <Error_Handler+0x8>
	...

0800054c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000552:	4b0a      	ldr	r3, [pc, #40]	; (800057c <HAL_MspInit+0x30>)
 8000554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <HAL_MspInit+0x30>)
 800055a:	f043 0302 	orr.w	r3, r3, #2
 800055e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000562:	4b06      	ldr	r3, [pc, #24]	; (800057c <HAL_MspInit+0x30>)
 8000564:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000568:	f003 0302 	and.w	r3, r3, #2
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	58024400 	.word	0x58024400

08000580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000584:	e7fe      	b.n	8000584 <NMI_Handler+0x4>

08000586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800058a:	e7fe      	b.n	800058a <HardFault_Handler+0x4>

0800058c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800058c:	b480      	push	{r7}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000590:	e7fe      	b.n	8000590 <MemManage_Handler+0x4>

08000592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000592:	b480      	push	{r7}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000596:	e7fe      	b.n	8000596 <BusFault_Handler+0x4>

08000598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800059c:	e7fe      	b.n	800059c <UsageFault_Handler+0x4>

0800059e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800059e:	b480      	push	{r7}
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr

080005ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005cc:	f000 f9c4 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <OTG_HS_IRQHandler+0x10>)
 80005da:	f000 fc69 	bl	8000eb0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	24001664 	.word	0x24001664

080005e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	e00a      	b.n	8000610 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005fa:	f3af 8000 	nop.w
 80005fe:	4601      	mov	r1, r0
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	b2ca      	uxtb	r2, r1
 8000608:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbf0      	blt.n	80005fa <_read+0x12>
  }

  return len;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	e009      	b.n	8000648 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	60ba      	str	r2, [r7, #8]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	3301      	adds	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	429a      	cmp	r2, r3
 800064e:	dbf1      	blt.n	8000634 <_write+0x12>
  }
  return len;
 8000650:	687b      	ldr	r3, [r7, #4]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <_close>:

int _close(int file)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000682:	605a      	str	r2, [r3, #4]
  return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_isatty>:

int _isatty(int file)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006cc:	4a14      	ldr	r2, [pc, #80]	; (8000720 <_sbrk+0x5c>)
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <_sbrk+0x60>)
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <_sbrk+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <_sbrk+0x64>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <_sbrk+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d207      	bcs.n	8000704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f4:	f008 f96e 	bl	80089d4 <__errno>
 80006f8:	4603      	mov	r3, r0
 80006fa:	220c      	movs	r2, #12
 80006fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	e009      	b.n	8000718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <_sbrk+0x64>)
 8000714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	24050000 	.word	0x24050000
 8000724:	00000500 	.word	0x00000500
 8000728:	2400017c 	.word	0x2400017c
 800072c:	24001ee0 	.word	0x24001ee0

08000730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000734:	4b32      	ldr	r3, [pc, #200]	; (8000800 <SystemInit+0xd0>)
 8000736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800073a:	4a31      	ldr	r2, [pc, #196]	; (8000800 <SystemInit+0xd0>)
 800073c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000744:	4b2f      	ldr	r3, [pc, #188]	; (8000804 <SystemInit+0xd4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f003 030f 	and.w	r3, r3, #15
 800074c:	2b06      	cmp	r3, #6
 800074e:	d807      	bhi.n	8000760 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000750:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <SystemInit+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f023 030f 	bic.w	r3, r3, #15
 8000758:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <SystemInit+0xd4>)
 800075a:	f043 0307 	orr.w	r3, r3, #7
 800075e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000760:	4b29      	ldr	r3, [pc, #164]	; (8000808 <SystemInit+0xd8>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a28      	ldr	r2, [pc, #160]	; (8000808 <SystemInit+0xd8>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800076c:	4b26      	ldr	r3, [pc, #152]	; (8000808 <SystemInit+0xd8>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000772:	4b25      	ldr	r3, [pc, #148]	; (8000808 <SystemInit+0xd8>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4924      	ldr	r1, [pc, #144]	; (8000808 <SystemInit+0xd8>)
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <SystemInit+0xdc>)
 800077a:	4013      	ands	r3, r2
 800077c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <SystemInit+0xd4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f003 0308 	and.w	r3, r3, #8
 8000786:	2b00      	cmp	r3, #0
 8000788:	d007      	beq.n	800079a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <SystemInit+0xd4>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f023 030f 	bic.w	r3, r3, #15
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <SystemInit+0xd4>)
 8000794:	f043 0307 	orr.w	r3, r3, #7
 8000798:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <SystemInit+0xd8>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <SystemInit+0xd8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <SystemInit+0xd8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <SystemInit+0xd8>)
 80007ae:	4a18      	ldr	r2, [pc, #96]	; (8000810 <SystemInit+0xe0>)
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <SystemInit+0xd8>)
 80007b4:	4a17      	ldr	r2, [pc, #92]	; (8000814 <SystemInit+0xe4>)
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <SystemInit+0xd8>)
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <SystemInit+0xe8>)
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <SystemInit+0xd8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80007c4:	4b10      	ldr	r3, [pc, #64]	; (8000808 <SystemInit+0xd8>)
 80007c6:	4a14      	ldr	r2, [pc, #80]	; (8000818 <SystemInit+0xe8>)
 80007c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <SystemInit+0xd8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <SystemInit+0xd8>)
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <SystemInit+0xe8>)
 80007d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <SystemInit+0xd8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <SystemInit+0xd8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a09      	ldr	r2, [pc, #36]	; (8000808 <SystemInit+0xd8>)
 80007e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <SystemInit+0xd8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <SystemInit+0xec>)
 80007f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80007f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	e000ed00 	.word	0xe000ed00
 8000804:	52002000 	.word	0x52002000
 8000808:	58024400 	.word	0x58024400
 800080c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000810:	02020200 	.word	0x02020200
 8000814:	01ff0000 	.word	0x01ff0000
 8000818:	01010280 	.word	0x01010280
 800081c:	52004000 	.word	0x52004000

08000820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000858 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000824:	f7ff ff84 	bl	8000730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800082a:	490d      	ldr	r1, [pc, #52]	; (8000860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800082c:	4a0d      	ldr	r2, [pc, #52]	; (8000864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800082e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000830:	e002      	b.n	8000838 <LoopCopyDataInit>

08000832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000836:	3304      	adds	r3, #4

08000838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800083c:	d3f9      	bcc.n	8000832 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800083e:	4a0a      	ldr	r2, [pc, #40]	; (8000868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000840:	4c0a      	ldr	r4, [pc, #40]	; (800086c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000844:	e001      	b.n	800084a <LoopFillZerobss>

08000846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000848:	3204      	adds	r2, #4

0800084a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800084c:	d3fb      	bcc.n	8000846 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800084e:	f008 f8c7 	bl	80089e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000852:	f7ff fdc9 	bl	80003e8 <main>
  bx  lr
 8000856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000858:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800085c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000860:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8000864:	080096d4 	.word	0x080096d4
  ldr r2, =_sbss
 8000868:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 800086c:	24001edc 	.word	0x24001edc

08000870 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000870:	e7fe      	b.n	8000870 <ADC3_IRQHandler>
	...

08000874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800087a:	2003      	movs	r0, #3
 800087c:	f000 f980 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000880:	f002 fa16 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8000884:	4602      	mov	r2, r0
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_Init+0x68>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	0a1b      	lsrs	r3, r3, #8
 800088c:	f003 030f 	and.w	r3, r3, #15
 8000890:	4913      	ldr	r1, [pc, #76]	; (80008e0 <HAL_Init+0x6c>)
 8000892:	5ccb      	ldrb	r3, [r1, r3]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	fa22 f303 	lsr.w	r3, r2, r3
 800089c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_Init+0x68>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f003 030f 	and.w	r3, r3, #15
 80008a6:	4a0e      	ldr	r2, [pc, #56]	; (80008e0 <HAL_Init+0x6c>)
 80008a8:	5cd3      	ldrb	r3, [r2, r3]
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	fa22 f303 	lsr.w	r3, r2, r3
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <HAL_Init+0x70>)
 80008b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <HAL_Init+0x74>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008be:	200f      	movs	r0, #15
 80008c0:	f000 f814 	bl	80008ec <HAL_InitTick>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
 80008cc:	e002      	b.n	80008d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80008ce:	f7ff fe3d 	bl	800054c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	58024400 	.word	0x58024400
 80008e0:	08009688 	.word	0x08009688
 80008e4:	24000004 	.word	0x24000004
 80008e8:	24000000 	.word	0x24000000

080008ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <HAL_InitTick+0x60>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d101      	bne.n	8000900 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80008fc:	2301      	movs	r3, #1
 80008fe:	e021      	b.n	8000944 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <HAL_InitTick+0x64>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_InitTick+0x60>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f965 	bl	8000be6 <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f92f 	bl	8000b96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x68>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2400000c 	.word	0x2400000c
 8000950:	24000000 	.word	0x24000000
 8000954:	24000008 	.word	0x24000008

08000958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	2400000c 	.word	0x2400000c
 800097c:	24000180 	.word	0x24000180

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	24000180 	.word	0x24000180

08000998 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff ffee 	bl	8000980 <HAL_GetTick>
 80009a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009be:	bf00      	nop
 80009c0:	f7ff ffde 	bl	8000980 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2400000c 	.word	0x2400000c

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <__NVIC_SetPriorityGrouping+0x40>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a0a:	4313      	orrs	r3, r2
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x40>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00
 8000a24:	05fa0000 	.word	0x05fa0000

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	db0b      	blt.n	8000a6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a56:	88fb      	ldrh	r3, [r7, #6]
 8000a58:	f003 021f 	and.w	r2, r3, #31
 8000a5c:	4907      	ldr	r1, [pc, #28]	; (8000a7c <__NVIC_EnableIRQ+0x38>)
 8000a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a62:	095b      	lsrs	r3, r3, #5
 8000a64:	2001      	movs	r0, #1
 8000a66:	fa00 f202 	lsl.w	r2, r0, r2
 8000a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	e000e100 	.word	0xe000e100

08000a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	db0a      	blt.n	8000aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <__NVIC_SetPriority+0x4c>)
 8000a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a9e:	0112      	lsls	r2, r2, #4
 8000aa0:	b2d2      	uxtb	r2, r2
 8000aa2:	440b      	add	r3, r1
 8000aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa8:	e00a      	b.n	8000ac0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4908      	ldr	r1, [pc, #32]	; (8000ad0 <__NVIC_SetPriority+0x50>)
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	f003 030f 	and.w	r3, r3, #15
 8000ab6:	3b04      	subs	r3, #4
 8000ab8:	0112      	lsls	r2, r2, #4
 8000aba:	b2d2      	uxtb	r2, r2
 8000abc:	440b      	add	r3, r1
 8000abe:	761a      	strb	r2, [r3, #24]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000e100 	.word	0xe000e100
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b089      	sub	sp, #36	; 0x24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae8:	69fb      	ldr	r3, [r7, #28]
 8000aea:	f1c3 0307 	rsb	r3, r3, #7
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	bf28      	it	cs
 8000af2:	2304      	movcs	r3, #4
 8000af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3304      	adds	r3, #4
 8000afa:	2b06      	cmp	r3, #6
 8000afc:	d902      	bls.n	8000b04 <NVIC_EncodePriority+0x30>
 8000afe:	69fb      	ldr	r3, [r7, #28]
 8000b00:	3b03      	subs	r3, #3
 8000b02:	e000      	b.n	8000b06 <NVIC_EncodePriority+0x32>
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43da      	mvns	r2, r3
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	401a      	ands	r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	fa01 f303 	lsl.w	r3, r1, r3
 8000b26:	43d9      	mvns	r1, r3
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	4313      	orrs	r3, r2
         );
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3724      	adds	r7, #36	; 0x24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
	...

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff8e 	bl	8000a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff29 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
 8000ba2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba4:	f7ff ff40 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	6978      	ldr	r0, [r7, #20]
 8000bb0:	f7ff ff90 	bl	8000ad4 <NVIC_EncodePriority>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff ff5f 	bl	8000a80 <__NVIC_SetPriority>
}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b082      	sub	sp, #8
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff ff33 	bl	8000a44 <__NVIC_EnableIRQ>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	b082      	sub	sp, #8
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff ffa4 	bl	8000b3c <SysTick_Config>
 8000bf4:	4603      	mov	r3, r0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c00:	b08f      	sub	sp, #60	; 0x3c
 8000c02:	af0a      	add	r7, sp, #40	; 0x28
 8000c04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d101      	bne.n	8000c10 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e116      	b.n	8000e3e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d106      	bne.n	8000c30 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f007 fa58 	bl	80080e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2203      	movs	r2, #3
 8000c34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f003 fdfd 	bl	800484e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	687e      	ldr	r6, [r7, #4]
 8000c5c:	466d      	mov	r5, sp
 8000c5e:	f106 0410 	add.w	r4, r6, #16
 8000c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c72:	1d33      	adds	r3, r6, #4
 8000c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c76:	6838      	ldr	r0, [r7, #0]
 8000c78:	f003 fcc8 	bl	800460c <USB_CoreInit>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d005      	beq.n	8000c8e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2202      	movs	r2, #2
 8000c86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e0d7      	b.n	8000e3e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f003 fdeb 	bl	8004870 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e04a      	b.n	8000d36 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4413      	add	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	440b      	add	r3, r1
 8000cae:	333d      	adds	r3, #61	; 0x3d
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000cb4:	7bfa      	ldrb	r2, [r7, #15]
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	00db      	lsls	r3, r3, #3
 8000cbc:	4413      	add	r3, r2
 8000cbe:	009b      	lsls	r3, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	333c      	adds	r3, #60	; 0x3c
 8000cc4:	7bfa      	ldrb	r2, [r7, #15]
 8000cc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000cc8:	7bfa      	ldrb	r2, [r7, #15]
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	b298      	uxth	r0, r3
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4413      	add	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	440b      	add	r3, r1
 8000cda:	3356      	adds	r3, #86	; 0x56
 8000cdc:	4602      	mov	r2, r0
 8000cde:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000ce0:	7bfa      	ldrb	r2, [r7, #15]
 8000ce2:	6879      	ldr	r1, [r7, #4]
 8000ce4:	4613      	mov	r3, r2
 8000ce6:	00db      	lsls	r3, r3, #3
 8000ce8:	4413      	add	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	440b      	add	r3, r1
 8000cee:	3340      	adds	r3, #64	; 0x40
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000cf4:	7bfa      	ldrb	r2, [r7, #15]
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	440b      	add	r3, r1
 8000d02:	3344      	adds	r3, #68	; 0x44
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000d08:	7bfa      	ldrb	r2, [r7, #15]
 8000d0a:	6879      	ldr	r1, [r7, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	00db      	lsls	r3, r3, #3
 8000d10:	4413      	add	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	3348      	adds	r3, #72	; 0x48
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	4613      	mov	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4413      	add	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	440b      	add	r3, r1
 8000d2a:	334c      	adds	r3, #76	; 0x4c
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	3301      	adds	r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	7bfa      	ldrb	r2, [r7, #15]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d3af      	bcc.n	8000ca0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e044      	b.n	8000dd0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000d46:	7bfa      	ldrb	r2, [r7, #15]
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4413      	add	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	440b      	add	r3, r1
 8000d54:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000d5c:	7bfa      	ldrb	r2, [r7, #15]
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	4613      	mov	r3, r2
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	4413      	add	r3, r2
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	440b      	add	r3, r1
 8000d6a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8000d6e:	7bfa      	ldrb	r2, [r7, #15]
 8000d70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	6879      	ldr	r1, [r7, #4]
 8000d76:	4613      	mov	r3, r2
 8000d78:	00db      	lsls	r3, r3, #3
 8000d7a:	4413      	add	r3, r2
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	440b      	add	r3, r1
 8000d80:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d88:	7bfa      	ldrb	r2, [r7, #15]
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	4413      	add	r3, r2
 8000d92:	009b      	lsls	r3, r3, #2
 8000d94:	440b      	add	r3, r1
 8000d96:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d9e:	7bfa      	ldrb	r2, [r7, #15]
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	4413      	add	r3, r2
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	440b      	add	r3, r1
 8000dac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000db4:	7bfa      	ldrb	r2, [r7, #15]
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	4413      	add	r3, r2
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
 8000dd0:	7bfa      	ldrb	r2, [r7, #15]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d3b5      	bcc.n	8000d46 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	687e      	ldr	r6, [r7, #4]
 8000de2:	466d      	mov	r5, sp
 8000de4:	f106 0410 	add.w	r4, r6, #16
 8000de8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000df0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000df4:	e885 0003 	stmia.w	r5, {r0, r1}
 8000df8:	1d33      	adds	r3, r6, #4
 8000dfa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f003 fd83 	bl	8004908 <USB_DevInit>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d005      	beq.n	8000e14 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e014      	b.n	8000e3e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2201      	movs	r2, #1
 8000e20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	2b01      	cmp	r3, #1
 8000e2a:	d102      	bne.n	8000e32 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f001 f96f 	bl	8002110 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 fdc5 	bl	80059c6 <USB_DevDisconnect>

  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000e46 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b084      	sub	sp, #16
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d101      	bne.n	8000e62 <HAL_PCD_Start+0x1c>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e022      	b.n	8000ea8 <HAL_PCD_Start+0x62>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2201      	movs	r2, #1
 8000e66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d109      	bne.n	8000e8a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d105      	bne.n	8000e8a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 fccc 	bl	800482c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f004 fd73 	bl	8005984 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08d      	sub	sp, #52	; 0x34
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f004 fe31 	bl	8005b2e <USB_GetMode>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f040 84b7 	bne.w	8001842 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 fd95 	bl	8005a08 <USB_ReadInterrupts>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f000 84ad 	beq.w	8001840 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f004 fd82 	bl	8005a08 <USB_ReadInterrupts>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f003 0302 	and.w	r3, r3, #2
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d107      	bne.n	8000f1e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	695a      	ldr	r2, [r3, #20]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f002 0202 	and.w	r2, r2, #2
 8000f1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f004 fd70 	bl	8005a08 <USB_ReadInterrupts>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f003 0310 	and.w	r3, r3, #16
 8000f2e:	2b10      	cmp	r3, #16
 8000f30:	d161      	bne.n	8000ff6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	699a      	ldr	r2, [r3, #24]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f022 0210 	bic.w	r2, r2, #16
 8000f40:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8000f42:	6a3b      	ldr	r3, [r7, #32]
 8000f44:	6a1b      	ldr	r3, [r3, #32]
 8000f46:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	f003 020f 	and.w	r2, r3, #15
 8000f4e:	4613      	mov	r3, r2
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3304      	adds	r3, #4
 8000f60:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	0c5b      	lsrs	r3, r3, #17
 8000f66:	f003 030f 	and.w	r3, r3, #15
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d124      	bne.n	8000fb8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8000f74:	4013      	ands	r3, r2
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d035      	beq.n	8000fe6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	091b      	lsrs	r3, r3, #4
 8000f82:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8000f84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	6a38      	ldr	r0, [r7, #32]
 8000f8e:	f004 fba7 	bl	80056e0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	68da      	ldr	r2, [r3, #12]
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000f9e:	441a      	add	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fb0:	441a      	add	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	615a      	str	r2, [r3, #20]
 8000fb6:	e016      	b.n	8000fe6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	0c5b      	lsrs	r3, r3, #17
 8000fbc:	f003 030f 	and.w	r3, r3, #15
 8000fc0:	2b06      	cmp	r3, #6
 8000fc2:	d110      	bne.n	8000fe6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8000fca:	2208      	movs	r2, #8
 8000fcc:	4619      	mov	r1, r3
 8000fce:	6a38      	ldr	r0, [r7, #32]
 8000fd0:	f004 fb86 	bl	80056e0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	695a      	ldr	r2, [r3, #20]
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	091b      	lsrs	r3, r3, #4
 8000fdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000fe0:	441a      	add	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	699a      	ldr	r2, [r3, #24]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f042 0210 	orr.w	r2, r2, #16
 8000ff4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f004 fd04 	bl	8005a08 <USB_ReadInterrupts>
 8001000:	4603      	mov	r3, r0
 8001002:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001006:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800100a:	f040 80a7 	bne.w	800115c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f004 fd09 	bl	8005a2e <USB_ReadDevAllOutEpInterrupt>
 800101c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800101e:	e099      	b.n	8001154 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 808e 	beq.w	8001148 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f004 fd2d 	bl	8005a96 <USB_ReadDevOutEPInterrupt>
 800103c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00c      	beq.n	8001062 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104a:	015a      	lsls	r2, r3, #5
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	4413      	add	r3, r2
 8001050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001054:	461a      	mov	r2, r3
 8001056:	2301      	movs	r3, #1
 8001058:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800105a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f000 fed1 	bl	8001e04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d00c      	beq.n	8001086 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	015a      	lsls	r2, r3, #5
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	4413      	add	r3, r2
 8001074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001078:	461a      	mov	r2, r3
 800107a:	2308      	movs	r3, #8
 800107c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800107e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f000 ffa7 	bl	8001fd4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	2b00      	cmp	r3, #0
 800108e:	d008      	beq.n	80010a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	015a      	lsls	r2, r3, #5
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	4413      	add	r3, r2
 8001098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800109c:	461a      	mov	r2, r3
 800109e:	2310      	movs	r3, #16
 80010a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d030      	beq.n	800110e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80010ac:	6a3b      	ldr	r3, [r7, #32]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010b4:	2b80      	cmp	r3, #128	; 0x80
 80010b6:	d109      	bne.n	80010cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	69fa      	ldr	r2, [r7, #28]
 80010c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80010c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80010cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ce:	4613      	mov	r3, r2
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4413      	add	r3, r2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	3304      	adds	r3, #4
 80010e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	78db      	ldrb	r3, [r3, #3]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d108      	bne.n	80010fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2200      	movs	r2, #0
 80010ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	4619      	mov	r1, r3
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f007 f8ea 	bl	80082d0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	015a      	lsls	r2, r3, #5
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	4413      	add	r3, r2
 8001104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001108:	461a      	mov	r2, r3
 800110a:	2302      	movs	r3, #2
 800110c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	f003 0320 	and.w	r3, r3, #32
 8001114:	2b00      	cmp	r3, #0
 8001116:	d008      	beq.n	800112a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	015a      	lsls	r2, r3, #5
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	4413      	add	r3, r2
 8001120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001124:	461a      	mov	r2, r3
 8001126:	2320      	movs	r3, #32
 8001128:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d009      	beq.n	8001148 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001136:	015a      	lsls	r2, r3, #5
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	4413      	add	r3, r2
 800113c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001140:	461a      	mov	r2, r3
 8001142:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001146:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	3301      	adds	r3, #1
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800114e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001150:	085b      	lsrs	r3, r3, #1
 8001152:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001156:	2b00      	cmp	r3, #0
 8001158:	f47f af62 	bne.w	8001020 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f004 fc51 	bl	8005a08 <USB_ReadInterrupts>
 8001166:	4603      	mov	r3, r0
 8001168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800116c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001170:	f040 80db 	bne.w	800132a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f004 fc72 	bl	8005a62 <USB_ReadDevAllInEpInterrupt>
 800117e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001184:	e0cd      	b.n	8001322 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 80c2 	beq.w	8001316 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f004 fc98 	bl	8005ad2 <USB_ReadDevInEPInterrupt>
 80011a2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d057      	beq.n	800125e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	2201      	movs	r2, #1
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69f9      	ldr	r1, [r7, #28]
 80011ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80011ce:	4013      	ands	r3, r2
 80011d0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	015a      	lsls	r2, r3, #5
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	4413      	add	r3, r2
 80011da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80011de:	461a      	mov	r2, r3
 80011e0:	2301      	movs	r3, #1
 80011e2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d132      	bne.n	8001252 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	3348      	adds	r3, #72	; 0x48
 80011fc:	6819      	ldr	r1, [r3, #0]
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4403      	add	r3, r0
 800120c:	3344      	adds	r3, #68	; 0x44
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4419      	add	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4403      	add	r3, r0
 8001220:	3348      	adds	r3, #72	; 0x48
 8001222:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	2b00      	cmp	r3, #0
 8001228:	d113      	bne.n	8001252 <HAL_PCD_IRQHandler+0x3a2>
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800122e:	4613      	mov	r3, r2
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	4413      	add	r3, r2
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	334c      	adds	r3, #76	; 0x4c
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d108      	bne.n	8001252 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800124a:	461a      	mov	r2, r3
 800124c:	2101      	movs	r1, #1
 800124e:	f004 fca1 	bl	8005b94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	b2db      	uxtb	r3, r3
 8001256:	4619      	mov	r1, r3
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f006 ffb4 	bl	80081c6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d008      	beq.n	800127a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126a:	015a      	lsls	r2, r3, #5
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	4413      	add	r3, r2
 8001270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001274:	461a      	mov	r2, r3
 8001276:	2308      	movs	r3, #8
 8001278:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	f003 0310 	and.w	r3, r3, #16
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	015a      	lsls	r2, r3, #5
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	4413      	add	r3, r2
 800128c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001290:	461a      	mov	r2, r3
 8001292:	2310      	movs	r3, #16
 8001294:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80012a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a2:	015a      	lsls	r2, r3, #5
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	4413      	add	r3, r2
 80012a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012ac:	461a      	mov	r2, r3
 80012ae:	2340      	movs	r3, #64	; 0x40
 80012b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	f003 0302 	and.w	r3, r3, #2
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d023      	beq.n	8001304 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80012bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012be:	6a38      	ldr	r0, [r7, #32]
 80012c0:	f003 fc80 	bl	8004bc4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80012c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c6:	4613      	mov	r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	3338      	adds	r3, #56	; 0x38
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	4413      	add	r3, r2
 80012d4:	3304      	adds	r3, #4
 80012d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	78db      	ldrb	r3, [r3, #3]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d108      	bne.n	80012f2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2200      	movs	r2, #0
 80012e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	4619      	mov	r1, r3
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f007 f801 	bl	80082f4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	015a      	lsls	r2, r3, #5
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	4413      	add	r3, r2
 80012fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80012fe:	461a      	mov	r2, r3
 8001300:	2302      	movs	r3, #2
 8001302:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800130e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 fcea 	bl	8001cea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3301      	adds	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800131c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800131e:	085b      	lsrs	r3, r3, #1
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001324:	2b00      	cmp	r3, #0
 8001326:	f47f af2e 	bne.w	8001186 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f004 fb6a 	bl	8005a08 <USB_ReadInterrupts>
 8001334:	4603      	mov	r3, r0
 8001336:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800133a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800133e:	d122      	bne.n	8001386 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800135a:	2b01      	cmp	r3, #1
 800135c:	d108      	bne.n	8001370 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001366:	2100      	movs	r1, #0
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 fef5 	bl	8002158 <HAL_PCDEx_LPM_Callback>
 800136e:	e002      	b.n	8001376 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f006 ff9f 	bl	80082b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f004 fb3c 	bl	8005a08 <USB_ReadInterrupts>
 8001390:	4603      	mov	r3, r0
 8001392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800139a:	d112      	bne.n	80013c2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d102      	bne.n	80013b2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f006 ff5b 	bl	8008268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80013c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f004 fb1e 	bl	8005a08 <USB_ReadInterrupts>
 80013cc:	4603      	mov	r3, r0
 80013ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80013d6:	d121      	bne.n	800141c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80013e6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d111      	bne.n	8001416 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001400:	089b      	lsrs	r3, r3, #2
 8001402:	f003 020f 	and.w	r2, r3, #15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800140c:	2101      	movs	r1, #1
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fea2 	bl	8002158 <HAL_PCDEx_LPM_Callback>
 8001414:	e002      	b.n	800141c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f006 ff26 	bl	8008268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f004 faf1 	bl	8005a08 <USB_ReadInterrupts>
 8001426:	4603      	mov	r3, r0
 8001428:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800142c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001430:	f040 80b7 	bne.w	80015a2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	69fa      	ldr	r2, [r7, #28]
 800143e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001442:	f023 0301 	bic.w	r3, r3, #1
 8001446:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2110      	movs	r1, #16
 800144e:	4618      	mov	r0, r3
 8001450:	f003 fbb8 	bl	8004bc4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001458:	e046      	b.n	80014e8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800145a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145c:	015a      	lsls	r2, r3, #5
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	4413      	add	r3, r2
 8001462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001466:	461a      	mov	r2, r3
 8001468:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800146c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800147e:	0151      	lsls	r1, r2, #5
 8001480:	69fa      	ldr	r2, [r7, #28]
 8001482:	440a      	add	r2, r1
 8001484:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001488:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800148c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800148e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001490:	015a      	lsls	r2, r3, #5
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4413      	add	r3, r2
 8001496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800149a:	461a      	mov	r2, r3
 800149c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80014a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80014a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a4:	015a      	lsls	r2, r3, #5
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	4413      	add	r3, r2
 80014aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b2:	0151      	lsls	r1, r2, #5
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	440a      	add	r2, r1
 80014b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80014bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80014c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	015a      	lsls	r2, r3, #5
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	4413      	add	r3, r2
 80014ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014d2:	0151      	lsls	r1, r2, #5
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	440a      	add	r2, r1
 80014d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80014dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80014e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e4:	3301      	adds	r3, #1
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d3b3      	bcc.n	800145a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001500:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001504:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	2b00      	cmp	r3, #0
 800150c:	d016      	beq.n	800153c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800151e:	f043 030b 	orr.w	r3, r3, #11
 8001522:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	69fa      	ldr	r2, [r7, #28]
 8001530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001534:	f043 030b 	orr.w	r3, r3, #11
 8001538:	6453      	str	r3, [r2, #68]	; 0x44
 800153a:	e015      	b.n	8001568 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800154a:	4619      	mov	r1, r3
 800154c:	f242 032b 	movw	r3, #8235	; 0x202b
 8001550:	4313      	orrs	r3, r2
 8001552:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	69fa      	ldr	r2, [r7, #28]
 800155e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001562:	f043 030b 	orr.w	r3, r3, #11
 8001566:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	69fa      	ldr	r2, [r7, #28]
 8001572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001576:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800157a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800158c:	461a      	mov	r2, r3
 800158e:	f004 fb01 	bl	8005b94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	695a      	ldr	r2, [r3, #20]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80015a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 fa2e 	bl	8005a08 <USB_ReadInterrupts>
 80015ac:	4603      	mov	r3, r0
 80015ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015b6:	d124      	bne.n	8001602 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f004 fac5 	bl	8005b4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 fb79 	bl	8004cbe <USB_GetDevSpeed>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681c      	ldr	r4, [r3, #0]
 80015d8:	f001 fce4 	bl	8002fa4 <HAL_RCC_GetHCLKFreq>
 80015dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	4620      	mov	r0, r4
 80015e8:	f003 f87e 	bl	80046e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f006 fe12 	bl	8008216 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	695a      	ldr	r2, [r3, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001600:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f004 f9fe 	bl	8005a08 <USB_ReadInterrupts>
 800160c:	4603      	mov	r3, r0
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b08      	cmp	r3, #8
 8001614:	d10a      	bne.n	800162c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f006 fdef 	bl	80081fa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695a      	ldr	r2, [r3, #20]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f002 0208 	and.w	r2, r2, #8
 800162a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f004 f9e9 	bl	8005a08 <USB_ReadInterrupts>
 8001636:	4603      	mov	r3, r0
 8001638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163c:	2b80      	cmp	r3, #128	; 0x80
 800163e:	d122      	bne.n	8001686 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800164c:	2301      	movs	r3, #1
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
 8001650:	e014      	b.n	800167c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001656:	4613      	mov	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	4413      	add	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	440b      	add	r3, r1
 8001660:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b01      	cmp	r3, #1
 8001668:	d105      	bne.n	8001676 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	b2db      	uxtb	r3, r3
 800166e:	4619      	mov	r1, r3
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fb09 	bl	8001c88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	3301      	adds	r3, #1
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001682:	429a      	cmp	r2, r3
 8001684:	d3e5      	bcc.n	8001652 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f004 f9bc 	bl	8005a08 <USB_ReadInterrupts>
 8001690:	4603      	mov	r3, r0
 8001692:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800169a:	d13b      	bne.n	8001714 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
 80016a0:	e02b      	b.n	80016fa <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b6:	4613      	mov	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	4413      	add	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	3340      	adds	r3, #64	; 0x40
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d115      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80016c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	da12      	bge.n	80016f4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d2:	4613      	mov	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	4413      	add	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	440b      	add	r3, r1
 80016dc:	333f      	adds	r3, #63	; 0x3f
 80016de:	2201      	movs	r2, #1
 80016e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 faca 	bl	8001c88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80016f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f6:	3301      	adds	r3, #1
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001700:	429a      	cmp	r2, r3
 8001702:	d3ce      	bcc.n	80016a2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f004 f975 	bl	8005a08 <USB_ReadInterrupts>
 800171e:	4603      	mov	r3, r0
 8001720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001724:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001728:	d155      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800172a:	2301      	movs	r3, #1
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
 800172e:	e045      	b.n	80017bc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	015a      	lsls	r2, r3, #5
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	4613      	mov	r3, r2
 8001746:	00db      	lsls	r3, r3, #3
 8001748:	4413      	add	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	440b      	add	r3, r1
 800174e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d12e      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001758:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	da2b      	bge.n	80017b6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800176a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800176e:	429a      	cmp	r2, r3
 8001770:	d121      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001776:	4613      	mov	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	4413      	add	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	699b      	ldr	r3, [r3, #24]
 800178c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001790:	6a3b      	ldr	r3, [r7, #32]
 8001792:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10a      	bne.n	80017b6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	69fa      	ldr	r2, [r7, #28]
 80017aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b2:	6053      	str	r3, [r2, #4]
            break;
 80017b4:	e007      	b.n	80017c6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	3301      	adds	r3, #1
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d3b4      	bcc.n	8001730 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f004 f914 	bl	8005a08 <USB_ReadInterrupts>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ea:	d10a      	bne.n	8001802 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f006 fd93 	bl	8008318 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	695a      	ldr	r2, [r3, #20]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001800:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f004 f8fe 	bl	8005a08 <USB_ReadInterrupts>
 800180c:	4603      	mov	r3, r0
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b04      	cmp	r3, #4
 8001814:	d115      	bne.n	8001842 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f006 fd83 	bl	8008334 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	430a      	orrs	r2, r1
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	e000      	b.n	8001842 <HAL_PCD_IRQHandler+0x992>
      return;
 8001840:	bf00      	nop
    }
  }
}
 8001842:	3734      	adds	r7, #52	; 0x34
 8001844:	46bd      	mov	sp, r7
 8001846:	bd90      	pop	{r4, r7, pc}

08001848 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800185a:	2b01      	cmp	r3, #1
 800185c:	d101      	bne.n	8001862 <HAL_PCD_SetAddress+0x1a>
 800185e:	2302      	movs	r3, #2
 8001860:	e013      	b.n	800188a <HAL_PCD_SetAddress+0x42>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	78fa      	ldrb	r2, [r7, #3]
 800186e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	78fa      	ldrb	r2, [r7, #3]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f004 f85c 	bl	8005938 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b084      	sub	sp, #16
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	4608      	mov	r0, r1
 800189c:	4611      	mov	r1, r2
 800189e:	461a      	mov	r2, r3
 80018a0:	4603      	mov	r3, r0
 80018a2:	70fb      	strb	r3, [r7, #3]
 80018a4:	460b      	mov	r3, r1
 80018a6:	803b      	strh	r3, [r7, #0]
 80018a8:	4613      	mov	r3, r2
 80018aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	da0f      	bge.n	80018d8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	f003 020f 	and.w	r2, r3, #15
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4413      	add	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	3338      	adds	r3, #56	; 0x38
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	3304      	adds	r3, #4
 80018ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2201      	movs	r2, #1
 80018d4:	705a      	strb	r2, [r3, #1]
 80018d6:	e00f      	b.n	80018f8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	f003 020f 	and.w	r2, r3, #15
 80018de:	4613      	mov	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	3304      	adds	r3, #4
 80018f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	f003 030f 	and.w	r3, r3, #15
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001904:	883a      	ldrh	r2, [r7, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	78ba      	ldrb	r2, [r7, #2]
 800190e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	785b      	ldrb	r3, [r3, #1]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001922:	78bb      	ldrb	r3, [r7, #2]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d102      	bne.n	800192e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001934:	2b01      	cmp	r3, #1
 8001936:	d101      	bne.n	800193c <HAL_PCD_EP_Open+0xaa>
 8001938:	2302      	movs	r3, #2
 800193a:	e00e      	b.n	800195a <HAL_PCD_EP_Open+0xc8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68f9      	ldr	r1, [r7, #12]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f9dc 	bl	8004d08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001958:	7afb      	ldrb	r3, [r7, #11]
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	460b      	mov	r3, r1
 800196c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800196e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001972:	2b00      	cmp	r3, #0
 8001974:	da0f      	bge.n	8001996 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	f003 020f 	and.w	r2, r3, #15
 800197c:	4613      	mov	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4413      	add	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	3338      	adds	r3, #56	; 0x38
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	3304      	adds	r3, #4
 800198c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2201      	movs	r2, #1
 8001992:	705a      	strb	r2, [r3, #1]
 8001994:	e00f      	b.n	80019b6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001996:	78fb      	ldrb	r3, [r7, #3]
 8001998:	f003 020f 	and.w	r2, r3, #15
 800199c:	4613      	mov	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2200      	movs	r2, #0
 80019b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80019b6:	78fb      	ldrb	r3, [r7, #3]
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d101      	bne.n	80019d0 <HAL_PCD_EP_Close+0x6e>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e00e      	b.n	80019ee <HAL_PCD_EP_Close+0x8c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68f9      	ldr	r1, [r7, #12]
 80019de:	4618      	mov	r0, r3
 80019e0:	f003 fa1a 	bl	8004e18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	460b      	mov	r3, r1
 8001a04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	f003 020f 	and.w	r2, r3, #15
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	00db      	lsls	r3, r3, #3
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2200      	movs	r2, #0
 8001a36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a38:	7afb      	ldrb	r3, [r7, #11]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d102      	bne.n	8001a52 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	6979      	ldr	r1, [r7, #20]
 8001a60:	f003 fab6 	bl	8004fd0 <USB_EPStartXfer>

  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a7a:	78fb      	ldrb	r3, [r7, #3]
 8001a7c:	f003 020f 	and.w	r2, r3, #15
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	4613      	mov	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4413      	add	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001a90:	681b      	ldr	r3, [r3, #0]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001aae:	7afb      	ldrb	r3, [r7, #11]
 8001ab0:	f003 020f 	and.w	r2, r3, #15
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	3338      	adds	r3, #56	; 0x38
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	683a      	ldr	r2, [r7, #0]
 8001ad0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2201      	movs	r2, #1
 8001adc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ade:	7afb      	ldrb	r3, [r7, #11]
 8001ae0:	f003 030f 	and.w	r3, r3, #15
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d102      	bne.n	8001af8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	461a      	mov	r2, r3
 8001b04:	6979      	ldr	r1, [r7, #20]
 8001b06:	f003 fa63 	bl	8004fd0 <USB_EPStartXfer>

  return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	f003 020f 	and.w	r2, r3, #15
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d901      	bls.n	8001b32 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e050      	b.n	8001bd4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	da0f      	bge.n	8001b5a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b3a:	78fb      	ldrb	r3, [r7, #3]
 8001b3c:	f003 020f 	and.w	r2, r3, #15
 8001b40:	4613      	mov	r3, r2
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4413      	add	r3, r2
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	3338      	adds	r3, #56	; 0x38
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3304      	adds	r3, #4
 8001b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	705a      	strb	r2, [r3, #1]
 8001b58:	e00d      	b.n	8001b76 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b5a:	78fa      	ldrb	r2, [r7, #3]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	4413      	add	r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	2200      	movs	r2, #0
 8001b74:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d101      	bne.n	8001b96 <HAL_PCD_EP_SetStall+0x82>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e01e      	b.n	8001bd4 <HAL_PCD_EP_SetStall+0xc0>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68f9      	ldr	r1, [r7, #12]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fdf3 	bl	8005790 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001baa:	78fb      	ldrb	r3, [r7, #3]
 8001bac:	f003 030f 	and.w	r3, r3, #15
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10a      	bne.n	8001bca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	b2d9      	uxtb	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	f003 ffe5 	bl	8005b94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 020f 	and.w	r2, r3, #15
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d901      	bls.n	8001bfa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e042      	b.n	8001c80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	da0f      	bge.n	8001c22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c02:	78fb      	ldrb	r3, [r7, #3]
 8001c04:	f003 020f 	and.w	r2, r3, #15
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	3338      	adds	r3, #56	; 0x38
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	3304      	adds	r3, #4
 8001c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	705a      	strb	r2, [r3, #1]
 8001c20:	e00f      	b.n	8001c42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c22:	78fb      	ldrb	r3, [r7, #3]
 8001c24:	f003 020f 	and.w	r2, r3, #15
 8001c28:	4613      	mov	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	4413      	add	r3, r2
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4413      	add	r3, r2
 8001c38:	3304      	adds	r3, #4
 8001c3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	b2da      	uxtb	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_PCD_EP_ClrStall+0x86>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e00e      	b.n	8001c80 <HAL_PCD_EP_ClrStall+0xa4>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68f9      	ldr	r1, [r7, #12]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f003 fdfb 	bl	800586c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c7e:	2300      	movs	r3, #0
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da0c      	bge.n	8001cb6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 020f 	and.w	r2, r3, #15
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	3338      	adds	r3, #56	; 0x38
 8001cac:	687a      	ldr	r2, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	3304      	adds	r3, #4
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	e00c      	b.n	8001cd0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cb6:	78fb      	ldrb	r3, [r7, #3]
 8001cb8:	f003 020f 	and.w	r2, r3, #15
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001cc8:	687a      	ldr	r2, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	3304      	adds	r3, #4
 8001cce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68f9      	ldr	r1, [r7, #12]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fc1a 	bl	8005510 <USB_EPStopXfer>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001ce0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b08a      	sub	sp, #40	; 0x28
 8001cee:	af02      	add	r7, sp, #8
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	3338      	adds	r3, #56	; 0x38
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3304      	adds	r3, #4
 8001d10:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	695a      	ldr	r2, [r3, #20]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d901      	bls.n	8001d22 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e06c      	b.n	8001dfc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d902      	bls.n	8001d3e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3303      	adds	r3, #3
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d46:	e02b      	b.n	8001da0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d902      	bls.n	8001d64 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	3303      	adds	r3, #3
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	68d9      	ldr	r1, [r3, #12]
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	b2da      	uxtb	r2, r3
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	9300      	str	r3, [sp, #0]
 8001d80:	4603      	mov	r3, r0
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f003 fc6e 	bl	8005664 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	441a      	add	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	441a      	add	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	015a      	lsls	r2, r3, #5
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4413      	add	r3, r2
 8001da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d809      	bhi.n	8001dca <PCD_WriteEmptyTxFifo+0xe0>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	695a      	ldr	r2, [r3, #20]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d203      	bcs.n	8001dca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1be      	bne.n	8001d48 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	691a      	ldr	r2, [r3, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d811      	bhi.n	8001dfa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f003 030f 	and.w	r3, r3, #15
 8001ddc:	2201      	movs	r2, #1
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	6939      	ldr	r1, [r7, #16]
 8001df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001df6:	4013      	ands	r3, r2
 8001df8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	333c      	adds	r3, #60	; 0x3c
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d17b      	bne.n	8001f32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d015      	beq.n	8001e70 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	4a61      	ldr	r2, [pc, #388]	; (8001fcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	f240 80b9 	bls.w	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80b3 	beq.w	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e66:	461a      	mov	r2, r3
 8001e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e6c:	6093      	str	r3, [r2, #8]
 8001e6e:	e0a7      	b.n	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d009      	beq.n	8001e8e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	015a      	lsls	r2, r3, #5
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4413      	add	r3, r2
 8001e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e86:	461a      	mov	r2, r3
 8001e88:	2320      	movs	r3, #32
 8001e8a:	6093      	str	r3, [r2, #8]
 8001e8c:	e098      	b.n	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f040 8093 	bne.w	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4a4b      	ldr	r2, [pc, #300]	; (8001fcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d90f      	bls.n	8001ec2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00a      	beq.n	8001ec2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb8:	461a      	mov	r2, r3
 8001eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ebe:	6093      	str	r3, [r2, #8]
 8001ec0:	e07e      	b.n	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4413      	add	r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a1a      	ldr	r2, [r3, #32]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	0159      	lsls	r1, r3, #5
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	440b      	add	r3, r1
 8001ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eee:	1ad2      	subs	r2, r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d114      	bne.n	8001f24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d109      	bne.n	8001f16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2101      	movs	r1, #1
 8001f10:	f003 fe40 	bl	8005b94 <USB_EP0_OutStart>
 8001f14:	e006      	b.n	8001f24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	68da      	ldr	r2, [r3, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	695b      	ldr	r3, [r3, #20]
 8001f1e:	441a      	add	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4619      	mov	r1, r3
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f006 f930 	bl	8008190 <HAL_PCD_DataOutStageCallback>
 8001f30:	e046      	b.n	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	4a26      	ldr	r2, [pc, #152]	; (8001fd0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d124      	bne.n	8001f84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	015a      	lsls	r2, r3, #5
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f50:	461a      	mov	r2, r3
 8001f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f56:	6093      	str	r3, [r2, #8]
 8001f58:	e032      	b.n	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f70:	461a      	mov	r2, r3
 8001f72:	2320      	movs	r3, #32
 8001f74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f006 f907 	bl	8008190 <HAL_PCD_DataOutStageCallback>
 8001f82:	e01d      	b.n	8001fc0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d114      	bne.n	8001fb4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	4413      	add	r3, r2
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	440b      	add	r3, r1
 8001f98:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d108      	bne.n	8001fb4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6818      	ldr	r0, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001fac:	461a      	mov	r2, r3
 8001fae:	2100      	movs	r1, #0
 8001fb0:	f003 fdf0 	bl	8005b94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	4619      	mov	r1, r3
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f006 f8e8 	bl	8008190 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	4f54300a 	.word	0x4f54300a
 8001fd0:	4f54310a 	.word	0x4f54310a

08001fd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	333c      	adds	r3, #60	; 0x3c
 8001fec:	3304      	adds	r3, #4
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4a15      	ldr	r2, [pc, #84]	; (800205c <PCD_EP_OutSetupPacket_int+0x88>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d90e      	bls.n	8002028 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002020:	461a      	mov	r2, r3
 8002022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002026:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f006 f89f 	bl	800816c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4a0a      	ldr	r2, [pc, #40]	; (800205c <PCD_EP_OutSetupPacket_int+0x88>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d90c      	bls.n	8002050 <PCD_EP_OutSetupPacket_int+0x7c>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d108      	bne.n	8002050 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002048:	461a      	mov	r2, r3
 800204a:	2101      	movs	r1, #1
 800204c:	f003 fda2 	bl	8005b94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	4f54300a 	.word	0x4f54300a

08002060 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
 800206c:	4613      	mov	r3, r2
 800206e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002076:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d107      	bne.n	800208e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800207e:	883b      	ldrh	r3, [r7, #0]
 8002080:	0419      	lsls	r1, r3, #16
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	430a      	orrs	r2, r1
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
 800208c:	e028      	b.n	80020e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002094:	0c1b      	lsrs	r3, r3, #16
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	4413      	add	r3, r2
 800209a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800209c:	2300      	movs	r3, #0
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	e00d      	b.n	80020be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	3340      	adds	r3, #64	; 0x40
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	4413      	add	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	3301      	adds	r3, #1
 80020bc:	73fb      	strb	r3, [r7, #15]
 80020be:	7bfa      	ldrb	r2, [r7, #15]
 80020c0:	78fb      	ldrb	r3, [r7, #3]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d3ec      	bcc.n	80020a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020c8:	883b      	ldrh	r3, [r7, #0]
 80020ca:	0418      	lsls	r0, r3, #16
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	78fb      	ldrb	r3, [r7, #3]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	4302      	orrs	r2, r0
 80020d8:	3340      	adds	r3, #64	; 0x40
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	460b      	mov	r3, r1
 80020f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	887a      	ldrh	r2, [r7, #2]
 8002100:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_PCDEx_ActivateLPM+0x44>)
 8002140:	4313      	orrs	r3, r2
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	10000003 	.word	0x10000003

08002158 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	460b      	mov	r3, r1
 8002162:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002174:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800217a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	58024800 	.word	0x58024800

08002190 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08c      	sub	sp, #48	; 0x30
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d101      	bne.n	80021a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e3c8      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 8087 	beq.w	80022be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021b0:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021ba:	4b86      	ldr	r3, [pc, #536]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80021c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c2:	2b10      	cmp	r3, #16
 80021c4:	d007      	beq.n	80021d6 <HAL_RCC_OscConfig+0x46>
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	2b18      	cmp	r3, #24
 80021ca:	d110      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d10b      	bne.n	80021ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d6:	4b7f      	ldr	r3, [pc, #508]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d06c      	beq.n	80022bc <HAL_RCC_OscConfig+0x12c>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d168      	bne.n	80022bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e3a2      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f6:	d106      	bne.n	8002206 <HAL_RCC_OscConfig+0x76>
 80021f8:	4b76      	ldr	r3, [pc, #472]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a75      	ldr	r2, [pc, #468]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80021fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e02e      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x98>
 800220e:	4b71      	ldr	r3, [pc, #452]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a70      	ldr	r2, [pc, #448]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b6e      	ldr	r3, [pc, #440]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a6d      	ldr	r2, [pc, #436]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e01d      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0xbc>
 8002232:	4b68      	ldr	r3, [pc, #416]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a67      	ldr	r2, [pc, #412]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b65      	ldr	r3, [pc, #404]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a64      	ldr	r2, [pc, #400]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e00b      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 800224c:	4b61      	ldr	r3, [pc, #388]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a60      	ldr	r2, [pc, #384]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	4b5e      	ldr	r3, [pc, #376]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a5d      	ldr	r2, [pc, #372]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 800225e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d013      	beq.n	8002294 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226c:	f7fe fb88 	bl	8000980 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002274:	f7fe fb84 	bl	8000980 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e356      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002286:	4b53      	ldr	r3, [pc, #332]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0xe4>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002294:	f7fe fb74 	bl	8000980 <HAL_GetTick>
 8002298:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800229c:	f7fe fb70 	bl	8000980 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b64      	cmp	r3, #100	; 0x64
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e342      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022ae:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x10c>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 808c 	beq.w	80023e4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022cc:	4b41      	ldr	r3, [pc, #260]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022d6:	4b3f      	ldr	r3, [pc, #252]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <HAL_RCC_OscConfig+0x162>
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	2b18      	cmp	r3, #24
 80022e6:	d137      	bne.n	8002358 <HAL_RCC_OscConfig+0x1c8>
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d132      	bne.n	8002358 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d005      	beq.n	800230a <HAL_RCC_OscConfig+0x17a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e314      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800230a:	4b32      	ldr	r3, [pc, #200]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 0219 	bic.w	r2, r3, #25
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	492f      	ldr	r1, [pc, #188]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002318:	4313      	orrs	r3, r2
 800231a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800231c:	f7fe fb30 	bl	8000980 <HAL_GetTick>
 8002320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002324:	f7fe fb2c 	bl	8000980 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e2fe      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b00      	cmp	r3, #0
 8002340:	d0f0      	beq.n	8002324 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	061b      	lsls	r3, r3, #24
 8002350:	4920      	ldr	r1, [pc, #128]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002352:	4313      	orrs	r3, r2
 8002354:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002356:	e045      	b.n	80023e4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d026      	beq.n	80023ae <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 0219 	bic.w	r2, r3, #25
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4919      	ldr	r1, [pc, #100]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002372:	f7fe fb05 	bl	8000980 <HAL_GetTick>
 8002376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237a:	f7fe fb01 	bl	8000980 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e2d3      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	061b      	lsls	r3, r3, #24
 80023a6:	490b      	ldr	r1, [pc, #44]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
 80023ac:	e01a      	b.n	80023e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_RCC_OscConfig+0x244>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ba:	f7fe fae1 	bl	8000980 <HAL_GetTick>
 80023be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c2:	f7fe fadd 	bl	8000980 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d903      	bls.n	80023d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e2af      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
 80023d4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023d8:	4b96      	ldr	r3, [pc, #600]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1ee      	bne.n	80023c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0310 	and.w	r3, r3, #16
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d06a      	beq.n	80024c6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f0:	4b90      	ldr	r3, [pc, #576]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023fa:	4b8e      	ldr	r3, [pc, #568]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d007      	beq.n	8002416 <HAL_RCC_OscConfig+0x286>
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b18      	cmp	r3, #24
 800240a:	d11b      	bne.n	8002444 <HAL_RCC_OscConfig+0x2b4>
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b01      	cmp	r3, #1
 8002414:	d116      	bne.n	8002444 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002416:	4b87      	ldr	r3, [pc, #540]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x29e>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	2b80      	cmp	r3, #128	; 0x80
 8002428:	d001      	beq.n	800242e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e282      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800242e:	4b81      	ldr	r3, [pc, #516]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	061b      	lsls	r3, r3, #24
 800243c:	497d      	ldr	r1, [pc, #500]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002442:	e040      	b.n	80024c6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800244c:	4b79      	ldr	r3, [pc, #484]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a78      	ldr	r2, [pc, #480]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fa92 	bl	8000980 <HAL_GetTick>
 800245c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002460:	f7fe fa8e 	bl	8000980 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e260      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002472:	4b70      	ldr	r3, [pc, #448]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800247e:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	061b      	lsls	r3, r3, #24
 800248c:	4969      	ldr	r1, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800248e:	4313      	orrs	r3, r2
 8002490:	60cb      	str	r3, [r1, #12]
 8002492:	e018      	b.n	80024c6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002494:	4b67      	ldr	r3, [pc, #412]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a66      	ldr	r2, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800249a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800249e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fa6e 	bl	8000980 <HAL_GetTick>
 80024a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024a8:	f7fe fa6a 	bl	8000980 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e23c      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024ba:	4b5e      	ldr	r3, [pc, #376]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d036      	beq.n	8002540 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d019      	beq.n	800250e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b56      	ldr	r3, [pc, #344]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 80024dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024de:	4a55      	ldr	r2, [pc, #340]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e6:	f7fe fa4b 	bl	8000980 <HAL_GetTick>
 80024ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ee:	f7fe fa47 	bl	8000980 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e219      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002500:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x35e>
 800250c:	e018      	b.n	8002540 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250e:	4b49      	ldr	r3, [pc, #292]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002512:	4a48      	ldr	r2, [pc, #288]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7fe fa31 	bl	8000980 <HAL_GetTick>
 800251e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002522:	f7fe fa2d 	bl	8000980 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1ff      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002534:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0320 	and.w	r3, r3, #32
 8002548:	2b00      	cmp	r3, #0
 800254a:	d036      	beq.n	80025ba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d019      	beq.n	8002588 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002554:	4b37      	ldr	r3, [pc, #220]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a36      	ldr	r2, [pc, #216]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800255a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800255e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002560:	f7fe fa0e 	bl	8000980 <HAL_GetTick>
 8002564:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002568:	f7fe fa0a 	bl	8000980 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1dc      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800257a:	4b2e      	ldr	r3, [pc, #184]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x3d8>
 8002586:	e018      	b.n	80025ba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002588:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a29      	ldr	r2, [pc, #164]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800258e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002592:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002594:	f7fe f9f4 	bl	8000980 <HAL_GetTick>
 8002598:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800259c:	f7fe f9f0 	bl	8000980 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1c2      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025ae:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 8086 	beq.w	80026d4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_RCC_OscConfig+0x4a8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_RCC_OscConfig+0x4a8>)
 80025ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025d4:	f7fe f9d4 	bl	8000980 <HAL_GetTick>
 80025d8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025da:	e008      	b.n	80025ee <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025dc:	f7fe f9d0 	bl	8000980 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b64      	cmp	r3, #100	; 0x64
 80025e8:	d901      	bls.n	80025ee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80025ea:	2303      	movs	r3, #3
 80025ec:	e1a2      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_RCC_OscConfig+0x4a8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0f0      	beq.n	80025dc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d106      	bne.n	8002610 <HAL_RCC_OscConfig+0x480>
 8002602:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
 800260e:	e032      	b.n	8002676 <HAL_RCC_OscConfig+0x4e6>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d111      	bne.n	800263c <HAL_RCC_OscConfig+0x4ac>
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a05      	ldr	r2, [pc, #20]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800261e:	f023 0301 	bic.w	r3, r3, #1
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 8002626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002628:	4a02      	ldr	r2, [pc, #8]	; (8002634 <HAL_RCC_OscConfig+0x4a4>)
 800262a:	f023 0304 	bic.w	r3, r3, #4
 800262e:	6713      	str	r3, [r2, #112]	; 0x70
 8002630:	e021      	b.n	8002676 <HAL_RCC_OscConfig+0x4e6>
 8002632:	bf00      	nop
 8002634:	58024400 	.word	0x58024400
 8002638:	58024800 	.word	0x58024800
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b05      	cmp	r3, #5
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x4ce>
 8002644:	4b83      	ldr	r3, [pc, #524]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	4a82      	ldr	r2, [pc, #520]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 800264a:	f043 0304 	orr.w	r3, r3, #4
 800264e:	6713      	str	r3, [r2, #112]	; 0x70
 8002650:	4b80      	ldr	r3, [pc, #512]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a7f      	ldr	r2, [pc, #508]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
 800265c:	e00b      	b.n	8002676 <HAL_RCC_OscConfig+0x4e6>
 800265e:	4b7d      	ldr	r3, [pc, #500]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a7c      	ldr	r2, [pc, #496]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	6713      	str	r3, [r2, #112]	; 0x70
 800266a:	4b7a      	ldr	r3, [pc, #488]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a79      	ldr	r2, [pc, #484]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002670:	f023 0304 	bic.w	r3, r3, #4
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d015      	beq.n	80026aa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267e:	f7fe f97f 	bl	8000980 <HAL_GetTick>
 8002682:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002684:	e00a      	b.n	800269c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe f97b 	bl	8000980 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	f241 3288 	movw	r2, #5000	; 0x1388
 8002694:	4293      	cmp	r3, r2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e14b      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800269c:	4b6d      	ldr	r3, [pc, #436]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ee      	beq.n	8002686 <HAL_RCC_OscConfig+0x4f6>
 80026a8:	e014      	b.n	80026d4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7fe f969 	bl	8000980 <HAL_GetTick>
 80026ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7fe f965 	bl	8000980 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e135      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026c8:	4b62      	ldr	r3, [pc, #392]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80026ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d1ee      	bne.n	80026b2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 812a 	beq.w	8002932 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80026de:	4b5d      	ldr	r3, [pc, #372]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026e6:	2b18      	cmp	r3, #24
 80026e8:	f000 80ba 	beq.w	8002860 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	f040 8095 	bne.w	8002820 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b57      	ldr	r3, [pc, #348]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a56      	ldr	r2, [pc, #344]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80026fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002700:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002702:	f7fe f93d 	bl	8000980 <HAL_GetTick>
 8002706:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270a:	f7fe f939 	bl	8000980 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e10b      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800271c:	4b4d      	ldr	r3, [pc, #308]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f0      	bne.n	800270a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002728:	4b4a      	ldr	r3, [pc, #296]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 800272a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272c:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_RCC_OscConfig+0x6c8>)
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002738:	0112      	lsls	r2, r2, #4
 800273a:	430a      	orrs	r2, r1
 800273c:	4945      	ldr	r1, [pc, #276]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	628b      	str	r3, [r1, #40]	; 0x28
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	3b01      	subs	r3, #1
 8002748:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	3b01      	subs	r3, #1
 8002752:	025b      	lsls	r3, r3, #9
 8002754:	b29b      	uxth	r3, r3
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
 8002760:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276a:	3b01      	subs	r3, #1
 800276c:	061b      	lsls	r3, r3, #24
 800276e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002772:	4938      	ldr	r1, [pc, #224]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002774:	4313      	orrs	r3, r2
 8002776:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002778:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	4a35      	ldr	r2, [pc, #212]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002784:	4b33      	ldr	r3, [pc, #204]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002786:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002788:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_RCC_OscConfig+0x6cc>)
 800278a:	4013      	ands	r3, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002790:	00d2      	lsls	r2, r2, #3
 8002792:	4930      	ldr	r1, [pc, #192]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002794:	4313      	orrs	r3, r2
 8002796:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002798:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 800279a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279c:	f023 020c 	bic.w	r2, r3, #12
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	492b      	ldr	r1, [pc, #172]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027aa:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ae:	f023 0202 	bic.w	r2, r3, #2
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	4927      	ldr	r1, [pc, #156]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027bc:	4b25      	ldr	r3, [pc, #148]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c0:	4a24      	ldr	r2, [pc, #144]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027cc:	4a21      	ldr	r2, [pc, #132]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80027d4:	4b1f      	ldr	r3, [pc, #124]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	4a1e      	ldr	r2, [pc, #120]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80027e0:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a18      	ldr	r2, [pc, #96]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe f8c2 	bl	8000980 <HAL_GetTick>
 80027fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7fe f8be 	bl	8000980 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e090      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x670>
 800281e:	e088      	b.n	8002932 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe f8a8 	bl	8000980 <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe f8a4 	bl	8000980 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e076      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002846:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCC_OscConfig+0x6c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x6a4>
 8002852:	e06e      	b.n	8002932 <HAL_RCC_OscConfig+0x7a2>
 8002854:	58024400 	.word	0x58024400
 8002858:	fffffc0c 	.word	0xfffffc0c
 800285c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002860:	4b36      	ldr	r3, [pc, #216]	; (800293c <HAL_RCC_OscConfig+0x7ac>)
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002866:	4b35      	ldr	r3, [pc, #212]	; (800293c <HAL_RCC_OscConfig+0x7ac>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	2b01      	cmp	r3, #1
 8002872:	d031      	beq.n	80028d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f003 0203 	and.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d12a      	bne.n	80028d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d122      	bne.n	80028d8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d11a      	bne.n	80028d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	0a5b      	lsrs	r3, r3, #9
 80028a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d111      	bne.n	80028d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	0c1b      	lsrs	r3, r3, #16
 80028b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d108      	bne.n	80028d8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	0e1b      	lsrs	r3, r3, #24
 80028ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e02b      	b.n	8002934 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80028dc:	4b17      	ldr	r3, [pc, #92]	; (800293c <HAL_RCC_OscConfig+0x7ac>)
 80028de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e0:	08db      	lsrs	r3, r3, #3
 80028e2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028e6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d01f      	beq.n	8002932 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80028f2:	4b12      	ldr	r3, [pc, #72]	; (800293c <HAL_RCC_OscConfig+0x7ac>)
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	4a11      	ldr	r2, [pc, #68]	; (800293c <HAL_RCC_OscConfig+0x7ac>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028fe:	f7fe f83f 	bl	8000980 <HAL_GetTick>
 8002902:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002904:	bf00      	nop
 8002906:	f7fe f83b 	bl	8000980 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290e:	4293      	cmp	r3, r2
 8002910:	d0f9      	beq.n	8002906 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_RCC_OscConfig+0x7ac>)
 8002914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_RCC_OscConfig+0x7b0>)
 8002918:	4013      	ands	r3, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800291e:	00d2      	lsls	r2, r2, #3
 8002920:	4906      	ldr	r1, [pc, #24]	; (800293c <HAL_RCC_OscConfig+0x7ac>)
 8002922:	4313      	orrs	r3, r2
 8002924:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002926:	4b05      	ldr	r3, [pc, #20]	; (800293c <HAL_RCC_OscConfig+0x7ac>)
 8002928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292a:	4a04      	ldr	r2, [pc, #16]	; (800293c <HAL_RCC_OscConfig+0x7ac>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3730      	adds	r7, #48	; 0x30
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	58024400 	.word	0x58024400
 8002940:	ffff0007 	.word	0xffff0007

08002944 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e19c      	b.n	8002c92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b8a      	ldr	r3, [pc, #552]	; (8002b84 <HAL_RCC_ClockConfig+0x240>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d910      	bls.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b87      	ldr	r3, [pc, #540]	; (8002b84 <HAL_RCC_ClockConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 020f 	bic.w	r2, r3, #15
 800296e:	4985      	ldr	r1, [pc, #532]	; (8002b84 <HAL_RCC_ClockConfig+0x240>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b83      	ldr	r3, [pc, #524]	; (8002b84 <HAL_RCC_ClockConfig+0x240>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e184      	b.n	8002c92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d010      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	4b7b      	ldr	r3, [pc, #492]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d908      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029a4:	4b78      	ldr	r3, [pc, #480]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	4975      	ldr	r1, [pc, #468]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d010      	beq.n	80029e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	4b70      	ldr	r3, [pc, #448]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d908      	bls.n	80029e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029d2:	4b6d      	ldr	r3, [pc, #436]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	496a      	ldr	r1, [pc, #424]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0310 	and.w	r3, r3, #16
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d010      	beq.n	8002a12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	4b64      	ldr	r3, [pc, #400]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d908      	bls.n	8002a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a00:	4b61      	ldr	r3, [pc, #388]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	495e      	ldr	r1, [pc, #376]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d010      	beq.n	8002a40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d908      	bls.n	8002a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a2e:	4b56      	ldr	r3, [pc, #344]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	69db      	ldr	r3, [r3, #28]
 8002a3a:	4953      	ldr	r1, [pc, #332]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d010      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	4b4d      	ldr	r3, [pc, #308]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 030f 	and.w	r3, r3, #15
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d908      	bls.n	8002a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b4a      	ldr	r3, [pc, #296]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	f023 020f 	bic.w	r2, r3, #15
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4947      	ldr	r1, [pc, #284]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d055      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a7a:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4940      	ldr	r1, [pc, #256]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a94:	4b3c      	ldr	r3, [pc, #240]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d121      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e0f6      	b.n	8002c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002aac:	4b36      	ldr	r3, [pc, #216]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d115      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0ea      	b.n	8002c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ac4:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d109      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0de      	b.n	8002c92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ad4:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0d6      	b.n	8002c92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ae4:	4b28      	ldr	r3, [pc, #160]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f023 0207 	bic.w	r2, r3, #7
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	4925      	ldr	r1, [pc, #148]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af6:	f7fd ff43 	bl	8000980 <HAL_GetTick>
 8002afa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afe:	f7fd ff3f 	bl	8000980 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e0be      	b.n	8002c92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b14:	4b1c      	ldr	r3, [pc, #112]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	00db      	lsls	r3, r3, #3
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d1eb      	bne.n	8002afe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d010      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	4b14      	ldr	r3, [pc, #80]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d208      	bcs.n	8002b54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b42:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f023 020f 	bic.w	r2, r3, #15
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	490e      	ldr	r1, [pc, #56]	; (8002b88 <HAL_RCC_ClockConfig+0x244>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_ClockConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 030f 	and.w	r3, r3, #15
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d214      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b08      	ldr	r3, [pc, #32]	; (8002b84 <HAL_RCC_ClockConfig+0x240>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f023 020f 	bic.w	r2, r3, #15
 8002b6a:	4906      	ldr	r1, [pc, #24]	; (8002b84 <HAL_RCC_ClockConfig+0x240>)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <HAL_RCC_ClockConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	683a      	ldr	r2, [r7, #0]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e086      	b.n	8002c92 <HAL_RCC_ClockConfig+0x34e>
 8002b84:	52002000 	.word	0x52002000
 8002b88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d208      	bcs.n	8002bba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ba8:	4b3c      	ldr	r3, [pc, #240]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	4939      	ldr	r1, [pc, #228]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d010      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	4b34      	ldr	r3, [pc, #208]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d208      	bcs.n	8002be8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bd6:	4b31      	ldr	r3, [pc, #196]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	492e      	ldr	r1, [pc, #184]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0310 	and.w	r3, r3, #16
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	699a      	ldr	r2, [r3, #24]
 8002bf8:	4b28      	ldr	r3, [pc, #160]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d208      	bcs.n	8002c16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c04:	4b25      	ldr	r3, [pc, #148]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002c06:	69db      	ldr	r3, [r3, #28]
 8002c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	4922      	ldr	r1, [pc, #136]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d010      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69da      	ldr	r2, [r3, #28]
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002c28:	6a1b      	ldr	r3, [r3, #32]
 8002c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d208      	bcs.n	8002c44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c32:	4b1a      	ldr	r3, [pc, #104]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	4917      	ldr	r1, [pc, #92]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c44:	f000 f834 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b14      	ldr	r3, [pc, #80]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	f003 030f 	and.w	r3, r3, #15
 8002c54:	4912      	ldr	r1, [pc, #72]	; (8002ca0 <HAL_RCC_ClockConfig+0x35c>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c62:	4b0e      	ldr	r3, [pc, #56]	; (8002c9c <HAL_RCC_ClockConfig+0x358>)
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	f003 030f 	and.w	r3, r3, #15
 8002c6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <HAL_RCC_ClockConfig+0x35c>)
 8002c6c:	5cd3      	ldrb	r3, [r2, r3]
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_RCC_ClockConfig+0x360>)
 8002c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ca8 <HAL_RCC_ClockConfig+0x364>)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c82:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <HAL_RCC_ClockConfig+0x368>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fe30 	bl	80008ec <HAL_InitTick>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	08009688 	.word	0x08009688
 8002ca4:	24000004 	.word	0x24000004
 8002ca8:	24000000 	.word	0x24000000
 8002cac:	24000008 	.word	0x24000008

08002cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b089      	sub	sp, #36	; 0x24
 8002cb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cb6:	4bb3      	ldr	r3, [pc, #716]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cbe:	2b18      	cmp	r3, #24
 8002cc0:	f200 8155 	bhi.w	8002f6e <HAL_RCC_GetSysClockFreq+0x2be>
 8002cc4:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <HAL_RCC_GetSysClockFreq+0x1c>)
 8002cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cca:	bf00      	nop
 8002ccc:	08002d31 	.word	0x08002d31
 8002cd0:	08002f6f 	.word	0x08002f6f
 8002cd4:	08002f6f 	.word	0x08002f6f
 8002cd8:	08002f6f 	.word	0x08002f6f
 8002cdc:	08002f6f 	.word	0x08002f6f
 8002ce0:	08002f6f 	.word	0x08002f6f
 8002ce4:	08002f6f 	.word	0x08002f6f
 8002ce8:	08002f6f 	.word	0x08002f6f
 8002cec:	08002d57 	.word	0x08002d57
 8002cf0:	08002f6f 	.word	0x08002f6f
 8002cf4:	08002f6f 	.word	0x08002f6f
 8002cf8:	08002f6f 	.word	0x08002f6f
 8002cfc:	08002f6f 	.word	0x08002f6f
 8002d00:	08002f6f 	.word	0x08002f6f
 8002d04:	08002f6f 	.word	0x08002f6f
 8002d08:	08002f6f 	.word	0x08002f6f
 8002d0c:	08002d5d 	.word	0x08002d5d
 8002d10:	08002f6f 	.word	0x08002f6f
 8002d14:	08002f6f 	.word	0x08002f6f
 8002d18:	08002f6f 	.word	0x08002f6f
 8002d1c:	08002f6f 	.word	0x08002f6f
 8002d20:	08002f6f 	.word	0x08002f6f
 8002d24:	08002f6f 	.word	0x08002f6f
 8002d28:	08002f6f 	.word	0x08002f6f
 8002d2c:	08002d63 	.word	0x08002d63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d30:	4b94      	ldr	r3, [pc, #592]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0320 	and.w	r3, r3, #32
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d3c:	4b91      	ldr	r3, [pc, #580]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	08db      	lsrs	r3, r3, #3
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	4a90      	ldr	r2, [pc, #576]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d4e:	e111      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d50:	4b8d      	ldr	r3, [pc, #564]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d52:	61bb      	str	r3, [r7, #24]
      break;
 8002d54:	e10e      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d56:	4b8d      	ldr	r3, [pc, #564]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d58:	61bb      	str	r3, [r7, #24]
      break;
 8002d5a:	e10b      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d5c:	4b8c      	ldr	r3, [pc, #560]	; (8002f90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d5e:	61bb      	str	r3, [r7, #24]
      break;
 8002d60:	e108      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d62:	4b88      	ldr	r3, [pc, #544]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d6c:	4b85      	ldr	r3, [pc, #532]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d78:	4b82      	ldr	r3, [pc, #520]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d82:	4b80      	ldr	r3, [pc, #512]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d86:	08db      	lsrs	r3, r3, #3
 8002d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	fb02 f303 	mul.w	r3, r2, r3
 8002d92:	ee07 3a90 	vmov	s15, r3
 8002d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 80e1 	beq.w	8002f68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	f000 8083 	beq.w	8002eb4 <HAL_RCC_GetSysClockFreq+0x204>
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	f200 80a1 	bhi.w	8002ef8 <HAL_RCC_GetSysClockFreq+0x248>
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0x114>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d056      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002dc2:	e099      	b.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dc4:	4b6f      	ldr	r3, [pc, #444]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02d      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002dd0:	4b6c      	ldr	r3, [pc, #432]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	08db      	lsrs	r3, r3, #3
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	4a6b      	ldr	r2, [pc, #428]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8002de0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dfa:	4b62      	ldr	r3, [pc, #392]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e2a:	e087      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e3e:	4b51      	ldr	r3, [pc, #324]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e6e:	e065      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e82:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eb2:	e043      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	ee07 3a90 	vmov	s15, r3
 8002eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ebe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002fa0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ef6:	e021      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	0a5b      	lsrs	r3, r3, #9
 8002f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f46:	3301      	adds	r3, #1
 8002f48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	ee07 3a90 	vmov	s15, r3
 8002f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f60:	ee17 3a90 	vmov	r3, s15
 8002f64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f66:	e005      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	61bb      	str	r3, [r7, #24]
      break;
 8002f6c:	e002      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f70:	61bb      	str	r3, [r7, #24]
      break;
 8002f72:	bf00      	nop
  }

  return sysclockfreq;
 8002f74:	69bb      	ldr	r3, [r7, #24]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	; 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	58024400 	.word	0x58024400
 8002f88:	03d09000 	.word	0x03d09000
 8002f8c:	003d0900 	.word	0x003d0900
 8002f90:	017d7840 	.word	0x017d7840
 8002f94:	46000000 	.word	0x46000000
 8002f98:	4c742400 	.word	0x4c742400
 8002f9c:	4a742400 	.word	0x4a742400
 8002fa0:	4bbebc20 	.word	0x4bbebc20

08002fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002faa:	f7ff fe81 	bl	8002cb0 <HAL_RCC_GetSysClockFreq>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	0a1b      	lsrs	r3, r3, #8
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	490f      	ldr	r1, [pc, #60]	; (8002ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002fbc:	5ccb      	ldrb	r3, [r1, r3]
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fc8:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	fa22 f303 	lsr.w	r3, r2, r3
 8002fde:	4a07      	ldr	r2, [pc, #28]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8002fe0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fe2:	4a07      	ldr	r2, [pc, #28]	; (8003000 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	58024400 	.word	0x58024400
 8002ff8:	08009688 	.word	0x08009688
 8002ffc:	24000004 	.word	0x24000004
 8003000:	24000000 	.word	0x24000000

08003004 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003008:	b0c6      	sub	sp, #280	; 0x118
 800300a:	af00      	add	r7, sp, #0
 800300c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003010:	2300      	movs	r3, #0
 8003012:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800301c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003024:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003028:	2500      	movs	r5, #0
 800302a:	ea54 0305 	orrs.w	r3, r4, r5
 800302e:	d049      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003036:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800303a:	d02f      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800303c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003040:	d828      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003046:	d01a      	beq.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003048:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800304c:	d822      	bhi.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003056:	d007      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003058:	e01c      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800305a:	4bab      	ldr	r3, [pc, #684]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	4aaa      	ldr	r2, [pc, #680]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003066:	e01a      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800306c:	3308      	adds	r3, #8
 800306e:	2102      	movs	r1, #2
 8003070:	4618      	mov	r0, r3
 8003072:	f001 f967 	bl	8004344 <RCCEx_PLL2_Config>
 8003076:	4603      	mov	r3, r0
 8003078:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800307c:	e00f      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800307e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003082:	3328      	adds	r3, #40	; 0x28
 8003084:	2102      	movs	r1, #2
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fa0e 	bl	80044a8 <RCCEx_PLL3_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003092:	e004      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800309a:	e000      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800309c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800309e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10a      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030a6:	4b98      	ldr	r3, [pc, #608]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80030ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030b4:	4a94      	ldr	r2, [pc, #592]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80030b6:	430b      	orrs	r3, r1
 80030b8:	6513      	str	r3, [r2, #80]	; 0x50
 80030ba:	e003      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80030c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80030d0:	f04f 0900 	mov.w	r9, #0
 80030d4:	ea58 0309 	orrs.w	r3, r8, r9
 80030d8:	d047      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80030da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	2b04      	cmp	r3, #4
 80030e2:	d82a      	bhi.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80030e4:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003101 	.word	0x08003101
 80030f0:	0800310f 	.word	0x0800310f
 80030f4:	08003125 	.word	0x08003125
 80030f8:	08003143 	.word	0x08003143
 80030fc:	08003143 	.word	0x08003143
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003100:	4b81      	ldr	r3, [pc, #516]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	4a80      	ldr	r2, [pc, #512]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003106:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800310a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800310c:	e01a      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800310e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003112:	3308      	adds	r3, #8
 8003114:	2100      	movs	r1, #0
 8003116:	4618      	mov	r0, r3
 8003118:	f001 f914 	bl	8004344 <RCCEx_PLL2_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003122:	e00f      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003128:	3328      	adds	r3, #40	; 0x28
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f9bb 	bl	80044a8 <RCCEx_PLL3_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003138:	e004      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003140:	e000      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003144:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10a      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800314c:	4b6e      	ldr	r3, [pc, #440]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800314e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003150:	f023 0107 	bic.w	r1, r3, #7
 8003154:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	4a6b      	ldr	r2, [pc, #428]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800315c:	430b      	orrs	r3, r1
 800315e:	6513      	str	r3, [r2, #80]	; 0x50
 8003160:	e003      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003162:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003166:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800316a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8003176:	f04f 0b00 	mov.w	fp, #0
 800317a:	ea5a 030b 	orrs.w	r3, sl, fp
 800317e:	d05b      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003184:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003188:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800318c:	d03b      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800318e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8003192:	d834      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003198:	d037      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800319a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800319e:	d82e      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031a4:	d033      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80031a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031aa:	d828      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b0:	d01a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80031b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b6:	d822      	bhi.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80031bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80031c0:	d007      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80031c2:	e01c      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c4:	4b50      	ldr	r3, [pc, #320]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	4a4f      	ldr	r2, [pc, #316]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80031ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031d0:	e01e      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031d6:	3308      	adds	r3, #8
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f001 f8b2 	bl	8004344 <RCCEx_PLL2_Config>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80031e6:	e013      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80031ec:	3328      	adds	r3, #40	; 0x28
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f001 f959 	bl	80044a8 <RCCEx_PLL3_Config>
 80031f6:	4603      	mov	r3, r0
 80031f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031fc:	e008      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003204:	e004      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003206:	bf00      	nop
 8003208:	e002      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800320a:	bf00      	nop
 800320c:	e000      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800320e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003210:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003214:	2b00      	cmp	r3, #0
 8003216:	d10b      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003218:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800321a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003228:	4a37      	ldr	r2, [pc, #220]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800322a:	430b      	orrs	r3, r1
 800322c:	6593      	str	r3, [r2, #88]	; 0x58
 800322e:	e003      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003230:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003234:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003240:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003244:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003248:	2300      	movs	r3, #0
 800324a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800324e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003252:	460b      	mov	r3, r1
 8003254:	4313      	orrs	r3, r2
 8003256:	d05d      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800325c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003260:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8003264:	d03b      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003266:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800326a:	d834      	bhi.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800326c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003270:	d037      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003272:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003276:	d82e      	bhi.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003278:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800327c:	d033      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800327e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003282:	d828      	bhi.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003284:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003288:	d01a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800328a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800328e:	d822      	bhi.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003298:	d007      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800329a:	e01c      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	4a19      	ldr	r2, [pc, #100]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032a8:	e01e      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032ae:	3308      	adds	r3, #8
 80032b0:	2100      	movs	r1, #0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 f846 	bl	8004344 <RCCEx_PLL2_Config>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80032be:	e013      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032c4:	3328      	adds	r3, #40	; 0x28
 80032c6:	2100      	movs	r1, #0
 80032c8:	4618      	mov	r0, r3
 80032ca:	f001 f8ed 	bl	80044a8 <RCCEx_PLL3_Config>
 80032ce:	4603      	mov	r3, r0
 80032d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032d4:	e008      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80032dc:	e004      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80032de:	bf00      	nop
 80032e0:	e002      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80032e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10d      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80032f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80032f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80032fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003300:	4a01      	ldr	r2, [pc, #4]	; (8003308 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003302:	430b      	orrs	r3, r1
 8003304:	6593      	str	r3, [r2, #88]	; 0x58
 8003306:	e005      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003308:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003310:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003320:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800332a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800332e:	460b      	mov	r3, r1
 8003330:	4313      	orrs	r3, r2
 8003332:	d03a      	beq.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	2b30      	cmp	r3, #48	; 0x30
 800333c:	d01f      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800333e:	2b30      	cmp	r3, #48	; 0x30
 8003340:	d819      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003342:	2b20      	cmp	r3, #32
 8003344:	d00c      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003346:	2b20      	cmp	r3, #32
 8003348:	d815      	bhi.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d019      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800334e:	2b10      	cmp	r3, #16
 8003350:	d111      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003352:	4baa      	ldr	r3, [pc, #680]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	4aa9      	ldr	r2, [pc, #676]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800335e:	e011      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003364:	3308      	adds	r3, #8
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ffeb 	bl	8004344 <RCCEx_PLL2_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003374:	e006      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800337c:	e002      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800337e:	bf00      	nop
 8003380:	e000      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003382:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003384:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10a      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800338c:	4b9b      	ldr	r3, [pc, #620]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800338e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003390:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339a:	4a98      	ldr	r2, [pc, #608]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800339c:	430b      	orrs	r3, r1
 800339e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033a0:	e003      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80033a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80033aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80033b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80033ba:	2300      	movs	r3, #0
 80033bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80033c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80033c4:	460b      	mov	r3, r1
 80033c6:	4313      	orrs	r3, r2
 80033c8:	d051      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80033ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033d4:	d035      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80033d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033da:	d82e      	bhi.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80033dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033e0:	d031      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80033e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033e6:	d828      	bhi.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80033e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033ec:	d01a      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80033ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f2:	d822      	bhi.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x436>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80033f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fc:	d007      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80033fe:	e01c      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003400:	4b7e      	ldr	r3, [pc, #504]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	4a7d      	ldr	r2, [pc, #500]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800340c:	e01c      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003412:	3308      	adds	r3, #8
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f000 ff94 	bl	8004344 <RCCEx_PLL2_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003422:	e011      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003424:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003428:	3328      	adds	r3, #40	; 0x28
 800342a:	2100      	movs	r1, #0
 800342c:	4618      	mov	r0, r3
 800342e:	f001 f83b 	bl	80044a8 <RCCEx_PLL3_Config>
 8003432:	4603      	mov	r3, r0
 8003434:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003438:	e006      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003440:	e002      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003442:	bf00      	nop
 8003444:	e000      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003448:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10a      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003450:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003454:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	4a67      	ldr	r2, [pc, #412]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003460:	430b      	orrs	r3, r1
 8003462:	6513      	str	r3, [r2, #80]	; 0x50
 8003464:	e003      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003466:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800346a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800346e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003476:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800347a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800347e:	2300      	movs	r3, #0
 8003480:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003484:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003488:	460b      	mov	r3, r1
 800348a:	4313      	orrs	r3, r2
 800348c:	d053      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800348e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003494:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003498:	d033      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800349a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800349e:	d82c      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034a4:	d02f      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80034a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80034aa:	d826      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034b0:	d02b      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80034b2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80034b6:	d820      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034bc:	d012      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80034be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034c2:	d81a      	bhi.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d022      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80034c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034cc:	d115      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034d2:	3308      	adds	r3, #8
 80034d4:	2101      	movs	r1, #1
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 ff34 	bl	8004344 <RCCEx_PLL2_Config>
 80034dc:	4603      	mov	r3, r0
 80034de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034e2:	e015      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80034e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034e8:	3328      	adds	r3, #40	; 0x28
 80034ea:	2101      	movs	r1, #1
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 ffdb 	bl	80044a8 <RCCEx_PLL3_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80034f8:	e00a      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003502:	bf00      	nop
 8003504:	e004      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800350e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003510:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10a      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003518:	4b38      	ldr	r3, [pc, #224]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800351a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	4a35      	ldr	r2, [pc, #212]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003528:	430b      	orrs	r3, r1
 800352a:	6513      	str	r3, [r2, #80]	; 0x50
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003532:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003542:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800354c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003550:	460b      	mov	r3, r1
 8003552:	4313      	orrs	r3, r2
 8003554:	d058      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800355a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800355e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003562:	d033      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003568:	d82c      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800356a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356e:	d02f      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003574:	d826      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003576:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800357a:	d02b      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800357c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003580:	d820      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003582:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003586:	d012      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003588:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800358c:	d81a      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d022      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003592:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003596:	d115      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800359c:	3308      	adds	r3, #8
 800359e:	2101      	movs	r1, #1
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fecf 	bl	8004344 <RCCEx_PLL2_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80035ac:	e015      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035b2:	3328      	adds	r3, #40	; 0x28
 80035b4:	2101      	movs	r1, #1
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff76 	bl	80044a8 <RCCEx_PLL3_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80035c2:	e00a      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80035ca:	e006      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035cc:	bf00      	nop
 80035ce:	e004      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035d0:	bf00      	nop
 80035d2:	e002      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80035d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10e      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80035ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035f2:	4a02      	ldr	r2, [pc, #8]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6593      	str	r3, [r2, #88]	; 0x58
 80035f8:	e006      	b.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80035fa:	bf00      	nop
 80035fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003600:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003604:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003614:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003618:	2300      	movs	r3, #0
 800361a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800361e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003622:	460b      	mov	r3, r1
 8003624:	4313      	orrs	r3, r2
 8003626:	d037      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800362c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800362e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003632:	d00e      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003638:	d816      	bhi.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d018      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800363e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003642:	d111      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003644:	4bc4      	ldr	r3, [pc, #784]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	4ac3      	ldr	r2, [pc, #780]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800364a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800364e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003650:	e00f      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003656:	3308      	adds	r3, #8
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f000 fe72 	bl	8004344 <RCCEx_PLL2_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003666:	e004      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800366e:	e000      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003672:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800367a:	4bb7      	ldr	r3, [pc, #732]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800367c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003688:	4ab3      	ldr	r2, [pc, #716]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800368a:	430b      	orrs	r3, r1
 800368c:	6513      	str	r3, [r2, #80]	; 0x50
 800368e:	e003      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003690:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003694:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003698:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800369c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80036a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036a8:	2300      	movs	r3, #0
 80036aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036ae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d039      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80036b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036be:	2b03      	cmp	r3, #3
 80036c0:	d81c      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80036c2:	a201      	add	r2, pc, #4	; (adr r2, 80036c8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80036c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c8:	08003705 	.word	0x08003705
 80036cc:	080036d9 	.word	0x080036d9
 80036d0:	080036e7 	.word	0x080036e7
 80036d4:	08003705 	.word	0x08003705
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036d8:	4b9f      	ldr	r3, [pc, #636]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	4a9e      	ldr	r2, [pc, #632]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036e4:	e00f      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036ea:	3308      	adds	r3, #8
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 fe28 	bl	8004344 <RCCEx_PLL2_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80036fa:	e004      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003706:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800370e:	4b92      	ldr	r3, [pc, #584]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003712:	f023 0103 	bic.w	r1, r3, #3
 8003716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800371a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800371c:	4a8e      	ldr	r2, [pc, #568]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800371e:	430b      	orrs	r3, r1
 8003720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003722:	e003      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003728:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800372c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003738:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003742:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003746:	460b      	mov	r3, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	f000 8099 	beq.w	8003880 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800374e:	4b83      	ldr	r3, [pc, #524]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a82      	ldr	r2, [pc, #520]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003758:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800375a:	f7fd f911 	bl	8000980 <HAL_GetTick>
 800375e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003762:	e00b      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003764:	f7fd f90c 	bl	8000980 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b64      	cmp	r3, #100	; 0x64
 8003772:	d903      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800377a:	e005      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800377c:	4b77      	ldr	r3, [pc, #476]	; (800395c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0ed      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800378c:	2b00      	cmp	r3, #0
 800378e:	d173      	bne.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003790:	4b71      	ldr	r3, [pc, #452]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003792:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003798:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800379c:	4053      	eors	r3, r2
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d015      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037a6:	4b6c      	ldr	r3, [pc, #432]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037b2:	4b69      	ldr	r3, [pc, #420]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a68      	ldr	r2, [pc, #416]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037be:	4b66      	ldr	r3, [pc, #408]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4a65      	ldr	r2, [pc, #404]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037c8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037ca:	4a63      	ldr	r2, [pc, #396]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80037cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037d0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037de:	d118      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e0:	f7fd f8ce 	bl	8000980 <HAL_GetTick>
 80037e4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037e8:	e00d      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fd f8c9 	bl	8000980 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80037f4:	1ad2      	subs	r2, r2, r3
 80037f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d903      	bls.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8003804:	e005      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003806:	4b54      	ldr	r3, [pc, #336]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0eb      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003812:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003816:	2b00      	cmp	r3, #0
 8003818:	d129      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800381a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800381e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003826:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800382a:	d10e      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800382c:	4b4a      	ldr	r3, [pc, #296]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800383c:	091a      	lsrs	r2, r3, #4
 800383e:	4b48      	ldr	r3, [pc, #288]	; (8003960 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003840:	4013      	ands	r3, r2
 8003842:	4a45      	ldr	r2, [pc, #276]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003844:	430b      	orrs	r3, r1
 8003846:	6113      	str	r3, [r2, #16]
 8003848:	e005      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800384a:	4b43      	ldr	r3, [pc, #268]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	4a42      	ldr	r2, [pc, #264]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003850:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003854:	6113      	str	r3, [r2, #16]
 8003856:	4b40      	ldr	r3, [pc, #256]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003858:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800385a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800385e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003862:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003866:	4a3c      	ldr	r2, [pc, #240]	; (8003958 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003868:	430b      	orrs	r3, r1
 800386a:	6713      	str	r3, [r2, #112]	; 0x70
 800386c:	e008      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800386e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003872:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8003876:	e003      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003878:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800387c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003888:	f002 0301 	and.w	r3, r2, #1
 800388c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003890:	2300      	movs	r3, #0
 8003892:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003896:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800389a:	460b      	mov	r3, r1
 800389c:	4313      	orrs	r3, r2
 800389e:	f000 808f 	beq.w	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80038a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038a8:	2b28      	cmp	r3, #40	; 0x28
 80038aa:	d871      	bhi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80038ac:	a201      	add	r2, pc, #4	; (adr r2, 80038b4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80038ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b2:	bf00      	nop
 80038b4:	08003999 	.word	0x08003999
 80038b8:	08003991 	.word	0x08003991
 80038bc:	08003991 	.word	0x08003991
 80038c0:	08003991 	.word	0x08003991
 80038c4:	08003991 	.word	0x08003991
 80038c8:	08003991 	.word	0x08003991
 80038cc:	08003991 	.word	0x08003991
 80038d0:	08003991 	.word	0x08003991
 80038d4:	08003965 	.word	0x08003965
 80038d8:	08003991 	.word	0x08003991
 80038dc:	08003991 	.word	0x08003991
 80038e0:	08003991 	.word	0x08003991
 80038e4:	08003991 	.word	0x08003991
 80038e8:	08003991 	.word	0x08003991
 80038ec:	08003991 	.word	0x08003991
 80038f0:	08003991 	.word	0x08003991
 80038f4:	0800397b 	.word	0x0800397b
 80038f8:	08003991 	.word	0x08003991
 80038fc:	08003991 	.word	0x08003991
 8003900:	08003991 	.word	0x08003991
 8003904:	08003991 	.word	0x08003991
 8003908:	08003991 	.word	0x08003991
 800390c:	08003991 	.word	0x08003991
 8003910:	08003991 	.word	0x08003991
 8003914:	08003999 	.word	0x08003999
 8003918:	08003991 	.word	0x08003991
 800391c:	08003991 	.word	0x08003991
 8003920:	08003991 	.word	0x08003991
 8003924:	08003991 	.word	0x08003991
 8003928:	08003991 	.word	0x08003991
 800392c:	08003991 	.word	0x08003991
 8003930:	08003991 	.word	0x08003991
 8003934:	08003999 	.word	0x08003999
 8003938:	08003991 	.word	0x08003991
 800393c:	08003991 	.word	0x08003991
 8003940:	08003991 	.word	0x08003991
 8003944:	08003991 	.word	0x08003991
 8003948:	08003991 	.word	0x08003991
 800394c:	08003991 	.word	0x08003991
 8003950:	08003991 	.word	0x08003991
 8003954:	08003999 	.word	0x08003999
 8003958:	58024400 	.word	0x58024400
 800395c:	58024800 	.word	0x58024800
 8003960:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003968:	3308      	adds	r3, #8
 800396a:	2101      	movs	r1, #1
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fce9 	bl	8004344 <RCCEx_PLL2_Config>
 8003972:	4603      	mov	r3, r0
 8003974:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003978:	e00f      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800397e:	3328      	adds	r3, #40	; 0x28
 8003980:	2101      	movs	r1, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fd90 	bl	80044a8 <RCCEx_PLL3_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800398e:	e004      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003996:	e000      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800399a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d10a      	bne.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80039a2:	4bbf      	ldr	r3, [pc, #764]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80039aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039b0:	4abb      	ldr	r2, [pc, #748]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80039b2:	430b      	orrs	r3, r1
 80039b4:	6553      	str	r3, [r2, #84]	; 0x54
 80039b6:	e003      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80039bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80039c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c8:	f002 0302 	and.w	r3, r2, #2
 80039cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80039d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80039da:	460b      	mov	r3, r1
 80039dc:	4313      	orrs	r3, r2
 80039de:	d041      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80039e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039e6:	2b05      	cmp	r3, #5
 80039e8:	d824      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80039ea:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80039ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f0:	08003a3d 	.word	0x08003a3d
 80039f4:	08003a09 	.word	0x08003a09
 80039f8:	08003a1f 	.word	0x08003a1f
 80039fc:	08003a3d 	.word	0x08003a3d
 8003a00:	08003a3d 	.word	0x08003a3d
 8003a04:	08003a3d 	.word	0x08003a3d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fc97 	bl	8004344 <RCCEx_PLL2_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a1c:	e00f      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a22:	3328      	adds	r3, #40	; 0x28
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 fd3e 	bl	80044a8 <RCCEx_PLL3_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a32:	e004      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003a46:	4b96      	ldr	r3, [pc, #600]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	f023 0107 	bic.w	r1, r3, #7
 8003a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a54:	4a92      	ldr	r2, [pc, #584]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6553      	str	r3, [r2, #84]	; 0x54
 8003a5a:	e003      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003a60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f002 0304 	and.w	r3, r2, #4
 8003a70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a7a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d044      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d825      	bhi.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003a90:	a201      	add	r2, pc, #4	; (adr r2, 8003a98 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a96:	bf00      	nop
 8003a98:	08003ae5 	.word	0x08003ae5
 8003a9c:	08003ab1 	.word	0x08003ab1
 8003aa0:	08003ac7 	.word	0x08003ac7
 8003aa4:	08003ae5 	.word	0x08003ae5
 8003aa8:	08003ae5 	.word	0x08003ae5
 8003aac:	08003ae5 	.word	0x08003ae5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f000 fc43 	bl	8004344 <RCCEx_PLL2_Config>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ac4:	e00f      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003aca:	3328      	adds	r3, #40	; 0x28
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fcea 	bl	80044a8 <RCCEx_PLL3_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ada:	e004      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ae2:	e000      	b.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003aee:	4b6c      	ldr	r3, [pc, #432]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af2:	f023 0107 	bic.w	r1, r3, #7
 8003af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	4a68      	ldr	r2, [pc, #416]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6593      	str	r3, [r2, #88]	; 0x58
 8003b04:	e003      	b.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003b0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f002 0320 	and.w	r3, r2, #32
 8003b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003b24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	d055      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b3a:	d033      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b40:	d82c      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b46:	d02f      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b4c:	d826      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b4e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b52:	d02b      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003b58:	d820      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5e:	d012      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003b60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b64:	d81a      	bhi.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d022      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003b6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b6e:	d115      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b74:	3308      	adds	r3, #8
 8003b76:	2100      	movs	r1, #0
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fbe3 	bl	8004344 <RCCEx_PLL2_Config>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b84:	e015      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b8a:	3328      	adds	r3, #40	; 0x28
 8003b8c:	2102      	movs	r1, #2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fc8a 	bl	80044a8 <RCCEx_PLL3_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003b9a:	e00a      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ba2:	e006      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ba4:	bf00      	nop
 8003ba6:	e004      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003ba8:	bf00      	nop
 8003baa:	e002      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003bb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bba:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bbe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bca:	4a35      	ldr	r2, [pc, #212]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003bcc:	430b      	orrs	r3, r1
 8003bce:	6553      	str	r3, [r2, #84]	; 0x54
 8003bd0:	e003      	b.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003bd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003be6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003bea:	2300      	movs	r3, #0
 8003bec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bf0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	d058      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bfe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c02:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c06:	d033      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003c08:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c0c:	d82c      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c12:	d02f      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c18:	d826      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c1e:	d02b      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003c20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c24:	d820      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2a:	d012      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c30:	d81a      	bhi.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d022      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c3a:	d115      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c40:	3308      	adds	r3, #8
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fb7d 	bl	8004344 <RCCEx_PLL2_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c50:	e015      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c56:	3328      	adds	r3, #40	; 0x28
 8003c58:	2102      	movs	r1, #2
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fc24 	bl	80044a8 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003c66:	e00a      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003c6e:	e006      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c70:	bf00      	nop
 8003c72:	e004      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c74:	bf00      	nop
 8003c76:	e002      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c78:	bf00      	nop
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8003c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10e      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003c8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c92:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c96:	4a02      	ldr	r2, [pc, #8]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c9c:	e006      	b.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8003c9e:	bf00      	nop
 8003ca0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003ca8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003cac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003cb8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003cc2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	d055      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cd4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cd8:	d033      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8003cda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003cde:	d82c      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ce4:	d02f      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8003ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cea:	d826      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003cec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cf0:	d02b      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8003cf2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003cf6:	d820      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003cf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cfc:	d012      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8003cfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d02:	d81a      	bhi.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d022      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8003d08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d0c:	d115      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d12:	3308      	adds	r3, #8
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fb14 	bl	8004344 <RCCEx_PLL2_Config>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d22:	e015      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d28:	3328      	adds	r3, #40	; 0x28
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fbbb 	bl	80044a8 <RCCEx_PLL3_Config>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d38:	e00a      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003d40:	e006      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d42:	bf00      	nop
 8003d44:	e004      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d46:	bf00      	nop
 8003d48:	e002      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d4a:	bf00      	nop
 8003d4c:	e000      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8003d4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d50:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10b      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003d58:	4ba0      	ldr	r3, [pc, #640]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d68:	4a9c      	ldr	r2, [pc, #624]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003d6a:	430b      	orrs	r3, r1
 8003d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003d6e:	e003      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003d74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8003d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d80:	f002 0308 	and.w	r3, r2, #8
 8003d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003d8e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003d92:	460b      	mov	r3, r1
 8003d94:	4313      	orrs	r3, r2
 8003d96:	d01e      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8003d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da4:	d10c      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003daa:	3328      	adds	r3, #40	; 0x28
 8003dac:	2102      	movs	r1, #2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fb7a 	bl	80044a8 <RCCEx_PLL3_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8003dc0:	4b86      	ldr	r3, [pc, #536]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd0:	4a82      	ldr	r2, [pc, #520]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dde:	f002 0310 	and.w	r3, r2, #16
 8003de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003de6:	2300      	movs	r3, #0
 8003de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003dec:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003df0:	460b      	mov	r3, r1
 8003df2:	4313      	orrs	r3, r2
 8003df4:	d01e      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e02:	d10c      	bne.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e08:	3328      	adds	r3, #40	; 0x28
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fb4b 	bl	80044a8 <RCCEx_PLL3_Config>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e1e:	4b6f      	ldr	r3, [pc, #444]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e2e:	4a6b      	ldr	r2, [pc, #428]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003e30:	430b      	orrs	r3, r1
 8003e32:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003e40:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e42:	2300      	movs	r3, #0
 8003e44:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	d03e      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e5c:	d022      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8003e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e62:	d81b      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d003      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d00b      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8003e6e:	e015      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e74:	3308      	adds	r3, #8
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fa63 	bl	8004344 <RCCEx_PLL2_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e84:	e00f      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003e8a:	3328      	adds	r3, #40	; 0x28
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fb0a 	bl	80044a8 <RCCEx_PLL3_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8003ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eae:	4b4b      	ldr	r3, [pc, #300]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003ebe:	4a47      	ldr	r2, [pc, #284]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003ec0:	430b      	orrs	r3, r1
 8003ec2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec4:	e003      	b.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003eca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003eda:	673b      	str	r3, [r7, #112]	; 0x70
 8003edc:	2300      	movs	r3, #0
 8003ede:	677b      	str	r3, [r7, #116]	; 0x74
 8003ee0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	d03b      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef6:	d01f      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8003ef8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003efc:	d818      	bhi.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8003efe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f02:	d003      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8003f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f08:	d007      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8003f0a:	e011      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f0c:	4b33      	ldr	r3, [pc, #204]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	4a32      	ldr	r2, [pc, #200]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f18:	e00f      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f1e:	3328      	adds	r3, #40	; 0x28
 8003f20:	2101      	movs	r1, #1
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 fac0 	bl	80044a8 <RCCEx_PLL3_Config>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f2e:	e004      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8003f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f42:	4b26      	ldr	r3, [pc, #152]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f46:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f52:	4a22      	ldr	r2, [pc, #136]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6553      	str	r3, [r2, #84]	; 0x54
 8003f58:	e003      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003f5e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003f6e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f70:	2300      	movs	r3, #0
 8003f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f74:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d034      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d003      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8003f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f8c:	d007      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8003f8e:	e011      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f90:	4b12      	ldr	r3, [pc, #72]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f94:	4a11      	ldr	r2, [pc, #68]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003f9c:	e00e      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	2102      	movs	r1, #2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 f9cc 	bl	8004344 <RCCEx_PLL2_Config>
 8003fac:	4603      	mov	r3, r0
 8003fae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003fb2:	e003      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8003fba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003fc4:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fd2:	4a02      	ldr	r2, [pc, #8]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8003fda:	bf00      	nop
 8003fdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8003fe4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003ff4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8003ffa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003ffe:	460b      	mov	r3, r1
 8004000:	4313      	orrs	r3, r2
 8004002:	d00c      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004008:	3328      	adds	r3, #40	; 0x28
 800400a:	2102      	movs	r1, #2
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fa4b 	bl	80044a8 <RCCEx_PLL3_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d002      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800401e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800402a:	65bb      	str	r3, [r7, #88]	; 0x58
 800402c:	2300      	movs	r3, #0
 800402e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004030:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004034:	460b      	mov	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	d036      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800403a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800403e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004040:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004044:	d018      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004046:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800404a:	d811      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800404c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004050:	d014      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004056:	d80b      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004058:	2b00      	cmp	r3, #0
 800405a:	d011      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800405c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004060:	d106      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004062:	4bb7      	ldr	r3, [pc, #732]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	4ab6      	ldr	r2, [pc, #728]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800406c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800406e:	e008      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004082:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800408a:	4bad      	ldr	r3, [pc, #692]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004098:	4aa9      	ldr	r2, [pc, #676]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800409a:	430b      	orrs	r3, r1
 800409c:	6553      	str	r3, [r2, #84]	; 0x54
 800409e:	e003      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80040a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80040b4:	653b      	str	r3, [r7, #80]	; 0x50
 80040b6:	2300      	movs	r3, #0
 80040b8:	657b      	str	r3, [r7, #84]	; 0x54
 80040ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80040be:	460b      	mov	r3, r1
 80040c0:	4313      	orrs	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040c4:	4b9e      	ldr	r3, [pc, #632]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80040cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d2:	4a9b      	ldr	r2, [pc, #620]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80040e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80040e6:	2300      	movs	r3, #0
 80040e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040ea:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80040ee:	460b      	mov	r3, r1
 80040f0:	4313      	orrs	r3, r2
 80040f2:	d009      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040f4:	4b92      	ldr	r3, [pc, #584]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80040f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040f8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80040fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004102:	4a8f      	ldr	r2, [pc, #572]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004104:	430b      	orrs	r3, r1
 8004106:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004114:	643b      	str	r3, [r7, #64]	; 0x40
 8004116:	2300      	movs	r3, #0
 8004118:	647b      	str	r3, [r7, #68]	; 0x44
 800411a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800411e:	460b      	mov	r3, r1
 8004120:	4313      	orrs	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004124:	4b86      	ldr	r3, [pc, #536]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	4a85      	ldr	r2, [pc, #532]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800412a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800412e:	6113      	str	r3, [r2, #16]
 8004130:	4b83      	ldr	r3, [pc, #524]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004132:	6919      	ldr	r1, [r3, #16]
 8004134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004138:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800413c:	4a80      	ldr	r2, [pc, #512]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800413e:	430b      	orrs	r3, r1
 8004140:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800414e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004150:	2300      	movs	r3, #0
 8004152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004154:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004158:	460b      	mov	r3, r1
 800415a:	4313      	orrs	r3, r2
 800415c:	d009      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800415e:	4b78      	ldr	r3, [pc, #480]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004162:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800416a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416c:	4a74      	ldr	r2, [pc, #464]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800416e:	430b      	orrs	r3, r1
 8004170:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004172:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800417e:	633b      	str	r3, [r7, #48]	; 0x30
 8004180:	2300      	movs	r3, #0
 8004182:	637b      	str	r3, [r7, #52]	; 0x34
 8004184:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004188:	460b      	mov	r3, r1
 800418a:	4313      	orrs	r3, r2
 800418c:	d00a      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800418e:	4b6c      	ldr	r3, [pc, #432]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004196:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	4a68      	ldr	r2, [pc, #416]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80041a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	2100      	movs	r1, #0
 80041ae:	62b9      	str	r1, [r7, #40]	; 0x28
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041b6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80041ba:	460b      	mov	r3, r1
 80041bc:	4313      	orrs	r3, r2
 80041be:	d011      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041c4:	3308      	adds	r3, #8
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 f8bb 	bl	8004344 <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80041d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80041e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80041e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	2100      	movs	r1, #0
 80041ee:	6239      	str	r1, [r7, #32]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
 80041f6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80041fa:	460b      	mov	r3, r1
 80041fc:	4313      	orrs	r3, r2
 80041fe:	d011      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004204:	3308      	adds	r3, #8
 8004206:	2101      	movs	r1, #1
 8004208:	4618      	mov	r0, r3
 800420a:	f000 f89b 	bl	8004344 <RCCEx_PLL2_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004214:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004220:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	2100      	movs	r1, #0
 800422e:	61b9      	str	r1, [r7, #24]
 8004230:	f003 0304 	and.w	r3, r3, #4
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800423a:	460b      	mov	r3, r1
 800423c:	4313      	orrs	r3, r2
 800423e:	d011      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004244:	3308      	adds	r3, #8
 8004246:	2102      	movs	r1, #2
 8004248:	4618      	mov	r0, r3
 800424a:	f000 f87b 	bl	8004344 <RCCEx_PLL2_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004254:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004258:	2b00      	cmp	r3, #0
 800425a:	d003      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800425c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004260:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	2100      	movs	r1, #0
 800426e:	6139      	str	r1, [r7, #16]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800427a:	460b      	mov	r3, r1
 800427c:	4313      	orrs	r3, r2
 800427e:	d011      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004284:	3328      	adds	r3, #40	; 0x28
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f000 f90d 	bl	80044a8 <RCCEx_PLL3_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8004294:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004298:	2b00      	cmp	r3, #0
 800429a:	d003      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800429c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80042a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ac:	2100      	movs	r1, #0
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80042ba:	460b      	mov	r3, r1
 80042bc:	4313      	orrs	r3, r2
 80042be:	d011      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c4:	3328      	adds	r3, #40	; 0x28
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 f8ed 	bl	80044a8 <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80042d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80042e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80042e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ec:	2100      	movs	r1, #0
 80042ee:	6039      	str	r1, [r7, #0]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	607b      	str	r3, [r7, #4]
 80042f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	d011      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004304:	3328      	adds	r3, #40	; 0x28
 8004306:	2102      	movs	r1, #2
 8004308:	4618      	mov	r0, r3
 800430a:	f000 f8cd 	bl	80044a8 <RCCEx_PLL3_Config>
 800430e:	4603      	mov	r3, r0
 8004310:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8004314:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8004320:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8004324:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800432c:	2300      	movs	r3, #0
 800432e:	e000      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
}
 8004332:	4618      	mov	r0, r3
 8004334:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8004338:	46bd      	mov	sp, r7
 800433a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400

08004344 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004352:	4b53      	ldr	r3, [pc, #332]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004356:	f003 0303 	and.w	r3, r3, #3
 800435a:	2b03      	cmp	r3, #3
 800435c:	d101      	bne.n	8004362 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e099      	b.n	8004496 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004362:	4b4f      	ldr	r3, [pc, #316]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a4e      	ldr	r2, [pc, #312]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004368:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800436c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436e:	f7fc fb07 	bl	8000980 <HAL_GetTick>
 8004372:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004374:	e008      	b.n	8004388 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004376:	f7fc fb03 	bl	8000980 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e086      	b.n	8004496 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004388:	4b45      	ldr	r3, [pc, #276]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f0      	bne.n	8004376 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004394:	4b42      	ldr	r3, [pc, #264]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004398:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	031b      	lsls	r3, r3, #12
 80043a2:	493f      	ldr	r1, [pc, #252]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	628b      	str	r3, [r1, #40]	; 0x28
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	025b      	lsls	r3, r3, #9
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	3b01      	subs	r3, #1
 80043d2:	061b      	lsls	r3, r3, #24
 80043d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80043d8:	4931      	ldr	r1, [pc, #196]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80043de:	4b30      	ldr	r3, [pc, #192]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	492d      	ldr	r1, [pc, #180]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80043f0:	4b2b      	ldr	r3, [pc, #172]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	f023 0220 	bic.w	r2, r3, #32
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	4928      	ldr	r1, [pc, #160]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004402:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004406:	4a26      	ldr	r2, [pc, #152]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004408:	f023 0310 	bic.w	r3, r3, #16
 800440c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800440e:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004410:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004412:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <RCCEx_PLL2_Config+0x160>)
 8004414:	4013      	ands	r3, r2
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	69d2      	ldr	r2, [r2, #28]
 800441a:	00d2      	lsls	r2, r2, #3
 800441c:	4920      	ldr	r1, [pc, #128]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800441e:	4313      	orrs	r3, r2
 8004420:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004422:	4b1f      	ldr	r3, [pc, #124]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	4a1e      	ldr	r2, [pc, #120]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004428:	f043 0310 	orr.w	r3, r3, #16
 800442c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004434:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	4a19      	ldr	r2, [pc, #100]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800443a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800443e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004440:	e00f      	b.n	8004462 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d106      	bne.n	8004456 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004448:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444c:	4a14      	ldr	r2, [pc, #80]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800444e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004452:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004454:	e005      	b.n	8004462 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004456:	4b12      	ldr	r3, [pc, #72]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445a:	4a11      	ldr	r2, [pc, #68]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800445c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004460:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004462:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a0e      	ldr	r2, [pc, #56]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 8004468:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800446c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446e:	f7fc fa87 	bl	8000980 <HAL_GetTick>
 8004472:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004474:	e008      	b.n	8004488 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004476:	f7fc fa83 	bl	8000980 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e006      	b.n	8004496 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004488:	4b05      	ldr	r3, [pc, #20]	; (80044a0 <RCCEx_PLL2_Config+0x15c>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004494:	7bfb      	ldrb	r3, [r7, #15]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	58024400 	.word	0x58024400
 80044a4:	ffff0007 	.word	0xffff0007

080044a8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044b2:	2300      	movs	r3, #0
 80044b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80044b6:	4b53      	ldr	r3, [pc, #332]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80044b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ba:	f003 0303 	and.w	r3, r3, #3
 80044be:	2b03      	cmp	r3, #3
 80044c0:	d101      	bne.n	80044c6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e099      	b.n	80045fa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80044c6:	4b4f      	ldr	r3, [pc, #316]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a4e      	ldr	r2, [pc, #312]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80044cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044d2:	f7fc fa55 	bl	8000980 <HAL_GetTick>
 80044d6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044d8:	e008      	b.n	80044ec <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044da:	f7fc fa51 	bl	8000980 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d901      	bls.n	80044ec <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e086      	b.n	80045fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80044ec:	4b45      	ldr	r3, [pc, #276]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f0      	bne.n	80044da <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80044f8:	4b42      	ldr	r3, [pc, #264]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80044fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	051b      	lsls	r3, r3, #20
 8004506:	493f      	ldr	r1, [pc, #252]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004508:	4313      	orrs	r3, r2
 800450a:	628b      	str	r3, [r1, #40]	; 0x28
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	3b01      	subs	r3, #1
 8004512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	3b01      	subs	r3, #1
 800451c:	025b      	lsls	r3, r3, #9
 800451e:	b29b      	uxth	r3, r3
 8004520:	431a      	orrs	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	3b01      	subs	r3, #1
 8004528:	041b      	lsls	r3, r3, #16
 800452a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800452e:	431a      	orrs	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	3b01      	subs	r3, #1
 8004536:	061b      	lsls	r3, r3, #24
 8004538:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800453c:	4931      	ldr	r1, [pc, #196]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 800453e:	4313      	orrs	r3, r2
 8004540:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004542:	4b30      	ldr	r3, [pc, #192]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004546:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	492d      	ldr	r1, [pc, #180]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004550:	4313      	orrs	r3, r2
 8004552:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004554:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	4928      	ldr	r1, [pc, #160]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004562:	4313      	orrs	r3, r2
 8004564:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004566:	4b27      	ldr	r3, [pc, #156]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456a:	4a26      	ldr	r2, [pc, #152]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 800456c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004574:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004576:	4b24      	ldr	r3, [pc, #144]	; (8004608 <RCCEx_PLL3_Config+0x160>)
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	69d2      	ldr	r2, [r2, #28]
 800457e:	00d2      	lsls	r2, r2, #3
 8004580:	4920      	ldr	r1, [pc, #128]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004582:	4313      	orrs	r3, r2
 8004584:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004586:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 800458c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d106      	bne.n	80045a6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004598:	4b1a      	ldr	r3, [pc, #104]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	4a19      	ldr	r2, [pc, #100]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 800459e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80045a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045a4:	e00f      	b.n	80045c6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d106      	bne.n	80045ba <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80045ac:	4b15      	ldr	r3, [pc, #84]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80045b8:	e005      	b.n	80045c6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	4a11      	ldr	r2, [pc, #68]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80045c6:	4b0f      	ldr	r3, [pc, #60]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a0e      	ldr	r2, [pc, #56]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d2:	f7fc f9d5 	bl	8000980 <HAL_GetTick>
 80045d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045d8:	e008      	b.n	80045ec <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80045da:	f7fc f9d1 	bl	8000980 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e006      	b.n	80045fa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <RCCEx_PLL3_Config+0x15c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	58024400 	.word	0x58024400
 8004608:	ffff0007 	.word	0xffff0007

0800460c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800460c:	b084      	sub	sp, #16
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
 8004616:	f107 001c 	add.w	r0, r7, #28
 800461a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004620:	2b01      	cmp	r3, #1
 8004622:	d120      	bne.n	8004666 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004628:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	4b2a      	ldr	r3, [pc, #168]	; (80046e0 <USB_CoreInit+0xd4>)
 8004636:	4013      	ands	r3, r2
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464a:	2b01      	cmp	r3, #1
 800464c:	d105      	bne.n	800465a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f001 faf8 	bl	8005c50 <USB_CoreReset>
 8004660:	4603      	mov	r3, r0
 8004662:	73fb      	strb	r3, [r7, #15]
 8004664:	e01a      	b.n	800469c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f001 faec 	bl	8005c50 <USB_CoreReset>
 8004678:	4603      	mov	r3, r0
 800467a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800467c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
 800468e:	e005      	b.n	800469c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800469c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d116      	bne.n	80046d0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046b0:	4b0c      	ldr	r3, [pc, #48]	; (80046e4 <USB_CoreInit+0xd8>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f043 0206 	orr.w	r2, r3, #6
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046dc:	b004      	add	sp, #16
 80046de:	4770      	bx	lr
 80046e0:	ffbdffbf 	.word	0xffbdffbf
 80046e4:	03ee0000 	.word	0x03ee0000

080046e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b087      	sub	sp, #28
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	4613      	mov	r3, r2
 80046f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d165      	bne.n	80047c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	4a41      	ldr	r2, [pc, #260]	; (8004804 <USB_SetTurnaroundTime+0x11c>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d906      	bls.n	8004712 <USB_SetTurnaroundTime+0x2a>
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4a40      	ldr	r2, [pc, #256]	; (8004808 <USB_SetTurnaroundTime+0x120>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d202      	bcs.n	8004712 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800470c:	230f      	movs	r3, #15
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e062      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4a3c      	ldr	r2, [pc, #240]	; (8004808 <USB_SetTurnaroundTime+0x120>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d306      	bcc.n	8004728 <USB_SetTurnaroundTime+0x40>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	4a3b      	ldr	r2, [pc, #236]	; (800480c <USB_SetTurnaroundTime+0x124>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d202      	bcs.n	8004728 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004722:	230e      	movs	r3, #14
 8004724:	617b      	str	r3, [r7, #20]
 8004726:	e057      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4a38      	ldr	r2, [pc, #224]	; (800480c <USB_SetTurnaroundTime+0x124>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d306      	bcc.n	800473e <USB_SetTurnaroundTime+0x56>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	4a37      	ldr	r2, [pc, #220]	; (8004810 <USB_SetTurnaroundTime+0x128>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d202      	bcs.n	800473e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004738:	230d      	movs	r3, #13
 800473a:	617b      	str	r3, [r7, #20]
 800473c:	e04c      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a33      	ldr	r2, [pc, #204]	; (8004810 <USB_SetTurnaroundTime+0x128>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d306      	bcc.n	8004754 <USB_SetTurnaroundTime+0x6c>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	4a32      	ldr	r2, [pc, #200]	; (8004814 <USB_SetTurnaroundTime+0x12c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d802      	bhi.n	8004754 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800474e:	230c      	movs	r3, #12
 8004750:	617b      	str	r3, [r7, #20]
 8004752:	e041      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4a2f      	ldr	r2, [pc, #188]	; (8004814 <USB_SetTurnaroundTime+0x12c>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d906      	bls.n	800476a <USB_SetTurnaroundTime+0x82>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4a2e      	ldr	r2, [pc, #184]	; (8004818 <USB_SetTurnaroundTime+0x130>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d802      	bhi.n	800476a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004764:	230b      	movs	r3, #11
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	e036      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	4a2a      	ldr	r2, [pc, #168]	; (8004818 <USB_SetTurnaroundTime+0x130>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d906      	bls.n	8004780 <USB_SetTurnaroundTime+0x98>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	4a29      	ldr	r2, [pc, #164]	; (800481c <USB_SetTurnaroundTime+0x134>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d802      	bhi.n	8004780 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800477a:	230a      	movs	r3, #10
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e02b      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4a26      	ldr	r2, [pc, #152]	; (800481c <USB_SetTurnaroundTime+0x134>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d906      	bls.n	8004796 <USB_SetTurnaroundTime+0xae>
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4a25      	ldr	r2, [pc, #148]	; (8004820 <USB_SetTurnaroundTime+0x138>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d202      	bcs.n	8004796 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004790:	2309      	movs	r3, #9
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	e020      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	4a21      	ldr	r2, [pc, #132]	; (8004820 <USB_SetTurnaroundTime+0x138>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d306      	bcc.n	80047ac <USB_SetTurnaroundTime+0xc4>
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4a20      	ldr	r2, [pc, #128]	; (8004824 <USB_SetTurnaroundTime+0x13c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d802      	bhi.n	80047ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80047a6:	2308      	movs	r3, #8
 80047a8:	617b      	str	r3, [r7, #20]
 80047aa:	e015      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <USB_SetTurnaroundTime+0x13c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d906      	bls.n	80047c2 <USB_SetTurnaroundTime+0xda>
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <USB_SetTurnaroundTime+0x140>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d202      	bcs.n	80047c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80047bc:	2307      	movs	r3, #7
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e00a      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80047c2:	2306      	movs	r3, #6
 80047c4:	617b      	str	r3, [r7, #20]
 80047c6:	e007      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d102      	bne.n	80047d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80047ce:	2309      	movs	r3, #9
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	e001      	b.n	80047d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80047d4:	2309      	movs	r3, #9
 80047d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	029b      	lsls	r3, r3, #10
 80047ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80047f0:	431a      	orrs	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	00d8acbf 	.word	0x00d8acbf
 8004808:	00e4e1c0 	.word	0x00e4e1c0
 800480c:	00f42400 	.word	0x00f42400
 8004810:	01067380 	.word	0x01067380
 8004814:	011a499f 	.word	0x011a499f
 8004818:	01312cff 	.word	0x01312cff
 800481c:	014ca43f 	.word	0x014ca43f
 8004820:	016e3600 	.word	0x016e3600
 8004824:	01a6ab1f 	.word	0x01a6ab1f
 8004828:	01e84800 	.word	0x01e84800

0800482c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	f043 0201 	orr.w	r2, r3, #1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	370c      	adds	r7, #12
 8004868:	46bd      	mov	sp, r7
 800486a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486e:	4770      	bx	lr

08004870 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800488c:	78fb      	ldrb	r3, [r7, #3]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d115      	bne.n	80048be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800489e:	2001      	movs	r0, #1
 80048a0:	f7fc f87a 	bl	8000998 <HAL_Delay>
      ms++;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	3301      	adds	r3, #1
 80048a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f001 f93f 	bl	8005b2e <USB_GetMode>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d01e      	beq.n	80048f4 <USB_SetCurrentMode+0x84>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b31      	cmp	r3, #49	; 0x31
 80048ba:	d9f0      	bls.n	800489e <USB_SetCurrentMode+0x2e>
 80048bc:	e01a      	b.n	80048f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d115      	bne.n	80048f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048d0:	2001      	movs	r0, #1
 80048d2:	f7fc f861 	bl	8000998 <HAL_Delay>
      ms++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f001 f926 	bl	8005b2e <USB_GetMode>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d005      	beq.n	80048f4 <USB_SetCurrentMode+0x84>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b31      	cmp	r3, #49	; 0x31
 80048ec:	d9f0      	bls.n	80048d0 <USB_SetCurrentMode+0x60>
 80048ee:	e001      	b.n	80048f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e005      	b.n	8004900 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b32      	cmp	r3, #50	; 0x32
 80048f8:	d101      	bne.n	80048fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004908:	b084      	sub	sp, #16
 800490a:	b580      	push	{r7, lr}
 800490c:	b086      	sub	sp, #24
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
 8004912:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800491a:	2300      	movs	r3, #0
 800491c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004922:	2300      	movs	r3, #0
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	e009      	b.n	800493c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	3340      	adds	r3, #64	; 0x40
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	2200      	movs	r2, #0
 8004934:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	3301      	adds	r3, #1
 800493a:	613b      	str	r3, [r7, #16]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b0e      	cmp	r3, #14
 8004940:	d9f2      	bls.n	8004928 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004942:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004944:	2b00      	cmp	r3, #0
 8004946:	d11c      	bne.n	8004982 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004956:	f043 0302 	orr.w	r3, r3, #2
 800495a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004960:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	e005      	b.n	800498e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004994:	461a      	mov	r2, r3
 8004996:	2300      	movs	r3, #0
 8004998:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a0:	4619      	mov	r1, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a8:	461a      	mov	r2, r3
 80049aa:	680b      	ldr	r3, [r1, #0]
 80049ac:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d10c      	bne.n	80049ce <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049ba:	2100      	movs	r1, #0
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f965 	bl	8004c8c <USB_SetDevSpeed>
 80049c2:	e008      	b.n	80049d6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049c4:	2101      	movs	r1, #1
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f960 	bl	8004c8c <USB_SetDevSpeed>
 80049cc:	e003      	b.n	80049d6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049ce:	2103      	movs	r1, #3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f95b 	bl	8004c8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049d6:	2110      	movs	r1, #16
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8f3 	bl	8004bc4 <USB_FlushTxFifo>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f91f 	bl	8004c2c <USB_FlushRxFifo>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049fe:	461a      	mov	r2, r3
 8004a00:	2300      	movs	r3, #0
 8004a02:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	461a      	mov	r2, r3
 8004a18:	2300      	movs	r3, #0
 8004a1a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e043      	b.n	8004aaa <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a38:	d118      	bne.n	8004a6c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d10a      	bne.n	8004a56 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e013      	b.n	8004a7e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	461a      	mov	r2, r3
 8004a64:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e008      	b.n	8004a7e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	015a      	lsls	r2, r3, #5
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4413      	add	r3, r2
 8004a74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a78:	461a      	mov	r2, r3
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004aa2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d3b7      	bcc.n	8004a22 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	613b      	str	r3, [r7, #16]
 8004ab6:	e043      	b.n	8004b40 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ace:	d118      	bne.n	8004b02 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10a      	bne.n	8004aec <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e013      	b.n	8004b14 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af8:	461a      	mov	r2, r3
 8004afa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	e008      	b.n	8004b14 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0e:	461a      	mov	r2, r3
 8004b10:	2300      	movs	r3, #0
 8004b12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	461a      	mov	r2, r3
 8004b22:	2300      	movs	r3, #0
 8004b24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	461a      	mov	r2, r3
 8004b34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	613b      	str	r3, [r7, #16]
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d3b7      	bcc.n	8004ab8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d105      	bne.n	8004b7c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	f043 0210 	orr.w	r2, r3, #16
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	699a      	ldr	r2, [r3, #24]
 8004b80:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <USB_DevInit+0x2b4>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004b88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d005      	beq.n	8004b9a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f043 0208 	orr.w	r2, r3, #8
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d105      	bne.n	8004bac <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <USB_DevInit+0x2b8>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3718      	adds	r7, #24
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bb8:	b004      	add	sp, #16
 8004bba:	4770      	bx	lr
 8004bbc:	803c3800 	.word	0x803c3800
 8004bc0:	40000004 	.word	0x40000004

08004bc4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <USB_FlushTxFifo+0x64>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e01b      	b.n	8004c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	daf2      	bge.n	8004bd2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	019b      	lsls	r3, r3, #6
 8004bf4:	f043 0220 	orr.w	r2, r3, #32
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a08      	ldr	r2, [pc, #32]	; (8004c28 <USB_FlushTxFifo+0x64>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e006      	b.n	8004c1c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d0f0      	beq.n	8004bfc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	00030d40 	.word	0x00030d40

08004c2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a11      	ldr	r2, [pc, #68]	; (8004c88 <USB_FlushRxFifo+0x5c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d901      	bls.n	8004c4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e018      	b.n	8004c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	daf2      	bge.n	8004c38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2210      	movs	r2, #16
 8004c5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a08      	ldr	r2, [pc, #32]	; (8004c88 <USB_FlushRxFifo+0x5c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e006      	b.n	8004c7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b10      	cmp	r3, #16
 8004c78:	d0f0      	beq.n	8004c5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	00030d40 	.word	0x00030d40

08004c8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	460b      	mov	r3, r1
 8004c96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	68f9      	ldr	r1, [r7, #12]
 8004ca8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cac:	4313      	orrs	r3, r2
 8004cae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b087      	sub	sp, #28
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f003 0306 	and.w	r3, r3, #6
 8004cd6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d102      	bne.n	8004ce4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]
 8004ce2:	e00a      	b.n	8004cfa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d002      	beq.n	8004cf0 <USB_GetDevSpeed+0x32>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2b06      	cmp	r3, #6
 8004cee:	d102      	bne.n	8004cf6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	75fb      	strb	r3, [r7, #23]
 8004cf4:	e001      	b.n	8004cfa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004cf6:	230f      	movs	r3, #15
 8004cf8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d139      	bne.n	8004d98 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	2101      	movs	r1, #1
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	68f9      	ldr	r1, [r7, #12]
 8004d3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d42:	4313      	orrs	r3, r2
 8004d44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d153      	bne.n	8004e04 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	791b      	ldrb	r3, [r3, #4]
 8004d76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	059b      	lsls	r3, r3, #22
 8004d7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004d80:	431a      	orrs	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	0159      	lsls	r1, r3, #5
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	440b      	add	r3, r1
 8004d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8e:	4619      	mov	r1, r3
 8004d90:	4b20      	ldr	r3, [pc, #128]	; (8004e14 <USB_ActivateEndpoint+0x10c>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	600b      	str	r3, [r1, #0]
 8004d96:	e035      	b.n	8004e04 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	2101      	movs	r1, #1
 8004daa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dae:	041b      	lsls	r3, r3, #16
 8004db0:	68f9      	ldr	r1, [r7, #12]
 8004db2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d119      	bne.n	8004e04 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	791b      	ldrb	r3, [r3, #4]
 8004dea:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004dec:	430b      	orrs	r3, r1
 8004dee:	431a      	orrs	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	0159      	lsls	r1, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	440b      	add	r3, r1
 8004df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <USB_ActivateEndpoint+0x10c>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	10008000 	.word	0x10008000

08004e18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	785b      	ldrb	r3, [r3, #1]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d161      	bne.n	8004ef8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e4a:	d11f      	bne.n	8004e8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	015a      	lsls	r2, r3, #5
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	0151      	lsls	r1, r2, #5
 8004e5e:	68fa      	ldr	r2, [r7, #12]
 8004e60:	440a      	add	r2, r1
 8004e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	68f9      	ldr	r1, [r7, #12]
 8004ea8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004eac:	4013      	ands	r3, r2
 8004eae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	0159      	lsls	r1, r3, #5
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	440b      	add	r3, r1
 8004eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4b35      	ldr	r3, [pc, #212]	; (8004fc8 <USB_DeactivateEndpoint+0x1b0>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	600b      	str	r3, [r1, #0]
 8004ef6:	e060      	b.n	8004fba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f0e:	d11f      	bne.n	8004f50 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	015a      	lsls	r2, r3, #5
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4413      	add	r3, r2
 8004f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f2a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f2e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	015a      	lsls	r2, r3, #5
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4413      	add	r3, r2
 8004f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68ba      	ldr	r2, [r7, #8]
 8004f40:	0151      	lsls	r1, r2, #5
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	440a      	add	r2, r1
 8004f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f4a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	2101      	movs	r1, #1
 8004f62:	fa01 f303 	lsl.w	r3, r1, r3
 8004f66:	041b      	lsls	r3, r3, #16
 8004f68:	43db      	mvns	r3, r3
 8004f6a:	68f9      	ldr	r1, [r7, #12]
 8004f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f70:	4013      	ands	r3, r2
 8004f72:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7a:	69da      	ldr	r2, [r3, #28]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	2101      	movs	r1, #1
 8004f86:	fa01 f303 	lsl.w	r3, r1, r3
 8004f8a:	041b      	lsls	r3, r3, #16
 8004f8c:	43db      	mvns	r3, r3
 8004f8e:	68f9      	ldr	r1, [r7, #12]
 8004f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f94:	4013      	ands	r3, r2
 8004f96:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	0159      	lsls	r1, r3, #5
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	440b      	add	r3, r1
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <USB_DeactivateEndpoint+0x1b4>)
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	ec337800 	.word	0xec337800
 8004fcc:	eff37800 	.word	0xeff37800

08004fd0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08a      	sub	sp, #40	; 0x28
 8004fd4:	af02      	add	r7, sp, #8
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	785b      	ldrb	r3, [r3, #1]
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f040 8181 	bne.w	80052f4 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d132      	bne.n	8005060 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	4413      	add	r3, r2
 8005002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	0159      	lsls	r1, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	440b      	add	r3, r1
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	4619      	mov	r1, r3
 8005016:	4ba5      	ldr	r3, [pc, #660]	; (80052ac <USB_EPStartXfer+0x2dc>)
 8005018:	4013      	ands	r3, r2
 800501a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	015a      	lsls	r2, r3, #5
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	4413      	add	r3, r2
 8005024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	69fa      	ldr	r2, [r7, #28]
 8005030:	440a      	add	r2, r1
 8005032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005036:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800503a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	4413      	add	r3, r2
 8005044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	0159      	lsls	r1, r3, #5
 800504e:	69fb      	ldr	r3, [r7, #28]
 8005050:	440b      	add	r3, r1
 8005052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005056:	4619      	mov	r1, r3
 8005058:	4b95      	ldr	r3, [pc, #596]	; (80052b0 <USB_EPStartXfer+0x2e0>)
 800505a:	4013      	ands	r3, r2
 800505c:	610b      	str	r3, [r1, #16]
 800505e:	e092      	b.n	8005186 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	015a      	lsls	r2, r3, #5
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	4413      	add	r3, r2
 8005068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800506c:	691a      	ldr	r2, [r3, #16]
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	0159      	lsls	r1, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	440b      	add	r3, r1
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	4619      	mov	r1, r3
 800507c:	4b8c      	ldr	r3, [pc, #560]	; (80052b0 <USB_EPStartXfer+0x2e0>)
 800507e:	4013      	ands	r3, r2
 8005080:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	0159      	lsls	r1, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	440b      	add	r3, r1
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	4619      	mov	r1, r3
 800509e:	4b83      	ldr	r3, [pc, #524]	; (80052ac <USB_EPStartXfer+0x2dc>)
 80050a0:	4013      	ands	r3, r2
 80050a2:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d11a      	bne.n	80050e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d903      	bls.n	80050be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	689a      	ldr	r2, [r3, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	015a      	lsls	r2, r3, #5
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	4413      	add	r3, r2
 80050c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	0151      	lsls	r1, r2, #5
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	440a      	add	r2, r1
 80050d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050dc:	6113      	str	r3, [r2, #16]
 80050de:	e01b      	b.n	8005118 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ec:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	6919      	ldr	r1, [r3, #16]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	440b      	add	r3, r1
 80050f8:	1e59      	subs	r1, r3, #1
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005102:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005104:	4b6b      	ldr	r3, [pc, #428]	; (80052b4 <USB_EPStartXfer+0x2e4>)
 8005106:	400b      	ands	r3, r1
 8005108:	69b9      	ldr	r1, [r7, #24]
 800510a:	0148      	lsls	r0, r1, #5
 800510c:	69f9      	ldr	r1, [r7, #28]
 800510e:	4401      	add	r1, r0
 8005110:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005114:	4313      	orrs	r3, r2
 8005116:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800512e:	69b9      	ldr	r1, [r7, #24]
 8005130:	0148      	lsls	r0, r1, #5
 8005132:	69f9      	ldr	r1, [r7, #28]
 8005134:	4401      	add	r1, r0
 8005136:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800513a:	4313      	orrs	r3, r2
 800513c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	791b      	ldrb	r3, [r3, #4]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d11f      	bne.n	8005186 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	4413      	add	r3, r2
 800514e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	0151      	lsls	r1, r2, #5
 8005158:	69fa      	ldr	r2, [r7, #28]
 800515a:	440a      	add	r2, r1
 800515c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005160:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005164:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	4413      	add	r3, r2
 800516e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	69ba      	ldr	r2, [r7, #24]
 8005176:	0151      	lsls	r1, r2, #5
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	440a      	add	r2, r1
 800517c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005184:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005186:	79fb      	ldrb	r3, [r7, #7]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d14b      	bne.n	8005224 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d009      	beq.n	80051a8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a0:	461a      	mov	r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	791b      	ldrb	r3, [r3, #4]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d128      	bne.n	8005202 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d110      	bne.n	80051e2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051de:	6013      	str	r3, [r2, #0]
 80051e0:	e00f      	b.n	8005202 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69ba      	ldr	r2, [r7, #24]
 80051f2:	0151      	lsls	r1, r2, #5
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	440a      	add	r2, r1
 80051f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005200:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005220:	6013      	str	r3, [r2, #0]
 8005222:	e16a      	b.n	80054fa <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	015a      	lsls	r2, r3, #5
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	4413      	add	r3, r2
 800522c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	0151      	lsls	r1, r2, #5
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	440a      	add	r2, r1
 800523a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800523e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005242:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	791b      	ldrb	r3, [r3, #4]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d015      	beq.n	8005278 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 8152 	beq.w	80054fa <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800525c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	2101      	movs	r1, #1
 8005268:	fa01 f303 	lsl.w	r3, r1, r3
 800526c:	69f9      	ldr	r1, [r7, #28]
 800526e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005272:	4313      	orrs	r3, r2
 8005274:	634b      	str	r3, [r1, #52]	; 0x34
 8005276:	e140      	b.n	80054fa <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005284:	2b00      	cmp	r3, #0
 8005286:	d117      	bne.n	80052b8 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	440a      	add	r2, r1
 800529e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	e016      	b.n	80052d8 <USB_EPStartXfer+0x308>
 80052aa:	bf00      	nop
 80052ac:	e007ffff 	.word	0xe007ffff
 80052b0:	fff80000 	.word	0xfff80000
 80052b4:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052d6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	68d9      	ldr	r1, [r3, #12]
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	781a      	ldrb	r2, [r3, #0]
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	b298      	uxth	r0, r3
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	9300      	str	r3, [sp, #0]
 80052ea:	4603      	mov	r3, r0
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f9b9 	bl	8005664 <USB_WritePacket>
 80052f2:	e102      	b.n	80054fa <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	0159      	lsls	r1, r3, #5
 8005306:	69fb      	ldr	r3, [r7, #28]
 8005308:	440b      	add	r3, r1
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	4619      	mov	r1, r3
 8005310:	4b7c      	ldr	r3, [pc, #496]	; (8005504 <USB_EPStartXfer+0x534>)
 8005312:	4013      	ands	r3, r2
 8005314:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	0159      	lsls	r1, r3, #5
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	440b      	add	r3, r1
 800532c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005330:	4619      	mov	r1, r3
 8005332:	4b75      	ldr	r3, [pc, #468]	; (8005508 <USB_EPStartXfer+0x538>)
 8005334:	4013      	ands	r3, r2
 8005336:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d12f      	bne.n	800539e <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	689a      	ldr	r2, [r3, #8]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800536c:	69b9      	ldr	r1, [r7, #24]
 800536e:	0148      	lsls	r0, r1, #5
 8005370:	69f9      	ldr	r1, [r7, #28]
 8005372:	4401      	add	r1, r0
 8005374:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005378:	4313      	orrs	r3, r2
 800537a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005396:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800539a:	6113      	str	r3, [r2, #16]
 800539c:	e05f      	b.n	800545e <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d123      	bne.n	80053ee <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053bc:	69b9      	ldr	r1, [r7, #24]
 80053be:	0148      	lsls	r0, r1, #5
 80053c0:	69f9      	ldr	r1, [r7, #28]
 80053c2:	4401      	add	r1, r0
 80053c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80053c8:	4313      	orrs	r3, r2
 80053ca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	015a      	lsls	r2, r3, #5
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	4413      	add	r3, r2
 80053d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	69ba      	ldr	r2, [r7, #24]
 80053dc:	0151      	lsls	r1, r2, #5
 80053de:	69fa      	ldr	r2, [r7, #28]
 80053e0:	440a      	add	r2, r1
 80053e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053ea:	6113      	str	r3, [r2, #16]
 80053ec:	e037      	b.n	800545e <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	4413      	add	r3, r2
 80053f8:	1e5a      	subs	r2, r3, #1
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	8afa      	ldrh	r2, [r7, #22]
 800540a:	fb03 f202 	mul.w	r2, r3, r2
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	691a      	ldr	r2, [r3, #16]
 8005420:	8afb      	ldrh	r3, [r7, #22]
 8005422:	04d9      	lsls	r1, r3, #19
 8005424:	4b39      	ldr	r3, [pc, #228]	; (800550c <USB_EPStartXfer+0x53c>)
 8005426:	400b      	ands	r3, r1
 8005428:	69b9      	ldr	r1, [r7, #24]
 800542a:	0148      	lsls	r0, r1, #5
 800542c:	69f9      	ldr	r1, [r7, #28]
 800542e:	4401      	add	r1, r0
 8005430:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005434:	4313      	orrs	r3, r2
 8005436:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	015a      	lsls	r2, r3, #5
 800543c:	69fb      	ldr	r3, [r7, #28]
 800543e:	4413      	add	r3, r2
 8005440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005444:	691a      	ldr	r2, [r3, #16]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	6a1b      	ldr	r3, [r3, #32]
 800544a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800544e:	69b9      	ldr	r1, [r7, #24]
 8005450:	0148      	lsls	r0, r1, #5
 8005452:	69f9      	ldr	r1, [r7, #28]
 8005454:	4401      	add	r1, r0
 8005456:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800545a:	4313      	orrs	r3, r2
 800545c:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800545e:	79fb      	ldrb	r3, [r7, #7]
 8005460:	2b01      	cmp	r3, #1
 8005462:	d10d      	bne.n	8005480 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d009      	beq.n	8005480 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	68d9      	ldr	r1, [r3, #12]
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547c:	460a      	mov	r2, r1
 800547e:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	791b      	ldrb	r3, [r3, #4]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d128      	bne.n	80054da <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d110      	bne.n	80054ba <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	015a      	lsls	r2, r3, #5
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	4413      	add	r3, r2
 80054a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69ba      	ldr	r2, [r7, #24]
 80054a8:	0151      	lsls	r1, r2, #5
 80054aa:	69fa      	ldr	r2, [r7, #28]
 80054ac:	440a      	add	r2, r1
 80054ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	e00f      	b.n	80054da <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	69fa      	ldr	r2, [r7, #28]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	0151      	lsls	r1, r2, #5
 80054ec:	69fa      	ldr	r2, [r7, #28]
 80054ee:	440a      	add	r2, r1
 80054f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3720      	adds	r7, #32
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}
 8005504:	fff80000 	.word	0xfff80000
 8005508:	e007ffff 	.word	0xe007ffff
 800550c:	1ff80000 	.word	0x1ff80000

08005510 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	785b      	ldrb	r3, [r3, #1]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d14a      	bne.n	80055c4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005546:	f040 8086 	bne.w	8005656 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	015a      	lsls	r2, r3, #5
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	4413      	add	r3, r2
 8005554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	7812      	ldrb	r2, [r2, #0]
 800555e:	0151      	lsls	r1, r2, #5
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	440a      	add	r2, r1
 8005564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005568:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800556c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	7812      	ldrb	r2, [r2, #0]
 8005582:	0151      	lsls	r1, r2, #5
 8005584:	693a      	ldr	r2, [r7, #16]
 8005586:	440a      	add	r2, r1
 8005588:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800558c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005590:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3301      	adds	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f242 7210 	movw	r2, #10000	; 0x2710
 800559e:	4293      	cmp	r3, r2
 80055a0:	d902      	bls.n	80055a8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
          break;
 80055a6:	e056      	b.n	8005656 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055c0:	d0e7      	beq.n	8005592 <USB_EPStopXfer+0x82>
 80055c2:	e048      	b.n	8005656 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055dc:	d13b      	bne.n	8005656 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	7812      	ldrb	r2, [r2, #0]
 80055f2:	0151      	lsls	r1, r2, #5
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	440a      	add	r2, r1
 80055f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005600:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	7812      	ldrb	r2, [r2, #0]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005620:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005624:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3301      	adds	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005632:	4293      	cmp	r3, r2
 8005634:	d902      	bls.n	800563c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
          break;
 800563a:	e00c      	b.n	8005656 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	015a      	lsls	r2, r3, #5
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005654:	d0e7      	beq.n	8005626 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
}
 8005658:	4618      	mov	r0, r3
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005664:	b480      	push	{r7}
 8005666:	b089      	sub	sp, #36	; 0x24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	4611      	mov	r1, r2
 8005670:	461a      	mov	r2, r3
 8005672:	460b      	mov	r3, r1
 8005674:	71fb      	strb	r3, [r7, #7]
 8005676:	4613      	mov	r3, r2
 8005678:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005682:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d123      	bne.n	80056d2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800568a:	88bb      	ldrh	r3, [r7, #4]
 800568c:	3303      	adds	r3, #3
 800568e:	089b      	lsrs	r3, r3, #2
 8005690:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005692:	2300      	movs	r3, #0
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	e018      	b.n	80056ca <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	031a      	lsls	r2, r3, #12
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056a4:	461a      	mov	r2, r3
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	3301      	adds	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	3301      	adds	r3, #1
 80056b6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	3301      	adds	r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3301      	adds	r3, #1
 80056c2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	3301      	adds	r3, #1
 80056c8:	61bb      	str	r3, [r7, #24]
 80056ca:	69ba      	ldr	r2, [r7, #24]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d3e2      	bcc.n	8005698 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3724      	adds	r7, #36	; 0x24
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b08b      	sub	sp, #44	; 0x2c
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	089b      	lsrs	r3, r3, #2
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	f003 0303 	and.w	r3, r3, #3
 8005704:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005706:	2300      	movs	r3, #0
 8005708:	623b      	str	r3, [r7, #32]
 800570a:	e014      	b.n	8005736 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005716:	601a      	str	r2, [r3, #0]
    pDest++;
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	3301      	adds	r3, #1
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	3301      	adds	r3, #1
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005726:	3301      	adds	r3, #1
 8005728:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	3301      	adds	r3, #1
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	3301      	adds	r3, #1
 8005734:	623b      	str	r3, [r7, #32]
 8005736:	6a3a      	ldr	r2, [r7, #32]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	429a      	cmp	r2, r3
 800573c:	d3e6      	bcc.n	800570c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800573e:	8bfb      	ldrh	r3, [r7, #30]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d01e      	beq.n	8005782 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574e:	461a      	mov	r2, r3
 8005750:	f107 0310 	add.w	r3, r7, #16
 8005754:	6812      	ldr	r2, [r2, #0]
 8005756:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	b2db      	uxtb	r3, r3
 800575e:	00db      	lsls	r3, r3, #3
 8005760:	fa22 f303 	lsr.w	r3, r2, r3
 8005764:	b2da      	uxtb	r2, r3
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	701a      	strb	r2, [r3, #0]
      i++;
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	3301      	adds	r3, #1
 800576e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	3301      	adds	r3, #1
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005776:	8bfb      	ldrh	r3, [r7, #30]
 8005778:	3b01      	subs	r3, #1
 800577a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800577c:	8bfb      	ldrh	r3, [r7, #30]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1ea      	bne.n	8005758 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005784:	4618      	mov	r0, r3
 8005786:	372c      	adds	r7, #44	; 0x2c
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d12c      	bne.n	8005806 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	db12      	blt.n	80057e4 <USB_EPSetStall+0x54>
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d00f      	beq.n	80057e4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	4413      	add	r3, r2
 80057cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68ba      	ldr	r2, [r7, #8]
 80057d4:	0151      	lsls	r1, r2, #5
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	440a      	add	r2, r1
 80057da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057e2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e02b      	b.n	800585e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	2b00      	cmp	r3, #0
 8005816:	db12      	blt.n	800583e <USB_EPSetStall+0xae>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00f      	beq.n	800583e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	0151      	lsls	r1, r2, #5
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	440a      	add	r2, r1
 8005834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005838:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800583c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005858:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800585c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d128      	bne.n	80058da <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	015a      	lsls	r2, r3, #5
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	0151      	lsls	r1, r2, #5
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	440a      	add	r2, r1
 800589e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058a6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	791b      	ldrb	r3, [r3, #4]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d003      	beq.n	80058b8 <USB_EPClearStall+0x4c>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	791b      	ldrb	r3, [r3, #4]
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d138      	bne.n	800592a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	0151      	lsls	r1, r2, #5
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	440a      	add	r2, r1
 80058ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	e027      	b.n	800592a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	0151      	lsls	r1, r2, #5
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	440a      	add	r2, r1
 80058f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058f8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	791b      	ldrb	r3, [r3, #4]
 80058fe:	2b03      	cmp	r3, #3
 8005900:	d003      	beq.n	800590a <USB_EPClearStall+0x9e>
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	791b      	ldrb	r3, [r3, #4]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d10f      	bne.n	800592a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	0151      	lsls	r1, r2, #5
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	440a      	add	r2, r1
 8005920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005928:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005956:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800595a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	011b      	lsls	r3, r3, #4
 8005968:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800596c:	68f9      	ldr	r1, [r7, #12]
 800596e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005972:	4313      	orrs	r3, r2
 8005974:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800599e:	f023 0303 	bic.w	r3, r3, #3
 80059a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b2:	f023 0302 	bic.w	r3, r3, #2
 80059b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3714      	adds	r7, #20
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b085      	sub	sp, #20
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059e0:	f023 0303 	bic.w	r3, r3, #3
 80059e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f4:	f043 0302 	orr.w	r3, r3, #2
 80059f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a20:	68fb      	ldr	r3, [r7, #12]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a2e:	b480      	push	{r7}
 8005a30:	b085      	sub	sp, #20
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	4013      	ands	r3, r2
 8005a50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	0c1b      	lsrs	r3, r3, #16
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b085      	sub	sp, #20
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	69db      	ldr	r3, [r3, #28]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	4013      	ands	r3, r2
 8005a84:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	b29b      	uxth	r3, r3
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	3714      	adds	r7, #20
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ac4:	68bb      	ldr	r3, [r7, #8]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b087      	sub	sp, #28
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	01db      	lsls	r3, r3, #7
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b0c:	78fb      	ldrb	r3, [r7, #3]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b20:	68bb      	ldr	r3, [r7, #8]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b083      	sub	sp, #12
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	f003 0301 	and.w	r3, r3, #1
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	370c      	adds	r7, #12
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
	...

08005b4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b66:	4619      	mov	r1, r3
 8005b68:	4b09      	ldr	r3, [pc, #36]	; (8005b90 <USB_ActivateSetup+0x44>)
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	fffff800 	.word	0xfffff800

08005b94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	607a      	str	r2, [r7, #4]
 8005ba0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	333c      	adds	r3, #60	; 0x3c
 8005baa:	3304      	adds	r3, #4
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	4a26      	ldr	r2, [pc, #152]	; (8005c4c <USB_EP0_OutStart+0xb8>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d90a      	bls.n	8005bce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bc8:	d101      	bne.n	8005bce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e037      	b.n	8005c3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfc:	f043 0318 	orr.w	r3, r3, #24
 8005c00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c16:	7afb      	ldrb	r3, [r7, #11]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d10f      	bne.n	8005c3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	461a      	mov	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	371c      	adds	r7, #28
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	4f54300a 	.word	0x4f54300a

08005c50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	4a13      	ldr	r2, [pc, #76]	; (8005cb4 <USB_CoreReset+0x64>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d901      	bls.n	8005c6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e01b      	b.n	8005ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	daf2      	bge.n	8005c5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f043 0201 	orr.w	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	3301      	adds	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4a09      	ldr	r2, [pc, #36]	; (8005cb4 <USB_CoreReset+0x64>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d901      	bls.n	8005c98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e006      	b.n	8005ca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d0f0      	beq.n	8005c86 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	00030d40 	.word	0x00030d40

08005cb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005cc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005cc8:	f002 fcd2 	bl	8008670 <USBD_static_malloc>
 8005ccc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	32b0      	adds	r2, #176	; 0xb0
 8005cde:	2100      	movs	r1, #0
 8005ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e0d4      	b.n	8005e92 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ce8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005cec:	2100      	movs	r1, #0
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f002 fe21 	bl	8008936 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	32b0      	adds	r2, #176	; 0xb0
 8005cfe:	68f9      	ldr	r1, [r7, #12]
 8005d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	32b0      	adds	r2, #176	; 0xb0
 8005d0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	7c1b      	ldrb	r3, [r3, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d138      	bne.n	8005d92 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d20:	4b5e      	ldr	r3, [pc, #376]	; (8005e9c <USBD_CDC_Init+0x1e4>)
 8005d22:	7819      	ldrb	r1, [r3, #0]
 8005d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d28:	2202      	movs	r2, #2
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f002 fb7d 	bl	800842a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d30:	4b5a      	ldr	r3, [pc, #360]	; (8005e9c <USBD_CDC_Init+0x1e4>)
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	f003 020f 	and.w	r2, r3, #15
 8005d38:	6879      	ldr	r1, [r7, #4]
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	440b      	add	r3, r1
 8005d44:	3324      	adds	r3, #36	; 0x24
 8005d46:	2201      	movs	r2, #1
 8005d48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d4a:	4b55      	ldr	r3, [pc, #340]	; (8005ea0 <USBD_CDC_Init+0x1e8>)
 8005d4c:	7819      	ldrb	r1, [r3, #0]
 8005d4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d52:	2202      	movs	r2, #2
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f002 fb68 	bl	800842a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d5a:	4b51      	ldr	r3, [pc, #324]	; (8005ea0 <USBD_CDC_Init+0x1e8>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	f003 020f 	and.w	r2, r3, #15
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d72:	2201      	movs	r2, #1
 8005d74:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d76:	4b4b      	ldr	r3, [pc, #300]	; (8005ea4 <USBD_CDC_Init+0x1ec>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	f003 020f 	and.w	r2, r3, #15
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	3326      	adds	r3, #38	; 0x26
 8005d8c:	2210      	movs	r2, #16
 8005d8e:	801a      	strh	r2, [r3, #0]
 8005d90:	e035      	b.n	8005dfe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d92:	4b42      	ldr	r3, [pc, #264]	; (8005e9c <USBD_CDC_Init+0x1e4>)
 8005d94:	7819      	ldrb	r1, [r3, #0]
 8005d96:	2340      	movs	r3, #64	; 0x40
 8005d98:	2202      	movs	r2, #2
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f002 fb45 	bl	800842a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005da0:	4b3e      	ldr	r3, [pc, #248]	; (8005e9c <USBD_CDC_Init+0x1e4>)
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f003 020f 	and.w	r2, r3, #15
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	3324      	adds	r3, #36	; 0x24
 8005db6:	2201      	movs	r2, #1
 8005db8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005dba:	4b39      	ldr	r3, [pc, #228]	; (8005ea0 <USBD_CDC_Init+0x1e8>)
 8005dbc:	7819      	ldrb	r1, [r3, #0]
 8005dbe:	2340      	movs	r3, #64	; 0x40
 8005dc0:	2202      	movs	r2, #2
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f002 fb31 	bl	800842a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005dc8:	4b35      	ldr	r3, [pc, #212]	; (8005ea0 <USBD_CDC_Init+0x1e8>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f003 020f 	and.w	r2, r3, #15
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	4413      	add	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005de0:	2201      	movs	r2, #1
 8005de2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005de4:	4b2f      	ldr	r3, [pc, #188]	; (8005ea4 <USBD_CDC_Init+0x1ec>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f003 020f 	and.w	r2, r3, #15
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	440b      	add	r3, r1
 8005df8:	3326      	adds	r3, #38	; 0x26
 8005dfa:	2210      	movs	r2, #16
 8005dfc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005dfe:	4b29      	ldr	r3, [pc, #164]	; (8005ea4 <USBD_CDC_Init+0x1ec>)
 8005e00:	7819      	ldrb	r1, [r3, #0]
 8005e02:	2308      	movs	r3, #8
 8005e04:	2203      	movs	r2, #3
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f002 fb0f 	bl	800842a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e0c:	4b25      	ldr	r3, [pc, #148]	; (8005ea4 <USBD_CDC_Init+0x1ec>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f003 020f 	and.w	r2, r3, #15
 8005e14:	6879      	ldr	r1, [r7, #4]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	440b      	add	r3, r1
 8005e20:	3324      	adds	r3, #36	; 0x24
 8005e22:	2201      	movs	r2, #1
 8005e24:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	33b0      	adds	r3, #176	; 0xb0
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e018      	b.n	8005e92 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7c1b      	ldrb	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e68:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <USBD_CDC_Init+0x1e8>)
 8005e6a:	7819      	ldrb	r1, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f002 fbc6 	bl	8008608 <USBD_LL_PrepareReceive>
 8005e7c:	e008      	b.n	8005e90 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e7e:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <USBD_CDC_Init+0x1e8>)
 8005e80:	7819      	ldrb	r1, [r3, #0]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e88:	2340      	movs	r3, #64	; 0x40
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f002 fbbc 	bl	8008608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	24000097 	.word	0x24000097
 8005ea0:	24000098 	.word	0x24000098
 8005ea4:	24000099 	.word	0x24000099

08005ea8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005eb4:	4b3a      	ldr	r3, [pc, #232]	; (8005fa0 <USBD_CDC_DeInit+0xf8>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f002 fadb 	bl	8008476 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005ec0:	4b37      	ldr	r3, [pc, #220]	; (8005fa0 <USBD_CDC_DeInit+0xf8>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 020f 	and.w	r2, r3, #15
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	3324      	adds	r3, #36	; 0x24
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005eda:	4b32      	ldr	r3, [pc, #200]	; (8005fa4 <USBD_CDC_DeInit+0xfc>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f002 fac8 	bl	8008476 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005ee6:	4b2f      	ldr	r3, [pc, #188]	; (8005fa4 <USBD_CDC_DeInit+0xfc>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	f003 020f 	and.w	r2, r3, #15
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005efe:	2200      	movs	r2, #0
 8005f00:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f02:	4b29      	ldr	r3, [pc, #164]	; (8005fa8 <USBD_CDC_DeInit+0x100>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f002 fab4 	bl	8008476 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f0e:	4b26      	ldr	r3, [pc, #152]	; (8005fa8 <USBD_CDC_DeInit+0x100>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	f003 020f 	and.w	r2, r3, #15
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	3324      	adds	r3, #36	; 0x24
 8005f24:	2200      	movs	r2, #0
 8005f26:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005f28:	4b1f      	ldr	r3, [pc, #124]	; (8005fa8 <USBD_CDC_DeInit+0x100>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	f003 020f 	and.w	r2, r3, #15
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	3326      	adds	r3, #38	; 0x26
 8005f3e:	2200      	movs	r2, #0
 8005f40:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	32b0      	adds	r2, #176	; 0xb0
 8005f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01f      	beq.n	8005f94 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	33b0      	adds	r3, #176	; 0xb0
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4413      	add	r3, r2
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	32b0      	adds	r2, #176	; 0xb0
 8005f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f76:	4618      	mov	r0, r3
 8005f78:	f002 fb88 	bl	800868c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	32b0      	adds	r2, #176	; 0xb0
 8005f86:	2100      	movs	r1, #0
 8005f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3708      	adds	r7, #8
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	24000097 	.word	0x24000097
 8005fa4:	24000098 	.word	0x24000098
 8005fa8:	24000099 	.word	0x24000099

08005fac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	32b0      	adds	r2, #176	; 0xb0
 8005fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d101      	bne.n	8005fdc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e0bf      	b.n	800615c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d050      	beq.n	800608a <USBD_CDC_Setup+0xde>
 8005fe8:	2b20      	cmp	r3, #32
 8005fea:	f040 80af 	bne.w	800614c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	88db      	ldrh	r3, [r3, #6]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d03a      	beq.n	800606c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	b25b      	sxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da1b      	bge.n	8006038 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	33b0      	adds	r3, #176	; 0xb0
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006016:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	88d2      	ldrh	r2, [r2, #6]
 800601c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	88db      	ldrh	r3, [r3, #6]
 8006022:	2b07      	cmp	r3, #7
 8006024:	bf28      	it	cs
 8006026:	2307      	movcs	r3, #7
 8006028:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	89fa      	ldrh	r2, [r7, #14]
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f001 fdcf 	bl	8007bd4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006036:	e090      	b.n	800615a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	785a      	ldrb	r2, [r3, #1]
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	88db      	ldrh	r3, [r3, #6]
 8006046:	2b3f      	cmp	r3, #63	; 0x3f
 8006048:	d803      	bhi.n	8006052 <USBD_CDC_Setup+0xa6>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	88db      	ldrh	r3, [r3, #6]
 800604e:	b2da      	uxtb	r2, r3
 8006050:	e000      	b.n	8006054 <USBD_CDC_Setup+0xa8>
 8006052:	2240      	movs	r2, #64	; 0x40
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800605a:	6939      	ldr	r1, [r7, #16]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006062:	461a      	mov	r2, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 fde1 	bl	8007c2c <USBD_CtlPrepareRx>
      break;
 800606a:	e076      	b.n	800615a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	33b0      	adds	r3, #176	; 0xb0
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	683a      	ldr	r2, [r7, #0]
 8006080:	7850      	ldrb	r0, [r2, #1]
 8006082:	2200      	movs	r2, #0
 8006084:	6839      	ldr	r1, [r7, #0]
 8006086:	4798      	blx	r3
      break;
 8006088:	e067      	b.n	800615a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	785b      	ldrb	r3, [r3, #1]
 800608e:	2b0b      	cmp	r3, #11
 8006090:	d851      	bhi.n	8006136 <USBD_CDC_Setup+0x18a>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <USBD_CDC_Setup+0xec>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060c9 	.word	0x080060c9
 800609c:	08006145 	.word	0x08006145
 80060a0:	08006137 	.word	0x08006137
 80060a4:	08006137 	.word	0x08006137
 80060a8:	08006137 	.word	0x08006137
 80060ac:	08006137 	.word	0x08006137
 80060b0:	08006137 	.word	0x08006137
 80060b4:	08006137 	.word	0x08006137
 80060b8:	08006137 	.word	0x08006137
 80060bc:	08006137 	.word	0x08006137
 80060c0:	080060f3 	.word	0x080060f3
 80060c4:	0800611d 	.word	0x0800611d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d107      	bne.n	80060e4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80060d4:	f107 030a 	add.w	r3, r7, #10
 80060d8:	2202      	movs	r2, #2
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f001 fd79 	bl	8007bd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060e2:	e032      	b.n	800614a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f001 fd03 	bl	8007af2 <USBD_CtlError>
            ret = USBD_FAIL;
 80060ec:	2303      	movs	r3, #3
 80060ee:	75fb      	strb	r3, [r7, #23]
          break;
 80060f0:	e02b      	b.n	800614a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d107      	bne.n	800610e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060fe:	f107 030d 	add.w	r3, r7, #13
 8006102:	2201      	movs	r2, #1
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f001 fd64 	bl	8007bd4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800610c:	e01d      	b.n	800614a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 fcee 	bl	8007af2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006116:	2303      	movs	r3, #3
 8006118:	75fb      	strb	r3, [r7, #23]
          break;
 800611a:	e016      	b.n	800614a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b03      	cmp	r3, #3
 8006126:	d00f      	beq.n	8006148 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006128:	6839      	ldr	r1, [r7, #0]
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fce1 	bl	8007af2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006130:	2303      	movs	r3, #3
 8006132:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006134:	e008      	b.n	8006148 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006136:	6839      	ldr	r1, [r7, #0]
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f001 fcda 	bl	8007af2 <USBD_CtlError>
          ret = USBD_FAIL;
 800613e:	2303      	movs	r3, #3
 8006140:	75fb      	strb	r3, [r7, #23]
          break;
 8006142:	e002      	b.n	800614a <USBD_CDC_Setup+0x19e>
          break;
 8006144:	bf00      	nop
 8006146:	e008      	b.n	800615a <USBD_CDC_Setup+0x1ae>
          break;
 8006148:	bf00      	nop
      }
      break;
 800614a:	e006      	b.n	800615a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800614c:	6839      	ldr	r1, [r7, #0]
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f001 fccf 	bl	8007af2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006154:	2303      	movs	r3, #3
 8006156:	75fb      	strb	r3, [r7, #23]
      break;
 8006158:	bf00      	nop
  }

  return (uint8_t)ret;
 800615a:	7dfb      	ldrb	r3, [r7, #23]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006176:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	32b0      	adds	r2, #176	; 0xb0
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800618a:	2303      	movs	r3, #3
 800618c:	e065      	b.n	800625a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	32b0      	adds	r2, #176	; 0xb0
 8006198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800619c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	3318      	adds	r3, #24
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d02f      	beq.n	8006218 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80061b8:	78fb      	ldrb	r3, [r7, #3]
 80061ba:	f003 020f 	and.w	r2, r3, #15
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4613      	mov	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	3318      	adds	r3, #24
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	f003 010f 	and.w	r1, r3, #15
 80061d4:	68f8      	ldr	r0, [r7, #12]
 80061d6:	460b      	mov	r3, r1
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	440b      	add	r3, r1
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4403      	add	r3, r0
 80061e0:	3344      	adds	r3, #68	; 0x44
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80061e8:	fb01 f303 	mul.w	r3, r1, r3
 80061ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d112      	bne.n	8006218 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	f003 020f 	and.w	r2, r3, #15
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4413      	add	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	3318      	adds	r3, #24
 8006206:	2200      	movs	r2, #0
 8006208:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800620a:	78f9      	ldrb	r1, [r7, #3]
 800620c:	2300      	movs	r3, #0
 800620e:	2200      	movs	r2, #0
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f002 f9d8 	bl	80085c6 <USBD_LL_Transmit>
 8006216:	e01f      	b.n	8006258 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2200      	movs	r2, #0
 800621c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	33b0      	adds	r3, #176	; 0xb0
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d010      	beq.n	8006258 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	33b0      	adds	r3, #176	; 0xb0
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	4413      	add	r3, r2
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	68ba      	ldr	r2, [r7, #8]
 800624a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800624e:	68ba      	ldr	r2, [r7, #8]
 8006250:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	32b0      	adds	r2, #176	; 0xb0
 8006278:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	32b0      	adds	r2, #176	; 0xb0
 8006288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006290:	2303      	movs	r3, #3
 8006292:	e01a      	b.n	80062ca <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006294:	78fb      	ldrb	r3, [r7, #3]
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f002 f9d6 	bl	800864a <USBD_LL_GetRxDataSize>
 800629e:	4602      	mov	r2, r0
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	33b0      	adds	r3, #176	; 0xb0
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80062c4:	4611      	mov	r1, r2
 80062c6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	32b0      	adds	r2, #176	; 0xb0
 80062e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80062f0:	2303      	movs	r3, #3
 80062f2:	e025      	b.n	8006340 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	33b0      	adds	r3, #176	; 0xb0
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d01a      	beq.n	800633e <USBD_CDC_EP0_RxReady+0x6c>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800630e:	2bff      	cmp	r3, #255	; 0xff
 8006310:	d015      	beq.n	800633e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	33b0      	adds	r3, #176	; 0xb0
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	68fa      	ldr	r2, [r7, #12]
 8006326:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800632a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006332:	b292      	uxth	r2, r2
 8006334:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	22ff      	movs	r2, #255	; 0xff
 800633a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006350:	2182      	movs	r1, #130	; 0x82
 8006352:	4818      	ldr	r0, [pc, #96]	; (80063b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006354:	f000 fd6b 	bl	8006e2e <USBD_GetEpDesc>
 8006358:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800635a:	2101      	movs	r1, #1
 800635c:	4815      	ldr	r0, [pc, #84]	; (80063b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800635e:	f000 fd66 	bl	8006e2e <USBD_GetEpDesc>
 8006362:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006364:	2181      	movs	r1, #129	; 0x81
 8006366:	4813      	ldr	r0, [pc, #76]	; (80063b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006368:	f000 fd61 	bl	8006e2e <USBD_GetEpDesc>
 800636c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d002      	beq.n	800637a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2210      	movs	r2, #16
 8006378:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d006      	beq.n	800638e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	2200      	movs	r2, #0
 8006384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006388:	711a      	strb	r2, [r3, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d006      	beq.n	80063a2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800639c:	711a      	strb	r2, [r3, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2243      	movs	r2, #67	; 0x43
 80063a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063a8:	4b02      	ldr	r3, [pc, #8]	; (80063b4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	24000054 	.word	0x24000054

080063b8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063c0:	2182      	movs	r1, #130	; 0x82
 80063c2:	4818      	ldr	r0, [pc, #96]	; (8006424 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063c4:	f000 fd33 	bl	8006e2e <USBD_GetEpDesc>
 80063c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063ca:	2101      	movs	r1, #1
 80063cc:	4815      	ldr	r0, [pc, #84]	; (8006424 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063ce:	f000 fd2e 	bl	8006e2e <USBD_GetEpDesc>
 80063d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063d4:	2181      	movs	r1, #129	; 0x81
 80063d6:	4813      	ldr	r0, [pc, #76]	; (8006424 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80063d8:	f000 fd29 	bl	8006e2e <USBD_GetEpDesc>
 80063dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2210      	movs	r2, #16
 80063e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d006      	beq.n	80063fe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2200      	movs	r2, #0
 80063f4:	711a      	strb	r2, [r3, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f042 0202 	orr.w	r2, r2, #2
 80063fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d006      	beq.n	8006412 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	711a      	strb	r2, [r3, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f042 0202 	orr.w	r2, r2, #2
 8006410:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2243      	movs	r2, #67	; 0x43
 8006416:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006418:	4b02      	ldr	r3, [pc, #8]	; (8006424 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800641a:	4618      	mov	r0, r3
 800641c:	3718      	adds	r7, #24
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	24000054 	.word	0x24000054

08006428 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006430:	2182      	movs	r1, #130	; 0x82
 8006432:	4818      	ldr	r0, [pc, #96]	; (8006494 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006434:	f000 fcfb 	bl	8006e2e <USBD_GetEpDesc>
 8006438:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800643a:	2101      	movs	r1, #1
 800643c:	4815      	ldr	r0, [pc, #84]	; (8006494 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800643e:	f000 fcf6 	bl	8006e2e <USBD_GetEpDesc>
 8006442:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006444:	2181      	movs	r1, #129	; 0x81
 8006446:	4813      	ldr	r0, [pc, #76]	; (8006494 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006448:	f000 fcf1 	bl	8006e2e <USBD_GetEpDesc>
 800644c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2210      	movs	r2, #16
 8006458:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d006      	beq.n	800646e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	2200      	movs	r2, #0
 8006464:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006468:	711a      	strb	r2, [r3, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800647c:	711a      	strb	r2, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2243      	movs	r2, #67	; 0x43
 8006486:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006488:	4b02      	ldr	r3, [pc, #8]	; (8006494 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	24000054 	.word	0x24000054

08006498 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	220a      	movs	r2, #10
 80064a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80064a6:	4b03      	ldr	r3, [pc, #12]	; (80064b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	24000010 	.word	0x24000010

080064b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80064c8:	2303      	movs	r3, #3
 80064ca:	e009      	b.n	80064e0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	33b0      	adds	r3, #176	; 0xb0
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	32b0      	adds	r2, #176	; 0xb0
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800650e:	2303      	movs	r3, #3
 8006510:	e008      	b.n	8006524 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	32b0      	adds	r2, #176	; 0xb0
 8006544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006548:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006550:	2303      	movs	r3, #3
 8006552:	e004      	b.n	800655e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	683a      	ldr	r2, [r7, #0]
 8006558:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
	...

0800656c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	32b0      	adds	r2, #176	; 0xb0
 800657e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006582:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006584:	2301      	movs	r3, #1
 8006586:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d101      	bne.n	8006592 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800658e:	2303      	movs	r3, #3
 8006590:	e025      	b.n	80065de <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006598:	2b00      	cmp	r3, #0
 800659a:	d11f      	bne.n	80065dc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2201      	movs	r2, #1
 80065a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80065a4:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <USBD_CDC_TransmitPacket+0x7c>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	f003 020f 	and.w	r2, r3, #15
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4403      	add	r3, r0
 80065be:	3318      	adds	r3, #24
 80065c0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80065c2:	4b09      	ldr	r3, [pc, #36]	; (80065e8 <USBD_CDC_TransmitPacket+0x7c>)
 80065c4:	7819      	ldrb	r1, [r3, #0]
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fff7 	bl	80085c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	24000097 	.word	0x24000097

080065ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	32b0      	adds	r2, #176	; 0xb0
 80065fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006602:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	32b0      	adds	r2, #176	; 0xb0
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006616:	2303      	movs	r3, #3
 8006618:	e018      	b.n	800664c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7c1b      	ldrb	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006622:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <USBD_CDC_ReceivePacket+0x68>)
 8006624:	7819      	ldrb	r1, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800662c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 ffe9 	bl	8008608 <USBD_LL_PrepareReceive>
 8006636:	e008      	b.n	800664a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006638:	4b06      	ldr	r3, [pc, #24]	; (8006654 <USBD_CDC_ReceivePacket+0x68>)
 800663a:	7819      	ldrb	r1, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006642:	2340      	movs	r3, #64	; 0x40
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 ffdf 	bl	8008608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	24000098 	.word	0x24000098

08006658 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b086      	sub	sp, #24
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800666c:	4817      	ldr	r0, [pc, #92]	; (80066cc <USBD_Init+0x74>)
 800666e:	f002 f905 	bl	800887c <iprintf>
 8006672:	4817      	ldr	r0, [pc, #92]	; (80066d0 <USBD_Init+0x78>)
 8006674:	f002 f902 	bl	800887c <iprintf>
 8006678:	200a      	movs	r0, #10
 800667a:	f002 f911 	bl	80088a0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800667e:	2303      	movs	r3, #3
 8006680:	e01f      	b.n	80066c2 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d003      	beq.n	80066a8 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	79fa      	ldrb	r2, [r7, #7]
 80066b4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f001 fe4a 	bl	8008350 <USBD_LL_Init>
 80066bc:	4603      	mov	r3, r0
 80066be:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3718      	adds	r7, #24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	08009608 	.word	0x08009608
 80066d0:	08009610 	.word	0x08009610

080066d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066de:	2300      	movs	r3, #0
 80066e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80066e8:	481a      	ldr	r0, [pc, #104]	; (8006754 <USBD_RegisterClass+0x80>)
 80066ea:	f002 f8c7 	bl	800887c <iprintf>
 80066ee:	481a      	ldr	r0, [pc, #104]	; (8006758 <USBD_RegisterClass+0x84>)
 80066f0:	f002 f8c4 	bl	800887c <iprintf>
 80066f4:	200a      	movs	r0, #10
 80066f6:	f002 f8d3 	bl	80088a0 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e025      	b.n	800674a <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	32ae      	adds	r2, #174	; 0xae
 8006710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00f      	beq.n	800673a <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	32ae      	adds	r2, #174	; 0xae
 8006724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672a:	f107 020e 	add.w	r2, r7, #14
 800672e:	4610      	mov	r0, r2
 8006730:	4798      	blx	r3
 8006732:	4602      	mov	r2, r0
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	08009608 	.word	0x08009608
 8006758:	08009628 	.word	0x08009628

0800675c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f001 fe45 	bl	80083f4 <USBD_LL_Start>
 800676a:	4603      	mov	r3, r0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3708      	adds	r7, #8
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800677c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800677e:	4618      	mov	r0, r3
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	460b      	mov	r3, r1
 8006794:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006796:	2300      	movs	r3, #0
 8006798:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d009      	beq.n	80067b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	78fa      	ldrb	r2, [r7, #3]
 80067ae:	4611      	mov	r1, r2
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
 80067b4:	4603      	mov	r3, r0
 80067b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b084      	sub	sp, #16
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ce:	2300      	movs	r3, #0
 80067d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	78fa      	ldrb	r2, [r7, #3]
 80067dc:	4611      	mov	r1, r2
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067e8:	2303      	movs	r3, #3
 80067ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80067f6:	b580      	push	{r7, lr}
 80067f8:	b084      	sub	sp, #16
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
 80067fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f001 f938 	bl	8007a7e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800681c:	461a      	mov	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800682a:	f003 031f 	and.w	r3, r3, #31
 800682e:	2b02      	cmp	r3, #2
 8006830:	d01a      	beq.n	8006868 <USBD_LL_SetupStage+0x72>
 8006832:	2b02      	cmp	r3, #2
 8006834:	d822      	bhi.n	800687c <USBD_LL_SetupStage+0x86>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d002      	beq.n	8006840 <USBD_LL_SetupStage+0x4a>
 800683a:	2b01      	cmp	r3, #1
 800683c:	d00a      	beq.n	8006854 <USBD_LL_SetupStage+0x5e>
 800683e:	e01d      	b.n	800687c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006846:	4619      	mov	r1, r3
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fb65 	bl	8006f18 <USBD_StdDevReq>
 800684e:	4603      	mov	r3, r0
 8006850:	73fb      	strb	r3, [r7, #15]
      break;
 8006852:	e020      	b.n	8006896 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800685a:	4619      	mov	r1, r3
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fbcd 	bl	8006ffc <USBD_StdItfReq>
 8006862:	4603      	mov	r3, r0
 8006864:	73fb      	strb	r3, [r7, #15]
      break;
 8006866:	e016      	b.n	8006896 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fc2f 	bl	80070d4 <USBD_StdEPReq>
 8006876:	4603      	mov	r3, r0
 8006878:	73fb      	strb	r3, [r7, #15]
      break;
 800687a:	e00c      	b.n	8006896 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006882:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006886:	b2db      	uxtb	r3, r3
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f001 fe12 	bl	80084b4 <USBD_LL_StallEP>
 8006890:	4603      	mov	r3, r0
 8006892:	73fb      	strb	r3, [r7, #15]
      break;
 8006894:	bf00      	nop
  }

  return ret;
 8006896:	7bfb      	ldrb	r3, [r7, #15]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	460b      	mov	r3, r1
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80068b2:	7afb      	ldrb	r3, [r7, #11]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d16e      	bne.n	8006996 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	f040 8098 	bne.w	80069fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	689a      	ldr	r2, [r3, #8]
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d913      	bls.n	8006900 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	1ad2      	subs	r2, r2, r3
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	4293      	cmp	r3, r2
 80068f0:	bf28      	it	cs
 80068f2:	4613      	movcs	r3, r2
 80068f4:	461a      	mov	r2, r3
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f001 f9b4 	bl	8007c66 <USBD_CtlContinueRx>
 80068fe:	e07d      	b.n	80069fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006906:	f003 031f 	and.w	r3, r3, #31
 800690a:	2b02      	cmp	r3, #2
 800690c:	d014      	beq.n	8006938 <USBD_LL_DataOutStage+0x98>
 800690e:	2b02      	cmp	r3, #2
 8006910:	d81d      	bhi.n	800694e <USBD_LL_DataOutStage+0xae>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <USBD_LL_DataOutStage+0x7c>
 8006916:	2b01      	cmp	r3, #1
 8006918:	d003      	beq.n	8006922 <USBD_LL_DataOutStage+0x82>
 800691a:	e018      	b.n	800694e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	75bb      	strb	r3, [r7, #22]
            break;
 8006920:	e018      	b.n	8006954 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006928:	b2db      	uxtb	r3, r3
 800692a:	4619      	mov	r1, r3
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 fa64 	bl	8006dfa <USBD_CoreFindIF>
 8006932:	4603      	mov	r3, r0
 8006934:	75bb      	strb	r3, [r7, #22]
            break;
 8006936:	e00d      	b.n	8006954 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800693e:	b2db      	uxtb	r3, r3
 8006940:	4619      	mov	r1, r3
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 fa66 	bl	8006e14 <USBD_CoreFindEP>
 8006948:	4603      	mov	r3, r0
 800694a:	75bb      	strb	r3, [r7, #22]
            break;
 800694c:	e002      	b.n	8006954 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800694e:	2300      	movs	r3, #0
 8006950:	75bb      	strb	r3, [r7, #22]
            break;
 8006952:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006954:	7dbb      	ldrb	r3, [r7, #22]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d119      	bne.n	800698e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b03      	cmp	r3, #3
 8006964:	d113      	bne.n	800698e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006966:	7dba      	ldrb	r2, [r7, #22]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	32ae      	adds	r2, #174	; 0xae
 800696c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006976:	7dba      	ldrb	r2, [r7, #22]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800697e:	7dba      	ldrb	r2, [r7, #22]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	32ae      	adds	r2, #174	; 0xae
 8006984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	68f8      	ldr	r0, [r7, #12]
 800698c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f001 f97a 	bl	8007c88 <USBD_CtlSendStatus>
 8006994:	e032      	b.n	80069fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006996:	7afb      	ldrb	r3, [r7, #11]
 8006998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800699c:	b2db      	uxtb	r3, r3
 800699e:	4619      	mov	r1, r3
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 fa37 	bl	8006e14 <USBD_CoreFindEP>
 80069a6:	4603      	mov	r3, r0
 80069a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069aa:	7dbb      	ldrb	r3, [r7, #22]
 80069ac:	2bff      	cmp	r3, #255	; 0xff
 80069ae:	d025      	beq.n	80069fc <USBD_LL_DataOutStage+0x15c>
 80069b0:	7dbb      	ldrb	r3, [r7, #22]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d122      	bne.n	80069fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d117      	bne.n	80069f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80069c2:	7dba      	ldrb	r2, [r7, #22]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	32ae      	adds	r2, #174	; 0xae
 80069c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00f      	beq.n	80069f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80069d2:	7dba      	ldrb	r2, [r7, #22]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80069da:	7dba      	ldrb	r2, [r7, #22]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	32ae      	adds	r2, #174	; 0xae
 80069e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	7afa      	ldrb	r2, [r7, #11]
 80069e8:	4611      	mov	r1, r2
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	4798      	blx	r3
 80069ee:	4603      	mov	r3, r0
 80069f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80069f2:	7dfb      	ldrb	r3, [r7, #23]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80069f8:	7dfb      	ldrb	r3, [r7, #23]
 80069fa:	e000      	b.n	80069fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3718      	adds	r7, #24
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	60f8      	str	r0, [r7, #12]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	607a      	str	r2, [r7, #4]
 8006a12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a14:	7afb      	ldrb	r3, [r7, #11]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d16f      	bne.n	8006afa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3314      	adds	r3, #20
 8006a1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d15a      	bne.n	8006ae0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d914      	bls.n	8006a60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	689a      	ldr	r2, [r3, #8]
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	1ad2      	subs	r2, r2, r3
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	461a      	mov	r2, r3
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f001 f8dc 	bl	8007c0a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a52:	2300      	movs	r3, #0
 8006a54:	2200      	movs	r2, #0
 8006a56:	2100      	movs	r1, #0
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f001 fdd5 	bl	8008608 <USBD_LL_PrepareReceive>
 8006a5e:	e03f      	b.n	8006ae0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d11c      	bne.n	8006aa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	685a      	ldr	r2, [r3, #4]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d316      	bcc.n	8006aa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d20f      	bcs.n	8006aa6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a86:	2200      	movs	r2, #0
 8006a88:	2100      	movs	r1, #0
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f001 f8bd 	bl	8007c0a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f001 fdb2 	bl	8008608 <USBD_LL_PrepareReceive>
 8006aa4:	e01c      	b.n	8006ae0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d10f      	bne.n	8006ad2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ad2:	2180      	movs	r1, #128	; 0x80
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f001 fced 	bl	80084b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f001 f8e7 	bl	8007cae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d03a      	beq.n	8006b60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f7ff fe42 	bl	8006774 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006af8:	e032      	b.n	8006b60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006afa:	7afb      	ldrb	r3, [r7, #11]
 8006afc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	4619      	mov	r1, r3
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	f000 f985 	bl	8006e14 <USBD_CoreFindEP>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b0e:	7dfb      	ldrb	r3, [r7, #23]
 8006b10:	2bff      	cmp	r3, #255	; 0xff
 8006b12:	d025      	beq.n	8006b60 <USBD_LL_DataInStage+0x15a>
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d122      	bne.n	8006b60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	2b03      	cmp	r3, #3
 8006b24:	d11c      	bne.n	8006b60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b26:	7dfa      	ldrb	r2, [r7, #23]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	32ae      	adds	r2, #174	; 0xae
 8006b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d014      	beq.n	8006b60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006b36:	7dfa      	ldrb	r2, [r7, #23]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b3e:	7dfa      	ldrb	r2, [r7, #23]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	32ae      	adds	r2, #174	; 0xae
 8006b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	7afa      	ldrb	r2, [r7, #11]
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	4798      	blx	r3
 8006b52:	4603      	mov	r3, r0
 8006b54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b56:	7dbb      	ldrb	r3, [r7, #22]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b5c:	7dbb      	ldrb	r3, [r7, #22]
 8006b5e:	e000      	b.n	8006b62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3718      	adds	r7, #24
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d014      	beq.n	8006bd0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00e      	beq.n	8006bd0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6852      	ldr	r2, [r2, #4]
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	4798      	blx	r3
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d001      	beq.n	8006bd0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bd0:	2340      	movs	r3, #64	; 0x40
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 fc27 	bl	800842a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2240      	movs	r2, #64	; 0x40
 8006be8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bec:	2340      	movs	r3, #64	; 0x40
 8006bee:	2200      	movs	r2, #0
 8006bf0:	2180      	movs	r1, #128	; 0x80
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 fc19 	bl	800842a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2240      	movs	r2, #64	; 0x40
 8006c02:	621a      	str	r2, [r3, #32]

  return ret;
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3710      	adds	r7, #16
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b083      	sub	sp, #12
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	78fa      	ldrb	r2, [r7, #3]
 8006c1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d006      	beq.n	8006c50 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2204      	movs	r2, #4
 8006c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b04      	cmp	r3, #4
 8006c78:	d106      	bne.n	8006c88 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b03      	cmp	r3, #3
 8006ca8:	d110      	bne.n	8006ccc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3708      	adds	r7, #8
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	460b      	mov	r3, r1
 8006ce0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	32ae      	adds	r2, #174	; 0xae
 8006cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e01c      	b.n	8006d32 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d115      	bne.n	8006d30 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	32ae      	adds	r2, #174	; 0xae
 8006d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d12:	6a1b      	ldr	r3, [r3, #32]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00b      	beq.n	8006d30 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	32ae      	adds	r2, #174	; 0xae
 8006d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	78fa      	ldrb	r2, [r7, #3]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	460b      	mov	r3, r1
 8006d44:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	32ae      	adds	r2, #174	; 0xae
 8006d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d101      	bne.n	8006d5c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e01c      	b.n	8006d96 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	d115      	bne.n	8006d94 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	32ae      	adds	r2, #174	; 0xae
 8006d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00b      	beq.n	8006d94 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	32ae      	adds	r2, #174	; 0xae
 8006d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	78fa      	ldrb	r2, [r7, #3]
 8006d8e:	4611      	mov	r1, r2
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b083      	sub	sp, #12
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00e      	beq.n	8006df0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6852      	ldr	r2, [r2, #4]
 8006dde:	b2d2      	uxtb	r2, r2
 8006de0:	4611      	mov	r1, r2
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	4798      	blx	r3
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	460b      	mov	r3, r1
 8006e04:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e06:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e20:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	370c      	adds	r7, #12
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b086      	sub	sp, #24
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e42:	2300      	movs	r3, #0
 8006e44:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	885b      	ldrh	r3, [r3, #2]
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d920      	bls.n	8006e98 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e5e:	e013      	b.n	8006e88 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e60:	f107 030a 	add.w	r3, r7, #10
 8006e64:	4619      	mov	r1, r3
 8006e66:	6978      	ldr	r0, [r7, #20]
 8006e68:	f000 f81b 	bl	8006ea2 <USBD_GetNextDesc>
 8006e6c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	2b05      	cmp	r3, #5
 8006e74:	d108      	bne.n	8006e88 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	789b      	ldrb	r3, [r3, #2]
 8006e7e:	78fa      	ldrb	r2, [r7, #3]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d008      	beq.n	8006e96 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e84:	2300      	movs	r3, #0
 8006e86:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	885b      	ldrh	r3, [r3, #2]
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	897b      	ldrh	r3, [r7, #10]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d8e5      	bhi.n	8006e60 <USBD_GetEpDesc+0x32>
 8006e94:	e000      	b.n	8006e98 <USBD_GetEpDesc+0x6a>
          break;
 8006e96:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e98:	693b      	ldr	r3, [r7, #16]
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	881a      	ldrh	r2, [r3, #0]
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4413      	add	r3, r2
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4413      	add	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ece:	68fb      	ldr	r3, [r7, #12]
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006efa:	8a3b      	ldrh	r3, [r7, #16]
 8006efc:	021b      	lsls	r3, r3, #8
 8006efe:	b21a      	sxth	r2, r3
 8006f00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	b21b      	sxth	r3, r3
 8006f08:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f0a:	89fb      	ldrh	r3, [r7, #14]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f2e:	2b40      	cmp	r3, #64	; 0x40
 8006f30:	d005      	beq.n	8006f3e <USBD_StdDevReq+0x26>
 8006f32:	2b40      	cmp	r3, #64	; 0x40
 8006f34:	d857      	bhi.n	8006fe6 <USBD_StdDevReq+0xce>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00f      	beq.n	8006f5a <USBD_StdDevReq+0x42>
 8006f3a:	2b20      	cmp	r3, #32
 8006f3c:	d153      	bne.n	8006fe6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	32ae      	adds	r2, #174	; 0xae
 8006f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
 8006f54:	4603      	mov	r3, r0
 8006f56:	73fb      	strb	r3, [r7, #15]
      break;
 8006f58:	e04a      	b.n	8006ff0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	785b      	ldrb	r3, [r3, #1]
 8006f5e:	2b09      	cmp	r3, #9
 8006f60:	d83b      	bhi.n	8006fda <USBD_StdDevReq+0xc2>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <USBD_StdDevReq+0x50>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	08006fbd 	.word	0x08006fbd
 8006f6c:	08006fd1 	.word	0x08006fd1
 8006f70:	08006fdb 	.word	0x08006fdb
 8006f74:	08006fc7 	.word	0x08006fc7
 8006f78:	08006fdb 	.word	0x08006fdb
 8006f7c:	08006f9b 	.word	0x08006f9b
 8006f80:	08006f91 	.word	0x08006f91
 8006f84:	08006fdb 	.word	0x08006fdb
 8006f88:	08006fb3 	.word	0x08006fb3
 8006f8c:	08006fa5 	.word	0x08006fa5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fa3c 	bl	8007410 <USBD_GetDescriptor>
          break;
 8006f98:	e024      	b.n	8006fe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fbcb 	bl	8007738 <USBD_SetAddress>
          break;
 8006fa2:	e01f      	b.n	8006fe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fc0a 	bl	80077c0 <USBD_SetConfig>
 8006fac:	4603      	mov	r3, r0
 8006fae:	73fb      	strb	r3, [r7, #15]
          break;
 8006fb0:	e018      	b.n	8006fe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fcad 	bl	8007914 <USBD_GetConfig>
          break;
 8006fba:	e013      	b.n	8006fe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fcde 	bl	8007980 <USBD_GetStatus>
          break;
 8006fc4:	e00e      	b.n	8006fe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fd0d 	bl	80079e8 <USBD_SetFeature>
          break;
 8006fce:	e009      	b.n	8006fe4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fd31 	bl	8007a3a <USBD_ClrFeature>
          break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fd88 	bl	8007af2 <USBD_CtlError>
          break;
 8006fe2:	bf00      	nop
      }
      break;
 8006fe4:	e004      	b.n	8006ff0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fd82 	bl	8007af2 <USBD_CtlError>
      break;
 8006fee:	bf00      	nop
  }

  return ret;
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop

08006ffc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007012:	2b40      	cmp	r3, #64	; 0x40
 8007014:	d005      	beq.n	8007022 <USBD_StdItfReq+0x26>
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d852      	bhi.n	80070c0 <USBD_StdItfReq+0xc4>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <USBD_StdItfReq+0x26>
 800701e:	2b20      	cmp	r3, #32
 8007020:	d14e      	bne.n	80070c0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007028:	b2db      	uxtb	r3, r3
 800702a:	3b01      	subs	r3, #1
 800702c:	2b02      	cmp	r3, #2
 800702e:	d840      	bhi.n	80070b2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	889b      	ldrh	r3, [r3, #4]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b01      	cmp	r3, #1
 8007038:	d836      	bhi.n	80070a8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	889b      	ldrh	r3, [r3, #4]
 800703e:	b2db      	uxtb	r3, r3
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff fed9 	bl	8006dfa <USBD_CoreFindIF>
 8007048:	4603      	mov	r3, r0
 800704a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	2bff      	cmp	r3, #255	; 0xff
 8007050:	d01d      	beq.n	800708e <USBD_StdItfReq+0x92>
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d11a      	bne.n	800708e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007058:	7bba      	ldrb	r2, [r7, #14]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	32ae      	adds	r2, #174	; 0xae
 800705e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00f      	beq.n	8007088 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007068:	7bba      	ldrb	r2, [r7, #14]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007070:	7bba      	ldrb	r2, [r7, #14]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	32ae      	adds	r2, #174	; 0xae
 8007076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	6839      	ldr	r1, [r7, #0]
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	4798      	blx	r3
 8007082:	4603      	mov	r3, r0
 8007084:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007086:	e004      	b.n	8007092 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007088:	2303      	movs	r3, #3
 800708a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800708c:	e001      	b.n	8007092 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800708e:	2303      	movs	r3, #3
 8007090:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	88db      	ldrh	r3, [r3, #6]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d110      	bne.n	80070bc <USBD_StdItfReq+0xc0>
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d10d      	bne.n	80070bc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fdf1 	bl	8007c88 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070a6:	e009      	b.n	80070bc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 fd21 	bl	8007af2 <USBD_CtlError>
          break;
 80070b0:	e004      	b.n	80070bc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070b2:	6839      	ldr	r1, [r7, #0]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fd1c 	bl	8007af2 <USBD_CtlError>
          break;
 80070ba:	e000      	b.n	80070be <USBD_StdItfReq+0xc2>
          break;
 80070bc:	bf00      	nop
      }
      break;
 80070be:	e004      	b.n	80070ca <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fd15 	bl	8007af2 <USBD_CtlError>
      break;
 80070c8:	bf00      	nop
  }

  return ret;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	889b      	ldrh	r3, [r3, #4]
 80070e6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070f0:	2b40      	cmp	r3, #64	; 0x40
 80070f2:	d007      	beq.n	8007104 <USBD_StdEPReq+0x30>
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	f200 817f 	bhi.w	80073f8 <USBD_StdEPReq+0x324>
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d02a      	beq.n	8007154 <USBD_StdEPReq+0x80>
 80070fe:	2b20      	cmp	r3, #32
 8007100:	f040 817a 	bne.w	80073f8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fe83 	bl	8006e14 <USBD_CoreFindEP>
 800710e:	4603      	mov	r3, r0
 8007110:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007112:	7b7b      	ldrb	r3, [r7, #13]
 8007114:	2bff      	cmp	r3, #255	; 0xff
 8007116:	f000 8174 	beq.w	8007402 <USBD_StdEPReq+0x32e>
 800711a:	7b7b      	ldrb	r3, [r7, #13]
 800711c:	2b00      	cmp	r3, #0
 800711e:	f040 8170 	bne.w	8007402 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007122:	7b7a      	ldrb	r2, [r7, #13]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800712a:	7b7a      	ldrb	r2, [r7, #13]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	32ae      	adds	r2, #174	; 0xae
 8007130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 8163 	beq.w	8007402 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800713c:	7b7a      	ldrb	r2, [r7, #13]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	32ae      	adds	r2, #174	; 0xae
 8007142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	6839      	ldr	r1, [r7, #0]
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	4798      	blx	r3
 800714e:	4603      	mov	r3, r0
 8007150:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007152:	e156      	b.n	8007402 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	785b      	ldrb	r3, [r3, #1]
 8007158:	2b03      	cmp	r3, #3
 800715a:	d008      	beq.n	800716e <USBD_StdEPReq+0x9a>
 800715c:	2b03      	cmp	r3, #3
 800715e:	f300 8145 	bgt.w	80073ec <USBD_StdEPReq+0x318>
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 809b 	beq.w	800729e <USBD_StdEPReq+0x1ca>
 8007168:	2b01      	cmp	r3, #1
 800716a:	d03c      	beq.n	80071e6 <USBD_StdEPReq+0x112>
 800716c:	e13e      	b.n	80073ec <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d002      	beq.n	8007180 <USBD_StdEPReq+0xac>
 800717a:	2b03      	cmp	r3, #3
 800717c:	d016      	beq.n	80071ac <USBD_StdEPReq+0xd8>
 800717e:	e02c      	b.n	80071da <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007180:	7bbb      	ldrb	r3, [r7, #14]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00d      	beq.n	80071a2 <USBD_StdEPReq+0xce>
 8007186:	7bbb      	ldrb	r3, [r7, #14]
 8007188:	2b80      	cmp	r3, #128	; 0x80
 800718a:	d00a      	beq.n	80071a2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 f98f 	bl	80084b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007196:	2180      	movs	r1, #128	; 0x80
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 f98b 	bl	80084b4 <USBD_LL_StallEP>
 800719e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071a0:	e020      	b.n	80071e4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fca4 	bl	8007af2 <USBD_CtlError>
              break;
 80071aa:	e01b      	b.n	80071e4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	885b      	ldrh	r3, [r3, #2]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10e      	bne.n	80071d2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <USBD_StdEPReq+0xfe>
 80071ba:	7bbb      	ldrb	r3, [r7, #14]
 80071bc:	2b80      	cmp	r3, #128	; 0x80
 80071be:	d008      	beq.n	80071d2 <USBD_StdEPReq+0xfe>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	88db      	ldrh	r3, [r3, #6]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d104      	bne.n	80071d2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
 80071ca:	4619      	mov	r1, r3
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f001 f971 	bl	80084b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 fd58 	bl	8007c88 <USBD_CtlSendStatus>

              break;
 80071d8:	e004      	b.n	80071e4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071da:	6839      	ldr	r1, [r7, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 fc88 	bl	8007af2 <USBD_CtlError>
              break;
 80071e2:	bf00      	nop
          }
          break;
 80071e4:	e107      	b.n	80073f6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b02      	cmp	r3, #2
 80071f0:	d002      	beq.n	80071f8 <USBD_StdEPReq+0x124>
 80071f2:	2b03      	cmp	r3, #3
 80071f4:	d016      	beq.n	8007224 <USBD_StdEPReq+0x150>
 80071f6:	e04b      	b.n	8007290 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00d      	beq.n	800721a <USBD_StdEPReq+0x146>
 80071fe:	7bbb      	ldrb	r3, [r7, #14]
 8007200:	2b80      	cmp	r3, #128	; 0x80
 8007202:	d00a      	beq.n	800721a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f001 f953 	bl	80084b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800720e:	2180      	movs	r1, #128	; 0x80
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 f94f 	bl	80084b4 <USBD_LL_StallEP>
 8007216:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007218:	e040      	b.n	800729c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fc68 	bl	8007af2 <USBD_CtlError>
              break;
 8007222:	e03b      	b.n	800729c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	885b      	ldrh	r3, [r3, #2]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d136      	bne.n	800729a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800722c:	7bbb      	ldrb	r3, [r7, #14]
 800722e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007232:	2b00      	cmp	r3, #0
 8007234:	d004      	beq.n	8007240 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007236:	7bbb      	ldrb	r3, [r7, #14]
 8007238:	4619      	mov	r1, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f001 f959 	bl	80084f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fd21 	bl	8007c88 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff fde2 	bl	8006e14 <USBD_CoreFindEP>
 8007250:	4603      	mov	r3, r0
 8007252:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007254:	7b7b      	ldrb	r3, [r7, #13]
 8007256:	2bff      	cmp	r3, #255	; 0xff
 8007258:	d01f      	beq.n	800729a <USBD_StdEPReq+0x1c6>
 800725a:	7b7b      	ldrb	r3, [r7, #13]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d11c      	bne.n	800729a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007260:	7b7a      	ldrb	r2, [r7, #13]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007268:	7b7a      	ldrb	r2, [r7, #13]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	32ae      	adds	r2, #174	; 0xae
 800726e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d010      	beq.n	800729a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007278:	7b7a      	ldrb	r2, [r7, #13]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	32ae      	adds	r2, #174	; 0xae
 800727e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	4798      	blx	r3
 800728a:	4603      	mov	r3, r0
 800728c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800728e:	e004      	b.n	800729a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fc2d 	bl	8007af2 <USBD_CtlError>
              break;
 8007298:	e000      	b.n	800729c <USBD_StdEPReq+0x1c8>
              break;
 800729a:	bf00      	nop
          }
          break;
 800729c:	e0ab      	b.n	80073f6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b02      	cmp	r3, #2
 80072a8:	d002      	beq.n	80072b0 <USBD_StdEPReq+0x1dc>
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d032      	beq.n	8007314 <USBD_StdEPReq+0x240>
 80072ae:	e097      	b.n	80073e0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072b0:	7bbb      	ldrb	r3, [r7, #14]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d007      	beq.n	80072c6 <USBD_StdEPReq+0x1f2>
 80072b6:	7bbb      	ldrb	r3, [r7, #14]
 80072b8:	2b80      	cmp	r3, #128	; 0x80
 80072ba:	d004      	beq.n	80072c6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072bc:	6839      	ldr	r1, [r7, #0]
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fc17 	bl	8007af2 <USBD_CtlError>
                break;
 80072c4:	e091      	b.n	80073ea <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	da0b      	bge.n	80072e6 <USBD_StdEPReq+0x212>
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	3310      	adds	r3, #16
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	4413      	add	r3, r2
 80072e2:	3304      	adds	r3, #4
 80072e4:	e00b      	b.n	80072fe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072e6:	7bbb      	ldrb	r3, [r7, #14]
 80072e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ec:	4613      	mov	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	4413      	add	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	4413      	add	r3, r2
 80072fc:	3304      	adds	r3, #4
 80072fe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	2200      	movs	r2, #0
 8007304:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2202      	movs	r2, #2
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fc61 	bl	8007bd4 <USBD_CtlSendData>
              break;
 8007312:	e06a      	b.n	80073ea <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007314:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007318:	2b00      	cmp	r3, #0
 800731a:	da11      	bge.n	8007340 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800731c:	7bbb      	ldrb	r3, [r7, #14]
 800731e:	f003 020f 	and.w	r2, r3, #15
 8007322:	6879      	ldr	r1, [r7, #4]
 8007324:	4613      	mov	r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	440b      	add	r3, r1
 800732e:	3324      	adds	r3, #36	; 0x24
 8007330:	881b      	ldrh	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d117      	bne.n	8007366 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fbda 	bl	8007af2 <USBD_CtlError>
                  break;
 800733e:	e054      	b.n	80073ea <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	f003 020f 	and.w	r2, r3, #15
 8007346:	6879      	ldr	r1, [r7, #4]
 8007348:	4613      	mov	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	440b      	add	r3, r1
 8007352:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fbc7 	bl	8007af2 <USBD_CtlError>
                  break;
 8007364:	e041      	b.n	80073ea <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007366:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800736a:	2b00      	cmp	r3, #0
 800736c:	da0b      	bge.n	8007386 <USBD_StdEPReq+0x2b2>
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	3310      	adds	r3, #16
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	4413      	add	r3, r2
 8007382:	3304      	adds	r3, #4
 8007384:	e00b      	b.n	800739e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007386:	7bbb      	ldrb	r3, [r7, #14]
 8007388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	4413      	add	r3, r2
 800739c:	3304      	adds	r3, #4
 800739e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073a0:	7bbb      	ldrb	r3, [r7, #14]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <USBD_StdEPReq+0x2d8>
 80073a6:	7bbb      	ldrb	r3, [r7, #14]
 80073a8:	2b80      	cmp	r3, #128	; 0x80
 80073aa:	d103      	bne.n	80073b4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	e00e      	b.n	80073d2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073b4:	7bbb      	ldrb	r3, [r7, #14]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f8b9 	bl	8008530 <USBD_LL_IsStallEP>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d003      	beq.n	80073cc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2201      	movs	r2, #1
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	e002      	b.n	80073d2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2202      	movs	r2, #2
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fbfb 	bl	8007bd4 <USBD_CtlSendData>
              break;
 80073de:	e004      	b.n	80073ea <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80073e0:	6839      	ldr	r1, [r7, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fb85 	bl	8007af2 <USBD_CtlError>
              break;
 80073e8:	bf00      	nop
          }
          break;
 80073ea:	e004      	b.n	80073f6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fb7f 	bl	8007af2 <USBD_CtlError>
          break;
 80073f4:	bf00      	nop
      }
      break;
 80073f6:	e005      	b.n	8007404 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80073f8:	6839      	ldr	r1, [r7, #0]
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fb79 	bl	8007af2 <USBD_CtlError>
      break;
 8007400:	e000      	b.n	8007404 <USBD_StdEPReq+0x330>
      break;
 8007402:	bf00      	nop
  }

  return ret;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	885b      	ldrh	r3, [r3, #2]
 800742a:	0a1b      	lsrs	r3, r3, #8
 800742c:	b29b      	uxth	r3, r3
 800742e:	3b01      	subs	r3, #1
 8007430:	2b0e      	cmp	r3, #14
 8007432:	f200 8152 	bhi.w	80076da <USBD_GetDescriptor+0x2ca>
 8007436:	a201      	add	r2, pc, #4	; (adr r2, 800743c <USBD_GetDescriptor+0x2c>)
 8007438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800743c:	080074ad 	.word	0x080074ad
 8007440:	080074c5 	.word	0x080074c5
 8007444:	08007505 	.word	0x08007505
 8007448:	080076db 	.word	0x080076db
 800744c:	080076db 	.word	0x080076db
 8007450:	0800767b 	.word	0x0800767b
 8007454:	080076a7 	.word	0x080076a7
 8007458:	080076db 	.word	0x080076db
 800745c:	080076db 	.word	0x080076db
 8007460:	080076db 	.word	0x080076db
 8007464:	080076db 	.word	0x080076db
 8007468:	080076db 	.word	0x080076db
 800746c:	080076db 	.word	0x080076db
 8007470:	080076db 	.word	0x080076db
 8007474:	08007479 	.word	0x08007479
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	7c12      	ldrb	r2, [r2, #16]
 8007490:	f107 0108 	add.w	r1, r7, #8
 8007494:	4610      	mov	r0, r2
 8007496:	4798      	blx	r3
 8007498:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800749a:	e126      	b.n	80076ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800749c:	6839      	ldr	r1, [r7, #0]
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 fb27 	bl	8007af2 <USBD_CtlError>
        err++;
 80074a4:	7afb      	ldrb	r3, [r7, #11]
 80074a6:	3301      	adds	r3, #1
 80074a8:	72fb      	strb	r3, [r7, #11]
      break;
 80074aa:	e11e      	b.n	80076ea <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	7c12      	ldrb	r2, [r2, #16]
 80074b8:	f107 0108 	add.w	r1, r7, #8
 80074bc:	4610      	mov	r0, r2
 80074be:	4798      	blx	r3
 80074c0:	60f8      	str	r0, [r7, #12]
      break;
 80074c2:	e112      	b.n	80076ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	7c1b      	ldrb	r3, [r3, #16]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10d      	bne.n	80074e8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d4:	f107 0208 	add.w	r2, r7, #8
 80074d8:	4610      	mov	r0, r2
 80074da:	4798      	blx	r3
 80074dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3301      	adds	r3, #1
 80074e2:	2202      	movs	r2, #2
 80074e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80074e6:	e100      	b.n	80076ea <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f0:	f107 0208 	add.w	r2, r7, #8
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
 80074f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	3301      	adds	r3, #1
 80074fe:	2202      	movs	r2, #2
 8007500:	701a      	strb	r2, [r3, #0]
      break;
 8007502:	e0f2      	b.n	80076ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	885b      	ldrh	r3, [r3, #2]
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b05      	cmp	r3, #5
 800750c:	f200 80ac 	bhi.w	8007668 <USBD_GetDescriptor+0x258>
 8007510:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <USBD_GetDescriptor+0x108>)
 8007512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007516:	bf00      	nop
 8007518:	08007531 	.word	0x08007531
 800751c:	08007565 	.word	0x08007565
 8007520:	08007599 	.word	0x08007599
 8007524:	080075cd 	.word	0x080075cd
 8007528:	08007601 	.word	0x08007601
 800752c:	08007635 	.word	0x08007635
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00b      	beq.n	8007554 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	7c12      	ldrb	r2, [r2, #16]
 8007548:	f107 0108 	add.w	r1, r7, #8
 800754c:	4610      	mov	r0, r2
 800754e:	4798      	blx	r3
 8007550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007552:	e091      	b.n	8007678 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 facb 	bl	8007af2 <USBD_CtlError>
            err++;
 800755c:	7afb      	ldrb	r3, [r7, #11]
 800755e:	3301      	adds	r3, #1
 8007560:	72fb      	strb	r3, [r7, #11]
          break;
 8007562:	e089      	b.n	8007678 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	7c12      	ldrb	r2, [r2, #16]
 800757c:	f107 0108 	add.w	r1, r7, #8
 8007580:	4610      	mov	r0, r2
 8007582:	4798      	blx	r3
 8007584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007586:	e077      	b.n	8007678 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 fab1 	bl	8007af2 <USBD_CtlError>
            err++;
 8007590:	7afb      	ldrb	r3, [r7, #11]
 8007592:	3301      	adds	r3, #1
 8007594:	72fb      	strb	r3, [r7, #11]
          break;
 8007596:	e06f      	b.n	8007678 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	7c12      	ldrb	r2, [r2, #16]
 80075b0:	f107 0108 	add.w	r1, r7, #8
 80075b4:	4610      	mov	r0, r2
 80075b6:	4798      	blx	r3
 80075b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ba:	e05d      	b.n	8007678 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 fa97 	bl	8007af2 <USBD_CtlError>
            err++;
 80075c4:	7afb      	ldrb	r3, [r7, #11]
 80075c6:	3301      	adds	r3, #1
 80075c8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ca:	e055      	b.n	8007678 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d00b      	beq.n	80075f0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	7c12      	ldrb	r2, [r2, #16]
 80075e4:	f107 0108 	add.w	r1, r7, #8
 80075e8:	4610      	mov	r0, r2
 80075ea:	4798      	blx	r3
 80075ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075ee:	e043      	b.n	8007678 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80075f0:	6839      	ldr	r1, [r7, #0]
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 fa7d 	bl	8007af2 <USBD_CtlError>
            err++;
 80075f8:	7afb      	ldrb	r3, [r7, #11]
 80075fa:	3301      	adds	r3, #1
 80075fc:	72fb      	strb	r3, [r7, #11]
          break;
 80075fe:	e03b      	b.n	8007678 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00b      	beq.n	8007624 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	7c12      	ldrb	r2, [r2, #16]
 8007618:	f107 0108 	add.w	r1, r7, #8
 800761c:	4610      	mov	r0, r2
 800761e:	4798      	blx	r3
 8007620:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007622:	e029      	b.n	8007678 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 fa63 	bl	8007af2 <USBD_CtlError>
            err++;
 800762c:	7afb      	ldrb	r3, [r7, #11]
 800762e:	3301      	adds	r3, #1
 8007630:	72fb      	strb	r3, [r7, #11]
          break;
 8007632:	e021      	b.n	8007678 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d00b      	beq.n	8007658 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	7c12      	ldrb	r2, [r2, #16]
 800764c:	f107 0108 	add.w	r1, r7, #8
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
 8007654:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007656:	e00f      	b.n	8007678 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007658:	6839      	ldr	r1, [r7, #0]
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fa49 	bl	8007af2 <USBD_CtlError>
            err++;
 8007660:	7afb      	ldrb	r3, [r7, #11]
 8007662:	3301      	adds	r3, #1
 8007664:	72fb      	strb	r3, [r7, #11]
          break;
 8007666:	e007      	b.n	8007678 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fa41 	bl	8007af2 <USBD_CtlError>
          err++;
 8007670:	7afb      	ldrb	r3, [r7, #11]
 8007672:	3301      	adds	r3, #1
 8007674:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007676:	bf00      	nop
      }
      break;
 8007678:	e037      	b.n	80076ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	7c1b      	ldrb	r3, [r3, #16]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d109      	bne.n	8007696 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768a:	f107 0208 	add.w	r2, r7, #8
 800768e:	4610      	mov	r0, r2
 8007690:	4798      	blx	r3
 8007692:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007694:	e029      	b.n	80076ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fa2a 	bl	8007af2 <USBD_CtlError>
        err++;
 800769e:	7afb      	ldrb	r3, [r7, #11]
 80076a0:	3301      	adds	r3, #1
 80076a2:	72fb      	strb	r3, [r7, #11]
      break;
 80076a4:	e021      	b.n	80076ea <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	7c1b      	ldrb	r3, [r3, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10d      	bne.n	80076ca <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b6:	f107 0208 	add.w	r2, r7, #8
 80076ba:	4610      	mov	r0, r2
 80076bc:	4798      	blx	r3
 80076be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	3301      	adds	r3, #1
 80076c4:	2207      	movs	r2, #7
 80076c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076c8:	e00f      	b.n	80076ea <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fa10 	bl	8007af2 <USBD_CtlError>
        err++;
 80076d2:	7afb      	ldrb	r3, [r7, #11]
 80076d4:	3301      	adds	r3, #1
 80076d6:	72fb      	strb	r3, [r7, #11]
      break;
 80076d8:	e007      	b.n	80076ea <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fa08 	bl	8007af2 <USBD_CtlError>
      err++;
 80076e2:	7afb      	ldrb	r3, [r7, #11]
 80076e4:	3301      	adds	r3, #1
 80076e6:	72fb      	strb	r3, [r7, #11]
      break;
 80076e8:	bf00      	nop
  }

  if (err != 0U)
 80076ea:	7afb      	ldrb	r3, [r7, #11]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d11e      	bne.n	800772e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	88db      	ldrh	r3, [r3, #6]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d016      	beq.n	8007726 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80076f8:	893b      	ldrh	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00e      	beq.n	800771c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	88da      	ldrh	r2, [r3, #6]
 8007702:	893b      	ldrh	r3, [r7, #8]
 8007704:	4293      	cmp	r3, r2
 8007706:	bf28      	it	cs
 8007708:	4613      	movcs	r3, r2
 800770a:	b29b      	uxth	r3, r3
 800770c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800770e:	893b      	ldrh	r3, [r7, #8]
 8007710:	461a      	mov	r2, r3
 8007712:	68f9      	ldr	r1, [r7, #12]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa5d 	bl	8007bd4 <USBD_CtlSendData>
 800771a:	e009      	b.n	8007730 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f9e7 	bl	8007af2 <USBD_CtlError>
 8007724:	e004      	b.n	8007730 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 faae 	bl	8007c88 <USBD_CtlSendStatus>
 800772c:	e000      	b.n	8007730 <USBD_GetDescriptor+0x320>
    return;
 800772e:	bf00      	nop
  }
}
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop

08007738 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	889b      	ldrh	r3, [r3, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d131      	bne.n	80077ae <USBD_SetAddress+0x76>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	88db      	ldrh	r3, [r3, #6]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d12d      	bne.n	80077ae <USBD_SetAddress+0x76>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	885b      	ldrh	r3, [r3, #2]
 8007756:	2b7f      	cmp	r3, #127	; 0x7f
 8007758:	d829      	bhi.n	80077ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	885b      	ldrh	r3, [r3, #2]
 800775e:	b2db      	uxtb	r3, r3
 8007760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007764:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b03      	cmp	r3, #3
 8007770:	d104      	bne.n	800777c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 f9bc 	bl	8007af2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777a:	e01d      	b.n	80077b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	7bfa      	ldrb	r2, [r7, #15]
 8007780:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	4619      	mov	r1, r3
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fefd 	bl	8008588 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fa7a 	bl	8007c88 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d004      	beq.n	80077a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2202      	movs	r2, #2
 800779e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077a2:	e009      	b.n	80077b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077ac:	e004      	b.n	80077b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077ae:	6839      	ldr	r1, [r7, #0]
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 f99e 	bl	8007af2 <USBD_CtlError>
  }
}
 80077b6:	bf00      	nop
 80077b8:	bf00      	nop
 80077ba:	3710      	adds	r7, #16
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ca:	2300      	movs	r3, #0
 80077cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	885b      	ldrh	r3, [r3, #2]
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	4b4e      	ldr	r3, [pc, #312]	; (8007910 <USBD_SetConfig+0x150>)
 80077d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80077d8:	4b4d      	ldr	r3, [pc, #308]	; (8007910 <USBD_SetConfig+0x150>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d905      	bls.n	80077ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f985 	bl	8007af2 <USBD_CtlError>
    return USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e08c      	b.n	8007906 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d002      	beq.n	80077fe <USBD_SetConfig+0x3e>
 80077f8:	2b03      	cmp	r3, #3
 80077fa:	d029      	beq.n	8007850 <USBD_SetConfig+0x90>
 80077fc:	e075      	b.n	80078ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077fe:	4b44      	ldr	r3, [pc, #272]	; (8007910 <USBD_SetConfig+0x150>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d020      	beq.n	8007848 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007806:	4b42      	ldr	r3, [pc, #264]	; (8007910 <USBD_SetConfig+0x150>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007810:	4b3f      	ldr	r3, [pc, #252]	; (8007910 <USBD_SetConfig+0x150>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7fe ffb7 	bl	800678a <USBD_SetClassConfig>
 800781c:	4603      	mov	r3, r0
 800781e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007820:	7bfb      	ldrb	r3, [r7, #15]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d008      	beq.n	8007838 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f962 	bl	8007af2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007836:	e065      	b.n	8007904 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fa25 	bl	8007c88 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2203      	movs	r2, #3
 8007842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007846:	e05d      	b.n	8007904 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fa1d 	bl	8007c88 <USBD_CtlSendStatus>
      break;
 800784e:	e059      	b.n	8007904 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007850:	4b2f      	ldr	r3, [pc, #188]	; (8007910 <USBD_SetConfig+0x150>)
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d112      	bne.n	800787e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2202      	movs	r2, #2
 800785c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007860:	4b2b      	ldr	r3, [pc, #172]	; (8007910 <USBD_SetConfig+0x150>)
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800786a:	4b29      	ldr	r3, [pc, #164]	; (8007910 <USBD_SetConfig+0x150>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7fe ffa6 	bl	80067c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fa06 	bl	8007c88 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800787c:	e042      	b.n	8007904 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800787e:	4b24      	ldr	r3, [pc, #144]	; (8007910 <USBD_SetConfig+0x150>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	429a      	cmp	r2, r3
 800788a:	d02a      	beq.n	80078e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7fe ff94 	bl	80067c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800789a:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <USBD_SetConfig+0x150>)
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078a4:	4b1a      	ldr	r3, [pc, #104]	; (8007910 <USBD_SetConfig+0x150>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f7fe ff6d 	bl	800678a <USBD_SetClassConfig>
 80078b0:	4603      	mov	r3, r0
 80078b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00f      	beq.n	80078da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 f918 	bl	8007af2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	4619      	mov	r1, r3
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7fe ff79 	bl	80067c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80078d8:	e014      	b.n	8007904 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f9d4 	bl	8007c88 <USBD_CtlSendStatus>
      break;
 80078e0:	e010      	b.n	8007904 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f9d0 	bl	8007c88 <USBD_CtlSendStatus>
      break;
 80078e8:	e00c      	b.n	8007904 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80078ea:	6839      	ldr	r1, [r7, #0]
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f900 	bl	8007af2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078f2:	4b07      	ldr	r3, [pc, #28]	; (8007910 <USBD_SetConfig+0x150>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7fe ff62 	bl	80067c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078fe:	2303      	movs	r3, #3
 8007900:	73fb      	strb	r3, [r7, #15]
      break;
 8007902:	bf00      	nop
  }

  return ret;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	24000184 	.word	0x24000184

08007914 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	88db      	ldrh	r3, [r3, #6]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d004      	beq.n	8007930 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f8e2 	bl	8007af2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800792e:	e023      	b.n	8007978 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b02      	cmp	r3, #2
 800793a:	dc02      	bgt.n	8007942 <USBD_GetConfig+0x2e>
 800793c:	2b00      	cmp	r3, #0
 800793e:	dc03      	bgt.n	8007948 <USBD_GetConfig+0x34>
 8007940:	e015      	b.n	800796e <USBD_GetConfig+0x5a>
 8007942:	2b03      	cmp	r3, #3
 8007944:	d00b      	beq.n	800795e <USBD_GetConfig+0x4a>
 8007946:	e012      	b.n	800796e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3308      	adds	r3, #8
 8007952:	2201      	movs	r2, #1
 8007954:	4619      	mov	r1, r3
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f93c 	bl	8007bd4 <USBD_CtlSendData>
        break;
 800795c:	e00c      	b.n	8007978 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3304      	adds	r3, #4
 8007962:	2201      	movs	r2, #1
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 f934 	bl	8007bd4 <USBD_CtlSendData>
        break;
 800796c:	e004      	b.n	8007978 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f8be 	bl	8007af2 <USBD_CtlError>
        break;
 8007976:	bf00      	nop
}
 8007978:	bf00      	nop
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007990:	b2db      	uxtb	r3, r3
 8007992:	3b01      	subs	r3, #1
 8007994:	2b02      	cmp	r3, #2
 8007996:	d81e      	bhi.n	80079d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	88db      	ldrh	r3, [r3, #6]
 800799c:	2b02      	cmp	r3, #2
 800799e:	d004      	beq.n	80079aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079a0:	6839      	ldr	r1, [r7, #0]
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f8a5 	bl	8007af2 <USBD_CtlError>
        break;
 80079a8:	e01a      	b.n	80079e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d005      	beq.n	80079c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f043 0202 	orr.w	r2, r3, #2
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	330c      	adds	r3, #12
 80079ca:	2202      	movs	r2, #2
 80079cc:	4619      	mov	r1, r3
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f900 	bl	8007bd4 <USBD_CtlSendData>
      break;
 80079d4:	e004      	b.n	80079e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 f88a 	bl	8007af2 <USBD_CtlError>
      break;
 80079de:	bf00      	nop
  }
}
 80079e0:	bf00      	nop
 80079e2:	3708      	adds	r7, #8
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	885b      	ldrh	r3, [r3, #2]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d107      	bne.n	8007a0a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2201      	movs	r2, #1
 80079fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f940 	bl	8007c88 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a08:	e013      	b.n	8007a32 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	885b      	ldrh	r3, [r3, #2]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d10b      	bne.n	8007a2a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	889b      	ldrh	r3, [r3, #4]
 8007a16:	0a1b      	lsrs	r3, r3, #8
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f930 	bl	8007c88 <USBD_CtlSendStatus>
}
 8007a28:	e003      	b.n	8007a32 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a2a:	6839      	ldr	r1, [r7, #0]
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f860 	bl	8007af2 <USBD_CtlError>
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b082      	sub	sp, #8
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d80b      	bhi.n	8007a6a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	885b      	ldrh	r3, [r3, #2]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d10c      	bne.n	8007a74 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f910 	bl	8007c88 <USBD_CtlSendStatus>
      }
      break;
 8007a68:	e004      	b.n	8007a74 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a6a:	6839      	ldr	r1, [r7, #0]
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f840 	bl	8007af2 <USBD_CtlError>
      break;
 8007a72:	e000      	b.n	8007a76 <USBD_ClrFeature+0x3c>
      break;
 8007a74:	bf00      	nop
  }
}
 8007a76:	bf00      	nop
 8007a78:	3708      	adds	r7, #8
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a7e:	b580      	push	{r7, lr}
 8007a80:	b084      	sub	sp, #16
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	781a      	ldrb	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3301      	adds	r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	781a      	ldrb	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f7ff fa17 	bl	8006edc <SWAPBYTE>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007ac2:	68f8      	ldr	r0, [r7, #12]
 8007ac4:	f7ff fa0a 	bl	8006edc <SWAPBYTE>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	461a      	mov	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3301      	adds	r3, #1
 8007ada:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f7ff f9fd 	bl	8006edc <SWAPBYTE>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	80da      	strh	r2, [r3, #6]
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b082      	sub	sp, #8
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007afc:	2180      	movs	r1, #128	; 0x80
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fcd8 	bl	80084b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b04:	2100      	movs	r1, #0
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fcd4 	bl	80084b4 <USBD_LL_StallEP>
}
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b086      	sub	sp, #24
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d036      	beq.n	8007b98 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b2e:	6938      	ldr	r0, [r7, #16]
 8007b30:	f000 f836 	bl	8007ba0 <USBD_GetLen>
 8007b34:	4603      	mov	r3, r0
 8007b36:	3301      	adds	r3, #1
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	4413      	add	r3, r2
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	7812      	ldrb	r2, [r2, #0]
 8007b4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b4e:	7dfb      	ldrb	r3, [r7, #23]
 8007b50:	3301      	adds	r3, #1
 8007b52:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b54:	7dfb      	ldrb	r3, [r7, #23]
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	4413      	add	r3, r2
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b5e:	7dfb      	ldrb	r3, [r7, #23]
 8007b60:	3301      	adds	r3, #1
 8007b62:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b64:	e013      	b.n	8007b8e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b66:	7dfb      	ldrb	r3, [r7, #23]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	7812      	ldrb	r2, [r2, #0]
 8007b70:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	3301      	adds	r3, #1
 8007b76:	613b      	str	r3, [r7, #16]
    idx++;
 8007b78:	7dfb      	ldrb	r3, [r7, #23]
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	68ba      	ldr	r2, [r7, #8]
 8007b82:	4413      	add	r3, r2
 8007b84:	2200      	movs	r2, #0
 8007b86:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b88:	7dfb      	ldrb	r3, [r7, #23]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e7      	bne.n	8007b66 <USBD_GetString+0x52>
 8007b96:	e000      	b.n	8007b9a <USBD_GetString+0x86>
    return;
 8007b98:	bf00      	nop
  }
}
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007bb0:	e005      	b.n	8007bbe <USBD_GetLen+0x1e>
  {
    len++;
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d1f5      	bne.n	8007bb2 <USBD_GetLen+0x12>
  }

  return len;
 8007bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2202      	movs	r2, #2
 8007be4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	687a      	ldr	r2, [r7, #4]
 8007bec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fce3 	bl	80085c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	60f8      	str	r0, [r7, #12]
 8007c12:	60b9      	str	r1, [r7, #8]
 8007c14:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	68f8      	ldr	r0, [r7, #12]
 8007c1e:	f000 fcd2 	bl	80085c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	2100      	movs	r1, #0
 8007c56:	68f8      	ldr	r0, [r7, #12]
 8007c58:	f000 fcd6 	bl	8008608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	60f8      	str	r0, [r7, #12]
 8007c6e:	60b9      	str	r1, [r7, #8]
 8007c70:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	2100      	movs	r1, #0
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 fcc5 	bl	8008608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2204      	movs	r2, #4
 8007c94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c98:	2300      	movs	r3, #0
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fc91 	bl	80085c6 <USBD_LL_Transmit>

  return USBD_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}

08007cae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2205      	movs	r2, #5
 8007cba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	2100      	movs	r1, #0
 8007cc4:	6878      	ldr	r0, [r7, #4]
 8007cc6:	f000 fc9f 	bl	8008608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8007cd8:	2201      	movs	r2, #1
 8007cda:	4912      	ldr	r1, [pc, #72]	; (8007d24 <MX_USB_DEVICE_Init+0x50>)
 8007cdc:	4812      	ldr	r0, [pc, #72]	; (8007d28 <MX_USB_DEVICE_Init+0x54>)
 8007cde:	f7fe fcbb 	bl	8006658 <USBD_Init>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d001      	beq.n	8007cec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ce8:	f7f8 fc2a 	bl	8000540 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8007cec:	490f      	ldr	r1, [pc, #60]	; (8007d2c <MX_USB_DEVICE_Init+0x58>)
 8007cee:	480e      	ldr	r0, [pc, #56]	; (8007d28 <MX_USB_DEVICE_Init+0x54>)
 8007cf0:	f7fe fcf0 	bl	80066d4 <USBD_RegisterClass>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007cfa:	f7f8 fc21 	bl	8000540 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8007cfe:	490c      	ldr	r1, [pc, #48]	; (8007d30 <MX_USB_DEVICE_Init+0x5c>)
 8007d00:	4809      	ldr	r0, [pc, #36]	; (8007d28 <MX_USB_DEVICE_Init+0x54>)
 8007d02:	f7fe fbd9 	bl	80064b8 <USBD_CDC_RegisterInterface>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d001      	beq.n	8007d10 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d0c:	f7f8 fc18 	bl	8000540 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8007d10:	4805      	ldr	r0, [pc, #20]	; (8007d28 <MX_USB_DEVICE_Init+0x54>)
 8007d12:	f7fe fd23 	bl	800675c <USBD_Start>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d001      	beq.n	8007d20 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d1c:	f7f8 fc10 	bl	8000540 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d20:	bf00      	nop
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	240000b0 	.word	0x240000b0
 8007d28:	24000188 	.word	0x24000188
 8007d2c:	2400001c 	.word	0x2400001c
 8007d30:	2400009c 	.word	0x2400009c

08007d34 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4905      	ldr	r1, [pc, #20]	; (8007d50 <CDC_Init_HS+0x1c>)
 8007d3c:	4805      	ldr	r0, [pc, #20]	; (8007d54 <CDC_Init_HS+0x20>)
 8007d3e:	f7fe fbd5 	bl	80064ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8007d42:	4905      	ldr	r1, [pc, #20]	; (8007d58 <CDC_Init_HS+0x24>)
 8007d44:	4803      	ldr	r0, [pc, #12]	; (8007d54 <CDC_Init_HS+0x20>)
 8007d46:	f7fe fbf3 	bl	8006530 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d4a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	24000c64 	.word	0x24000c64
 8007d54:	24000188 	.word	0x24000188
 8007d58:	24000464 	.word	0x24000464

08007d5c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8007d60:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	4603      	mov	r3, r0
 8007d74:	6039      	str	r1, [r7, #0]
 8007d76:	71fb      	strb	r3, [r7, #7]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8007d7c:	79fb      	ldrb	r3, [r7, #7]
 8007d7e:	2b23      	cmp	r3, #35	; 0x23
 8007d80:	d84a      	bhi.n	8007e18 <CDC_Control_HS+0xac>
 8007d82:	a201      	add	r2, pc, #4	; (adr r2, 8007d88 <CDC_Control_HS+0x1c>)
 8007d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d88:	08007e19 	.word	0x08007e19
 8007d8c:	08007e19 	.word	0x08007e19
 8007d90:	08007e19 	.word	0x08007e19
 8007d94:	08007e19 	.word	0x08007e19
 8007d98:	08007e19 	.word	0x08007e19
 8007d9c:	08007e19 	.word	0x08007e19
 8007da0:	08007e19 	.word	0x08007e19
 8007da4:	08007e19 	.word	0x08007e19
 8007da8:	08007e19 	.word	0x08007e19
 8007dac:	08007e19 	.word	0x08007e19
 8007db0:	08007e19 	.word	0x08007e19
 8007db4:	08007e19 	.word	0x08007e19
 8007db8:	08007e19 	.word	0x08007e19
 8007dbc:	08007e19 	.word	0x08007e19
 8007dc0:	08007e19 	.word	0x08007e19
 8007dc4:	08007e19 	.word	0x08007e19
 8007dc8:	08007e19 	.word	0x08007e19
 8007dcc:	08007e19 	.word	0x08007e19
 8007dd0:	08007e19 	.word	0x08007e19
 8007dd4:	08007e19 	.word	0x08007e19
 8007dd8:	08007e19 	.word	0x08007e19
 8007ddc:	08007e19 	.word	0x08007e19
 8007de0:	08007e19 	.word	0x08007e19
 8007de4:	08007e19 	.word	0x08007e19
 8007de8:	08007e19 	.word	0x08007e19
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	08007e19 	.word	0x08007e19
 8007df4:	08007e19 	.word	0x08007e19
 8007df8:	08007e19 	.word	0x08007e19
 8007dfc:	08007e19 	.word	0x08007e19
 8007e00:	08007e19 	.word	0x08007e19
 8007e04:	08007e19 	.word	0x08007e19
 8007e08:	08007e19 	.word	0x08007e19
 8007e0c:	08007e19 	.word	0x08007e19
 8007e10:	08007e19 	.word	0x08007e19
 8007e14:	08007e19 	.word	0x08007e19
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e18:	bf00      	nop
  }

  return (USBD_OK);
 8007e1a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	370c      	adds	r7, #12
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b082      	sub	sp, #8
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	4805      	ldr	r0, [pc, #20]	; (8007e4c <CDC_Receive_HS+0x24>)
 8007e36:	f7fe fb7b 	bl	8006530 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8007e3a:	4804      	ldr	r0, [pc, #16]	; (8007e4c <CDC_Receive_HS+0x24>)
 8007e3c:	f7fe fbd6 	bl	80065ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007e40:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}
 8007e4a:	bf00      	nop
 8007e4c:	24000188 	.word	0x24000188

08007e50 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8007e60:	4b0d      	ldr	r3, [pc, #52]	; (8007e98 <CDC_Transmit_HS+0x48>)
 8007e62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e66:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e00b      	b.n	8007e8e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8007e76:	887b      	ldrh	r3, [r7, #2]
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6879      	ldr	r1, [r7, #4]
 8007e7c:	4806      	ldr	r0, [pc, #24]	; (8007e98 <CDC_Transmit_HS+0x48>)
 8007e7e:	f7fe fb35 	bl	80064ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8007e82:	4805      	ldr	r0, [pc, #20]	; (8007e98 <CDC_Transmit_HS+0x48>)
 8007e84:	f7fe fb72 	bl	800656c <USBD_CDC_TransmitPacket>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8007e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	24000188 	.word	0x24000188

08007e9c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b087      	sub	sp, #28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8007eae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
	...

08007ec0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2212      	movs	r2, #18
 8007ed0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8007ed2:	4b03      	ldr	r3, [pc, #12]	; (8007ee0 <USBD_HS_DeviceDescriptor+0x20>)
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	240000d0 	.word	0x240000d0

08007ee4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	6039      	str	r1, [r7, #0]
 8007eee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	2204      	movs	r2, #4
 8007ef4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ef6:	4b03      	ldr	r3, [pc, #12]	; (8007f04 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr
 8007f04:	240000e4 	.word	0x240000e4

08007f08 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	4603      	mov	r3, r0
 8007f10:	6039      	str	r1, [r7, #0]
 8007f12:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f14:	79fb      	ldrb	r3, [r7, #7]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d105      	bne.n	8007f26 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4907      	ldr	r1, [pc, #28]	; (8007f3c <USBD_HS_ProductStrDescriptor+0x34>)
 8007f1e:	4808      	ldr	r0, [pc, #32]	; (8007f40 <USBD_HS_ProductStrDescriptor+0x38>)
 8007f20:	f7ff fdf8 	bl	8007b14 <USBD_GetString>
 8007f24:	e004      	b.n	8007f30 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	4904      	ldr	r1, [pc, #16]	; (8007f3c <USBD_HS_ProductStrDescriptor+0x34>)
 8007f2a:	4805      	ldr	r0, [pc, #20]	; (8007f40 <USBD_HS_ProductStrDescriptor+0x38>)
 8007f2c:	f7ff fdf2 	bl	8007b14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f30:	4b02      	ldr	r3, [pc, #8]	; (8007f3c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	24001464 	.word	0x24001464
 8007f40:	08009640 	.word	0x08009640

08007f44 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f50:	683a      	ldr	r2, [r7, #0]
 8007f52:	4904      	ldr	r1, [pc, #16]	; (8007f64 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8007f54:	4804      	ldr	r0, [pc, #16]	; (8007f68 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8007f56:	f7ff fddd 	bl	8007b14 <USBD_GetString>
  return USBD_StrDesc;
 8007f5a:	4b02      	ldr	r3, [pc, #8]	; (8007f64 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	24001464 	.word	0x24001464
 8007f68:	08009658 	.word	0x08009658

08007f6c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	6039      	str	r1, [r7, #0]
 8007f76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	221a      	movs	r2, #26
 8007f7c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f7e:	f000 f843 	bl	8008008 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007f82:	4b02      	ldr	r3, [pc, #8]	; (8007f8c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	240000e8 	.word	0x240000e8

08007f90 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d105      	bne.n	8007fae <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	4907      	ldr	r1, [pc, #28]	; (8007fc4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8007fa6:	4808      	ldr	r0, [pc, #32]	; (8007fc8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8007fa8:	f7ff fdb4 	bl	8007b14 <USBD_GetString>
 8007fac:	e004      	b.n	8007fb8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	4904      	ldr	r1, [pc, #16]	; (8007fc4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8007fb2:	4805      	ldr	r0, [pc, #20]	; (8007fc8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8007fb4:	f7ff fdae 	bl	8007b14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fb8:	4b02      	ldr	r3, [pc, #8]	; (8007fc4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	24001464 	.word	0x24001464
 8007fc8:	0800966c 	.word	0x0800966c

08007fcc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	6039      	str	r1, [r7, #0]
 8007fd6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fd8:	79fb      	ldrb	r3, [r7, #7]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d105      	bne.n	8007fea <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007fde:	683a      	ldr	r2, [r7, #0]
 8007fe0:	4907      	ldr	r1, [pc, #28]	; (8008000 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007fe2:	4808      	ldr	r0, [pc, #32]	; (8008004 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007fe4:	f7ff fd96 	bl	8007b14 <USBD_GetString>
 8007fe8:	e004      	b.n	8007ff4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8007fea:	683a      	ldr	r2, [r7, #0]
 8007fec:	4904      	ldr	r1, [pc, #16]	; (8008000 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8007fee:	4805      	ldr	r0, [pc, #20]	; (8008004 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8007ff0:	f7ff fd90 	bl	8007b14 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ff4:	4b02      	ldr	r3, [pc, #8]	; (8008000 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	24001464 	.word	0x24001464
 8008004:	08009678 	.word	0x08009678

08008008 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800800e:	4b0f      	ldr	r3, [pc, #60]	; (800804c <Get_SerialNum+0x44>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008014:	4b0e      	ldr	r3, [pc, #56]	; (8008050 <Get_SerialNum+0x48>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800801a:	4b0e      	ldr	r3, [pc, #56]	; (8008054 <Get_SerialNum+0x4c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4413      	add	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800802e:	2208      	movs	r2, #8
 8008030:	4909      	ldr	r1, [pc, #36]	; (8008058 <Get_SerialNum+0x50>)
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	f000 f814 	bl	8008060 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008038:	2204      	movs	r2, #4
 800803a:	4908      	ldr	r1, [pc, #32]	; (800805c <Get_SerialNum+0x54>)
 800803c:	68b8      	ldr	r0, [r7, #8]
 800803e:	f000 f80f 	bl	8008060 <IntToUnicode>
  }
}
 8008042:	bf00      	nop
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	1ff1e800 	.word	0x1ff1e800
 8008050:	1ff1e804 	.word	0x1ff1e804
 8008054:	1ff1e808 	.word	0x1ff1e808
 8008058:	240000ea 	.word	0x240000ea
 800805c:	240000fa 	.word	0x240000fa

08008060 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008072:	2300      	movs	r3, #0
 8008074:	75fb      	strb	r3, [r7, #23]
 8008076:	e027      	b.n	80080c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	0f1b      	lsrs	r3, r3, #28
 800807c:	2b09      	cmp	r3, #9
 800807e:	d80b      	bhi.n	8008098 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	0f1b      	lsrs	r3, r3, #28
 8008084:	b2da      	uxtb	r2, r3
 8008086:	7dfb      	ldrb	r3, [r7, #23]
 8008088:	005b      	lsls	r3, r3, #1
 800808a:	4619      	mov	r1, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	440b      	add	r3, r1
 8008090:	3230      	adds	r2, #48	; 0x30
 8008092:	b2d2      	uxtb	r2, r2
 8008094:	701a      	strb	r2, [r3, #0]
 8008096:	e00a      	b.n	80080ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	0f1b      	lsrs	r3, r3, #28
 800809c:	b2da      	uxtb	r2, r3
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	005b      	lsls	r3, r3, #1
 80080a2:	4619      	mov	r1, r3
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	440b      	add	r3, r1
 80080a8:	3237      	adds	r2, #55	; 0x37
 80080aa:	b2d2      	uxtb	r2, r2
 80080ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	011b      	lsls	r3, r3, #4
 80080b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	3301      	adds	r3, #1
 80080ba:	68ba      	ldr	r2, [r7, #8]
 80080bc:	4413      	add	r3, r2
 80080be:	2200      	movs	r2, #0
 80080c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	3301      	adds	r3, #1
 80080c6:	75fb      	strb	r3, [r7, #23]
 80080c8:	7dfa      	ldrb	r2, [r7, #23]
 80080ca:	79fb      	ldrb	r3, [r7, #7]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d3d3      	bcc.n	8008078 <IntToUnicode+0x18>
  }
}
 80080d0:	bf00      	nop
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
	...

080080e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b0b2      	sub	sp, #200	; 0xc8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80080e8:	f107 0310 	add.w	r3, r7, #16
 80080ec:	22b8      	movs	r2, #184	; 0xb8
 80080ee:	2100      	movs	r1, #0
 80080f0:	4618      	mov	r0, r3
 80080f2:	f000 fc20 	bl	8008936 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a1a      	ldr	r2, [pc, #104]	; (8008164 <HAL_PCD_MspInit+0x84>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d12c      	bne.n	800815a <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008100:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008104:	f04f 0300 	mov.w	r3, #0
 8008108:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800810c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008110:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008114:	f107 0310 	add.w	r3, r7, #16
 8008118:	4618      	mov	r0, r3
 800811a:	f7fa ff73 	bl	8003004 <HAL_RCCEx_PeriphCLKConfig>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8008124:	f7f8 fa0c 	bl	8000540 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8008128:	f7fa f822 	bl	8002170 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800812c:	4b0e      	ldr	r3, [pc, #56]	; (8008168 <HAL_PCD_MspInit+0x88>)
 800812e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008132:	4a0d      	ldr	r2, [pc, #52]	; (8008168 <HAL_PCD_MspInit+0x88>)
 8008134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008138:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <HAL_PCD_MspInit+0x88>)
 800813e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8008142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008146:	60fb      	str	r3, [r7, #12]
 8008148:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800814a:	2200      	movs	r2, #0
 800814c:	2100      	movs	r1, #0
 800814e:	204d      	movs	r0, #77	; 0x4d
 8008150:	f7f8 fd21 	bl	8000b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008154:	204d      	movs	r0, #77	; 0x4d
 8008156:	f7f8 fd38 	bl	8000bca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800815a:	bf00      	nop
 800815c:	37c8      	adds	r7, #200	; 0xc8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	40040000 	.word	0x40040000
 8008168:	58024400 	.word	0x58024400

0800816c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f7fe fb37 	bl	80067f6 <USBD_LL_SetupStage>
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	460b      	mov	r3, r1
 800819a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081a2:	78fa      	ldrb	r2, [r7, #3]
 80081a4:	6879      	ldr	r1, [r7, #4]
 80081a6:	4613      	mov	r3, r2
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	4413      	add	r3, r2
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	440b      	add	r3, r1
 80081b0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	78fb      	ldrb	r3, [r7, #3]
 80081b8:	4619      	mov	r1, r3
 80081ba:	f7fe fb71 	bl	80068a0 <USBD_LL_DataOutStage>
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	460b      	mov	r3, r1
 80081d0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	6879      	ldr	r1, [r7, #4]
 80081dc:	4613      	mov	r3, r2
 80081de:	00db      	lsls	r3, r3, #3
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	440b      	add	r3, r1
 80081e6:	3348      	adds	r3, #72	; 0x48
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	78fb      	ldrb	r3, [r7, #3]
 80081ec:	4619      	mov	r1, r3
 80081ee:	f7fe fc0a 	bl	8006a06 <USBD_LL_DataInStage>
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008208:	4618      	mov	r0, r3
 800820a:	f7fe fd44 	bl	8006c96 <USBD_LL_SOF>
}
 800820e:	bf00      	nop
 8008210:	3708      	adds	r7, #8
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}

08008216 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008216:	b580      	push	{r7, lr}
 8008218:	b084      	sub	sp, #16
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800821e:	2301      	movs	r3, #1
 8008220:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d102      	bne.n	8008230 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
 800822e:	e008      	b.n	8008242 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b02      	cmp	r3, #2
 8008236:	d102      	bne.n	800823e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008238:	2301      	movs	r3, #1
 800823a:	73fb      	strb	r3, [r7, #15]
 800823c:	e001      	b.n	8008242 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800823e:	f7f8 f97f 	bl	8000540 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008248:	7bfa      	ldrb	r2, [r7, #15]
 800824a:	4611      	mov	r1, r2
 800824c:	4618      	mov	r0, r3
 800824e:	f7fe fcde 	bl	8006c0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe fc86 	bl	8006b6a <USBD_LL_Reset>
}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
	...

08008268 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fcd9 	bl	8006c2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800828e:	f043 0301 	orr.w	r3, r3, #1
 8008292:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a1b      	ldr	r3, [r3, #32]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d005      	beq.n	80082a8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800829c:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <HAL_PCD_SuspendCallback+0x48>)
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	4a03      	ldr	r2, [pc, #12]	; (80082b0 <HAL_PCD_SuspendCallback+0x48>)
 80082a2:	f043 0306 	orr.w	r3, r3, #6
 80082a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	e000ed00 	.word	0xe000ed00

080082b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fccf 	bl	8006c66 <USBD_LL_Resume>
}
 80082c8:	bf00      	nop
 80082ca:	3708      	adds	r7, #8
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	4611      	mov	r1, r2
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7fe fd27 	bl	8006d3a <USBD_LL_IsoOUTIncomplete>
}
 80082ec:	bf00      	nop
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}

080082f4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	460b      	mov	r3, r1
 80082fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008306:	78fa      	ldrb	r2, [r7, #3]
 8008308:	4611      	mov	r1, r2
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fce3 	bl	8006cd6 <USBD_LL_IsoINIncomplete>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fd39 	bl	8006d9e <USBD_LL_DevConnected>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008342:	4618      	mov	r0, r3
 8008344:	f7fe fd36 	bl	8006db4 <USBD_LL_DevDisconnected>
}
 8008348:	bf00      	nop
 800834a:	3708      	adds	r7, #8
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b082      	sub	sp, #8
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d140      	bne.n	80083e2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008360:	4a22      	ldr	r2, [pc, #136]	; (80083ec <USBD_LL_Init+0x9c>)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a20      	ldr	r2, [pc, #128]	; (80083ec <USBD_LL_Init+0x9c>)
 800836c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008370:	4b1e      	ldr	r3, [pc, #120]	; (80083ec <USBD_LL_Init+0x9c>)
 8008372:	4a1f      	ldr	r2, [pc, #124]	; (80083f0 <USBD_LL_Init+0xa0>)
 8008374:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8008376:	4b1d      	ldr	r3, [pc, #116]	; (80083ec <USBD_LL_Init+0x9c>)
 8008378:	2209      	movs	r2, #9
 800837a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800837c:	4b1b      	ldr	r3, [pc, #108]	; (80083ec <USBD_LL_Init+0x9c>)
 800837e:	2202      	movs	r2, #2
 8008380:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008382:	4b1a      	ldr	r3, [pc, #104]	; (80083ec <USBD_LL_Init+0x9c>)
 8008384:	2200      	movs	r2, #0
 8008386:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008388:	4b18      	ldr	r3, [pc, #96]	; (80083ec <USBD_LL_Init+0x9c>)
 800838a:	2202      	movs	r2, #2
 800838c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800838e:	4b17      	ldr	r3, [pc, #92]	; (80083ec <USBD_LL_Init+0x9c>)
 8008390:	2200      	movs	r2, #0
 8008392:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008394:	4b15      	ldr	r3, [pc, #84]	; (80083ec <USBD_LL_Init+0x9c>)
 8008396:	2200      	movs	r2, #0
 8008398:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800839a:	4b14      	ldr	r3, [pc, #80]	; (80083ec <USBD_LL_Init+0x9c>)
 800839c:	2200      	movs	r2, #0
 800839e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80083a0:	4b12      	ldr	r3, [pc, #72]	; (80083ec <USBD_LL_Init+0x9c>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80083a6:	4b11      	ldr	r3, [pc, #68]	; (80083ec <USBD_LL_Init+0x9c>)
 80083a8:	2200      	movs	r2, #0
 80083aa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80083ac:	4b0f      	ldr	r3, [pc, #60]	; (80083ec <USBD_LL_Init+0x9c>)
 80083ae:	2200      	movs	r2, #0
 80083b0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80083b2:	480e      	ldr	r0, [pc, #56]	; (80083ec <USBD_LL_Init+0x9c>)
 80083b4:	f7f8 fc23 	bl	8000bfe <HAL_PCD_Init>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d001      	beq.n	80083c2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80083be:	f7f8 f8bf 	bl	8000540 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80083c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083c6:	4809      	ldr	r0, [pc, #36]	; (80083ec <USBD_LL_Init+0x9c>)
 80083c8:	f7f9 fe91 	bl	80020ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80083cc:	2280      	movs	r2, #128	; 0x80
 80083ce:	2100      	movs	r1, #0
 80083d0:	4806      	ldr	r0, [pc, #24]	; (80083ec <USBD_LL_Init+0x9c>)
 80083d2:	f7f9 fe45 	bl	8002060 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80083d6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80083da:	2101      	movs	r1, #1
 80083dc:	4803      	ldr	r0, [pc, #12]	; (80083ec <USBD_LL_Init+0x9c>)
 80083de:	f7f9 fe3f 	bl	8002060 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3708      	adds	r7, #8
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	24001664 	.word	0x24001664
 80083f0:	40040000 	.word	0x40040000

080083f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083fc:	2300      	movs	r3, #0
 80083fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800840a:	4618      	mov	r0, r3
 800840c:	f7f8 fd1b 	bl	8000e46 <HAL_PCD_Start>
 8008410:	4603      	mov	r3, r0
 8008412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	4618      	mov	r0, r3
 8008418:	f000 f942 	bl	80086a0 <USBD_Get_USB_Status>
 800841c:	4603      	mov	r3, r0
 800841e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008420:	7bbb      	ldrb	r3, [r7, #14]
}
 8008422:	4618      	mov	r0, r3
 8008424:	3710      	adds	r7, #16
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b084      	sub	sp, #16
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	4608      	mov	r0, r1
 8008434:	4611      	mov	r1, r2
 8008436:	461a      	mov	r2, r3
 8008438:	4603      	mov	r3, r0
 800843a:	70fb      	strb	r3, [r7, #3]
 800843c:	460b      	mov	r3, r1
 800843e:	70bb      	strb	r3, [r7, #2]
 8008440:	4613      	mov	r3, r2
 8008442:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008448:	2300      	movs	r3, #0
 800844a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008452:	78bb      	ldrb	r3, [r7, #2]
 8008454:	883a      	ldrh	r2, [r7, #0]
 8008456:	78f9      	ldrb	r1, [r7, #3]
 8008458:	f7f9 fa1b 	bl	8001892 <HAL_PCD_EP_Open>
 800845c:	4603      	mov	r3, r0
 800845e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008460:	7bfb      	ldrb	r3, [r7, #15]
 8008462:	4618      	mov	r0, r3
 8008464:	f000 f91c 	bl	80086a0 <USBD_Get_USB_Status>
 8008468:	4603      	mov	r3, r0
 800846a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800846c:	7bbb      	ldrb	r3, [r7, #14]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3710      	adds	r7, #16
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b084      	sub	sp, #16
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
 800847e:	460b      	mov	r3, r1
 8008480:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008482:	2300      	movs	r3, #0
 8008484:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008486:	2300      	movs	r3, #0
 8008488:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008490:	78fa      	ldrb	r2, [r7, #3]
 8008492:	4611      	mov	r1, r2
 8008494:	4618      	mov	r0, r3
 8008496:	f7f9 fa64 	bl	8001962 <HAL_PCD_EP_Close>
 800849a:	4603      	mov	r3, r0
 800849c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 f8fd 	bl	80086a0 <USBD_Get_USB_Status>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c4:	2300      	movs	r3, #0
 80084c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084ce:	78fa      	ldrb	r2, [r7, #3]
 80084d0:	4611      	mov	r1, r2
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7f9 fb1e 	bl	8001b14 <HAL_PCD_EP_SetStall>
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084dc:	7bfb      	ldrb	r3, [r7, #15]
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 f8de 	bl	80086a0 <USBD_Get_USB_Status>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	6078      	str	r0, [r7, #4]
 80084fa:	460b      	mov	r3, r1
 80084fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800850c:	78fa      	ldrb	r2, [r7, #3]
 800850e:	4611      	mov	r1, r2
 8008510:	4618      	mov	r0, r3
 8008512:	f7f9 fb63 	bl	8001bdc <HAL_PCD_EP_ClrStall>
 8008516:	4603      	mov	r3, r0
 8008518:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800851a:	7bfb      	ldrb	r3, [r7, #15]
 800851c:	4618      	mov	r0, r3
 800851e:	f000 f8bf 	bl	80086a0 <USBD_Get_USB_Status>
 8008522:	4603      	mov	r3, r0
 8008524:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008526:	7bbb      	ldrb	r3, [r7, #14]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	460b      	mov	r3, r1
 800853a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008542:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008544:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008548:	2b00      	cmp	r3, #0
 800854a:	da0b      	bge.n	8008564 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800854c:	78fb      	ldrb	r3, [r7, #3]
 800854e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008552:	68f9      	ldr	r1, [r7, #12]
 8008554:	4613      	mov	r3, r2
 8008556:	00db      	lsls	r3, r3, #3
 8008558:	4413      	add	r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	440b      	add	r3, r1
 800855e:	333e      	adds	r3, #62	; 0x3e
 8008560:	781b      	ldrb	r3, [r3, #0]
 8008562:	e00b      	b.n	800857c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	4613      	mov	r3, r2
 800856e:	00db      	lsls	r3, r3, #3
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	440b      	add	r3, r1
 8008576:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800857a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800857c:	4618      	mov	r0, r3
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008598:	2300      	movs	r3, #0
 800859a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085a2:	78fa      	ldrb	r2, [r7, #3]
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7f9 f94e 	bl	8001848 <HAL_PCD_SetAddress>
 80085ac:	4603      	mov	r3, r0
 80085ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f000 f874 	bl	80086a0 <USBD_Get_USB_Status>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b086      	sub	sp, #24
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
 80085d2:	460b      	mov	r3, r1
 80085d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80085e4:	7af9      	ldrb	r1, [r7, #11]
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	f7f9 fa58 	bl	8001a9e <HAL_PCD_EP_Transmit>
 80085ee:	4603      	mov	r3, r0
 80085f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085f2:	7dfb      	ldrb	r3, [r7, #23]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 f853 	bl	80086a0 <USBD_Get_USB_Status>
 80085fa:	4603      	mov	r3, r0
 80085fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008600:	4618      	mov	r0, r3
 8008602:	3718      	adds	r7, #24
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	607a      	str	r2, [r7, #4]
 8008612:	603b      	str	r3, [r7, #0]
 8008614:	460b      	mov	r3, r1
 8008616:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008626:	7af9      	ldrb	r1, [r7, #11]
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	f7f9 f9e3 	bl	80019f6 <HAL_PCD_EP_Receive>
 8008630:	4603      	mov	r3, r0
 8008632:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008634:	7dfb      	ldrb	r3, [r7, #23]
 8008636:	4618      	mov	r0, r3
 8008638:	f000 f832 	bl	80086a0 <USBD_Get_USB_Status>
 800863c:	4603      	mov	r3, r0
 800863e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008640:	7dbb      	ldrb	r3, [r7, #22]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b082      	sub	sp, #8
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	460b      	mov	r3, r1
 8008654:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800865c:	78fa      	ldrb	r2, [r7, #3]
 800865e:	4611      	mov	r1, r2
 8008660:	4618      	mov	r0, r3
 8008662:	f7f9 fa04 	bl	8001a6e <HAL_PCD_EP_GetRxCount>
 8008666:	4603      	mov	r3, r0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008678:	4b03      	ldr	r3, [pc, #12]	; (8008688 <USBD_static_malloc+0x18>)
}
 800867a:	4618      	mov	r0, r3
 800867c:	370c      	adds	r7, #12
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	24001b70 	.word	0x24001b70

0800868c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80086ae:	79fb      	ldrb	r3, [r7, #7]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d817      	bhi.n	80086e4 <USBD_Get_USB_Status+0x44>
 80086b4:	a201      	add	r2, pc, #4	; (adr r2, 80086bc <USBD_Get_USB_Status+0x1c>)
 80086b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ba:	bf00      	nop
 80086bc:	080086cd 	.word	0x080086cd
 80086c0:	080086d3 	.word	0x080086d3
 80086c4:	080086d9 	.word	0x080086d9
 80086c8:	080086df 	.word	0x080086df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086cc:	2300      	movs	r3, #0
 80086ce:	73fb      	strb	r3, [r7, #15]
    break;
 80086d0:	e00b      	b.n	80086ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086d2:	2303      	movs	r3, #3
 80086d4:	73fb      	strb	r3, [r7, #15]
    break;
 80086d6:	e008      	b.n	80086ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086d8:	2301      	movs	r3, #1
 80086da:	73fb      	strb	r3, [r7, #15]
    break;
 80086dc:	e005      	b.n	80086ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086de:	2303      	movs	r3, #3
 80086e0:	73fb      	strb	r3, [r7, #15]
    break;
 80086e2:	e002      	b.n	80086ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086e4:	2303      	movs	r3, #3
 80086e6:	73fb      	strb	r3, [r7, #15]
    break;
 80086e8:	bf00      	nop
  }
  return usb_status;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <std>:
 80086f8:	2300      	movs	r3, #0
 80086fa:	b510      	push	{r4, lr}
 80086fc:	4604      	mov	r4, r0
 80086fe:	e9c0 3300 	strd	r3, r3, [r0]
 8008702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008706:	6083      	str	r3, [r0, #8]
 8008708:	8181      	strh	r1, [r0, #12]
 800870a:	6643      	str	r3, [r0, #100]	; 0x64
 800870c:	81c2      	strh	r2, [r0, #14]
 800870e:	6183      	str	r3, [r0, #24]
 8008710:	4619      	mov	r1, r3
 8008712:	2208      	movs	r2, #8
 8008714:	305c      	adds	r0, #92	; 0x5c
 8008716:	f000 f90e 	bl	8008936 <memset>
 800871a:	4b0d      	ldr	r3, [pc, #52]	; (8008750 <std+0x58>)
 800871c:	6263      	str	r3, [r4, #36]	; 0x24
 800871e:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <std+0x5c>)
 8008720:	62a3      	str	r3, [r4, #40]	; 0x28
 8008722:	4b0d      	ldr	r3, [pc, #52]	; (8008758 <std+0x60>)
 8008724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008726:	4b0d      	ldr	r3, [pc, #52]	; (800875c <std+0x64>)
 8008728:	6323      	str	r3, [r4, #48]	; 0x30
 800872a:	4b0d      	ldr	r3, [pc, #52]	; (8008760 <std+0x68>)
 800872c:	6224      	str	r4, [r4, #32]
 800872e:	429c      	cmp	r4, r3
 8008730:	d006      	beq.n	8008740 <std+0x48>
 8008732:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008736:	4294      	cmp	r4, r2
 8008738:	d002      	beq.n	8008740 <std+0x48>
 800873a:	33d0      	adds	r3, #208	; 0xd0
 800873c:	429c      	cmp	r4, r3
 800873e:	d105      	bne.n	800874c <std+0x54>
 8008740:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008748:	f000 b96e 	b.w	8008a28 <__retarget_lock_init_recursive>
 800874c:	bd10      	pop	{r4, pc}
 800874e:	bf00      	nop
 8008750:	080088b1 	.word	0x080088b1
 8008754:	080088d3 	.word	0x080088d3
 8008758:	0800890b 	.word	0x0800890b
 800875c:	0800892f 	.word	0x0800892f
 8008760:	24001d90 	.word	0x24001d90

08008764 <stdio_exit_handler>:
 8008764:	4a02      	ldr	r2, [pc, #8]	; (8008770 <stdio_exit_handler+0xc>)
 8008766:	4903      	ldr	r1, [pc, #12]	; (8008774 <stdio_exit_handler+0x10>)
 8008768:	4803      	ldr	r0, [pc, #12]	; (8008778 <stdio_exit_handler+0x14>)
 800876a:	f000 b869 	b.w	8008840 <_fwalk_sglue>
 800876e:	bf00      	nop
 8008770:	24000104 	.word	0x24000104
 8008774:	080092d5 	.word	0x080092d5
 8008778:	24000110 	.word	0x24000110

0800877c <cleanup_stdio>:
 800877c:	6841      	ldr	r1, [r0, #4]
 800877e:	4b0c      	ldr	r3, [pc, #48]	; (80087b0 <cleanup_stdio+0x34>)
 8008780:	4299      	cmp	r1, r3
 8008782:	b510      	push	{r4, lr}
 8008784:	4604      	mov	r4, r0
 8008786:	d001      	beq.n	800878c <cleanup_stdio+0x10>
 8008788:	f000 fda4 	bl	80092d4 <_fflush_r>
 800878c:	68a1      	ldr	r1, [r4, #8]
 800878e:	4b09      	ldr	r3, [pc, #36]	; (80087b4 <cleanup_stdio+0x38>)
 8008790:	4299      	cmp	r1, r3
 8008792:	d002      	beq.n	800879a <cleanup_stdio+0x1e>
 8008794:	4620      	mov	r0, r4
 8008796:	f000 fd9d 	bl	80092d4 <_fflush_r>
 800879a:	68e1      	ldr	r1, [r4, #12]
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <cleanup_stdio+0x3c>)
 800879e:	4299      	cmp	r1, r3
 80087a0:	d004      	beq.n	80087ac <cleanup_stdio+0x30>
 80087a2:	4620      	mov	r0, r4
 80087a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087a8:	f000 bd94 	b.w	80092d4 <_fflush_r>
 80087ac:	bd10      	pop	{r4, pc}
 80087ae:	bf00      	nop
 80087b0:	24001d90 	.word	0x24001d90
 80087b4:	24001df8 	.word	0x24001df8
 80087b8:	24001e60 	.word	0x24001e60

080087bc <global_stdio_init.part.0>:
 80087bc:	b510      	push	{r4, lr}
 80087be:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <global_stdio_init.part.0+0x30>)
 80087c0:	4c0b      	ldr	r4, [pc, #44]	; (80087f0 <global_stdio_init.part.0+0x34>)
 80087c2:	4a0c      	ldr	r2, [pc, #48]	; (80087f4 <global_stdio_init.part.0+0x38>)
 80087c4:	601a      	str	r2, [r3, #0]
 80087c6:	4620      	mov	r0, r4
 80087c8:	2200      	movs	r2, #0
 80087ca:	2104      	movs	r1, #4
 80087cc:	f7ff ff94 	bl	80086f8 <std>
 80087d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087d4:	2201      	movs	r2, #1
 80087d6:	2109      	movs	r1, #9
 80087d8:	f7ff ff8e 	bl	80086f8 <std>
 80087dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80087e0:	2202      	movs	r2, #2
 80087e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087e6:	2112      	movs	r1, #18
 80087e8:	f7ff bf86 	b.w	80086f8 <std>
 80087ec:	24001ec8 	.word	0x24001ec8
 80087f0:	24001d90 	.word	0x24001d90
 80087f4:	08008765 	.word	0x08008765

080087f8 <__sfp_lock_acquire>:
 80087f8:	4801      	ldr	r0, [pc, #4]	; (8008800 <__sfp_lock_acquire+0x8>)
 80087fa:	f000 b916 	b.w	8008a2a <__retarget_lock_acquire_recursive>
 80087fe:	bf00      	nop
 8008800:	24001ed1 	.word	0x24001ed1

08008804 <__sfp_lock_release>:
 8008804:	4801      	ldr	r0, [pc, #4]	; (800880c <__sfp_lock_release+0x8>)
 8008806:	f000 b911 	b.w	8008a2c <__retarget_lock_release_recursive>
 800880a:	bf00      	nop
 800880c:	24001ed1 	.word	0x24001ed1

08008810 <__sinit>:
 8008810:	b510      	push	{r4, lr}
 8008812:	4604      	mov	r4, r0
 8008814:	f7ff fff0 	bl	80087f8 <__sfp_lock_acquire>
 8008818:	6a23      	ldr	r3, [r4, #32]
 800881a:	b11b      	cbz	r3, 8008824 <__sinit+0x14>
 800881c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008820:	f7ff bff0 	b.w	8008804 <__sfp_lock_release>
 8008824:	4b04      	ldr	r3, [pc, #16]	; (8008838 <__sinit+0x28>)
 8008826:	6223      	str	r3, [r4, #32]
 8008828:	4b04      	ldr	r3, [pc, #16]	; (800883c <__sinit+0x2c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1f5      	bne.n	800881c <__sinit+0xc>
 8008830:	f7ff ffc4 	bl	80087bc <global_stdio_init.part.0>
 8008834:	e7f2      	b.n	800881c <__sinit+0xc>
 8008836:	bf00      	nop
 8008838:	0800877d 	.word	0x0800877d
 800883c:	24001ec8 	.word	0x24001ec8

08008840 <_fwalk_sglue>:
 8008840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008844:	4607      	mov	r7, r0
 8008846:	4688      	mov	r8, r1
 8008848:	4614      	mov	r4, r2
 800884a:	2600      	movs	r6, #0
 800884c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008850:	f1b9 0901 	subs.w	r9, r9, #1
 8008854:	d505      	bpl.n	8008862 <_fwalk_sglue+0x22>
 8008856:	6824      	ldr	r4, [r4, #0]
 8008858:	2c00      	cmp	r4, #0
 800885a:	d1f7      	bne.n	800884c <_fwalk_sglue+0xc>
 800885c:	4630      	mov	r0, r6
 800885e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008862:	89ab      	ldrh	r3, [r5, #12]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d907      	bls.n	8008878 <_fwalk_sglue+0x38>
 8008868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800886c:	3301      	adds	r3, #1
 800886e:	d003      	beq.n	8008878 <_fwalk_sglue+0x38>
 8008870:	4629      	mov	r1, r5
 8008872:	4638      	mov	r0, r7
 8008874:	47c0      	blx	r8
 8008876:	4306      	orrs	r6, r0
 8008878:	3568      	adds	r5, #104	; 0x68
 800887a:	e7e9      	b.n	8008850 <_fwalk_sglue+0x10>

0800887c <iprintf>:
 800887c:	b40f      	push	{r0, r1, r2, r3}
 800887e:	b507      	push	{r0, r1, r2, lr}
 8008880:	4906      	ldr	r1, [pc, #24]	; (800889c <iprintf+0x20>)
 8008882:	ab04      	add	r3, sp, #16
 8008884:	6808      	ldr	r0, [r1, #0]
 8008886:	f853 2b04 	ldr.w	r2, [r3], #4
 800888a:	6881      	ldr	r1, [r0, #8]
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	f000 f9f1 	bl	8008c74 <_vfiprintf_r>
 8008892:	b003      	add	sp, #12
 8008894:	f85d eb04 	ldr.w	lr, [sp], #4
 8008898:	b004      	add	sp, #16
 800889a:	4770      	bx	lr
 800889c:	2400015c 	.word	0x2400015c

080088a0 <putchar>:
 80088a0:	4b02      	ldr	r3, [pc, #8]	; (80088ac <putchar+0xc>)
 80088a2:	4601      	mov	r1, r0
 80088a4:	6818      	ldr	r0, [r3, #0]
 80088a6:	6882      	ldr	r2, [r0, #8]
 80088a8:	f000 bd3c 	b.w	8009324 <_putc_r>
 80088ac:	2400015c 	.word	0x2400015c

080088b0 <__sread>:
 80088b0:	b510      	push	{r4, lr}
 80088b2:	460c      	mov	r4, r1
 80088b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b8:	f000 f868 	bl	800898c <_read_r>
 80088bc:	2800      	cmp	r0, #0
 80088be:	bfab      	itete	ge
 80088c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088c2:	89a3      	ldrhlt	r3, [r4, #12]
 80088c4:	181b      	addge	r3, r3, r0
 80088c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ca:	bfac      	ite	ge
 80088cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ce:	81a3      	strhlt	r3, [r4, #12]
 80088d0:	bd10      	pop	{r4, pc}

080088d2 <__swrite>:
 80088d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	461f      	mov	r7, r3
 80088d8:	898b      	ldrh	r3, [r1, #12]
 80088da:	05db      	lsls	r3, r3, #23
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	4616      	mov	r6, r2
 80088e2:	d505      	bpl.n	80088f0 <__swrite+0x1e>
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	2302      	movs	r3, #2
 80088ea:	2200      	movs	r2, #0
 80088ec:	f000 f83c 	bl	8008968 <_lseek_r>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	4632      	mov	r2, r6
 80088fe:	463b      	mov	r3, r7
 8008900:	4628      	mov	r0, r5
 8008902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	f000 b853 	b.w	80089b0 <_write_r>

0800890a <__sseek>:
 800890a:	b510      	push	{r4, lr}
 800890c:	460c      	mov	r4, r1
 800890e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008912:	f000 f829 	bl	8008968 <_lseek_r>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	bf15      	itete	ne
 800891c:	6560      	strne	r0, [r4, #84]	; 0x54
 800891e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008926:	81a3      	strheq	r3, [r4, #12]
 8008928:	bf18      	it	ne
 800892a:	81a3      	strhne	r3, [r4, #12]
 800892c:	bd10      	pop	{r4, pc}

0800892e <__sclose>:
 800892e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008932:	f000 b809 	b.w	8008948 <_close_r>

08008936 <memset>:
 8008936:	4402      	add	r2, r0
 8008938:	4603      	mov	r3, r0
 800893a:	4293      	cmp	r3, r2
 800893c:	d100      	bne.n	8008940 <memset+0xa>
 800893e:	4770      	bx	lr
 8008940:	f803 1b01 	strb.w	r1, [r3], #1
 8008944:	e7f9      	b.n	800893a <memset+0x4>
	...

08008948 <_close_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d06      	ldr	r5, [pc, #24]	; (8008964 <_close_r+0x1c>)
 800894c:	2300      	movs	r3, #0
 800894e:	4604      	mov	r4, r0
 8008950:	4608      	mov	r0, r1
 8008952:	602b      	str	r3, [r5, #0]
 8008954:	f7f7 fe81 	bl	800065a <_close>
 8008958:	1c43      	adds	r3, r0, #1
 800895a:	d102      	bne.n	8008962 <_close_r+0x1a>
 800895c:	682b      	ldr	r3, [r5, #0]
 800895e:	b103      	cbz	r3, 8008962 <_close_r+0x1a>
 8008960:	6023      	str	r3, [r4, #0]
 8008962:	bd38      	pop	{r3, r4, r5, pc}
 8008964:	24001ecc 	.word	0x24001ecc

08008968 <_lseek_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4d07      	ldr	r5, [pc, #28]	; (8008988 <_lseek_r+0x20>)
 800896c:	4604      	mov	r4, r0
 800896e:	4608      	mov	r0, r1
 8008970:	4611      	mov	r1, r2
 8008972:	2200      	movs	r2, #0
 8008974:	602a      	str	r2, [r5, #0]
 8008976:	461a      	mov	r2, r3
 8008978:	f7f7 fe96 	bl	80006a8 <_lseek>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_lseek_r+0x1e>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_lseek_r+0x1e>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	24001ecc 	.word	0x24001ecc

0800898c <_read_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d07      	ldr	r5, [pc, #28]	; (80089ac <_read_r+0x20>)
 8008990:	4604      	mov	r4, r0
 8008992:	4608      	mov	r0, r1
 8008994:	4611      	mov	r1, r2
 8008996:	2200      	movs	r2, #0
 8008998:	602a      	str	r2, [r5, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	f7f7 fe24 	bl	80005e8 <_read>
 80089a0:	1c43      	adds	r3, r0, #1
 80089a2:	d102      	bne.n	80089aa <_read_r+0x1e>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b103      	cbz	r3, 80089aa <_read_r+0x1e>
 80089a8:	6023      	str	r3, [r4, #0]
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	24001ecc 	.word	0x24001ecc

080089b0 <_write_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d07      	ldr	r5, [pc, #28]	; (80089d0 <_write_r+0x20>)
 80089b4:	4604      	mov	r4, r0
 80089b6:	4608      	mov	r0, r1
 80089b8:	4611      	mov	r1, r2
 80089ba:	2200      	movs	r2, #0
 80089bc:	602a      	str	r2, [r5, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	f7f7 fe2f 	bl	8000622 <_write>
 80089c4:	1c43      	adds	r3, r0, #1
 80089c6:	d102      	bne.n	80089ce <_write_r+0x1e>
 80089c8:	682b      	ldr	r3, [r5, #0]
 80089ca:	b103      	cbz	r3, 80089ce <_write_r+0x1e>
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	bd38      	pop	{r3, r4, r5, pc}
 80089d0:	24001ecc 	.word	0x24001ecc

080089d4 <__errno>:
 80089d4:	4b01      	ldr	r3, [pc, #4]	; (80089dc <__errno+0x8>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	2400015c 	.word	0x2400015c

080089e0 <__libc_init_array>:
 80089e0:	b570      	push	{r4, r5, r6, lr}
 80089e2:	4d0d      	ldr	r5, [pc, #52]	; (8008a18 <__libc_init_array+0x38>)
 80089e4:	4c0d      	ldr	r4, [pc, #52]	; (8008a1c <__libc_init_array+0x3c>)
 80089e6:	1b64      	subs	r4, r4, r5
 80089e8:	10a4      	asrs	r4, r4, #2
 80089ea:	2600      	movs	r6, #0
 80089ec:	42a6      	cmp	r6, r4
 80089ee:	d109      	bne.n	8008a04 <__libc_init_array+0x24>
 80089f0:	4d0b      	ldr	r5, [pc, #44]	; (8008a20 <__libc_init_array+0x40>)
 80089f2:	4c0c      	ldr	r4, [pc, #48]	; (8008a24 <__libc_init_array+0x44>)
 80089f4:	f000 fdf4 	bl	80095e0 <_init>
 80089f8:	1b64      	subs	r4, r4, r5
 80089fa:	10a4      	asrs	r4, r4, #2
 80089fc:	2600      	movs	r6, #0
 80089fe:	42a6      	cmp	r6, r4
 8008a00:	d105      	bne.n	8008a0e <__libc_init_array+0x2e>
 8008a02:	bd70      	pop	{r4, r5, r6, pc}
 8008a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a08:	4798      	blx	r3
 8008a0a:	3601      	adds	r6, #1
 8008a0c:	e7ee      	b.n	80089ec <__libc_init_array+0xc>
 8008a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a12:	4798      	blx	r3
 8008a14:	3601      	adds	r6, #1
 8008a16:	e7f2      	b.n	80089fe <__libc_init_array+0x1e>
 8008a18:	080096cc 	.word	0x080096cc
 8008a1c:	080096cc 	.word	0x080096cc
 8008a20:	080096cc 	.word	0x080096cc
 8008a24:	080096d0 	.word	0x080096d0

08008a28 <__retarget_lock_init_recursive>:
 8008a28:	4770      	bx	lr

08008a2a <__retarget_lock_acquire_recursive>:
 8008a2a:	4770      	bx	lr

08008a2c <__retarget_lock_release_recursive>:
 8008a2c:	4770      	bx	lr
	...

08008a30 <_free_r>:
 8008a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a32:	2900      	cmp	r1, #0
 8008a34:	d044      	beq.n	8008ac0 <_free_r+0x90>
 8008a36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a3a:	9001      	str	r0, [sp, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	f1a1 0404 	sub.w	r4, r1, #4
 8008a42:	bfb8      	it	lt
 8008a44:	18e4      	addlt	r4, r4, r3
 8008a46:	f000 f8df 	bl	8008c08 <__malloc_lock>
 8008a4a:	4a1e      	ldr	r2, [pc, #120]	; (8008ac4 <_free_r+0x94>)
 8008a4c:	9801      	ldr	r0, [sp, #4]
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	b933      	cbnz	r3, 8008a60 <_free_r+0x30>
 8008a52:	6063      	str	r3, [r4, #4]
 8008a54:	6014      	str	r4, [r2, #0]
 8008a56:	b003      	add	sp, #12
 8008a58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a5c:	f000 b8da 	b.w	8008c14 <__malloc_unlock>
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	d908      	bls.n	8008a76 <_free_r+0x46>
 8008a64:	6825      	ldr	r5, [r4, #0]
 8008a66:	1961      	adds	r1, r4, r5
 8008a68:	428b      	cmp	r3, r1
 8008a6a:	bf01      	itttt	eq
 8008a6c:	6819      	ldreq	r1, [r3, #0]
 8008a6e:	685b      	ldreq	r3, [r3, #4]
 8008a70:	1949      	addeq	r1, r1, r5
 8008a72:	6021      	streq	r1, [r4, #0]
 8008a74:	e7ed      	b.n	8008a52 <_free_r+0x22>
 8008a76:	461a      	mov	r2, r3
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	b10b      	cbz	r3, 8008a80 <_free_r+0x50>
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	d9fa      	bls.n	8008a76 <_free_r+0x46>
 8008a80:	6811      	ldr	r1, [r2, #0]
 8008a82:	1855      	adds	r5, r2, r1
 8008a84:	42a5      	cmp	r5, r4
 8008a86:	d10b      	bne.n	8008aa0 <_free_r+0x70>
 8008a88:	6824      	ldr	r4, [r4, #0]
 8008a8a:	4421      	add	r1, r4
 8008a8c:	1854      	adds	r4, r2, r1
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	6011      	str	r1, [r2, #0]
 8008a92:	d1e0      	bne.n	8008a56 <_free_r+0x26>
 8008a94:	681c      	ldr	r4, [r3, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	6053      	str	r3, [r2, #4]
 8008a9a:	440c      	add	r4, r1
 8008a9c:	6014      	str	r4, [r2, #0]
 8008a9e:	e7da      	b.n	8008a56 <_free_r+0x26>
 8008aa0:	d902      	bls.n	8008aa8 <_free_r+0x78>
 8008aa2:	230c      	movs	r3, #12
 8008aa4:	6003      	str	r3, [r0, #0]
 8008aa6:	e7d6      	b.n	8008a56 <_free_r+0x26>
 8008aa8:	6825      	ldr	r5, [r4, #0]
 8008aaa:	1961      	adds	r1, r4, r5
 8008aac:	428b      	cmp	r3, r1
 8008aae:	bf04      	itt	eq
 8008ab0:	6819      	ldreq	r1, [r3, #0]
 8008ab2:	685b      	ldreq	r3, [r3, #4]
 8008ab4:	6063      	str	r3, [r4, #4]
 8008ab6:	bf04      	itt	eq
 8008ab8:	1949      	addeq	r1, r1, r5
 8008aba:	6021      	streq	r1, [r4, #0]
 8008abc:	6054      	str	r4, [r2, #4]
 8008abe:	e7ca      	b.n	8008a56 <_free_r+0x26>
 8008ac0:	b003      	add	sp, #12
 8008ac2:	bd30      	pop	{r4, r5, pc}
 8008ac4:	24001ed4 	.word	0x24001ed4

08008ac8 <sbrk_aligned>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4e0e      	ldr	r6, [pc, #56]	; (8008b04 <sbrk_aligned+0x3c>)
 8008acc:	460c      	mov	r4, r1
 8008ace:	6831      	ldr	r1, [r6, #0]
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	b911      	cbnz	r1, 8008ada <sbrk_aligned+0x12>
 8008ad4:	f000 fcf0 	bl	80094b8 <_sbrk_r>
 8008ad8:	6030      	str	r0, [r6, #0]
 8008ada:	4621      	mov	r1, r4
 8008adc:	4628      	mov	r0, r5
 8008ade:	f000 fceb 	bl	80094b8 <_sbrk_r>
 8008ae2:	1c43      	adds	r3, r0, #1
 8008ae4:	d00a      	beq.n	8008afc <sbrk_aligned+0x34>
 8008ae6:	1cc4      	adds	r4, r0, #3
 8008ae8:	f024 0403 	bic.w	r4, r4, #3
 8008aec:	42a0      	cmp	r0, r4
 8008aee:	d007      	beq.n	8008b00 <sbrk_aligned+0x38>
 8008af0:	1a21      	subs	r1, r4, r0
 8008af2:	4628      	mov	r0, r5
 8008af4:	f000 fce0 	bl	80094b8 <_sbrk_r>
 8008af8:	3001      	adds	r0, #1
 8008afa:	d101      	bne.n	8008b00 <sbrk_aligned+0x38>
 8008afc:	f04f 34ff 	mov.w	r4, #4294967295
 8008b00:	4620      	mov	r0, r4
 8008b02:	bd70      	pop	{r4, r5, r6, pc}
 8008b04:	24001ed8 	.word	0x24001ed8

08008b08 <_malloc_r>:
 8008b08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b0c:	1ccd      	adds	r5, r1, #3
 8008b0e:	f025 0503 	bic.w	r5, r5, #3
 8008b12:	3508      	adds	r5, #8
 8008b14:	2d0c      	cmp	r5, #12
 8008b16:	bf38      	it	cc
 8008b18:	250c      	movcc	r5, #12
 8008b1a:	2d00      	cmp	r5, #0
 8008b1c:	4607      	mov	r7, r0
 8008b1e:	db01      	blt.n	8008b24 <_malloc_r+0x1c>
 8008b20:	42a9      	cmp	r1, r5
 8008b22:	d905      	bls.n	8008b30 <_malloc_r+0x28>
 8008b24:	230c      	movs	r3, #12
 8008b26:	603b      	str	r3, [r7, #0]
 8008b28:	2600      	movs	r6, #0
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b30:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008c04 <_malloc_r+0xfc>
 8008b34:	f000 f868 	bl	8008c08 <__malloc_lock>
 8008b38:	f8d8 3000 	ldr.w	r3, [r8]
 8008b3c:	461c      	mov	r4, r3
 8008b3e:	bb5c      	cbnz	r4, 8008b98 <_malloc_r+0x90>
 8008b40:	4629      	mov	r1, r5
 8008b42:	4638      	mov	r0, r7
 8008b44:	f7ff ffc0 	bl	8008ac8 <sbrk_aligned>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	d155      	bne.n	8008bfa <_malloc_r+0xf2>
 8008b4e:	f8d8 4000 	ldr.w	r4, [r8]
 8008b52:	4626      	mov	r6, r4
 8008b54:	2e00      	cmp	r6, #0
 8008b56:	d145      	bne.n	8008be4 <_malloc_r+0xdc>
 8008b58:	2c00      	cmp	r4, #0
 8008b5a:	d048      	beq.n	8008bee <_malloc_r+0xe6>
 8008b5c:	6823      	ldr	r3, [r4, #0]
 8008b5e:	4631      	mov	r1, r6
 8008b60:	4638      	mov	r0, r7
 8008b62:	eb04 0903 	add.w	r9, r4, r3
 8008b66:	f000 fca7 	bl	80094b8 <_sbrk_r>
 8008b6a:	4581      	cmp	r9, r0
 8008b6c:	d13f      	bne.n	8008bee <_malloc_r+0xe6>
 8008b6e:	6821      	ldr	r1, [r4, #0]
 8008b70:	1a6d      	subs	r5, r5, r1
 8008b72:	4629      	mov	r1, r5
 8008b74:	4638      	mov	r0, r7
 8008b76:	f7ff ffa7 	bl	8008ac8 <sbrk_aligned>
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	d037      	beq.n	8008bee <_malloc_r+0xe6>
 8008b7e:	6823      	ldr	r3, [r4, #0]
 8008b80:	442b      	add	r3, r5
 8008b82:	6023      	str	r3, [r4, #0]
 8008b84:	f8d8 3000 	ldr.w	r3, [r8]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d038      	beq.n	8008bfe <_malloc_r+0xf6>
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	42a2      	cmp	r2, r4
 8008b90:	d12b      	bne.n	8008bea <_malloc_r+0xe2>
 8008b92:	2200      	movs	r2, #0
 8008b94:	605a      	str	r2, [r3, #4]
 8008b96:	e00f      	b.n	8008bb8 <_malloc_r+0xb0>
 8008b98:	6822      	ldr	r2, [r4, #0]
 8008b9a:	1b52      	subs	r2, r2, r5
 8008b9c:	d41f      	bmi.n	8008bde <_malloc_r+0xd6>
 8008b9e:	2a0b      	cmp	r2, #11
 8008ba0:	d917      	bls.n	8008bd2 <_malloc_r+0xca>
 8008ba2:	1961      	adds	r1, r4, r5
 8008ba4:	42a3      	cmp	r3, r4
 8008ba6:	6025      	str	r5, [r4, #0]
 8008ba8:	bf18      	it	ne
 8008baa:	6059      	strne	r1, [r3, #4]
 8008bac:	6863      	ldr	r3, [r4, #4]
 8008bae:	bf08      	it	eq
 8008bb0:	f8c8 1000 	streq.w	r1, [r8]
 8008bb4:	5162      	str	r2, [r4, r5]
 8008bb6:	604b      	str	r3, [r1, #4]
 8008bb8:	4638      	mov	r0, r7
 8008bba:	f104 060b 	add.w	r6, r4, #11
 8008bbe:	f000 f829 	bl	8008c14 <__malloc_unlock>
 8008bc2:	f026 0607 	bic.w	r6, r6, #7
 8008bc6:	1d23      	adds	r3, r4, #4
 8008bc8:	1af2      	subs	r2, r6, r3
 8008bca:	d0ae      	beq.n	8008b2a <_malloc_r+0x22>
 8008bcc:	1b9b      	subs	r3, r3, r6
 8008bce:	50a3      	str	r3, [r4, r2]
 8008bd0:	e7ab      	b.n	8008b2a <_malloc_r+0x22>
 8008bd2:	42a3      	cmp	r3, r4
 8008bd4:	6862      	ldr	r2, [r4, #4]
 8008bd6:	d1dd      	bne.n	8008b94 <_malloc_r+0x8c>
 8008bd8:	f8c8 2000 	str.w	r2, [r8]
 8008bdc:	e7ec      	b.n	8008bb8 <_malloc_r+0xb0>
 8008bde:	4623      	mov	r3, r4
 8008be0:	6864      	ldr	r4, [r4, #4]
 8008be2:	e7ac      	b.n	8008b3e <_malloc_r+0x36>
 8008be4:	4634      	mov	r4, r6
 8008be6:	6876      	ldr	r6, [r6, #4]
 8008be8:	e7b4      	b.n	8008b54 <_malloc_r+0x4c>
 8008bea:	4613      	mov	r3, r2
 8008bec:	e7cc      	b.n	8008b88 <_malloc_r+0x80>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	603b      	str	r3, [r7, #0]
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	f000 f80e 	bl	8008c14 <__malloc_unlock>
 8008bf8:	e797      	b.n	8008b2a <_malloc_r+0x22>
 8008bfa:	6025      	str	r5, [r4, #0]
 8008bfc:	e7dc      	b.n	8008bb8 <_malloc_r+0xb0>
 8008bfe:	605b      	str	r3, [r3, #4]
 8008c00:	deff      	udf	#255	; 0xff
 8008c02:	bf00      	nop
 8008c04:	24001ed4 	.word	0x24001ed4

08008c08 <__malloc_lock>:
 8008c08:	4801      	ldr	r0, [pc, #4]	; (8008c10 <__malloc_lock+0x8>)
 8008c0a:	f7ff bf0e 	b.w	8008a2a <__retarget_lock_acquire_recursive>
 8008c0e:	bf00      	nop
 8008c10:	24001ed0 	.word	0x24001ed0

08008c14 <__malloc_unlock>:
 8008c14:	4801      	ldr	r0, [pc, #4]	; (8008c1c <__malloc_unlock+0x8>)
 8008c16:	f7ff bf09 	b.w	8008a2c <__retarget_lock_release_recursive>
 8008c1a:	bf00      	nop
 8008c1c:	24001ed0 	.word	0x24001ed0

08008c20 <__sfputc_r>:
 8008c20:	6893      	ldr	r3, [r2, #8]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	b410      	push	{r4}
 8008c28:	6093      	str	r3, [r2, #8]
 8008c2a:	da08      	bge.n	8008c3e <__sfputc_r+0x1e>
 8008c2c:	6994      	ldr	r4, [r2, #24]
 8008c2e:	42a3      	cmp	r3, r4
 8008c30:	db01      	blt.n	8008c36 <__sfputc_r+0x16>
 8008c32:	290a      	cmp	r1, #10
 8008c34:	d103      	bne.n	8008c3e <__sfputc_r+0x1e>
 8008c36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c3a:	f000 bba7 	b.w	800938c <__swbuf_r>
 8008c3e:	6813      	ldr	r3, [r2, #0]
 8008c40:	1c58      	adds	r0, r3, #1
 8008c42:	6010      	str	r0, [r2, #0]
 8008c44:	7019      	strb	r1, [r3, #0]
 8008c46:	4608      	mov	r0, r1
 8008c48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c4c:	4770      	bx	lr

08008c4e <__sfputs_r>:
 8008c4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c50:	4606      	mov	r6, r0
 8008c52:	460f      	mov	r7, r1
 8008c54:	4614      	mov	r4, r2
 8008c56:	18d5      	adds	r5, r2, r3
 8008c58:	42ac      	cmp	r4, r5
 8008c5a:	d101      	bne.n	8008c60 <__sfputs_r+0x12>
 8008c5c:	2000      	movs	r0, #0
 8008c5e:	e007      	b.n	8008c70 <__sfputs_r+0x22>
 8008c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c64:	463a      	mov	r2, r7
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7ff ffda 	bl	8008c20 <__sfputc_r>
 8008c6c:	1c43      	adds	r3, r0, #1
 8008c6e:	d1f3      	bne.n	8008c58 <__sfputs_r+0xa>
 8008c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008c74 <_vfiprintf_r>:
 8008c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c78:	460d      	mov	r5, r1
 8008c7a:	b09d      	sub	sp, #116	; 0x74
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	4698      	mov	r8, r3
 8008c80:	4606      	mov	r6, r0
 8008c82:	b118      	cbz	r0, 8008c8c <_vfiprintf_r+0x18>
 8008c84:	6a03      	ldr	r3, [r0, #32]
 8008c86:	b90b      	cbnz	r3, 8008c8c <_vfiprintf_r+0x18>
 8008c88:	f7ff fdc2 	bl	8008810 <__sinit>
 8008c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c8e:	07d9      	lsls	r1, r3, #31
 8008c90:	d405      	bmi.n	8008c9e <_vfiprintf_r+0x2a>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	059a      	lsls	r2, r3, #22
 8008c96:	d402      	bmi.n	8008c9e <_vfiprintf_r+0x2a>
 8008c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c9a:	f7ff fec6 	bl	8008a2a <__retarget_lock_acquire_recursive>
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	071b      	lsls	r3, r3, #28
 8008ca2:	d501      	bpl.n	8008ca8 <_vfiprintf_r+0x34>
 8008ca4:	692b      	ldr	r3, [r5, #16]
 8008ca6:	b99b      	cbnz	r3, 8008cd0 <_vfiprintf_r+0x5c>
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4630      	mov	r0, r6
 8008cac:	f000 fbac 	bl	8009408 <__swsetup_r>
 8008cb0:	b170      	cbz	r0, 8008cd0 <_vfiprintf_r+0x5c>
 8008cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cb4:	07dc      	lsls	r4, r3, #31
 8008cb6:	d504      	bpl.n	8008cc2 <_vfiprintf_r+0x4e>
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	b01d      	add	sp, #116	; 0x74
 8008cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc2:	89ab      	ldrh	r3, [r5, #12]
 8008cc4:	0598      	lsls	r0, r3, #22
 8008cc6:	d4f7      	bmi.n	8008cb8 <_vfiprintf_r+0x44>
 8008cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cca:	f7ff feaf 	bl	8008a2c <__retarget_lock_release_recursive>
 8008cce:	e7f3      	b.n	8008cb8 <_vfiprintf_r+0x44>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cde:	2330      	movs	r3, #48	; 0x30
 8008ce0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008e94 <_vfiprintf_r+0x220>
 8008ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ce8:	f04f 0901 	mov.w	r9, #1
 8008cec:	4623      	mov	r3, r4
 8008cee:	469a      	mov	sl, r3
 8008cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cf4:	b10a      	cbz	r2, 8008cfa <_vfiprintf_r+0x86>
 8008cf6:	2a25      	cmp	r2, #37	; 0x25
 8008cf8:	d1f9      	bne.n	8008cee <_vfiprintf_r+0x7a>
 8008cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8008cfe:	d00b      	beq.n	8008d18 <_vfiprintf_r+0xa4>
 8008d00:	465b      	mov	r3, fp
 8008d02:	4622      	mov	r2, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff ffa1 	bl	8008c4e <__sfputs_r>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	f000 80a9 	beq.w	8008e64 <_vfiprintf_r+0x1f0>
 8008d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d14:	445a      	add	r2, fp
 8008d16:	9209      	str	r2, [sp, #36]	; 0x24
 8008d18:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 80a1 	beq.w	8008e64 <_vfiprintf_r+0x1f0>
 8008d22:	2300      	movs	r3, #0
 8008d24:	f04f 32ff 	mov.w	r2, #4294967295
 8008d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d2c:	f10a 0a01 	add.w	sl, sl, #1
 8008d30:	9304      	str	r3, [sp, #16]
 8008d32:	9307      	str	r3, [sp, #28]
 8008d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d38:	931a      	str	r3, [sp, #104]	; 0x68
 8008d3a:	4654      	mov	r4, sl
 8008d3c:	2205      	movs	r2, #5
 8008d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d42:	4854      	ldr	r0, [pc, #336]	; (8008e94 <_vfiprintf_r+0x220>)
 8008d44:	f7f7 faec 	bl	8000320 <memchr>
 8008d48:	9a04      	ldr	r2, [sp, #16]
 8008d4a:	b9d8      	cbnz	r0, 8008d84 <_vfiprintf_r+0x110>
 8008d4c:	06d1      	lsls	r1, r2, #27
 8008d4e:	bf44      	itt	mi
 8008d50:	2320      	movmi	r3, #32
 8008d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d56:	0713      	lsls	r3, r2, #28
 8008d58:	bf44      	itt	mi
 8008d5a:	232b      	movmi	r3, #43	; 0x2b
 8008d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d60:	f89a 3000 	ldrb.w	r3, [sl]
 8008d64:	2b2a      	cmp	r3, #42	; 0x2a
 8008d66:	d015      	beq.n	8008d94 <_vfiprintf_r+0x120>
 8008d68:	9a07      	ldr	r2, [sp, #28]
 8008d6a:	4654      	mov	r4, sl
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	f04f 0c0a 	mov.w	ip, #10
 8008d72:	4621      	mov	r1, r4
 8008d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d78:	3b30      	subs	r3, #48	; 0x30
 8008d7a:	2b09      	cmp	r3, #9
 8008d7c:	d94d      	bls.n	8008e1a <_vfiprintf_r+0x1a6>
 8008d7e:	b1b0      	cbz	r0, 8008dae <_vfiprintf_r+0x13a>
 8008d80:	9207      	str	r2, [sp, #28]
 8008d82:	e014      	b.n	8008dae <_vfiprintf_r+0x13a>
 8008d84:	eba0 0308 	sub.w	r3, r0, r8
 8008d88:	fa09 f303 	lsl.w	r3, r9, r3
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	9304      	str	r3, [sp, #16]
 8008d90:	46a2      	mov	sl, r4
 8008d92:	e7d2      	b.n	8008d3a <_vfiprintf_r+0xc6>
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	1d19      	adds	r1, r3, #4
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	9103      	str	r1, [sp, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bfbb      	ittet	lt
 8008da0:	425b      	neglt	r3, r3
 8008da2:	f042 0202 	orrlt.w	r2, r2, #2
 8008da6:	9307      	strge	r3, [sp, #28]
 8008da8:	9307      	strlt	r3, [sp, #28]
 8008daa:	bfb8      	it	lt
 8008dac:	9204      	strlt	r2, [sp, #16]
 8008dae:	7823      	ldrb	r3, [r4, #0]
 8008db0:	2b2e      	cmp	r3, #46	; 0x2e
 8008db2:	d10c      	bne.n	8008dce <_vfiprintf_r+0x15a>
 8008db4:	7863      	ldrb	r3, [r4, #1]
 8008db6:	2b2a      	cmp	r3, #42	; 0x2a
 8008db8:	d134      	bne.n	8008e24 <_vfiprintf_r+0x1b0>
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	1d1a      	adds	r2, r3, #4
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	9203      	str	r2, [sp, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfb8      	it	lt
 8008dc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dca:	3402      	adds	r4, #2
 8008dcc:	9305      	str	r3, [sp, #20]
 8008dce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ea4 <_vfiprintf_r+0x230>
 8008dd2:	7821      	ldrb	r1, [r4, #0]
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	4650      	mov	r0, sl
 8008dd8:	f7f7 faa2 	bl	8000320 <memchr>
 8008ddc:	b138      	cbz	r0, 8008dee <_vfiprintf_r+0x17a>
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	eba0 000a 	sub.w	r0, r0, sl
 8008de4:	2240      	movs	r2, #64	; 0x40
 8008de6:	4082      	lsls	r2, r0
 8008de8:	4313      	orrs	r3, r2
 8008dea:	3401      	adds	r4, #1
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df2:	4829      	ldr	r0, [pc, #164]	; (8008e98 <_vfiprintf_r+0x224>)
 8008df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008df8:	2206      	movs	r2, #6
 8008dfa:	f7f7 fa91 	bl	8000320 <memchr>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d03f      	beq.n	8008e82 <_vfiprintf_r+0x20e>
 8008e02:	4b26      	ldr	r3, [pc, #152]	; (8008e9c <_vfiprintf_r+0x228>)
 8008e04:	bb1b      	cbnz	r3, 8008e4e <_vfiprintf_r+0x1da>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	3307      	adds	r3, #7
 8008e0a:	f023 0307 	bic.w	r3, r3, #7
 8008e0e:	3308      	adds	r3, #8
 8008e10:	9303      	str	r3, [sp, #12]
 8008e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e14:	443b      	add	r3, r7
 8008e16:	9309      	str	r3, [sp, #36]	; 0x24
 8008e18:	e768      	b.n	8008cec <_vfiprintf_r+0x78>
 8008e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e1e:	460c      	mov	r4, r1
 8008e20:	2001      	movs	r0, #1
 8008e22:	e7a6      	b.n	8008d72 <_vfiprintf_r+0xfe>
 8008e24:	2300      	movs	r3, #0
 8008e26:	3401      	adds	r4, #1
 8008e28:	9305      	str	r3, [sp, #20]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	f04f 0c0a 	mov.w	ip, #10
 8008e30:	4620      	mov	r0, r4
 8008e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e36:	3a30      	subs	r2, #48	; 0x30
 8008e38:	2a09      	cmp	r2, #9
 8008e3a:	d903      	bls.n	8008e44 <_vfiprintf_r+0x1d0>
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d0c6      	beq.n	8008dce <_vfiprintf_r+0x15a>
 8008e40:	9105      	str	r1, [sp, #20]
 8008e42:	e7c4      	b.n	8008dce <_vfiprintf_r+0x15a>
 8008e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e48:	4604      	mov	r4, r0
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e7f0      	b.n	8008e30 <_vfiprintf_r+0x1bc>
 8008e4e:	ab03      	add	r3, sp, #12
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	462a      	mov	r2, r5
 8008e54:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <_vfiprintf_r+0x22c>)
 8008e56:	a904      	add	r1, sp, #16
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f3af 8000 	nop.w
 8008e5e:	4607      	mov	r7, r0
 8008e60:	1c78      	adds	r0, r7, #1
 8008e62:	d1d6      	bne.n	8008e12 <_vfiprintf_r+0x19e>
 8008e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e66:	07d9      	lsls	r1, r3, #31
 8008e68:	d405      	bmi.n	8008e76 <_vfiprintf_r+0x202>
 8008e6a:	89ab      	ldrh	r3, [r5, #12]
 8008e6c:	059a      	lsls	r2, r3, #22
 8008e6e:	d402      	bmi.n	8008e76 <_vfiprintf_r+0x202>
 8008e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e72:	f7ff fddb 	bl	8008a2c <__retarget_lock_release_recursive>
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	065b      	lsls	r3, r3, #25
 8008e7a:	f53f af1d 	bmi.w	8008cb8 <_vfiprintf_r+0x44>
 8008e7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e80:	e71c      	b.n	8008cbc <_vfiprintf_r+0x48>
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	462a      	mov	r2, r5
 8008e88:	4b05      	ldr	r3, [pc, #20]	; (8008ea0 <_vfiprintf_r+0x22c>)
 8008e8a:	a904      	add	r1, sp, #16
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f000 f879 	bl	8008f84 <_printf_i>
 8008e92:	e7e4      	b.n	8008e5e <_vfiprintf_r+0x1ea>
 8008e94:	08009698 	.word	0x08009698
 8008e98:	080096a2 	.word	0x080096a2
 8008e9c:	00000000 	.word	0x00000000
 8008ea0:	08008c4f 	.word	0x08008c4f
 8008ea4:	0800969e 	.word	0x0800969e

08008ea8 <_printf_common>:
 8008ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eac:	4616      	mov	r6, r2
 8008eae:	4699      	mov	r9, r3
 8008eb0:	688a      	ldr	r2, [r1, #8]
 8008eb2:	690b      	ldr	r3, [r1, #16]
 8008eb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	bfb8      	it	lt
 8008ebc:	4613      	movlt	r3, r2
 8008ebe:	6033      	str	r3, [r6, #0]
 8008ec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ec4:	4607      	mov	r7, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	b10a      	cbz	r2, 8008ece <_printf_common+0x26>
 8008eca:	3301      	adds	r3, #1
 8008ecc:	6033      	str	r3, [r6, #0]
 8008ece:	6823      	ldr	r3, [r4, #0]
 8008ed0:	0699      	lsls	r1, r3, #26
 8008ed2:	bf42      	ittt	mi
 8008ed4:	6833      	ldrmi	r3, [r6, #0]
 8008ed6:	3302      	addmi	r3, #2
 8008ed8:	6033      	strmi	r3, [r6, #0]
 8008eda:	6825      	ldr	r5, [r4, #0]
 8008edc:	f015 0506 	ands.w	r5, r5, #6
 8008ee0:	d106      	bne.n	8008ef0 <_printf_common+0x48>
 8008ee2:	f104 0a19 	add.w	sl, r4, #25
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	6832      	ldr	r2, [r6, #0]
 8008eea:	1a9b      	subs	r3, r3, r2
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	dc26      	bgt.n	8008f3e <_printf_common+0x96>
 8008ef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ef4:	1e13      	subs	r3, r2, #0
 8008ef6:	6822      	ldr	r2, [r4, #0]
 8008ef8:	bf18      	it	ne
 8008efa:	2301      	movne	r3, #1
 8008efc:	0692      	lsls	r2, r2, #26
 8008efe:	d42b      	bmi.n	8008f58 <_printf_common+0xb0>
 8008f00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f04:	4649      	mov	r1, r9
 8008f06:	4638      	mov	r0, r7
 8008f08:	47c0      	blx	r8
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d01e      	beq.n	8008f4c <_printf_common+0xa4>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	6922      	ldr	r2, [r4, #16]
 8008f12:	f003 0306 	and.w	r3, r3, #6
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	bf02      	ittt	eq
 8008f1a:	68e5      	ldreq	r5, [r4, #12]
 8008f1c:	6833      	ldreq	r3, [r6, #0]
 8008f1e:	1aed      	subeq	r5, r5, r3
 8008f20:	68a3      	ldr	r3, [r4, #8]
 8008f22:	bf0c      	ite	eq
 8008f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f28:	2500      	movne	r5, #0
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	bfc4      	itt	gt
 8008f2e:	1a9b      	subgt	r3, r3, r2
 8008f30:	18ed      	addgt	r5, r5, r3
 8008f32:	2600      	movs	r6, #0
 8008f34:	341a      	adds	r4, #26
 8008f36:	42b5      	cmp	r5, r6
 8008f38:	d11a      	bne.n	8008f70 <_printf_common+0xc8>
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	e008      	b.n	8008f50 <_printf_common+0xa8>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	4652      	mov	r2, sl
 8008f42:	4649      	mov	r1, r9
 8008f44:	4638      	mov	r0, r7
 8008f46:	47c0      	blx	r8
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d103      	bne.n	8008f54 <_printf_common+0xac>
 8008f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f54:	3501      	adds	r5, #1
 8008f56:	e7c6      	b.n	8008ee6 <_printf_common+0x3e>
 8008f58:	18e1      	adds	r1, r4, r3
 8008f5a:	1c5a      	adds	r2, r3, #1
 8008f5c:	2030      	movs	r0, #48	; 0x30
 8008f5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f62:	4422      	add	r2, r4
 8008f64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f6c:	3302      	adds	r3, #2
 8008f6e:	e7c7      	b.n	8008f00 <_printf_common+0x58>
 8008f70:	2301      	movs	r3, #1
 8008f72:	4622      	mov	r2, r4
 8008f74:	4649      	mov	r1, r9
 8008f76:	4638      	mov	r0, r7
 8008f78:	47c0      	blx	r8
 8008f7a:	3001      	adds	r0, #1
 8008f7c:	d0e6      	beq.n	8008f4c <_printf_common+0xa4>
 8008f7e:	3601      	adds	r6, #1
 8008f80:	e7d9      	b.n	8008f36 <_printf_common+0x8e>
	...

08008f84 <_printf_i>:
 8008f84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f88:	7e0f      	ldrb	r7, [r1, #24]
 8008f8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008f8c:	2f78      	cmp	r7, #120	; 0x78
 8008f8e:	4691      	mov	r9, r2
 8008f90:	4680      	mov	r8, r0
 8008f92:	460c      	mov	r4, r1
 8008f94:	469a      	mov	sl, r3
 8008f96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008f9a:	d807      	bhi.n	8008fac <_printf_i+0x28>
 8008f9c:	2f62      	cmp	r7, #98	; 0x62
 8008f9e:	d80a      	bhi.n	8008fb6 <_printf_i+0x32>
 8008fa0:	2f00      	cmp	r7, #0
 8008fa2:	f000 80d4 	beq.w	800914e <_printf_i+0x1ca>
 8008fa6:	2f58      	cmp	r7, #88	; 0x58
 8008fa8:	f000 80c0 	beq.w	800912c <_printf_i+0x1a8>
 8008fac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008fb4:	e03a      	b.n	800902c <_printf_i+0xa8>
 8008fb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008fba:	2b15      	cmp	r3, #21
 8008fbc:	d8f6      	bhi.n	8008fac <_printf_i+0x28>
 8008fbe:	a101      	add	r1, pc, #4	; (adr r1, 8008fc4 <_printf_i+0x40>)
 8008fc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fc4:	0800901d 	.word	0x0800901d
 8008fc8:	08009031 	.word	0x08009031
 8008fcc:	08008fad 	.word	0x08008fad
 8008fd0:	08008fad 	.word	0x08008fad
 8008fd4:	08008fad 	.word	0x08008fad
 8008fd8:	08008fad 	.word	0x08008fad
 8008fdc:	08009031 	.word	0x08009031
 8008fe0:	08008fad 	.word	0x08008fad
 8008fe4:	08008fad 	.word	0x08008fad
 8008fe8:	08008fad 	.word	0x08008fad
 8008fec:	08008fad 	.word	0x08008fad
 8008ff0:	08009135 	.word	0x08009135
 8008ff4:	0800905d 	.word	0x0800905d
 8008ff8:	080090ef 	.word	0x080090ef
 8008ffc:	08008fad 	.word	0x08008fad
 8009000:	08008fad 	.word	0x08008fad
 8009004:	08009157 	.word	0x08009157
 8009008:	08008fad 	.word	0x08008fad
 800900c:	0800905d 	.word	0x0800905d
 8009010:	08008fad 	.word	0x08008fad
 8009014:	08008fad 	.word	0x08008fad
 8009018:	080090f7 	.word	0x080090f7
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	1d1a      	adds	r2, r3, #4
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	602a      	str	r2, [r5, #0]
 8009024:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800902c:	2301      	movs	r3, #1
 800902e:	e09f      	b.n	8009170 <_printf_i+0x1ec>
 8009030:	6820      	ldr	r0, [r4, #0]
 8009032:	682b      	ldr	r3, [r5, #0]
 8009034:	0607      	lsls	r7, r0, #24
 8009036:	f103 0104 	add.w	r1, r3, #4
 800903a:	6029      	str	r1, [r5, #0]
 800903c:	d501      	bpl.n	8009042 <_printf_i+0xbe>
 800903e:	681e      	ldr	r6, [r3, #0]
 8009040:	e003      	b.n	800904a <_printf_i+0xc6>
 8009042:	0646      	lsls	r6, r0, #25
 8009044:	d5fb      	bpl.n	800903e <_printf_i+0xba>
 8009046:	f9b3 6000 	ldrsh.w	r6, [r3]
 800904a:	2e00      	cmp	r6, #0
 800904c:	da03      	bge.n	8009056 <_printf_i+0xd2>
 800904e:	232d      	movs	r3, #45	; 0x2d
 8009050:	4276      	negs	r6, r6
 8009052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009056:	485a      	ldr	r0, [pc, #360]	; (80091c0 <_printf_i+0x23c>)
 8009058:	230a      	movs	r3, #10
 800905a:	e012      	b.n	8009082 <_printf_i+0xfe>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	6820      	ldr	r0, [r4, #0]
 8009060:	1d19      	adds	r1, r3, #4
 8009062:	6029      	str	r1, [r5, #0]
 8009064:	0605      	lsls	r5, r0, #24
 8009066:	d501      	bpl.n	800906c <_printf_i+0xe8>
 8009068:	681e      	ldr	r6, [r3, #0]
 800906a:	e002      	b.n	8009072 <_printf_i+0xee>
 800906c:	0641      	lsls	r1, r0, #25
 800906e:	d5fb      	bpl.n	8009068 <_printf_i+0xe4>
 8009070:	881e      	ldrh	r6, [r3, #0]
 8009072:	4853      	ldr	r0, [pc, #332]	; (80091c0 <_printf_i+0x23c>)
 8009074:	2f6f      	cmp	r7, #111	; 0x6f
 8009076:	bf0c      	ite	eq
 8009078:	2308      	moveq	r3, #8
 800907a:	230a      	movne	r3, #10
 800907c:	2100      	movs	r1, #0
 800907e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009082:	6865      	ldr	r5, [r4, #4]
 8009084:	60a5      	str	r5, [r4, #8]
 8009086:	2d00      	cmp	r5, #0
 8009088:	bfa2      	ittt	ge
 800908a:	6821      	ldrge	r1, [r4, #0]
 800908c:	f021 0104 	bicge.w	r1, r1, #4
 8009090:	6021      	strge	r1, [r4, #0]
 8009092:	b90e      	cbnz	r6, 8009098 <_printf_i+0x114>
 8009094:	2d00      	cmp	r5, #0
 8009096:	d04b      	beq.n	8009130 <_printf_i+0x1ac>
 8009098:	4615      	mov	r5, r2
 800909a:	fbb6 f1f3 	udiv	r1, r6, r3
 800909e:	fb03 6711 	mls	r7, r3, r1, r6
 80090a2:	5dc7      	ldrb	r7, [r0, r7]
 80090a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80090a8:	4637      	mov	r7, r6
 80090aa:	42bb      	cmp	r3, r7
 80090ac:	460e      	mov	r6, r1
 80090ae:	d9f4      	bls.n	800909a <_printf_i+0x116>
 80090b0:	2b08      	cmp	r3, #8
 80090b2:	d10b      	bne.n	80090cc <_printf_i+0x148>
 80090b4:	6823      	ldr	r3, [r4, #0]
 80090b6:	07de      	lsls	r6, r3, #31
 80090b8:	d508      	bpl.n	80090cc <_printf_i+0x148>
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	6861      	ldr	r1, [r4, #4]
 80090be:	4299      	cmp	r1, r3
 80090c0:	bfde      	ittt	le
 80090c2:	2330      	movle	r3, #48	; 0x30
 80090c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090cc:	1b52      	subs	r2, r2, r5
 80090ce:	6122      	str	r2, [r4, #16]
 80090d0:	f8cd a000 	str.w	sl, [sp]
 80090d4:	464b      	mov	r3, r9
 80090d6:	aa03      	add	r2, sp, #12
 80090d8:	4621      	mov	r1, r4
 80090da:	4640      	mov	r0, r8
 80090dc:	f7ff fee4 	bl	8008ea8 <_printf_common>
 80090e0:	3001      	adds	r0, #1
 80090e2:	d14a      	bne.n	800917a <_printf_i+0x1f6>
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	b004      	add	sp, #16
 80090ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ee:	6823      	ldr	r3, [r4, #0]
 80090f0:	f043 0320 	orr.w	r3, r3, #32
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	4833      	ldr	r0, [pc, #204]	; (80091c4 <_printf_i+0x240>)
 80090f8:	2778      	movs	r7, #120	; 0x78
 80090fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090fe:	6823      	ldr	r3, [r4, #0]
 8009100:	6829      	ldr	r1, [r5, #0]
 8009102:	061f      	lsls	r7, r3, #24
 8009104:	f851 6b04 	ldr.w	r6, [r1], #4
 8009108:	d402      	bmi.n	8009110 <_printf_i+0x18c>
 800910a:	065f      	lsls	r7, r3, #25
 800910c:	bf48      	it	mi
 800910e:	b2b6      	uxthmi	r6, r6
 8009110:	07df      	lsls	r7, r3, #31
 8009112:	bf48      	it	mi
 8009114:	f043 0320 	orrmi.w	r3, r3, #32
 8009118:	6029      	str	r1, [r5, #0]
 800911a:	bf48      	it	mi
 800911c:	6023      	strmi	r3, [r4, #0]
 800911e:	b91e      	cbnz	r6, 8009128 <_printf_i+0x1a4>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	f023 0320 	bic.w	r3, r3, #32
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	2310      	movs	r3, #16
 800912a:	e7a7      	b.n	800907c <_printf_i+0xf8>
 800912c:	4824      	ldr	r0, [pc, #144]	; (80091c0 <_printf_i+0x23c>)
 800912e:	e7e4      	b.n	80090fa <_printf_i+0x176>
 8009130:	4615      	mov	r5, r2
 8009132:	e7bd      	b.n	80090b0 <_printf_i+0x12c>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	6826      	ldr	r6, [r4, #0]
 8009138:	6961      	ldr	r1, [r4, #20]
 800913a:	1d18      	adds	r0, r3, #4
 800913c:	6028      	str	r0, [r5, #0]
 800913e:	0635      	lsls	r5, r6, #24
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	d501      	bpl.n	8009148 <_printf_i+0x1c4>
 8009144:	6019      	str	r1, [r3, #0]
 8009146:	e002      	b.n	800914e <_printf_i+0x1ca>
 8009148:	0670      	lsls	r0, r6, #25
 800914a:	d5fb      	bpl.n	8009144 <_printf_i+0x1c0>
 800914c:	8019      	strh	r1, [r3, #0]
 800914e:	2300      	movs	r3, #0
 8009150:	6123      	str	r3, [r4, #16]
 8009152:	4615      	mov	r5, r2
 8009154:	e7bc      	b.n	80090d0 <_printf_i+0x14c>
 8009156:	682b      	ldr	r3, [r5, #0]
 8009158:	1d1a      	adds	r2, r3, #4
 800915a:	602a      	str	r2, [r5, #0]
 800915c:	681d      	ldr	r5, [r3, #0]
 800915e:	6862      	ldr	r2, [r4, #4]
 8009160:	2100      	movs	r1, #0
 8009162:	4628      	mov	r0, r5
 8009164:	f7f7 f8dc 	bl	8000320 <memchr>
 8009168:	b108      	cbz	r0, 800916e <_printf_i+0x1ea>
 800916a:	1b40      	subs	r0, r0, r5
 800916c:	6060      	str	r0, [r4, #4]
 800916e:	6863      	ldr	r3, [r4, #4]
 8009170:	6123      	str	r3, [r4, #16]
 8009172:	2300      	movs	r3, #0
 8009174:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009178:	e7aa      	b.n	80090d0 <_printf_i+0x14c>
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	462a      	mov	r2, r5
 800917e:	4649      	mov	r1, r9
 8009180:	4640      	mov	r0, r8
 8009182:	47d0      	blx	sl
 8009184:	3001      	adds	r0, #1
 8009186:	d0ad      	beq.n	80090e4 <_printf_i+0x160>
 8009188:	6823      	ldr	r3, [r4, #0]
 800918a:	079b      	lsls	r3, r3, #30
 800918c:	d413      	bmi.n	80091b6 <_printf_i+0x232>
 800918e:	68e0      	ldr	r0, [r4, #12]
 8009190:	9b03      	ldr	r3, [sp, #12]
 8009192:	4298      	cmp	r0, r3
 8009194:	bfb8      	it	lt
 8009196:	4618      	movlt	r0, r3
 8009198:	e7a6      	b.n	80090e8 <_printf_i+0x164>
 800919a:	2301      	movs	r3, #1
 800919c:	4632      	mov	r2, r6
 800919e:	4649      	mov	r1, r9
 80091a0:	4640      	mov	r0, r8
 80091a2:	47d0      	blx	sl
 80091a4:	3001      	adds	r0, #1
 80091a6:	d09d      	beq.n	80090e4 <_printf_i+0x160>
 80091a8:	3501      	adds	r5, #1
 80091aa:	68e3      	ldr	r3, [r4, #12]
 80091ac:	9903      	ldr	r1, [sp, #12]
 80091ae:	1a5b      	subs	r3, r3, r1
 80091b0:	42ab      	cmp	r3, r5
 80091b2:	dcf2      	bgt.n	800919a <_printf_i+0x216>
 80091b4:	e7eb      	b.n	800918e <_printf_i+0x20a>
 80091b6:	2500      	movs	r5, #0
 80091b8:	f104 0619 	add.w	r6, r4, #25
 80091bc:	e7f5      	b.n	80091aa <_printf_i+0x226>
 80091be:	bf00      	nop
 80091c0:	080096a9 	.word	0x080096a9
 80091c4:	080096ba 	.word	0x080096ba

080091c8 <__sflush_r>:
 80091c8:	898a      	ldrh	r2, [r1, #12]
 80091ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091ce:	4605      	mov	r5, r0
 80091d0:	0710      	lsls	r0, r2, #28
 80091d2:	460c      	mov	r4, r1
 80091d4:	d458      	bmi.n	8009288 <__sflush_r+0xc0>
 80091d6:	684b      	ldr	r3, [r1, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	dc05      	bgt.n	80091e8 <__sflush_r+0x20>
 80091dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091de:	2b00      	cmp	r3, #0
 80091e0:	dc02      	bgt.n	80091e8 <__sflush_r+0x20>
 80091e2:	2000      	movs	r0, #0
 80091e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091ea:	2e00      	cmp	r6, #0
 80091ec:	d0f9      	beq.n	80091e2 <__sflush_r+0x1a>
 80091ee:	2300      	movs	r3, #0
 80091f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091f4:	682f      	ldr	r7, [r5, #0]
 80091f6:	6a21      	ldr	r1, [r4, #32]
 80091f8:	602b      	str	r3, [r5, #0]
 80091fa:	d032      	beq.n	8009262 <__sflush_r+0x9a>
 80091fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	075a      	lsls	r2, r3, #29
 8009202:	d505      	bpl.n	8009210 <__sflush_r+0x48>
 8009204:	6863      	ldr	r3, [r4, #4]
 8009206:	1ac0      	subs	r0, r0, r3
 8009208:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800920a:	b10b      	cbz	r3, 8009210 <__sflush_r+0x48>
 800920c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800920e:	1ac0      	subs	r0, r0, r3
 8009210:	2300      	movs	r3, #0
 8009212:	4602      	mov	r2, r0
 8009214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009216:	6a21      	ldr	r1, [r4, #32]
 8009218:	4628      	mov	r0, r5
 800921a:	47b0      	blx	r6
 800921c:	1c43      	adds	r3, r0, #1
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	d106      	bne.n	8009230 <__sflush_r+0x68>
 8009222:	6829      	ldr	r1, [r5, #0]
 8009224:	291d      	cmp	r1, #29
 8009226:	d82b      	bhi.n	8009280 <__sflush_r+0xb8>
 8009228:	4a29      	ldr	r2, [pc, #164]	; (80092d0 <__sflush_r+0x108>)
 800922a:	410a      	asrs	r2, r1
 800922c:	07d6      	lsls	r6, r2, #31
 800922e:	d427      	bmi.n	8009280 <__sflush_r+0xb8>
 8009230:	2200      	movs	r2, #0
 8009232:	6062      	str	r2, [r4, #4]
 8009234:	04d9      	lsls	r1, r3, #19
 8009236:	6922      	ldr	r2, [r4, #16]
 8009238:	6022      	str	r2, [r4, #0]
 800923a:	d504      	bpl.n	8009246 <__sflush_r+0x7e>
 800923c:	1c42      	adds	r2, r0, #1
 800923e:	d101      	bne.n	8009244 <__sflush_r+0x7c>
 8009240:	682b      	ldr	r3, [r5, #0]
 8009242:	b903      	cbnz	r3, 8009246 <__sflush_r+0x7e>
 8009244:	6560      	str	r0, [r4, #84]	; 0x54
 8009246:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009248:	602f      	str	r7, [r5, #0]
 800924a:	2900      	cmp	r1, #0
 800924c:	d0c9      	beq.n	80091e2 <__sflush_r+0x1a>
 800924e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009252:	4299      	cmp	r1, r3
 8009254:	d002      	beq.n	800925c <__sflush_r+0x94>
 8009256:	4628      	mov	r0, r5
 8009258:	f7ff fbea 	bl	8008a30 <_free_r>
 800925c:	2000      	movs	r0, #0
 800925e:	6360      	str	r0, [r4, #52]	; 0x34
 8009260:	e7c0      	b.n	80091e4 <__sflush_r+0x1c>
 8009262:	2301      	movs	r3, #1
 8009264:	4628      	mov	r0, r5
 8009266:	47b0      	blx	r6
 8009268:	1c41      	adds	r1, r0, #1
 800926a:	d1c8      	bne.n	80091fe <__sflush_r+0x36>
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0c5      	beq.n	80091fe <__sflush_r+0x36>
 8009272:	2b1d      	cmp	r3, #29
 8009274:	d001      	beq.n	800927a <__sflush_r+0xb2>
 8009276:	2b16      	cmp	r3, #22
 8009278:	d101      	bne.n	800927e <__sflush_r+0xb6>
 800927a:	602f      	str	r7, [r5, #0]
 800927c:	e7b1      	b.n	80091e2 <__sflush_r+0x1a>
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	e7ad      	b.n	80091e4 <__sflush_r+0x1c>
 8009288:	690f      	ldr	r7, [r1, #16]
 800928a:	2f00      	cmp	r7, #0
 800928c:	d0a9      	beq.n	80091e2 <__sflush_r+0x1a>
 800928e:	0793      	lsls	r3, r2, #30
 8009290:	680e      	ldr	r6, [r1, #0]
 8009292:	bf08      	it	eq
 8009294:	694b      	ldreq	r3, [r1, #20]
 8009296:	600f      	str	r7, [r1, #0]
 8009298:	bf18      	it	ne
 800929a:	2300      	movne	r3, #0
 800929c:	eba6 0807 	sub.w	r8, r6, r7
 80092a0:	608b      	str	r3, [r1, #8]
 80092a2:	f1b8 0f00 	cmp.w	r8, #0
 80092a6:	dd9c      	ble.n	80091e2 <__sflush_r+0x1a>
 80092a8:	6a21      	ldr	r1, [r4, #32]
 80092aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092ac:	4643      	mov	r3, r8
 80092ae:	463a      	mov	r2, r7
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b0      	blx	r6
 80092b4:	2800      	cmp	r0, #0
 80092b6:	dc06      	bgt.n	80092c6 <__sflush_r+0xfe>
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295
 80092c4:	e78e      	b.n	80091e4 <__sflush_r+0x1c>
 80092c6:	4407      	add	r7, r0
 80092c8:	eba8 0800 	sub.w	r8, r8, r0
 80092cc:	e7e9      	b.n	80092a2 <__sflush_r+0xda>
 80092ce:	bf00      	nop
 80092d0:	dfbffffe 	.word	0xdfbffffe

080092d4 <_fflush_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	690b      	ldr	r3, [r1, #16]
 80092d8:	4605      	mov	r5, r0
 80092da:	460c      	mov	r4, r1
 80092dc:	b913      	cbnz	r3, 80092e4 <_fflush_r+0x10>
 80092de:	2500      	movs	r5, #0
 80092e0:	4628      	mov	r0, r5
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	b118      	cbz	r0, 80092ee <_fflush_r+0x1a>
 80092e6:	6a03      	ldr	r3, [r0, #32]
 80092e8:	b90b      	cbnz	r3, 80092ee <_fflush_r+0x1a>
 80092ea:	f7ff fa91 	bl	8008810 <__sinit>
 80092ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0f3      	beq.n	80092de <_fflush_r+0xa>
 80092f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80092f8:	07d0      	lsls	r0, r2, #31
 80092fa:	d404      	bmi.n	8009306 <_fflush_r+0x32>
 80092fc:	0599      	lsls	r1, r3, #22
 80092fe:	d402      	bmi.n	8009306 <_fflush_r+0x32>
 8009300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009302:	f7ff fb92 	bl	8008a2a <__retarget_lock_acquire_recursive>
 8009306:	4628      	mov	r0, r5
 8009308:	4621      	mov	r1, r4
 800930a:	f7ff ff5d 	bl	80091c8 <__sflush_r>
 800930e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009310:	07da      	lsls	r2, r3, #31
 8009312:	4605      	mov	r5, r0
 8009314:	d4e4      	bmi.n	80092e0 <_fflush_r+0xc>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	059b      	lsls	r3, r3, #22
 800931a:	d4e1      	bmi.n	80092e0 <_fflush_r+0xc>
 800931c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800931e:	f7ff fb85 	bl	8008a2c <__retarget_lock_release_recursive>
 8009322:	e7dd      	b.n	80092e0 <_fflush_r+0xc>

08009324 <_putc_r>:
 8009324:	b570      	push	{r4, r5, r6, lr}
 8009326:	460d      	mov	r5, r1
 8009328:	4614      	mov	r4, r2
 800932a:	4606      	mov	r6, r0
 800932c:	b118      	cbz	r0, 8009336 <_putc_r+0x12>
 800932e:	6a03      	ldr	r3, [r0, #32]
 8009330:	b90b      	cbnz	r3, 8009336 <_putc_r+0x12>
 8009332:	f7ff fa6d 	bl	8008810 <__sinit>
 8009336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009338:	07d8      	lsls	r0, r3, #31
 800933a:	d405      	bmi.n	8009348 <_putc_r+0x24>
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	0599      	lsls	r1, r3, #22
 8009340:	d402      	bmi.n	8009348 <_putc_r+0x24>
 8009342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009344:	f7ff fb71 	bl	8008a2a <__retarget_lock_acquire_recursive>
 8009348:	68a3      	ldr	r3, [r4, #8]
 800934a:	3b01      	subs	r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	60a3      	str	r3, [r4, #8]
 8009350:	da05      	bge.n	800935e <_putc_r+0x3a>
 8009352:	69a2      	ldr	r2, [r4, #24]
 8009354:	4293      	cmp	r3, r2
 8009356:	db12      	blt.n	800937e <_putc_r+0x5a>
 8009358:	b2eb      	uxtb	r3, r5
 800935a:	2b0a      	cmp	r3, #10
 800935c:	d00f      	beq.n	800937e <_putc_r+0x5a>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	1c5a      	adds	r2, r3, #1
 8009362:	6022      	str	r2, [r4, #0]
 8009364:	701d      	strb	r5, [r3, #0]
 8009366:	b2ed      	uxtb	r5, r5
 8009368:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800936a:	07da      	lsls	r2, r3, #31
 800936c:	d405      	bmi.n	800937a <_putc_r+0x56>
 800936e:	89a3      	ldrh	r3, [r4, #12]
 8009370:	059b      	lsls	r3, r3, #22
 8009372:	d402      	bmi.n	800937a <_putc_r+0x56>
 8009374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009376:	f7ff fb59 	bl	8008a2c <__retarget_lock_release_recursive>
 800937a:	4628      	mov	r0, r5
 800937c:	bd70      	pop	{r4, r5, r6, pc}
 800937e:	4629      	mov	r1, r5
 8009380:	4622      	mov	r2, r4
 8009382:	4630      	mov	r0, r6
 8009384:	f000 f802 	bl	800938c <__swbuf_r>
 8009388:	4605      	mov	r5, r0
 800938a:	e7ed      	b.n	8009368 <_putc_r+0x44>

0800938c <__swbuf_r>:
 800938c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800938e:	460e      	mov	r6, r1
 8009390:	4614      	mov	r4, r2
 8009392:	4605      	mov	r5, r0
 8009394:	b118      	cbz	r0, 800939e <__swbuf_r+0x12>
 8009396:	6a03      	ldr	r3, [r0, #32]
 8009398:	b90b      	cbnz	r3, 800939e <__swbuf_r+0x12>
 800939a:	f7ff fa39 	bl	8008810 <__sinit>
 800939e:	69a3      	ldr	r3, [r4, #24]
 80093a0:	60a3      	str	r3, [r4, #8]
 80093a2:	89a3      	ldrh	r3, [r4, #12]
 80093a4:	071a      	lsls	r2, r3, #28
 80093a6:	d525      	bpl.n	80093f4 <__swbuf_r+0x68>
 80093a8:	6923      	ldr	r3, [r4, #16]
 80093aa:	b31b      	cbz	r3, 80093f4 <__swbuf_r+0x68>
 80093ac:	6823      	ldr	r3, [r4, #0]
 80093ae:	6922      	ldr	r2, [r4, #16]
 80093b0:	1a98      	subs	r0, r3, r2
 80093b2:	6963      	ldr	r3, [r4, #20]
 80093b4:	b2f6      	uxtb	r6, r6
 80093b6:	4283      	cmp	r3, r0
 80093b8:	4637      	mov	r7, r6
 80093ba:	dc04      	bgt.n	80093c6 <__swbuf_r+0x3a>
 80093bc:	4621      	mov	r1, r4
 80093be:	4628      	mov	r0, r5
 80093c0:	f7ff ff88 	bl	80092d4 <_fflush_r>
 80093c4:	b9e0      	cbnz	r0, 8009400 <__swbuf_r+0x74>
 80093c6:	68a3      	ldr	r3, [r4, #8]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	60a3      	str	r3, [r4, #8]
 80093cc:	6823      	ldr	r3, [r4, #0]
 80093ce:	1c5a      	adds	r2, r3, #1
 80093d0:	6022      	str	r2, [r4, #0]
 80093d2:	701e      	strb	r6, [r3, #0]
 80093d4:	6962      	ldr	r2, [r4, #20]
 80093d6:	1c43      	adds	r3, r0, #1
 80093d8:	429a      	cmp	r2, r3
 80093da:	d004      	beq.n	80093e6 <__swbuf_r+0x5a>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	07db      	lsls	r3, r3, #31
 80093e0:	d506      	bpl.n	80093f0 <__swbuf_r+0x64>
 80093e2:	2e0a      	cmp	r6, #10
 80093e4:	d104      	bne.n	80093f0 <__swbuf_r+0x64>
 80093e6:	4621      	mov	r1, r4
 80093e8:	4628      	mov	r0, r5
 80093ea:	f7ff ff73 	bl	80092d4 <_fflush_r>
 80093ee:	b938      	cbnz	r0, 8009400 <__swbuf_r+0x74>
 80093f0:	4638      	mov	r0, r7
 80093f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093f4:	4621      	mov	r1, r4
 80093f6:	4628      	mov	r0, r5
 80093f8:	f000 f806 	bl	8009408 <__swsetup_r>
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d0d5      	beq.n	80093ac <__swbuf_r+0x20>
 8009400:	f04f 37ff 	mov.w	r7, #4294967295
 8009404:	e7f4      	b.n	80093f0 <__swbuf_r+0x64>
	...

08009408 <__swsetup_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4b2a      	ldr	r3, [pc, #168]	; (80094b4 <__swsetup_r+0xac>)
 800940c:	4605      	mov	r5, r0
 800940e:	6818      	ldr	r0, [r3, #0]
 8009410:	460c      	mov	r4, r1
 8009412:	b118      	cbz	r0, 800941c <__swsetup_r+0x14>
 8009414:	6a03      	ldr	r3, [r0, #32]
 8009416:	b90b      	cbnz	r3, 800941c <__swsetup_r+0x14>
 8009418:	f7ff f9fa 	bl	8008810 <__sinit>
 800941c:	89a3      	ldrh	r3, [r4, #12]
 800941e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009422:	0718      	lsls	r0, r3, #28
 8009424:	d422      	bmi.n	800946c <__swsetup_r+0x64>
 8009426:	06d9      	lsls	r1, r3, #27
 8009428:	d407      	bmi.n	800943a <__swsetup_r+0x32>
 800942a:	2309      	movs	r3, #9
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009432:	81a3      	strh	r3, [r4, #12]
 8009434:	f04f 30ff 	mov.w	r0, #4294967295
 8009438:	e034      	b.n	80094a4 <__swsetup_r+0x9c>
 800943a:	0758      	lsls	r0, r3, #29
 800943c:	d512      	bpl.n	8009464 <__swsetup_r+0x5c>
 800943e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009440:	b141      	cbz	r1, 8009454 <__swsetup_r+0x4c>
 8009442:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009446:	4299      	cmp	r1, r3
 8009448:	d002      	beq.n	8009450 <__swsetup_r+0x48>
 800944a:	4628      	mov	r0, r5
 800944c:	f7ff faf0 	bl	8008a30 <_free_r>
 8009450:	2300      	movs	r3, #0
 8009452:	6363      	str	r3, [r4, #52]	; 0x34
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800945a:	81a3      	strh	r3, [r4, #12]
 800945c:	2300      	movs	r3, #0
 800945e:	6063      	str	r3, [r4, #4]
 8009460:	6923      	ldr	r3, [r4, #16]
 8009462:	6023      	str	r3, [r4, #0]
 8009464:	89a3      	ldrh	r3, [r4, #12]
 8009466:	f043 0308 	orr.w	r3, r3, #8
 800946a:	81a3      	strh	r3, [r4, #12]
 800946c:	6923      	ldr	r3, [r4, #16]
 800946e:	b94b      	cbnz	r3, 8009484 <__swsetup_r+0x7c>
 8009470:	89a3      	ldrh	r3, [r4, #12]
 8009472:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009476:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800947a:	d003      	beq.n	8009484 <__swsetup_r+0x7c>
 800947c:	4621      	mov	r1, r4
 800947e:	4628      	mov	r0, r5
 8009480:	f000 f850 	bl	8009524 <__smakebuf_r>
 8009484:	89a0      	ldrh	r0, [r4, #12]
 8009486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800948a:	f010 0301 	ands.w	r3, r0, #1
 800948e:	d00a      	beq.n	80094a6 <__swsetup_r+0x9e>
 8009490:	2300      	movs	r3, #0
 8009492:	60a3      	str	r3, [r4, #8]
 8009494:	6963      	ldr	r3, [r4, #20]
 8009496:	425b      	negs	r3, r3
 8009498:	61a3      	str	r3, [r4, #24]
 800949a:	6923      	ldr	r3, [r4, #16]
 800949c:	b943      	cbnz	r3, 80094b0 <__swsetup_r+0xa8>
 800949e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80094a2:	d1c4      	bne.n	800942e <__swsetup_r+0x26>
 80094a4:	bd38      	pop	{r3, r4, r5, pc}
 80094a6:	0781      	lsls	r1, r0, #30
 80094a8:	bf58      	it	pl
 80094aa:	6963      	ldrpl	r3, [r4, #20]
 80094ac:	60a3      	str	r3, [r4, #8]
 80094ae:	e7f4      	b.n	800949a <__swsetup_r+0x92>
 80094b0:	2000      	movs	r0, #0
 80094b2:	e7f7      	b.n	80094a4 <__swsetup_r+0x9c>
 80094b4:	2400015c 	.word	0x2400015c

080094b8 <_sbrk_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d06      	ldr	r5, [pc, #24]	; (80094d4 <_sbrk_r+0x1c>)
 80094bc:	2300      	movs	r3, #0
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	f7f7 f8fe 	bl	80006c4 <_sbrk>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_sbrk_r+0x1a>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_sbrk_r+0x1a>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	24001ecc 	.word	0x24001ecc

080094d8 <__swhatbuf_r>:
 80094d8:	b570      	push	{r4, r5, r6, lr}
 80094da:	460c      	mov	r4, r1
 80094dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e0:	2900      	cmp	r1, #0
 80094e2:	b096      	sub	sp, #88	; 0x58
 80094e4:	4615      	mov	r5, r2
 80094e6:	461e      	mov	r6, r3
 80094e8:	da0d      	bge.n	8009506 <__swhatbuf_r+0x2e>
 80094ea:	89a3      	ldrh	r3, [r4, #12]
 80094ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80094f0:	f04f 0100 	mov.w	r1, #0
 80094f4:	bf0c      	ite	eq
 80094f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80094fa:	2340      	movne	r3, #64	; 0x40
 80094fc:	2000      	movs	r0, #0
 80094fe:	6031      	str	r1, [r6, #0]
 8009500:	602b      	str	r3, [r5, #0]
 8009502:	b016      	add	sp, #88	; 0x58
 8009504:	bd70      	pop	{r4, r5, r6, pc}
 8009506:	466a      	mov	r2, sp
 8009508:	f000 f848 	bl	800959c <_fstat_r>
 800950c:	2800      	cmp	r0, #0
 800950e:	dbec      	blt.n	80094ea <__swhatbuf_r+0x12>
 8009510:	9901      	ldr	r1, [sp, #4]
 8009512:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009516:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800951a:	4259      	negs	r1, r3
 800951c:	4159      	adcs	r1, r3
 800951e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009522:	e7eb      	b.n	80094fc <__swhatbuf_r+0x24>

08009524 <__smakebuf_r>:
 8009524:	898b      	ldrh	r3, [r1, #12]
 8009526:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009528:	079d      	lsls	r5, r3, #30
 800952a:	4606      	mov	r6, r0
 800952c:	460c      	mov	r4, r1
 800952e:	d507      	bpl.n	8009540 <__smakebuf_r+0x1c>
 8009530:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	6123      	str	r3, [r4, #16]
 8009538:	2301      	movs	r3, #1
 800953a:	6163      	str	r3, [r4, #20]
 800953c:	b002      	add	sp, #8
 800953e:	bd70      	pop	{r4, r5, r6, pc}
 8009540:	ab01      	add	r3, sp, #4
 8009542:	466a      	mov	r2, sp
 8009544:	f7ff ffc8 	bl	80094d8 <__swhatbuf_r>
 8009548:	9900      	ldr	r1, [sp, #0]
 800954a:	4605      	mov	r5, r0
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff fadb 	bl	8008b08 <_malloc_r>
 8009552:	b948      	cbnz	r0, 8009568 <__smakebuf_r+0x44>
 8009554:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009558:	059a      	lsls	r2, r3, #22
 800955a:	d4ef      	bmi.n	800953c <__smakebuf_r+0x18>
 800955c:	f023 0303 	bic.w	r3, r3, #3
 8009560:	f043 0302 	orr.w	r3, r3, #2
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	e7e3      	b.n	8009530 <__smakebuf_r+0xc>
 8009568:	89a3      	ldrh	r3, [r4, #12]
 800956a:	6020      	str	r0, [r4, #0]
 800956c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009570:	81a3      	strh	r3, [r4, #12]
 8009572:	9b00      	ldr	r3, [sp, #0]
 8009574:	6163      	str	r3, [r4, #20]
 8009576:	9b01      	ldr	r3, [sp, #4]
 8009578:	6120      	str	r0, [r4, #16]
 800957a:	b15b      	cbz	r3, 8009594 <__smakebuf_r+0x70>
 800957c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009580:	4630      	mov	r0, r6
 8009582:	f000 f81d 	bl	80095c0 <_isatty_r>
 8009586:	b128      	cbz	r0, 8009594 <__smakebuf_r+0x70>
 8009588:	89a3      	ldrh	r3, [r4, #12]
 800958a:	f023 0303 	bic.w	r3, r3, #3
 800958e:	f043 0301 	orr.w	r3, r3, #1
 8009592:	81a3      	strh	r3, [r4, #12]
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	431d      	orrs	r5, r3
 8009598:	81a5      	strh	r5, [r4, #12]
 800959a:	e7cf      	b.n	800953c <__smakebuf_r+0x18>

0800959c <_fstat_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d07      	ldr	r5, [pc, #28]	; (80095bc <_fstat_r+0x20>)
 80095a0:	2300      	movs	r3, #0
 80095a2:	4604      	mov	r4, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	4611      	mov	r1, r2
 80095a8:	602b      	str	r3, [r5, #0]
 80095aa:	f7f7 f862 	bl	8000672 <_fstat>
 80095ae:	1c43      	adds	r3, r0, #1
 80095b0:	d102      	bne.n	80095b8 <_fstat_r+0x1c>
 80095b2:	682b      	ldr	r3, [r5, #0]
 80095b4:	b103      	cbz	r3, 80095b8 <_fstat_r+0x1c>
 80095b6:	6023      	str	r3, [r4, #0]
 80095b8:	bd38      	pop	{r3, r4, r5, pc}
 80095ba:	bf00      	nop
 80095bc:	24001ecc 	.word	0x24001ecc

080095c0 <_isatty_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4d06      	ldr	r5, [pc, #24]	; (80095dc <_isatty_r+0x1c>)
 80095c4:	2300      	movs	r3, #0
 80095c6:	4604      	mov	r4, r0
 80095c8:	4608      	mov	r0, r1
 80095ca:	602b      	str	r3, [r5, #0]
 80095cc:	f7f7 f861 	bl	8000692 <_isatty>
 80095d0:	1c43      	adds	r3, r0, #1
 80095d2:	d102      	bne.n	80095da <_isatty_r+0x1a>
 80095d4:	682b      	ldr	r3, [r5, #0]
 80095d6:	b103      	cbz	r3, 80095da <_isatty_r+0x1a>
 80095d8:	6023      	str	r3, [r4, #0]
 80095da:	bd38      	pop	{r3, r4, r5, pc}
 80095dc:	24001ecc 	.word	0x24001ecc

080095e0 <_init>:
 80095e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e2:	bf00      	nop
 80095e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095e6:	bc08      	pop	{r3}
 80095e8:	469e      	mov	lr, r3
 80095ea:	4770      	bx	lr

080095ec <_fini>:
 80095ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ee:	bf00      	nop
 80095f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f2:	bc08      	pop	{r3}
 80095f4:	469e      	mov	lr, r3
 80095f6:	4770      	bx	lr
