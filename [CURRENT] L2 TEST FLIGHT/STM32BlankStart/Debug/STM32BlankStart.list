
STM32BlankStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ec0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000620  08018190  08018190  00028190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080187b0  080187b0  000287b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080187b8  080187b8  000287b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080187bc  080187bc  000287bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002e0  24000000  080187c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002708  240002e0  08018aa0  000302e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240029e8  08018aa0  000329e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003030e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002e997  00000000  00000000  00030351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000628d  00000000  00000000  0005ece8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002518  00000000  00000000  00064f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001c6e  00000000  00000000  00067490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003dbe2  00000000  00000000  000690fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000369ce  00000000  00000000  000a6ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016e56d  00000000  00000000  000dd6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b078  00000000  00000000  0024bc1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  00256c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002e0 	.word	0x240002e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018178 	.word	0x08018178

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002e4 	.word	0x240002e4
 800030c:	08018178 	.word	0x08018178

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a8 	b.w	8000aa0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	460d      	mov	r5, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	460f      	mov	r7, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4694      	mov	ip, r2
 80007ec:	d965      	bls.n	80008ba <__udivmoddi4+0xe2>
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	b143      	cbz	r3, 8000806 <__udivmoddi4+0x2e>
 80007f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f8:	f1c3 0220 	rsb	r2, r3, #32
 80007fc:	409f      	lsls	r7, r3
 80007fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000802:	4317      	orrs	r7, r2
 8000804:	409c      	lsls	r4, r3
 8000806:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800080a:	fa1f f58c 	uxth.w	r5, ip
 800080e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000812:	0c22      	lsrs	r2, r4, #16
 8000814:	fb0e 7711 	mls	r7, lr, r1, r7
 8000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800081c:	fb01 f005 	mul.w	r0, r1, r5
 8000820:	4290      	cmp	r0, r2
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x62>
 8000824:	eb1c 0202 	adds.w	r2, ip, r2
 8000828:	f101 37ff 	add.w	r7, r1, #4294967295
 800082c:	f080 811c 	bcs.w	8000a68 <__udivmoddi4+0x290>
 8000830:	4290      	cmp	r0, r2
 8000832:	f240 8119 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000836:	3902      	subs	r1, #2
 8000838:	4462      	add	r2, ip
 800083a:	1a12      	subs	r2, r2, r0
 800083c:	b2a4      	uxth	r4, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084a:	fb00 f505 	mul.w	r5, r0, r5
 800084e:	42a5      	cmp	r5, r4
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x90>
 8000852:	eb1c 0404 	adds.w	r4, ip, r4
 8000856:	f100 32ff 	add.w	r2, r0, #4294967295
 800085a:	f080 8107 	bcs.w	8000a6c <__udivmoddi4+0x294>
 800085e:	42a5      	cmp	r5, r4
 8000860:	f240 8104 	bls.w	8000a6c <__udivmoddi4+0x294>
 8000864:	4464      	add	r4, ip
 8000866:	3802      	subs	r0, #2
 8000868:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	2100      	movs	r1, #0
 8000870:	b11e      	cbz	r6, 800087a <__udivmoddi4+0xa2>
 8000872:	40dc      	lsrs	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	e9c6 4300 	strd	r4, r3, [r6]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0xbc>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80ed 	beq.w	8000a62 <__udivmoddi4+0x28a>
 8000888:	2100      	movs	r1, #0
 800088a:	e9c6 0500 	strd	r0, r5, [r6]
 800088e:	4608      	mov	r0, r1
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	fab3 f183 	clz	r1, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	d149      	bne.n	8000930 <__udivmoddi4+0x158>
 800089c:	42ab      	cmp	r3, r5
 800089e:	d302      	bcc.n	80008a6 <__udivmoddi4+0xce>
 80008a0:	4282      	cmp	r2, r0
 80008a2:	f200 80f8 	bhi.w	8000a96 <__udivmoddi4+0x2be>
 80008a6:	1a84      	subs	r4, r0, r2
 80008a8:	eb65 0203 	sbc.w	r2, r5, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	4617      	mov	r7, r2
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0e2      	beq.n	800087a <__udivmoddi4+0xa2>
 80008b4:	e9c6 4700 	strd	r4, r7, [r6]
 80008b8:	e7df      	b.n	800087a <__udivmoddi4+0xa2>
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xe6>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f382 	clz	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8090 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f fe8c 	uxth.w	lr, ip
 80008d2:	2101      	movs	r1, #1
 80008d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008d8:	fb07 2015 	mls	r0, r7, r5, r2
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008e2:	fb0e f005 	mul.w	r0, lr, r5
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ea:	eb1c 0202 	adds.w	r2, ip, r2
 80008ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4290      	cmp	r0, r2
 80008f6:	f200 80cb 	bhi.w	8000a90 <__udivmoddi4+0x2b8>
 80008fa:	4645      	mov	r5, r8
 80008fc:	1a12      	subs	r2, r2, r0
 80008fe:	b2a4      	uxth	r4, r4
 8000900:	fbb2 f0f7 	udiv	r0, r2, r7
 8000904:	fb07 2210 	mls	r2, r7, r0, r2
 8000908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090c:	fb0e fe00 	mul.w	lr, lr, r0
 8000910:	45a6      	cmp	lr, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x14e>
 8000914:	eb1c 0404 	adds.w	r4, ip, r4
 8000918:	f100 32ff 	add.w	r2, r0, #4294967295
 800091c:	d202      	bcs.n	8000924 <__udivmoddi4+0x14c>
 800091e:	45a6      	cmp	lr, r4
 8000920:	f200 80bb 	bhi.w	8000a9a <__udivmoddi4+0x2c2>
 8000924:	4610      	mov	r0, r2
 8000926:	eba4 040e 	sub.w	r4, r4, lr
 800092a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800092e:	e79f      	b.n	8000870 <__udivmoddi4+0x98>
 8000930:	f1c1 0720 	rsb	r7, r1, #32
 8000934:	408b      	lsls	r3, r1
 8000936:	fa22 fc07 	lsr.w	ip, r2, r7
 800093a:	ea4c 0c03 	orr.w	ip, ip, r3
 800093e:	fa05 f401 	lsl.w	r4, r5, r1
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	40fd      	lsrs	r5, r7
 8000948:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800094c:	4323      	orrs	r3, r4
 800094e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	fb09 5518 	mls	r5, r9, r8, r5
 800095a:	0c1c      	lsrs	r4, r3, #16
 800095c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000960:	fb08 f50e 	mul.w	r5, r8, lr
 8000964:	42a5      	cmp	r5, r4
 8000966:	fa02 f201 	lsl.w	r2, r2, r1
 800096a:	fa00 f001 	lsl.w	r0, r0, r1
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f108 3aff 	add.w	sl, r8, #4294967295
 8000978:	f080 8088 	bcs.w	8000a8c <__udivmoddi4+0x2b4>
 800097c:	42a5      	cmp	r5, r4
 800097e:	f240 8085 	bls.w	8000a8c <__udivmoddi4+0x2b4>
 8000982:	f1a8 0802 	sub.w	r8, r8, #2
 8000986:	4464      	add	r4, ip
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	b29d      	uxth	r5, r3
 800098c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000990:	fb09 4413 	mls	r4, r9, r3, r4
 8000994:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000998:	fb03 fe0e 	mul.w	lr, r3, lr
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009a8:	d26c      	bcs.n	8000a84 <__udivmoddi4+0x2ac>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	d96a      	bls.n	8000a84 <__udivmoddi4+0x2ac>
 80009ae:	3b02      	subs	r3, #2
 80009b0:	4464      	add	r4, ip
 80009b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009b6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	42ac      	cmp	r4, r5
 80009c0:	46c8      	mov	r8, r9
 80009c2:	46ae      	mov	lr, r5
 80009c4:	d356      	bcc.n	8000a74 <__udivmoddi4+0x29c>
 80009c6:	d053      	beq.n	8000a70 <__udivmoddi4+0x298>
 80009c8:	b156      	cbz	r6, 80009e0 <__udivmoddi4+0x208>
 80009ca:	ebb0 0208 	subs.w	r2, r0, r8
 80009ce:	eb64 040e 	sbc.w	r4, r4, lr
 80009d2:	fa04 f707 	lsl.w	r7, r4, r7
 80009d6:	40ca      	lsrs	r2, r1
 80009d8:	40cc      	lsrs	r4, r1
 80009da:	4317      	orrs	r7, r2
 80009dc:	e9c6 7400 	strd	r7, r4, [r6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	f1c3 0120 	rsb	r1, r3, #32
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	fa20 f201 	lsr.w	r2, r0, r1
 80009f4:	fa25 f101 	lsr.w	r1, r5, r1
 80009f8:	409d      	lsls	r5, r3
 80009fa:	432a      	orrs	r2, r5
 80009fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1510 	mls	r5, r7, r0, r1
 8000a0c:	0c11      	lsrs	r1, r2, #16
 8000a0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a12:	fb00 f50e 	mul.w	r5, r0, lr
 8000a16:	428d      	cmp	r5, r1
 8000a18:	fa04 f403 	lsl.w	r4, r4, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x258>
 8000a1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a26:	d22f      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a28:	428d      	cmp	r5, r1
 8000a2a:	d92d      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	4461      	add	r1, ip
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	b292      	uxth	r2, r2
 8000a34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a38:	fb07 1115 	mls	r1, r7, r5, r1
 8000a3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a40:	fb05 f10e 	mul.w	r1, r5, lr
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x282>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a50:	d216      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 8000a52:	4291      	cmp	r1, r2
 8000a54:	d914      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 8000a56:	3d02      	subs	r5, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a60:	e738      	b.n	80008d4 <__udivmoddi4+0xfc>
 8000a62:	4631      	mov	r1, r6
 8000a64:	4630      	mov	r0, r6
 8000a66:	e708      	b.n	800087a <__udivmoddi4+0xa2>
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e6e6      	b.n	800083a <__udivmoddi4+0x62>
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	e6fb      	b.n	8000868 <__udivmoddi4+0x90>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d2a9      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a74:	ebb9 0802 	subs.w	r8, r9, r2
 8000a78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7a3      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a80:	4645      	mov	r5, r8
 8000a82:	e7ea      	b.n	8000a5a <__udivmoddi4+0x282>
 8000a84:	462b      	mov	r3, r5
 8000a86:	e794      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	e7d1      	b.n	8000a30 <__udivmoddi4+0x258>
 8000a8c:	46d0      	mov	r8, sl
 8000a8e:	e77b      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	e732      	b.n	80008fc <__udivmoddi4+0x124>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e70a      	b.n	80008b0 <__udivmoddi4+0xd8>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	e742      	b.n	8000926 <__udivmoddi4+0x14e>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param hi2c4 Pointer to i2c handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, I2C_HandleTypeDef *hi2c4) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
	GNSS->hi2c4 = hi2c4;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = 0;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = 0;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = 0;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = 0;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = 0;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	GNSS->lon = 0;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->lat = 0;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->height = 0;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	GNSS->hMSL = 0;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	GNSS->hAcc = 0;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	GNSS->vAcc = 0;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GNSS->gSpeed = 0;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	GNSS->headMot = 0; // microseconds??
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b084      	sub	sp, #16
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]

	for (int var = 0; var <= 100; ++var) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e057      	b.n	8000bf4 <GNSS_ParseBuffer+0xbe>
		if (GNSS->i2cWorkingBuffer[var] == 0xB5
 8000b44:	687a      	ldr	r2, [r7, #4]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	3308      	adds	r3, #8
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2bb5      	cmp	r3, #181	; 0xb5
 8000b50:	d14d      	bne.n	8000bee <GNSS_ParseBuffer+0xb8>
				&& GNSS->i2cWorkingBuffer[var + 1] == 0x62) {
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	3301      	adds	r3, #1
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	7a1b      	ldrb	r3, [r3, #8]
 8000b5c:	2b62      	cmp	r3, #98	; 0x62
 8000b5e:	d146      	bne.n	8000bee <GNSS_ParseBuffer+0xb8>
			if (GNSS->i2cWorkingBuffer[var + 2] == 0x27
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3302      	adds	r3, #2
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	7a1b      	ldrb	r3, [r3, #8]
 8000b6a:	2b27      	cmp	r3, #39	; 0x27
 8000b6c:	d10a      	bne.n	8000b84 <GNSS_ParseBuffer+0x4e>
					&& GNSS->i2cWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	3303      	adds	r3, #3
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	4413      	add	r3, r2
 8000b76:	7a1b      	ldrb	r3, [r3, #8]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d103      	bne.n	8000b84 <GNSS_ParseBuffer+0x4e>
				GNSS_ParseUniqID(GNSS);
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f000 f875 	bl	8000c6c <GNSS_ParseUniqID>
 8000b82:	e034      	b.n	8000bee <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->i2cWorkingBuffer[var + 2] == 0x01
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3302      	adds	r3, #2
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	7a1b      	ldrb	r3, [r3, #8]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d10a      	bne.n	8000ba8 <GNSS_ParseBuffer+0x72>
					&& GNSS->i2cWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3303      	adds	r3, #3
 8000b96:	687a      	ldr	r2, [r7, #4]
 8000b98:	4413      	add	r3, r2
 8000b9a:	7a1b      	ldrb	r3, [r3, #8]
 8000b9c:	2b21      	cmp	r3, #33	; 0x21
 8000b9e:	d103      	bne.n	8000ba8 <GNSS_ParseBuffer+0x72>
				GNSS_ParseNavigatorData(GNSS);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 f9e9 	bl	8000f78 <GNSS_ParseNavigatorData>
 8000ba6:	e022      	b.n	8000bee <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->i2cWorkingBuffer[var + 2] == 0x01
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	3302      	adds	r3, #2
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	4413      	add	r3, r2
 8000bb0:	7a1b      	ldrb	r3, [r3, #8]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d10a      	bne.n	8000bcc <GNSS_ParseBuffer+0x96>
					&& GNSS->i2cWorkingBuffer[var + 3] == 0x07) { //ook at: 32.17.30.1 u-blox 8 Receiver description
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	3303      	adds	r3, #3
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	d103      	bne.n	8000bcc <GNSS_ParseBuffer+0x96>
				GNSS_ParsePVTData(GNSS);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f000 f873 	bl	8000cb0 <GNSS_ParsePVTData>
 8000bca:	e010      	b.n	8000bee <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->i2cWorkingBuffer[var + 2] == 0x01
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3302      	adds	r3, #2
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	7a1b      	ldrb	r3, [r3, #8]
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d109      	bne.n	8000bee <GNSS_ParseBuffer+0xb8>
					&& GNSS->i2cWorkingBuffer[var + 3] == 0x02) { // Look at: 32.17.15.1 u-blox 8 Receiver description
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	3303      	adds	r3, #3
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	7a1b      	ldrb	r3, [r3, #8]
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d102      	bne.n	8000bee <GNSS_ParseBuffer+0xb8>
				GNSS_ParsePOSLLHData(GNSS);
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f000 f9fb 	bl	8000fe4 <GNSS_ParsePOSLLHData>
	for (int var = 0; var <= 100; ++var) {
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b64      	cmp	r3, #100	; 0x64
 8000bf8:	dda4      	ble.n	8000b44 <GNSS_ParseBuffer+0xe>
			}
		}
	}
}
 8000bfa:	bf00      	nop
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <GNSS_GetUniqID>:

/*!
 * Make request for unique chip ID data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetUniqID(GNSS_StateHandle *GNSS) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4, 0x42, getDeviceID,
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	2308      	movs	r3, #8
 8000c12:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <GNSS_GetUniqID+0x2c>)
 8000c14:	2142      	movs	r1, #66	; 0x42
 8000c16:	f005 faef 	bl	80061f8 <HAL_I2C_Master_Transmit_DMA>
			sizeof(getDeviceID) / sizeof(uint8_t));
	HAL_I2C_Master_Receive_IT(GNSS->hi2c4,0x42, GNSS_Handle.i2cWorkingBuffer, 17);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6818      	ldr	r0, [r3, #0]
 8000c1e:	2311      	movs	r3, #17
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <GNSS_GetUniqID+0x30>)
 8000c22:	2142      	movs	r1, #66	; 0x42
 8000c24:	f005 fa78 	bl	8006118 <HAL_I2C_Master_Receive_IT>
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	08018340 	.word	0x08018340
 8000c34:	24000304 	.word	0x24000304

08000c38 <GNSS_GetPVTData>:

/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, getPVTData,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6818      	ldr	r0, [r3, #0]
 8000c44:	2308      	movs	r3, #8
 8000c46:	4a07      	ldr	r2, [pc, #28]	; (8000c64 <GNSS_GetPVTData+0x2c>)
 8000c48:	2142      	movs	r1, #66	; 0x42
 8000c4a:	f005 fad5 	bl	80061f8 <HAL_I2C_Master_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
	HAL_I2C_Master_Receive_IT(GNSS->hi2c4,0x42, GNSS_Handle.i2cWorkingBuffer, 100);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	2364      	movs	r3, #100	; 0x64
 8000c54:	4a04      	ldr	r2, [pc, #16]	; (8000c68 <GNSS_GetPVTData+0x30>)
 8000c56:	2142      	movs	r1, #66	; 0x42
 8000c58:	f005 fa5e 	bl	8006118 <HAL_I2C_Master_Receive_IT>
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	08018348 	.word	0x08018348
 8000c68:	24000304 	.word	0x24000304

08000c6c <GNSS_ParseUniqID>:
/*!
 * Parse data to unique chip ID standard.
 * Look at: 32.19.1.1 u-blox 8 Receiver description
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS) {
 8000c6c:	b480      	push	{r7}
 8000c6e:	b085      	sub	sp, #20
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 5; ++var) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	e00d      	b.n	8000c96 <GNSS_ParseUniqID+0x2a>
		GNSS->uniqueID[var] = GNSS_Handle.i2cWorkingBuffer[10 + var];
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	330a      	adds	r3, #10
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <GNSS_ParseUniqID+0x40>)
 8000c80:	4413      	add	r3, r2
 8000c82:	7a19      	ldrb	r1, [r3, #8]
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	4413      	add	r3, r2
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	460a      	mov	r2, r1
 8000c8e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 5; ++var) {
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3301      	adds	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	2b04      	cmp	r3, #4
 8000c9a:	ddee      	ble.n	8000c7a <GNSS_ParseUniqID+0xe>
	}
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3714      	adds	r7, #20
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	240002fc 	.word	0x240002fc

08000cb0 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8000cb0:	b480      	push	{r7}
 8000cb2:	b08b      	sub	sp, #44	; 0x2c
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.i2cWorkingBuffer[10];
 8000cb8:	4b92      	ldr	r3, [pc, #584]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000cba:	7c9a      	ldrb	r2, [r3, #18]
 8000cbc:	4b92      	ldr	r3, [pc, #584]	; (8000f08 <GNSS_ParsePVTData+0x258>)
 8000cbe:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS_Handle.i2cWorkingBuffer[10];
 8000cc0:	4b90      	ldr	r3, [pc, #576]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000cc2:	7c9a      	ldrb	r2, [r3, #18]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	uShort.bytes[1] = GNSS_Handle.i2cWorkingBuffer[11];
 8000cca:	4b8e      	ldr	r3, [pc, #568]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000ccc:	7cda      	ldrb	r2, [r3, #19]
 8000cce:	4b8e      	ldr	r3, [pc, #568]	; (8000f08 <GNSS_ParsePVTData+0x258>)
 8000cd0:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS_Handle.i2cWorkingBuffer[11];
 8000cd2:	4b8c      	ldr	r3, [pc, #560]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000cd4:	7cda      	ldrb	r2, [r3, #19]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	GNSS->year = uShort.uShort;
 8000cdc:	4b8a      	ldr	r3, [pc, #552]	; (8000f08 <GNSS_ParsePVTData+0x258>)
 8000cde:	881a      	ldrh	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS_Handle.i2cWorkingBuffer[12];
 8000ce6:	4b87      	ldr	r3, [pc, #540]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000ce8:	7d1a      	ldrb	r2, [r3, #20]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS_Handle.i2cWorkingBuffer[13];
 8000cf0:	4b84      	ldr	r3, [pc, #528]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000cf2:	7d5a      	ldrb	r2, [r3, #21]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS_Handle.i2cWorkingBuffer[14];
 8000cfa:	4b82      	ldr	r3, [pc, #520]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000cfc:	7d9a      	ldrb	r2, [r3, #22]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS_Handle.i2cWorkingBuffer[15];
 8000d04:	4b7f      	ldr	r3, [pc, #508]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000d06:	7dda      	ldrb	r2, [r3, #23]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS_Handle.i2cWorkingBuffer[16];
 8000d0e:	4b7d      	ldr	r3, [pc, #500]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000d10:	7e1a      	ldrb	r2, [r3, #24]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = GNSS_Handle.i2cWorkingBuffer[26];
 8000d18:	4b7a      	ldr	r3, [pc, #488]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000d1a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77

	for (int var = 0; var < 4; ++var) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
 8000d28:	e017      	b.n	8000d5a <GNSS_ParsePVTData+0xaa>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 30];
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2c:	331e      	adds	r3, #30
 8000d2e:	4a75      	ldr	r2, [pc, #468]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000d30:	4413      	add	r3, r2
 8000d32:	7a19      	ldrb	r1, [r3, #8]
 8000d34:	4a75      	ldr	r2, [pc, #468]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d38:	4413      	add	r3, r2
 8000d3a:	460a      	mov	r2, r1
 8000d3c:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS_Handle.i2cWorkingBuffer[var + 30];
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	331e      	adds	r3, #30
 8000d42:	4a70      	ldr	r2, [pc, #448]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000d44:	4413      	add	r3, r2
 8000d46:	7a19      	ldrb	r1, [r3, #8]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	4413      	add	r3, r2
 8000d4e:	337c      	adds	r3, #124	; 0x7c
 8000d50:	460a      	mov	r2, r1
 8000d52:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d56:	3301      	adds	r3, #1
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	2b03      	cmp	r3, #3
 8000d5e:	dde4      	ble.n	8000d2a <GNSS_ParsePVTData+0x7a>
	}
	GNSS->lon = iLong.iLong;
 8000d60:	4b6a      	ldr	r3, [pc, #424]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8000d68:	4b68      	ldr	r3, [pc, #416]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	ee07 3a90 	vmov	s15, r3
 8000d70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d74:	eddf 6a66 	vldr	s13, [pc, #408]	; 8000f10 <GNSS_ParsePVTData+0x260>
 8000d78:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	for (int var = 0; var < 4; ++var) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
 8000d86:	e017      	b.n	8000db8 <GNSS_ParsePVTData+0x108>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 34];
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	3322      	adds	r3, #34	; 0x22
 8000d8c:	4a5d      	ldr	r2, [pc, #372]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000d8e:	4413      	add	r3, r2
 8000d90:	7a19      	ldrb	r1, [r3, #8]
 8000d92:	4a5e      	ldr	r2, [pc, #376]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000d94:	6a3b      	ldr	r3, [r7, #32]
 8000d96:	4413      	add	r3, r2
 8000d98:	460a      	mov	r2, r1
 8000d9a:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS_Handle.i2cWorkingBuffer[var + 34];
 8000d9c:	6a3b      	ldr	r3, [r7, #32]
 8000d9e:	3322      	adds	r3, #34	; 0x22
 8000da0:	4a58      	ldr	r2, [pc, #352]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000da2:	4413      	add	r3, r2
 8000da4:	7a19      	ldrb	r1, [r3, #8]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6a3b      	ldr	r3, [r7, #32]
 8000daa:	4413      	add	r3, r2
 8000dac:	3384      	adds	r3, #132	; 0x84
 8000dae:	460a      	mov	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000db2:	6a3b      	ldr	r3, [r7, #32]
 8000db4:	3301      	adds	r3, #1
 8000db6:	623b      	str	r3, [r7, #32]
 8000db8:	6a3b      	ldr	r3, [r7, #32]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	dde4      	ble.n	8000d88 <GNSS_ParsePVTData+0xd8>
	}
	GNSS->lat = iLong.iLong;
 8000dbe:	4b53      	ldr	r3, [pc, #332]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8000dc8:	4b50      	ldr	r3, [pc, #320]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	ee07 3a90 	vmov	s15, r3
 8000dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dd4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8000f10 <GNSS_ParsePVTData+0x260>
 8000dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	for (int var = 0; var < 4; ++var) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
 8000de6:	e00c      	b.n	8000e02 <GNSS_ParsePVTData+0x152>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 38];
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	3326      	adds	r3, #38	; 0x26
 8000dec:	4a45      	ldr	r2, [pc, #276]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000dee:	4413      	add	r3, r2
 8000df0:	7a19      	ldrb	r1, [r3, #8]
 8000df2:	4a46      	ldr	r2, [pc, #280]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000df4:	69fb      	ldr	r3, [r7, #28]
 8000df6:	4413      	add	r3, r2
 8000df8:	460a      	mov	r2, r1
 8000dfa:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	61fb      	str	r3, [r7, #28]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	ddef      	ble.n	8000de8 <GNSS_ParsePVTData+0x138>
	}
	GNSS->height = iLong.iLong;
 8000e08:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	e017      	b.n	8000e48 <GNSS_ParsePVTData+0x198>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 42];
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	332a      	adds	r3, #42	; 0x2a
 8000e1c:	4a39      	ldr	r2, [pc, #228]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000e1e:	4413      	add	r3, r2
 8000e20:	7a19      	ldrb	r1, [r3, #8]
 8000e22:	4a3a      	ldr	r2, [pc, #232]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	4413      	add	r3, r2
 8000e28:	460a      	mov	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 42];
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	332a      	adds	r3, #42	; 0x2a
 8000e30:	4a34      	ldr	r2, [pc, #208]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000e32:	4413      	add	r3, r2
 8000e34:	7a19      	ldrb	r1, [r3, #8]
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3398      	adds	r3, #152	; 0x98
 8000e3e:	460a      	mov	r2, r1
 8000e40:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	3301      	adds	r3, #1
 8000e46:	61bb      	str	r3, [r7, #24]
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	2b03      	cmp	r3, #3
 8000e4c:	dde4      	ble.n	8000e18 <GNSS_ParsePVTData+0x168>
	}
	GNSS->hMSL = iLong.iLong;
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00c      	b.n	8000e78 <GNSS_ParsePVTData+0x1c8>
		uLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 46];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	332e      	adds	r3, #46	; 0x2e
 8000e62:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000e64:	4413      	add	r3, r2
 8000e66:	7a19      	ldrb	r1, [r3, #8]
 8000e68:	4a2a      	ldr	r2, [pc, #168]	; (8000f14 <GNSS_ParsePVTData+0x264>)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	460a      	mov	r2, r1
 8000e70:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	ddef      	ble.n	8000e5e <GNSS_ParsePVTData+0x1ae>
	}
	GNSS->hAcc = uLong.uLong;
 8000e7e:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <GNSS_ParsePVTData+0x264>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	for (int var = 0; var < 4; ++var) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	e00c      	b.n	8000ea8 <GNSS_ParsePVTData+0x1f8>
		uLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 50];
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	3332      	adds	r3, #50	; 0x32
 8000e92:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000e94:	4413      	add	r3, r2
 8000e96:	7a19      	ldrb	r1, [r3, #8]
 8000e98:	4a1e      	ldr	r2, [pc, #120]	; (8000f14 <GNSS_ParsePVTData+0x264>)
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	4413      	add	r3, r2
 8000e9e:	460a      	mov	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	2b03      	cmp	r3, #3
 8000eac:	ddef      	ble.n	8000e8e <GNSS_ParsePVTData+0x1de>
	}
	GNSS->vAcc = uLong.uLong;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <GNSS_ParsePVTData+0x264>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (int var = 0; var < 4; ++var) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	e017      	b.n	8000eee <GNSS_ParsePVTData+0x23e>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 66];
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	3342      	adds	r3, #66	; 0x42
 8000ec2:	4a10      	ldr	r2, [pc, #64]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000ec4:	4413      	add	r3, r2
 8000ec6:	7a19      	ldrb	r1, [r3, #8]
 8000ec8:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	460a      	mov	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 66];
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	3342      	adds	r3, #66	; 0x42
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <GNSS_ParsePVTData+0x254>)
 8000ed8:	4413      	add	r3, r2
 8000eda:	7a19      	ldrb	r1, [r3, #8]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	33a8      	adds	r3, #168	; 0xa8
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	dde4      	ble.n	8000ebe <GNSS_ParsePVTData+0x20e>
	}
	GNSS->gSpeed = iLong.iLong;
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <GNSS_ParsePVTData+0x25c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (int var = 0; var < 4; ++var) {
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	e016      	b.n	8000f32 <GNSS_ParsePVTData+0x282>
 8000f04:	240002fc 	.word	0x240002fc
 8000f08:	240003ac 	.word	0x240003ac
 8000f0c:	240003b4 	.word	0x240003b4
 8000f10:	4b189680 	.word	0x4b189680
 8000f14:	240003b0 	.word	0x240003b0
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 70];
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	3346      	adds	r3, #70	; 0x46
 8000f1c:	4a14      	ldr	r2, [pc, #80]	; (8000f70 <GNSS_ParsePVTData+0x2c0>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	7a19      	ldrb	r1, [r3, #8]
 8000f22:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <GNSS_ParsePVTData+0x2c4>)
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	4413      	add	r3, r2
 8000f28:	460a      	mov	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	ddef      	ble.n	8000f18 <GNSS_ParsePVTData+0x268>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <GNSS_ParsePVTData+0x2c4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000f44:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000f68 <GNSS_ParsePVTData+0x2b8>
 8000f48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f4c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000f50:	ee17 2a90 	vmov	r2, s15
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8000f5a:	bf00      	nop
 8000f5c:	372c      	adds	r7, #44	; 0x2c
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	88e368f1 	.word	0x88e368f1
 8000f6c:	3ee4f8b5 	.word	0x3ee4f8b5
 8000f70:	240002fc 	.word	0x240002fc
 8000f74:	240003b4 	.word	0x240003b4

08000f78 <GNSS_ParseNavigatorData>:
/*!
 * Parse data to UTC time solution standard.
 * Look at: 32.17.30.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.i2cWorkingBuffer[18];
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <GNSS_ParseNavigatorData+0x64>)
 8000f82:	7e9a      	ldrb	r2, [r3, #26]
 8000f84:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <GNSS_ParseNavigatorData+0x68>)
 8000f86:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS_Handle.i2cWorkingBuffer[19];
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <GNSS_ParseNavigatorData+0x64>)
 8000f8a:	7eda      	ldrb	r2, [r3, #27]
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <GNSS_ParseNavigatorData+0x68>)
 8000f8e:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <GNSS_ParseNavigatorData+0x68>)
 8000f92:	881a      	ldrh	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS_Handle.i2cWorkingBuffer[20];
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <GNSS_ParseNavigatorData+0x64>)
 8000f9c:	7f1a      	ldrb	r2, [r3, #28]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS_Handle.i2cWorkingBuffer[21];
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <GNSS_ParseNavigatorData+0x64>)
 8000fa6:	7f5a      	ldrb	r2, [r3, #29]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS_Handle.i2cWorkingBuffer[22];
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <GNSS_ParseNavigatorData+0x64>)
 8000fb0:	7f9a      	ldrb	r2, [r3, #30]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS_Handle.i2cWorkingBuffer[23];
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <GNSS_ParseNavigatorData+0x64>)
 8000fba:	7fda      	ldrb	r2, [r3, #31]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS_Handle.i2cWorkingBuffer[24];
 8000fc2:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <GNSS_ParseNavigatorData+0x64>)
 8000fc4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	240002fc 	.word	0x240002fc
 8000fe0:	240003ac 	.word	0x240003ac

08000fe4 <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 4; ++var) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	61fb      	str	r3, [r7, #28]
 8000ff0:	e00c      	b.n	800100c <GNSS_ParsePOSLLHData+0x28>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 10];
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	330a      	adds	r3, #10
 8000ff6:	4a55      	ldr	r2, [pc, #340]	; (800114c <GNSS_ParsePOSLLHData+0x168>)
 8000ff8:	4413      	add	r3, r2
 8000ffa:	7a19      	ldrb	r1, [r3, #8]
 8000ffc:	4a54      	ldr	r2, [pc, #336]	; (8001150 <GNSS_ParsePOSLLHData+0x16c>)
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	4413      	add	r3, r2
 8001002:	460a      	mov	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3301      	adds	r3, #1
 800100a:	61fb      	str	r3, [r7, #28]
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b03      	cmp	r3, #3
 8001010:	ddef      	ble.n	8000ff2 <GNSS_ParsePOSLLHData+0xe>
	}
	GNSS->lon = iLong.iLong;
 8001012:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <GNSS_ParsePOSLLHData+0x16c>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 800101a:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <GNSS_ParsePOSLLHData+0x16c>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	ee07 3a90 	vmov	s15, r3
 8001022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001026:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001154 <GNSS_ParsePOSLLHData+0x170>
 800102a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

	for (int var = 0; var < 4; ++var) {
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
 8001038:	e00c      	b.n	8001054 <GNSS_ParsePOSLLHData+0x70>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 14];
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	330e      	adds	r3, #14
 800103e:	4a43      	ldr	r2, [pc, #268]	; (800114c <GNSS_ParsePOSLLHData+0x168>)
 8001040:	4413      	add	r3, r2
 8001042:	7a19      	ldrb	r1, [r3, #8]
 8001044:	4a42      	ldr	r2, [pc, #264]	; (8001150 <GNSS_ParsePOSLLHData+0x16c>)
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4413      	add	r3, r2
 800104a:	460a      	mov	r2, r1
 800104c:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	3301      	adds	r3, #1
 8001052:	61bb      	str	r3, [r7, #24]
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	2b03      	cmp	r3, #3
 8001058:	ddef      	ble.n	800103a <GNSS_ParsePOSLLHData+0x56>
	}
	GNSS->lat = iLong.iLong;
 800105a:	4b3d      	ldr	r3, [pc, #244]	; (8001150 <GNSS_ParsePOSLLHData+0x16c>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8001064:	4b3a      	ldr	r3, [pc, #232]	; (8001150 <GNSS_ParsePOSLLHData+0x16c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	ee07 3a90 	vmov	s15, r3
 800106c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001070:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001154 <GNSS_ParsePOSLLHData+0x170>
 8001074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	for (int var = 0; var < 4; ++var) {
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e00c      	b.n	800109e <GNSS_ParsePOSLLHData+0xba>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 18];
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3312      	adds	r3, #18
 8001088:	4a30      	ldr	r2, [pc, #192]	; (800114c <GNSS_ParsePOSLLHData+0x168>)
 800108a:	4413      	add	r3, r2
 800108c:	7a19      	ldrb	r1, [r3, #8]
 800108e:	4a30      	ldr	r2, [pc, #192]	; (8001150 <GNSS_ParsePOSLLHData+0x16c>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	4413      	add	r3, r2
 8001094:	460a      	mov	r2, r1
 8001096:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	ddef      	ble.n	8001084 <GNSS_ParsePOSLLHData+0xa0>
	}
	GNSS->height = iLong.iLong;
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <GNSS_ParsePOSLLHData+0x16c>)
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	e00c      	b.n	80010ce <GNSS_ParsePOSLLHData+0xea>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 22];
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	3316      	adds	r3, #22
 80010b8:	4a24      	ldr	r2, [pc, #144]	; (800114c <GNSS_ParsePOSLLHData+0x168>)
 80010ba:	4413      	add	r3, r2
 80010bc:	7a19      	ldrb	r1, [r3, #8]
 80010be:	4a24      	ldr	r2, [pc, #144]	; (8001150 <GNSS_ParsePOSLLHData+0x16c>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4413      	add	r3, r2
 80010c4:	460a      	mov	r2, r1
 80010c6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	3301      	adds	r3, #1
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	ddef      	ble.n	80010b4 <GNSS_ParsePOSLLHData+0xd0>
	}
	GNSS->hMSL = iLong.iLong;
 80010d4:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <GNSS_ParsePOSLLHData+0x16c>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	e00c      	b.n	80010fe <GNSS_ParsePOSLLHData+0x11a>
		uLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 26];
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	331a      	adds	r3, #26
 80010e8:	4a18      	ldr	r2, [pc, #96]	; (800114c <GNSS_ParsePOSLLHData+0x168>)
 80010ea:	4413      	add	r3, r2
 80010ec:	7a19      	ldrb	r1, [r3, #8]
 80010ee:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <GNSS_ParsePOSLLHData+0x174>)
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	460a      	mov	r2, r1
 80010f6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2b03      	cmp	r3, #3
 8001102:	ddef      	ble.n	80010e4 <GNSS_ParsePOSLLHData+0x100>
	}
	GNSS->hAcc = uLong.uLong;
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <GNSS_ParsePOSLLHData+0x174>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	for (int var = 0; var < 4; ++var) {
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	e00c      	b.n	800112e <GNSS_ParsePOSLLHData+0x14a>
		uLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 30];
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	331e      	adds	r3, #30
 8001118:	4a0c      	ldr	r2, [pc, #48]	; (800114c <GNSS_ParsePOSLLHData+0x168>)
 800111a:	4413      	add	r3, r2
 800111c:	7a19      	ldrb	r1, [r3, #8]
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <GNSS_ParsePOSLLHData+0x174>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4413      	add	r3, r2
 8001124:	460a      	mov	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	3301      	adds	r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	2b03      	cmp	r3, #3
 8001132:	ddef      	ble.n	8001114 <GNSS_ParsePOSLLHData+0x130>
	}
	GNSS->vAcc = uLong.uLong;
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <GNSS_ParsePOSLLHData+0x174>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 800113e:	bf00      	nop
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	240002fc 	.word	0x240002fc
 8001150:	240003b4 	.word	0x240003b4
 8001154:	4b189680 	.word	0x4b189680
 8001158:	240003b0 	.word	0x240003b0

0800115c <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, configUBX,
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	231c      	movs	r3, #28
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <GNSS_LoadConfig+0x4c>)
 800116c:	2142      	movs	r1, #66	; 0x42
 800116e:	f005 f843 	bl	80061f8 <HAL_I2C_Master_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 8001172:	20fa      	movs	r0, #250	; 0xfa
 8001174:	f002 f894 	bl	80032a0 <HAL_Delay>
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, setNMEA410,
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6818      	ldr	r0, [r3, #0]
 800117c:	231c      	movs	r3, #28
 800117e:	4a0b      	ldr	r2, [pc, #44]	; (80011ac <GNSS_LoadConfig+0x50>)
 8001180:	2142      	movs	r1, #66	; 0x42
 8001182:	f005 f839 	bl	80061f8 <HAL_I2C_Master_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 8001186:	20fa      	movs	r0, #250	; 0xfa
 8001188:	f002 f88a 	bl	80032a0 <HAL_Delay>
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, setGNSS,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6818      	ldr	r0, [r3, #0]
 8001190:	232c      	movs	r3, #44	; 0x2c
 8001192:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <GNSS_LoadConfig+0x54>)
 8001194:	2142      	movs	r1, #66	; 0x42
 8001196:	f005 f82f 	bl	80061f8 <HAL_I2C_Master_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 800119a:	20fa      	movs	r0, #250	; 0xfa
 800119c:	f002 f880 	bl	80032a0 <HAL_Delay>
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	080182dc 	.word	0x080182dc
 80011ac:	080182f8 	.word	0x080182f8
 80011b0:	08018314 	.word	0x08018314

080011b4 <CDC_Transmit_String>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CDC_Transmit_String(char *str) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
    uint8_t *buf = (uint8_t *)str;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	60fb      	str	r3, [r7, #12]
    uint16_t len = strlen(str);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff f8f5 	bl	80003b0 <strlen>
 80011c6:	4603      	mov	r3, r0
 80011c8:	817b      	strh	r3, [r7, #10]
    CDC_Transmit_HS(buf, len);
 80011ca:	897b      	ldrh	r3, [r7, #10]
 80011cc:	4619      	mov	r1, r3
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f012 f8ac 	bl	801332c <CDC_Transmit_HS>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <CDC_Transmit_uint8>:


void CDC_Transmit_uint8(uint8_t value) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
    uint8_t buffer[4];
    int offset = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]

    // Format the uint8_t value as a two-digit hexadecimal string
    offset += sprintf((char *)buffer, "%03u", value);
 80011ea:	79fa      	ldrb	r2, [r7, #7]
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	4911      	ldr	r1, [pc, #68]	; (8001238 <CDC_Transmit_uint8+0x5c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f013 fca4 	bl	8014b40 <siprintf>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4413      	add	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]

    // Append a newline character
    buffer[offset++] = '\r';
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	60fa      	str	r2, [r7, #12]
 8001206:	3310      	adds	r3, #16
 8001208:	443b      	add	r3, r7
 800120a:	220d      	movs	r2, #13
 800120c:	f803 2c08 	strb.w	r2, [r3, #-8]
    buffer[offset++] = '\n';
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	60fa      	str	r2, [r7, #12]
 8001216:	3310      	adds	r3, #16
 8001218:	443b      	add	r3, r7
 800121a:	220a      	movs	r2, #10
 800121c:	f803 2c08 	strb.w	r2, [r3, #-8]

    CDC_Transmit_HS(buffer, offset);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	b29a      	uxth	r2, r3
 8001224:	f107 0308 	add.w	r3, r7, #8
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f012 f87e 	bl	801332c <CDC_Transmit_HS>
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	08018190 	.word	0x08018190

0800123c <CDC_Transmit_float>:


void CDC_Transmit_float(float value) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t buffer[16];
    int offset = 0;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]

    // Format the float value as a string
    offset += sprintf((char *)buffer, "%.6f\r\n", value);
 800124a:	edd7 7a01 	vldr	s15, [r7, #4]
 800124e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001252:	f107 000c 	add.w	r0, r7, #12
 8001256:	ec53 2b17 	vmov	r2, r3, d7
 800125a:	4909      	ldr	r1, [pc, #36]	; (8001280 <CDC_Transmit_float+0x44>)
 800125c:	f013 fc70 	bl	8014b40 <siprintf>
 8001260:	4602      	mov	r2, r0
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	4413      	add	r3, r2
 8001266:	61fb      	str	r3, [r7, #28]

    CDC_Transmit_HS(buffer, offset);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	b29a      	uxth	r2, r3
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f012 f85a 	bl	801332c <CDC_Transmit_HS>
}
 8001278:	bf00      	nop
 800127a:	3720      	adds	r7, #32
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	08018198 	.word	0x08018198

08001284 <CDC_Transmit_UniqueID>:
void CDC_Transmit_UniqueID(uint8_t *uniqueID) {
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b098      	sub	sp, #96	; 0x60
 8001288:	af04      	add	r7, sp, #16
 800128a:	6078      	str	r0, [r7, #4]
    uint8_t buffer[64];
    int offset = 0;
 800128c:	2300      	movs	r3, #0
 800128e:	64fb      	str	r3, [r7, #76]	; 0x4c

    offset += sprintf((char *)buffer, "Unique ID: %04X %04X %04X %04X %04X\r\n",
                      uniqueID[0], uniqueID[1], uniqueID[2], uniqueID[3], uniqueID[4]);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	781b      	ldrb	r3, [r3, #0]
    offset += sprintf((char *)buffer, "Unique ID: %04X %04X %04X %04X %04X\r\n",
 8001294:	461c      	mov	r4, r3
                      uniqueID[0], uniqueID[1], uniqueID[2], uniqueID[3], uniqueID[4]);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3301      	adds	r3, #1
 800129a:	781b      	ldrb	r3, [r3, #0]
    offset += sprintf((char *)buffer, "Unique ID: %04X %04X %04X %04X %04X\r\n",
 800129c:	461d      	mov	r5, r3
                      uniqueID[0], uniqueID[1], uniqueID[2], uniqueID[3], uniqueID[4]);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3302      	adds	r3, #2
 80012a2:	781b      	ldrb	r3, [r3, #0]
    offset += sprintf((char *)buffer, "Unique ID: %04X %04X %04X %04X %04X\r\n",
 80012a4:	461a      	mov	r2, r3
                      uniqueID[0], uniqueID[1], uniqueID[2], uniqueID[3], uniqueID[4]);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3303      	adds	r3, #3
 80012aa:	781b      	ldrb	r3, [r3, #0]
    offset += sprintf((char *)buffer, "Unique ID: %04X %04X %04X %04X %04X\r\n",
 80012ac:	4619      	mov	r1, r3
                      uniqueID[0], uniqueID[1], uniqueID[2], uniqueID[3], uniqueID[4]);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3304      	adds	r3, #4
 80012b2:	781b      	ldrb	r3, [r3, #0]
    offset += sprintf((char *)buffer, "Unique ID: %04X %04X %04X %04X %04X\r\n",
 80012b4:	f107 000c 	add.w	r0, r7, #12
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	9101      	str	r1, [sp, #4]
 80012bc:	9200      	str	r2, [sp, #0]
 80012be:	462b      	mov	r3, r5
 80012c0:	4622      	mov	r2, r4
 80012c2:	4909      	ldr	r1, [pc, #36]	; (80012e8 <CDC_Transmit_UniqueID+0x64>)
 80012c4:	f013 fc3c 	bl	8014b40 <siprintf>
 80012c8:	4602      	mov	r2, r0
 80012ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012cc:	4413      	add	r3, r2
 80012ce:	64fb      	str	r3, [r7, #76]	; 0x4c

    CDC_Transmit_HS(buffer, offset);
 80012d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d2:	b29a      	uxth	r2, r3
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	4611      	mov	r1, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f012 f826 	bl	801332c <CDC_Transmit_HS>
}
 80012e0:	bf00      	nop
 80012e2:	3750      	adds	r7, #80	; 0x50
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bdb0      	pop	{r4, r5, r7, pc}
 80012e8:	080181a0 	.word	0x080181a0

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012f2:	f001 ff43 	bl	800317c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f6:	f000 f8e7 	bl	80014c8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80012fa:	f000 f957 	bl	80015ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fe:	f000 fd7f 	bl	8001e00 <MX_GPIO_Init>
  MX_CORDIC_Init();
 8001302:	f000 fa01 	bl	8001708 <MX_CORDIC_Init>
  MX_CRC_Init();
 8001306:	f000 fa13 	bl	8001730 <MX_CRC_Init>
  MX_FMAC_Init();
 800130a:	f000 fa33 	bl	8001774 <MX_FMAC_Init>
  MX_I2C1_Init();
 800130e:	f000 fa45 	bl	800179c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001312:	f000 fa83 	bl	800181c <MX_I2C2_Init>
  MX_I2C3_Init();
 8001316:	f000 fac1 	bl	800189c <MX_I2C3_Init>
  MX_I2C4_Init();
 800131a:	f000 faff 	bl	800191c <MX_I2C4_Init>
  MX_RNG_Init();
 800131e:	f000 fb3d 	bl	800199c <MX_RNG_Init>
  MX_SDMMC1_MMC_Init();
 8001322:	f000 fb51 	bl	80019c8 <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 8001326:	f000 fb71 	bl	8001a0c <MX_SPI1_Init>
  MX_SPI2_Init();
 800132a:	f000 fbc5 	bl	8001ab8 <MX_SPI2_Init>
  MX_SPI3_Init();
 800132e:	f000 fc19 	bl	8001b64 <MX_SPI3_Init>
  MX_SPI4_Init();
 8001332:	f000 fc6d 	bl	8001c10 <MX_SPI4_Init>
  MX_SPI6_Init();
 8001336:	f000 fcc1 	bl	8001cbc <MX_SPI6_Init>
  MX_ADC1_Init();
 800133a:	f000 f96d 	bl	8001618 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800133e:	f000 fd13 	bl	8001d68 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001342:	f00f fe7d 	bl	8011040 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001346:	f011 ff33 	bl	80131b0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
 GNSS_Init(&GNSS_Handle, &hi2c4);
 800134a:	4952      	ldr	r1, [pc, #328]	; (8001494 <main+0x1a8>)
 800134c:	4852      	ldr	r0, [pc, #328]	; (8001498 <main+0x1ac>)
 800134e:	f7ff fba9 	bl	8000aa4 <GNSS_Init>
 HAL_Delay(1000);
 8001352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001356:	f001 ffa3 	bl	80032a0 <HAL_Delay>
 GNSS_LoadConfig(&GNSS_Handle);
 800135a:	484f      	ldr	r0, [pc, #316]	; (8001498 <main+0x1ac>)
 800135c:	f7ff fefe 	bl	800115c <GNSS_LoadConfig>
 uint32_t Timer = HAL_GetTick();
 8001360:	f001 ff92 	bl	8003288 <HAL_GetTick>
 8001364:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CDC_Transmit_String("Test \r\n");
 8001366:	484d      	ldr	r0, [pc, #308]	; (800149c <main+0x1b0>)
 8001368:	f7ff ff24 	bl	80011b4 <CDC_Transmit_String>
	  HAL_Delay(500);
 800136c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001370:	f001 ff96 	bl	80032a0 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if ((HAL_GetTick() - Timer) > 1000) {
 8001374:	f001 ff88 	bl	8003288 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001382:	d9f0      	bls.n	8001366 <main+0x7a>
	 	  			GNSS_GetUniqID(&GNSS_Handle);
 8001384:	4844      	ldr	r0, [pc, #272]	; (8001498 <main+0x1ac>)
 8001386:	f7ff fc3d 	bl	8000c04 <GNSS_GetUniqID>
	 	  			GNSS_ParseBuffer(&GNSS_Handle);
 800138a:	4843      	ldr	r0, [pc, #268]	; (8001498 <main+0x1ac>)
 800138c:	f7ff fbd3 	bl	8000b36 <GNSS_ParseBuffer>
	 	  			HAL_Delay(250);
 8001390:	20fa      	movs	r0, #250	; 0xfa
 8001392:	f001 ff85 	bl	80032a0 <HAL_Delay>
	 	  			GNSS_GetPVTData(&GNSS_Handle);
 8001396:	4840      	ldr	r0, [pc, #256]	; (8001498 <main+0x1ac>)
 8001398:	f7ff fc4e 	bl	8000c38 <GNSS_GetPVTData>
	 	  			GNSS_ParseBuffer(&GNSS_Handle);
 800139c:	483e      	ldr	r0, [pc, #248]	; (8001498 <main+0x1ac>)
 800139e:	f7ff fbca 	bl	8000b36 <GNSS_ParseBuffer>
	 	  			CDC_Transmit_String("Day: %d-%d-%d \r\n");
 80013a2:	483f      	ldr	r0, [pc, #252]	; (80014a0 <main+0x1b4>)
 80013a4:	f7ff ff06 	bl	80011b4 <CDC_Transmit_String>
	 	  			CDC_Transmit_uint8(GNSS_Handle.day);
 80013a8:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <main+0x1ac>)
 80013aa:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ff14 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_uint8(GNSS_Handle.month);
 80013b4:	4b38      	ldr	r3, [pc, #224]	; (8001498 <main+0x1ac>)
 80013b6:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff ff0e 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_uint8(GNSS_Handle.year);
 80013c0:	4b35      	ldr	r3, [pc, #212]	; (8001498 <main+0x1ac>)
 80013c2:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff ff07 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_String("Time: %d:%d:%d \r\n");
 80013ce:	4835      	ldr	r0, [pc, #212]	; (80014a4 <main+0x1b8>)
 80013d0:	f7ff fef0 	bl	80011b4 <CDC_Transmit_String>
	 	  			CDC_Transmit_uint8(GNSS_Handle.hour);
 80013d4:	4b30      	ldr	r3, [pc, #192]	; (8001498 <main+0x1ac>)
 80013d6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fefe 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_uint8(GNSS_Handle.min);
 80013e0:	4b2d      	ldr	r3, [pc, #180]	; (8001498 <main+0x1ac>)
 80013e2:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fef8 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_uint8(GNSS_Handle.sec);
 80013ec:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <main+0x1ac>)
 80013ee:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fef2 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_String("Status of fix: %d \r\n");
 80013f8:	482b      	ldr	r0, [pc, #172]	; (80014a8 <main+0x1bc>)
 80013fa:	f7ff fedb 	bl	80011b4 <CDC_Transmit_String>
	 	  			CDC_Transmit_uint8(GNSS_Handle.fixType);
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <main+0x1ac>)
 8001400:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fee9 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_String("Latitude: %f \r\n");
 800140a:	4828      	ldr	r0, [pc, #160]	; (80014ac <main+0x1c0>)
 800140c:	f7ff fed2 	bl	80011b4 <CDC_Transmit_String>
	 	  			CDC_Transmit_uint8(GNSS_Handle.fLat);
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <main+0x1ac>)
 8001412:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8001416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141a:	edc7 7a01 	vstr	s15, [r7, #4]
 800141e:	793b      	ldrb	r3, [r7, #4]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff feda 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_String("Longitude: %f \r\n");
 8001428:	4821      	ldr	r0, [pc, #132]	; (80014b0 <main+0x1c4>)
 800142a:	f7ff fec3 	bl	80011b4 <CDC_Transmit_String>
	 	  			CDC_Transmit_float((float) GNSS_Handle.lon / 10000000.0);
 800142e:	4b1a      	ldr	r3, [pc, #104]	; (8001498 <main+0x1ac>)
 8001430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143a:	eddf 6a1e 	vldr	s13, [pc, #120]	; 80014b4 <main+0x1c8>
 800143e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001442:	eeb0 0a47 	vmov.f32	s0, s14
 8001446:	f7ff fef9 	bl	800123c <CDC_Transmit_float>
	 	  			CDC_Transmit_String("Height above ellipsoid: %d \r\n");
 800144a:	481b      	ldr	r0, [pc, #108]	; (80014b8 <main+0x1cc>)
 800144c:	f7ff feb2 	bl	80011b4 <CDC_Transmit_String>
	 	  			CDC_Transmit_uint8(GNSS_Handle.height);
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <main+0x1ac>)
 8001452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001456:	b2db      	uxtb	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff febf 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_String("Height above mean sea level: %d \r\n");
 800145e:	4817      	ldr	r0, [pc, #92]	; (80014bc <main+0x1d0>)
 8001460:	f7ff fea8 	bl	80011b4 <CDC_Transmit_String>
	 	  			CDC_Transmit_uint8(GNSS_Handle.hMSL);
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <main+0x1ac>)
 8001466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff feb5 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_String("Ground Speed (2-D): %d \r\n");
 8001472:	4813      	ldr	r0, [pc, #76]	; (80014c0 <main+0x1d4>)
 8001474:	f7ff fe9e 	bl	80011b4 <CDC_Transmit_String>
	 	  			CDC_Transmit_uint8(GNSS_Handle.gSpeed);
 8001478:	4b07      	ldr	r3, [pc, #28]	; (8001498 <main+0x1ac>)
 800147a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff feab 	bl	80011dc <CDC_Transmit_uint8>
	 	  			CDC_Transmit_UniqueID(GNSS_Handle.uniqueID);
 8001486:	480f      	ldr	r0, [pc, #60]	; (80014c4 <main+0x1d8>)
 8001488:	f7ff fefc 	bl	8001284 <CDC_Transmit_UniqueID>
	 	  			Timer = HAL_GetTick();
 800148c:	f001 fefc 	bl	8003288 <HAL_GetTick>
 8001490:	60f8      	str	r0, [r7, #12]
	  CDC_Transmit_String("Test \r\n");
 8001492:	e768      	b.n	8001366 <main+0x7a>
 8001494:	24000658 	.word	0x24000658
 8001498:	240003b8 	.word	0x240003b8
 800149c:	080181c8 	.word	0x080181c8
 80014a0:	080181d0 	.word	0x080181d0
 80014a4:	080181e4 	.word	0x080181e4
 80014a8:	080181f8 	.word	0x080181f8
 80014ac:	08018210 	.word	0x08018210
 80014b0:	08018220 	.word	0x08018220
 80014b4:	4b189680 	.word	0x4b189680
 80014b8:	08018234 	.word	0x08018234
 80014bc:	08018254 	.word	0x08018254
 80014c0:	08018278 	.word	0x08018278
 80014c4:	240003bc 	.word	0x240003bc

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b09c      	sub	sp, #112	; 0x70
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	224c      	movs	r2, #76	; 0x4c
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f013 fb95 	bl	8014c06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	1d3b      	adds	r3, r7, #4
 80014de:	2220      	movs	r2, #32
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f013 fb8f 	bl	8014c06 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014e8:	2002      	movs	r0, #2
 80014ea:	f008 ff37 	bl	800a35c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014ee:	2300      	movs	r3, #0
 80014f0:	603b      	str	r3, [r7, #0]
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <SystemClock_Config+0xe0>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014fa:	4a2b      	ldr	r2, [pc, #172]	; (80015a8 <SystemClock_Config+0xe0>)
 80014fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001500:	6193      	str	r3, [r2, #24]
 8001502:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <SystemClock_Config+0xe0>)
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800150e:	bf00      	nop
 8001510:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <SystemClock_Config+0xe0>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800151c:	d1f8      	bne.n	8001510 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 800151e:	2322      	movs	r3, #34	; 0x22
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001522:	2301      	movs	r3, #1
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001526:	2340      	movs	r3, #64	; 0x40
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800152a:	2301      	movs	r3, #1
 800152c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001532:	2300      	movs	r3, #0
 8001534:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001536:	2304      	movs	r3, #4
 8001538:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800153a:	230c      	movs	r3, #12
 800153c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 3;
 800153e:	2303      	movs	r3, #3
 8001540:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001546:	2302      	movs	r3, #2
 8001548:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800154a:	230c      	movs	r3, #12
 800154c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800154e:	2300      	movs	r3, #0
 8001550:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155a:	4618      	mov	r0, r3
 800155c:	f008 ff48 	bl	800a3f0 <HAL_RCC_OscConfig>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001566:	f000 fd11 	bl	8001f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	233f      	movs	r3, #63	; 0x3f
 800156c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2303      	movs	r3, #3
 8001570:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800157a:	2340      	movs	r3, #64	; 0x40
 800157c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800157e:	2340      	movs	r3, #64	; 0x40
 8001580:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001582:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001586:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2101      	movs	r1, #1
 8001590:	4618      	mov	r0, r3
 8001592:	f009 fb07 	bl	800aba4 <HAL_RCC_ClockConfig>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 800159c:	f000 fcf6 	bl	8001f8c <Error_Handler>
  }
}
 80015a0:	bf00      	nop
 80015a2:	3770      	adds	r7, #112	; 0x70
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	58024800 	.word	0x58024800

080015ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0ae      	sub	sp, #184	; 0xb8
 80015b0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b2:	463b      	mov	r3, r7
 80015b4:	22b8      	movs	r2, #184	; 0xb8
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f013 fb24 	bl	8014c06 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <PeriphCommonClock_Config+0x68>)
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80015c8:	2304      	movs	r3, #4
 80015ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80015cc:	230c      	movs	r3, #12
 80015ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 80015d0:	2305      	movs	r3, #5
 80015d2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80015dc:	23c0      	movs	r3, #192	; 0xc0
 80015de:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80015e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ec:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 80015ee:	2300      	movs	r3, #0
 80015f0:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4618      	mov	r0, r3
 80015fc:	f009 fe5e 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001606:	f000 fcc1 	bl	8001f8c <Error_Handler>
  }
}
 800160a:	bf00      	nop
 800160c:	37b8      	adds	r7, #184	; 0xb8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	80090000 	.word	0x80090000

08001618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	; 0x30
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800162a:	463b      	mov	r3, r7
 800162c:	2224      	movs	r2, #36	; 0x24
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f013 fae8 	bl	8014c06 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001638:	4a31      	ldr	r2, [pc, #196]	; (8001700 <MX_ADC1_Init+0xe8>)
 800163a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800163c:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <MX_ADC1_Init+0xe4>)
 800163e:	2200      	movs	r2, #0
 8001640:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001642:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001648:	4b2c      	ldr	r3, [pc, #176]	; (80016fc <MX_ADC1_Init+0xe4>)
 800164a:	2200      	movs	r2, #0
 800164c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800164e:	4b2b      	ldr	r3, [pc, #172]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001650:	2204      	movs	r2, #4
 8001652:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001654:	4b29      	ldr	r3, [pc, #164]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001656:	2200      	movs	r2, #0
 8001658:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800165a:	4b28      	ldr	r3, [pc, #160]	; (80016fc <MX_ADC1_Init+0xe4>)
 800165c:	2200      	movs	r2, #0
 800165e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001660:	4b26      	ldr	r3, [pc, #152]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001662:	2201      	movs	r2, #1
 8001664:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001666:	4b25      	ldr	r3, [pc, #148]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001674:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001676:	2200      	movs	r2, #0
 8001678:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <MX_ADC1_Init+0xe4>)
 800167c:	2200      	movs	r2, #0
 800167e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001680:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001682:	2200      	movs	r2, #0
 8001684:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001688:	2200      	movs	r2, #0
 800168a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <MX_ADC1_Init+0xe4>)
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001694:	4819      	ldr	r0, [pc, #100]	; (80016fc <MX_ADC1_Init+0xe4>)
 8001696:	f002 f86d 	bl	8003774 <HAL_ADC_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80016a0:	f000 fc74 	bl	8001f8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80016a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4813      	ldr	r0, [pc, #76]	; (80016fc <MX_ADC1_Init+0xe4>)
 80016b0:	f003 f8a8 	bl	8004804 <HAL_ADCEx_MultiModeConfigChannel>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80016ba:	f000 fc67 	bl	8001f8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016be:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_ADC1_Init+0xec>)
 80016c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c2:	2306      	movs	r3, #6
 80016c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80016ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016d0:	2304      	movs	r3, #4
 80016d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	4619      	mov	r1, r3
 80016e2:	4806      	ldr	r0, [pc, #24]	; (80016fc <MX_ADC1_Init+0xe4>)
 80016e4:	f002 fa4e 	bl	8003b84 <HAL_ADC_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80016ee:	f000 fc4d 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016f2:	bf00      	nop
 80016f4:	3730      	adds	r7, #48	; 0x30
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	24000468 	.word	0x24000468
 8001700:	40022000 	.word	0x40022000
 8001704:	10c00010 	.word	0x10c00010

08001708 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_CORDIC_Init+0x20>)
 800170e:	4a07      	ldr	r2, [pc, #28]	; (800172c <MX_CORDIC_Init+0x24>)
 8001710:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_CORDIC_Init+0x20>)
 8001714:	f003 f958 	bl	80049c8 <HAL_CORDIC_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800171e:	f000 fc35 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	240004d8 	.word	0x240004d8
 800172c:	48024400 	.word	0x48024400

08001730 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001734:	4b0d      	ldr	r3, [pc, #52]	; (800176c <MX_CRC_Init+0x3c>)
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <MX_CRC_Init+0x40>)
 8001738:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_CRC_Init+0x3c>)
 800173c:	2200      	movs	r2, #0
 800173e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_CRC_Init+0x3c>)
 8001742:	2200      	movs	r2, #0
 8001744:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_CRC_Init+0x3c>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_CRC_Init+0x3c>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_CRC_Init+0x3c>)
 8001754:	2201      	movs	r2, #1
 8001756:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_CRC_Init+0x3c>)
 800175a:	f003 fa77 	bl	8004c4c <HAL_CRC_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001764:	f000 fc12 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	24000500 	.word	0x24000500
 8001770:	58024c00 	.word	0x58024c00

08001774 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001778:	4b06      	ldr	r3, [pc, #24]	; (8001794 <MX_FMAC_Init+0x20>)
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <MX_FMAC_Init+0x24>)
 800177c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	; (8001794 <MX_FMAC_Init+0x20>)
 8001780:	f004 f9cc 	bl	8005b1c <HAL_FMAC_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 800178a:	f000 fbff 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	24000524 	.word	0x24000524
 8001798:	48024000 	.word	0x48024000

0800179c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <MX_I2C1_Init+0x74>)
 80017a2:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <MX_I2C1_Init+0x78>)
 80017a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80017a6:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <MX_I2C1_Init+0x74>)
 80017a8:	4a1b      	ldr	r2, [pc, #108]	; (8001818 <MX_I2C1_Init+0x7c>)
 80017aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 238;
 80017ac:	4b18      	ldr	r3, [pc, #96]	; (8001810 <MX_I2C1_Init+0x74>)
 80017ae:	22ee      	movs	r2, #238	; 0xee
 80017b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b2:	4b17      	ldr	r3, [pc, #92]	; (8001810 <MX_I2C1_Init+0x74>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b8:	4b15      	ldr	r3, [pc, #84]	; (8001810 <MX_I2C1_Init+0x74>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017be:	4b14      	ldr	r3, [pc, #80]	; (8001810 <MX_I2C1_Init+0x74>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <MX_I2C1_Init+0x74>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <MX_I2C1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017d0:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <MX_I2C1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017d6:	480e      	ldr	r0, [pc, #56]	; (8001810 <MX_I2C1_Init+0x74>)
 80017d8:	f004 fc0e 	bl	8005ff8 <HAL_I2C_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017e2:	f000 fbd3 	bl	8001f8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017e6:	2100      	movs	r1, #0
 80017e8:	4809      	ldr	r0, [pc, #36]	; (8001810 <MX_I2C1_Init+0x74>)
 80017ea:	f006 fb3d 	bl	8007e68 <HAL_I2CEx_ConfigAnalogFilter>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017f4:	f000 fbca 	bl	8001f8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017f8:	2100      	movs	r1, #0
 80017fa:	4805      	ldr	r0, [pc, #20]	; (8001810 <MX_I2C1_Init+0x74>)
 80017fc:	f006 fb7f 	bl	8007efe <HAL_I2CEx_ConfigDigitalFilter>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001806:	f000 fbc1 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	2400055c 	.word	0x2400055c
 8001814:	40005400 	.word	0x40005400
 8001818:	00707cbb 	.word	0x00707cbb

0800181c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <MX_I2C2_Init+0x74>)
 8001822:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <MX_I2C2_Init+0x78>)
 8001824:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001826:	4b1a      	ldr	r3, [pc, #104]	; (8001890 <MX_I2C2_Init+0x74>)
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <MX_I2C2_Init+0x7c>)
 800182a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 238;
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <MX_I2C2_Init+0x74>)
 800182e:	22ee      	movs	r2, #238	; 0xee
 8001830:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001832:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_I2C2_Init+0x74>)
 8001834:	2201      	movs	r2, #1
 8001836:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <MX_I2C2_Init+0x74>)
 800183a:	2200      	movs	r2, #0
 800183c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800183e:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_I2C2_Init+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001844:	4b12      	ldr	r3, [pc, #72]	; (8001890 <MX_I2C2_Init+0x74>)
 8001846:	2200      	movs	r2, #0
 8001848:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800184a:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_I2C2_Init+0x74>)
 800184c:	2200      	movs	r2, #0
 800184e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_I2C2_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001856:	480e      	ldr	r0, [pc, #56]	; (8001890 <MX_I2C2_Init+0x74>)
 8001858:	f004 fbce 	bl	8005ff8 <HAL_I2C_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001862:	f000 fb93 	bl	8001f8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001866:	2100      	movs	r1, #0
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <MX_I2C2_Init+0x74>)
 800186a:	f006 fafd 	bl	8007e68 <HAL_I2CEx_ConfigAnalogFilter>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001874:	f000 fb8a 	bl	8001f8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001878:	2100      	movs	r1, #0
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_I2C2_Init+0x74>)
 800187c:	f006 fb3f 	bl	8007efe <HAL_I2CEx_ConfigDigitalFilter>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001886:	f000 fb81 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	240005b0 	.word	0x240005b0
 8001894:	40005800 	.word	0x40005800
 8001898:	00707cbb 	.word	0x00707cbb

0800189c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_I2C3_Init+0x74>)
 80018a2:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <MX_I2C3_Init+0x78>)
 80018a4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_I2C3_Init+0x74>)
 80018a8:	4a1b      	ldr	r2, [pc, #108]	; (8001918 <MX_I2C3_Init+0x7c>)
 80018aa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 238;
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_I2C3_Init+0x74>)
 80018ae:	22ee      	movs	r2, #238	; 0xee
 80018b0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <MX_I2C3_Init+0x74>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b8:	4b15      	ldr	r3, [pc, #84]	; (8001910 <MX_I2C3_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80018be:	4b14      	ldr	r3, [pc, #80]	; (8001910 <MX_I2C3_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <MX_I2C3_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018ca:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_I2C3_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <MX_I2C3_Init+0x74>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018d6:	480e      	ldr	r0, [pc, #56]	; (8001910 <MX_I2C3_Init+0x74>)
 80018d8:	f004 fb8e 	bl	8005ff8 <HAL_I2C_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018e2:	f000 fb53 	bl	8001f8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018e6:	2100      	movs	r1, #0
 80018e8:	4809      	ldr	r0, [pc, #36]	; (8001910 <MX_I2C3_Init+0x74>)
 80018ea:	f006 fabd 	bl	8007e68 <HAL_I2CEx_ConfigAnalogFilter>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018f4:	f000 fb4a 	bl	8001f8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018f8:	2100      	movs	r1, #0
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_I2C3_Init+0x74>)
 80018fc:	f006 faff 	bl	8007efe <HAL_I2CEx_ConfigDigitalFilter>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001906:	f000 fb41 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	24000604 	.word	0x24000604
 8001914:	40005c00 	.word	0x40005c00
 8001918:	00707cbb 	.word	0x00707cbb

0800191c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001920:	4b1b      	ldr	r3, [pc, #108]	; (8001990 <MX_I2C4_Init+0x74>)
 8001922:	4a1c      	ldr	r2, [pc, #112]	; (8001994 <MX_I2C4_Init+0x78>)
 8001924:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <MX_I2C4_Init+0x74>)
 8001928:	4a1b      	ldr	r2, [pc, #108]	; (8001998 <MX_I2C4_Init+0x7c>)
 800192a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800192c:	4b18      	ldr	r3, [pc, #96]	; (8001990 <MX_I2C4_Init+0x74>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001932:	4b17      	ldr	r3, [pc, #92]	; (8001990 <MX_I2C4_Init+0x74>)
 8001934:	2201      	movs	r2, #1
 8001936:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001938:	4b15      	ldr	r3, [pc, #84]	; (8001990 <MX_I2C4_Init+0x74>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800193e:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_I2C4_Init+0x74>)
 8001940:	2200      	movs	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_I2C4_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <MX_I2C4_Init+0x74>)
 800194c:	2200      	movs	r2, #0
 800194e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001950:	4b0f      	ldr	r3, [pc, #60]	; (8001990 <MX_I2C4_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001956:	480e      	ldr	r0, [pc, #56]	; (8001990 <MX_I2C4_Init+0x74>)
 8001958:	f004 fb4e 	bl	8005ff8 <HAL_I2C_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001962:	f000 fb13 	bl	8001f8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001966:	2100      	movs	r1, #0
 8001968:	4809      	ldr	r0, [pc, #36]	; (8001990 <MX_I2C4_Init+0x74>)
 800196a:	f006 fa7d 	bl	8007e68 <HAL_I2CEx_ConfigAnalogFilter>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001974:	f000 fb0a 	bl	8001f8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001978:	2100      	movs	r1, #0
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_I2C4_Init+0x74>)
 800197c:	f006 fabf 	bl	8007efe <HAL_I2CEx_ConfigDigitalFilter>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001986:	f000 fb01 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	24000658 	.word	0x24000658
 8001994:	58001c00 	.word	0x58001c00
 8001998:	00707cbb 	.word	0x00707cbb

0800199c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <MX_RNG_Init+0x24>)
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <MX_RNG_Init+0x28>)
 80019a4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_RNG_Init+0x24>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_RNG_Init+0x24>)
 80019ae:	f00c f86b 	bl	800da88 <HAL_RNG_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80019b8:	f000 fae8 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	240006ac 	.word	0x240006ac
 80019c4:	48021800 	.word	0x48021800

080019c8 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 80019cc:	4b0d      	ldr	r3, [pc, #52]	; (8001a04 <MX_SDMMC1_MMC_Init+0x3c>)
 80019ce:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <MX_SDMMC1_MMC_Init+0x40>)
 80019d0:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <MX_SDMMC1_MMC_Init+0x3c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <MX_SDMMC1_MMC_Init+0x3c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <MX_SDMMC1_MMC_Init+0x3c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80019e4:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <MX_SDMMC1_MMC_Init+0x3c>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <MX_SDMMC1_MMC_Init+0x3c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 80019f0:	4804      	ldr	r0, [pc, #16]	; (8001a04 <MX_SDMMC1_MMC_Init+0x3c>)
 80019f2:	f006 fad0 	bl	8007f96 <HAL_MMC_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_SDMMC1_MMC_Init+0x38>
  {
    Error_Handler();
 80019fc:	f000 fac6 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	240006c0 	.word	0x240006c0
 8001a08:	52007000 	.word	0x52007000

08001a0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a12:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <MX_SPI1_Init+0xa8>)
 8001a14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a18:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a1e:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a26:	2203      	movs	r2, #3
 8001a28:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a2a:	4b21      	ldr	r3, [pc, #132]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001a36:	4b1e      	ldr	r3, [pc, #120]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a38:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001a3c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a3e:	4b1c      	ldr	r3, [pc, #112]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001a56:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a62:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_SPI1_Init+0xa4>)
 8001a9c:	f00c f898 	bl	800dbd0 <HAL_SPI_Init>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8001aa6:	f000 fa71 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	24000934 	.word	0x24000934
 8001ab4:	40013000 	.word	0x40013000

08001ab8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001abc:	4b27      	ldr	r3, [pc, #156]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001abe:	4a28      	ldr	r2, [pc, #160]	; (8001b60 <MX_SPI2_Init+0xa8>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001ac4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ac8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001aca:	4b24      	ldr	r3, [pc, #144]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001ae4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ae8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001b02:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b0e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001b3a:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001b40:	4b06      	ldr	r3, [pc, #24]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b46:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_SPI2_Init+0xa4>)
 8001b48:	f00c f842 	bl	800dbd0 <HAL_SPI_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001b52:	f000 fa1b 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	240009bc 	.word	0x240009bc
 8001b60:	40003800 	.word	0x40003800

08001b64 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001b68:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001b6a:	4a28      	ldr	r2, [pc, #160]	; (8001c0c <MX_SPI3_Init+0xa8>)
 8001b6c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001b70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001b74:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001b76:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001b7c:	4b22      	ldr	r3, [pc, #136]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001b7e:	2203      	movs	r2, #3
 8001b80:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b82:	4b21      	ldr	r3, [pc, #132]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b88:	4b1f      	ldr	r3, [pc, #124]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001b8e:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001b90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b94:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b9c:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ba2:	4b19      	ldr	r3, [pc, #100]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ba8:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001bae:	4b16      	ldr	r3, [pc, #88]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001bb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_SPI3_Init+0xa4>)
 8001bf4:	f00b ffec 	bl	800dbd0 <HAL_SPI_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8001bfe:	f000 f9c5 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	24000a44 	.word	0x24000a44
 8001c0c:	40003c00 	.word	0x40003c00

08001c10 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c16:	4a28      	ldr	r2, [pc, #160]	; (8001cb8 <MX_SPI4_Init+0xa8>)
 8001c18:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c20:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c28:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c40:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c42:	4b1c      	ldr	r3, [pc, #112]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c48:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c66:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_SPI4_Init+0xa4>)
 8001ca0:	f00b ff96 	bl	800dbd0 <HAL_SPI_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8001caa:	f000 f96f 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	24000acc 	.word	0x24000acc
 8001cb8:	40013400 	.word	0x40013400

08001cbc <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001cc2:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <MX_SPI6_Init+0xa8>)
 8001cc4:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8001cc6:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001cc8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001ccc:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 8001cd4:	4b22      	ldr	r3, [pc, #136]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001cd6:	2203      	movs	r2, #3
 8001cd8:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cda:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ce6:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001ce8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001cec:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cfa:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d00:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001d06:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d0c:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d14:	4b12      	ldr	r3, [pc, #72]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d20:	4b0f      	ldr	r3, [pc, #60]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d32:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d38:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d3e:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8001d4a:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_SPI6_Init+0xa4>)
 8001d4c:	f00b ff40 	bl	800dbd0 <HAL_SPI_Init>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8001d56:	f000 f919 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8001d5a:	bf00      	nop
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	24000b54 	.word	0x24000b54
 8001d64:	58001400 	.word	0x58001400

08001d68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d6c:	4b22      	ldr	r3, [pc, #136]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d6e:	4a23      	ldr	r2, [pc, #140]	; (8001dfc <MX_USART2_UART_Init+0x94>)
 8001d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d72:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7a:	4b1f      	ldr	r3, [pc, #124]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d8e:	220c      	movs	r2, #12
 8001d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d92:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001daa:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db0:	4811      	ldr	r0, [pc, #68]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001db2:	f00c f84c 	bl	800de4e <HAL_UART_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001dbc:	f000 f8e6 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001dc4:	f00d f953 	bl	800f06e <HAL_UARTEx_SetTxFifoThreshold>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001dce:	f000 f8dd 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4808      	ldr	r0, [pc, #32]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001dd6:	f00d f988 	bl	800f0ea <HAL_UARTEx_SetRxFifoThreshold>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001de0:	f000 f8d4 	bl	8001f8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_USART2_UART_Init+0x90>)
 8001de6:	f00d f909 	bl	800effc <HAL_UARTEx_DisableFifoMode>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001df0:	f000 f8cc 	bl	8001f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	24000bdc 	.word	0x24000bdc
 8001dfc:	40004400 	.word	0x40004400

08001e00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08c      	sub	sp, #48	; 0x30
 8001e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	609a      	str	r2, [r3, #8]
 8001e12:	60da      	str	r2, [r3, #12]
 8001e14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e16:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e1c:	4a55      	ldr	r2, [pc, #340]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e1e:	f043 0304 	orr.w	r3, r3, #4
 8001e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e26:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e2c:	f003 0304 	and.w	r3, r3, #4
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e34:	4b4f      	ldr	r3, [pc, #316]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e3a:	4a4e      	ldr	r2, [pc, #312]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e3c:	f043 0310 	orr.w	r3, r3, #16
 8001e40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e44:	4b4b      	ldr	r3, [pc, #300]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4b48      	ldr	r3, [pc, #288]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e58:	4a46      	ldr	r2, [pc, #280]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e5a:	f043 0302 	orr.w	r3, r3, #2
 8001e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e62:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e70:	4b40      	ldr	r3, [pc, #256]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e76:	4a3f      	ldr	r2, [pc, #252]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e80:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e8e:	4b39      	ldr	r3, [pc, #228]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e94:	4a37      	ldr	r2, [pc, #220]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001e96:	f043 0308 	orr.w	r3, r3, #8
 8001e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9e:	4b35      	ldr	r3, [pc, #212]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	f003 0308 	and.w	r3, r3, #8
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eac:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb2:	4a30      	ldr	r2, [pc, #192]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ebc:	4b2d      	ldr	r3, [pc, #180]	; (8001f74 <MX_GPIO_Init+0x174>)
 8001ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed0:	4829      	ldr	r0, [pc, #164]	; (8001f78 <MX_GPIO_Init+0x178>)
 8001ed2:	f004 f877 	bl	8005fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_10
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f44f 415f 	mov.w	r1, #57088	; 0xdf00
 8001edc:	4827      	ldr	r0, [pc, #156]	; (8001f7c <MX_GPIO_Init+0x17c>)
 8001ede:	f004 f871 	bl	8005fc4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ee2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	481f      	ldr	r0, [pc, #124]	; (8001f78 <MX_GPIO_Init+0x178>)
 8001efc:	f003 feba 	bl	8005c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_7;
 8001f00:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8001f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 031c 	add.w	r3, r7, #28
 8001f12:	4619      	mov	r1, r3
 8001f14:	481a      	ldr	r0, [pc, #104]	; (8001f80 <MX_GPIO_Init+0x180>)
 8001f16:	f003 fead 	bl	8005c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD11 PD14 PD10
                           PD9 PD8 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_10
 8001f1a:	f44f 435f 	mov.w	r3, #57088	; 0xdf00
 8001f1e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	4812      	ldr	r0, [pc, #72]	; (8001f7c <MX_GPIO_Init+0x17c>)
 8001f34:	f003 fe9e 	bl	8005c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_12;
 8001f38:	f243 0303 	movw	r3, #12291	; 0x3003
 8001f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	480d      	ldr	r0, [pc, #52]	; (8001f84 <MX_GPIO_Init+0x184>)
 8001f4e:	f003 fe91 	bl	8005c74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE12 PE9 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_13;
 8001f52:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001f56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	4619      	mov	r1, r3
 8001f66:	4808      	ldr	r0, [pc, #32]	; (8001f88 <MX_GPIO_Init+0x188>)
 8001f68:	f003 fe84 	bl	8005c74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f6c:	bf00      	nop
 8001f6e:	3730      	adds	r7, #48	; 0x30
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	58024400 	.word	0x58024400
 8001f78:	58020800 	.word	0x58020800
 8001f7c:	58020c00 	.word	0x58020c00
 8001f80:	58020000 	.word	0x58020000
 8001f84:	58020400 	.word	0x58020400
 8001f88:	58021000 	.word	0x58021000

08001f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f90:	b672      	cpsid	i
}
 8001f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <Error_Handler+0x8>
	...

08001f98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_MspInit+0x30>)
 8001fa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fa4:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <HAL_MspInit+0x30>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_MspInit+0x30>)
 8001fb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	58024400 	.word	0x58024400

08001fcc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08a      	sub	sp, #40	; 0x28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd4:	f107 0314 	add.w	r3, r7, #20
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	60da      	str	r2, [r3, #12]
 8001fe2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a18      	ldr	r2, [pc, #96]	; (800204c <HAL_ADC_MspInit+0x80>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d129      	bne.n	8002042 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001fee:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_ADC_MspInit+0x84>)
 8001ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ff4:	4a16      	ldr	r2, [pc, #88]	; (8002050 <HAL_ADC_MspInit+0x84>)
 8001ff6:	f043 0320 	orr.w	r3, r3, #32
 8001ffa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <HAL_ADC_MspInit+0x84>)
 8002000:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002004:	f003 0320 	and.w	r3, r3, #32
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800200c:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_ADC_MspInit+0x84>)
 800200e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002012:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <HAL_ADC_MspInit+0x84>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_ADC_MspInit+0x84>)
 800201e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002022:	f003 0304 	and.w	r3, r3, #4
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|BATADC1_Pin;
 800202a:	2311      	movs	r3, #17
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800202e:	2303      	movs	r3, #3
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4805      	ldr	r0, [pc, #20]	; (8002054 <HAL_ADC_MspInit+0x88>)
 800203e:	f003 fe19 	bl	8005c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	; 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40022000 	.word	0x40022000
 8002050:	58024400 	.word	0x58024400
 8002054:	58020800 	.word	0x58020800

08002058 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <HAL_CORDIC_MspInit+0x3c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10e      	bne.n	8002088 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800206a:	4b0b      	ldr	r3, [pc, #44]	; (8002098 <HAL_CORDIC_MspInit+0x40>)
 800206c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002070:	4a09      	ldr	r2, [pc, #36]	; (8002098 <HAL_CORDIC_MspInit+0x40>)
 8002072:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002076:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800207a:	4b07      	ldr	r3, [pc, #28]	; (8002098 <HAL_CORDIC_MspInit+0x40>)
 800207c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8002088:	bf00      	nop
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	48024400 	.word	0x48024400
 8002098:	58024400 	.word	0x58024400

0800209c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <HAL_CRC_MspInit+0x3c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d10e      	bne.n	80020cc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_CRC_MspInit+0x40>)
 80020b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b4:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_CRC_MspInit+0x40>)
 80020b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <HAL_CRC_MspInit+0x40>)
 80020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	58024c00 	.word	0x58024c00
 80020dc:	58024400 	.word	0x58024400

080020e0 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0b      	ldr	r2, [pc, #44]	; (800211c <HAL_FMAC_MspInit+0x3c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d10e      	bne.n	8002110 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_FMAC_MspInit+0x40>)
 80020f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80020f8:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_FMAC_MspInit+0x40>)
 80020fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fe:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <HAL_FMAC_MspInit+0x40>)
 8002104:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	48024000 	.word	0x48024000
 8002120:	58024400 	.word	0x58024400

08002124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0c0      	sub	sp, #256	; 0x100
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800213c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002140:	22b8      	movs	r2, #184	; 0xb8
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f012 fd5e 	bl	8014c06 <memset>
  if(hi2c->Instance==I2C1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4abf      	ldr	r2, [pc, #764]	; (800244c <HAL_I2C_MspInit+0x328>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d147      	bne.n	80021e4 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002154:	f04f 0208 	mov.w	r2, #8
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002166:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800216a:	4618      	mov	r0, r3
 800216c:	f009 f8a6 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002176:	f7ff ff09 	bl	8001f8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800217a:	4bb5      	ldr	r3, [pc, #724]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002180:	4ab3      	ldr	r2, [pc, #716]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002182:	f043 0302 	orr.w	r3, r3, #2
 8002186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800218a:	4bb1      	ldr	r3, [pc, #708]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 800218c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002198:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800219c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a0:	2312      	movs	r3, #18
 80021a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021b2:	2304      	movs	r3, #4
 80021b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021bc:	4619      	mov	r1, r3
 80021be:	48a5      	ldr	r0, [pc, #660]	; (8002454 <HAL_I2C_MspInit+0x330>)
 80021c0:	f003 fd58 	bl	8005c74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021c4:	4ba2      	ldr	r3, [pc, #648]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80021c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021ca:	4aa1      	ldr	r2, [pc, #644]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80021cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80021d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021d4:	4b9e      	ldr	r3, [pc, #632]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80021d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80021e2:	e12e      	b.n	8002442 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a9b      	ldr	r2, [pc, #620]	; (8002458 <HAL_I2C_MspInit+0x334>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d147      	bne.n	800227e <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80021ee:	f04f 0208 	mov.w	r2, #8
 80021f2:	f04f 0300 	mov.w	r3, #0
 80021f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80021fa:	2300      	movs	r3, #0
 80021fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002200:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002204:	4618      	mov	r0, r3
 8002206:	f009 f859 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8002210:	f7ff febc 	bl	8001f8c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002214:	4b8e      	ldr	r3, [pc, #568]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800221a:	4a8d      	ldr	r2, [pc, #564]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 800221c:	f043 0302 	orr.w	r3, r3, #2
 8002220:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002224:	4b8a      	ldr	r3, [pc, #552]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	627b      	str	r3, [r7, #36]	; 0x24
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002232:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002236:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800223a:	2312      	movs	r3, #18
 800223c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002240:	2300      	movs	r3, #0
 8002242:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002246:	2300      	movs	r3, #0
 8002248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800224c:	2304      	movs	r3, #4
 800224e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002252:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002256:	4619      	mov	r1, r3
 8002258:	487e      	ldr	r0, [pc, #504]	; (8002454 <HAL_I2C_MspInit+0x330>)
 800225a:	f003 fd0b 	bl	8005c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800225e:	4b7c      	ldr	r3, [pc, #496]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002264:	4a7a      	ldr	r2, [pc, #488]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002266:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800226a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800226e:	4b78      	ldr	r3, [pc, #480]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002270:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002278:	623b      	str	r3, [r7, #32]
 800227a:	6a3b      	ldr	r3, [r7, #32]
}
 800227c:	e0e1      	b.n	8002442 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C3)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a76      	ldr	r2, [pc, #472]	; (800245c <HAL_I2C_MspInit+0x338>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d16c      	bne.n	8002362 <HAL_I2C_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002288:	f04f 0208 	mov.w	r2, #8
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800229e:	4618      	mov	r0, r3
 80022a0:	f009 f80c 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 80022aa:	f7ff fe6f 	bl	8001f8c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ae:	4b68      	ldr	r3, [pc, #416]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80022b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b4:	4a66      	ldr	r2, [pc, #408]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022be:	4b64      	ldr	r3, [pc, #400]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80022c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022cc:	4b60      	ldr	r3, [pc, #384]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80022ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d2:	4a5f      	ldr	r2, [pc, #380]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022dc:	4b5c      	ldr	r3, [pc, #368]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80022de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022f2:	2312      	movs	r3, #18
 80022f4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002304:	2304      	movs	r3, #4
 8002306:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800230e:	4619      	mov	r1, r3
 8002310:	4853      	ldr	r0, [pc, #332]	; (8002460 <HAL_I2C_MspInit+0x33c>)
 8002312:	f003 fcaf 	bl	8005c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800231a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800231e:	2312      	movs	r3, #18
 8002320:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232a:	2300      	movs	r3, #0
 800232c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002330:	2304      	movs	r3, #4
 8002332:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002336:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800233a:	4619      	mov	r1, r3
 800233c:	4849      	ldr	r0, [pc, #292]	; (8002464 <HAL_I2C_MspInit+0x340>)
 800233e:	f003 fc99 	bl	8005c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002342:	4b43      	ldr	r3, [pc, #268]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002344:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002348:	4a41      	ldr	r2, [pc, #260]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 800234a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800234e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002352:	4b3f      	ldr	r3, [pc, #252]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]
}
 8002360:	e06f      	b.n	8002442 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C4)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a40      	ldr	r2, [pc, #256]	; (8002468 <HAL_I2C_MspInit+0x344>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d16a      	bne.n	8002442 <HAL_I2C_MspInit+0x31e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800236c:	f04f 0210 	mov.w	r2, #16
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800237e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002382:	4618      	mov	r0, r3
 8002384:	f008 ff9a 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <HAL_I2C_MspInit+0x26e>
      Error_Handler();
 800238e:	f7ff fdfd 	bl	8001f8c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002392:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002398:	4a2d      	ldr	r2, [pc, #180]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 800239a:	f043 0302 	orr.w	r3, r3, #2
 800239e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80023a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80023b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023b6:	4a26      	ldr	r2, [pc, #152]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80023b8:	f043 0308 	orr.w	r3, r3, #8
 80023bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 80023c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023ce:	2340      	movs	r3, #64	; 0x40
 80023d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023d4:	2312      	movs	r3, #18
 80023d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 80023e6:	2306      	movs	r3, #6
 80023e8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80023f0:	4619      	mov	r1, r3
 80023f2:	4818      	ldr	r0, [pc, #96]	; (8002454 <HAL_I2C_MspInit+0x330>)
 80023f4:	f003 fc3e 	bl	8005c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002400:	2312      	movs	r3, #18
 8002402:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002412:	2304      	movs	r3, #4
 8002414:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002418:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800241c:	4619      	mov	r1, r3
 800241e:	4813      	ldr	r0, [pc, #76]	; (800246c <HAL_I2C_MspInit+0x348>)
 8002420:	f003 fc28 	bl	8005c74 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002424:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800242a:	4a09      	ldr	r2, [pc, #36]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 800242c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002430:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_I2C_MspInit+0x32c>)
 8002436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
}
 8002442:	bf00      	nop
 8002444:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40005400 	.word	0x40005400
 8002450:	58024400 	.word	0x58024400
 8002454:	58020400 	.word	0x58020400
 8002458:	40005800 	.word	0x40005800
 800245c:	40005c00 	.word	0x40005c00
 8002460:	58020000 	.word	0x58020000
 8002464:	58020800 	.word	0x58020800
 8002468:	58001c00 	.word	0x58001c00
 800246c:	58020c00 	.word	0x58020c00

08002470 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b0b2      	sub	sp, #200	; 0xc8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	22b8      	movs	r2, #184	; 0xb8
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f012 fbc0 	bl	8014c06 <memset>
  if(hrng->Instance==RNG)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a14      	ldr	r2, [pc, #80]	; (80024dc <HAL_RNG_MspInit+0x6c>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d121      	bne.n	80024d4 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002490:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024a2:	f107 0310 	add.w	r3, r7, #16
 80024a6:	4618      	mov	r0, r3
 80024a8:	f008 ff08 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 80024b2:	f7ff fd6b 	bl	8001f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <HAL_RNG_MspInit+0x70>)
 80024b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80024bc:	4a08      	ldr	r2, [pc, #32]	; (80024e0 <HAL_RNG_MspInit+0x70>)
 80024be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024c2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RNG_MspInit+0x70>)
 80024c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80024cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80024d4:	bf00      	nop
 80024d6:	37c8      	adds	r7, #200	; 0xc8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	48021800 	.word	0x48021800
 80024e0:	58024400 	.word	0x58024400

080024e4 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a2a      	ldr	r2, [pc, #168]	; (80025ac <HAL_MMC_MspInit+0xc8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d14d      	bne.n	80025a2 <HAL_MMC_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <HAL_MMC_MspInit+0xcc>)
 8002508:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800250c:	4a28      	ldr	r2, [pc, #160]	; (80025b0 <HAL_MMC_MspInit+0xcc>)
 800250e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002512:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <HAL_MMC_MspInit+0xcc>)
 8002518:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002524:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <HAL_MMC_MspInit+0xcc>)
 8002526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252a:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <HAL_MMC_MspInit+0xcc>)
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002534:	4b1e      	ldr	r3, [pc, #120]	; (80025b0 <HAL_MMC_MspInit+0xcc>)
 8002536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_MMC_MspInit+0xcc>)
 8002544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002548:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <HAL_MMC_MspInit+0xcc>)
 800254a:	f043 0304 	orr.w	r3, r3, #4
 800254e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <HAL_MMC_MspInit+0xcc>)
 8002554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PD2     ------> SDMMC1_CMD
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002560:	2304      	movs	r3, #4
 8002562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	2302      	movs	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256c:	2303      	movs	r3, #3
 800256e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002570:	230c      	movs	r3, #12
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	4619      	mov	r1, r3
 800257a:	480e      	ldr	r0, [pc, #56]	; (80025b4 <HAL_MMC_MspInit+0xd0>)
 800257c:	f003 fb7a 	bl	8005c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8002580:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002584:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	2302      	movs	r3, #2
 8002588:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258e:	2303      	movs	r3, #3
 8002590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002592:	230c      	movs	r3, #12
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002596:	f107 0314 	add.w	r3, r7, #20
 800259a:	4619      	mov	r1, r3
 800259c:	4806      	ldr	r0, [pc, #24]	; (80025b8 <HAL_MMC_MspInit+0xd4>)
 800259e:	f003 fb69 	bl	8005c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80025a2:	bf00      	nop
 80025a4:	3728      	adds	r7, #40	; 0x28
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	52007000 	.word	0x52007000
 80025b0:	58024400 	.word	0x58024400
 80025b4:	58020c00 	.word	0x58020c00
 80025b8:	58020800 	.word	0x58020800

080025bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b0c8      	sub	sp, #288	; 0x120
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025ca:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
 80025da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80025e0:	22b8      	movs	r2, #184	; 0xb8
 80025e2:	2100      	movs	r1, #0
 80025e4:	4618      	mov	r0, r3
 80025e6:	f012 fb0e 	bl	8014c06 <memset>
  if(hspi->Instance==SPI1)
 80025ea:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025ee:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a98      	ldr	r2, [pc, #608]	; (8002858 <HAL_SPI_MspInit+0x29c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	f040 8091 	bne.w	8002720 <HAL_SPI_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80025fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 800260a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800260e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002612:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002616:	4618      	mov	r0, r3
 8002618:	f008 fe50 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_SPI_MspInit+0x6a>
    {
      Error_Handler();
 8002622:	f7ff fcb3 	bl	8001f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002626:	4b8d      	ldr	r3, [pc, #564]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800262c:	4a8b      	ldr	r2, [pc, #556]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 800262e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002632:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002636:	4b89      	ldr	r3, [pc, #548]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800263c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002640:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002644:	4b85      	ldr	r3, [pc, #532]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800264a:	4a84      	ldr	r2, [pc, #528]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002654:	4b81      	ldr	r3, [pc, #516]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002662:	4b7e      	ldr	r3, [pc, #504]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002668:	4a7c      	ldr	r2, [pc, #496]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002672:	4b7a      	ldr	r3, [pc, #488]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	647b      	str	r3, [r7, #68]	; 0x44
 800267e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002680:	4b76      	ldr	r3, [pc, #472]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002686:	4a75      	ldr	r2, [pc, #468]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002690:	4b72      	ldr	r3, [pc, #456]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	643b      	str	r3, [r7, #64]	; 0x40
 800269c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    PB4(NJTRST)     ------> SPI1_MISO
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800269e:	2318      	movs	r3, #24
 80026a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026b6:	2305      	movs	r3, #5
 80026b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026bc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80026c0:	4619      	mov	r1, r3
 80026c2:	4867      	ldr	r0, [pc, #412]	; (8002860 <HAL_SPI_MspInit+0x2a4>)
 80026c4:	f003 fad6 	bl	8005c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026e2:	2305      	movs	r3, #5
 80026e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80026ec:	4619      	mov	r1, r3
 80026ee:	485d      	ldr	r0, [pc, #372]	; (8002864 <HAL_SPI_MspInit+0x2a8>)
 80026f0:	f003 fac0 	bl	8005c74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fa:	2302      	movs	r3, #2
 80026fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800270c:	2305      	movs	r3, #5
 800270e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002712:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002716:	4619      	mov	r1, r3
 8002718:	4853      	ldr	r0, [pc, #332]	; (8002868 <HAL_SPI_MspInit+0x2ac>)
 800271a:	f003 faab 	bl	8005c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 800271e:	e24d      	b.n	8002bbc <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI2)
 8002720:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002724:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4f      	ldr	r2, [pc, #316]	; (800286c <HAL_SPI_MspInit+0x2b0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	f040 80a0 	bne.w	8002874 <HAL_SPI_MspInit+0x2b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002740:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002744:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002748:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800274c:	4618      	mov	r0, r3
 800274e:	f008 fdb5 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <HAL_SPI_MspInit+0x1a0>
      Error_Handler();
 8002758:	f7ff fc18 	bl	8001f8c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800275c:	4b3f      	ldr	r3, [pc, #252]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 800275e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002762:	4a3e      	ldr	r2, [pc, #248]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002768:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800276c:	4b3b      	ldr	r3, [pc, #236]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 800276e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002776:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 800277c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002780:	4a36      	ldr	r2, [pc, #216]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 8002782:	f043 0302 	orr.w	r3, r3, #2
 8002786:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800278a:	4b34      	ldr	r3, [pc, #208]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 800278c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	63bb      	str	r3, [r7, #56]	; 0x38
 8002796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002798:	4b30      	ldr	r3, [pc, #192]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 800279a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279e:	4a2f      	ldr	r2, [pc, #188]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 80027a0:	f043 0308 	orr.w	r3, r3, #8
 80027a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a8:	4b2c      	ldr	r3, [pc, #176]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 80027aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	637b      	str	r3, [r7, #52]	; 0x34
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b6:	4b29      	ldr	r3, [pc, #164]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 80027b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027bc:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 80027be:	f043 0304 	orr.w	r3, r3, #4
 80027c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027c6:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_SPI_MspInit+0x2a0>)
 80027c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	633b      	str	r3, [r7, #48]	; 0x30
 80027d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027dc:	2302      	movs	r3, #2
 80027de:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027ee:	2305      	movs	r3, #5
 80027f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80027f8:	4619      	mov	r1, r3
 80027fa:	4819      	ldr	r0, [pc, #100]	; (8002860 <HAL_SPI_MspInit+0x2a4>)
 80027fc:	f003 fa3a 	bl	8005c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002800:	2308      	movs	r3, #8
 8002802:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002818:	2305      	movs	r3, #5
 800281a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800281e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002822:	4619      	mov	r1, r3
 8002824:	4810      	ldr	r0, [pc, #64]	; (8002868 <HAL_SPI_MspInit+0x2ac>)
 8002826:	f003 fa25 	bl	8005c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800282a:	230c      	movs	r3, #12
 800282c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002830:	2302      	movs	r3, #2
 8002832:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002842:	2305      	movs	r3, #5
 8002844:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002848:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800284c:	4619      	mov	r1, r3
 800284e:	4808      	ldr	r0, [pc, #32]	; (8002870 <HAL_SPI_MspInit+0x2b4>)
 8002850:	f003 fa10 	bl	8005c74 <HAL_GPIO_Init>
}
 8002854:	e1b2      	b.n	8002bbc <HAL_SPI_MspInit+0x600>
 8002856:	bf00      	nop
 8002858:	40013000 	.word	0x40013000
 800285c:	58024400 	.word	0x58024400
 8002860:	58020400 	.word	0x58020400
 8002864:	58020000 	.word	0x58020000
 8002868:	58020c00 	.word	0x58020c00
 800286c:	40003800 	.word	0x40003800
 8002870:	58020800 	.word	0x58020800
  else if(hspi->Instance==SPI3)
 8002874:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002878:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4ad1      	ldr	r2, [pc, #836]	; (8002bc8 <HAL_SPI_MspInit+0x60c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	f040 8099 	bne.w	80029ba <HAL_SPI_MspInit+0x3fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002894:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002898:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800289c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80028a0:	4618      	mov	r0, r3
 80028a2:	f008 fd0b 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_SPI_MspInit+0x2f4>
      Error_Handler();
 80028ac:	f7ff fb6e 	bl	8001f8c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028b0:	4bc6      	ldr	r3, [pc, #792]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80028b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028b6:	4ac5      	ldr	r2, [pc, #788]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80028b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028c0:	4bc2      	ldr	r3, [pc, #776]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80028c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ce:	4bbf      	ldr	r3, [pc, #764]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028d4:	4abd      	ldr	r2, [pc, #756]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028de:	4bbb      	ldr	r3, [pc, #748]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80028e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028ec:	4bb7      	ldr	r3, [pc, #732]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80028ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f2:	4ab6      	ldr	r2, [pc, #728]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80028f4:	f043 0308 	orr.w	r3, r3, #8
 80028f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028fc:	4bb3      	ldr	r3, [pc, #716]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80028fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
 8002908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	4bb0      	ldr	r3, [pc, #704]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 800290c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002910:	4aae      	ldr	r2, [pc, #696]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800291a:	4bac      	ldr	r3, [pc, #688]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 800291c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002920:	f003 0201 	and.w	r2, r3, #1
 8002924:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002928:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002932:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002936:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002938:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800293c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002946:	2300      	movs	r3, #0
 8002948:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002952:	2306      	movs	r3, #6
 8002954:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002958:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800295c:	4619      	mov	r1, r3
 800295e:	489c      	ldr	r0, [pc, #624]	; (8002bd0 <HAL_SPI_MspInit+0x614>)
 8002960:	f003 f988 	bl	8005c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002964:	2340      	movs	r3, #64	; 0x40
 8002966:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 800297c:	2305      	movs	r3, #5
 800297e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002982:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002986:	4619      	mov	r1, r3
 8002988:	4892      	ldr	r0, [pc, #584]	; (8002bd4 <HAL_SPI_MspInit+0x618>)
 800298a:	f003 f973 	bl	8005c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800298e:	2310      	movs	r3, #16
 8002990:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002994:	2302      	movs	r3, #2
 8002996:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80029a6:	2306      	movs	r3, #6
 80029a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80029b0:	4619      	mov	r1, r3
 80029b2:	4889      	ldr	r0, [pc, #548]	; (8002bd8 <HAL_SPI_MspInit+0x61c>)
 80029b4:	f003 f95e 	bl	8005c74 <HAL_GPIO_Init>
}
 80029b8:	e100      	b.n	8002bbc <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI4)
 80029ba:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80029be:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a85      	ldr	r2, [pc, #532]	; (8002bdc <HAL_SPI_MspInit+0x620>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d156      	bne.n	8002a7a <HAL_SPI_MspInit+0x4be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80029cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029de:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80029e2:	4618      	mov	r0, r3
 80029e4:	f008 fc6a 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_SPI_MspInit+0x436>
      Error_Handler();
 80029ee:	f7ff facd 	bl	8001f8c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80029f2:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80029f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80029f8:	4a74      	ldr	r2, [pc, #464]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 80029fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002a02:	4b72      	ldr	r3, [pc, #456]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002a08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002a0c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002a1e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a20:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a26:	4a69      	ldr	r2, [pc, #420]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002a28:	f043 0310 	orr.w	r3, r3, #16
 8002a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a30:	4b66      	ldr	r3, [pc, #408]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a36:	f003 0210 	and.w	r2, r3, #16
 8002a3a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002a4c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002a4e:	2374      	movs	r3, #116	; 0x74
 8002a50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002a66:	2305      	movs	r3, #5
 8002a68:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a6c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002a70:	4619      	mov	r1, r3
 8002a72:	485b      	ldr	r0, [pc, #364]	; (8002be0 <HAL_SPI_MspInit+0x624>)
 8002a74:	f003 f8fe 	bl	8005c74 <HAL_GPIO_Init>
}
 8002a78:	e0a0      	b.n	8002bbc <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI6)
 8002a7a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002a7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a57      	ldr	r2, [pc, #348]	; (8002be4 <HAL_SPI_MspInit+0x628>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	f040 8097 	bne.w	8002bbc <HAL_SPI_MspInit+0x600>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8002a8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aa0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f008 fc09 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_SPI_MspInit+0x4f8>
      Error_Handler();
 8002ab0:	f7ff fa6c 	bl	8001f8c <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8002ab4:	4b45      	ldr	r3, [pc, #276]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002ab6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002aba:	4a44      	ldr	r2, [pc, #272]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002abc:	f043 0320 	orr.w	r3, r3, #32
 8002ac0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ac4:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002ac6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002aca:	f003 0220 	and.w	r2, r3, #32
 8002ace:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002ad2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002adc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002ae0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ae8:	4a38      	ldr	r2, [pc, #224]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002aea:	f043 0302 	orr.w	r3, r3, #2
 8002aee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af8:	f003 0202 	and.w	r2, r3, #2
 8002afc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b00:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b0a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002b0e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b10:	4b2e      	ldr	r3, [pc, #184]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b16:	4a2d      	ldr	r2, [pc, #180]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b20:	4b2a      	ldr	r3, [pc, #168]	; (8002bcc <HAL_SPI_MspInit+0x610>)
 8002b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b26:	f003 0201 	and.w	r2, r3, #1
 8002b2a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002b38:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002b3c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b3e:	2320      	movs	r3, #32
 8002b40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b44:	2302      	movs	r3, #2
 8002b46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002b56:	2308      	movs	r3, #8
 8002b58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002b60:	4619      	mov	r1, r3
 8002b62:	4821      	ldr	r0, [pc, #132]	; (8002be8 <HAL_SPI_MspInit+0x62c>)
 8002b64:	f003 f886 	bl	8005c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8002b80:	2305      	movs	r3, #5
 8002b82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b86:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	4812      	ldr	r0, [pc, #72]	; (8002bd8 <HAL_SPI_MspInit+0x61c>)
 8002b8e:	f003 f871 	bl	8005c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002b92:	2360      	movs	r3, #96	; 0x60
 8002b94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b98:	2302      	movs	r3, #2
 8002b9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002baa:	2308      	movs	r3, #8
 8002bac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4808      	ldr	r0, [pc, #32]	; (8002bd8 <HAL_SPI_MspInit+0x61c>)
 8002bb8:	f003 f85c 	bl	8005c74 <HAL_GPIO_Init>
}
 8002bbc:	bf00      	nop
 8002bbe:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40003c00 	.word	0x40003c00
 8002bcc:	58024400 	.word	0x58024400
 8002bd0:	58020800 	.word	0x58020800
 8002bd4:	58020c00 	.word	0x58020c00
 8002bd8:	58020000 	.word	0x58020000
 8002bdc:	40013400 	.word	0x40013400
 8002be0:	58021000 	.word	0x58021000
 8002be4:	58001400 	.word	0x58001400
 8002be8:	58020400 	.word	0x58020400

08002bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b0b8      	sub	sp, #224	; 0xe0
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	609a      	str	r2, [r3, #8]
 8002c00:	60da      	str	r2, [r3, #12]
 8002c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c04:	f107 0310 	add.w	r3, r7, #16
 8002c08:	22b8      	movs	r2, #184	; 0xb8
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f011 fffa 	bl	8014c06 <memset>
  if(huart->Instance==USART2)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <HAL_UART_MspInit+0xc4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d145      	bne.n	8002ca8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c1c:	f04f 0202 	mov.w	r2, #2
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c2e:	f107 0310 	add.w	r3, r7, #16
 8002c32:	4618      	mov	r0, r3
 8002c34:	f008 fb42 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002c3e:	f7ff f9a5 	bl	8001f8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c42:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <HAL_UART_MspInit+0xc8>)
 8002c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c48:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_UART_MspInit+0xc8>)
 8002c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c52:	4b18      	ldr	r3, [pc, #96]	; (8002cb4 <HAL_UART_MspInit+0xc8>)
 8002c54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	60fb      	str	r3, [r7, #12]
 8002c5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c60:	4b14      	ldr	r3, [pc, #80]	; (8002cb4 <HAL_UART_MspInit+0xc8>)
 8002c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c66:	4a13      	ldr	r2, [pc, #76]	; (8002cb4 <HAL_UART_MspInit+0xc8>)
 8002c68:	f043 0301 	orr.w	r3, r3, #1
 8002c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <HAL_UART_MspInit+0xc8>)
 8002c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	60bb      	str	r3, [r7, #8]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c7e:	230c      	movs	r3, #12
 8002c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c84:	2302      	movs	r3, #2
 8002c86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c90:	2300      	movs	r3, #0
 8002c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c96:	2307      	movs	r3, #7
 8002c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <HAL_UART_MspInit+0xcc>)
 8002ca4:	f002 ffe6 	bl	8005c74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ca8:	bf00      	nop
 8002caa:	37e0      	adds	r7, #224	; 0xe0
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40004400 	.word	0x40004400
 8002cb4:	58024400 	.word	0x58024400
 8002cb8:	58020000 	.word	0x58020000

08002cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cc0:	e7fe      	b.n	8002cc0 <NMI_Handler+0x4>

08002cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cc6:	e7fe      	b.n	8002cc6 <HardFault_Handler+0x4>

08002cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ccc:	e7fe      	b.n	8002ccc <MemManage_Handler+0x4>

08002cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cd2:	e7fe      	b.n	8002cd2 <BusFault_Handler+0x4>

08002cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cd8:	e7fe      	b.n	8002cd8 <UsageFault_Handler+0x4>

08002cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d08:	f000 faaa 	bl	8003260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d0c:	bf00      	nop
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002d14:	4802      	ldr	r0, [pc, #8]	; (8002d20 <OTG_HS_IRQHandler+0x10>)
 8002d16:	f006 f9c0 	bl	800909a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	24002174 	.word	0x24002174

08002d24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return 1;
 8002d28:	2301      	movs	r3, #1
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <_kill>:

int _kill(int pid, int sig)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d3e:	f011 ffc5 	bl	8014ccc <__errno>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2216      	movs	r2, #22
 8002d46:	601a      	str	r2, [r3, #0]
  return -1;
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <_exit>:

void _exit (int status)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff ffe7 	bl	8002d34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d66:	e7fe      	b.n	8002d66 <_exit+0x12>

08002d68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e00a      	b.n	8002d90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d7a:	f3af 8000 	nop.w
 8002d7e:	4601      	mov	r1, r0
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	60ba      	str	r2, [r7, #8]
 8002d86:	b2ca      	uxtb	r2, r1
 8002d88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	697a      	ldr	r2, [r7, #20]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	dbf0      	blt.n	8002d7a <_read+0x12>
  }

  return len;
 8002d98:	687b      	ldr	r3, [r7, #4]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e009      	b.n	8002dc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	60ba      	str	r2, [r7, #8]
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	dbf1      	blt.n	8002db4 <_write+0x12>
  }
  return len;
 8002dd0:	687b      	ldr	r3, [r7, #4]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3718      	adds	r7, #24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <_close>:

int _close(int file)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e02:	605a      	str	r2, [r3, #4]
  return 0;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <_isatty>:

int _isatty(int file)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e1a:	2301      	movs	r3, #1
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	370c      	adds	r7, #12
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr

08002e28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <_sbrk+0x5c>)
 8002e4e:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <_sbrk+0x60>)
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e60:	4b11      	ldr	r3, [pc, #68]	; (8002ea8 <_sbrk+0x64>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	; (8002eac <_sbrk+0x68>)
 8002e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <_sbrk+0x64>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d207      	bcs.n	8002e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e74:	f011 ff2a 	bl	8014ccc <__errno>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	220c      	movs	r2, #12
 8002e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e82:	e009      	b.n	8002e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <_sbrk+0x64>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e8a:	4b07      	ldr	r3, [pc, #28]	; (8002ea8 <_sbrk+0x64>)
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4413      	add	r3, r2
 8002e92:	4a05      	ldr	r2, [pc, #20]	; (8002ea8 <_sbrk+0x64>)
 8002e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e96:	68fb      	ldr	r3, [r7, #12]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	24050000 	.word	0x24050000
 8002ea4:	00000400 	.word	0x00000400
 8002ea8:	24000c70 	.word	0x24000c70
 8002eac:	240029e8 	.word	0x240029e8

08002eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <SystemInit+0xd0>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	4a31      	ldr	r2, [pc, #196]	; (8002f80 <SystemInit+0xd0>)
 8002ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ec4:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <SystemInit+0xd4>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	2b06      	cmp	r3, #6
 8002ece:	d807      	bhi.n	8002ee0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <SystemInit+0xd4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 030f 	bic.w	r3, r3, #15
 8002ed8:	4a2a      	ldr	r2, [pc, #168]	; (8002f84 <SystemInit+0xd4>)
 8002eda:	f043 0307 	orr.w	r3, r3, #7
 8002ede:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002ee0:	4b29      	ldr	r3, [pc, #164]	; (8002f88 <SystemInit+0xd8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <SystemInit+0xd8>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002eec:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <SystemInit+0xd8>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ef2:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <SystemInit+0xd8>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4924      	ldr	r1, [pc, #144]	; (8002f88 <SystemInit+0xd8>)
 8002ef8:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <SystemInit+0xdc>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <SystemInit+0xd4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d007      	beq.n	8002f1a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <SystemInit+0xd4>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 030f 	bic.w	r3, r3, #15
 8002f12:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <SystemInit+0xd4>)
 8002f14:	f043 0307 	orr.w	r3, r3, #7
 8002f18:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002f1a:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <SystemInit+0xd8>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <SystemInit+0xd8>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002f26:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <SystemInit+0xd8>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f2c:	4b16      	ldr	r3, [pc, #88]	; (8002f88 <SystemInit+0xd8>)
 8002f2e:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <SystemInit+0xe0>)
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <SystemInit+0xd8>)
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <SystemInit+0xe4>)
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <SystemInit+0xd8>)
 8002f3a:	4a17      	ldr	r2, [pc, #92]	; (8002f98 <SystemInit+0xe8>)
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <SystemInit+0xd8>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <SystemInit+0xd8>)
 8002f46:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <SystemInit+0xe8>)
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <SystemInit+0xd8>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f50:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <SystemInit+0xd8>)
 8002f52:	4a11      	ldr	r2, [pc, #68]	; (8002f98 <SystemInit+0xe8>)
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f56:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <SystemInit+0xd8>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <SystemInit+0xd8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a09      	ldr	r2, [pc, #36]	; (8002f88 <SystemInit+0xd8>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002f68:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <SystemInit+0xd8>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <SystemInit+0xec>)
 8002f70:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002f74:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00
 8002f84:	52002000 	.word	0x52002000
 8002f88:	58024400 	.word	0x58024400
 8002f8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002f90:	02020200 	.word	0x02020200
 8002f94:	01ff0000 	.word	0x01ff0000
 8002f98:	01010280 	.word	0x01010280
 8002f9c:	52004000 	.word	0x52004000

08002fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fa4:	f7ff ff84 	bl	8002eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fa8:	480c      	ldr	r0, [pc, #48]	; (8002fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002faa:	490d      	ldr	r1, [pc, #52]	; (8002fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fb0:	e002      	b.n	8002fb8 <LoopCopyDataInit>

08002fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb6:	3304      	adds	r3, #4

08002fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fbc:	d3f9      	bcc.n	8002fb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fc0:	4c0a      	ldr	r4, [pc, #40]	; (8002fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc4:	e001      	b.n	8002fca <LoopFillZerobss>

08002fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc8:	3204      	adds	r2, #4

08002fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fcc:	d3fb      	bcc.n	8002fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002fce:	f011 fe83 	bl	8014cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fd2:	f7fe f98b 	bl	80012ec <main>
  bx  lr
 8002fd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fd8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002fdc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002fe0:	240002e0 	.word	0x240002e0
  ldr r2, =_sidata
 8002fe4:	080187c0 	.word	0x080187c0
  ldr r2, =_sbss
 8002fe8:	240002e0 	.word	0x240002e0
  ldr r4, =_ebss
 8002fec:	240029e8 	.word	0x240029e8

08002ff0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ff0:	e7fe      	b.n	8002ff0 <ADC3_IRQHandler>

08002ff2 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b082      	sub	sp, #8
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d104      	bne.n	800300a <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003000:	b672      	cpsid	i
}
 8003002:	bf00      	nop
 8003004:	f7fe ffc2 	bl	8001f8c <Error_Handler>
 8003008:	e7fe      	b.n	8003008 <stm32_lock_init+0x16>
  lock->flag = 0;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	705a      	strb	r2, [r3, #1]
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003026:	f3ef 8310 	mrs	r3, PRIMASK
 800302a:	60bb      	str	r3, [r7, #8]
  return(result);
 800302c:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8003036:	b672      	cpsid	i
}
 8003038:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800303a:	f3bf 8f4f 	dsb	sy
}
 800303e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003040:	f3bf 8f6f 	isb	sy
}
 8003044:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d104      	bne.n	8003056 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 800304c:	b672      	cpsid	i
}
 800304e:	bf00      	nop
 8003050:	f7fe ff9c 	bl	8001f8c <Error_Handler>
 8003054:	e7fe      	b.n	8003054 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	785b      	ldrb	r3, [r3, #1]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7bfa      	ldrb	r2, [r7, #15]
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	e008      	b.n	8003078 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	785b      	ldrb	r3, [r3, #1]
 800306a:	2bff      	cmp	r3, #255	; 0xff
 800306c:	d104      	bne.n	8003078 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800306e:	b672      	cpsid	i
}
 8003070:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8003072:	f7fe ff8b 	bl	8001f8c <Error_Handler>
 8003076:	e7fe      	b.n	8003076 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	785b      	ldrb	r3, [r3, #1]
 800307c:	3301      	adds	r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	705a      	strb	r2, [r3, #1]
}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800309a:	b672      	cpsid	i
}
 800309c:	bf00      	nop
 800309e:	f7fe ff75 	bl	8001f8c <Error_Handler>
 80030a2:	e7fe      	b.n	80030a2 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d104      	bne.n	80030b6 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80030ac:	b672      	cpsid	i
}
 80030ae:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80030b0:	f7fe ff6c 	bl	8001f8c <Error_Handler>
 80030b4:	e7fe      	b.n	80030b4 <stm32_lock_release+0x28>
  }
  lock->counter--;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	785b      	ldrb	r3, [r3, #1]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	785b      	ldrb	r3, [r3, #1]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d105      	bne.n	80030d6 <stm32_lock_release+0x4a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 80030d2:	b662      	cpsie	i
}
 80030d4:	bf00      	nop
  {
    __enable_irq();
  }
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d105      	bne.n	80030f8 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80030ec:	f011 fdee 	bl	8014ccc <__errno>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2216      	movs	r2, #22
 80030f4:	601a      	str	r2, [r3, #0]
    return;
 80030f6:	e015      	b.n	8003124 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80030f8:	2002      	movs	r0, #2
 80030fa:	f010 fd6b 	bl	8013bd4 <malloc>
 80030fe:	4603      	mov	r3, r0
 8003100:	461a      	mov	r2, r3
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f7ff ff6d 	bl	8002ff2 <stm32_lock_init>
    return;
 8003118:	e004      	b.n	8003124 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800311a:	b672      	cpsid	i
}
 800311c:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800311e:	f7fe ff35 	bl	8001f8c <Error_Handler>
 8003122:	e7fe      	b.n	8003122 <__retarget_lock_init_recursive+0x44>
}
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d104      	bne.n	8003142 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003138:	b672      	cpsid	i
}
 800313a:	bf00      	nop
 800313c:	f7fe ff26 	bl	8001f8c <Error_Handler>
 8003140:	e7fe      	b.n	8003140 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff ff6a 	bl	800301e <stm32_lock_acquire>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b082      	sub	sp, #8
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d104      	bne.n	800316a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003160:	b672      	cpsid	i
}
 8003162:	bf00      	nop
 8003164:	f7fe ff12 	bl	8001f8c <Error_Handler>
 8003168:	e7fe      	b.n	8003168 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff ff8d 	bl	800308c <stm32_lock_release>
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003182:	2003      	movs	r0, #3
 8003184:	f001 fd22 	bl	8004bcc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003188:	f007 fec2 	bl	800af10 <HAL_RCC_GetSysClockFreq>
 800318c:	4602      	mov	r2, r0
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <HAL_Init+0x68>)
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	4913      	ldr	r1, [pc, #76]	; (80031e8 <HAL_Init+0x6c>)
 800319a:	5ccb      	ldrb	r3, [r1, r3]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_Init+0x68>)
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	f003 030f 	and.w	r3, r3, #15
 80031ae:	4a0e      	ldr	r2, [pc, #56]	; (80031e8 <HAL_Init+0x6c>)
 80031b0:	5cd3      	ldrb	r3, [r2, r3]
 80031b2:	f003 031f 	and.w	r3, r3, #31
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	fa22 f303 	lsr.w	r3, r2, r3
 80031bc:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <HAL_Init+0x70>)
 80031be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031c0:	4a0b      	ldr	r2, [pc, #44]	; (80031f0 <HAL_Init+0x74>)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80031c6:	200f      	movs	r0, #15
 80031c8:	f000 f814 	bl	80031f4 <HAL_InitTick>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e002      	b.n	80031dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80031d6:	f7fe fedf 	bl	8001f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	58024400 	.word	0x58024400
 80031e8:	08018350 	.word	0x08018350
 80031ec:	24000004 	.word	0x24000004
 80031f0:	24000000 	.word	0x24000000

080031f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80031fc:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_InitTick+0x60>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e021      	b.n	800324c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <HAL_InitTick+0x64>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <HAL_InitTick+0x60>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	4619      	mov	r1, r3
 8003212:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003216:	fbb3 f3f1 	udiv	r3, r3, r1
 800321a:	fbb2 f3f3 	udiv	r3, r2, r3
 800321e:	4618      	mov	r0, r3
 8003220:	f001 fd07 	bl	8004c32 <HAL_SYSTICK_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e00e      	b.n	800324c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b0f      	cmp	r3, #15
 8003232:	d80a      	bhi.n	800324a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003234:	2200      	movs	r2, #0
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	f04f 30ff 	mov.w	r0, #4294967295
 800323c:	f001 fcd1 	bl	8004be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003240:	4a06      	ldr	r2, [pc, #24]	; (800325c <HAL_InitTick+0x68>)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e000      	b.n	800324c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	2400000c 	.word	0x2400000c
 8003258:	24000000 	.word	0x24000000
 800325c:	24000008 	.word	0x24000008

08003260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003260:	b480      	push	{r7}
 8003262:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003264:	4b06      	ldr	r3, [pc, #24]	; (8003280 <HAL_IncTick+0x20>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	461a      	mov	r2, r3
 800326a:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HAL_IncTick+0x24>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4413      	add	r3, r2
 8003270:	4a04      	ldr	r2, [pc, #16]	; (8003284 <HAL_IncTick+0x24>)
 8003272:	6013      	str	r3, [r2, #0]
}
 8003274:	bf00      	nop
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	2400000c 	.word	0x2400000c
 8003284:	24000c7c 	.word	0x24000c7c

08003288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  return uwTick;
 800328c:	4b03      	ldr	r3, [pc, #12]	; (800329c <HAL_GetTick+0x14>)
 800328e:	681b      	ldr	r3, [r3, #0]
}
 8003290:	4618      	mov	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	24000c7c 	.word	0x24000c7c

080032a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032a8:	f7ff ffee 	bl	8003288 <HAL_GetTick>
 80032ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032b8:	d005      	beq.n	80032c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <HAL_Delay+0x44>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032c6:	bf00      	nop
 80032c8:	f7ff ffde 	bl	8003288 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d8f7      	bhi.n	80032c8 <HAL_Delay+0x28>
  {
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	2400000c 	.word	0x2400000c

080032e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	609a      	str	r2, [r3, #8]
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003344:	4618      	mov	r0, r3
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3360      	adds	r3, #96	; 0x60
 8003362:	461a      	mov	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a10      	ldr	r2, [pc, #64]	; (80033b0 <LL_ADC_SetOffset+0x60>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10b      	bne.n	800338c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	4313      	orrs	r3, r2
 8003382:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800338a:	e00b      	b.n	80033a4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	430b      	orrs	r3, r1
 800339e:	431a      	orrs	r2, r3
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	601a      	str	r2, [r3, #0]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	58026000 	.word	0x58026000

080033b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3360      	adds	r3, #96	; 0x60
 80033c2:	461a      	mov	r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 031f 	and.w	r3, r3, #31
 80033fa:	6879      	ldr	r1, [r7, #4]
 80033fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003400:	431a      	orrs	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	611a      	str	r2, [r3, #16]
}
 8003406:	bf00      	nop
 8003408:	3714      	adds	r7, #20
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00e      	beq.n	8003446 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3360      	adds	r3, #96	; 0x60
 800342c:	461a      	mov	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4413      	add	r3, r2
 8003434:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	431a      	orrs	r2, r3
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	601a      	str	r2, [r3, #0]
  }
}
 8003446:	bf00      	nop
 8003448:	371c      	adds	r7, #28
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	58026000 	.word	0x58026000

08003458 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4a0c      	ldr	r2, [pc, #48]	; (8003498 <LL_ADC_SetOffsetSaturation+0x40>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d10e      	bne.n	800348a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3360      	adds	r3, #96	; 0x60
 8003470:	461a      	mov	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4413      	add	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	431a      	orrs	r2, r3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	58026000 	.word	0x58026000

0800349c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <LL_ADC_SetOffsetSign+0x40>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d10e      	bne.n	80034ce <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3360      	adds	r3, #96	; 0x60
 80034b4:	461a      	mov	r2, r3
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80034ce:	bf00      	nop
 80034d0:	371c      	adds	r7, #28
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	58026000 	.word	0x58026000

080034e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b087      	sub	sp, #28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3360      	adds	r3, #96	; 0x60
 80034f0:	461a      	mov	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	4a0c      	ldr	r2, [pc, #48]	; (8003530 <LL_ADC_SetOffsetState+0x50>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d108      	bne.n	8003514 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	431a      	orrs	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003512:	e007      	b.n	8003524 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	431a      	orrs	r2, r3
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	601a      	str	r2, [r3, #0]
}
 8003524:	bf00      	nop
 8003526:	371c      	adds	r7, #28
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	58026000 	.word	0x58026000

08003534 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003534:	b480      	push	{r7}
 8003536:	b087      	sub	sp, #28
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3330      	adds	r3, #48	; 0x30
 8003544:	461a      	mov	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	4413      	add	r3, r2
 8003552:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 031f 	and.w	r3, r3, #31
 800355e:	211f      	movs	r1, #31
 8003560:	fa01 f303 	lsl.w	r3, r1, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	401a      	ands	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0e9b      	lsrs	r3, r3, #26
 800356c:	f003 011f 	and.w	r1, r3, #31
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	431a      	orrs	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003580:	bf00      	nop
 8003582:	371c      	adds	r7, #28
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800358c:	b480      	push	{r7}
 800358e:	b087      	sub	sp, #28
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3314      	adds	r3, #20
 800359c:	461a      	mov	r2, r3
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	0e5b      	lsrs	r3, r3, #25
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	4413      	add	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	0d1b      	lsrs	r3, r3, #20
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2107      	movs	r1, #7
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	401a      	ands	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	0d1b      	lsrs	r3, r3, #20
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	431a      	orrs	r2, r3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a1a      	ldr	r2, [pc, #104]	; (800365c <LL_ADC_SetChannelSingleDiff+0x78>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d115      	bne.n	8003624 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003604:	43db      	mvns	r3, r3
 8003606:	401a      	ands	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f003 0318 	and.w	r3, r3, #24
 800360e:	4914      	ldr	r1, [pc, #80]	; (8003660 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003610:	40d9      	lsrs	r1, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	400b      	ands	r3, r1
 8003616:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800361a:	431a      	orrs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003622:	e014      	b.n	800364e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003630:	43db      	mvns	r3, r3
 8003632:	401a      	ands	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f003 0318 	and.w	r3, r3, #24
 800363a:	4909      	ldr	r1, [pc, #36]	; (8003660 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800363c:	40d9      	lsrs	r1, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	400b      	ands	r3, r1
 8003642:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003646:	431a      	orrs	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	58026000 	.word	0x58026000
 8003660:	000fffff 	.word	0x000fffff

08003664 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	4b04      	ldr	r3, [pc, #16]	; (8003684 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003672:	4013      	ands	r3, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6093      	str	r3, [r2, #8]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	5fffffc0 	.word	0x5fffffc0

08003688 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800369c:	d101      	bne.n	80036a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <LL_ADC_EnableInternalRegulator+0x24>)
 80036be:	4013      	ands	r3, r2
 80036c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	6fffffc0 	.word	0x6fffffc0

080036d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ec:	d101      	bne.n	80036f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b01      	cmp	r3, #1
 8003712:	d101      	bne.n	8003718 <LL_ADC_IsEnabled+0x18>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <LL_ADC_IsEnabled+0x1a>
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003726:	b480      	push	{r7}
 8003728:	b083      	sub	sp, #12
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 0304 	and.w	r3, r3, #4
 8003736:	2b04      	cmp	r3, #4
 8003738:	d101      	bne.n	800373e <LL_ADC_REG_IsConversionOngoing+0x18>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0308 	and.w	r3, r3, #8
 800375c:	2b08      	cmp	r3, #8
 800375e:	d101      	bne.n	8003764 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003774:	b590      	push	{r4, r7, lr}
 8003776:	b089      	sub	sp, #36	; 0x24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003780:	2300      	movs	r3, #0
 8003782:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e1ee      	b.n	8003b6c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fe fc15 	bl	8001fcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff ff67 	bl	8003688 <LL_ADC_IsDeepPowerDownEnabled>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7ff ff4d 	bl	8003664 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ff82 	bl	80036d8 <LL_ADC_IsInternalRegulatorEnabled>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d114      	bne.n	8003804 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7ff ff66 	bl	80036b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037e4:	4b8e      	ldr	r3, [pc, #568]	; (8003a20 <HAL_ADC_Init+0x2ac>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	099b      	lsrs	r3, r3, #6
 80037ea:	4a8e      	ldr	r2, [pc, #568]	; (8003a24 <HAL_ADC_Init+0x2b0>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	099b      	lsrs	r3, r3, #6
 80037f2:	3301      	adds	r3, #1
 80037f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037f6:	e002      	b.n	80037fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f9      	bne.n	80037f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff65 	bl	80036d8 <LL_ADC_IsInternalRegulatorEnabled>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	f043 0210 	orr.w	r2, r3, #16
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003824:	f043 0201 	orr.w	r2, r3, #1
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff76 	bl	8003726 <LL_ADC_REG_IsConversionOngoing>
 800383a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003840:	f003 0310 	and.w	r3, r3, #16
 8003844:	2b00      	cmp	r3, #0
 8003846:	f040 8188 	bne.w	8003b5a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b00      	cmp	r3, #0
 800384e:	f040 8184 	bne.w	8003b5a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800385a:	f043 0202 	orr.w	r2, r3, #2
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff4a 	bl	8003700 <LL_ADC_IsEnabled>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d136      	bne.n	80038e0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6c      	ldr	r2, [pc, #432]	; (8003a28 <HAL_ADC_Init+0x2b4>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d004      	beq.n	8003886 <HAL_ADC_Init+0x112>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a6a      	ldr	r2, [pc, #424]	; (8003a2c <HAL_ADC_Init+0x2b8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d10e      	bne.n	80038a4 <HAL_ADC_Init+0x130>
 8003886:	4868      	ldr	r0, [pc, #416]	; (8003a28 <HAL_ADC_Init+0x2b4>)
 8003888:	f7ff ff3a 	bl	8003700 <LL_ADC_IsEnabled>
 800388c:	4604      	mov	r4, r0
 800388e:	4867      	ldr	r0, [pc, #412]	; (8003a2c <HAL_ADC_Init+0x2b8>)
 8003890:	f7ff ff36 	bl	8003700 <LL_ADC_IsEnabled>
 8003894:	4603      	mov	r3, r0
 8003896:	4323      	orrs	r3, r4
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	e008      	b.n	80038b6 <HAL_ADC_Init+0x142>
 80038a4:	4862      	ldr	r0, [pc, #392]	; (8003a30 <HAL_ADC_Init+0x2bc>)
 80038a6:	f7ff ff2b 	bl	8003700 <LL_ADC_IsEnabled>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	bf0c      	ite	eq
 80038b0:	2301      	moveq	r3, #1
 80038b2:	2300      	movne	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d012      	beq.n	80038e0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a5a      	ldr	r2, [pc, #360]	; (8003a28 <HAL_ADC_Init+0x2b4>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d004      	beq.n	80038ce <HAL_ADC_Init+0x15a>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a58      	ldr	r2, [pc, #352]	; (8003a2c <HAL_ADC_Init+0x2b8>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_Init+0x15e>
 80038ce:	4a59      	ldr	r2, [pc, #356]	; (8003a34 <HAL_ADC_Init+0x2c0>)
 80038d0:	e000      	b.n	80038d4 <HAL_ADC_Init+0x160>
 80038d2:	4a59      	ldr	r2, [pc, #356]	; (8003a38 <HAL_ADC_Init+0x2c4>)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f7ff fd04 	bl	80032e8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_ADC_Init+0x2bc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d129      	bne.n	800393e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	7e5b      	ldrb	r3, [r3, #25]
 80038ee:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038f4:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80038fa:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	2b08      	cmp	r3, #8
 8003902:	d013      	beq.n	800392c <HAL_ADC_Init+0x1b8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d00d      	beq.n	8003928 <HAL_ADC_Init+0x1b4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b1c      	cmp	r3, #28
 8003912:	d007      	beq.n	8003924 <HAL_ADC_Init+0x1b0>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	2b18      	cmp	r3, #24
 800391a:	d101      	bne.n	8003920 <HAL_ADC_Init+0x1ac>
 800391c:	2318      	movs	r3, #24
 800391e:	e006      	b.n	800392e <HAL_ADC_Init+0x1ba>
 8003920:	2300      	movs	r3, #0
 8003922:	e004      	b.n	800392e <HAL_ADC_Init+0x1ba>
 8003924:	2310      	movs	r3, #16
 8003926:	e002      	b.n	800392e <HAL_ADC_Init+0x1ba>
 8003928:	2308      	movs	r3, #8
 800392a:	e000      	b.n	800392e <HAL_ADC_Init+0x1ba>
 800392c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800392e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003936:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	e00e      	b.n	800395c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	7e5b      	ldrb	r3, [r3, #25]
 8003942:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003948:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800394e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003956:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d106      	bne.n	8003974 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396a:	3b01      	subs	r3, #1
 800396c:	045b      	lsls	r3, r3, #17
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	2b00      	cmp	r3, #0
 800397a:	d009      	beq.n	8003990 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a26      	ldr	r2, [pc, #152]	; (8003a30 <HAL_ADC_Init+0x2bc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d115      	bne.n	80039c6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <HAL_ADC_Init+0x2c8>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	69b9      	ldr	r1, [r7, #24]
 80039aa:	430b      	orrs	r3, r1
 80039ac:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	611a      	str	r2, [r3, #16]
 80039c4:	e009      	b.n	80039da <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	4b1c      	ldr	r3, [pc, #112]	; (8003a40 <HAL_ADC_Init+0x2cc>)
 80039ce:	4013      	ands	r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	69b9      	ldr	r1, [r7, #24]
 80039d6:	430b      	orrs	r3, r1
 80039d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff fea1 	bl	8003726 <LL_ADC_REG_IsConversionOngoing>
 80039e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7ff feae 	bl	800374c <LL_ADC_INJ_IsConversionOngoing>
 80039f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f040 808e 	bne.w	8003b16 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f040 808a 	bne.w	8003b16 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a0a      	ldr	r2, [pc, #40]	; (8003a30 <HAL_ADC_Init+0x2bc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d11b      	bne.n	8003a44 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	7e1b      	ldrb	r3, [r3, #24]
 8003a10:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a18:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
 8003a1e:	e018      	b.n	8003a52 <HAL_ADC_Init+0x2de>
 8003a20:	24000000 	.word	0x24000000
 8003a24:	053e2d63 	.word	0x053e2d63
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	40022100 	.word	0x40022100
 8003a30:	58026000 	.word	0x58026000
 8003a34:	40022300 	.word	0x40022300
 8003a38:	58026300 	.word	0x58026300
 8003a3c:	fff04007 	.word	0xfff04007
 8003a40:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	7e1b      	ldrb	r3, [r3, #24]
 8003a48:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68da      	ldr	r2, [r3, #12]
 8003a58:	4b46      	ldr	r3, [pc, #280]	; (8003b74 <HAL_ADC_Init+0x400>)
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	69b9      	ldr	r1, [r7, #24]
 8003a62:	430b      	orrs	r3, r1
 8003a64:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d137      	bne.n	8003ae0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a74:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <HAL_ADC_Init+0x404>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d116      	bne.n	8003aae <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <HAL_ADC_Init+0x408>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a92:	4311      	orrs	r1, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a98:	4311      	orrs	r1, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	611a      	str	r2, [r3, #16]
 8003aac:	e020      	b.n	8003af0 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691a      	ldr	r2, [r3, #16]
 8003ab4:	4b32      	ldr	r3, [pc, #200]	; (8003b80 <HAL_ADC_Init+0x40c>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003abc:	3a01      	subs	r2, #1
 8003abe:	0411      	lsls	r1, r2, #16
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ac4:	4311      	orrs	r1, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003aca:	4311      	orrs	r1, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	611a      	str	r2, [r3, #16]
 8003ade:	e007      	b.n	8003af0 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1b      	ldr	r2, [pc, #108]	; (8003b78 <HAL_ADC_Init+0x404>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d002      	beq.n	8003b16 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 fd63 	bl	80045dc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d10c      	bne.n	8003b38 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	f023 010f 	bic.w	r1, r3, #15
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	1e5a      	subs	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
 8003b36:	e007      	b.n	8003b48 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f022 020f 	bic.w	r2, r2, #15
 8003b46:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	f023 0303 	bic.w	r3, r3, #3
 8003b50:	f043 0201 	orr.w	r2, r3, #1
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	661a      	str	r2, [r3, #96]	; 0x60
 8003b58:	e007      	b.n	8003b6a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b5e:	f043 0210 	orr.w	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3724      	adds	r7, #36	; 0x24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd90      	pop	{r4, r7, pc}
 8003b74:	ffffbffc 	.word	0xffffbffc
 8003b78:	58026000 	.word	0x58026000
 8003b7c:	fc00f81f 	.word	0xfc00f81f
 8003b80:	fc00f81e 	.word	0xfc00f81e

08003b84 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b84:	b590      	push	{r4, r7, lr}
 8003b86:	b0b9      	sub	sp, #228	; 0xe4
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b9e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	4aa9      	ldr	r2, [pc, #676]	; (8003e4c <HAL_ADC_ConfigChannel+0x2c8>)
 8003ba6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d102      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x34>
 8003bb2:	2302      	movs	r3, #2
 8003bb4:	f000 bcfa 	b.w	80045ac <HAL_ADC_ConfigChannel+0xa28>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fdae 	bl	8003726 <LL_ADC_REG_IsConversionOngoing>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f040 84de 	bne.w	800458e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a9e      	ldr	r2, [pc, #632]	; (8003e50 <HAL_ADC_ConfigChannel+0x2cc>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d033      	beq.n	8003c44 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d108      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x76>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0e9b      	lsrs	r3, r3, #26
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	e01d      	b.n	8003c36 <HAL_ADC_ConfigChannel+0xb2>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003c0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c12:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003c16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003c1e:	2320      	movs	r3, #32
 8003c20:	e004      	b.n	8003c2c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003c22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	2201      	movs	r2, #1
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	69d1      	ldr	r1, [r2, #28]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	6812      	ldr	r2, [r2, #0]
 8003c40:	430b      	orrs	r3, r1
 8003c42:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	6859      	ldr	r1, [r3, #4]
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	461a      	mov	r2, r3
 8003c52:	f7ff fc6f 	bl	8003534 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7ff fd63 	bl	8003726 <LL_ADC_REG_IsConversionOngoing>
 8003c60:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7ff fd6f 	bl	800374c <LL_ADC_INJ_IsConversionOngoing>
 8003c6e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f040 8270 	bne.w	800415c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f040 826b 	bne.w	800415c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6819      	ldr	r1, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	461a      	mov	r2, r3
 8003c94:	f7ff fc7a 	bl	800358c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a6c      	ldr	r2, [pc, #432]	; (8003e50 <HAL_ADC_ConfigChannel+0x2cc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d10d      	bne.n	8003cbe <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	08db      	lsrs	r3, r3, #3
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cbc:	e032      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003cbe:	4b65      	ldr	r3, [pc, #404]	; (8003e54 <HAL_ADC_ConfigChannel+0x2d0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003cc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cca:	d10b      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x160>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695a      	ldr	r2, [r3, #20]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	089b      	lsrs	r3, r3, #2
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	e01d      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x19c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10b      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x186>
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	089b      	lsrs	r3, r3, #2
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	e00a      	b.n	8003d20 <HAL_ADC_ConfigChannel+0x19c>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695a      	ldr	r2, [r3, #20]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	089b      	lsrs	r3, r3, #2
 8003d16:	f003 0304 	and.w	r3, r3, #4
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691b      	ldr	r3, [r3, #16]
 8003d28:	2b04      	cmp	r3, #4
 8003d2a:	d048      	beq.n	8003dbe <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6818      	ldr	r0, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	6919      	ldr	r1, [r3, #16]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d3c:	f7ff fb08 	bl	8003350 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a42      	ldr	r2, [pc, #264]	; (8003e50 <HAL_ADC_ConfigChannel+0x2cc>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d119      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6919      	ldr	r1, [r3, #16]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f7ff fba0 	bl	800349c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6818      	ldr	r0, [r3, #0]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6919      	ldr	r1, [r3, #16]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d102      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x1f0>
 8003d6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d72:	e000      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x1f2>
 8003d74:	2300      	movs	r3, #0
 8003d76:	461a      	mov	r2, r3
 8003d78:	f7ff fb6e 	bl	8003458 <LL_ADC_SetOffsetSaturation>
 8003d7c:	e1ee      	b.n	800415c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6919      	ldr	r1, [r3, #16]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x212>
 8003d90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d94:	e000      	b.n	8003d98 <HAL_ADC_ConfigChannel+0x214>
 8003d96:	2300      	movs	r3, #0
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f7ff fb3b 	bl	8003414 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6919      	ldr	r1, [r3, #16]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	7e1b      	ldrb	r3, [r3, #24]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d102      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x230>
 8003dae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003db2:	e000      	b.n	8003db6 <HAL_ADC_ConfigChannel+0x232>
 8003db4:	2300      	movs	r3, #0
 8003db6:	461a      	mov	r2, r3
 8003db8:	f7ff fb12 	bl	80033e0 <LL_ADC_SetDataRightShift>
 8003dbc:	e1ce      	b.n	800415c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <HAL_ADC_ConfigChannel+0x2cc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	f040 8181 	bne.w	80040cc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f7ff faef 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <HAL_ADC_ConfigChannel+0x272>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2100      	movs	r1, #0
 8003de6:	4618      	mov	r0, r3
 8003de8:	f7ff fae4 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003dec:	4603      	mov	r3, r0
 8003dee:	0e9b      	lsrs	r3, r3, #26
 8003df0:	f003 021f 	and.w	r2, r3, #31
 8003df4:	e01e      	b.n	8003e34 <HAL_ADC_ConfigChannel+0x2b0>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff fad9 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003e0c:	fa93 f3a3 	rbit	r3, r3
 8003e10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003e14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003e18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003e1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003e24:	2320      	movs	r3, #32
 8003e26:	e004      	b.n	8003e32 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003e28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e2c:	fab3 f383 	clz	r3, r3
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x2d4>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	0e9b      	lsrs	r3, r3, #26
 8003e46:	f003 031f 	and.w	r3, r3, #31
 8003e4a:	e01e      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x306>
 8003e4c:	47ff0000 	.word	0x47ff0000
 8003e50:	58026000 	.word	0x58026000
 8003e54:	5c001000 	.word	0x5c001000
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e64:	fa93 f3a3 	rbit	r3, r3
 8003e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003e74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003e7c:	2320      	movs	r3, #32
 8003e7e:	e004      	b.n	8003e8a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003e80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e84:	fab3 f383 	clz	r3, r3
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d106      	bne.n	8003e9c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2200      	movs	r2, #0
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff fb22 	bl	80034e0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2101      	movs	r1, #1
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7ff fa86 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x344>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2101      	movs	r1, #1
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff fa7b 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	0e9b      	lsrs	r3, r3, #26
 8003ec2:	f003 021f 	and.w	r2, r3, #31
 8003ec6:	e01e      	b.n	8003f06 <HAL_ADC_ConfigChannel+0x382>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fa70 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ede:	fa93 f3a3 	rbit	r3, r3
 8003ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003ee6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003eea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003eee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003ef6:	2320      	movs	r3, #32
 8003ef8:	e004      	b.n	8003f04 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003efa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d105      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x39a>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	0e9b      	lsrs	r3, r3, #26
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	e018      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x3cc>
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003f3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003f42:	2320      	movs	r3, #32
 8003f44:	e004      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003f46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d106      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff fabf 	bl	80034e0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2102      	movs	r1, #2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fa23 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x40a>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2102      	movs	r1, #2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fa18 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003f84:	4603      	mov	r3, r0
 8003f86:	0e9b      	lsrs	r3, r3, #26
 8003f88:	f003 021f 	and.w	r2, r3, #31
 8003f8c:	e01e      	b.n	8003fcc <HAL_ADC_ConfigChannel+0x448>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fa0d 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003fac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003fb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003fbc:	2320      	movs	r3, #32
 8003fbe:	e004      	b.n	8003fca <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fc4:	fab3 f383 	clz	r3, r3
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d105      	bne.n	8003fe4 <HAL_ADC_ConfigChannel+0x460>
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	0e9b      	lsrs	r3, r3, #26
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	e014      	b.n	800400e <HAL_ADC_ConfigChannel+0x48a>
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fec:	fa93 f3a3 	rbit	r3, r3
 8003ff0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003ff2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003ff8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004000:	2320      	movs	r3, #32
 8004002:	e004      	b.n	800400e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004004:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004008:	fab3 f383 	clz	r3, r3
 800400c:	b2db      	uxtb	r3, r3
 800400e:	429a      	cmp	r2, r3
 8004010:	d106      	bne.n	8004020 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2200      	movs	r2, #0
 8004018:	2102      	movs	r1, #2
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff fa60 	bl	80034e0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2103      	movs	r1, #3
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff f9c4 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 800402c:	4603      	mov	r3, r0
 800402e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10a      	bne.n	800404c <HAL_ADC_ConfigChannel+0x4c8>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2103      	movs	r1, #3
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff f9b9 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8004042:	4603      	mov	r3, r0
 8004044:	0e9b      	lsrs	r3, r3, #26
 8004046:	f003 021f 	and.w	r2, r3, #31
 800404a:	e017      	b.n	800407c <HAL_ADC_ConfigChannel+0x4f8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2103      	movs	r1, #3
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff f9ae 	bl	80033b4 <LL_ADC_GetOffsetChannel>
 8004058:	4603      	mov	r3, r0
 800405a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800405e:	fa93 f3a3 	rbit	r3, r3
 8004062:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004066:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800406e:	2320      	movs	r3, #32
 8004070:	e003      	b.n	800407a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004072:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004074:	fab3 f383 	clz	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x510>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	0e9b      	lsrs	r3, r3, #26
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	e011      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x534>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800409c:	fa93 f3a3 	rbit	r3, r3
 80040a0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80040a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040a4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80040a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80040ac:	2320      	movs	r3, #32
 80040ae:	e003      	b.n	80040b8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80040b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b2:	fab3 f383 	clz	r3, r3
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d14f      	bne.n	800415c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2200      	movs	r2, #0
 80040c2:	2103      	movs	r1, #3
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff fa0b 	bl	80034e0 <LL_ADC_SetOffsetState>
 80040ca:	e047      	b.n	800415c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	069b      	lsls	r3, r3, #26
 80040dc:	429a      	cmp	r2, r3
 80040de:	d107      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040ee:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	069b      	lsls	r3, r3, #26
 8004100:	429a      	cmp	r2, r3
 8004102:	d107      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004112:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800411a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	069b      	lsls	r3, r3, #26
 8004124:	429a      	cmp	r2, r3
 8004126:	d107      	bne.n	8004138 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004136:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800413e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	069b      	lsls	r3, r3, #26
 8004148:	429a      	cmp	r2, r3
 800414a:	d107      	bne.n	800415c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800415a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7ff facd 	bl	8003700 <LL_ADC_IsEnabled>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	f040 8219 	bne.w	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6819      	ldr	r1, [r3, #0]
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	461a      	mov	r2, r3
 800417c:	f7ff fa32 	bl	80035e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	4aa1      	ldr	r2, [pc, #644]	; (800440c <HAL_ADC_ConfigChannel+0x888>)
 8004186:	4293      	cmp	r3, r2
 8004188:	f040 812e 	bne.w	80043e8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10b      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x630>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0e9b      	lsrs	r3, r3, #26
 80041a2:	3301      	adds	r3, #1
 80041a4:	f003 031f 	and.w	r3, r3, #31
 80041a8:	2b09      	cmp	r3, #9
 80041aa:	bf94      	ite	ls
 80041ac:	2301      	movls	r3, #1
 80041ae:	2300      	movhi	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	e019      	b.n	80041e8 <HAL_ADC_ConfigChannel+0x664>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80041bc:	fa93 f3a3 	rbit	r3, r3
 80041c0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80041c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80041c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80041cc:	2320      	movs	r3, #32
 80041ce:	e003      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80041d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	3301      	adds	r3, #1
 80041da:	f003 031f 	and.w	r3, r3, #31
 80041de:	2b09      	cmp	r3, #9
 80041e0:	bf94      	ite	ls
 80041e2:	2301      	movls	r3, #1
 80041e4:	2300      	movhi	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d079      	beq.n	80042e0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d107      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x684>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	0e9b      	lsrs	r3, r3, #26
 80041fe:	3301      	adds	r3, #1
 8004200:	069b      	lsls	r3, r3, #26
 8004202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004206:	e015      	b.n	8004234 <HAL_ADC_ConfigChannel+0x6b0>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004218:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800421a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004220:	2320      	movs	r3, #32
 8004222:	e003      	b.n	800422c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	069b      	lsls	r3, r3, #26
 8004230:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x6d0>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	0e9b      	lsrs	r3, r3, #26
 8004246:	3301      	adds	r3, #1
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	2101      	movs	r1, #1
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	e017      	b.n	8004284 <HAL_ADC_ConfigChannel+0x700>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425c:	fa93 f3a3 	rbit	r3, r3
 8004260:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004264:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 800426c:	2320      	movs	r3, #32
 800426e:	e003      	b.n	8004278 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f003 031f 	and.w	r3, r3, #31
 800427e:	2101      	movs	r1, #1
 8004280:	fa01 f303 	lsl.w	r3, r1, r3
 8004284:	ea42 0103 	orr.w	r1, r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <HAL_ADC_ConfigChannel+0x726>
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	0e9b      	lsrs	r3, r3, #26
 800429a:	3301      	adds	r3, #1
 800429c:	f003 021f 	and.w	r2, r3, #31
 80042a0:	4613      	mov	r3, r2
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	4413      	add	r3, r2
 80042a6:	051b      	lsls	r3, r3, #20
 80042a8:	e018      	b.n	80042dc <HAL_ADC_ConfigChannel+0x758>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b2:	fa93 f3a3 	rbit	r3, r3
 80042b6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80042bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80042c2:	2320      	movs	r3, #32
 80042c4:	e003      	b.n	80042ce <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80042c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042c8:	fab3 f383 	clz	r3, r3
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	3301      	adds	r3, #1
 80042d0:	f003 021f 	and.w	r2, r3, #31
 80042d4:	4613      	mov	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	4413      	add	r3, r2
 80042da:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042dc:	430b      	orrs	r3, r1
 80042de:	e07e      	b.n	80043de <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d107      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x778>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0e9b      	lsrs	r3, r3, #26
 80042f2:	3301      	adds	r3, #1
 80042f4:	069b      	lsls	r3, r3, #26
 80042f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042fa:	e015      	b.n	8004328 <HAL_ADC_ConfigChannel+0x7a4>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004314:	2320      	movs	r3, #32
 8004316:	e003      	b.n	8004320 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	fab3 f383 	clz	r3, r3
 800431e:	b2db      	uxtb	r3, r3
 8004320:	3301      	adds	r3, #1
 8004322:	069b      	lsls	r3, r3, #26
 8004324:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004330:	2b00      	cmp	r3, #0
 8004332:	d109      	bne.n	8004348 <HAL_ADC_ConfigChannel+0x7c4>
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	0e9b      	lsrs	r3, r3, #26
 800433a:	3301      	adds	r3, #1
 800433c:	f003 031f 	and.w	r3, r3, #31
 8004340:	2101      	movs	r1, #1
 8004342:	fa01 f303 	lsl.w	r3, r1, r3
 8004346:	e017      	b.n	8004378 <HAL_ADC_ConfigChannel+0x7f4>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	fa93 f3a3 	rbit	r3, r3
 8004354:	61bb      	str	r3, [r7, #24]
  return result;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004360:	2320      	movs	r3, #32
 8004362:	e003      	b.n	800436c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	fab3 f383 	clz	r3, r3
 800436a:	b2db      	uxtb	r3, r3
 800436c:	3301      	adds	r3, #1
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2101      	movs	r1, #1
 8004374:	fa01 f303 	lsl.w	r3, r1, r3
 8004378:	ea42 0103 	orr.w	r1, r2, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10d      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x820>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0e9b      	lsrs	r3, r3, #26
 800438e:	3301      	adds	r3, #1
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	4613      	mov	r3, r2
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	4413      	add	r3, r2
 800439a:	3b1e      	subs	r3, #30
 800439c:	051b      	lsls	r3, r3, #20
 800439e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043a2:	e01b      	b.n	80043dc <HAL_ADC_ConfigChannel+0x858>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	60fb      	str	r3, [r7, #12]
  return result;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80043bc:	2320      	movs	r3, #32
 80043be:	e003      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	f003 021f 	and.w	r2, r3, #31
 80043ce:	4613      	mov	r3, r2
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	4413      	add	r3, r2
 80043d4:	3b1e      	subs	r3, #30
 80043d6:	051b      	lsls	r3, r3, #20
 80043d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043dc:	430b      	orrs	r3, r1
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	6892      	ldr	r2, [r2, #8]
 80043e2:	4619      	mov	r1, r3
 80043e4:	f7ff f8d2 	bl	800358c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f280 80d7 	bge.w	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a06      	ldr	r2, [pc, #24]	; (8004410 <HAL_ADC_ConfigChannel+0x88c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_ADC_ConfigChannel+0x882>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a04      	ldr	r2, [pc, #16]	; (8004414 <HAL_ADC_ConfigChannel+0x890>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10a      	bne.n	800441c <HAL_ADC_ConfigChannel+0x898>
 8004406:	4b04      	ldr	r3, [pc, #16]	; (8004418 <HAL_ADC_ConfigChannel+0x894>)
 8004408:	e009      	b.n	800441e <HAL_ADC_ConfigChannel+0x89a>
 800440a:	bf00      	nop
 800440c:	47ff0000 	.word	0x47ff0000
 8004410:	40022000 	.word	0x40022000
 8004414:	40022100 	.word	0x40022100
 8004418:	40022300 	.word	0x40022300
 800441c:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <HAL_ADC_ConfigChannel+0xa30>)
 800441e:	4618      	mov	r0, r3
 8004420:	f7fe ff88 	bl	8003334 <LL_ADC_GetCommonPathInternalCh>
 8004424:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a62      	ldr	r2, [pc, #392]	; (80045b8 <HAL_ADC_ConfigChannel+0xa34>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d004      	beq.n	800443c <HAL_ADC_ConfigChannel+0x8b8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a61      	ldr	r2, [pc, #388]	; (80045bc <HAL_ADC_ConfigChannel+0xa38>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d10e      	bne.n	800445a <HAL_ADC_ConfigChannel+0x8d6>
 800443c:	485e      	ldr	r0, [pc, #376]	; (80045b8 <HAL_ADC_ConfigChannel+0xa34>)
 800443e:	f7ff f95f 	bl	8003700 <LL_ADC_IsEnabled>
 8004442:	4604      	mov	r4, r0
 8004444:	485d      	ldr	r0, [pc, #372]	; (80045bc <HAL_ADC_ConfigChannel+0xa38>)
 8004446:	f7ff f95b 	bl	8003700 <LL_ADC_IsEnabled>
 800444a:	4603      	mov	r3, r0
 800444c:	4323      	orrs	r3, r4
 800444e:	2b00      	cmp	r3, #0
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	e008      	b.n	800446c <HAL_ADC_ConfigChannel+0x8e8>
 800445a:	4859      	ldr	r0, [pc, #356]	; (80045c0 <HAL_ADC_ConfigChannel+0xa3c>)
 800445c:	f7ff f950 	bl	8003700 <LL_ADC_IsEnabled>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	bf0c      	ite	eq
 8004466:	2301      	moveq	r3, #1
 8004468:	2300      	movne	r3, #0
 800446a:	b2db      	uxtb	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8084 	beq.w	800457a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a53      	ldr	r2, [pc, #332]	; (80045c4 <HAL_ADC_ConfigChannel+0xa40>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d132      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x95e>
 800447c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004480:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d12c      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a4c      	ldr	r2, [pc, #304]	; (80045c0 <HAL_ADC_ConfigChannel+0xa3c>)
 800448e:	4293      	cmp	r3, r2
 8004490:	f040 8086 	bne.w	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a47      	ldr	r2, [pc, #284]	; (80045b8 <HAL_ADC_ConfigChannel+0xa34>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_ADC_ConfigChannel+0x924>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a46      	ldr	r2, [pc, #280]	; (80045bc <HAL_ADC_ConfigChannel+0xa38>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d101      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x928>
 80044a8:	4a47      	ldr	r2, [pc, #284]	; (80045c8 <HAL_ADC_ConfigChannel+0xa44>)
 80044aa:	e000      	b.n	80044ae <HAL_ADC_ConfigChannel+0x92a>
 80044ac:	4a41      	ldr	r2, [pc, #260]	; (80045b4 <HAL_ADC_ConfigChannel+0xa30>)
 80044ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044b6:	4619      	mov	r1, r3
 80044b8:	4610      	mov	r0, r2
 80044ba:	f7fe ff28 	bl	800330e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044be:	4b43      	ldr	r3, [pc, #268]	; (80045cc <HAL_ADC_ConfigChannel+0xa48>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	099b      	lsrs	r3, r3, #6
 80044c4:	4a42      	ldr	r2, [pc, #264]	; (80045d0 <HAL_ADC_ConfigChannel+0xa4c>)
 80044c6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ca:	099b      	lsrs	r3, r3, #6
 80044cc:	3301      	adds	r3, #1
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044d2:	e002      	b.n	80044da <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1f9      	bne.n	80044d4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044e0:	e05e      	b.n	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a3b      	ldr	r2, [pc, #236]	; (80045d4 <HAL_ADC_ConfigChannel+0xa50>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d120      	bne.n	800452e <HAL_ADC_ConfigChannel+0x9aa>
 80044ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d11a      	bne.n	800452e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a30      	ldr	r2, [pc, #192]	; (80045c0 <HAL_ADC_ConfigChannel+0xa3c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d14e      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a2c      	ldr	r2, [pc, #176]	; (80045b8 <HAL_ADC_ConfigChannel+0xa34>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_ADC_ConfigChannel+0x992>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <HAL_ADC_ConfigChannel+0xa38>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d101      	bne.n	800451a <HAL_ADC_ConfigChannel+0x996>
 8004516:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <HAL_ADC_ConfigChannel+0xa44>)
 8004518:	e000      	b.n	800451c <HAL_ADC_ConfigChannel+0x998>
 800451a:	4a26      	ldr	r2, [pc, #152]	; (80045b4 <HAL_ADC_ConfigChannel+0xa30>)
 800451c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004520:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004524:	4619      	mov	r1, r3
 8004526:	4610      	mov	r0, r2
 8004528:	f7fe fef1 	bl	800330e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800452c:	e038      	b.n	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a29      	ldr	r2, [pc, #164]	; (80045d8 <HAL_ADC_ConfigChannel+0xa54>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d133      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
 8004538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800453c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d12d      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1d      	ldr	r2, [pc, #116]	; (80045c0 <HAL_ADC_ConfigChannel+0xa3c>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d128      	bne.n	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a19      	ldr	r2, [pc, #100]	; (80045b8 <HAL_ADC_ConfigChannel+0xa34>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d004      	beq.n	8004562 <HAL_ADC_ConfigChannel+0x9de>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a17      	ldr	r2, [pc, #92]	; (80045bc <HAL_ADC_ConfigChannel+0xa38>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d101      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x9e2>
 8004562:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <HAL_ADC_ConfigChannel+0xa44>)
 8004564:	e000      	b.n	8004568 <HAL_ADC_ConfigChannel+0x9e4>
 8004566:	4a13      	ldr	r2, [pc, #76]	; (80045b4 <HAL_ADC_ConfigChannel+0xa30>)
 8004568:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800456c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004570:	4619      	mov	r1, r3
 8004572:	4610      	mov	r0, r2
 8004574:	f7fe fecb 	bl	800330e <LL_ADC_SetCommonPathInternalCh>
 8004578:	e012      	b.n	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800457e:	f043 0220 	orr.w	r2, r3, #32
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800458c:	e008      	b.n	80045a0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004592:	f043 0220 	orr.w	r2, r3, #32
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80045a8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	37e4      	adds	r7, #228	; 0xe4
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd90      	pop	{r4, r7, pc}
 80045b4:	58026300 	.word	0x58026300
 80045b8:	40022000 	.word	0x40022000
 80045bc:	40022100 	.word	0x40022100
 80045c0:	58026000 	.word	0x58026000
 80045c4:	c7520000 	.word	0xc7520000
 80045c8:	40022300 	.word	0x40022300
 80045cc:	24000000 	.word	0x24000000
 80045d0:	053e2d63 	.word	0x053e2d63
 80045d4:	c3210000 	.word	0xc3210000
 80045d8:	cb840000 	.word	0xcb840000

080045dc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a6c      	ldr	r2, [pc, #432]	; (800479c <ADC_ConfigureBoostMode+0x1c0>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <ADC_ConfigureBoostMode+0x1c>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a6b      	ldr	r2, [pc, #428]	; (80047a0 <ADC_ConfigureBoostMode+0x1c4>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d109      	bne.n	800460c <ADC_ConfigureBoostMode+0x30>
 80045f8:	4b6a      	ldr	r3, [pc, #424]	; (80047a4 <ADC_ConfigureBoostMode+0x1c8>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	e008      	b.n	800461e <ADC_ConfigureBoostMode+0x42>
 800460c:	4b66      	ldr	r3, [pc, #408]	; (80047a8 <ADC_ConfigureBoostMode+0x1cc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01c      	beq.n	800465c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004622:	f006 fdef 	bl	800b204 <HAL_RCC_GetHCLKFreq>
 8004626:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004630:	d010      	beq.n	8004654 <ADC_ConfigureBoostMode+0x78>
 8004632:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004636:	d873      	bhi.n	8004720 <ADC_ConfigureBoostMode+0x144>
 8004638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800463c:	d002      	beq.n	8004644 <ADC_ConfigureBoostMode+0x68>
 800463e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004642:	d16d      	bne.n	8004720 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	0c1b      	lsrs	r3, r3, #16
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	60fb      	str	r3, [r7, #12]
        break;
 8004652:	e068      	b.n	8004726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	089b      	lsrs	r3, r3, #2
 8004658:	60fb      	str	r3, [r7, #12]
        break;
 800465a:	e064      	b.n	8004726 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800465c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004660:	f04f 0100 	mov.w	r1, #0
 8004664:	f007 ffca 	bl	800c5fc <HAL_RCCEx_GetPeriphCLKFreq>
 8004668:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004672:	d051      	beq.n	8004718 <ADC_ConfigureBoostMode+0x13c>
 8004674:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004678:	d854      	bhi.n	8004724 <ADC_ConfigureBoostMode+0x148>
 800467a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800467e:	d047      	beq.n	8004710 <ADC_ConfigureBoostMode+0x134>
 8004680:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004684:	d84e      	bhi.n	8004724 <ADC_ConfigureBoostMode+0x148>
 8004686:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800468a:	d03d      	beq.n	8004708 <ADC_ConfigureBoostMode+0x12c>
 800468c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004690:	d848      	bhi.n	8004724 <ADC_ConfigureBoostMode+0x148>
 8004692:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004696:	d033      	beq.n	8004700 <ADC_ConfigureBoostMode+0x124>
 8004698:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800469c:	d842      	bhi.n	8004724 <ADC_ConfigureBoostMode+0x148>
 800469e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80046a2:	d029      	beq.n	80046f8 <ADC_ConfigureBoostMode+0x11c>
 80046a4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80046a8:	d83c      	bhi.n	8004724 <ADC_ConfigureBoostMode+0x148>
 80046aa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80046ae:	d01a      	beq.n	80046e6 <ADC_ConfigureBoostMode+0x10a>
 80046b0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80046b4:	d836      	bhi.n	8004724 <ADC_ConfigureBoostMode+0x148>
 80046b6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80046ba:	d014      	beq.n	80046e6 <ADC_ConfigureBoostMode+0x10a>
 80046bc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80046c0:	d830      	bhi.n	8004724 <ADC_ConfigureBoostMode+0x148>
 80046c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046c6:	d00e      	beq.n	80046e6 <ADC_ConfigureBoostMode+0x10a>
 80046c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046cc:	d82a      	bhi.n	8004724 <ADC_ConfigureBoostMode+0x148>
 80046ce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046d2:	d008      	beq.n	80046e6 <ADC_ConfigureBoostMode+0x10a>
 80046d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046d8:	d824      	bhi.n	8004724 <ADC_ConfigureBoostMode+0x148>
 80046da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046de:	d002      	beq.n	80046e6 <ADC_ConfigureBoostMode+0x10a>
 80046e0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046e4:	d11e      	bne.n	8004724 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	0c9b      	lsrs	r3, r3, #18
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	60fb      	str	r3, [r7, #12]
        break;
 80046f6:	e016      	b.n	8004726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	091b      	lsrs	r3, r3, #4
 80046fc:	60fb      	str	r3, [r7, #12]
        break;
 80046fe:	e012      	b.n	8004726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	095b      	lsrs	r3, r3, #5
 8004704:	60fb      	str	r3, [r7, #12]
        break;
 8004706:	e00e      	b.n	8004726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	099b      	lsrs	r3, r3, #6
 800470c:	60fb      	str	r3, [r7, #12]
        break;
 800470e:	e00a      	b.n	8004726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	09db      	lsrs	r3, r3, #7
 8004714:	60fb      	str	r3, [r7, #12]
        break;
 8004716:	e006      	b.n	8004726 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	60fb      	str	r3, [r7, #12]
        break;
 800471e:	e002      	b.n	8004726 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004720:	bf00      	nop
 8004722:	e000      	b.n	8004726 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004724:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a1f      	ldr	r2, [pc, #124]	; (80047ac <ADC_ConfigureBoostMode+0x1d0>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d808      	bhi.n	8004746 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004742:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004744:	e025      	b.n	8004792 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <ADC_ConfigureBoostMode+0x1d4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d80a      	bhi.n	8004764 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004760:	609a      	str	r2, [r3, #8]
}
 8004762:	e016      	b.n	8004792 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	4a13      	ldr	r2, [pc, #76]	; (80047b4 <ADC_ConfigureBoostMode+0x1d8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d80a      	bhi.n	8004782 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477e:	609a      	str	r2, [r3, #8]
}
 8004780:	e007      	b.n	8004792 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004790:	609a      	str	r2, [r3, #8]
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40022000 	.word	0x40022000
 80047a0:	40022100 	.word	0x40022100
 80047a4:	40022300 	.word	0x40022300
 80047a8:	58026300 	.word	0x58026300
 80047ac:	005f5e10 	.word	0x005f5e10
 80047b0:	00bebc20 	.word	0x00bebc20
 80047b4:	017d7840 	.word	0x017d7840

080047b8 <LL_ADC_IsEnabled>:
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <LL_ADC_IsEnabled+0x18>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <LL_ADC_IsEnabled+0x1a>
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <LL_ADC_REG_IsConversionOngoing>:
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0304 	and.w	r3, r3, #4
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d101      	bne.n	80047f6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004804:	b590      	push	{r4, r7, lr}
 8004806:	b0a3      	sub	sp, #140	; 0x8c
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800481a:	2b01      	cmp	r3, #1
 800481c:	d101      	bne.n	8004822 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800481e:	2302      	movs	r3, #2
 8004820:	e0c1      	b.n	80049a6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800482a:	2300      	movs	r3, #0
 800482c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800482e:	2300      	movs	r3, #0
 8004830:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a5e      	ldr	r2, [pc, #376]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d102      	bne.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800483c:	4b5d      	ldr	r3, [pc, #372]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e001      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d10b      	bne.n	8004864 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0a0      	b.n	80049a6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff ffb9 	bl	80047de <LL_ADC_REG_IsConversionOngoing>
 800486c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f7ff ffb2 	bl	80047de <LL_ADC_REG_IsConversionOngoing>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	f040 8081 	bne.w	8004984 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004882:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004886:	2b00      	cmp	r3, #0
 8004888:	d17c      	bne.n	8004984 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a48      	ldr	r2, [pc, #288]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a46      	ldr	r2, [pc, #280]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d101      	bne.n	80048a2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800489e:	4b46      	ldr	r3, [pc, #280]	; (80049b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80048a0:	e000      	b.n	80048a4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80048a2:	4b46      	ldr	r3, [pc, #280]	; (80049bc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80048a4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d039      	beq.n	8004922 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048be:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a3a      	ldr	r2, [pc, #232]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a39      	ldr	r2, [pc, #228]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d10e      	bne.n	80048f2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80048d4:	4836      	ldr	r0, [pc, #216]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048d6:	f7ff ff6f 	bl	80047b8 <LL_ADC_IsEnabled>
 80048da:	4604      	mov	r4, r0
 80048dc:	4835      	ldr	r0, [pc, #212]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048de:	f7ff ff6b 	bl	80047b8 <LL_ADC_IsEnabled>
 80048e2:	4603      	mov	r3, r0
 80048e4:	4323      	orrs	r3, r4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	e008      	b.n	8004904 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80048f2:	4833      	ldr	r0, [pc, #204]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80048f4:	f7ff ff60 	bl	80047b8 <LL_ADC_IsEnabled>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf0c      	ite	eq
 80048fe:	2301      	moveq	r3, #1
 8004900:	2300      	movne	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d047      	beq.n	8004998 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	4b2d      	ldr	r3, [pc, #180]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800490e:	4013      	ands	r3, r2
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	6811      	ldr	r1, [r2, #0]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	6892      	ldr	r2, [r2, #8]
 8004918:	430a      	orrs	r2, r1
 800491a:	431a      	orrs	r2, r3
 800491c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800491e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004920:	e03a      	b.n	8004998 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004922:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800492a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800492c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d004      	beq.n	8004942 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d10e      	bne.n	8004960 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004942:	481b      	ldr	r0, [pc, #108]	; (80049b0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004944:	f7ff ff38 	bl	80047b8 <LL_ADC_IsEnabled>
 8004948:	4604      	mov	r4, r0
 800494a:	481a      	ldr	r0, [pc, #104]	; (80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800494c:	f7ff ff34 	bl	80047b8 <LL_ADC_IsEnabled>
 8004950:	4603      	mov	r3, r0
 8004952:	4323      	orrs	r3, r4
 8004954:	2b00      	cmp	r3, #0
 8004956:	bf0c      	ite	eq
 8004958:	2301      	moveq	r3, #1
 800495a:	2300      	movne	r3, #0
 800495c:	b2db      	uxtb	r3, r3
 800495e:	e008      	b.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004960:	4817      	ldr	r0, [pc, #92]	; (80049c0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004962:	f7ff ff29 	bl	80047b8 <LL_ADC_IsEnabled>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	bf0c      	ite	eq
 800496c:	2301      	moveq	r3, #1
 800496e:	2300      	movne	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d010      	beq.n	8004998 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004976:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	4b12      	ldr	r3, [pc, #72]	; (80049c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800497c:	4013      	ands	r3, r2
 800497e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004980:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004982:	e009      	b.n	8004998 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004988:	f043 0220 	orr.w	r2, r3, #32
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8004996:	e000      	b.n	800499a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004998:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80049a2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	378c      	adds	r7, #140	; 0x8c
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd90      	pop	{r4, r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40022000 	.word	0x40022000
 80049b4:	40022100 	.word	0x40022100
 80049b8:	40022300 	.word	0x40022300
 80049bc:	58026300 	.word	0x58026300
 80049c0:	58026000 	.word	0x58026000
 80049c4:	fffff0e0 	.word	0xfffff0e0

080049c8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e023      	b.n	8004a22 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d106      	bne.n	80049f4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7fd fb32 	bl	8002058 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <__NVIC_SetPriorityGrouping+0x40>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <__NVIC_SetPriorityGrouping+0x44>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a5a:	4a04      	ldr	r2, [pc, #16]	; (8004a6c <__NVIC_SetPriorityGrouping+0x40>)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	60d3      	str	r3, [r2, #12]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	e000ed00 	.word	0xe000ed00
 8004a70:	05fa0000 	.word	0x05fa0000

08004a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <__NVIC_GetPriorityGrouping+0x18>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	0a1b      	lsrs	r3, r3, #8
 8004a7e:	f003 0307 	and.w	r3, r3, #7
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	db0b      	blt.n	8004aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	f003 021f 	and.w	r2, r3, #31
 8004aa8:	4907      	ldr	r1, [pc, #28]	; (8004ac8 <__NVIC_EnableIRQ+0x38>)
 8004aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aae:	095b      	lsrs	r3, r3, #5
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	e000e100 	.word	0xe000e100

08004acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	6039      	str	r1, [r7, #0]
 8004ad6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ad8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	db0a      	blt.n	8004af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	b2da      	uxtb	r2, r3
 8004ae4:	490c      	ldr	r1, [pc, #48]	; (8004b18 <__NVIC_SetPriority+0x4c>)
 8004ae6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aea:	0112      	lsls	r2, r2, #4
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	440b      	add	r3, r1
 8004af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004af4:	e00a      	b.n	8004b0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	4908      	ldr	r1, [pc, #32]	; (8004b1c <__NVIC_SetPriority+0x50>)
 8004afc:	88fb      	ldrh	r3, [r7, #6]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	3b04      	subs	r3, #4
 8004b04:	0112      	lsls	r2, r2, #4
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	440b      	add	r3, r1
 8004b0a:	761a      	strb	r2, [r3, #24]
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	e000e100 	.word	0xe000e100
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b089      	sub	sp, #36	; 0x24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f1c3 0307 	rsb	r3, r3, #7
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	bf28      	it	cs
 8004b3e:	2304      	movcs	r3, #4
 8004b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	3304      	adds	r3, #4
 8004b46:	2b06      	cmp	r3, #6
 8004b48:	d902      	bls.n	8004b50 <NVIC_EncodePriority+0x30>
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	3b03      	subs	r3, #3
 8004b4e:	e000      	b.n	8004b52 <NVIC_EncodePriority+0x32>
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b54:	f04f 32ff 	mov.w	r2, #4294967295
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43da      	mvns	r2, r3
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	401a      	ands	r2, r3
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b68:	f04f 31ff 	mov.w	r1, #4294967295
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b72:	43d9      	mvns	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b78:	4313      	orrs	r3, r2
         );
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3724      	adds	r7, #36	; 0x24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
	...

08004b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b98:	d301      	bcc.n	8004b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e00f      	b.n	8004bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b9e:	4a0a      	ldr	r2, [pc, #40]	; (8004bc8 <SysTick_Config+0x40>)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ba6:	210f      	movs	r1, #15
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	f7ff ff8e 	bl	8004acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bb0:	4b05      	ldr	r3, [pc, #20]	; (8004bc8 <SysTick_Config+0x40>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bb6:	4b04      	ldr	r3, [pc, #16]	; (8004bc8 <SysTick_Config+0x40>)
 8004bb8:	2207      	movs	r2, #7
 8004bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	e000e010 	.word	0xe000e010

08004bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff ff29 	bl	8004a2c <__NVIC_SetPriorityGrouping>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b086      	sub	sp, #24
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	4603      	mov	r3, r0
 8004bea:	60b9      	str	r1, [r7, #8]
 8004bec:	607a      	str	r2, [r7, #4]
 8004bee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bf0:	f7ff ff40 	bl	8004a74 <__NVIC_GetPriorityGrouping>
 8004bf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	6978      	ldr	r0, [r7, #20]
 8004bfc:	f7ff ff90 	bl	8004b20 <NVIC_EncodePriority>
 8004c00:	4602      	mov	r2, r0
 8004c02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c06:	4611      	mov	r1, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff ff5f 	bl	8004acc <__NVIC_SetPriority>
}
 8004c0e:	bf00      	nop
 8004c10:	3718      	adds	r7, #24
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7ff ff33 	bl	8004a90 <__NVIC_EnableIRQ>
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b082      	sub	sp, #8
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f7ff ffa4 	bl	8004b88 <SysTick_Config>
 8004c40:	4603      	mov	r3, r0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
	...

08004c4c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e054      	b.n	8004d08 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	7f5b      	ldrb	r3, [r3, #29]
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d105      	bne.n	8004c74 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fd fa14 	bl	800209c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	791b      	ldrb	r3, [r3, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10c      	bne.n	8004c9c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a22      	ldr	r2, [pc, #136]	; (8004d10 <HAL_CRC_Init+0xc4>)
 8004c88:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0218 	bic.w	r2, r2, #24
 8004c98:	609a      	str	r2, [r3, #8]
 8004c9a:	e00c      	b.n	8004cb6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6899      	ldr	r1, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f834 	bl	8004d14 <HAL_CRCEx_Polynomial_Set>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e028      	b.n	8004d08 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	795b      	ldrb	r3, [r3, #5]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d105      	bne.n	8004cca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc6:	611a      	str	r2, [r3, #16]
 8004cc8:	e004      	b.n	8004cd4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6912      	ldr	r2, [r2, #16]
 8004cd2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	699a      	ldr	r2, [r3, #24]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	430a      	orrs	r2, r1
 8004cfe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	04c11db7 	.word	0x04c11db7

08004d14 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004d24:	231f      	movs	r3, #31
 8004d26:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
 8004d36:	e063      	b.n	8004e00 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004d38:	bf00      	nop
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1e5a      	subs	r2, r3, #1
 8004d3e:	613a      	str	r2, [r7, #16]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <HAL_CRCEx_Polynomial_Set+0x44>
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f003 031f 	and.w	r3, r3, #31
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004d50:	f003 0301 	and.w	r3, r3, #1
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b18      	cmp	r3, #24
 8004d5c:	d846      	bhi.n	8004dec <HAL_CRCEx_Polynomial_Set+0xd8>
 8004d5e:	a201      	add	r2, pc, #4	; (adr r2, 8004d64 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d64:	08004df3 	.word	0x08004df3
 8004d68:	08004ded 	.word	0x08004ded
 8004d6c:	08004ded 	.word	0x08004ded
 8004d70:	08004ded 	.word	0x08004ded
 8004d74:	08004ded 	.word	0x08004ded
 8004d78:	08004ded 	.word	0x08004ded
 8004d7c:	08004ded 	.word	0x08004ded
 8004d80:	08004ded 	.word	0x08004ded
 8004d84:	08004de1 	.word	0x08004de1
 8004d88:	08004ded 	.word	0x08004ded
 8004d8c:	08004ded 	.word	0x08004ded
 8004d90:	08004ded 	.word	0x08004ded
 8004d94:	08004ded 	.word	0x08004ded
 8004d98:	08004ded 	.word	0x08004ded
 8004d9c:	08004ded 	.word	0x08004ded
 8004da0:	08004ded 	.word	0x08004ded
 8004da4:	08004dd5 	.word	0x08004dd5
 8004da8:	08004ded 	.word	0x08004ded
 8004dac:	08004ded 	.word	0x08004ded
 8004db0:	08004ded 	.word	0x08004ded
 8004db4:	08004ded 	.word	0x08004ded
 8004db8:	08004ded 	.word	0x08004ded
 8004dbc:	08004ded 	.word	0x08004ded
 8004dc0:	08004ded 	.word	0x08004ded
 8004dc4:	08004dc9 	.word	0x08004dc9
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b06      	cmp	r3, #6
 8004dcc:	d913      	bls.n	8004df6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004dd2:	e010      	b.n	8004df6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	2b07      	cmp	r3, #7
 8004dd8:	d90f      	bls.n	8004dfa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004dde:	e00c      	b.n	8004dfa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	2b0f      	cmp	r3, #15
 8004de4:	d90b      	bls.n	8004dfe <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004dea:	e008      	b.n	8004dfe <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	75fb      	strb	r3, [r7, #23]
        break;
 8004df0:	e006      	b.n	8004e00 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004df2:	bf00      	nop
 8004df4:	e004      	b.n	8004e00 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004df6:	bf00      	nop
 8004df8:	e002      	b.n	8004e00 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004dfa:	bf00      	nop
 8004dfc:	e000      	b.n	8004e00 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004dfe:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004e00:	7dfb      	ldrb	r3, [r7, #23]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10d      	bne.n	8004e22 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f023 0118 	bic.w	r1, r3, #24
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
 8004e3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e226      	b.n	800529a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_DMA_Start_IT+0x2a>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e21f      	b.n	800529a <HAL_DMA_Start_IT+0x46a>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	f040 820a 	bne.w	8005284 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a68      	ldr	r2, [pc, #416]	; (8005024 <HAL_DMA_Start_IT+0x1f4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d04a      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a66      	ldr	r2, [pc, #408]	; (8005028 <HAL_DMA_Start_IT+0x1f8>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d045      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a65      	ldr	r2, [pc, #404]	; (800502c <HAL_DMA_Start_IT+0x1fc>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d040      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a63      	ldr	r2, [pc, #396]	; (8005030 <HAL_DMA_Start_IT+0x200>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d03b      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a62      	ldr	r2, [pc, #392]	; (8005034 <HAL_DMA_Start_IT+0x204>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d036      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a60      	ldr	r2, [pc, #384]	; (8005038 <HAL_DMA_Start_IT+0x208>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d031      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a5f      	ldr	r2, [pc, #380]	; (800503c <HAL_DMA_Start_IT+0x20c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d02c      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a5d      	ldr	r2, [pc, #372]	; (8005040 <HAL_DMA_Start_IT+0x210>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d027      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a5c      	ldr	r2, [pc, #368]	; (8005044 <HAL_DMA_Start_IT+0x214>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d022      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a5a      	ldr	r2, [pc, #360]	; (8005048 <HAL_DMA_Start_IT+0x218>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d01d      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a59      	ldr	r2, [pc, #356]	; (800504c <HAL_DMA_Start_IT+0x21c>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d018      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a57      	ldr	r2, [pc, #348]	; (8005050 <HAL_DMA_Start_IT+0x220>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d013      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a56      	ldr	r2, [pc, #344]	; (8005054 <HAL_DMA_Start_IT+0x224>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d00e      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a54      	ldr	r2, [pc, #336]	; (8005058 <HAL_DMA_Start_IT+0x228>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d009      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a53      	ldr	r2, [pc, #332]	; (800505c <HAL_DMA_Start_IT+0x22c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d004      	beq.n	8004f1e <HAL_DMA_Start_IT+0xee>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a51      	ldr	r2, [pc, #324]	; (8005060 <HAL_DMA_Start_IT+0x230>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d108      	bne.n	8004f30 <HAL_DMA_Start_IT+0x100>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0201 	bic.w	r2, r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	e007      	b.n	8004f40 <HAL_DMA_Start_IT+0x110>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0201 	bic.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68b9      	ldr	r1, [r7, #8]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fc3c 	bl	80057c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a34      	ldr	r2, [pc, #208]	; (8005024 <HAL_DMA_Start_IT+0x1f4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d04a      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a33      	ldr	r2, [pc, #204]	; (8005028 <HAL_DMA_Start_IT+0x1f8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d045      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a31      	ldr	r2, [pc, #196]	; (800502c <HAL_DMA_Start_IT+0x1fc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d040      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a30      	ldr	r2, [pc, #192]	; (8005030 <HAL_DMA_Start_IT+0x200>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d03b      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a2e      	ldr	r2, [pc, #184]	; (8005034 <HAL_DMA_Start_IT+0x204>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d036      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a2d      	ldr	r2, [pc, #180]	; (8005038 <HAL_DMA_Start_IT+0x208>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d031      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a2b      	ldr	r2, [pc, #172]	; (800503c <HAL_DMA_Start_IT+0x20c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d02c      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a2a      	ldr	r2, [pc, #168]	; (8005040 <HAL_DMA_Start_IT+0x210>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d027      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a28      	ldr	r2, [pc, #160]	; (8005044 <HAL_DMA_Start_IT+0x214>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d022      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a27      	ldr	r2, [pc, #156]	; (8005048 <HAL_DMA_Start_IT+0x218>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d01d      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a25      	ldr	r2, [pc, #148]	; (800504c <HAL_DMA_Start_IT+0x21c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d018      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a24      	ldr	r2, [pc, #144]	; (8005050 <HAL_DMA_Start_IT+0x220>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d013      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a22      	ldr	r2, [pc, #136]	; (8005054 <HAL_DMA_Start_IT+0x224>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00e      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a21      	ldr	r2, [pc, #132]	; (8005058 <HAL_DMA_Start_IT+0x228>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d009      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	; (800505c <HAL_DMA_Start_IT+0x22c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d004      	beq.n	8004fec <HAL_DMA_Start_IT+0x1bc>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_DMA_Start_IT+0x230>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d101      	bne.n	8004ff0 <HAL_DMA_Start_IT+0x1c0>
 8004fec:	2301      	movs	r3, #1
 8004fee:	e000      	b.n	8004ff2 <HAL_DMA_Start_IT+0x1c2>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d036      	beq.n	8005064 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f023 021e 	bic.w	r2, r3, #30
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0216 	orr.w	r2, r2, #22
 8005008:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	2b00      	cmp	r3, #0
 8005010:	d03e      	beq.n	8005090 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0208 	orr.w	r2, r2, #8
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e035      	b.n	8005090 <HAL_DMA_Start_IT+0x260>
 8005024:	40020010 	.word	0x40020010
 8005028:	40020028 	.word	0x40020028
 800502c:	40020040 	.word	0x40020040
 8005030:	40020058 	.word	0x40020058
 8005034:	40020070 	.word	0x40020070
 8005038:	40020088 	.word	0x40020088
 800503c:	400200a0 	.word	0x400200a0
 8005040:	400200b8 	.word	0x400200b8
 8005044:	40020410 	.word	0x40020410
 8005048:	40020428 	.word	0x40020428
 800504c:	40020440 	.word	0x40020440
 8005050:	40020458 	.word	0x40020458
 8005054:	40020470 	.word	0x40020470
 8005058:	40020488 	.word	0x40020488
 800505c:	400204a0 	.word	0x400204a0
 8005060:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 020e 	bic.w	r2, r3, #14
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 020a 	orr.w	r2, r2, #10
 8005076:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f042 0204 	orr.w	r2, r2, #4
 800508e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a83      	ldr	r2, [pc, #524]	; (80052a4 <HAL_DMA_Start_IT+0x474>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d072      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a82      	ldr	r2, [pc, #520]	; (80052a8 <HAL_DMA_Start_IT+0x478>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d06d      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a80      	ldr	r2, [pc, #512]	; (80052ac <HAL_DMA_Start_IT+0x47c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d068      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a7f      	ldr	r2, [pc, #508]	; (80052b0 <HAL_DMA_Start_IT+0x480>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d063      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a7d      	ldr	r2, [pc, #500]	; (80052b4 <HAL_DMA_Start_IT+0x484>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d05e      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a7c      	ldr	r2, [pc, #496]	; (80052b8 <HAL_DMA_Start_IT+0x488>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d059      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a7a      	ldr	r2, [pc, #488]	; (80052bc <HAL_DMA_Start_IT+0x48c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d054      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a79      	ldr	r2, [pc, #484]	; (80052c0 <HAL_DMA_Start_IT+0x490>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d04f      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a77      	ldr	r2, [pc, #476]	; (80052c4 <HAL_DMA_Start_IT+0x494>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d04a      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a76      	ldr	r2, [pc, #472]	; (80052c8 <HAL_DMA_Start_IT+0x498>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d045      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a74      	ldr	r2, [pc, #464]	; (80052cc <HAL_DMA_Start_IT+0x49c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d040      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a73      	ldr	r2, [pc, #460]	; (80052d0 <HAL_DMA_Start_IT+0x4a0>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d03b      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a71      	ldr	r2, [pc, #452]	; (80052d4 <HAL_DMA_Start_IT+0x4a4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d036      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a70      	ldr	r2, [pc, #448]	; (80052d8 <HAL_DMA_Start_IT+0x4a8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d031      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a6e      	ldr	r2, [pc, #440]	; (80052dc <HAL_DMA_Start_IT+0x4ac>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d02c      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a6d      	ldr	r2, [pc, #436]	; (80052e0 <HAL_DMA_Start_IT+0x4b0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d027      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a6b      	ldr	r2, [pc, #428]	; (80052e4 <HAL_DMA_Start_IT+0x4b4>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d022      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a6a      	ldr	r2, [pc, #424]	; (80052e8 <HAL_DMA_Start_IT+0x4b8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d01d      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a68      	ldr	r2, [pc, #416]	; (80052ec <HAL_DMA_Start_IT+0x4bc>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d018      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a67      	ldr	r2, [pc, #412]	; (80052f0 <HAL_DMA_Start_IT+0x4c0>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d013      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a65      	ldr	r2, [pc, #404]	; (80052f4 <HAL_DMA_Start_IT+0x4c4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d00e      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a64      	ldr	r2, [pc, #400]	; (80052f8 <HAL_DMA_Start_IT+0x4c8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d009      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a62      	ldr	r2, [pc, #392]	; (80052fc <HAL_DMA_Start_IT+0x4cc>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d004      	beq.n	8005180 <HAL_DMA_Start_IT+0x350>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a61      	ldr	r2, [pc, #388]	; (8005300 <HAL_DMA_Start_IT+0x4d0>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d101      	bne.n	8005184 <HAL_DMA_Start_IT+0x354>
 8005180:	2301      	movs	r3, #1
 8005182:	e000      	b.n	8005186 <HAL_DMA_Start_IT+0x356>
 8005184:	2300      	movs	r3, #0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d01a      	beq.n	80051c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d007      	beq.n	80051c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a37      	ldr	r2, [pc, #220]	; (80052a4 <HAL_DMA_Start_IT+0x474>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d04a      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a36      	ldr	r2, [pc, #216]	; (80052a8 <HAL_DMA_Start_IT+0x478>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d045      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a34      	ldr	r2, [pc, #208]	; (80052ac <HAL_DMA_Start_IT+0x47c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d040      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a33      	ldr	r2, [pc, #204]	; (80052b0 <HAL_DMA_Start_IT+0x480>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d03b      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a31      	ldr	r2, [pc, #196]	; (80052b4 <HAL_DMA_Start_IT+0x484>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d036      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a30      	ldr	r2, [pc, #192]	; (80052b8 <HAL_DMA_Start_IT+0x488>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d031      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a2e      	ldr	r2, [pc, #184]	; (80052bc <HAL_DMA_Start_IT+0x48c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d02c      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a2d      	ldr	r2, [pc, #180]	; (80052c0 <HAL_DMA_Start_IT+0x490>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d027      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a2b      	ldr	r2, [pc, #172]	; (80052c4 <HAL_DMA_Start_IT+0x494>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d022      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a2a      	ldr	r2, [pc, #168]	; (80052c8 <HAL_DMA_Start_IT+0x498>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d01d      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a28      	ldr	r2, [pc, #160]	; (80052cc <HAL_DMA_Start_IT+0x49c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d018      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <HAL_DMA_Start_IT+0x4a0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a25      	ldr	r2, [pc, #148]	; (80052d4 <HAL_DMA_Start_IT+0x4a4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d00e      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a24      	ldr	r2, [pc, #144]	; (80052d8 <HAL_DMA_Start_IT+0x4a8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d009      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a22      	ldr	r2, [pc, #136]	; (80052dc <HAL_DMA_Start_IT+0x4ac>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d004      	beq.n	8005260 <HAL_DMA_Start_IT+0x430>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a21      	ldr	r2, [pc, #132]	; (80052e0 <HAL_DMA_Start_IT+0x4b0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d108      	bne.n	8005272 <HAL_DMA_Start_IT+0x442>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0201 	orr.w	r2, r2, #1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	e012      	b.n	8005298 <HAL_DMA_Start_IT+0x468>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0201 	orr.w	r2, r2, #1
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e009      	b.n	8005298 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800528a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005298:	7dfb      	ldrb	r3, [r7, #23]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3718      	adds	r7, #24
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	40020010 	.word	0x40020010
 80052a8:	40020028 	.word	0x40020028
 80052ac:	40020040 	.word	0x40020040
 80052b0:	40020058 	.word	0x40020058
 80052b4:	40020070 	.word	0x40020070
 80052b8:	40020088 	.word	0x40020088
 80052bc:	400200a0 	.word	0x400200a0
 80052c0:	400200b8 	.word	0x400200b8
 80052c4:	40020410 	.word	0x40020410
 80052c8:	40020428 	.word	0x40020428
 80052cc:	40020440 	.word	0x40020440
 80052d0:	40020458 	.word	0x40020458
 80052d4:	40020470 	.word	0x40020470
 80052d8:	40020488 	.word	0x40020488
 80052dc:	400204a0 	.word	0x400204a0
 80052e0:	400204b8 	.word	0x400204b8
 80052e4:	58025408 	.word	0x58025408
 80052e8:	5802541c 	.word	0x5802541c
 80052ec:	58025430 	.word	0x58025430
 80052f0:	58025444 	.word	0x58025444
 80052f4:	58025458 	.word	0x58025458
 80052f8:	5802546c 	.word	0x5802546c
 80052fc:	58025480 	.word	0x58025480
 8005300:	58025494 	.word	0x58025494

08005304 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e237      	b.n	8005786 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d004      	beq.n	800532c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2280      	movs	r2, #128	; 0x80
 8005326:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e22c      	b.n	8005786 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a5c      	ldr	r2, [pc, #368]	; (80054a4 <HAL_DMA_Abort_IT+0x1a0>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d04a      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a5b      	ldr	r2, [pc, #364]	; (80054a8 <HAL_DMA_Abort_IT+0x1a4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d045      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a59      	ldr	r2, [pc, #356]	; (80054ac <HAL_DMA_Abort_IT+0x1a8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d040      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a58      	ldr	r2, [pc, #352]	; (80054b0 <HAL_DMA_Abort_IT+0x1ac>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d03b      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a56      	ldr	r2, [pc, #344]	; (80054b4 <HAL_DMA_Abort_IT+0x1b0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d036      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a55      	ldr	r2, [pc, #340]	; (80054b8 <HAL_DMA_Abort_IT+0x1b4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d031      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a53      	ldr	r2, [pc, #332]	; (80054bc <HAL_DMA_Abort_IT+0x1b8>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d02c      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a52      	ldr	r2, [pc, #328]	; (80054c0 <HAL_DMA_Abort_IT+0x1bc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d027      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a50      	ldr	r2, [pc, #320]	; (80054c4 <HAL_DMA_Abort_IT+0x1c0>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d022      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a4f      	ldr	r2, [pc, #316]	; (80054c8 <HAL_DMA_Abort_IT+0x1c4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d01d      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a4d      	ldr	r2, [pc, #308]	; (80054cc <HAL_DMA_Abort_IT+0x1c8>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d018      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a4c      	ldr	r2, [pc, #304]	; (80054d0 <HAL_DMA_Abort_IT+0x1cc>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a4a      	ldr	r2, [pc, #296]	; (80054d4 <HAL_DMA_Abort_IT+0x1d0>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00e      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a49      	ldr	r2, [pc, #292]	; (80054d8 <HAL_DMA_Abort_IT+0x1d4>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a47      	ldr	r2, [pc, #284]	; (80054dc <HAL_DMA_Abort_IT+0x1d8>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_DMA_Abort_IT+0xc8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a46      	ldr	r2, [pc, #280]	; (80054e0 <HAL_DMA_Abort_IT+0x1dc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d101      	bne.n	80053d0 <HAL_DMA_Abort_IT+0xcc>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e000      	b.n	80053d2 <HAL_DMA_Abort_IT+0xce>
 80053d0:	2300      	movs	r3, #0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8086 	beq.w	80054e4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2204      	movs	r2, #4
 80053dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a2f      	ldr	r2, [pc, #188]	; (80054a4 <HAL_DMA_Abort_IT+0x1a0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d04a      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2e      	ldr	r2, [pc, #184]	; (80054a8 <HAL_DMA_Abort_IT+0x1a4>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d045      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <HAL_DMA_Abort_IT+0x1a8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d040      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a2b      	ldr	r2, [pc, #172]	; (80054b0 <HAL_DMA_Abort_IT+0x1ac>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d03b      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a29      	ldr	r2, [pc, #164]	; (80054b4 <HAL_DMA_Abort_IT+0x1b0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d036      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a28      	ldr	r2, [pc, #160]	; (80054b8 <HAL_DMA_Abort_IT+0x1b4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d031      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a26      	ldr	r2, [pc, #152]	; (80054bc <HAL_DMA_Abort_IT+0x1b8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d02c      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a25      	ldr	r2, [pc, #148]	; (80054c0 <HAL_DMA_Abort_IT+0x1bc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d027      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a23      	ldr	r2, [pc, #140]	; (80054c4 <HAL_DMA_Abort_IT+0x1c0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d022      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a22      	ldr	r2, [pc, #136]	; (80054c8 <HAL_DMA_Abort_IT+0x1c4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d01d      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a20      	ldr	r2, [pc, #128]	; (80054cc <HAL_DMA_Abort_IT+0x1c8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d018      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a1f      	ldr	r2, [pc, #124]	; (80054d0 <HAL_DMA_Abort_IT+0x1cc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d013      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a1d      	ldr	r2, [pc, #116]	; (80054d4 <HAL_DMA_Abort_IT+0x1d0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00e      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a1c      	ldr	r2, [pc, #112]	; (80054d8 <HAL_DMA_Abort_IT+0x1d4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d009      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a1a      	ldr	r2, [pc, #104]	; (80054dc <HAL_DMA_Abort_IT+0x1d8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <HAL_DMA_Abort_IT+0x17c>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a19      	ldr	r2, [pc, #100]	; (80054e0 <HAL_DMA_Abort_IT+0x1dc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d108      	bne.n	8005492 <HAL_DMA_Abort_IT+0x18e>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	e178      	b.n	8005784 <HAL_DMA_Abort_IT+0x480>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	e16f      	b.n	8005784 <HAL_DMA_Abort_IT+0x480>
 80054a4:	40020010 	.word	0x40020010
 80054a8:	40020028 	.word	0x40020028
 80054ac:	40020040 	.word	0x40020040
 80054b0:	40020058 	.word	0x40020058
 80054b4:	40020070 	.word	0x40020070
 80054b8:	40020088 	.word	0x40020088
 80054bc:	400200a0 	.word	0x400200a0
 80054c0:	400200b8 	.word	0x400200b8
 80054c4:	40020410 	.word	0x40020410
 80054c8:	40020428 	.word	0x40020428
 80054cc:	40020440 	.word	0x40020440
 80054d0:	40020458 	.word	0x40020458
 80054d4:	40020470 	.word	0x40020470
 80054d8:	40020488 	.word	0x40020488
 80054dc:	400204a0 	.word	0x400204a0
 80054e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 020e 	bic.w	r2, r2, #14
 80054f2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a6c      	ldr	r2, [pc, #432]	; (80056ac <HAL_DMA_Abort_IT+0x3a8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d04a      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a6b      	ldr	r2, [pc, #428]	; (80056b0 <HAL_DMA_Abort_IT+0x3ac>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d045      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a69      	ldr	r2, [pc, #420]	; (80056b4 <HAL_DMA_Abort_IT+0x3b0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d040      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a68      	ldr	r2, [pc, #416]	; (80056b8 <HAL_DMA_Abort_IT+0x3b4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d03b      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a66      	ldr	r2, [pc, #408]	; (80056bc <HAL_DMA_Abort_IT+0x3b8>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d036      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a65      	ldr	r2, [pc, #404]	; (80056c0 <HAL_DMA_Abort_IT+0x3bc>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d031      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a63      	ldr	r2, [pc, #396]	; (80056c4 <HAL_DMA_Abort_IT+0x3c0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d02c      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a62      	ldr	r2, [pc, #392]	; (80056c8 <HAL_DMA_Abort_IT+0x3c4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d027      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a60      	ldr	r2, [pc, #384]	; (80056cc <HAL_DMA_Abort_IT+0x3c8>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d022      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a5f      	ldr	r2, [pc, #380]	; (80056d0 <HAL_DMA_Abort_IT+0x3cc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d01d      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a5d      	ldr	r2, [pc, #372]	; (80056d4 <HAL_DMA_Abort_IT+0x3d0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d018      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a5c      	ldr	r2, [pc, #368]	; (80056d8 <HAL_DMA_Abort_IT+0x3d4>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d013      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a5a      	ldr	r2, [pc, #360]	; (80056dc <HAL_DMA_Abort_IT+0x3d8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00e      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a59      	ldr	r2, [pc, #356]	; (80056e0 <HAL_DMA_Abort_IT+0x3dc>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d009      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a57      	ldr	r2, [pc, #348]	; (80056e4 <HAL_DMA_Abort_IT+0x3e0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d004      	beq.n	8005594 <HAL_DMA_Abort_IT+0x290>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a56      	ldr	r2, [pc, #344]	; (80056e8 <HAL_DMA_Abort_IT+0x3e4>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d108      	bne.n	80055a6 <HAL_DMA_Abort_IT+0x2a2>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0201 	bic.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	e007      	b.n	80055b6 <HAL_DMA_Abort_IT+0x2b2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0201 	bic.w	r2, r2, #1
 80055b4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3c      	ldr	r2, [pc, #240]	; (80056ac <HAL_DMA_Abort_IT+0x3a8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d072      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a3a      	ldr	r2, [pc, #232]	; (80056b0 <HAL_DMA_Abort_IT+0x3ac>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d06d      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a39      	ldr	r2, [pc, #228]	; (80056b4 <HAL_DMA_Abort_IT+0x3b0>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d068      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a37      	ldr	r2, [pc, #220]	; (80056b8 <HAL_DMA_Abort_IT+0x3b4>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d063      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a36      	ldr	r2, [pc, #216]	; (80056bc <HAL_DMA_Abort_IT+0x3b8>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d05e      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a34      	ldr	r2, [pc, #208]	; (80056c0 <HAL_DMA_Abort_IT+0x3bc>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d059      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a33      	ldr	r2, [pc, #204]	; (80056c4 <HAL_DMA_Abort_IT+0x3c0>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d054      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a31      	ldr	r2, [pc, #196]	; (80056c8 <HAL_DMA_Abort_IT+0x3c4>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d04f      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a30      	ldr	r2, [pc, #192]	; (80056cc <HAL_DMA_Abort_IT+0x3c8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d04a      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2e      	ldr	r2, [pc, #184]	; (80056d0 <HAL_DMA_Abort_IT+0x3cc>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d045      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2d      	ldr	r2, [pc, #180]	; (80056d4 <HAL_DMA_Abort_IT+0x3d0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d040      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a2b      	ldr	r2, [pc, #172]	; (80056d8 <HAL_DMA_Abort_IT+0x3d4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d03b      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2a      	ldr	r2, [pc, #168]	; (80056dc <HAL_DMA_Abort_IT+0x3d8>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d036      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a28      	ldr	r2, [pc, #160]	; (80056e0 <HAL_DMA_Abort_IT+0x3dc>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d031      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a27      	ldr	r2, [pc, #156]	; (80056e4 <HAL_DMA_Abort_IT+0x3e0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d02c      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a25      	ldr	r2, [pc, #148]	; (80056e8 <HAL_DMA_Abort_IT+0x3e4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d027      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a24      	ldr	r2, [pc, #144]	; (80056ec <HAL_DMA_Abort_IT+0x3e8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d022      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a22      	ldr	r2, [pc, #136]	; (80056f0 <HAL_DMA_Abort_IT+0x3ec>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01d      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a21      	ldr	r2, [pc, #132]	; (80056f4 <HAL_DMA_Abort_IT+0x3f0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d018      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1f      	ldr	r2, [pc, #124]	; (80056f8 <HAL_DMA_Abort_IT+0x3f4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1e      	ldr	r2, [pc, #120]	; (80056fc <HAL_DMA_Abort_IT+0x3f8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1c      	ldr	r2, [pc, #112]	; (8005700 <HAL_DMA_Abort_IT+0x3fc>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1b      	ldr	r2, [pc, #108]	; (8005704 <HAL_DMA_Abort_IT+0x400>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_DMA_Abort_IT+0x3a2>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a19      	ldr	r2, [pc, #100]	; (8005708 <HAL_DMA_Abort_IT+0x404>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d132      	bne.n	800570c <HAL_DMA_Abort_IT+0x408>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e031      	b.n	800570e <HAL_DMA_Abort_IT+0x40a>
 80056aa:	bf00      	nop
 80056ac:	40020010 	.word	0x40020010
 80056b0:	40020028 	.word	0x40020028
 80056b4:	40020040 	.word	0x40020040
 80056b8:	40020058 	.word	0x40020058
 80056bc:	40020070 	.word	0x40020070
 80056c0:	40020088 	.word	0x40020088
 80056c4:	400200a0 	.word	0x400200a0
 80056c8:	400200b8 	.word	0x400200b8
 80056cc:	40020410 	.word	0x40020410
 80056d0:	40020428 	.word	0x40020428
 80056d4:	40020440 	.word	0x40020440
 80056d8:	40020458 	.word	0x40020458
 80056dc:	40020470 	.word	0x40020470
 80056e0:	40020488 	.word	0x40020488
 80056e4:	400204a0 	.word	0x400204a0
 80056e8:	400204b8 	.word	0x400204b8
 80056ec:	58025408 	.word	0x58025408
 80056f0:	5802541c 	.word	0x5802541c
 80056f4:	58025430 	.word	0x58025430
 80056f8:	58025444 	.word	0x58025444
 80056fc:	58025458 	.word	0x58025458
 8005700:	5802546c 	.word	0x5802546c
 8005704:	58025480 	.word	0x58025480
 8005708:	58025494 	.word	0x58025494
 800570c:	2300      	movs	r3, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d028      	beq.n	8005764 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005720:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005726:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	2201      	movs	r2, #1
 8005732:	409a      	lsls	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005740:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00c      	beq.n	8005764 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005758:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005762:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop

08005790 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800579e:	b2db      	uxtb	r3, r3
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a7f      	ldr	r2, [pc, #508]	; (80059e0 <DMA_SetConfig+0x21c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d072      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a7d      	ldr	r2, [pc, #500]	; (80059e4 <DMA_SetConfig+0x220>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d06d      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a7c      	ldr	r2, [pc, #496]	; (80059e8 <DMA_SetConfig+0x224>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d068      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a7a      	ldr	r2, [pc, #488]	; (80059ec <DMA_SetConfig+0x228>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d063      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a79      	ldr	r2, [pc, #484]	; (80059f0 <DMA_SetConfig+0x22c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d05e      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a77      	ldr	r2, [pc, #476]	; (80059f4 <DMA_SetConfig+0x230>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d059      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a76      	ldr	r2, [pc, #472]	; (80059f8 <DMA_SetConfig+0x234>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d054      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a74      	ldr	r2, [pc, #464]	; (80059fc <DMA_SetConfig+0x238>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d04f      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a73      	ldr	r2, [pc, #460]	; (8005a00 <DMA_SetConfig+0x23c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d04a      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a71      	ldr	r2, [pc, #452]	; (8005a04 <DMA_SetConfig+0x240>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d045      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a70      	ldr	r2, [pc, #448]	; (8005a08 <DMA_SetConfig+0x244>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d040      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a6e      	ldr	r2, [pc, #440]	; (8005a0c <DMA_SetConfig+0x248>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d03b      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a6d      	ldr	r2, [pc, #436]	; (8005a10 <DMA_SetConfig+0x24c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d036      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a6b      	ldr	r2, [pc, #428]	; (8005a14 <DMA_SetConfig+0x250>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d031      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6a      	ldr	r2, [pc, #424]	; (8005a18 <DMA_SetConfig+0x254>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d02c      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a68      	ldr	r2, [pc, #416]	; (8005a1c <DMA_SetConfig+0x258>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d027      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a67      	ldr	r2, [pc, #412]	; (8005a20 <DMA_SetConfig+0x25c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d022      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a65      	ldr	r2, [pc, #404]	; (8005a24 <DMA_SetConfig+0x260>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01d      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a64      	ldr	r2, [pc, #400]	; (8005a28 <DMA_SetConfig+0x264>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d018      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a62      	ldr	r2, [pc, #392]	; (8005a2c <DMA_SetConfig+0x268>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a61      	ldr	r2, [pc, #388]	; (8005a30 <DMA_SetConfig+0x26c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a5f      	ldr	r2, [pc, #380]	; (8005a34 <DMA_SetConfig+0x270>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d009      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a5e      	ldr	r2, [pc, #376]	; (8005a38 <DMA_SetConfig+0x274>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a5c      	ldr	r2, [pc, #368]	; (8005a3c <DMA_SetConfig+0x278>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d101      	bne.n	80058d2 <DMA_SetConfig+0x10e>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <DMA_SetConfig+0x110>
 80058d2:	2300      	movs	r3, #0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00d      	beq.n	80058f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d004      	beq.n	80058f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a39      	ldr	r2, [pc, #228]	; (80059e0 <DMA_SetConfig+0x21c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d04a      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a38      	ldr	r2, [pc, #224]	; (80059e4 <DMA_SetConfig+0x220>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d045      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a36      	ldr	r2, [pc, #216]	; (80059e8 <DMA_SetConfig+0x224>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d040      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a35      	ldr	r2, [pc, #212]	; (80059ec <DMA_SetConfig+0x228>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d03b      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a33      	ldr	r2, [pc, #204]	; (80059f0 <DMA_SetConfig+0x22c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d036      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a32      	ldr	r2, [pc, #200]	; (80059f4 <DMA_SetConfig+0x230>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d031      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a30      	ldr	r2, [pc, #192]	; (80059f8 <DMA_SetConfig+0x234>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d02c      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a2f      	ldr	r2, [pc, #188]	; (80059fc <DMA_SetConfig+0x238>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d027      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2d      	ldr	r2, [pc, #180]	; (8005a00 <DMA_SetConfig+0x23c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d022      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2c      	ldr	r2, [pc, #176]	; (8005a04 <DMA_SetConfig+0x240>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d01d      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2a      	ldr	r2, [pc, #168]	; (8005a08 <DMA_SetConfig+0x244>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d018      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a29      	ldr	r2, [pc, #164]	; (8005a0c <DMA_SetConfig+0x248>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d013      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a27      	ldr	r2, [pc, #156]	; (8005a10 <DMA_SetConfig+0x24c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00e      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a26      	ldr	r2, [pc, #152]	; (8005a14 <DMA_SetConfig+0x250>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d009      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a24      	ldr	r2, [pc, #144]	; (8005a18 <DMA_SetConfig+0x254>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a23      	ldr	r2, [pc, #140]	; (8005a1c <DMA_SetConfig+0x258>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d101      	bne.n	8005998 <DMA_SetConfig+0x1d4>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <DMA_SetConfig+0x1d6>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d059      	beq.n	8005a52 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	223f      	movs	r2, #63	; 0x3f
 80059a8:	409a      	lsls	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80059bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b40      	cmp	r3, #64	; 0x40
 80059cc:	d138      	bne.n	8005a40 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80059de:	e086      	b.n	8005aee <DMA_SetConfig+0x32a>
 80059e0:	40020010 	.word	0x40020010
 80059e4:	40020028 	.word	0x40020028
 80059e8:	40020040 	.word	0x40020040
 80059ec:	40020058 	.word	0x40020058
 80059f0:	40020070 	.word	0x40020070
 80059f4:	40020088 	.word	0x40020088
 80059f8:	400200a0 	.word	0x400200a0
 80059fc:	400200b8 	.word	0x400200b8
 8005a00:	40020410 	.word	0x40020410
 8005a04:	40020428 	.word	0x40020428
 8005a08:	40020440 	.word	0x40020440
 8005a0c:	40020458 	.word	0x40020458
 8005a10:	40020470 	.word	0x40020470
 8005a14:	40020488 	.word	0x40020488
 8005a18:	400204a0 	.word	0x400204a0
 8005a1c:	400204b8 	.word	0x400204b8
 8005a20:	58025408 	.word	0x58025408
 8005a24:	5802541c 	.word	0x5802541c
 8005a28:	58025430 	.word	0x58025430
 8005a2c:	58025444 	.word	0x58025444
 8005a30:	58025458 	.word	0x58025458
 8005a34:	5802546c 	.word	0x5802546c
 8005a38:	58025480 	.word	0x58025480
 8005a3c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	60da      	str	r2, [r3, #12]
}
 8005a50:	e04d      	b.n	8005aee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a29      	ldr	r2, [pc, #164]	; (8005afc <DMA_SetConfig+0x338>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a27      	ldr	r2, [pc, #156]	; (8005b00 <DMA_SetConfig+0x33c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01d      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a26      	ldr	r2, [pc, #152]	; (8005b04 <DMA_SetConfig+0x340>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a24      	ldr	r2, [pc, #144]	; (8005b08 <DMA_SetConfig+0x344>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a23      	ldr	r2, [pc, #140]	; (8005b0c <DMA_SetConfig+0x348>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a21      	ldr	r2, [pc, #132]	; (8005b10 <DMA_SetConfig+0x34c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a20      	ldr	r2, [pc, #128]	; (8005b14 <DMA_SetConfig+0x350>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1e      	ldr	r2, [pc, #120]	; (8005b18 <DMA_SetConfig+0x354>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <DMA_SetConfig+0x2e2>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <DMA_SetConfig+0x2e4>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d020      	beq.n	8005aee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d108      	bne.n	8005ade <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	60da      	str	r2, [r3, #12]
}
 8005adc:	e007      	b.n	8005aee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	60da      	str	r2, [r3, #12]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	58025408 	.word	0x58025408
 8005b00:	5802541c 	.word	0x5802541c
 8005b04:	58025430 	.word	0x58025430
 8005b08:	58025444 	.word	0x58025444
 8005b0c:	58025458 	.word	0x58025458
 8005b10:	5802546c 	.word	0x5802546c
 8005b14:	58025480 	.word	0x58025480
 8005b18:	58025494 	.word	0x58025494

08005b1c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e033      	b.n	8005b96 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fc facc 	bl	80020e0 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f854 	bl	8005bfc <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 f822 	bl	8005b9e <FMAC_Reset>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d10c      	bne.n	8005b7a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	f043 0210 	orr.w	r2, r3, #16
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	22a0      	movs	r2, #160	; 0xa0
 8005b70:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	73fb      	strb	r3, [r7, #15]
 8005b78:	e008      	b.n	8005b8c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ba6:	f7fd fb6f 	bl	8003288 <HAL_GetTick>
 8005baa:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005bba:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005bbc:	e00f      	b.n	8005bde <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8005bbe:	f7fd fb63 	bl	8003288 <HAL_GetTick>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	1ad3      	subs	r3, r2, r3
 8005bc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005bcc:	d907      	bls.n	8005bde <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e00a      	b.n	8005bf4 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e8      	bne.n	8005bbe <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f807 	bl	8005c18 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f81b 	bl	8005c46 <FMAC_ResetOutputStateAndDataPointers>
}
 8005c10:	bf00      	nop
 8005c12:	3708      	adds	r7, #8
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr

08005c46 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b089      	sub	sp, #36	; 0x24
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c82:	4b86      	ldr	r3, [pc, #536]	; (8005e9c <HAL_GPIO_Init+0x228>)
 8005c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c86:	e18c      	b.n	8005fa2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	2101      	movs	r1, #1
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	fa01 f303 	lsl.w	r3, r1, r3
 8005c94:	4013      	ands	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 817e 	beq.w	8005f9c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f003 0303 	and.w	r3, r3, #3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d005      	beq.n	8005cb8 <HAL_GPIO_Init+0x44>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 0303 	and.w	r3, r3, #3
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d130      	bne.n	8005d1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	005b      	lsls	r3, r3, #1
 8005cc2:	2203      	movs	r2, #3
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	43db      	mvns	r3, r3
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	4013      	ands	r3, r2
 8005cce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005cee:	2201      	movs	r2, #1
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	43db      	mvns	r3, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	091b      	lsrs	r3, r3, #4
 8005d04:	f003 0201 	and.w	r2, r3, #1
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d017      	beq.n	8005d56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	2203      	movs	r2, #3
 8005d32:	fa02 f303 	lsl.w	r3, r2, r3
 8005d36:	43db      	mvns	r3, r3
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	689a      	ldr	r2, [r3, #8]
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	005b      	lsls	r3, r3, #1
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	69ba      	ldr	r2, [r7, #24]
 8005d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d123      	bne.n	8005daa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	08da      	lsrs	r2, r3, #3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	3208      	adds	r2, #8
 8005d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	220f      	movs	r2, #15
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	691a      	ldr	r2, [r3, #16]
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	fa02 f303 	lsl.w	r3, r2, r3
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	08da      	lsrs	r2, r3, #3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3208      	adds	r2, #8
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	2203      	movs	r2, #3
 8005db6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f003 0203 	and.w	r2, r3, #3
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	005b      	lsls	r3, r3, #1
 8005dce:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 80d8 	beq.w	8005f9c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dec:	4b2c      	ldr	r3, [pc, #176]	; (8005ea0 <HAL_GPIO_Init+0x22c>)
 8005dee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005df2:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <HAL_GPIO_Init+0x22c>)
 8005df4:	f043 0302 	orr.w	r3, r3, #2
 8005df8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005dfc:	4b28      	ldr	r3, [pc, #160]	; (8005ea0 <HAL_GPIO_Init+0x22c>)
 8005dfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	60fb      	str	r3, [r7, #12]
 8005e08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005e0a:	4a26      	ldr	r2, [pc, #152]	; (8005ea4 <HAL_GPIO_Init+0x230>)
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	089b      	lsrs	r3, r3, #2
 8005e10:	3302      	adds	r3, #2
 8005e12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	220f      	movs	r2, #15
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	43db      	mvns	r3, r3
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <HAL_GPIO_Init+0x234>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d04a      	beq.n	8005ecc <HAL_GPIO_Init+0x258>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <HAL_GPIO_Init+0x238>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d02b      	beq.n	8005e96 <HAL_GPIO_Init+0x222>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a1b      	ldr	r2, [pc, #108]	; (8005eb0 <HAL_GPIO_Init+0x23c>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d025      	beq.n	8005e92 <HAL_GPIO_Init+0x21e>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a1a      	ldr	r2, [pc, #104]	; (8005eb4 <HAL_GPIO_Init+0x240>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01f      	beq.n	8005e8e <HAL_GPIO_Init+0x21a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a19      	ldr	r2, [pc, #100]	; (8005eb8 <HAL_GPIO_Init+0x244>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d019      	beq.n	8005e8a <HAL_GPIO_Init+0x216>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a18      	ldr	r2, [pc, #96]	; (8005ebc <HAL_GPIO_Init+0x248>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_GPIO_Init+0x212>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a17      	ldr	r2, [pc, #92]	; (8005ec0 <HAL_GPIO_Init+0x24c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00d      	beq.n	8005e82 <HAL_GPIO_Init+0x20e>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a16      	ldr	r2, [pc, #88]	; (8005ec4 <HAL_GPIO_Init+0x250>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d007      	beq.n	8005e7e <HAL_GPIO_Init+0x20a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	4a15      	ldr	r2, [pc, #84]	; (8005ec8 <HAL_GPIO_Init+0x254>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d101      	bne.n	8005e7a <HAL_GPIO_Init+0x206>
 8005e76:	2309      	movs	r3, #9
 8005e78:	e029      	b.n	8005ece <HAL_GPIO_Init+0x25a>
 8005e7a:	230a      	movs	r3, #10
 8005e7c:	e027      	b.n	8005ece <HAL_GPIO_Init+0x25a>
 8005e7e:	2307      	movs	r3, #7
 8005e80:	e025      	b.n	8005ece <HAL_GPIO_Init+0x25a>
 8005e82:	2306      	movs	r3, #6
 8005e84:	e023      	b.n	8005ece <HAL_GPIO_Init+0x25a>
 8005e86:	2305      	movs	r3, #5
 8005e88:	e021      	b.n	8005ece <HAL_GPIO_Init+0x25a>
 8005e8a:	2304      	movs	r3, #4
 8005e8c:	e01f      	b.n	8005ece <HAL_GPIO_Init+0x25a>
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e01d      	b.n	8005ece <HAL_GPIO_Init+0x25a>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e01b      	b.n	8005ece <HAL_GPIO_Init+0x25a>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e019      	b.n	8005ece <HAL_GPIO_Init+0x25a>
 8005e9a:	bf00      	nop
 8005e9c:	58000080 	.word	0x58000080
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	58000400 	.word	0x58000400
 8005ea8:	58020000 	.word	0x58020000
 8005eac:	58020400 	.word	0x58020400
 8005eb0:	58020800 	.word	0x58020800
 8005eb4:	58020c00 	.word	0x58020c00
 8005eb8:	58021000 	.word	0x58021000
 8005ebc:	58021400 	.word	0x58021400
 8005ec0:	58021800 	.word	0x58021800
 8005ec4:	58021c00 	.word	0x58021c00
 8005ec8:	58022400 	.word	0x58022400
 8005ecc:	2300      	movs	r3, #0
 8005ece:	69fa      	ldr	r2, [r7, #28]
 8005ed0:	f002 0203 	and.w	r2, r2, #3
 8005ed4:	0092      	lsls	r2, r2, #2
 8005ed6:	4093      	lsls	r3, r2
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ede:	4938      	ldr	r1, [pc, #224]	; (8005fc0 <HAL_GPIO_Init+0x34c>)
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	089b      	lsrs	r3, r3, #2
 8005ee4:	3302      	adds	r3, #2
 8005ee6:	69ba      	ldr	r2, [r7, #24]
 8005ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005eec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	43db      	mvns	r3, r3
 8005ef8:	69ba      	ldr	r2, [r7, #24]
 8005efa:	4013      	ands	r3, r2
 8005efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	4013      	ands	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f47f ae6b 	bne.w	8005c88 <HAL_GPIO_Init+0x14>
  }
}
 8005fb2:	bf00      	nop
 8005fb4:	bf00      	nop
 8005fb6:	3724      	adds	r7, #36	; 0x24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	58000400 	.word	0x58000400

08005fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	807b      	strh	r3, [r7, #2]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005fd4:	787b      	ldrb	r3, [r7, #1]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fda:	887a      	ldrh	r2, [r7, #2]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005fe0:	e003      	b.n	8005fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005fe2:	887b      	ldrh	r3, [r7, #2]
 8005fe4:	041a      	lsls	r2, r3, #16
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	619a      	str	r2, [r3, #24]
}
 8005fea:	bf00      	nop
 8005fec:	370c      	adds	r7, #12
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff4:	4770      	bx	lr
	...

08005ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b082      	sub	sp, #8
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e07f      	b.n	800610a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	f7fc f880 	bl	8002124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2224      	movs	r2, #36	; 0x24
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d107      	bne.n	8006072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	e006      	b.n	8006080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689a      	ldr	r2, [r3, #8]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800607e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	2b02      	cmp	r3, #2
 8006086:	d104      	bne.n	8006092 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006090:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6859      	ldr	r1, [r3, #4]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	4b1d      	ldr	r3, [pc, #116]	; (8006114 <HAL_I2C_Init+0x11c>)
 800609e:	430b      	orrs	r3, r1
 80060a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68da      	ldr	r2, [r3, #12]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80060b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69d9      	ldr	r1, [r3, #28]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6a1a      	ldr	r2, [r3, #32]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	430a      	orrs	r2, r1
 80060da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0201 	orr.w	r2, r2, #1
 80060ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2220      	movs	r2, #32
 80060f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	02008000 	.word	0x02008000

08006118 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b088      	sub	sp, #32
 800611c:	af02      	add	r7, sp, #8
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	607a      	str	r2, [r7, #4]
 8006122:	461a      	mov	r2, r3
 8006124:	460b      	mov	r3, r1
 8006126:	817b      	strh	r3, [r7, #10]
 8006128:	4613      	mov	r3, r2
 800612a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b20      	cmp	r3, #32
 8006136:	d153      	bne.n	80061e0 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006142:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006146:	d101      	bne.n	800614c <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8006148:	2302      	movs	r3, #2
 800614a:	e04a      	b.n	80061e2 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006152:	2b01      	cmp	r3, #1
 8006154:	d101      	bne.n	800615a <HAL_I2C_Master_Receive_IT+0x42>
 8006156:	2302      	movs	r3, #2
 8006158:	e043      	b.n	80061e2 <HAL_I2C_Master_Receive_IT+0xca>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2222      	movs	r2, #34	; 0x22
 8006166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2210      	movs	r2, #16
 800616e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2200      	movs	r2, #0
 8006176:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	893a      	ldrh	r2, [r7, #8]
 8006182:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4a19      	ldr	r2, [pc, #100]	; (80061ec <HAL_I2C_Master_Receive_IT+0xd4>)
 8006188:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a18      	ldr	r2, [pc, #96]	; (80061f0 <HAL_I2C_Master_Receive_IT+0xd8>)
 800618e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006194:	b29b      	uxth	r3, r3
 8006196:	2bff      	cmp	r3, #255	; 0xff
 8006198:	d906      	bls.n	80061a8 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	22ff      	movs	r2, #255	; 0xff
 800619e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80061a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061a4:	617b      	str	r3, [r7, #20]
 80061a6:	e007      	b.n	80061b8 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80061b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061b6:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	8979      	ldrh	r1, [r7, #10]
 80061c0:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <HAL_I2C_Master_Receive_IT+0xdc>)
 80061c2:	9300      	str	r3, [sp, #0]
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f001 fd54 	bl	8007c74 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80061d4:	2102      	movs	r1, #2
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f001 fd7e 	bl	8007cd8 <I2C_Enable_IRQ>

    return HAL_OK;
 80061dc:	2300      	movs	r3, #0
 80061de:	e000      	b.n	80061e2 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80061e0:	2302      	movs	r3, #2
  }
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	ffff0000 	.word	0xffff0000
 80061f0:	080064a9 	.word	0x080064a9
 80061f4:	80002400 	.word	0x80002400

080061f8 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	60f8      	str	r0, [r7, #12]
 8006200:	607a      	str	r2, [r7, #4]
 8006202:	461a      	mov	r2, r3
 8006204:	460b      	mov	r3, r1
 8006206:	817b      	strh	r3, [r7, #10]
 8006208:	4613      	mov	r3, r2
 800620a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b20      	cmp	r3, #32
 8006216:	f040 80cd 	bne.w	80063b4 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006228:	d101      	bne.n	800622e <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 800622a:	2302      	movs	r3, #2
 800622c:	e0c3      	b.n	80063b6 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006234:	2b01      	cmp	r3, #1
 8006236:	d101      	bne.n	800623c <HAL_I2C_Master_Transmit_DMA+0x44>
 8006238:	2302      	movs	r3, #2
 800623a:	e0bc      	b.n	80063b6 <HAL_I2C_Master_Transmit_DMA+0x1be>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2221      	movs	r2, #33	; 0x21
 8006248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2210      	movs	r2, #16
 8006250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	893a      	ldrh	r2, [r7, #8]
 8006264:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	4a55      	ldr	r2, [pc, #340]	; (80063c0 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 800626a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a55      	ldr	r2, [pc, #340]	; (80063c4 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8006270:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006276:	b29b      	uxth	r3, r3
 8006278:	2bff      	cmp	r3, #255	; 0xff
 800627a:	d906      	bls.n	800628a <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	22ff      	movs	r2, #255	; 0xff
 8006280:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006282:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	e007      	b.n	800629a <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006294:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006298:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d070      	beq.n	8006384 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d020      	beq.n	80062ec <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	4a46      	ldr	r2, [pc, #280]	; (80063c8 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 80062b0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	4a45      	ldr	r2, [pc, #276]	; (80063cc <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 80062b8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062be:	2200      	movs	r2, #0
 80062c0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	2200      	movs	r2, #0
 80062c8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3328      	adds	r3, #40	; 0x28
 80062d6:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80062dc:	f7fe fda8 	bl	8004e30 <HAL_DMA_Start_IT>
 80062e0:	4603      	mov	r3, r0
 80062e2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80062e4:	7cfb      	ldrb	r3, [r7, #19]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d138      	bne.n	800635c <HAL_I2C_Master_Transmit_DMA+0x164>
 80062ea:	e013      	b.n	8006314 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006300:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	e050      	b.n	80063b6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006318:	b2da      	uxtb	r2, r3
 800631a:	8979      	ldrh	r1, [r7, #10]
 800631c:	4b2c      	ldr	r3, [pc, #176]	; (80063d0 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f001 fca6 	bl	8007c74 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632c:	b29a      	uxth	r2, r3
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006342:	2110      	movs	r1, #16
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f001 fcc7 	bl	8007cd8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	e029      	b.n	80063b0 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2220      	movs	r2, #32
 8006360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006370:	f043 0210 	orr.w	r2, r3, #16
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e018      	b.n	80063b6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8006388:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638e:	b2da      	uxtb	r2, r3
 8006390:	8979      	ldrh	r1, [r7, #10]
 8006392:	4b0f      	ldr	r3, [pc, #60]	; (80063d0 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800639a:	68f8      	ldr	r0, [r7, #12]
 800639c:	f001 fc6a 	bl	8007c74 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063a8:	2101      	movs	r1, #1
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f001 fc94 	bl	8007cd8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	e000      	b.n	80063b6 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 80063b4:	2302      	movs	r3, #2
  }
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	ffff0000 	.word	0xffff0000
 80063c4:	080068d1 	.word	0x080068d1
 80063c8:	0800792f 	.word	0x0800792f
 80063cc:	080079c5 	.word	0x080079c5
 80063d0:	80002000 	.word	0x80002000
 80063d4:	080064a9 	.word	0x080064a9

080063d8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
 8006434:	4613      	mov	r3, r2
 8006436:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d101      	bne.n	80064c6 <I2C_Master_ISR_IT+0x1e>
 80064c2:	2302      	movs	r3, #2
 80064c4:	e108      	b.n	80066d8 <I2C_Master_ISR_IT+0x230>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f003 0310 	and.w	r3, r3, #16
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d012      	beq.n	80064fe <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00d      	beq.n	80064fe <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2210      	movs	r2, #16
 80064e8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ee:	f043 0204 	orr.w	r2, r3, #4
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064f6:	68f8      	ldr	r0, [r7, #12]
 80064f8:	f001 f9f5 	bl	80078e6 <I2C_Flush_TXDR>
 80064fc:	e0d9      	b.n	80066b2 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d022      	beq.n	800654e <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800650e:	2b00      	cmp	r3, #0
 8006510:	d01d      	beq.n	800654e <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f023 0304 	bic.w	r3, r3, #4
 8006518:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006524:	b2d2      	uxtb	r2, r2
 8006526:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006542:	b29b      	uxth	r3, r3
 8006544:	3b01      	subs	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800654c:	e0b1      	b.n	80066b2 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01d      	beq.n	8006594 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800655e:	2b00      	cmp	r3, #0
 8006560:	d018      	beq.n	8006594 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	781a      	ldrb	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	1c5a      	adds	r2, r3, #1
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	3b01      	subs	r3, #1
 800658c:	b29a      	uxth	r2, r3
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006592:	e08e      	b.n	80066b2 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800659a:	2b00      	cmp	r3, #0
 800659c:	d05c      	beq.n	8006658 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d057      	beq.n	8006658 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d040      	beq.n	8006634 <I2C_Master_ISR_IT+0x18c>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d13c      	bne.n	8006634 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065c6:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2bff      	cmp	r3, #255	; 0xff
 80065d0:	d90e      	bls.n	80065f0 <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	22ff      	movs	r2, #255	; 0xff
 80065d6:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	8a79      	ldrh	r1, [r7, #18]
 80065e0:	2300      	movs	r3, #0
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f001 fb43 	bl	8007c74 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065ee:	e032      	b.n	8006656 <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006602:	d00b      	beq.n	800661c <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006608:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800660e:	8a79      	ldrh	r1, [r7, #18]
 8006610:	2000      	movs	r0, #0
 8006612:	9000      	str	r0, [sp, #0]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f001 fb2d 	bl	8007c74 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800661a:	e01c      	b.n	8006656 <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006620:	b2da      	uxtb	r2, r3
 8006622:	8a79      	ldrh	r1, [r7, #18]
 8006624:	2300      	movs	r3, #0
 8006626:	9300      	str	r3, [sp, #0]
 8006628:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f001 fb21 	bl	8007c74 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006632:	e010      	b.n	8006656 <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800663e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006642:	d003      	beq.n	800664c <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 fc8b 	bl	8006f60 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800664a:	e032      	b.n	80066b2 <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800664c:	2140      	movs	r1, #64	; 0x40
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f001 f832 	bl	80076b8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006654:	e02d      	b.n	80066b2 <I2C_Master_ISR_IT+0x20a>
 8006656:	e02c      	b.n	80066b2 <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	d027      	beq.n	80066b2 <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006668:	2b00      	cmp	r3, #0
 800666a:	d022      	beq.n	80066b2 <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d119      	bne.n	80066aa <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006680:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006684:	d015      	beq.n	80066b2 <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800668e:	d108      	bne.n	80066a2 <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800669e:	605a      	str	r2, [r3, #4]
 80066a0:	e007      	b.n	80066b2 <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 fc5c 	bl	8006f60 <I2C_ITMasterSeqCplt>
 80066a8:	e003      	b.n	80066b2 <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80066aa:	2140      	movs	r1, #64	; 0x40
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f001 f803 	bl	80076b8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d008      	beq.n	80066ce <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80066c6:	6979      	ldr	r1, [r7, #20]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fce3 	bl	8007094 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b086      	sub	sp, #24
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d101      	bne.n	8006704 <I2C_Slave_ISR_IT+0x24>
 8006700:	2302      	movs	r3, #2
 8006702:	e0e1      	b.n	80068c8 <I2C_Slave_ISR_IT+0x1e8>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f003 0320 	and.w	r3, r3, #32
 8006712:	2b00      	cmp	r3, #0
 8006714:	d008      	beq.n	8006728 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800671c:	2b00      	cmp	r3, #0
 800671e:	d003      	beq.n	8006728 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006720:	6939      	ldr	r1, [r7, #16]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 fd7e 	bl	8007224 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b00      	cmp	r3, #0
 8006730:	d04b      	beq.n	80067ca <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006738:	2b00      	cmp	r3, #0
 800673a:	d046      	beq.n	80067ca <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	2b00      	cmp	r3, #0
 8006744:	d128      	bne.n	8006798 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b28      	cmp	r3, #40	; 0x28
 8006750:	d108      	bne.n	8006764 <I2C_Slave_ISR_IT+0x84>
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006758:	d104      	bne.n	8006764 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800675a:	6939      	ldr	r1, [r7, #16]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 ff57 	bl	8007610 <I2C_ITListenCplt>
 8006762:	e031      	b.n	80067c8 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b29      	cmp	r3, #41	; 0x29
 800676e:	d10e      	bne.n	800678e <I2C_Slave_ISR_IT+0xae>
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006776:	d00a      	beq.n	800678e <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2210      	movs	r2, #16
 800677e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f001 f8b0 	bl	80078e6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fc27 	bl	8006fda <I2C_ITSlaveSeqCplt>
 800678c:	e01c      	b.n	80067c8 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	2210      	movs	r2, #16
 8006794:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006796:	e08f      	b.n	80068b8 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2210      	movs	r2, #16
 800679e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a4:	f043 0204 	orr.w	r2, r3, #4
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <I2C_Slave_ISR_IT+0xda>
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067b8:	d17e      	bne.n	80068b8 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067be:	4619      	mov	r1, r3
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 ff79 	bl	80076b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80067c6:	e077      	b.n	80068b8 <I2C_Slave_ISR_IT+0x1d8>
 80067c8:	e076      	b.n	80068b8 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f003 0304 	and.w	r3, r3, #4
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d02f      	beq.n	8006834 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d02a      	beq.n	8006834 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d018      	beq.n	800681a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006804:	3b01      	subs	r3, #1
 8006806:	b29a      	uxth	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d14b      	bne.n	80068bc <I2C_Slave_ISR_IT+0x1dc>
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800682a:	d047      	beq.n	80068bc <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f000 fbd4 	bl	8006fda <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006832:	e043      	b.n	80068bc <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	f003 0308 	and.w	r3, r3, #8
 800683a:	2b00      	cmp	r3, #0
 800683c:	d009      	beq.n	8006852 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006848:	6939      	ldr	r1, [r7, #16]
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f000 fb04 	bl	8006e58 <I2C_ITAddrCplt>
 8006850:	e035      	b.n	80068be <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f003 0302 	and.w	r3, r3, #2
 8006858:	2b00      	cmp	r3, #0
 800685a:	d030      	beq.n	80068be <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006862:	2b00      	cmp	r3, #0
 8006864:	d02b      	beq.n	80068be <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800686a:	b29b      	uxth	r3, r3
 800686c:	2b00      	cmp	r3, #0
 800686e:	d018      	beq.n	80068a2 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	781a      	ldrb	r2, [r3, #0]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006880:	1c5a      	adds	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006898:	3b01      	subs	r3, #1
 800689a:	b29a      	uxth	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	851a      	strh	r2, [r3, #40]	; 0x28
 80068a0:	e00d      	b.n	80068be <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068a8:	d002      	beq.n	80068b0 <I2C_Slave_ISR_IT+0x1d0>
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 fb92 	bl	8006fda <I2C_ITSlaveSeqCplt>
 80068b6:	e002      	b.n	80068be <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80068b8:	bf00      	nop
 80068ba:	e000      	b.n	80068be <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80068bc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80068c6:	2300      	movs	r3, #0
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3718      	adds	r7, #24
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <I2C_Master_ISR_DMA+0x1a>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e0d9      	b.n	8006a9e <I2C_Master_ISR_DMA+0x1ce>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f003 0310 	and.w	r3, r3, #16
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d016      	beq.n	800692a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006902:	2b00      	cmp	r3, #0
 8006904:	d011      	beq.n	800692a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2210      	movs	r2, #16
 800690c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006912:	f043 0204 	orr.w	r2, r3, #4
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800691a:	2120      	movs	r1, #32
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f001 f9db 	bl	8007cd8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 ffdf 	bl	80078e6 <I2C_Flush_TXDR>
 8006928:	e0b4      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006930:	2b00      	cmp	r3, #0
 8006932:	d071      	beq.n	8006a18 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800693a:	2b00      	cmp	r3, #0
 800693c:	d06c      	beq.n	8006a18 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800694c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006952:	b29b      	uxth	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d04e      	beq.n	80069f6 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	b29b      	uxth	r3, r3
 8006960:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006964:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	2bff      	cmp	r3, #255	; 0xff
 800696e:	d906      	bls.n	800697e <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	22ff      	movs	r2, #255	; 0xff
 8006974:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8006976:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	e010      	b.n	80069a0 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006982:	b29a      	uxth	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006990:	d003      	beq.n	800699a <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	617b      	str	r3, [r7, #20]
 8006998:	e002      	b.n	80069a0 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800699a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800699e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	8a79      	ldrh	r1, [r7, #18]
 80069a8:	2300      	movs	r3, #0
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f001 f960 	bl	8007c74 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b8:	b29a      	uxth	r2, r3
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b22      	cmp	r3, #34	; 0x22
 80069d0:	d108      	bne.n	80069e4 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069e0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069e2:	e057      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069f2:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80069f4:	e04e      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a04:	d003      	beq.n	8006a0e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 faaa 	bl	8006f60 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006a0c:	e042      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a0e:	2140      	movs	r1, #64	; 0x40
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fe51 	bl	80076b8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006a16:	e03d      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d028      	beq.n	8006a74 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d023      	beq.n	8006a74 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d119      	bne.n	8006a6a <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a44:	d025      	beq.n	8006a92 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a4e:	d108      	bne.n	8006a62 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	685a      	ldr	r2, [r3, #4]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a5e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006a60:	e017      	b.n	8006a92 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 fa7c 	bl	8006f60 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006a68:	e013      	b.n	8006a92 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006a6a:	2140      	movs	r1, #64	; 0x40
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fe23 	bl	80076b8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006a72:	e00e      	b.n	8006a92 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 0320 	and.w	r3, r3, #32
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fb02 	bl	8007094 <I2C_ITMasterCplt>
 8006a90:	e000      	b.n	8006a94 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8006a92:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3718      	adds	r7, #24
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006aba:	2300      	movs	r3, #0
 8006abc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d101      	bne.n	8006acc <I2C_Slave_ISR_DMA+0x24>
 8006ac8:	2302      	movs	r3, #2
 8006aca:	e1c0      	b.n	8006e4e <I2C_Slave_ISR_DMA+0x3a6>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d008      	beq.n	8006af0 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d003      	beq.n	8006af0 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f000 fb9a 	bl	8007224 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f003 0310 	and.w	r3, r3, #16
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 8196 	beq.w	8006e28 <I2C_Slave_ISR_DMA+0x380>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8190 	beq.w	8006e28 <I2C_Slave_ISR_DMA+0x380>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d105      	bne.n	8006b1e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 817e 	beq.w	8006e1a <I2C_Slave_ISR_DMA+0x372>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d07b      	beq.n	8006c1e <I2C_Slave_ISR_DMA+0x176>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d076      	beq.n	8006c1e <I2C_Slave_ISR_DMA+0x176>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a74      	ldr	r2, [pc, #464]	; (8006d08 <I2C_Slave_ISR_DMA+0x260>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d059      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a72      	ldr	r2, [pc, #456]	; (8006d0c <I2C_Slave_ISR_DMA+0x264>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d053      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a70      	ldr	r2, [pc, #448]	; (8006d10 <I2C_Slave_ISR_DMA+0x268>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d04d      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a6e      	ldr	r2, [pc, #440]	; (8006d14 <I2C_Slave_ISR_DMA+0x26c>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d047      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a6c      	ldr	r2, [pc, #432]	; (8006d18 <I2C_Slave_ISR_DMA+0x270>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d041      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a6a      	ldr	r2, [pc, #424]	; (8006d1c <I2C_Slave_ISR_DMA+0x274>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d03b      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a68      	ldr	r2, [pc, #416]	; (8006d20 <I2C_Slave_ISR_DMA+0x278>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d035      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a66      	ldr	r2, [pc, #408]	; (8006d24 <I2C_Slave_ISR_DMA+0x27c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d02f      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a64      	ldr	r2, [pc, #400]	; (8006d28 <I2C_Slave_ISR_DMA+0x280>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d029      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a62      	ldr	r2, [pc, #392]	; (8006d2c <I2C_Slave_ISR_DMA+0x284>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d023      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a60      	ldr	r2, [pc, #384]	; (8006d30 <I2C_Slave_ISR_DMA+0x288>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d01d      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a5e      	ldr	r2, [pc, #376]	; (8006d34 <I2C_Slave_ISR_DMA+0x28c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d017      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a5c      	ldr	r2, [pc, #368]	; (8006d38 <I2C_Slave_ISR_DMA+0x290>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d011      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a5a      	ldr	r2, [pc, #360]	; (8006d3c <I2C_Slave_ISR_DMA+0x294>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d00b      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a58      	ldr	r2, [pc, #352]	; (8006d40 <I2C_Slave_ISR_DMA+0x298>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d005      	beq.n	8006bf0 <I2C_Slave_ISR_DMA+0x148>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a56      	ldr	r2, [pc, #344]	; (8006d44 <I2C_Slave_ISR_DMA+0x29c>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d109      	bne.n	8006c04 <I2C_Slave_ISR_DMA+0x15c>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	bf0c      	ite	eq
 8006bfc:	2301      	moveq	r3, #1
 8006bfe:	2300      	movne	r3, #0
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	e008      	b.n	8006c16 <I2C_Slave_ISR_DMA+0x16e>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	bf0c      	ite	eq
 8006c10:	2301      	moveq	r3, #1
 8006c12:	2300      	movne	r3, #0
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <I2C_Slave_ISR_DMA+0x176>
          {
            treatdmanack = 1U;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 809d 	beq.w	8006d62 <I2C_Slave_ISR_DMA+0x2ba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8097 	beq.w	8006d62 <I2C_Slave_ISR_DMA+0x2ba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a33      	ldr	r2, [pc, #204]	; (8006d08 <I2C_Slave_ISR_DMA+0x260>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d059      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a31      	ldr	r2, [pc, #196]	; (8006d0c <I2C_Slave_ISR_DMA+0x264>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d053      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a2f      	ldr	r2, [pc, #188]	; (8006d10 <I2C_Slave_ISR_DMA+0x268>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d04d      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a2d      	ldr	r2, [pc, #180]	; (8006d14 <I2C_Slave_ISR_DMA+0x26c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d047      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a2b      	ldr	r2, [pc, #172]	; (8006d18 <I2C_Slave_ISR_DMA+0x270>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d041      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a29      	ldr	r2, [pc, #164]	; (8006d1c <I2C_Slave_ISR_DMA+0x274>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d03b      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a27      	ldr	r2, [pc, #156]	; (8006d20 <I2C_Slave_ISR_DMA+0x278>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d035      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a25      	ldr	r2, [pc, #148]	; (8006d24 <I2C_Slave_ISR_DMA+0x27c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d02f      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a23      	ldr	r2, [pc, #140]	; (8006d28 <I2C_Slave_ISR_DMA+0x280>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d029      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a21      	ldr	r2, [pc, #132]	; (8006d2c <I2C_Slave_ISR_DMA+0x284>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d023      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1f      	ldr	r2, [pc, #124]	; (8006d30 <I2C_Slave_ISR_DMA+0x288>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d01d      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <I2C_Slave_ISR_DMA+0x28c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d017      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1b      	ldr	r2, [pc, #108]	; (8006d38 <I2C_Slave_ISR_DMA+0x290>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d011      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a19      	ldr	r2, [pc, #100]	; (8006d3c <I2C_Slave_ISR_DMA+0x294>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d00b      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a17      	ldr	r2, [pc, #92]	; (8006d40 <I2C_Slave_ISR_DMA+0x298>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d005      	beq.n	8006cf4 <I2C_Slave_ISR_DMA+0x24c>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a15      	ldr	r2, [pc, #84]	; (8006d44 <I2C_Slave_ISR_DMA+0x29c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d129      	bne.n	8006d48 <I2C_Slave_ISR_DMA+0x2a0>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	bf0c      	ite	eq
 8006d00:	2301      	moveq	r3, #1
 8006d02:	2300      	movne	r3, #0
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	e028      	b.n	8006d5a <I2C_Slave_ISR_DMA+0x2b2>
 8006d08:	40020010 	.word	0x40020010
 8006d0c:	40020028 	.word	0x40020028
 8006d10:	40020040 	.word	0x40020040
 8006d14:	40020058 	.word	0x40020058
 8006d18:	40020070 	.word	0x40020070
 8006d1c:	40020088 	.word	0x40020088
 8006d20:	400200a0 	.word	0x400200a0
 8006d24:	400200b8 	.word	0x400200b8
 8006d28:	40020410 	.word	0x40020410
 8006d2c:	40020428 	.word	0x40020428
 8006d30:	40020440 	.word	0x40020440
 8006d34:	40020458 	.word	0x40020458
 8006d38:	40020470 	.word	0x40020470
 8006d3c:	40020488 	.word	0x40020488
 8006d40:	400204a0 	.word	0x400204a0
 8006d44:	400204b8 	.word	0x400204b8
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bf0c      	ite	eq
 8006d54:	2301      	moveq	r3, #1
 8006d56:	2300      	movne	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <I2C_Slave_ISR_DMA+0x2ba>
          {
            treatdmanack = 1U;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d128      	bne.n	8006dba <I2C_Slave_ISR_DMA+0x312>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b28      	cmp	r3, #40	; 0x28
 8006d72:	d108      	bne.n	8006d86 <I2C_Slave_ISR_DMA+0x2de>
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d7a:	d104      	bne.n	8006d86 <I2C_Slave_ISR_DMA+0x2de>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006d7c:	68b9      	ldr	r1, [r7, #8]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 fc46 	bl	8007610 <I2C_ITListenCplt>
 8006d84:	e048      	b.n	8006e18 <I2C_Slave_ISR_DMA+0x370>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b29      	cmp	r3, #41	; 0x29
 8006d90:	d10e      	bne.n	8006db0 <I2C_Slave_ISR_DMA+0x308>
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d98:	d00a      	beq.n	8006db0 <I2C_Slave_ISR_DMA+0x308>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2210      	movs	r2, #16
 8006da0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 fd9f 	bl	80078e6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 f916 	bl	8006fda <I2C_ITSlaveSeqCplt>
 8006dae:	e033      	b.n	8006e18 <I2C_Slave_ISR_DMA+0x370>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2210      	movs	r2, #16
 8006db6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006db8:	e034      	b.n	8006e24 <I2C_Slave_ISR_DMA+0x37c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2210      	movs	r2, #16
 8006dc0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc6:	f043 0204 	orr.w	r2, r3, #4
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d003      	beq.n	8006de4 <I2C_Slave_ISR_DMA+0x33c>
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006de2:	d11f      	bne.n	8006e24 <I2C_Slave_ISR_DMA+0x37c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
 8006de6:	2b21      	cmp	r3, #33	; 0x21
 8006de8:	d002      	beq.n	8006df0 <I2C_Slave_ISR_DMA+0x348>
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
 8006dec:	2b29      	cmp	r3, #41	; 0x29
 8006dee:	d103      	bne.n	8006df8 <I2C_Slave_ISR_DMA+0x350>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2221      	movs	r2, #33	; 0x21
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30
 8006df6:	e008      	b.n	8006e0a <I2C_Slave_ISR_DMA+0x362>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	2b22      	cmp	r3, #34	; 0x22
 8006dfc:	d002      	beq.n	8006e04 <I2C_Slave_ISR_DMA+0x35c>
 8006dfe:	7dfb      	ldrb	r3, [r7, #23]
 8006e00:	2b2a      	cmp	r3, #42	; 0x2a
 8006e02:	d102      	bne.n	8006e0a <I2C_Slave_ISR_DMA+0x362>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2222      	movs	r2, #34	; 0x22
 8006e08:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e0e:	4619      	mov	r1, r3
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fc51 	bl	80076b8 <I2C_ITError>
      if (treatdmanack == 1U)
 8006e16:	e005      	b.n	8006e24 <I2C_Slave_ISR_DMA+0x37c>
 8006e18:	e004      	b.n	8006e24 <I2C_Slave_ISR_DMA+0x37c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2210      	movs	r2, #16
 8006e20:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e22:	e00f      	b.n	8006e44 <I2C_Slave_ISR_DMA+0x39c>
      if (treatdmanack == 1U)
 8006e24:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006e26:	e00d      	b.n	8006e44 <I2C_Slave_ISR_DMA+0x39c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d008      	beq.n	8006e44 <I2C_Slave_ISR_DMA+0x39c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <I2C_Slave_ISR_DMA+0x39c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006e3c:	68b9      	ldr	r1, [r7, #8]
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 f80a 	bl	8006e58 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3720      	adds	r7, #32
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop

08006e58 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006e6e:	2b28      	cmp	r3, #40	; 0x28
 8006e70:	d16a      	bne.n	8006f48 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	0c1b      	lsrs	r3, r3, #16
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	f003 0301 	and.w	r3, r3, #1
 8006e80:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	0c1b      	lsrs	r3, r3, #16
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006e90:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e9e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006eac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d138      	bne.n	8006f28 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006eb6:	897b      	ldrh	r3, [r7, #10]
 8006eb8:	09db      	lsrs	r3, r3, #7
 8006eba:	b29a      	uxth	r2, r3
 8006ebc:	89bb      	ldrh	r3, [r7, #12]
 8006ebe:	4053      	eors	r3, r2
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	f003 0306 	and.w	r3, r3, #6
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d11c      	bne.n	8006f04 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006eca:	897b      	ldrh	r3, [r7, #10]
 8006ecc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	d13b      	bne.n	8006f58 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2208      	movs	r2, #8
 8006eec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ef6:	89ba      	ldrh	r2, [r7, #12]
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7ff fa93 	bl	8006428 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006f02:	e029      	b.n	8006f58 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006f04:	893b      	ldrh	r3, [r7, #8]
 8006f06:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 ff4d 	bl	8007dac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f1a:	89ba      	ldrh	r2, [r7, #12]
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff fa81 	bl	8006428 <HAL_I2C_AddrCallback>
}
 8006f26:	e017      	b.n	8006f58 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 ff3d 	bl	8007dac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006f3a:	89ba      	ldrh	r2, [r7, #12]
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f7ff fa71 	bl	8006428 <HAL_I2C_AddrCallback>
}
 8006f46:	e007      	b.n	8006f58 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2208      	movs	r2, #8
 8006f4e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006f58:	bf00      	nop
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	2b21      	cmp	r3, #33	; 0x21
 8006f7a:	d115      	bne.n	8006fa8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2211      	movs	r2, #17
 8006f88:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f90:	2101      	movs	r1, #1
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 ff0a 	bl	8007dac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f7ff fa19 	bl	80063d8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006fa6:	e014      	b.n	8006fd2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2220      	movs	r2, #32
 8006fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2212      	movs	r2, #18
 8006fb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fef4 	bl	8007dac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f7ff fa0d 	bl	80063ec <HAL_I2C_MasterRxCpltCallback>
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d008      	beq.n	800700e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	681a      	ldr	r2, [r3, #0]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800700a:	601a      	str	r2, [r3, #0]
 800700c:	e00c      	b.n	8007028 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007026:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b29      	cmp	r3, #41	; 0x29
 8007032:	d112      	bne.n	800705a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2228      	movs	r2, #40	; 0x28
 8007038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2221      	movs	r2, #33	; 0x21
 8007040:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007042:	2101      	movs	r1, #1
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 feb1 	bl	8007dac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7ff f9d4 	bl	8006400 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007058:	e017      	b.n	800708a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b2a      	cmp	r3, #42	; 0x2a
 8007064:	d111      	bne.n	800708a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2228      	movs	r2, #40	; 0x28
 800706a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2222      	movs	r2, #34	; 0x22
 8007072:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007074:	2102      	movs	r1, #2
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fe98 	bl	8007dac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f7ff f9c5 	bl	8006414 <HAL_I2C_SlaveRxCpltCallback>
}
 800708a:	bf00      	nop
 800708c:	3710      	adds	r7, #16
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
	...

08007094 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2220      	movs	r2, #32
 80070a8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b21      	cmp	r3, #33	; 0x21
 80070b4:	d107      	bne.n	80070c6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80070b6:	2101      	movs	r1, #1
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fe77 	bl	8007dac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2211      	movs	r2, #17
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
 80070c4:	e00c      	b.n	80070e0 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b22      	cmp	r3, #34	; 0x22
 80070d0:	d106      	bne.n	80070e0 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80070d2:	2102      	movs	r1, #2
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fe69 	bl	8007dac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2212      	movs	r2, #18
 80070de:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6859      	ldr	r1, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	4b4c      	ldr	r3, [pc, #304]	; (800721c <I2C_ITMasterCplt+0x188>)
 80070ec:	400b      	ands	r3, r1
 80070ee:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a49      	ldr	r2, [pc, #292]	; (8007220 <I2C_ITMasterCplt+0x18c>)
 80070fa:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2210      	movs	r2, #16
 800710c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007112:	f043 0204 	orr.w	r2, r3, #4
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b60      	cmp	r3, #96	; 0x60
 8007124:	d10a      	bne.n	800713c <I2C_ITMasterCplt+0xa8>
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f003 0304 	and.w	r3, r3, #4
 800712c:	2b00      	cmp	r3, #0
 800712e:	d005      	beq.n	800713c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	b2db      	uxtb	r3, r3
 8007138:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800713a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f000 fbd2 	bl	80078e6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007146:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b60      	cmp	r3, #96	; 0x60
 8007152:	d002      	beq.n	800715a <I2C_ITMasterCplt+0xc6>
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d006      	beq.n	8007168 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715e:	4619      	mov	r1, r3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 faa9 	bl	80076b8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007166:	e054      	b.n	8007212 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b21      	cmp	r3, #33	; 0x21
 8007172:	d124      	bne.n	80071be <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2220      	movs	r2, #32
 8007178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d10b      	bne.n	80071a6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7ff f95a 	bl	8006458 <HAL_I2C_MemTxCpltCallback>
}
 80071a4:	e035      	b.n	8007212 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f7ff f90e 	bl	80063d8 <HAL_I2C_MasterTxCpltCallback>
}
 80071bc:	e029      	b.n	8007212 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b22      	cmp	r3, #34	; 0x22
 80071c8:	d123      	bne.n	8007212 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2220      	movs	r2, #32
 80071ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b40      	cmp	r3, #64	; 0x40
 80071e2:	d10b      	bne.n	80071fc <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f7ff f939 	bl	800646c <HAL_I2C_MemRxCpltCallback>
}
 80071fa:	e00a      	b.n	8007212 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f7ff f8ed 	bl	80063ec <HAL_I2C_MasterRxCpltCallback>
}
 8007212:	bf00      	nop
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	fe00e800 	.word	0xfe00e800
 8007220:	ffff0000 	.word	0xffff0000

08007224 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b086      	sub	sp, #24
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007240:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2220      	movs	r2, #32
 8007248:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800724a:	7bfb      	ldrb	r3, [r7, #15]
 800724c:	2b21      	cmp	r3, #33	; 0x21
 800724e:	d002      	beq.n	8007256 <I2C_ITSlaveCplt+0x32>
 8007250:	7bfb      	ldrb	r3, [r7, #15]
 8007252:	2b29      	cmp	r3, #41	; 0x29
 8007254:	d108      	bne.n	8007268 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007256:	f248 0101 	movw	r1, #32769	; 0x8001
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fda6 	bl	8007dac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2221      	movs	r2, #33	; 0x21
 8007264:	631a      	str	r2, [r3, #48]	; 0x30
 8007266:	e00d      	b.n	8007284 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	2b22      	cmp	r3, #34	; 0x22
 800726c:	d002      	beq.n	8007274 <I2C_ITSlaveCplt+0x50>
 800726e:	7bfb      	ldrb	r3, [r7, #15]
 8007270:	2b2a      	cmp	r3, #42	; 0x2a
 8007272:	d107      	bne.n	8007284 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007274:	f248 0102 	movw	r1, #32770	; 0x8002
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fd97 	bl	8007dac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2222      	movs	r2, #34	; 0x22
 8007282:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007292:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6859      	ldr	r1, [r3, #4]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	4b7f      	ldr	r3, [pc, #508]	; (800749c <I2C_ITSlaveCplt+0x278>)
 80072a0:	400b      	ands	r3, r1
 80072a2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 fb1e 	bl	80078e6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d07a      	beq.n	80073aa <I2C_ITSlaveCplt+0x186>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072c2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 8110 	beq.w	80074ee <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a72      	ldr	r2, [pc, #456]	; (80074a0 <I2C_ITSlaveCplt+0x27c>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d059      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a70      	ldr	r2, [pc, #448]	; (80074a4 <I2C_ITSlaveCplt+0x280>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d053      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a6e      	ldr	r2, [pc, #440]	; (80074a8 <I2C_ITSlaveCplt+0x284>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d04d      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a6c      	ldr	r2, [pc, #432]	; (80074ac <I2C_ITSlaveCplt+0x288>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d047      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a6a      	ldr	r2, [pc, #424]	; (80074b0 <I2C_ITSlaveCplt+0x28c>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d041      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a68      	ldr	r2, [pc, #416]	; (80074b4 <I2C_ITSlaveCplt+0x290>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d03b      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a66      	ldr	r2, [pc, #408]	; (80074b8 <I2C_ITSlaveCplt+0x294>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d035      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a64      	ldr	r2, [pc, #400]	; (80074bc <I2C_ITSlaveCplt+0x298>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d02f      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a62      	ldr	r2, [pc, #392]	; (80074c0 <I2C_ITSlaveCplt+0x29c>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d029      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4a60      	ldr	r2, [pc, #384]	; (80074c4 <I2C_ITSlaveCplt+0x2a0>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d023      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a5e      	ldr	r2, [pc, #376]	; (80074c8 <I2C_ITSlaveCplt+0x2a4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d01d      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a5c      	ldr	r2, [pc, #368]	; (80074cc <I2C_ITSlaveCplt+0x2a8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d017      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a5a      	ldr	r2, [pc, #360]	; (80074d0 <I2C_ITSlaveCplt+0x2ac>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d011      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a58      	ldr	r2, [pc, #352]	; (80074d4 <I2C_ITSlaveCplt+0x2b0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00b      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a56      	ldr	r2, [pc, #344]	; (80074d8 <I2C_ITSlaveCplt+0x2b4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d005      	beq.n	800738e <I2C_ITSlaveCplt+0x16a>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a54      	ldr	r2, [pc, #336]	; (80074dc <I2C_ITSlaveCplt+0x2b8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d105      	bne.n	800739a <I2C_ITSlaveCplt+0x176>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	b29b      	uxth	r3, r3
 8007398:	e004      	b.n	80073a4 <I2C_ITSlaveCplt+0x180>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	8553      	strh	r3, [r2, #42]	; 0x2a
 80073a8:	e0a1      	b.n	80074ee <I2C_ITSlaveCplt+0x2ca>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 809c 	beq.w	80074ee <I2C_ITSlaveCplt+0x2ca>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073c4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f000 808f 	beq.w	80074ee <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a32      	ldr	r2, [pc, #200]	; (80074a0 <I2C_ITSlaveCplt+0x27c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d059      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a30      	ldr	r2, [pc, #192]	; (80074a4 <I2C_ITSlaveCplt+0x280>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d053      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a2e      	ldr	r2, [pc, #184]	; (80074a8 <I2C_ITSlaveCplt+0x284>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d04d      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a2c      	ldr	r2, [pc, #176]	; (80074ac <I2C_ITSlaveCplt+0x288>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d047      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a2a      	ldr	r2, [pc, #168]	; (80074b0 <I2C_ITSlaveCplt+0x28c>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d041      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a28      	ldr	r2, [pc, #160]	; (80074b4 <I2C_ITSlaveCplt+0x290>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d03b      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a26      	ldr	r2, [pc, #152]	; (80074b8 <I2C_ITSlaveCplt+0x294>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d035      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a24      	ldr	r2, [pc, #144]	; (80074bc <I2C_ITSlaveCplt+0x298>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d02f      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a22      	ldr	r2, [pc, #136]	; (80074c0 <I2C_ITSlaveCplt+0x29c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d029      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a20      	ldr	r2, [pc, #128]	; (80074c4 <I2C_ITSlaveCplt+0x2a0>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d023      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a1e      	ldr	r2, [pc, #120]	; (80074c8 <I2C_ITSlaveCplt+0x2a4>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d01d      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <I2C_ITSlaveCplt+0x2a8>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d017      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1a      	ldr	r2, [pc, #104]	; (80074d0 <I2C_ITSlaveCplt+0x2ac>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d011      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a18      	ldr	r2, [pc, #96]	; (80074d4 <I2C_ITSlaveCplt+0x2b0>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00b      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a16      	ldr	r2, [pc, #88]	; (80074d8 <I2C_ITSlaveCplt+0x2b4>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d005      	beq.n	8007490 <I2C_ITSlaveCplt+0x26c>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a14      	ldr	r2, [pc, #80]	; (80074dc <I2C_ITSlaveCplt+0x2b8>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d127      	bne.n	80074e0 <I2C_ITSlaveCplt+0x2bc>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	b29b      	uxth	r3, r3
 800749a:	e026      	b.n	80074ea <I2C_ITSlaveCplt+0x2c6>
 800749c:	fe00e800 	.word	0xfe00e800
 80074a0:	40020010 	.word	0x40020010
 80074a4:	40020028 	.word	0x40020028
 80074a8:	40020040 	.word	0x40020040
 80074ac:	40020058 	.word	0x40020058
 80074b0:	40020070 	.word	0x40020070
 80074b4:	40020088 	.word	0x40020088
 80074b8:	400200a0 	.word	0x400200a0
 80074bc:	400200b8 	.word	0x400200b8
 80074c0:	40020410 	.word	0x40020410
 80074c4:	40020428 	.word	0x40020428
 80074c8:	40020440 	.word	0x40020440
 80074cc:	40020458 	.word	0x40020458
 80074d0:	40020470 	.word	0x40020470
 80074d4:	40020488 	.word	0x40020488
 80074d8:	400204a0 	.word	0x400204a0
 80074dc:	400204b8 	.word	0x400204b8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d020      	beq.n	800753a <I2C_ITSlaveCplt+0x316>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f023 0304 	bic.w	r3, r3, #4
 80074fe:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750a:	b2d2      	uxtb	r2, r2
 800750c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00c      	beq.n	800753a <I2C_ITSlaveCplt+0x316>
    {
      hi2c->XferSize--;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007524:	3b01      	subs	r3, #1
 8007526:	b29a      	uxth	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800753e:	b29b      	uxth	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <I2C_ITSlaveCplt+0x32c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007548:	f043 0204 	orr.w	r2, r3, #4
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007562:	2b00      	cmp	r3, #0
 8007564:	d010      	beq.n	8007588 <I2C_ITSlaveCplt+0x364>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 f8a3 	bl	80076b8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b28      	cmp	r3, #40	; 0x28
 800757c:	d141      	bne.n	8007602 <I2C_ITSlaveCplt+0x3de>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800757e:	6979      	ldr	r1, [r7, #20]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f845 	bl	8007610 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007586:	e03c      	b.n	8007602 <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007590:	d014      	beq.n	80075bc <I2C_ITSlaveCplt+0x398>
    I2C_ITSlaveSeqCplt(hi2c);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f7ff fd21 	bl	8006fda <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1c      	ldr	r2, [pc, #112]	; (800760c <I2C_ITSlaveCplt+0x3e8>)
 800759c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2220      	movs	r2, #32
 80075a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f7fe ff45 	bl	8006444 <HAL_I2C_ListenCpltCallback>
}
 80075ba:	e022      	b.n	8007602 <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b22      	cmp	r3, #34	; 0x22
 80075c6:	d10e      	bne.n	80075e6 <I2C_ITSlaveCplt+0x3c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fe ff18 	bl	8006414 <HAL_I2C_SlaveRxCpltCallback>
}
 80075e4:	e00d      	b.n	8007602 <I2C_ITSlaveCplt+0x3de>
    hi2c->State = HAL_I2C_STATE_READY;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7fe feff 	bl	8006400 <HAL_I2C_SlaveTxCpltCallback>
}
 8007602:	bf00      	nop
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	ffff0000 	.word	0xffff0000

08007610 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a25      	ldr	r2, [pc, #148]	; (80076b4 <I2C_ITListenCplt+0xa4>)
 800761e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b00      	cmp	r3, #0
 8007644:	d022      	beq.n	800768c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007662:	2b00      	cmp	r3, #0
 8007664:	d012      	beq.n	800768c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766a:	3b01      	subs	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007676:	b29b      	uxth	r3, r3
 8007678:	3b01      	subs	r3, #1
 800767a:	b29a      	uxth	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007684:	f043 0204 	orr.w	r2, r3, #4
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800768c:	f248 0103 	movw	r1, #32771	; 0x8003
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f000 fb8b 	bl	8007dac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	2210      	movs	r2, #16
 800769c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fe fecc 	bl	8006444 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	ffff0000 	.word	0xffff0000

080076b8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a6d      	ldr	r2, [pc, #436]	; (800788c <I2C_ITError+0x1d4>)
 80076d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	2b28      	cmp	r3, #40	; 0x28
 80076ee:	d005      	beq.n	80076fc <I2C_ITError+0x44>
 80076f0:	7bfb      	ldrb	r3, [r7, #15]
 80076f2:	2b29      	cmp	r3, #41	; 0x29
 80076f4:	d002      	beq.n	80076fc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80076f6:	7bfb      	ldrb	r3, [r7, #15]
 80076f8:	2b2a      	cmp	r3, #42	; 0x2a
 80076fa:	d10b      	bne.n	8007714 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80076fc:	2103      	movs	r1, #3
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 fb54 	bl	8007dac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2228      	movs	r2, #40	; 0x28
 8007708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a60      	ldr	r2, [pc, #384]	; (8007890 <I2C_ITError+0x1d8>)
 8007710:	635a      	str	r2, [r3, #52]	; 0x34
 8007712:	e030      	b.n	8007776 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007714:	f248 0103 	movw	r1, #32771	; 0x8003
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fb47 	bl	8007dac <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f8e1 	bl	80078e6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800772a:	b2db      	uxtb	r3, r3
 800772c:	2b60      	cmp	r3, #96	; 0x60
 800772e:	d01f      	beq.n	8007770 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	699b      	ldr	r3, [r3, #24]
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b20      	cmp	r3, #32
 8007744:	d114      	bne.n	8007770 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b10      	cmp	r3, #16
 8007752:	d109      	bne.n	8007768 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2210      	movs	r2, #16
 800775a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007760:	f043 0204 	orr.w	r2, r3, #4
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2220      	movs	r2, #32
 800776e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777a:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007780:	2b00      	cmp	r3, #0
 8007782:	d039      	beq.n	80077f8 <I2C_ITError+0x140>
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b11      	cmp	r3, #17
 8007788:	d002      	beq.n	8007790 <I2C_ITError+0xd8>
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2b21      	cmp	r3, #33	; 0x21
 800778e:	d133      	bne.n	80077f8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800779a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800779e:	d107      	bne.n	80077b0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fd ffeb 	bl	8005790 <HAL_DMA_GetState>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d017      	beq.n	80077f0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	4a33      	ldr	r2, [pc, #204]	; (8007894 <I2C_ITError+0x1dc>)
 80077c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	4618      	mov	r0, r3
 80077d6:	f7fd fd95 	bl	8005304 <HAL_DMA_Abort_IT>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d04d      	beq.n	800787c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077ea:	4610      	mov	r0, r2
 80077ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077ee:	e045      	b.n	800787c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 f851 	bl	8007898 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80077f6:	e041      	b.n	800787c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d039      	beq.n	8007874 <I2C_ITError+0x1bc>
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	2b12      	cmp	r3, #18
 8007804:	d002      	beq.n	800780c <I2C_ITError+0x154>
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b22      	cmp	r3, #34	; 0x22
 800780a:	d133      	bne.n	8007874 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800781a:	d107      	bne.n	800782c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800782a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007830:	4618      	mov	r0, r3
 8007832:	f7fd ffad 	bl	8005790 <HAL_DMA_GetState>
 8007836:	4603      	mov	r3, r0
 8007838:	2b01      	cmp	r3, #1
 800783a:	d017      	beq.n	800786c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007840:	4a14      	ldr	r2, [pc, #80]	; (8007894 <I2C_ITError+0x1dc>)
 8007842:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007850:	4618      	mov	r0, r3
 8007852:	f7fd fd57 	bl	8005304 <HAL_DMA_Abort_IT>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d011      	beq.n	8007880 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007866:	4610      	mov	r0, r2
 8007868:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800786a:	e009      	b.n	8007880 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f813 	bl	8007898 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007872:	e005      	b.n	8007880 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f80f 	bl	8007898 <I2C_TreatErrorCallback>
  }
}
 800787a:	e002      	b.n	8007882 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800787c:	bf00      	nop
 800787e:	e000      	b.n	8007882 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007880:	bf00      	nop
}
 8007882:	bf00      	nop
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	ffff0000 	.word	0xffff0000
 8007890:	080066e1 	.word	0x080066e1
 8007894:	08007c39 	.word	0x08007c39

08007898 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b60      	cmp	r3, #96	; 0x60
 80078aa:	d10e      	bne.n	80078ca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2220      	movs	r2, #32
 80078b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fe fde6 	bl	8006494 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80078c8:	e009      	b.n	80078de <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f7fe fdd1 	bl	8006480 <HAL_I2C_ErrorCallback>
}
 80078de:	bf00      	nop
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b083      	sub	sp, #12
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	f003 0302 	and.w	r3, r3, #2
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d103      	bne.n	8007904 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2200      	movs	r2, #0
 8007902:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b01      	cmp	r3, #1
 8007910:	d007      	beq.n	8007922 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	699a      	ldr	r2, [r3, #24]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f042 0201 	orr.w	r2, r2, #1
 8007920:	619a      	str	r2, [r3, #24]
  }
}
 8007922:	bf00      	nop
 8007924:	370c      	adds	r7, #12
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b084      	sub	sp, #16
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800794a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d104      	bne.n	8007960 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007956:	2120      	movs	r1, #32
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f9bd 	bl	8007cd8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800795e:	e02d      	b.n	80079bc <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007968:	441a      	add	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007972:	b29b      	uxth	r3, r3
 8007974:	2bff      	cmp	r3, #255	; 0xff
 8007976:	d903      	bls.n	8007980 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	22ff      	movs	r2, #255	; 0xff
 800797c:	851a      	strh	r2, [r3, #40]	; 0x28
 800797e:	e004      	b.n	800798a <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007984:	b29a      	uxth	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007992:	4619      	mov	r1, r3
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3328      	adds	r3, #40	; 0x28
 800799a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80079a0:	f7fd fa46 	bl	8004e30 <HAL_DMA_Start_IT>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d004      	beq.n	80079b4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80079aa:	2110      	movs	r1, #16
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f7ff fe83 	bl	80076b8 <I2C_ITError>
}
 80079b2:	e003      	b.n	80079bc <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80079b4:	2140      	movs	r1, #64	; 0x40
 80079b6:	68f8      	ldr	r0, [r7, #12]
 80079b8:	f000 f98e 	bl	8007cd8 <I2C_Enable_IRQ>
}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d076      	beq.n	8007acc <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a71      	ldr	r2, [pc, #452]	; (8007bac <I2C_DMAError+0x1e8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d059      	beq.n	8007a9e <I2C_DMAError+0xda>
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a6f      	ldr	r2, [pc, #444]	; (8007bb0 <I2C_DMAError+0x1ec>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d053      	beq.n	8007a9e <I2C_DMAError+0xda>
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a6d      	ldr	r2, [pc, #436]	; (8007bb4 <I2C_DMAError+0x1f0>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d04d      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a6b      	ldr	r2, [pc, #428]	; (8007bb8 <I2C_DMAError+0x1f4>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d047      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a69      	ldr	r2, [pc, #420]	; (8007bbc <I2C_DMAError+0x1f8>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d041      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a67      	ldr	r2, [pc, #412]	; (8007bc0 <I2C_DMAError+0x1fc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d03b      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a65      	ldr	r2, [pc, #404]	; (8007bc4 <I2C_DMAError+0x200>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d035      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a63      	ldr	r2, [pc, #396]	; (8007bc8 <I2C_DMAError+0x204>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d02f      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a61      	ldr	r2, [pc, #388]	; (8007bcc <I2C_DMAError+0x208>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d029      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a5f      	ldr	r2, [pc, #380]	; (8007bd0 <I2C_DMAError+0x20c>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d023      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a5d      	ldr	r2, [pc, #372]	; (8007bd4 <I2C_DMAError+0x210>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d01d      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a5b      	ldr	r2, [pc, #364]	; (8007bd8 <I2C_DMAError+0x214>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d017      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a59      	ldr	r2, [pc, #356]	; (8007bdc <I2C_DMAError+0x218>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d011      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a57      	ldr	r2, [pc, #348]	; (8007be0 <I2C_DMAError+0x21c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00b      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a55      	ldr	r2, [pc, #340]	; (8007be4 <I2C_DMAError+0x220>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d005      	beq.n	8007a9e <I2C_DMAError+0xda>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a53      	ldr	r2, [pc, #332]	; (8007be8 <I2C_DMAError+0x224>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d109      	bne.n	8007ab2 <I2C_DMAError+0xee>
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	bf0c      	ite	eq
 8007aaa:	2301      	moveq	r3, #1
 8007aac:	2300      	movne	r3, #0
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	e008      	b.n	8007ac4 <I2C_DMAError+0x100>
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	bf0c      	ite	eq
 8007abe:	2301      	moveq	r3, #1
 8007ac0:	2300      	movne	r3, #0
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 8098 	beq.w	8007c06 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a33      	ldr	r2, [pc, #204]	; (8007bac <I2C_DMAError+0x1e8>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d059      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a31      	ldr	r2, [pc, #196]	; (8007bb0 <I2C_DMAError+0x1ec>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d053      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a2f      	ldr	r2, [pc, #188]	; (8007bb4 <I2C_DMAError+0x1f0>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d04d      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a2d      	ldr	r2, [pc, #180]	; (8007bb8 <I2C_DMAError+0x1f4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d047      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a2b      	ldr	r2, [pc, #172]	; (8007bbc <I2C_DMAError+0x1f8>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d041      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a29      	ldr	r2, [pc, #164]	; (8007bc0 <I2C_DMAError+0x1fc>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d03b      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a27      	ldr	r2, [pc, #156]	; (8007bc4 <I2C_DMAError+0x200>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d035      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a25      	ldr	r2, [pc, #148]	; (8007bc8 <I2C_DMAError+0x204>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d02f      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a23      	ldr	r2, [pc, #140]	; (8007bcc <I2C_DMAError+0x208>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d029      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a21      	ldr	r2, [pc, #132]	; (8007bd0 <I2C_DMAError+0x20c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d023      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a1f      	ldr	r2, [pc, #124]	; (8007bd4 <I2C_DMAError+0x210>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d01d      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a1d      	ldr	r2, [pc, #116]	; (8007bd8 <I2C_DMAError+0x214>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d017      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a1b      	ldr	r2, [pc, #108]	; (8007bdc <I2C_DMAError+0x218>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d011      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a19      	ldr	r2, [pc, #100]	; (8007be0 <I2C_DMAError+0x21c>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00b      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a17      	ldr	r2, [pc, #92]	; (8007be4 <I2C_DMAError+0x220>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d005      	beq.n	8007b96 <I2C_DMAError+0x1d2>
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a15      	ldr	r2, [pc, #84]	; (8007be8 <I2C_DMAError+0x224>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d12a      	bne.n	8007bec <I2C_DMAError+0x228>
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bf0c      	ite	eq
 8007ba2:	2301      	moveq	r3, #1
 8007ba4:	2300      	movne	r3, #0
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	e029      	b.n	8007bfe <I2C_DMAError+0x23a>
 8007baa:	bf00      	nop
 8007bac:	40020010 	.word	0x40020010
 8007bb0:	40020028 	.word	0x40020028
 8007bb4:	40020040 	.word	0x40020040
 8007bb8:	40020058 	.word	0x40020058
 8007bbc:	40020070 	.word	0x40020070
 8007bc0:	40020088 	.word	0x40020088
 8007bc4:	400200a0 	.word	0x400200a0
 8007bc8:	400200b8 	.word	0x400200b8
 8007bcc:	40020410 	.word	0x40020410
 8007bd0:	40020428 	.word	0x40020428
 8007bd4:	40020440 	.word	0x40020440
 8007bd8:	40020458 	.word	0x40020458
 8007bdc:	40020470 	.word	0x40020470
 8007be0:	40020488 	.word	0x40020488
 8007be4:	400204a0 	.word	0x400204a0
 8007be8:	400204b8 	.word	0x400204b8
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	bf0c      	ite	eq
 8007bf8:	2301      	moveq	r3, #1
 8007bfa:	2300      	movne	r3, #0
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8007c02:	2301      	movs	r3, #1
 8007c04:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f7fd fdd0 	bl	80057ac <HAL_DMA_GetError>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d00e      	beq.n	8007c30 <I2C_DMAError+0x26c>
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d00b      	beq.n	8007c30 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c26:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007c28:	2110      	movs	r1, #16
 8007c2a:	68b8      	ldr	r0, [r7, #8]
 8007c2c:	f7ff fd44 	bl	80076b8 <I2C_ITError>
  }
}
 8007c30:	bf00      	nop
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c52:	2200      	movs	r2, #0
 8007c54:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c62:	2200      	movs	r2, #0
 8007c64:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff fe16 	bl	8007898 <I2C_TreatErrorCallback>
}
 8007c6c:	bf00      	nop
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	607b      	str	r3, [r7, #4]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	817b      	strh	r3, [r7, #10]
 8007c82:	4613      	mov	r3, r2
 8007c84:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c86:	897b      	ldrh	r3, [r7, #10]
 8007c88:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c8c:	7a7b      	ldrb	r3, [r7, #9]
 8007c8e:	041b      	lsls	r3, r3, #16
 8007c90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c94:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007c9a:	6a3b      	ldr	r3, [r7, #32]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007ca2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	0d5b      	lsrs	r3, r3, #21
 8007cae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007cb2:	4b08      	ldr	r3, [pc, #32]	; (8007cd4 <I2C_TransferConfig+0x60>)
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	ea02 0103 	and.w	r1, r2, r3
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	697a      	ldr	r2, [r7, #20]
 8007cc2:	430a      	orrs	r2, r1
 8007cc4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007cc6:	bf00      	nop
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr
 8007cd2:	bf00      	nop
 8007cd4:	03ff63ff 	.word	0x03ff63ff

08007cd8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b085      	sub	sp, #20
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cec:	4a2d      	ldr	r2, [pc, #180]	; (8007da4 <I2C_Enable_IRQ+0xcc>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8007cf6:	4a2c      	ldr	r2, [pc, #176]	; (8007da8 <I2C_Enable_IRQ+0xd0>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d11d      	bne.n	8007d38 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007cfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	da03      	bge.n	8007d0c <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007d0a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007d0c:	887b      	ldrh	r3, [r7, #2]
 8007d0e:	2b10      	cmp	r3, #16
 8007d10:	d103      	bne.n	8007d1a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007d18:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d1a:	887b      	ldrh	r3, [r7, #2]
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	d103      	bne.n	8007d28 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007d26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007d28:	887b      	ldrh	r3, [r7, #2]
 8007d2a:	2b40      	cmp	r3, #64	; 0x40
 8007d2c:	d12c      	bne.n	8007d88 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d34:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007d36:	e027      	b.n	8007d88 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007d38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	da03      	bge.n	8007d48 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007d46:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007d48:	887b      	ldrh	r3, [r7, #2]
 8007d4a:	f003 0301 	and.w	r3, r3, #1
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d003      	beq.n	8007d5a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007d58:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007d5a:	887b      	ldrh	r3, [r7, #2]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8007d6a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007d6c:	887b      	ldrh	r3, [r7, #2]
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d103      	bne.n	8007d7a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007d78:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007d7a:	887b      	ldrh	r3, [r7, #2]
 8007d7c:	2b20      	cmp	r3, #32
 8007d7e:	d103      	bne.n	8007d88 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f043 0320 	orr.w	r3, r3, #32
 8007d86:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6819      	ldr	r1, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	601a      	str	r2, [r3, #0]
}
 8007d98:	bf00      	nop
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	080068d1 	.word	0x080068d1
 8007da8:	08006aa9 	.word	0x08006aa9

08007dac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007dbc:	887b      	ldrh	r3, [r7, #2]
 8007dbe:	f003 0301 	and.w	r3, r3, #1
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00f      	beq.n	8007de6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007dcc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007dda:	2b28      	cmp	r3, #40	; 0x28
 8007ddc:	d003      	beq.n	8007de6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007de4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8007de6:	887b      	ldrh	r3, [r7, #2]
 8007de8:	f003 0302 	and.w	r3, r3, #2
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d00f      	beq.n	8007e10 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8007df6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e04:	2b28      	cmp	r3, #40	; 0x28
 8007e06:	d003      	beq.n	8007e10 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8007e0e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007e10:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	da03      	bge.n	8007e20 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007e1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007e20:	887b      	ldrh	r3, [r7, #2]
 8007e22:	2b10      	cmp	r3, #16
 8007e24:	d103      	bne.n	8007e2e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007e2c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007e2e:	887b      	ldrh	r3, [r7, #2]
 8007e30:	2b20      	cmp	r3, #32
 8007e32:	d103      	bne.n	8007e3c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f043 0320 	orr.w	r3, r3, #32
 8007e3a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007e3c:	887b      	ldrh	r3, [r7, #2]
 8007e3e:	2b40      	cmp	r3, #64	; 0x40
 8007e40:	d103      	bne.n	8007e4a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e48:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	6819      	ldr	r1, [r3, #0]
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	43da      	mvns	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	400a      	ands	r2, r1
 8007e5a:	601a      	str	r2, [r3, #0]
}
 8007e5c:	bf00      	nop
 8007e5e:	3714      	adds	r7, #20
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	d138      	bne.n	8007ef0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e032      	b.n	8007ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2224      	movs	r2, #36	; 0x24
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f022 0201 	bic.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007eba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6819      	ldr	r1, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f042 0201 	orr.w	r2, r2, #1
 8007eda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2220      	movs	r2, #32
 8007ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	e000      	b.n	8007ef2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ef0:	2302      	movs	r3, #2
  }
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b085      	sub	sp, #20
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
 8007f06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	d139      	bne.n	8007f88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e033      	b.n	8007f8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2224      	movs	r2, #36	; 0x24
 8007f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0201 	bic.w	r2, r2, #1
 8007f40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	021b      	lsls	r3, r3, #8
 8007f56:	68fa      	ldr	r2, [r7, #12]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68fa      	ldr	r2, [r7, #12]
 8007f62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f042 0201 	orr.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	e000      	b.n	8007f8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f88:	2302      	movs	r3, #2
  }
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e031      	b.n	800800c <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d105      	bne.n	8007fc0 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7fa fa92 	bl	80024e4 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f823 	bl	8008014 <HAL_MMC_InitCard>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d101      	bne.n	8007fd8 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e019      	b.n	800800c <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00a      	beq.n	800800a <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fb46 	bl	800868c <HAL_MMC_ConfigWideBusOperation>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8008014:	b590      	push	{r4, r7, lr}
 8008016:	b08d      	sub	sp, #52	; 0x34
 8008018:	af02      	add	r7, sp, #8
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008020:	2300      	movs	r3, #0
 8008022:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008024:	2300      	movs	r3, #0
 8008026:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008028:	2300      	movs	r3, #0
 800802a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800802c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008030:	f04f 0100 	mov.w	r1, #0
 8008034:	f004 fae2 	bl	800c5fc <HAL_RCCEx_GetPeriphCLKFreq>
 8008038:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	2b00      	cmp	r3, #0
 800803e:	d109      	bne.n	8008054 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800804e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e070      	b.n	8008136 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8008054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008056:	0a1b      	lsrs	r3, r3, #8
 8008058:	4a39      	ldr	r2, [pc, #228]	; (8008140 <HAL_MMC_InitCard+0x12c>)
 800805a:	fba2 2303 	umull	r2, r3, r2, r3
 800805e:	091b      	lsrs	r3, r3, #4
 8008060:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681c      	ldr	r4, [r3, #0]
 8008066:	466a      	mov	r2, sp
 8008068:	f107 0318 	add.w	r3, r7, #24
 800806c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008070:	e882 0003 	stmia.w	r2, {r0, r1}
 8008074:	f107 030c 	add.w	r3, r7, #12
 8008078:	cb0e      	ldmia	r3, {r1, r2, r3}
 800807a:	4620      	mov	r0, r4
 800807c:	f007 f8c2 	bl	800f204 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4618      	mov	r0, r3
 8008086:	f007 f8f4 	bl	800f272 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008090:	69fb      	ldr	r3, [r7, #28]
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008096:	fbb2 f3f3 	udiv	r3, r2, r3
 800809a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800809c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d007      	beq.n	80080b2 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80080a2:	4a28      	ldr	r2, [pc, #160]	; (8008144 <HAL_MMC_InitCard+0x130>)
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080aa:	3301      	adds	r3, #1
 80080ac:	4618      	mov	r0, r3
 80080ae:	f7fb f8f7 	bl	80032a0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fcb4 	bl	8008a20 <MMC_PowerON>
 80080b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2201      	movs	r2, #1
 80080c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080cc:	6a3b      	ldr	r3, [r7, #32]
 80080ce:	431a      	orrs	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e02e      	b.n	8008136 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fba3 	bl	8008824 <MMC_InitCard>
 80080de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00b      	beq.n	80080fe <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	431a      	orrs	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80080fa:	2301      	movs	r3, #1
 80080fc:	e01b      	b.n	8008136 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008106:	4618      	mov	r0, r3
 8008108:	f007 f948 	bl	800f39c <SDMMC_CmdBlockLength>
 800810c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800810e:	6a3b      	ldr	r3, [r7, #32]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d00f      	beq.n	8008134 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a0b      	ldr	r2, [pc, #44]	; (8008148 <HAL_MMC_InitCard+0x134>)
 800811a:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	431a      	orrs	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e000      	b.n	8008136 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	372c      	adds	r7, #44	; 0x2c
 800813a:	46bd      	mov	sp, r7
 800813c:	bd90      	pop	{r4, r7, pc}
 800813e:	bf00      	nop
 8008140:	014f8b59 	.word	0x014f8b59
 8008144:	00012110 	.word	0x00012110
 8008148:	1fe00fff 	.word	0x1fe00fff

0800814c <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800815e:	0f9b      	lsrs	r3, r3, #30
 8008160:	b2da      	uxtb	r2, r3
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	0e9b      	lsrs	r3, r3, #26
 800816c:	b2db      	uxtb	r3, r3
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	b2da      	uxtb	r2, r3
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800817c:	0e1b      	lsrs	r3, r3, #24
 800817e:	b2db      	uxtb	r3, r3
 8008180:	f003 0303 	and.w	r3, r3, #3
 8008184:	b2da      	uxtb	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818e:	0c1b      	lsrs	r3, r3, #16
 8008190:	b2da      	uxtb	r2, r3
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819a:	0a1b      	lsrs	r3, r3, #8
 800819c:	b2da      	uxtb	r2, r3
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081b0:	0d1b      	lsrs	r3, r3, #20
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081bc:	0c1b      	lsrs	r3, r3, #16
 80081be:	b2db      	uxtb	r3, r3
 80081c0:	f003 030f 	and.w	r3, r3, #15
 80081c4:	b2da      	uxtb	r2, r3
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ce:	0bdb      	lsrs	r3, r3, #15
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e0:	0b9b      	lsrs	r3, r3, #14
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 0301 	and.w	r3, r3, #1
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f2:	0b5b      	lsrs	r3, r3, #13
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 0301 	and.w	r3, r3, #1
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008204:	0b1b      	lsrs	r3, r3, #12
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 0301 	and.w	r3, r3, #1
 800820c:	b2da      	uxtb	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2200      	movs	r2, #0
 8008216:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8008218:	f107 010c 	add.w	r1, r7, #12
 800821c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8008220:	22d4      	movs	r2, #212	; 0xd4
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fc4c 	bl	8008ac0 <MMC_ReadExtCSD>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e129      	b.n	8008486 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008236:	2b00      	cmp	r3, #0
 8008238:	d163      	bne.n	8008302 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823e:	009a      	lsls	r2, r3, #2
 8008240:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008244:	4013      	ands	r3, r2
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800824a:	0f92      	lsrs	r2, r2, #30
 800824c:	431a      	orrs	r2, r3
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008256:	0edb      	lsrs	r3, r3, #27
 8008258:	b2db      	uxtb	r3, r3
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	b2da      	uxtb	r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008268:	0e1b      	lsrs	r3, r3, #24
 800826a:	b2db      	uxtb	r3, r3
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	b2da      	uxtb	r2, r3
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800827a:	0d5b      	lsrs	r3, r3, #21
 800827c:	b2db      	uxtb	r3, r3
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	b2da      	uxtb	r2, r3
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800828c:	0c9b      	lsrs	r3, r3, #18
 800828e:	b2db      	uxtb	r3, r3
 8008290:	f003 0307 	and.w	r3, r3, #7
 8008294:	b2da      	uxtb	r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800829e:	0bdb      	lsrs	r3, r3, #15
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	7e1b      	ldrb	r3, [r3, #24]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	3302      	adds	r3, #2
 80082c2:	2201      	movs	r2, #1
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80082cc:	fb03 f202 	mul.w	r2, r3, r2
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	7a1b      	ldrb	r3, [r3, #8]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f003 030f 	and.w	r3, r3, #15
 80082de:	2201      	movs	r2, #1
 80082e0:	409a      	lsls	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	649a      	str	r2, [r3, #72]	; 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80082ee:	0a52      	lsrs	r2, r2, #9
 80082f0:	fb03 f202 	mul.w	r2, r3, r2
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082fe:	651a      	str	r2, [r3, #80]	; 0x50
 8008300:	e023      	b.n	800834a <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008306:	2b01      	cmp	r3, #1
 8008308:	d10f      	bne.n	800832a <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800831e:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	651a      	str	r2, [r3, #80]	; 0x50
 8008328:	e00f      	b.n	800834a <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a58      	ldr	r2, [pc, #352]	; (8008490 <HAL_MMC_GetCardCSD+0x344>)
 8008330:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008336:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	e09d      	b.n	8008486 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800834e:	0b9b      	lsrs	r3, r3, #14
 8008350:	b2db      	uxtb	r3, r3
 8008352:	f003 0301 	and.w	r3, r3, #1
 8008356:	b2da      	uxtb	r2, r3
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008360:	09db      	lsrs	r3, r3, #7
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008368:	b2da      	uxtb	r2, r3
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008378:	b2da      	uxtb	r2, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008382:	0fdb      	lsrs	r3, r3, #31
 8008384:	b2da      	uxtb	r2, r3
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800838e:	0f5b      	lsrs	r3, r3, #29
 8008390:	b2db      	uxtb	r3, r3
 8008392:	f003 0303 	and.w	r3, r3, #3
 8008396:	b2da      	uxtb	r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083a0:	0e9b      	lsrs	r3, r3, #26
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	f003 0307 	and.w	r3, r3, #7
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083b2:	0d9b      	lsrs	r3, r3, #22
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083c4:	0d5b      	lsrs	r3, r3, #21
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083e0:	0c1b      	lsrs	r3, r3, #16
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	f003 0301 	and.w	r3, r3, #1
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f4:	0bdb      	lsrs	r3, r3, #15
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008408:	0b9b      	lsrs	r3, r3, #14
 800840a:	b2db      	uxtb	r3, r3
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	b2da      	uxtb	r2, r3
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800841c:	0b5b      	lsrs	r3, r3, #13
 800841e:	b2db      	uxtb	r3, r3
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	b2da      	uxtb	r2, r3
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008430:	0b1b      	lsrs	r3, r3, #12
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	b2da      	uxtb	r2, r3
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008444:	0a9b      	lsrs	r3, r3, #10
 8008446:	b2db      	uxtb	r3, r3
 8008448:	f003 0303 	and.w	r3, r3, #3
 800844c:	b2da      	uxtb	r2, r3
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008458:	0a1b      	lsrs	r3, r3, #8
 800845a:	b2db      	uxtb	r3, r3
 800845c:	f003 0303 	and.w	r3, r3, #3
 8008460:	b2da      	uxtb	r2, r3
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800846c:	085b      	lsrs	r3, r3, #1
 800846e:	b2db      	uxtb	r3, r3
 8008470:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008474:	b2da      	uxtb	r2, r3
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3710      	adds	r7, #16
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	1fe00fff 	.word	0x1fe00fff

08008494 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b08e      	sub	sp, #56	; 0x38
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084a0:	f7fa fef2 	bl	8003288 <HAL_GetTick>
 80084a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d107      	bne.n	80084bc <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80084b8:	2301      	movs	r3, #1
 80084ba:	e0de      	b.n	800867a <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	2b01      	cmp	r3, #1
 80084c6:	f040 80d7 	bne.w	8008678 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	635a      	str	r2, [r3, #52]	; 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2203      	movs	r2, #3
 80084d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	2200      	movs	r2, #0
 80084de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084e4:	f04f 33ff 	mov.w	r3, #4294967295
 80084e8:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 80084ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084ee:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80084f0:	2390      	movs	r3, #144	; 0x90
 80084f2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084f4:	2302      	movs	r3, #2
 80084f6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80084fc:	2300      	movs	r3, #0
 80084fe:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f107 0210 	add.w	r2, r7, #16
 8008508:	4611      	mov	r1, r2
 800850a:	4618      	mov	r0, r3
 800850c:	f006 ff1a 	bl	800f344 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800851e:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2100      	movs	r1, #0
 8008526:	4618      	mov	r0, r3
 8008528:	f007 f866 	bl	800f5f8 <SDMMC_CmdSendEXTCSD>
 800852c:	62b8      	str	r0, [r7, #40]	; 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	2b00      	cmp	r3, #0
 8008532:	d045      	beq.n	80085c0 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a52      	ldr	r2, [pc, #328]	; (8008684 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800853a:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	431a      	orrs	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e092      	b.n	800867a <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d013      	beq.n	800858a <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8008562:	2300      	movs	r3, #0
 8008564:	637b      	str	r3, [r7, #52]	; 0x34
 8008566:	e00d      	b.n	8008584 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	f006 fe73 	bl	800f258 <SDMMC_ReadFIFO>
 8008572:	4602      	mov	r2, r0
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	3304      	adds	r3, #4
 800857c:	633b      	str	r3, [r7, #48]	; 0x30
        for (count = 0U; count < 8U; count++)
 800857e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008580:	3301      	adds	r3, #1
 8008582:	637b      	str	r3, [r7, #52]	; 0x34
 8008584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008586:	2b07      	cmp	r3, #7
 8008588:	d9ee      	bls.n	8008568 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800858a:	f7fa fe7d 	bl	8003288 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	429a      	cmp	r2, r3
 8008598:	d902      	bls.n	80085a0 <HAL_MMC_GetCardExtCSD+0x10c>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2b00      	cmp	r3, #0
 800859e:	d10f      	bne.n	80085c0 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a37      	ldr	r2, [pc, #220]	; (8008684 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80085a6:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	635a      	str	r2, [r3, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e05c      	b.n	800867a <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085c6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0c2      	beq.n	8008554 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	68da      	ldr	r2, [r3, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085dc:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e4:	f003 0308 	and.w	r3, r3, #8
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00f      	beq.n	800860c <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a24      	ldr	r2, [pc, #144]	; (8008684 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80085f2:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f8:	f043 0208 	orr.w	r2, r3, #8
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e036      	b.n	800867a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008612:	f003 0302 	and.w	r3, r3, #2
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00f      	beq.n	800863a <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a19      	ldr	r2, [pc, #100]	; (8008684 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8008620:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008626:	f043 0202 	orr.w	r2, r3, #2
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2201      	movs	r2, #1
 8008632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008636:	2301      	movs	r3, #1
 8008638:	e01f      	b.n	800867a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008640:	f003 0320 	and.w	r3, r3, #32
 8008644:	2b00      	cmp	r3, #0
 8008646:	d00f      	beq.n	8008668 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a0d      	ldr	r2, [pc, #52]	; (8008684 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800864e:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008654:	f043 0220 	orr.w	r2, r3, #32
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e008      	b.n	800867a <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a06      	ldr	r2, [pc, #24]	; (8008688 <HAL_MMC_GetCardExtCSD+0x1f4>)
 800866e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3738      	adds	r7, #56	; 0x38
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	1fe00fff 	.word	0x1fe00fff
 8008688:	18000f3a 	.word	0x18000f3a

0800868c <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 800868c:	b5b0      	push	{r4, r5, r7, lr}
 800868e:	b08c      	sub	sp, #48	; 0x30
 8008690:	af02      	add	r7, sp, #8
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2203      	movs	r2, #3
 800869e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d014      	beq.n	80086da <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d006      	beq.n	80086cc <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 80086be:	2204      	movs	r2, #4
 80086c0:	6839      	ldr	r1, [r7, #0]
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 faf0 	bl	8008ca8 <MMC_PwrClassUpdate>
 80086c8:	6238      	str	r0, [r7, #32]
 80086ca:	e00c      	b.n	80086e6 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 80086cc:	2202      	movs	r2, #2
 80086ce:	6839      	ldr	r1, [r7, #0]
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 fae9 	bl	8008ca8 <MMC_PwrClassUpdate>
 80086d6:	6238      	str	r0, [r7, #32]
 80086d8:	e005      	b.n	80086e6 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 80086da:	2201      	movs	r2, #1
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fae2 	bl	8008ca8 <MMC_PwrClassUpdate>
 80086e4:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 80086e6:	6a3b      	ldr	r3, [r7, #32]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d17b      	bne.n	80087e4 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086f2:	d107      	bne.n	8008704 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4946      	ldr	r1, [pc, #280]	; (8008814 <HAL_MMC_ConfigWideBusOperation+0x188>)
 80086fa:	4618      	mov	r0, r3
 80086fc:	f006 ff59 	bl	800f5b2 <SDMMC_CmdSwitch>
 8008700:	6238      	str	r0, [r7, #32]
 8008702:	e019      	b.n	8008738 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800870a:	d107      	bne.n	800871c <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4941      	ldr	r1, [pc, #260]	; (8008818 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8008712:	4618      	mov	r0, r3
 8008714:	f006 ff4d 	bl	800f5b2 <SDMMC_CmdSwitch>
 8008718:	6238      	str	r0, [r7, #32]
 800871a:	e00d      	b.n	8008738 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d107      	bne.n	8008732 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	493d      	ldr	r1, [pc, #244]	; (800881c <HAL_MMC_ConfigWideBusOperation+0x190>)
 8008728:	4618      	mov	r0, r3
 800872a:	f006 ff42 	bl	800f5b2 <SDMMC_CmdSwitch>
 800872e:	6238      	str	r0, [r7, #32]
 8008730:	e002      	b.n	8008738 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8008732:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008736:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d152      	bne.n	80087e4 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 800873e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008742:	627b      	str	r3, [r7, #36]	; 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874c:	041b      	lsls	r3, r3, #16
 800874e:	4619      	mov	r1, r3
 8008750:	4610      	mov	r0, r2
 8008752:	f006 feeb 	bl	800f52c <SDMMC_CmdSendStatus>
 8008756:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8008758:	6a3b      	ldr	r3, [r7, #32]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d112      	bne.n	8008784 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2100      	movs	r1, #0
 8008764:	4618      	mov	r0, r3
 8008766:	f006 fdda 	bl	800f31e <SDMMC_GetResponse>
 800876a:	61f8      	str	r0, [r7, #28]
        count--;
 800876c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876e:	3b01      	subs	r3, #1
 8008770:	627b      	str	r3, [r7, #36]	; 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008778:	2b00      	cmp	r3, #0
 800877a:	d104      	bne.n	8008786 <HAL_MMC_ConfigWideBusOperation+0xfa>
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e0      	bne.n	8008744 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8008782:	e000      	b.n	8008786 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8008784:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	2b00      	cmp	r3, #0
 800878a:	d025      	beq.n	80087d8 <HAL_MMC_ConfigWideBusOperation+0x14c>
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d122      	bne.n	80087d8 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800879c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80087a0:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 80087a2:	e01f      	b.n	80087e4 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f107 0408 	add.w	r4, r7, #8
 80087aa:	1d1d      	adds	r5, r3, #4
 80087ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087b0:	682b      	ldr	r3, [r5, #0]
 80087b2:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681c      	ldr	r4, [r3, #0]
 80087bc:	466a      	mov	r2, sp
 80087be:	f107 0314 	add.w	r3, r7, #20
 80087c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80087c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80087ca:	f107 0308 	add.w	r3, r7, #8
 80087ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087d0:	4620      	mov	r0, r4
 80087d2:	f006 fd17 	bl	800f204 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 80087d6:	e005      	b.n	80087e4 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d102      	bne.n	80087e4 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 80087de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087e2:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 80087ec:	6a3b      	ldr	r3, [r7, #32]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00b      	beq.n	800880a <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a0a      	ldr	r2, [pc, #40]	; (8008820 <HAL_MMC_ConfigWideBusOperation+0x194>)
 80087f8:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	431a      	orrs	r2, r3
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3728      	adds	r7, #40	; 0x28
 8008810:	46bd      	mov	sp, r7
 8008812:	bdb0      	pop	{r4, r5, r7, pc}
 8008814:	03b70200 	.word	0x03b70200
 8008818:	03b70100 	.word	0x03b70100
 800881c:	03b70000 	.word	0x03b70000
 8008820:	1fe00fff 	.word	0x1fe00fff

08008824 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8008824:	b5b0      	push	{r4, r5, r7, lr}
 8008826:	b096      	sub	sp, #88	; 0x58
 8008828:	af02      	add	r7, sp, #8
 800882a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 800882c:	2302      	movs	r3, #2
 800882e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4618      	mov	r0, r3
 8008838:	f006 fd2c 	bl	800f294 <SDMMC_GetPowerState>
 800883c:	4603      	mov	r3, r0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d102      	bne.n	8008848 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8008842:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008846:	e0e6      	b.n	8008a16 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4618      	mov	r0, r3
 800884e:	f006 fe09 	bl	800f464 <SDMMC_CmdSendCID>
 8008852:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <MMC_InitCard+0x3a>
  {
    return errorstate;
 800885a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800885c:	e0db      	b.n	8008a16 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2100      	movs	r1, #0
 8008864:	4618      	mov	r0, r3
 8008866:	f006 fd5a 	bl	800f31e <SDMMC_GetResponse>
 800886a:	4602      	mov	r2, r0
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2104      	movs	r1, #4
 8008876:	4618      	mov	r0, r3
 8008878:	f006 fd51 	bl	800f31e <SDMMC_GetResponse>
 800887c:	4602      	mov	r2, r0
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2108      	movs	r1, #8
 8008888:	4618      	mov	r0, r3
 800888a:	f006 fd48 	bl	800f31e <SDMMC_GetResponse>
 800888e:	4602      	mov	r2, r0
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	210c      	movs	r1, #12
 800889a:	4618      	mov	r0, r3
 800889c:	f006 fd3f 	bl	800f31e <SDMMC_GetResponse>
 80088a0:	4602      	mov	r2, r0
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80088ae:	4611      	mov	r1, r2
 80088b0:	4618      	mov	r0, r3
 80088b2:	f006 fe16 	bl	800f4e2 <SDMMC_CmdSetRelAddMmc>
 80088b6:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80088b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <MMC_InitCard+0x9e>
  {
    return errorstate;
 80088be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088c0:	e0a9      	b.n	8008a16 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 80088c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	041b      	lsls	r3, r3, #16
 80088d4:	4619      	mov	r1, r3
 80088d6:	4610      	mov	r0, r2
 80088d8:	f006 fde3 	bl	800f4a2 <SDMMC_CmdSendCSD>
 80088dc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80088de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <MMC_InitCard+0xc4>
  {
    return errorstate;
 80088e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e6:	e096      	b.n	8008a16 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	2100      	movs	r1, #0
 80088ee:	4618      	mov	r0, r3
 80088f0:	f006 fd15 	bl	800f31e <SDMMC_GetResponse>
 80088f4:	4602      	mov	r2, r0
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	2104      	movs	r1, #4
 8008900:	4618      	mov	r0, r3
 8008902:	f006 fd0c 	bl	800f31e <SDMMC_GetResponse>
 8008906:	4602      	mov	r2, r0
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2108      	movs	r1, #8
 8008912:	4618      	mov	r0, r3
 8008914:	f006 fd03 	bl	800f31e <SDMMC_GetResponse>
 8008918:	4602      	mov	r2, r0
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	210c      	movs	r1, #12
 8008924:	4618      	mov	r0, r3
 8008926:	f006 fcfa 	bl	800f31e <SDMMC_GetResponse>
 800892a:	4602      	mov	r2, r0
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2104      	movs	r1, #4
 8008936:	4618      	mov	r0, r3
 8008938:	f006 fcf1 	bl	800f31e <SDMMC_GetResponse>
 800893c:	4603      	mov	r3, r0
 800893e:	0d1a      	lsrs	r2, r3, #20
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800894c:	041b      	lsls	r3, r3, #16
 800894e:	4619      	mov	r1, r3
 8008950:	4610      	mov	r0, r2
 8008952:	f006 fd46 	bl	800f3e2 <SDMMC_CmdSelDesel>
 8008956:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <MMC_InitCard+0x13e>
  {
    return errorstate;
 800895e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008960:	e059      	b.n	8008a16 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8008962:	f107 031c 	add.w	r3, r7, #28
 8008966:	4619      	mov	r1, r3
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff fbef 	bl	800814c <HAL_MMC_GetCardCSD>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008978:	e04d      	b.n	8008a16 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	4619      	mov	r1, r3
 8008986:	4610      	mov	r0, r2
 8008988:	f006 fdd0 	bl	800f52c <SDMMC_CmdSendStatus>
 800898c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 800898e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800899a:	431a      	orrs	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	635a      	str	r2, [r3, #52]	; 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3374      	adds	r3, #116	; 0x74
 80089a4:	f04f 32ff 	mov.w	r2, #4294967295
 80089a8:	4619      	mov	r1, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7ff fd72 	bl	8008494 <HAL_MMC_GetCardExtCSD>
 80089b0:	4603      	mov	r3, r0
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d002      	beq.n	80089bc <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ba:	e02c      	b.n	8008a16 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c4:	041b      	lsls	r3, r3, #16
 80089c6:	4619      	mov	r1, r3
 80089c8:	4610      	mov	r0, r2
 80089ca:	f006 fdaf 	bl	800f52c <SDMMC_CmdSendStatus>
 80089ce:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80089d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d005      	beq.n	80089e2 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089dc:	431a      	orrs	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f107 0408 	add.w	r4, r7, #8
 80089e8:	1d1d      	adds	r5, r3, #4
 80089ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ee:	682b      	ldr	r3, [r5, #0]
 80089f0:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 80089f2:	2300      	movs	r3, #0
 80089f4:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681c      	ldr	r4, [r3, #0]
 80089fa:	466a      	mov	r2, sp
 80089fc:	f107 0314 	add.w	r3, r7, #20
 8008a00:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008a04:	e882 0003 	stmia.w	r2, {r0, r1}
 8008a08:	f107 0308 	add.w	r3, r7, #8
 8008a0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008a0e:	4620      	mov	r0, r4
 8008a10:	f006 fbf8 	bl	800f204 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3750      	adds	r7, #80	; 0x50
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008a20 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008a30:	2300      	movs	r3, #0
 8008a32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f006 fcf5 	bl	800f428 <SDMMC_CmdGoIdleState>
 8008a3e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d027      	beq.n	8008a96 <MMC_PowerON+0x76>
  {
    return errorstate;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	e034      	b.n	8008ab4 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	60ba      	str	r2, [r7, #8]
 8008a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d102      	bne.n	8008a5e <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8008a58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a5c:	e02a      	b.n	8008ab4 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4916      	ldr	r1, [pc, #88]	; (8008abc <MMC_PowerON+0x9c>)
 8008a64:	4618      	mov	r0, r3
 8008a66:	f006 fd84 	bl	800f572 <SDMMC_CmdOpCondition>
 8008a6a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d002      	beq.n	8008a78 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8008a72:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008a76:	e01d      	b.n	8008ab4 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f006 fc4d 	bl	800f31e <SDMMC_GetResponse>
 8008a84:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	0fdb      	lsrs	r3, r3, #31
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d101      	bne.n	8008a92 <MMC_PowerON+0x72>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e000      	b.n	8008a94 <MMC_PowerON+0x74>
 8008a92:	2300      	movs	r3, #0
 8008a94:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d0d6      	beq.n	8008a4a <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	0e1b      	lsrs	r3, r3, #24
 8008aa0:	2bc0      	cmp	r3, #192	; 0xc0
 8008aa2:	d103      	bne.n	8008aac <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	639a      	str	r2, [r3, #56]	; 0x38
 8008aaa:	e002      	b.n	8008ab2 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_MMC_ERROR_NONE;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3718      	adds	r7, #24
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	c0ff8000 	.word	0xc0ff8000

08008ac0 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b090      	sub	sp, #64	; 0x40
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	603b      	str	r3, [r7, #0]
 8008acc:	4613      	mov	r3, r2
 8008ace:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008ad0:	f7fa fbda 	bl	8003288 <HAL_GetTick>
 8008ad4:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2200      	movs	r2, #0
 8008ade:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8008aec:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 8008aee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008af2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008af4:	2390      	movs	r3, #144	; 0x90
 8008af6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008af8:	2302      	movs	r3, #2
 8008afa:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008afc:	2300      	movs	r3, #0
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008b00:	2301      	movs	r3, #1
 8008b02:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f107 0214 	add.w	r2, r7, #20
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f006 fc18 	bl	800f344 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2100      	movs	r1, #0
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f006 fd6c 	bl	800f5f8 <SDMMC_CmdSendEXTCSD>
 8008b20:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d04e      	beq.n	8008bc6 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a5c      	ldr	r2, [pc, #368]	; (8008ca0 <MMC_ReadExtCSD+0x1e0>)
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	431a      	orrs	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	e0a6      	b.n	8008c96 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d01c      	beq.n	8008b90 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 8008b56:	2300      	movs	r3, #0
 8008b58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b5a:	e013      	b.n	8008b84 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f006 fb79 	bl	800f258 <SDMMC_ReadFIFO>
 8008b66:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8008b68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6c:	4413      	add	r3, r2
 8008b6e:	88fa      	ldrh	r2, [r7, #6]
 8008b70:	0892      	lsrs	r2, r2, #2
 8008b72:	b292      	uxth	r2, r2
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d102      	bne.n	8008b7e <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b7c:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 8008b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b80:	3301      	adds	r3, #1
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b86:	2b07      	cmp	r3, #7
 8008b88:	d9e8      	bls.n	8008b5c <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	3308      	adds	r3, #8
 8008b8e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008b90:	f7fa fb7a 	bl	8003288 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	683a      	ldr	r2, [r7, #0]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d902      	bls.n	8008ba6 <MMC_ReadExtCSD+0xe6>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10f      	bne.n	8008bc6 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a3d      	ldr	r2, [pc, #244]	; (8008ca0 <MMC_ReadExtCSD+0x1e0>)
 8008bac:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e067      	b.n	8008c96 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bcc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d0b9      	beq.n	8008b48 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bda:	f003 0308 	and.w	r3, r3, #8
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00f      	beq.n	8008c02 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a2e      	ldr	r2, [pc, #184]	; (8008ca0 <MMC_ReadExtCSD+0x1e0>)
 8008be8:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bee:	f043 0208 	orr.w	r2, r3, #8
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e049      	b.n	8008c96 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00f      	beq.n	8008c30 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a22      	ldr	r2, [pc, #136]	; (8008ca0 <MMC_ReadExtCSD+0x1e0>)
 8008c16:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c1c:	f043 0202 	orr.w	r2, r3, #2
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e032      	b.n	8008c96 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c36:	f003 0320 	and.w	r3, r3, #32
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00f      	beq.n	8008c5e <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a17      	ldr	r2, [pc, #92]	; (8008ca0 <MMC_ReadExtCSD+0x1e0>)
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c4a:	f043 0220 	orr.w	r2, r3, #32
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2201      	movs	r2, #1
 8008c56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e01b      	b.n	8008c96 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681a      	ldr	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	041b      	lsls	r3, r3, #16
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f006 fc5e 	bl	800f52c <SDMMC_CmdSendStatus>
 8008c70:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d005      	beq.n	8008c84 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7e:	431a      	orrs	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a06      	ldr	r2, [pc, #24]	; (8008ca4 <MMC_ReadExtCSD+0x1e4>)
 8008c8a:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3740      	adds	r7, #64	; 0x40
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	1fe00fff 	.word	0x1fe00fff
 8008ca4:	18000f3a 	.word	0x18000f3a

08008ca8 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	; 0x28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cc2:	d004      	beq.n	8008cce <MMC_PwrClassUpdate+0x26>
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cca:	f040 8085 	bne.w	8008dd8 <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8008cce:	2300      	movs	r3, #0
 8008cd0:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8008cd2:	f107 0114 	add.w	r1, r7, #20
 8008cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cda:	22bb      	movs	r2, #187	; 0xbb
 8008cdc:	68f8      	ldr	r0, [r7, #12]
 8008cde:	f7ff feef 	bl	8008ac0 <MMC_ReadExtCSD>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008ce8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008cec:	61fb      	str	r3, [r7, #28]
 8008cee:	e002      	b.n	8008cf6 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	0e1b      	lsrs	r3, r3, #24
 8008cf4:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	d105      	bne.n	8008d08 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8008d02:	0e1b      	lsrs	r3, r3, #24
 8008d04:	61bb      	str	r3, [r7, #24]
 8008d06:	e00e      	b.n	8008d26 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2b02      	cmp	r3, #2
 8008d0c:	d106      	bne.n	8008d1c <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8008d14:	0c1b      	lsrs	r3, r3, #16
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	e004      	b.n	8008d26 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8008d22:	0e1b      	lsrs	r3, r3, #24
 8008d24:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d155      	bne.n	8008dd8 <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d32:	d102      	bne.n	8008d3a <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	091b      	lsrs	r3, r3, #4
 8008d38:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	4053      	eors	r3, r2
 8008d40:	f003 030f 	and.w	r3, r3, #15
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d047      	beq.n	8008dd8 <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	021b      	lsls	r3, r3, #8
 8008d50:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008d54:	4b23      	ldr	r3, [pc, #140]	; (8008de4 <MMC_PwrClassUpdate+0x13c>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	4619      	mov	r1, r3
 8008d5a:	f006 fc2a 	bl	800f5b2 <SDMMC_CmdSwitch>
 8008d5e:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d138      	bne.n	8008dd8 <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8008d66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008d6a:	627b      	str	r3, [r7, #36]	; 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d74:	041b      	lsls	r3, r3, #16
 8008d76:	4619      	mov	r1, r3
 8008d78:	4610      	mov	r0, r2
 8008d7a:	f006 fbd7 	bl	800f52c <SDMMC_CmdSendStatus>
 8008d7e:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d112      	bne.n	8008dac <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f006 fac6 	bl	800f31e <SDMMC_GetResponse>
 8008d92:	6238      	str	r0, [r7, #32]
            count--;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	3b01      	subs	r3, #1
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8008d9a:	6a3b      	ldr	r3, [r7, #32]
 8008d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d104      	bne.n	8008dae <MMC_PwrClassUpdate+0x106>
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e0      	bne.n	8008d6c <MMC_PwrClassUpdate+0xc4>
 8008daa:	e000      	b.n	8008dae <MMC_PwrClassUpdate+0x106>
              break;
 8008dac:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00b      	beq.n	8008dcc <MMC_PwrClassUpdate+0x124>
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d108      	bne.n	8008dcc <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d009      	beq.n	8008dd8 <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008dc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dc8:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8008dca:	e005      	b.n	8008dd8 <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 8008dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d102      	bne.n	8008dd8 <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8008dd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008dd6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8008dd8:	69fb      	ldr	r3, [r7, #28]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3728      	adds	r7, #40	; 0x28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	03bb0000 	.word	0x03bb0000

08008de8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008de8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dea:	b08f      	sub	sp, #60	; 0x3c
 8008dec:	af0a      	add	r7, sp, #40	; 0x28
 8008dee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e116      	b.n	8009028 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008e06:	b2db      	uxtb	r3, r3
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d106      	bne.n	8008e1a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f00a fbd1 	bl	80135bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2203      	movs	r2, #3
 8008e1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d102      	bne.n	8008e34 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f006 fecc 	bl	800fbd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	603b      	str	r3, [r7, #0]
 8008e44:	687e      	ldr	r6, [r7, #4]
 8008e46:	466d      	mov	r5, sp
 8008e48:	f106 0410 	add.w	r4, r6, #16
 8008e4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008e58:	e885 0003 	stmia.w	r5, {r0, r1}
 8008e5c:	1d33      	adds	r3, r6, #4
 8008e5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e60:	6838      	ldr	r0, [r7, #0]
 8008e62:	f006 fd97 	bl	800f994 <USB_CoreInit>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d005      	beq.n	8008e78 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	e0d7      	b.n	8009028 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2100      	movs	r1, #0
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f006 feba 	bl	800fbf8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]
 8008e88:	e04a      	b.n	8008f20 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008e8a:	7bfa      	ldrb	r2, [r7, #15]
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	4613      	mov	r3, r2
 8008e90:	00db      	lsls	r3, r3, #3
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	440b      	add	r3, r1
 8008e98:	333d      	adds	r3, #61	; 0x3d
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008e9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ea0:	6879      	ldr	r1, [r7, #4]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	00db      	lsls	r3, r3, #3
 8008ea6:	4413      	add	r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	440b      	add	r3, r1
 8008eac:	333c      	adds	r3, #60	; 0x3c
 8008eae:	7bfa      	ldrb	r2, [r7, #15]
 8008eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008eb2:	7bfa      	ldrb	r2, [r7, #15]
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	b298      	uxth	r0, r3
 8008eb8:	6879      	ldr	r1, [r7, #4]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	00db      	lsls	r3, r3, #3
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	440b      	add	r3, r1
 8008ec4:	3356      	adds	r3, #86	; 0x56
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008eca:	7bfa      	ldrb	r2, [r7, #15]
 8008ecc:	6879      	ldr	r1, [r7, #4]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	440b      	add	r3, r1
 8008ed8:	3340      	adds	r3, #64	; 0x40
 8008eda:	2200      	movs	r2, #0
 8008edc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008ede:	7bfa      	ldrb	r2, [r7, #15]
 8008ee0:	6879      	ldr	r1, [r7, #4]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	00db      	lsls	r3, r3, #3
 8008ee6:	4413      	add	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	440b      	add	r3, r1
 8008eec:	3344      	adds	r3, #68	; 0x44
 8008eee:	2200      	movs	r2, #0
 8008ef0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008ef2:	7bfa      	ldrb	r2, [r7, #15]
 8008ef4:	6879      	ldr	r1, [r7, #4]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	00db      	lsls	r3, r3, #3
 8008efa:	4413      	add	r3, r2
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	440b      	add	r3, r1
 8008f00:	3348      	adds	r3, #72	; 0x48
 8008f02:	2200      	movs	r2, #0
 8008f04:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008f06:	7bfa      	ldrb	r2, [r7, #15]
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	00db      	lsls	r3, r3, #3
 8008f0e:	4413      	add	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	440b      	add	r3, r1
 8008f14:	334c      	adds	r3, #76	; 0x4c
 8008f16:	2200      	movs	r2, #0
 8008f18:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
 8008f20:	7bfa      	ldrb	r2, [r7, #15]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d3af      	bcc.n	8008e8a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
 8008f2e:	e044      	b.n	8008fba <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008f30:	7bfa      	ldrb	r2, [r7, #15]
 8008f32:	6879      	ldr	r1, [r7, #4]
 8008f34:	4613      	mov	r3, r2
 8008f36:	00db      	lsls	r3, r3, #3
 8008f38:	4413      	add	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	440b      	add	r3, r1
 8008f3e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008f42:	2200      	movs	r2, #0
 8008f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008f46:	7bfa      	ldrb	r2, [r7, #15]
 8008f48:	6879      	ldr	r1, [r7, #4]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	4413      	add	r3, r2
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	440b      	add	r3, r1
 8008f54:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008f58:	7bfa      	ldrb	r2, [r7, #15]
 8008f5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008f5c:	7bfa      	ldrb	r2, [r7, #15]
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	4613      	mov	r3, r2
 8008f62:	00db      	lsls	r3, r3, #3
 8008f64:	4413      	add	r3, r2
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	440b      	add	r3, r1
 8008f6a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008f6e:	2200      	movs	r2, #0
 8008f70:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008f72:	7bfa      	ldrb	r2, [r7, #15]
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	4613      	mov	r3, r2
 8008f78:	00db      	lsls	r3, r3, #3
 8008f7a:	4413      	add	r3, r2
 8008f7c:	009b      	lsls	r3, r3, #2
 8008f7e:	440b      	add	r3, r1
 8008f80:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008f84:	2200      	movs	r2, #0
 8008f86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008f88:	7bfa      	ldrb	r2, [r7, #15]
 8008f8a:	6879      	ldr	r1, [r7, #4]
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	00db      	lsls	r3, r3, #3
 8008f90:	4413      	add	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	440b      	add	r3, r1
 8008f96:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008f9e:	7bfa      	ldrb	r2, [r7, #15]
 8008fa0:	6879      	ldr	r1, [r7, #4]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	00db      	lsls	r3, r3, #3
 8008fa6:	4413      	add	r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	440b      	add	r3, r1
 8008fac:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fb4:	7bfb      	ldrb	r3, [r7, #15]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	73fb      	strb	r3, [r7, #15]
 8008fba:	7bfa      	ldrb	r2, [r7, #15]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d3b5      	bcc.n	8008f30 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	603b      	str	r3, [r7, #0]
 8008fca:	687e      	ldr	r6, [r7, #4]
 8008fcc:	466d      	mov	r5, sp
 8008fce:	f106 0410 	add.w	r4, r6, #16
 8008fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008fde:	e885 0003 	stmia.w	r5, {r0, r1}
 8008fe2:	1d33      	adds	r3, r6, #4
 8008fe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fe6:	6838      	ldr	r0, [r7, #0]
 8008fe8:	f006 fe52 	bl	800fc90 <USB_DevInit>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d005      	beq.n	8008ffe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	e014      	b.n	8009028 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2201      	movs	r2, #1
 800900a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009012:	2b01      	cmp	r3, #1
 8009014:	d102      	bne.n	800901c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f001 f970 	bl	800a2fc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f007 fe94 	bl	8010d4e <USB_DevDisconnect>

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009030 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009044:	2b01      	cmp	r3, #1
 8009046:	d101      	bne.n	800904c <HAL_PCD_Start+0x1c>
 8009048:	2302      	movs	r3, #2
 800904a:	e022      	b.n	8009092 <HAL_PCD_Start+0x62>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800905c:	2b00      	cmp	r3, #0
 800905e:	d109      	bne.n	8009074 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8009064:	2b01      	cmp	r3, #1
 8009066:	d105      	bne.n	8009074 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4618      	mov	r0, r3
 800907a:	f006 fd9b 	bl	800fbb4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4618      	mov	r0, r3
 8009084:	f007 fe42 	bl	8010d0c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009090:	2300      	movs	r3, #0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3710      	adds	r7, #16
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800909a:	b590      	push	{r4, r7, lr}
 800909c:	b08d      	sub	sp, #52	; 0x34
 800909e:	af00      	add	r7, sp, #0
 80090a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f007 ff00 	bl	8010eb6 <USB_GetMode>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f040 84b7 	bne.w	8009a2c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f007 fe64 	bl	8010d90 <USB_ReadInterrupts>
 80090c8:	4603      	mov	r3, r0
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 84ad 	beq.w	8009a2a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	0a1b      	lsrs	r3, r3, #8
 80090da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f007 fe51 	bl	8010d90 <USB_ReadInterrupts>
 80090ee:	4603      	mov	r3, r0
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d107      	bne.n	8009108 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	695a      	ldr	r2, [r3, #20]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f002 0202 	and.w	r2, r2, #2
 8009106:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4618      	mov	r0, r3
 800910e:	f007 fe3f 	bl	8010d90 <USB_ReadInterrupts>
 8009112:	4603      	mov	r3, r0
 8009114:	f003 0310 	and.w	r3, r3, #16
 8009118:	2b10      	cmp	r3, #16
 800911a:	d161      	bne.n	80091e0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	699a      	ldr	r2, [r3, #24]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f022 0210 	bic.w	r2, r2, #16
 800912a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	6a1b      	ldr	r3, [r3, #32]
 8009130:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	f003 020f 	and.w	r2, r3, #15
 8009138:	4613      	mov	r3, r2
 800913a:	00db      	lsls	r3, r3, #3
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	4413      	add	r3, r2
 8009148:	3304      	adds	r3, #4
 800914a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800914c:	69bb      	ldr	r3, [r7, #24]
 800914e:	0c5b      	lsrs	r3, r3, #17
 8009150:	f003 030f 	and.w	r3, r3, #15
 8009154:	2b02      	cmp	r3, #2
 8009156:	d124      	bne.n	80091a2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009158:	69ba      	ldr	r2, [r7, #24]
 800915a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800915e:	4013      	ands	r3, r2
 8009160:	2b00      	cmp	r3, #0
 8009162:	d035      	beq.n	80091d0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	091b      	lsrs	r3, r3, #4
 800916c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800916e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009172:	b29b      	uxth	r3, r3
 8009174:	461a      	mov	r2, r3
 8009176:	6a38      	ldr	r0, [r7, #32]
 8009178:	f007 fc76 	bl	8010a68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	68da      	ldr	r2, [r3, #12]
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	091b      	lsrs	r3, r3, #4
 8009184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009188:	441a      	add	r2, r3
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	695a      	ldr	r2, [r3, #20]
 8009192:	69bb      	ldr	r3, [r7, #24]
 8009194:	091b      	lsrs	r3, r3, #4
 8009196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800919a:	441a      	add	r2, r3
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	615a      	str	r2, [r3, #20]
 80091a0:	e016      	b.n	80091d0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80091a2:	69bb      	ldr	r3, [r7, #24]
 80091a4:	0c5b      	lsrs	r3, r3, #17
 80091a6:	f003 030f 	and.w	r3, r3, #15
 80091aa:	2b06      	cmp	r3, #6
 80091ac:	d110      	bne.n	80091d0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091b4:	2208      	movs	r2, #8
 80091b6:	4619      	mov	r1, r3
 80091b8:	6a38      	ldr	r0, [r7, #32]
 80091ba:	f007 fc55 	bl	8010a68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	695a      	ldr	r2, [r3, #20]
 80091c2:	69bb      	ldr	r3, [r7, #24]
 80091c4:	091b      	lsrs	r3, r3, #4
 80091c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80091ca:	441a      	add	r2, r3
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	699a      	ldr	r2, [r3, #24]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f042 0210 	orr.w	r2, r2, #16
 80091de:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4618      	mov	r0, r3
 80091e6:	f007 fdd3 	bl	8010d90 <USB_ReadInterrupts>
 80091ea:	4603      	mov	r3, r0
 80091ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091f4:	f040 80a7 	bne.w	8009346 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4618      	mov	r0, r3
 8009202:	f007 fdd8 	bl	8010db6 <USB_ReadDevAllOutEpInterrupt>
 8009206:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009208:	e099      	b.n	800933e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 808e 	beq.w	8009332 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800921c:	b2d2      	uxtb	r2, r2
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f007 fdfc 	bl	8010e1e <USB_ReadDevOutEPInterrupt>
 8009226:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00c      	beq.n	800924c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	4413      	add	r3, r2
 800923a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800923e:	461a      	mov	r2, r3
 8009240:	2301      	movs	r3, #1
 8009242:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 fed2 	bl	8009ff0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	f003 0308 	and.w	r3, r3, #8
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00c      	beq.n	8009270 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	69fb      	ldr	r3, [r7, #28]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009262:	461a      	mov	r2, r3
 8009264:	2308      	movs	r3, #8
 8009266:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 ffa8 	bl	800a1c0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b00      	cmp	r3, #0
 8009278:	d008      	beq.n	800928c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009286:	461a      	mov	r2, r3
 8009288:	2310      	movs	r3, #16
 800928a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	f003 0302 	and.w	r3, r3, #2
 8009292:	2b00      	cmp	r3, #0
 8009294:	d030      	beq.n	80092f8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009296:	6a3b      	ldr	r3, [r7, #32]
 8009298:	695b      	ldr	r3, [r3, #20]
 800929a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800929e:	2b80      	cmp	r3, #128	; 0x80
 80092a0:	d109      	bne.n	80092b6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	69fa      	ldr	r2, [r7, #28]
 80092ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80092b4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80092b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092b8:	4613      	mov	r3, r2
 80092ba:	00db      	lsls	r3, r3, #3
 80092bc:	4413      	add	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092c4:	687a      	ldr	r2, [r7, #4]
 80092c6:	4413      	add	r3, r2
 80092c8:	3304      	adds	r3, #4
 80092ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	78db      	ldrb	r3, [r3, #3]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d108      	bne.n	80092e6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	2200      	movs	r2, #0
 80092d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80092da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	4619      	mov	r1, r3
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f00a fa63 	bl	80137ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f2:	461a      	mov	r2, r3
 80092f4:	2302      	movs	r3, #2
 80092f6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	f003 0320 	and.w	r3, r3, #32
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d008      	beq.n	8009314 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009304:	015a      	lsls	r2, r3, #5
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	4413      	add	r3, r2
 800930a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800930e:	461a      	mov	r2, r3
 8009310:	2320      	movs	r3, #32
 8009312:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d009      	beq.n	8009332 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	015a      	lsls	r2, r3, #5
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	4413      	add	r3, r2
 8009326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800932a:	461a      	mov	r2, r3
 800932c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009330:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	3301      	adds	r3, #1
 8009336:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800933a:	085b      	lsrs	r3, r3, #1
 800933c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800933e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009340:	2b00      	cmp	r3, #0
 8009342:	f47f af62 	bne.w	800920a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4618      	mov	r0, r3
 800934c:	f007 fd20 	bl	8010d90 <USB_ReadInterrupts>
 8009350:	4603      	mov	r3, r0
 8009352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009356:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800935a:	f040 80db 	bne.w	8009514 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4618      	mov	r0, r3
 8009364:	f007 fd41 	bl	8010dea <USB_ReadDevAllInEpInterrupt>
 8009368:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800936e:	e0cd      	b.n	800950c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	f003 0301 	and.w	r3, r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 80c2 	beq.w	8009500 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009382:	b2d2      	uxtb	r2, r2
 8009384:	4611      	mov	r1, r2
 8009386:	4618      	mov	r0, r3
 8009388:	f007 fd67 	bl	8010e5a <USB_ReadDevInEPInterrupt>
 800938c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b00      	cmp	r3, #0
 8009396:	d057      	beq.n	8009448 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800939a:	f003 030f 	and.w	r3, r3, #15
 800939e:	2201      	movs	r2, #1
 80093a0:	fa02 f303 	lsl.w	r3, r2, r3
 80093a4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	43db      	mvns	r3, r3
 80093b2:	69f9      	ldr	r1, [r7, #28]
 80093b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093b8:	4013      	ands	r3, r2
 80093ba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c8:	461a      	mov	r2, r3
 80093ca:	2301      	movs	r3, #1
 80093cc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	68db      	ldr	r3, [r3, #12]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d132      	bne.n	800943c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80093d6:	6879      	ldr	r1, [r7, #4]
 80093d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093da:	4613      	mov	r3, r2
 80093dc:	00db      	lsls	r3, r3, #3
 80093de:	4413      	add	r3, r2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	440b      	add	r3, r1
 80093e4:	3348      	adds	r3, #72	; 0x48
 80093e6:	6819      	ldr	r1, [r3, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093ec:	4613      	mov	r3, r2
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4403      	add	r3, r0
 80093f6:	3344      	adds	r3, #68	; 0x44
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4419      	add	r1, r3
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009400:	4613      	mov	r3, r2
 8009402:	00db      	lsls	r3, r3, #3
 8009404:	4413      	add	r3, r2
 8009406:	009b      	lsls	r3, r3, #2
 8009408:	4403      	add	r3, r0
 800940a:	3348      	adds	r3, #72	; 0x48
 800940c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800940e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009410:	2b00      	cmp	r3, #0
 8009412:	d113      	bne.n	800943c <HAL_PCD_IRQHandler+0x3a2>
 8009414:	6879      	ldr	r1, [r7, #4]
 8009416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009418:	4613      	mov	r3, r2
 800941a:	00db      	lsls	r3, r3, #3
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	334c      	adds	r3, #76	; 0x4c
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d108      	bne.n	800943c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6818      	ldr	r0, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009434:	461a      	mov	r2, r3
 8009436:	2101      	movs	r1, #1
 8009438:	f007 fd70 	bl	8010f1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	b2db      	uxtb	r3, r3
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f00a f92d 	bl	80136a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	f003 0308 	and.w	r3, r3, #8
 800944e:	2b00      	cmp	r3, #0
 8009450:	d008      	beq.n	8009464 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009454:	015a      	lsls	r2, r3, #5
 8009456:	69fb      	ldr	r3, [r7, #28]
 8009458:	4413      	add	r3, r2
 800945a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800945e:	461a      	mov	r2, r3
 8009460:	2308      	movs	r3, #8
 8009462:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	f003 0310 	and.w	r3, r3, #16
 800946a:	2b00      	cmp	r3, #0
 800946c:	d008      	beq.n	8009480 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800946e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009470:	015a      	lsls	r2, r3, #5
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	4413      	add	r3, r2
 8009476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947a:	461a      	mov	r2, r3
 800947c:	2310      	movs	r3, #16
 800947e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009486:	2b00      	cmp	r3, #0
 8009488:	d008      	beq.n	800949c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009496:	461a      	mov	r2, r3
 8009498:	2340      	movs	r3, #64	; 0x40
 800949a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f003 0302 	and.w	r3, r3, #2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d023      	beq.n	80094ee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80094a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094a8:	6a38      	ldr	r0, [r7, #32]
 80094aa:	f006 fd4f 	bl	800ff4c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80094ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094b0:	4613      	mov	r3, r2
 80094b2:	00db      	lsls	r3, r3, #3
 80094b4:	4413      	add	r3, r2
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	3338      	adds	r3, #56	; 0x38
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	4413      	add	r3, r2
 80094be:	3304      	adds	r3, #4
 80094c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	78db      	ldrb	r3, [r3, #3]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d108      	bne.n	80094dc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	2200      	movs	r2, #0
 80094ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	4619      	mov	r1, r3
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f00a f97a 	bl	80137d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80094dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094de:	015a      	lsls	r2, r3, #5
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	4413      	add	r3, r2
 80094e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e8:	461a      	mov	r2, r3
 80094ea:	2302      	movs	r3, #2
 80094ec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d003      	beq.n	8009500 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80094f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 fcea 	bl	8009ed4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009502:	3301      	adds	r3, #1
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009508:	085b      	lsrs	r3, r3, #1
 800950a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800950c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800950e:	2b00      	cmp	r3, #0
 8009510:	f47f af2e 	bne.w	8009370 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4618      	mov	r0, r3
 800951a:	f007 fc39 	bl	8010d90 <USB_ReadInterrupts>
 800951e:	4603      	mov	r3, r0
 8009520:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009524:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009528:	d122      	bne.n	8009570 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800952a:	69fb      	ldr	r3, [r7, #28]
 800952c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	69fa      	ldr	r2, [r7, #28]
 8009534:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009538:	f023 0301 	bic.w	r3, r3, #1
 800953c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8009544:	2b01      	cmp	r3, #1
 8009546:	d108      	bne.n	800955a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009550:	2100      	movs	r1, #0
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 fef6 	bl	800a344 <HAL_PCDEx_LPM_Callback>
 8009558:	e002      	b.n	8009560 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f00a f918 	bl	8013790 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	695a      	ldr	r2, [r3, #20]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800956e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4618      	mov	r0, r3
 8009576:	f007 fc0b 	bl	8010d90 <USB_ReadInterrupts>
 800957a:	4603      	mov	r3, r0
 800957c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009580:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009584:	d112      	bne.n	80095ac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800958c:	689b      	ldr	r3, [r3, #8]
 800958e:	f003 0301 	and.w	r3, r3, #1
 8009592:	2b01      	cmp	r3, #1
 8009594:	d102      	bne.n	800959c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f00a f8d4 	bl	8013744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	695a      	ldr	r2, [r3, #20]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80095aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f007 fbed 	bl	8010d90 <USB_ReadInterrupts>
 80095b6:	4603      	mov	r3, r0
 80095b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095c0:	d121      	bne.n	8009606 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	695a      	ldr	r2, [r3, #20]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80095d0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d111      	bne.n	8009600 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ea:	089b      	lsrs	r3, r3, #2
 80095ec:	f003 020f 	and.w	r2, r3, #15
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80095f6:	2101      	movs	r1, #1
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fea3 	bl	800a344 <HAL_PCDEx_LPM_Callback>
 80095fe:	e002      	b.n	8009606 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f00a f89f 	bl	8013744 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f007 fbc0 	bl	8010d90 <USB_ReadInterrupts>
 8009610:	4603      	mov	r3, r0
 8009612:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800961a:	f040 80b7 	bne.w	800978c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	69fa      	ldr	r2, [r7, #28]
 8009628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800962c:	f023 0301 	bic.w	r3, r3, #1
 8009630:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2110      	movs	r1, #16
 8009638:	4618      	mov	r0, r3
 800963a:	f006 fc87 	bl	800ff4c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800963e:	2300      	movs	r3, #0
 8009640:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009642:	e046      	b.n	80096d2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	69fb      	ldr	r3, [r7, #28]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009650:	461a      	mov	r2, r3
 8009652:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009656:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800965a:	015a      	lsls	r2, r3, #5
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	4413      	add	r3, r2
 8009660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009668:	0151      	lsls	r1, r2, #5
 800966a:	69fa      	ldr	r2, [r7, #28]
 800966c:	440a      	add	r2, r1
 800966e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009672:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009676:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800967a:	015a      	lsls	r2, r3, #5
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	4413      	add	r3, r2
 8009680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009684:	461a      	mov	r2, r3
 8009686:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800968a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	015a      	lsls	r2, r3, #5
 8009690:	69fb      	ldr	r3, [r7, #28]
 8009692:	4413      	add	r3, r2
 8009694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800969c:	0151      	lsls	r1, r2, #5
 800969e:	69fa      	ldr	r2, [r7, #28]
 80096a0:	440a      	add	r2, r1
 80096a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80096aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80096ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ae:	015a      	lsls	r2, r3, #5
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	4413      	add	r3, r2
 80096b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096bc:	0151      	lsls	r1, r2, #5
 80096be:	69fa      	ldr	r2, [r7, #28]
 80096c0:	440a      	add	r2, r1
 80096c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80096ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80096cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ce:	3301      	adds	r3, #1
 80096d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096d8:	429a      	cmp	r2, r3
 80096da:	d3b3      	bcc.n	8009644 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e2:	69db      	ldr	r3, [r3, #28]
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80096ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d016      	beq.n	8009726 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009702:	69fa      	ldr	r2, [r7, #28]
 8009704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009708:	f043 030b 	orr.w	r3, r3, #11
 800970c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009718:	69fa      	ldr	r2, [r7, #28]
 800971a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800971e:	f043 030b 	orr.w	r3, r3, #11
 8009722:	6453      	str	r3, [r2, #68]	; 0x44
 8009724:	e015      	b.n	8009752 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800972c:	695a      	ldr	r2, [r3, #20]
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009734:	4619      	mov	r1, r3
 8009736:	f242 032b 	movw	r3, #8235	; 0x202b
 800973a:	4313      	orrs	r3, r2
 800973c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009744:	691b      	ldr	r3, [r3, #16]
 8009746:	69fa      	ldr	r2, [r7, #28]
 8009748:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800974c:	f043 030b 	orr.w	r3, r3, #11
 8009750:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	69fa      	ldr	r2, [r7, #28]
 800975c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009760:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009764:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009776:	461a      	mov	r2, r3
 8009778:	f007 fbd0 	bl	8010f1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695a      	ldr	r2, [r3, #20]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800978a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4618      	mov	r0, r3
 8009792:	f007 fafd 	bl	8010d90 <USB_ReadInterrupts>
 8009796:	4603      	mov	r3, r0
 8009798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800979c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097a0:	d124      	bne.n	80097ec <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f007 fb94 	bl	8010ed4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4618      	mov	r0, r3
 80097b2:	f006 fc48 	bl	8010046 <USB_GetDevSpeed>
 80097b6:	4603      	mov	r3, r0
 80097b8:	461a      	mov	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681c      	ldr	r4, [r3, #0]
 80097c2:	f001 fd1f 	bl	800b204 <HAL_RCC_GetHCLKFreq>
 80097c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	461a      	mov	r2, r3
 80097d0:	4620      	mov	r0, r4
 80097d2:	f006 f94d 	bl	800fa70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f009 ff8b 	bl	80136f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	695a      	ldr	r2, [r3, #20]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80097ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f007 facd 	bl	8010d90 <USB_ReadInterrupts>
 80097f6:	4603      	mov	r3, r0
 80097f8:	f003 0308 	and.w	r3, r3, #8
 80097fc:	2b08      	cmp	r3, #8
 80097fe:	d10a      	bne.n	8009816 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f009 ff68 	bl	80136d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	695a      	ldr	r2, [r3, #20]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f002 0208 	and.w	r2, r2, #8
 8009814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f007 fab8 	bl	8010d90 <USB_ReadInterrupts>
 8009820:	4603      	mov	r3, r0
 8009822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009826:	2b80      	cmp	r3, #128	; 0x80
 8009828:	d122      	bne.n	8009870 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009832:	6a3b      	ldr	r3, [r7, #32]
 8009834:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009836:	2301      	movs	r3, #1
 8009838:	627b      	str	r3, [r7, #36]	; 0x24
 800983a:	e014      	b.n	8009866 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800983c:	6879      	ldr	r1, [r7, #4]
 800983e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009840:	4613      	mov	r3, r2
 8009842:	00db      	lsls	r3, r3, #3
 8009844:	4413      	add	r3, r2
 8009846:	009b      	lsls	r3, r3, #2
 8009848:	440b      	add	r3, r1
 800984a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d105      	bne.n	8009860 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	b2db      	uxtb	r3, r3
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fb09 	bl	8009e72 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009862:	3301      	adds	r3, #1
 8009864:	627b      	str	r3, [r7, #36]	; 0x24
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986c:	429a      	cmp	r2, r3
 800986e:	d3e5      	bcc.n	800983c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4618      	mov	r0, r3
 8009876:	f007 fa8b 	bl	8010d90 <USB_ReadInterrupts>
 800987a:	4603      	mov	r3, r0
 800987c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009880:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009884:	d13b      	bne.n	80098fe <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009886:	2301      	movs	r3, #1
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
 800988a:	e02b      	b.n	80098e4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800988c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098a0:	4613      	mov	r3, r2
 80098a2:	00db      	lsls	r3, r3, #3
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	440b      	add	r3, r1
 80098aa:	3340      	adds	r3, #64	; 0x40
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d115      	bne.n	80098de <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80098b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	da12      	bge.n	80098de <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098bc:	4613      	mov	r3, r2
 80098be:	00db      	lsls	r3, r3, #3
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	440b      	add	r3, r1
 80098c6:	333f      	adds	r3, #63	; 0x3f
 80098c8:	2201      	movs	r2, #1
 80098ca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80098cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	4619      	mov	r1, r3
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 faca 	bl	8009e72 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	3301      	adds	r3, #1
 80098e2:	627b      	str	r3, [r7, #36]	; 0x24
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ea:	429a      	cmp	r2, r3
 80098ec:	d3ce      	bcc.n	800988c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	695a      	ldr	r2, [r3, #20]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80098fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4618      	mov	r0, r3
 8009904:	f007 fa44 	bl	8010d90 <USB_ReadInterrupts>
 8009908:	4603      	mov	r3, r0
 800990a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800990e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009912:	d155      	bne.n	80099c0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009914:	2301      	movs	r3, #1
 8009916:	627b      	str	r3, [r7, #36]	; 0x24
 8009918:	e045      	b.n	80099a6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800991a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800991c:	015a      	lsls	r2, r3, #5
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	4413      	add	r3, r2
 8009922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800992a:	6879      	ldr	r1, [r7, #4]
 800992c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800992e:	4613      	mov	r3, r2
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	4413      	add	r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	440b      	add	r3, r1
 8009938:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	2b01      	cmp	r3, #1
 8009940:	d12e      	bne.n	80099a0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009942:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009944:	2b00      	cmp	r3, #0
 8009946:	da2b      	bge.n	80099a0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009954:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009958:	429a      	cmp	r2, r3
 800995a:	d121      	bne.n	80099a0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800995c:	6879      	ldr	r1, [r7, #4]
 800995e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009960:	4613      	mov	r3, r2
 8009962:	00db      	lsls	r3, r3, #3
 8009964:	4413      	add	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	440b      	add	r3, r1
 800996a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800996e:	2201      	movs	r2, #1
 8009970:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009972:	6a3b      	ldr	r3, [r7, #32]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009986:	2b00      	cmp	r3, #0
 8009988:	d10a      	bne.n	80099a0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	69fa      	ldr	r2, [r7, #28]
 8009994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009998:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800999c:	6053      	str	r3, [r2, #4]
            break;
 800999e:	e007      	b.n	80099b0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	3301      	adds	r3, #1
 80099a4:	627b      	str	r3, [r7, #36]	; 0x24
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d3b4      	bcc.n	800991a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	695a      	ldr	r2, [r3, #20]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80099be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f007 f9e3 	bl	8010d90 <USB_ReadInterrupts>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80099d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099d4:	d10a      	bne.n	80099ec <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f009 ff0c 	bl	80137f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	695a      	ldr	r2, [r3, #20]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80099ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4618      	mov	r0, r3
 80099f2:	f007 f9cd 	bl	8010d90 <USB_ReadInterrupts>
 80099f6:	4603      	mov	r3, r0
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d115      	bne.n	8009a2c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	f003 0304 	and.w	r3, r3, #4
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d002      	beq.n	8009a18 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f009 fefc 	bl	8013810 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6859      	ldr	r1, [r3, #4]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	69ba      	ldr	r2, [r7, #24]
 8009a24:	430a      	orrs	r2, r1
 8009a26:	605a      	str	r2, [r3, #4]
 8009a28:	e000      	b.n	8009a2c <HAL_PCD_IRQHandler+0x992>
      return;
 8009a2a:	bf00      	nop
    }
  }
}
 8009a2c:	3734      	adds	r7, #52	; 0x34
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	bd90      	pop	{r4, r7, pc}

08009a32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009a32:	b580      	push	{r7, lr}
 8009a34:	b082      	sub	sp, #8
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d101      	bne.n	8009a4c <HAL_PCD_SetAddress+0x1a>
 8009a48:	2302      	movs	r3, #2
 8009a4a:	e013      	b.n	8009a74 <HAL_PCD_SetAddress+0x42>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2201      	movs	r2, #1
 8009a50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	78fa      	ldrb	r2, [r7, #3]
 8009a58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	78fa      	ldrb	r2, [r7, #3]
 8009a62:	4611      	mov	r1, r2
 8009a64:	4618      	mov	r0, r3
 8009a66:	f007 f92b 	bl	8010cc0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3708      	adds	r7, #8
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	4608      	mov	r0, r1
 8009a86:	4611      	mov	r1, r2
 8009a88:	461a      	mov	r2, r3
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	70fb      	strb	r3, [r7, #3]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	803b      	strh	r3, [r7, #0]
 8009a92:	4613      	mov	r3, r2
 8009a94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	da0f      	bge.n	8009ac2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009aa2:	78fb      	ldrb	r3, [r7, #3]
 8009aa4:	f003 020f 	and.w	r2, r3, #15
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	00db      	lsls	r3, r3, #3
 8009aac:	4413      	add	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	3338      	adds	r3, #56	; 0x38
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2201      	movs	r2, #1
 8009abe:	705a      	strb	r2, [r3, #1]
 8009ac0:	e00f      	b.n	8009ae2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	f003 020f 	and.w	r2, r3, #15
 8009ac8:	4613      	mov	r3, r2
 8009aca:	00db      	lsls	r3, r3, #3
 8009acc:	4413      	add	r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	3304      	adds	r3, #4
 8009ada:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009ae2:	78fb      	ldrb	r3, [r7, #3]
 8009ae4:	f003 030f 	and.w	r3, r3, #15
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009aee:	883a      	ldrh	r2, [r7, #0]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	78ba      	ldrb	r2, [r7, #2]
 8009af8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	785b      	ldrb	r3, [r3, #1]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d004      	beq.n	8009b0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	b29a      	uxth	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009b0c:	78bb      	ldrb	r3, [r7, #2]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d102      	bne.n	8009b18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d101      	bne.n	8009b26 <HAL_PCD_EP_Open+0xaa>
 8009b22:	2302      	movs	r3, #2
 8009b24:	e00e      	b.n	8009b44 <HAL_PCD_EP_Open+0xc8>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68f9      	ldr	r1, [r7, #12]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f006 faab 	bl	8010090 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009b42:	7afb      	ldrb	r3, [r7, #11]
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009b58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	da0f      	bge.n	8009b80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b60:	78fb      	ldrb	r3, [r7, #3]
 8009b62:	f003 020f 	and.w	r2, r3, #15
 8009b66:	4613      	mov	r3, r2
 8009b68:	00db      	lsls	r3, r3, #3
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	3338      	adds	r3, #56	; 0x38
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	4413      	add	r3, r2
 8009b74:	3304      	adds	r3, #4
 8009b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	705a      	strb	r2, [r3, #1]
 8009b7e:	e00f      	b.n	8009ba0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	f003 020f 	and.w	r2, r3, #15
 8009b86:	4613      	mov	r3, r2
 8009b88:	00db      	lsls	r3, r3, #3
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	4413      	add	r3, r2
 8009b96:	3304      	adds	r3, #4
 8009b98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ba0:	78fb      	ldrb	r3, [r7, #3]
 8009ba2:	f003 030f 	and.w	r3, r3, #15
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d101      	bne.n	8009bba <HAL_PCD_EP_Close+0x6e>
 8009bb6:	2302      	movs	r3, #2
 8009bb8:	e00e      	b.n	8009bd8 <HAL_PCD_EP_Close+0x8c>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2201      	movs	r2, #1
 8009bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68f9      	ldr	r1, [r7, #12]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f006 fae9 	bl	80101a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009bd6:	2300      	movs	r3, #0
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3710      	adds	r7, #16
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	607a      	str	r2, [r7, #4]
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	460b      	mov	r3, r1
 8009bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bf0:	7afb      	ldrb	r3, [r7, #11]
 8009bf2:	f003 020f 	and.w	r2, r3, #15
 8009bf6:	4613      	mov	r3, r2
 8009bf8:	00db      	lsls	r3, r3, #3
 8009bfa:	4413      	add	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	4413      	add	r3, r2
 8009c06:	3304      	adds	r3, #4
 8009c08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c22:	7afb      	ldrb	r3, [r7, #11]
 8009c24:	f003 030f 	and.w	r3, r3, #15
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d102      	bne.n	8009c3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009c36:	687a      	ldr	r2, [r7, #4]
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6818      	ldr	r0, [r3, #0]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	461a      	mov	r2, r3
 8009c48:	6979      	ldr	r1, [r7, #20]
 8009c4a:	f006 fb85 	bl	8010358 <USB_EPStartXfer>

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	460b      	mov	r3, r1
 8009c62:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009c64:	78fb      	ldrb	r3, [r7, #3]
 8009c66:	f003 020f 	and.w	r2, r3, #15
 8009c6a:	6879      	ldr	r1, [r7, #4]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	4413      	add	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	440b      	add	r3, r1
 8009c76:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009c7a:	681b      	ldr	r3, [r3, #0]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	370c      	adds	r7, #12
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	607a      	str	r2, [r7, #4]
 8009c92:	603b      	str	r3, [r7, #0]
 8009c94:	460b      	mov	r3, r1
 8009c96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c98:	7afb      	ldrb	r3, [r7, #11]
 8009c9a:	f003 020f 	and.w	r2, r3, #15
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	4413      	add	r3, r2
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	3338      	adds	r3, #56	; 0x38
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	3304      	adds	r3, #4
 8009cae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009cc8:	7afb      	ldrb	r3, [r7, #11]
 8009cca:	f003 030f 	and.w	r3, r3, #15
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d102      	bne.n	8009ce2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6818      	ldr	r0, [r3, #0]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	461a      	mov	r2, r3
 8009cee:	6979      	ldr	r1, [r7, #20]
 8009cf0:	f006 fb32 	bl	8010358 <USB_EPStartXfer>

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3718      	adds	r7, #24
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}

08009cfe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b084      	sub	sp, #16
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	6078      	str	r0, [r7, #4]
 8009d06:	460b      	mov	r3, r1
 8009d08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	f003 020f 	and.w	r2, r3, #15
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	685b      	ldr	r3, [r3, #4]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d901      	bls.n	8009d1c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e050      	b.n	8009dbe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	da0f      	bge.n	8009d44 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d24:	78fb      	ldrb	r3, [r7, #3]
 8009d26:	f003 020f 	and.w	r2, r3, #15
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	00db      	lsls	r3, r3, #3
 8009d2e:	4413      	add	r3, r2
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	3338      	adds	r3, #56	; 0x38
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	4413      	add	r3, r2
 8009d38:	3304      	adds	r3, #4
 8009d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	705a      	strb	r2, [r3, #1]
 8009d42:	e00d      	b.n	8009d60 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009d44:	78fa      	ldrb	r2, [r7, #3]
 8009d46:	4613      	mov	r3, r2
 8009d48:	00db      	lsls	r3, r3, #3
 8009d4a:	4413      	add	r3, r2
 8009d4c:	009b      	lsls	r3, r3, #2
 8009d4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	4413      	add	r3, r2
 8009d56:	3304      	adds	r3, #4
 8009d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2201      	movs	r2, #1
 8009d64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009d66:	78fb      	ldrb	r3, [r7, #3]
 8009d68:	f003 030f 	and.w	r3, r3, #15
 8009d6c:	b2da      	uxtb	r2, r3
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d101      	bne.n	8009d80 <HAL_PCD_EP_SetStall+0x82>
 8009d7c:	2302      	movs	r3, #2
 8009d7e:	e01e      	b.n	8009dbe <HAL_PCD_EP_SetStall+0xc0>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2201      	movs	r2, #1
 8009d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68f9      	ldr	r1, [r7, #12]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f006 fec2 	bl	8010b18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009d94:	78fb      	ldrb	r3, [r7, #3]
 8009d96:	f003 030f 	and.w	r3, r3, #15
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10a      	bne.n	8009db4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	b2d9      	uxtb	r1, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009dae:	461a      	mov	r2, r3
 8009db0:	f007 f8b4 	bl	8010f1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	6078      	str	r0, [r7, #4]
 8009dce:	460b      	mov	r3, r1
 8009dd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009dd2:	78fb      	ldrb	r3, [r7, #3]
 8009dd4:	f003 020f 	and.w	r2, r3, #15
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d901      	bls.n	8009de4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e042      	b.n	8009e6a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009de4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	da0f      	bge.n	8009e0c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009dec:	78fb      	ldrb	r3, [r7, #3]
 8009dee:	f003 020f 	and.w	r2, r3, #15
 8009df2:	4613      	mov	r3, r2
 8009df4:	00db      	lsls	r3, r3, #3
 8009df6:	4413      	add	r3, r2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	3338      	adds	r3, #56	; 0x38
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	4413      	add	r3, r2
 8009e00:	3304      	adds	r3, #4
 8009e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2201      	movs	r2, #1
 8009e08:	705a      	strb	r2, [r3, #1]
 8009e0a:	e00f      	b.n	8009e2c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e0c:	78fb      	ldrb	r3, [r7, #3]
 8009e0e:	f003 020f 	and.w	r2, r3, #15
 8009e12:	4613      	mov	r3, r2
 8009e14:	00db      	lsls	r3, r3, #3
 8009e16:	4413      	add	r3, r2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	4413      	add	r3, r2
 8009e22:	3304      	adds	r3, #4
 8009e24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e32:	78fb      	ldrb	r3, [r7, #3]
 8009e34:	f003 030f 	and.w	r3, r3, #15
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009e44:	2b01      	cmp	r3, #1
 8009e46:	d101      	bne.n	8009e4c <HAL_PCD_EP_ClrStall+0x86>
 8009e48:	2302      	movs	r3, #2
 8009e4a:	e00e      	b.n	8009e6a <HAL_PCD_EP_ClrStall+0xa4>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68f9      	ldr	r1, [r7, #12]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f006 feca 	bl	8010bf4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009e68:	2300      	movs	r3, #0
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3710      	adds	r7, #16
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b084      	sub	sp, #16
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	da0c      	bge.n	8009ea0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e86:	78fb      	ldrb	r3, [r7, #3]
 8009e88:	f003 020f 	and.w	r2, r3, #15
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	4413      	add	r3, r2
 8009e92:	009b      	lsls	r3, r3, #2
 8009e94:	3338      	adds	r3, #56	; 0x38
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	4413      	add	r3, r2
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	60fb      	str	r3, [r7, #12]
 8009e9e:	e00c      	b.n	8009eba <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ea0:	78fb      	ldrb	r3, [r7, #3]
 8009ea2:	f003 020f 	and.w	r2, r3, #15
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	00db      	lsls	r3, r3, #3
 8009eaa:	4413      	add	r3, r2
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68f9      	ldr	r1, [r7, #12]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f006 fce9 	bl	8010898 <USB_EPStopXfer>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009eca:	7afb      	ldrb	r3, [r7, #11]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b08a      	sub	sp, #40	; 0x28
 8009ed8:	af02      	add	r7, sp, #8
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	4613      	mov	r3, r2
 8009eec:	00db      	lsls	r3, r3, #3
 8009eee:	4413      	add	r3, r2
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	3338      	adds	r3, #56	; 0x38
 8009ef4:	687a      	ldr	r2, [r7, #4]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	3304      	adds	r3, #4
 8009efa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	695a      	ldr	r2, [r3, #20]
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d901      	bls.n	8009f0c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	e06c      	b.n	8009fe6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	691a      	ldr	r2, [r3, #16]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	695b      	ldr	r3, [r3, #20]
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	69fa      	ldr	r2, [r7, #28]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d902      	bls.n	8009f28 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	3303      	adds	r3, #3
 8009f2c:	089b      	lsrs	r3, r3, #2
 8009f2e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009f30:	e02b      	b.n	8009f8a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	691a      	ldr	r2, [r3, #16]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	689b      	ldr	r3, [r3, #8]
 8009f42:	69fa      	ldr	r2, [r7, #28]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d902      	bls.n	8009f4e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009f4e:	69fb      	ldr	r3, [r7, #28]
 8009f50:	3303      	adds	r3, #3
 8009f52:	089b      	lsrs	r3, r3, #2
 8009f54:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	68d9      	ldr	r1, [r3, #12]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	b2da      	uxtb	r2, r3
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	9300      	str	r3, [sp, #0]
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	6978      	ldr	r0, [r7, #20]
 8009f6e:	f006 fd3d 	bl	80109ec <USB_WritePacket>

    ep->xfer_buff  += len;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	68da      	ldr	r2, [r3, #12]
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	441a      	add	r2, r3
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	695a      	ldr	r2, [r3, #20]
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	441a      	add	r2, r3
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009f8a:	683b      	ldr	r3, [r7, #0]
 8009f8c:	015a      	lsls	r2, r3, #5
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	4413      	add	r3, r2
 8009f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d809      	bhi.n	8009fb4 <PCD_WriteEmptyTxFifo+0xe0>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	695a      	ldr	r2, [r3, #20]
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d203      	bcs.n	8009fb4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	691b      	ldr	r3, [r3, #16]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1be      	bne.n	8009f32 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	691a      	ldr	r2, [r3, #16]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	695b      	ldr	r3, [r3, #20]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d811      	bhi.n	8009fe4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	f003 030f 	and.w	r3, r3, #15
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fcc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	43db      	mvns	r3, r3
 8009fda:	6939      	ldr	r1, [r7, #16]
 8009fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3720      	adds	r7, #32
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	333c      	adds	r3, #60	; 0x3c
 800a008:	3304      	adds	r3, #4
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	4413      	add	r3, r2
 800a016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d17b      	bne.n	800a11e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	f003 0308 	and.w	r3, r3, #8
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d015      	beq.n	800a05c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	4a61      	ldr	r2, [pc, #388]	; (800a1b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a034:	4293      	cmp	r3, r2
 800a036:	f240 80b9 	bls.w	800a1ac <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 80b3 	beq.w	800a1ac <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a052:	461a      	mov	r2, r3
 800a054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a058:	6093      	str	r3, [r2, #8]
 800a05a:	e0a7      	b.n	800a1ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	f003 0320 	and.w	r3, r3, #32
 800a062:	2b00      	cmp	r3, #0
 800a064:	d009      	beq.n	800a07a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a072:	461a      	mov	r2, r3
 800a074:	2320      	movs	r3, #32
 800a076:	6093      	str	r3, [r2, #8]
 800a078:	e098      	b.n	800a1ac <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a080:	2b00      	cmp	r3, #0
 800a082:	f040 8093 	bne.w	800a1ac <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	4a4b      	ldr	r2, [pc, #300]	; (800a1b8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d90f      	bls.n	800a0ae <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a094:	2b00      	cmp	r3, #0
 800a096:	d00a      	beq.n	800a0ae <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	015a      	lsls	r2, r3, #5
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	4413      	add	r3, r2
 800a0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0aa:	6093      	str	r3, [r2, #8]
 800a0ac:	e07e      	b.n	800a1ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	00db      	lsls	r3, r3, #3
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	4413      	add	r3, r2
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6a1a      	ldr	r2, [r3, #32]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	0159      	lsls	r1, r3, #5
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	440b      	add	r3, r1
 800a0d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0da:	1ad2      	subs	r2, r2, r3
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d114      	bne.n	800a110 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d109      	bne.n	800a102 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6818      	ldr	r0, [r3, #0]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	2101      	movs	r1, #1
 800a0fc:	f006 ff0e 	bl	8010f1c <USB_EP0_OutStart>
 800a100:	e006      	b.n	800a110 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	68da      	ldr	r2, [r3, #12]
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	695b      	ldr	r3, [r3, #20]
 800a10a:	441a      	add	r2, r3
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	b2db      	uxtb	r3, r3
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f009 faa8 	bl	801366c <HAL_PCD_DataOutStageCallback>
 800a11c:	e046      	b.n	800a1ac <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	4a26      	ldr	r2, [pc, #152]	; (800a1bc <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d124      	bne.n	800a170 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d00a      	beq.n	800a146 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	015a      	lsls	r2, r3, #5
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	4413      	add	r3, r2
 800a138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a13c:	461a      	mov	r2, r3
 800a13e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a142:	6093      	str	r3, [r2, #8]
 800a144:	e032      	b.n	800a1ac <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	f003 0320 	and.w	r3, r3, #32
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d008      	beq.n	800a162 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	4413      	add	r3, r2
 800a158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15c:	461a      	mov	r2, r3
 800a15e:	2320      	movs	r3, #32
 800a160:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	b2db      	uxtb	r3, r3
 800a166:	4619      	mov	r1, r3
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f009 fa7f 	bl	801366c <HAL_PCD_DataOutStageCallback>
 800a16e:	e01d      	b.n	800a1ac <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d114      	bne.n	800a1a0 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a176:	6879      	ldr	r1, [r7, #4]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	4613      	mov	r3, r2
 800a17c:	00db      	lsls	r3, r3, #3
 800a17e:	4413      	add	r3, r2
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	440b      	add	r3, r1
 800a184:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d108      	bne.n	800a1a0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a198:	461a      	mov	r2, r3
 800a19a:	2100      	movs	r1, #0
 800a19c:	f006 febe 	bl	8010f1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	4619      	mov	r1, r3
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f009 fa60 	bl	801366c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3720      	adds	r7, #32
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	4f54300a 	.word	0x4f54300a
 800a1bc:	4f54310a 	.word	0x4f54310a

0800a1c0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	333c      	adds	r3, #60	; 0x3c
 800a1d8:	3304      	adds	r3, #4
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ea:	689b      	ldr	r3, [r3, #8]
 800a1ec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4a15      	ldr	r2, [pc, #84]	; (800a248 <PCD_EP_OutSetupPacket_int+0x88>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d90e      	bls.n	800a214 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d009      	beq.n	800a214 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	015a      	lsls	r2, r3, #5
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	4413      	add	r3, r2
 800a208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a20c:	461a      	mov	r2, r3
 800a20e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a212:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f009 fa17 	bl	8013648 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	4a0a      	ldr	r2, [pc, #40]	; (800a248 <PCD_EP_OutSetupPacket_int+0x88>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d90c      	bls.n	800a23c <PCD_EP_OutSetupPacket_int+0x7c>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d108      	bne.n	800a23c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6818      	ldr	r0, [r3, #0]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a234:	461a      	mov	r2, r3
 800a236:	2101      	movs	r1, #1
 800a238:	f006 fe70 	bl	8010f1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	4f54300a 	.word	0x4f54300a

0800a24c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	460b      	mov	r3, r1
 800a256:	70fb      	strb	r3, [r7, #3]
 800a258:	4613      	mov	r3, r2
 800a25a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a262:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a264:	78fb      	ldrb	r3, [r7, #3]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d107      	bne.n	800a27a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a26a:	883b      	ldrh	r3, [r7, #0]
 800a26c:	0419      	lsls	r1, r3, #16
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	430a      	orrs	r2, r1
 800a276:	629a      	str	r2, [r3, #40]	; 0x28
 800a278:	e028      	b.n	800a2cc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a280:	0c1b      	lsrs	r3, r3, #16
 800a282:	68ba      	ldr	r2, [r7, #8]
 800a284:	4413      	add	r3, r2
 800a286:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a288:	2300      	movs	r3, #0
 800a28a:	73fb      	strb	r3, [r7, #15]
 800a28c:	e00d      	b.n	800a2aa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681a      	ldr	r2, [r3, #0]
 800a292:	7bfb      	ldrb	r3, [r7, #15]
 800a294:	3340      	adds	r3, #64	; 0x40
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	4413      	add	r3, r2
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	0c1b      	lsrs	r3, r3, #16
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	4413      	add	r3, r2
 800a2a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a2a4:	7bfb      	ldrb	r3, [r7, #15]
 800a2a6:	3301      	adds	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
 800a2aa:	7bfa      	ldrb	r2, [r7, #15]
 800a2ac:	78fb      	ldrb	r3, [r7, #3]
 800a2ae:	3b01      	subs	r3, #1
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d3ec      	bcc.n	800a28e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a2b4:	883b      	ldrh	r3, [r7, #0]
 800a2b6:	0418      	lsls	r0, r3, #16
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6819      	ldr	r1, [r3, #0]
 800a2bc:	78fb      	ldrb	r3, [r7, #3]
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	68ba      	ldr	r2, [r7, #8]
 800a2c2:	4302      	orrs	r2, r0
 800a2c4:	3340      	adds	r3, #64	; 0x40
 800a2c6:	009b      	lsls	r3, r3, #2
 800a2c8:	440b      	add	r3, r1
 800a2ca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a2da:	b480      	push	{r7}
 800a2dc:	b083      	sub	sp, #12
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
 800a2e2:	460b      	mov	r3, r1
 800a2e4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	887a      	ldrh	r2, [r7, #2]
 800a2ec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	699b      	ldr	r3, [r3, #24]
 800a31e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <HAL_PCDEx_ActivateLPM+0x44>)
 800a32c:	4313      	orrs	r3, r2
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	10000003 	.word	0x10000003

0800a344 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	460b      	mov	r3, r1
 800a34e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a350:	bf00      	nop
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35a:	4770      	bx	lr

0800a35c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a364:	4b19      	ldr	r3, [pc, #100]	; (800a3cc <HAL_PWREx_ConfigSupply+0x70>)
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f003 0304 	and.w	r3, r3, #4
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	d00a      	beq.n	800a386 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a370:	4b16      	ldr	r3, [pc, #88]	; (800a3cc <HAL_PWREx_ConfigSupply+0x70>)
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	f003 0307 	and.w	r3, r3, #7
 800a378:	687a      	ldr	r2, [r7, #4]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d001      	beq.n	800a382 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e01f      	b.n	800a3c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a382:	2300      	movs	r3, #0
 800a384:	e01d      	b.n	800a3c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a386:	4b11      	ldr	r3, [pc, #68]	; (800a3cc <HAL_PWREx_ConfigSupply+0x70>)
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f023 0207 	bic.w	r2, r3, #7
 800a38e:	490f      	ldr	r1, [pc, #60]	; (800a3cc <HAL_PWREx_ConfigSupply+0x70>)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	4313      	orrs	r3, r2
 800a394:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a396:	f7f8 ff77 	bl	8003288 <HAL_GetTick>
 800a39a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a39c:	e009      	b.n	800a3b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a39e:	f7f8 ff73 	bl	8003288 <HAL_GetTick>
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3ac:	d901      	bls.n	800a3b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e007      	b.n	800a3c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a3b2:	4b06      	ldr	r3, [pc, #24]	; (800a3cc <HAL_PWREx_ConfigSupply+0x70>)
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3be:	d1ee      	bne.n	800a39e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a3c0:	2300      	movs	r3, #0
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	58024800 	.word	0x58024800

0800a3d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a3d4:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	4a04      	ldr	r2, [pc, #16]	; (800a3ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a3da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3de:	60d3      	str	r3, [r2, #12]
}
 800a3e0:	bf00      	nop
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	58024800 	.word	0x58024800

0800a3f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08c      	sub	sp, #48	; 0x30
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e3c8      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0301 	and.w	r3, r3, #1
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 8087 	beq.w	800a51e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a410:	4b88      	ldr	r3, [pc, #544]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a412:	691b      	ldr	r3, [r3, #16]
 800a414:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a418:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a41a:	4b86      	ldr	r3, [pc, #536]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a41e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a422:	2b10      	cmp	r3, #16
 800a424:	d007      	beq.n	800a436 <HAL_RCC_OscConfig+0x46>
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	2b18      	cmp	r3, #24
 800a42a:	d110      	bne.n	800a44e <HAL_RCC_OscConfig+0x5e>
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	f003 0303 	and.w	r3, r3, #3
 800a432:	2b02      	cmp	r3, #2
 800a434:	d10b      	bne.n	800a44e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a436:	4b7f      	ldr	r3, [pc, #508]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d06c      	beq.n	800a51c <HAL_RCC_OscConfig+0x12c>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d168      	bne.n	800a51c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e3a2      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a456:	d106      	bne.n	800a466 <HAL_RCC_OscConfig+0x76>
 800a458:	4b76      	ldr	r3, [pc, #472]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a75      	ldr	r2, [pc, #468]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a45e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a462:	6013      	str	r3, [r2, #0]
 800a464:	e02e      	b.n	800a4c4 <HAL_RCC_OscConfig+0xd4>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10c      	bne.n	800a488 <HAL_RCC_OscConfig+0x98>
 800a46e:	4b71      	ldr	r3, [pc, #452]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a70      	ldr	r2, [pc, #448]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a478:	6013      	str	r3, [r2, #0]
 800a47a:	4b6e      	ldr	r3, [pc, #440]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a6d      	ldr	r2, [pc, #436]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a484:	6013      	str	r3, [r2, #0]
 800a486:	e01d      	b.n	800a4c4 <HAL_RCC_OscConfig+0xd4>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a490:	d10c      	bne.n	800a4ac <HAL_RCC_OscConfig+0xbc>
 800a492:	4b68      	ldr	r3, [pc, #416]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a67      	ldr	r2, [pc, #412]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a49c:	6013      	str	r3, [r2, #0]
 800a49e:	4b65      	ldr	r3, [pc, #404]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a64      	ldr	r2, [pc, #400]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a4a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	e00b      	b.n	800a4c4 <HAL_RCC_OscConfig+0xd4>
 800a4ac:	4b61      	ldr	r3, [pc, #388]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a60      	ldr	r2, [pc, #384]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a4b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4b6:	6013      	str	r3, [r2, #0]
 800a4b8:	4b5e      	ldr	r3, [pc, #376]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a5d      	ldr	r2, [pc, #372]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a4be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d013      	beq.n	800a4f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4cc:	f7f8 fedc 	bl	8003288 <HAL_GetTick>
 800a4d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4d2:	e008      	b.n	800a4e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4d4:	f7f8 fed8 	bl	8003288 <HAL_GetTick>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	1ad3      	subs	r3, r2, r3
 800a4de:	2b64      	cmp	r3, #100	; 0x64
 800a4e0:	d901      	bls.n	800a4e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a4e2:	2303      	movs	r3, #3
 800a4e4:	e356      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a4e6:	4b53      	ldr	r3, [pc, #332]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d0f0      	beq.n	800a4d4 <HAL_RCC_OscConfig+0xe4>
 800a4f2:	e014      	b.n	800a51e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4f4:	f7f8 fec8 	bl	8003288 <HAL_GetTick>
 800a4f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a4fa:	e008      	b.n	800a50e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4fc:	f7f8 fec4 	bl	8003288 <HAL_GetTick>
 800a500:	4602      	mov	r2, r0
 800a502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	2b64      	cmp	r3, #100	; 0x64
 800a508:	d901      	bls.n	800a50e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e342      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a50e:	4b49      	ldr	r3, [pc, #292]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1f0      	bne.n	800a4fc <HAL_RCC_OscConfig+0x10c>
 800a51a:	e000      	b.n	800a51e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a51c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f003 0302 	and.w	r3, r3, #2
 800a526:	2b00      	cmp	r3, #0
 800a528:	f000 808c 	beq.w	800a644 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a52c:	4b41      	ldr	r3, [pc, #260]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a534:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a536:	4b3f      	ldr	r3, [pc, #252]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d007      	beq.n	800a552 <HAL_RCC_OscConfig+0x162>
 800a542:	6a3b      	ldr	r3, [r7, #32]
 800a544:	2b18      	cmp	r3, #24
 800a546:	d137      	bne.n	800a5b8 <HAL_RCC_OscConfig+0x1c8>
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	f003 0303 	and.w	r3, r3, #3
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d132      	bne.n	800a5b8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a552:	4b38      	ldr	r3, [pc, #224]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 0304 	and.w	r3, r3, #4
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d005      	beq.n	800a56a <HAL_RCC_OscConfig+0x17a>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e314      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a56a:	4b32      	ldr	r3, [pc, #200]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f023 0219 	bic.w	r2, r3, #25
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68db      	ldr	r3, [r3, #12]
 800a576:	492f      	ldr	r1, [pc, #188]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a578:	4313      	orrs	r3, r2
 800a57a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a57c:	f7f8 fe84 	bl	8003288 <HAL_GetTick>
 800a580:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a582:	e008      	b.n	800a596 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a584:	f7f8 fe80 	bl	8003288 <HAL_GetTick>
 800a588:	4602      	mov	r2, r0
 800a58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a58c:	1ad3      	subs	r3, r2, r3
 800a58e:	2b02      	cmp	r3, #2
 800a590:	d901      	bls.n	800a596 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a592:	2303      	movs	r3, #3
 800a594:	e2fe      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a596:	4b27      	ldr	r3, [pc, #156]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 0304 	and.w	r3, r3, #4
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d0f0      	beq.n	800a584 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5a2:	4b24      	ldr	r3, [pc, #144]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691b      	ldr	r3, [r3, #16]
 800a5ae:	061b      	lsls	r3, r3, #24
 800a5b0:	4920      	ldr	r1, [pc, #128]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a5b6:	e045      	b.n	800a644 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68db      	ldr	r3, [r3, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d026      	beq.n	800a60e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a5c0:	4b1c      	ldr	r3, [pc, #112]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f023 0219 	bic.w	r2, r3, #25
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	4919      	ldr	r1, [pc, #100]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5d2:	f7f8 fe59 	bl	8003288 <HAL_GetTick>
 800a5d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5d8:	e008      	b.n	800a5ec <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5da:	f7f8 fe55 	bl	8003288 <HAL_GetTick>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	1ad3      	subs	r3, r2, r3
 800a5e4:	2b02      	cmp	r3, #2
 800a5e6:	d901      	bls.n	800a5ec <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e2d3      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a5ec:	4b11      	ldr	r3, [pc, #68]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0304 	and.w	r3, r3, #4
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0f0      	beq.n	800a5da <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5f8:	4b0e      	ldr	r3, [pc, #56]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	061b      	lsls	r3, r3, #24
 800a606:	490b      	ldr	r1, [pc, #44]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a608:	4313      	orrs	r3, r2
 800a60a:	604b      	str	r3, [r1, #4]
 800a60c:	e01a      	b.n	800a644 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a60e:	4b09      	ldr	r3, [pc, #36]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a08      	ldr	r2, [pc, #32]	; (800a634 <HAL_RCC_OscConfig+0x244>)
 800a614:	f023 0301 	bic.w	r3, r3, #1
 800a618:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a61a:	f7f8 fe35 	bl	8003288 <HAL_GetTick>
 800a61e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a620:	e00a      	b.n	800a638 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a622:	f7f8 fe31 	bl	8003288 <HAL_GetTick>
 800a626:	4602      	mov	r2, r0
 800a628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62a:	1ad3      	subs	r3, r2, r3
 800a62c:	2b02      	cmp	r3, #2
 800a62e:	d903      	bls.n	800a638 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a630:	2303      	movs	r3, #3
 800a632:	e2af      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
 800a634:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a638:	4b96      	ldr	r3, [pc, #600]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0304 	and.w	r3, r3, #4
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1ee      	bne.n	800a622 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 0310 	and.w	r3, r3, #16
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d06a      	beq.n	800a726 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a650:	4b90      	ldr	r3, [pc, #576]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a658:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a65a:	4b8e      	ldr	r3, [pc, #568]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	2b08      	cmp	r3, #8
 800a664:	d007      	beq.n	800a676 <HAL_RCC_OscConfig+0x286>
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	2b18      	cmp	r3, #24
 800a66a:	d11b      	bne.n	800a6a4 <HAL_RCC_OscConfig+0x2b4>
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	f003 0303 	and.w	r3, r3, #3
 800a672:	2b01      	cmp	r3, #1
 800a674:	d116      	bne.n	800a6a4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a676:	4b87      	ldr	r3, [pc, #540]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d005      	beq.n	800a68e <HAL_RCC_OscConfig+0x29e>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	69db      	ldr	r3, [r3, #28]
 800a686:	2b80      	cmp	r3, #128	; 0x80
 800a688:	d001      	beq.n	800a68e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e282      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a68e:	4b81      	ldr	r3, [pc, #516]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	061b      	lsls	r3, r3, #24
 800a69c:	497d      	ldr	r1, [pc, #500]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a6a2:	e040      	b.n	800a726 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	69db      	ldr	r3, [r3, #28]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d023      	beq.n	800a6f4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a6ac:	4b79      	ldr	r3, [pc, #484]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4a78      	ldr	r2, [pc, #480]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a6b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b8:	f7f8 fde6 	bl	8003288 <HAL_GetTick>
 800a6bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6be:	e008      	b.n	800a6d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a6c0:	f7f8 fde2 	bl	8003288 <HAL_GetTick>
 800a6c4:	4602      	mov	r2, r0
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c8:	1ad3      	subs	r3, r2, r3
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	d901      	bls.n	800a6d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a6ce:	2303      	movs	r3, #3
 800a6d0:	e260      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a6d2:	4b70      	ldr	r3, [pc, #448]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d0f0      	beq.n	800a6c0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a6de:	4b6d      	ldr	r3, [pc, #436]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a6e0:	68db      	ldr	r3, [r3, #12]
 800a6e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6a1b      	ldr	r3, [r3, #32]
 800a6ea:	061b      	lsls	r3, r3, #24
 800a6ec:	4969      	ldr	r1, [pc, #420]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60cb      	str	r3, [r1, #12]
 800a6f2:	e018      	b.n	800a726 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a6f4:	4b67      	ldr	r3, [pc, #412]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a66      	ldr	r2, [pc, #408]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a6fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a700:	f7f8 fdc2 	bl	8003288 <HAL_GetTick>
 800a704:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a706:	e008      	b.n	800a71a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a708:	f7f8 fdbe 	bl	8003288 <HAL_GetTick>
 800a70c:	4602      	mov	r2, r0
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	1ad3      	subs	r3, r2, r3
 800a712:	2b02      	cmp	r3, #2
 800a714:	d901      	bls.n	800a71a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a716:	2303      	movs	r3, #3
 800a718:	e23c      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a71a:	4b5e      	ldr	r3, [pc, #376]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1f0      	bne.n	800a708 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f003 0308 	and.w	r3, r3, #8
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d036      	beq.n	800a7a0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	695b      	ldr	r3, [r3, #20]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d019      	beq.n	800a76e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a73a:	4b56      	ldr	r3, [pc, #344]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a73e:	4a55      	ldr	r2, [pc, #340]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a740:	f043 0301 	orr.w	r3, r3, #1
 800a744:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a746:	f7f8 fd9f 	bl	8003288 <HAL_GetTick>
 800a74a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a74c:	e008      	b.n	800a760 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a74e:	f7f8 fd9b 	bl	8003288 <HAL_GetTick>
 800a752:	4602      	mov	r2, r0
 800a754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a756:	1ad3      	subs	r3, r2, r3
 800a758:	2b02      	cmp	r3, #2
 800a75a:	d901      	bls.n	800a760 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a75c:	2303      	movs	r3, #3
 800a75e:	e219      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a760:	4b4c      	ldr	r3, [pc, #304]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a762:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a764:	f003 0302 	and.w	r3, r3, #2
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d0f0      	beq.n	800a74e <HAL_RCC_OscConfig+0x35e>
 800a76c:	e018      	b.n	800a7a0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a76e:	4b49      	ldr	r3, [pc, #292]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a772:	4a48      	ldr	r2, [pc, #288]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a774:	f023 0301 	bic.w	r3, r3, #1
 800a778:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a77a:	f7f8 fd85 	bl	8003288 <HAL_GetTick>
 800a77e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a780:	e008      	b.n	800a794 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a782:	f7f8 fd81 	bl	8003288 <HAL_GetTick>
 800a786:	4602      	mov	r2, r0
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d901      	bls.n	800a794 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e1ff      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a794:	4b3f      	ldr	r3, [pc, #252]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a798:	f003 0302 	and.w	r3, r3, #2
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1f0      	bne.n	800a782 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f003 0320 	and.w	r3, r3, #32
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d036      	beq.n	800a81a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	699b      	ldr	r3, [r3, #24]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d019      	beq.n	800a7e8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a7b4:	4b37      	ldr	r3, [pc, #220]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a36      	ldr	r2, [pc, #216]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a7ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a7be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a7c0:	f7f8 fd62 	bl	8003288 <HAL_GetTick>
 800a7c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a7c6:	e008      	b.n	800a7da <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7c8:	f7f8 fd5e 	bl	8003288 <HAL_GetTick>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d0:	1ad3      	subs	r3, r2, r3
 800a7d2:	2b02      	cmp	r3, #2
 800a7d4:	d901      	bls.n	800a7da <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e1dc      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a7da:	4b2e      	ldr	r3, [pc, #184]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d0f0      	beq.n	800a7c8 <HAL_RCC_OscConfig+0x3d8>
 800a7e6:	e018      	b.n	800a81a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a7e8:	4b2a      	ldr	r3, [pc, #168]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a29      	ldr	r2, [pc, #164]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a7ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a7f2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a7f4:	f7f8 fd48 	bl	8003288 <HAL_GetTick>
 800a7f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a7fa:	e008      	b.n	800a80e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a7fc:	f7f8 fd44 	bl	8003288 <HAL_GetTick>
 800a800:	4602      	mov	r2, r0
 800a802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	2b02      	cmp	r3, #2
 800a808:	d901      	bls.n	800a80e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e1c2      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a80e:	4b21      	ldr	r3, [pc, #132]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1f0      	bne.n	800a7fc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0304 	and.w	r3, r3, #4
 800a822:	2b00      	cmp	r3, #0
 800a824:	f000 8086 	beq.w	800a934 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a828:	4b1b      	ldr	r3, [pc, #108]	; (800a898 <HAL_RCC_OscConfig+0x4a8>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4a1a      	ldr	r2, [pc, #104]	; (800a898 <HAL_RCC_OscConfig+0x4a8>)
 800a82e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a832:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a834:	f7f8 fd28 	bl	8003288 <HAL_GetTick>
 800a838:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a83a:	e008      	b.n	800a84e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a83c:	f7f8 fd24 	bl	8003288 <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	2b64      	cmp	r3, #100	; 0x64
 800a848:	d901      	bls.n	800a84e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e1a2      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a84e:	4b12      	ldr	r3, [pc, #72]	; (800a898 <HAL_RCC_OscConfig+0x4a8>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0f0      	beq.n	800a83c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	689b      	ldr	r3, [r3, #8]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d106      	bne.n	800a870 <HAL_RCC_OscConfig+0x480>
 800a862:	4b0c      	ldr	r3, [pc, #48]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a866:	4a0b      	ldr	r2, [pc, #44]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a868:	f043 0301 	orr.w	r3, r3, #1
 800a86c:	6713      	str	r3, [r2, #112]	; 0x70
 800a86e:	e032      	b.n	800a8d6 <HAL_RCC_OscConfig+0x4e6>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d111      	bne.n	800a89c <HAL_RCC_OscConfig+0x4ac>
 800a878:	4b06      	ldr	r3, [pc, #24]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a87a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87c:	4a05      	ldr	r2, [pc, #20]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a87e:	f023 0301 	bic.w	r3, r3, #1
 800a882:	6713      	str	r3, [r2, #112]	; 0x70
 800a884:	4b03      	ldr	r3, [pc, #12]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a888:	4a02      	ldr	r2, [pc, #8]	; (800a894 <HAL_RCC_OscConfig+0x4a4>)
 800a88a:	f023 0304 	bic.w	r3, r3, #4
 800a88e:	6713      	str	r3, [r2, #112]	; 0x70
 800a890:	e021      	b.n	800a8d6 <HAL_RCC_OscConfig+0x4e6>
 800a892:	bf00      	nop
 800a894:	58024400 	.word	0x58024400
 800a898:	58024800 	.word	0x58024800
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	2b05      	cmp	r3, #5
 800a8a2:	d10c      	bne.n	800a8be <HAL_RCC_OscConfig+0x4ce>
 800a8a4:	4b83      	ldr	r3, [pc, #524]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a8a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8a8:	4a82      	ldr	r2, [pc, #520]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a8aa:	f043 0304 	orr.w	r3, r3, #4
 800a8ae:	6713      	str	r3, [r2, #112]	; 0x70
 800a8b0:	4b80      	ldr	r3, [pc, #512]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8b4:	4a7f      	ldr	r2, [pc, #508]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a8b6:	f043 0301 	orr.w	r3, r3, #1
 800a8ba:	6713      	str	r3, [r2, #112]	; 0x70
 800a8bc:	e00b      	b.n	800a8d6 <HAL_RCC_OscConfig+0x4e6>
 800a8be:	4b7d      	ldr	r3, [pc, #500]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c2:	4a7c      	ldr	r2, [pc, #496]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a8c4:	f023 0301 	bic.w	r3, r3, #1
 800a8c8:	6713      	str	r3, [r2, #112]	; 0x70
 800a8ca:	4b7a      	ldr	r3, [pc, #488]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ce:	4a79      	ldr	r2, [pc, #484]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a8d0:	f023 0304 	bic.w	r3, r3, #4
 800a8d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	689b      	ldr	r3, [r3, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d015      	beq.n	800a90a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8de:	f7f8 fcd3 	bl	8003288 <HAL_GetTick>
 800a8e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8e4:	e00a      	b.n	800a8fc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8e6:	f7f8 fccf 	bl	8003288 <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	1ad3      	subs	r3, r2, r3
 800a8f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d901      	bls.n	800a8fc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	e14b      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a8fc:	4b6d      	ldr	r3, [pc, #436]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a8fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a900:	f003 0302 	and.w	r3, r3, #2
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0ee      	beq.n	800a8e6 <HAL_RCC_OscConfig+0x4f6>
 800a908:	e014      	b.n	800a934 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a90a:	f7f8 fcbd 	bl	8003288 <HAL_GetTick>
 800a90e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a910:	e00a      	b.n	800a928 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a912:	f7f8 fcb9 	bl	8003288 <HAL_GetTick>
 800a916:	4602      	mov	r2, r0
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	1ad3      	subs	r3, r2, r3
 800a91c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a920:	4293      	cmp	r3, r2
 800a922:	d901      	bls.n	800a928 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a924:	2303      	movs	r3, #3
 800a926:	e135      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a928:	4b62      	ldr	r3, [pc, #392]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a92a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a92c:	f003 0302 	and.w	r3, r3, #2
 800a930:	2b00      	cmp	r3, #0
 800a932:	d1ee      	bne.n	800a912 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a938:	2b00      	cmp	r3, #0
 800a93a:	f000 812a 	beq.w	800ab92 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a93e:	4b5d      	ldr	r3, [pc, #372]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a946:	2b18      	cmp	r3, #24
 800a948:	f000 80ba 	beq.w	800aac0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a950:	2b02      	cmp	r3, #2
 800a952:	f040 8095 	bne.w	800aa80 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a956:	4b57      	ldr	r3, [pc, #348]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a56      	ldr	r2, [pc, #344]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a95c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a962:	f7f8 fc91 	bl	8003288 <HAL_GetTick>
 800a966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a968:	e008      	b.n	800a97c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a96a:	f7f8 fc8d 	bl	8003288 <HAL_GetTick>
 800a96e:	4602      	mov	r2, r0
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	1ad3      	subs	r3, r2, r3
 800a974:	2b02      	cmp	r3, #2
 800a976:	d901      	bls.n	800a97c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a978:	2303      	movs	r3, #3
 800a97a:	e10b      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a97c:	4b4d      	ldr	r3, [pc, #308]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1f0      	bne.n	800a96a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a988:	4b4a      	ldr	r3, [pc, #296]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a98a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a98c:	4b4a      	ldr	r3, [pc, #296]	; (800aab8 <HAL_RCC_OscConfig+0x6c8>)
 800a98e:	4013      	ands	r3, r2
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a998:	0112      	lsls	r2, r2, #4
 800a99a:	430a      	orrs	r2, r1
 800a99c:	4945      	ldr	r1, [pc, #276]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	628b      	str	r3, [r1, #40]	; 0x28
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9a6:	3b01      	subs	r3, #1
 800a9a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b0:	3b01      	subs	r3, #1
 800a9b2:	025b      	lsls	r3, r3, #9
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	431a      	orrs	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9bc:	3b01      	subs	r3, #1
 800a9be:	041b      	lsls	r3, r3, #16
 800a9c0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a9c4:	431a      	orrs	r2, r3
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ca:	3b01      	subs	r3, #1
 800a9cc:	061b      	lsls	r3, r3, #24
 800a9ce:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a9d2:	4938      	ldr	r1, [pc, #224]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a9d8:	4b36      	ldr	r3, [pc, #216]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9dc:	4a35      	ldr	r2, [pc, #212]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a9de:	f023 0301 	bic.w	r3, r3, #1
 800a9e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a9e4:	4b33      	ldr	r3, [pc, #204]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a9e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9e8:	4b34      	ldr	r3, [pc, #208]	; (800aabc <HAL_RCC_OscConfig+0x6cc>)
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a9f0:	00d2      	lsls	r2, r2, #3
 800a9f2:	4930      	ldr	r1, [pc, #192]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a9f8:	4b2e      	ldr	r3, [pc, #184]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	f023 020c 	bic.w	r2, r3, #12
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa04:	492b      	ldr	r1, [pc, #172]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa06:	4313      	orrs	r3, r2
 800aa08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800aa0a:	4b2a      	ldr	r3, [pc, #168]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0e:	f023 0202 	bic.w	r2, r3, #2
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa16:	4927      	ldr	r1, [pc, #156]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800aa1c:	4b25      	ldr	r3, [pc, #148]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	4a24      	ldr	r2, [pc, #144]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa28:	4b22      	ldr	r3, [pc, #136]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa2c:	4a21      	ldr	r2, [pc, #132]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800aa34:	4b1f      	ldr	r3, [pc, #124]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa38:	4a1e      	ldr	r2, [pc, #120]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800aa40:	4b1c      	ldr	r3, [pc, #112]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa44:	4a1b      	ldr	r2, [pc, #108]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa46:	f043 0301 	orr.w	r3, r3, #1
 800aa4a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa4c:	4b19      	ldr	r3, [pc, #100]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a18      	ldr	r2, [pc, #96]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa58:	f7f8 fc16 	bl	8003288 <HAL_GetTick>
 800aa5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa5e:	e008      	b.n	800aa72 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa60:	f7f8 fc12 	bl	8003288 <HAL_GetTick>
 800aa64:	4602      	mov	r2, r0
 800aa66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa68:	1ad3      	subs	r3, r2, r3
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d901      	bls.n	800aa72 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	e090      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800aa72:	4b10      	ldr	r3, [pc, #64]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d0f0      	beq.n	800aa60 <HAL_RCC_OscConfig+0x670>
 800aa7e:	e088      	b.n	800ab92 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa80:	4b0c      	ldr	r3, [pc, #48]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a0b      	ldr	r2, [pc, #44]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aa86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa8c:	f7f8 fbfc 	bl	8003288 <HAL_GetTick>
 800aa90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aa92:	e008      	b.n	800aaa6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa94:	f7f8 fbf8 	bl	8003288 <HAL_GetTick>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	1ad3      	subs	r3, r2, r3
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d901      	bls.n	800aaa6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e076      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aaa6:	4b03      	ldr	r3, [pc, #12]	; (800aab4 <HAL_RCC_OscConfig+0x6c4>)
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d1f0      	bne.n	800aa94 <HAL_RCC_OscConfig+0x6a4>
 800aab2:	e06e      	b.n	800ab92 <HAL_RCC_OscConfig+0x7a2>
 800aab4:	58024400 	.word	0x58024400
 800aab8:	fffffc0c 	.word	0xfffffc0c
 800aabc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800aac0:	4b36      	ldr	r3, [pc, #216]	; (800ab9c <HAL_RCC_OscConfig+0x7ac>)
 800aac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800aac6:	4b35      	ldr	r3, [pc, #212]	; (800ab9c <HAL_RCC_OscConfig+0x7ac>)
 800aac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d031      	beq.n	800ab38 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	f003 0203 	and.w	r2, r3, #3
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800aade:	429a      	cmp	r2, r3
 800aae0:	d12a      	bne.n	800ab38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	091b      	lsrs	r3, r3, #4
 800aae6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d122      	bne.n	800ab38 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d11a      	bne.n	800ab38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	0a5b      	lsrs	r3, r3, #9
 800ab06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d111      	bne.n	800ab38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	0c1b      	lsrs	r3, r3, #16
 800ab18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d108      	bne.n	800ab38 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	0e1b      	lsrs	r3, r3, #24
 800ab2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d001      	beq.n	800ab3c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e02b      	b.n	800ab94 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ab3c:	4b17      	ldr	r3, [pc, #92]	; (800ab9c <HAL_RCC_OscConfig+0x7ac>)
 800ab3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab40:	08db      	lsrs	r3, r3, #3
 800ab42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ab46:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	429a      	cmp	r2, r3
 800ab50:	d01f      	beq.n	800ab92 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ab52:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <HAL_RCC_OscConfig+0x7ac>)
 800ab54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab56:	4a11      	ldr	r2, [pc, #68]	; (800ab9c <HAL_RCC_OscConfig+0x7ac>)
 800ab58:	f023 0301 	bic.w	r3, r3, #1
 800ab5c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ab5e:	f7f8 fb93 	bl	8003288 <HAL_GetTick>
 800ab62:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ab64:	bf00      	nop
 800ab66:	f7f8 fb8f 	bl	8003288 <HAL_GetTick>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d0f9      	beq.n	800ab66 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ab72:	4b0a      	ldr	r3, [pc, #40]	; (800ab9c <HAL_RCC_OscConfig+0x7ac>)
 800ab74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab76:	4b0a      	ldr	r3, [pc, #40]	; (800aba0 <HAL_RCC_OscConfig+0x7b0>)
 800ab78:	4013      	ands	r3, r2
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ab7e:	00d2      	lsls	r2, r2, #3
 800ab80:	4906      	ldr	r1, [pc, #24]	; (800ab9c <HAL_RCC_OscConfig+0x7ac>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ab86:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <HAL_RCC_OscConfig+0x7ac>)
 800ab88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8a:	4a04      	ldr	r2, [pc, #16]	; (800ab9c <HAL_RCC_OscConfig+0x7ac>)
 800ab8c:	f043 0301 	orr.w	r3, r3, #1
 800ab90:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ab92:	2300      	movs	r3, #0
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	3730      	adds	r7, #48	; 0x30
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	58024400 	.word	0x58024400
 800aba0:	ffff0007 	.word	0xffff0007

0800aba4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b086      	sub	sp, #24
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
 800abac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d101      	bne.n	800abb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e19c      	b.n	800aef2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800abb8:	4b8a      	ldr	r3, [pc, #552]	; (800ade4 <HAL_RCC_ClockConfig+0x240>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 030f 	and.w	r3, r3, #15
 800abc0:	683a      	ldr	r2, [r7, #0]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d910      	bls.n	800abe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800abc6:	4b87      	ldr	r3, [pc, #540]	; (800ade4 <HAL_RCC_ClockConfig+0x240>)
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f023 020f 	bic.w	r2, r3, #15
 800abce:	4985      	ldr	r1, [pc, #532]	; (800ade4 <HAL_RCC_ClockConfig+0x240>)
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800abd6:	4b83      	ldr	r3, [pc, #524]	; (800ade4 <HAL_RCC_ClockConfig+0x240>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 030f 	and.w	r3, r3, #15
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d001      	beq.n	800abe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800abe4:	2301      	movs	r3, #1
 800abe6:	e184      	b.n	800aef2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f003 0304 	and.w	r3, r3, #4
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d010      	beq.n	800ac16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	691a      	ldr	r2, [r3, #16]
 800abf8:	4b7b      	ldr	r3, [pc, #492]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800abfa:	699b      	ldr	r3, [r3, #24]
 800abfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d908      	bls.n	800ac16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ac04:	4b78      	ldr	r3, [pc, #480]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac06:	699b      	ldr	r3, [r3, #24]
 800ac08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	4975      	ldr	r1, [pc, #468]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac12:	4313      	orrs	r3, r2
 800ac14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f003 0308 	and.w	r3, r3, #8
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d010      	beq.n	800ac44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	695a      	ldr	r2, [r3, #20]
 800ac26:	4b70      	ldr	r3, [pc, #448]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac28:	69db      	ldr	r3, [r3, #28]
 800ac2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac2e:	429a      	cmp	r2, r3
 800ac30:	d908      	bls.n	800ac44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ac32:	4b6d      	ldr	r3, [pc, #436]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac34:	69db      	ldr	r3, [r3, #28]
 800ac36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	496a      	ldr	r1, [pc, #424]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac40:	4313      	orrs	r3, r2
 800ac42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0310 	and.w	r3, r3, #16
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d010      	beq.n	800ac72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	699a      	ldr	r2, [r3, #24]
 800ac54:	4b64      	ldr	r3, [pc, #400]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac56:	69db      	ldr	r3, [r3, #28]
 800ac58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	d908      	bls.n	800ac72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ac60:	4b61      	ldr	r3, [pc, #388]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac62:	69db      	ldr	r3, [r3, #28]
 800ac64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	699b      	ldr	r3, [r3, #24]
 800ac6c:	495e      	ldr	r1, [pc, #376]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f003 0320 	and.w	r3, r3, #32
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d010      	beq.n	800aca0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	69da      	ldr	r2, [r3, #28]
 800ac82:	4b59      	ldr	r3, [pc, #356]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac84:	6a1b      	ldr	r3, [r3, #32]
 800ac86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ac8a:	429a      	cmp	r2, r3
 800ac8c:	d908      	bls.n	800aca0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ac8e:	4b56      	ldr	r3, [pc, #344]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac90:	6a1b      	ldr	r3, [r3, #32]
 800ac92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	4953      	ldr	r1, [pc, #332]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f003 0302 	and.w	r3, r3, #2
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d010      	beq.n	800acce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	68da      	ldr	r2, [r3, #12]
 800acb0:	4b4d      	ldr	r3, [pc, #308]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	f003 030f 	and.w	r3, r3, #15
 800acb8:	429a      	cmp	r2, r3
 800acba:	d908      	bls.n	800acce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800acbc:	4b4a      	ldr	r3, [pc, #296]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800acbe:	699b      	ldr	r3, [r3, #24]
 800acc0:	f023 020f 	bic.w	r2, r3, #15
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	4947      	ldr	r1, [pc, #284]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800acca:	4313      	orrs	r3, r2
 800accc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f003 0301 	and.w	r3, r3, #1
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d055      	beq.n	800ad86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800acda:	4b43      	ldr	r3, [pc, #268]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800acdc:	699b      	ldr	r3, [r3, #24]
 800acde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	4940      	ldr	r1, [pc, #256]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ace8:	4313      	orrs	r3, r2
 800acea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	2b02      	cmp	r3, #2
 800acf2:	d107      	bne.n	800ad04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acf4:	4b3c      	ldr	r3, [pc, #240]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d121      	bne.n	800ad44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e0f6      	b.n	800aef2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	d107      	bne.n	800ad1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad0c:	4b36      	ldr	r3, [pc, #216]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d115      	bne.n	800ad44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	e0ea      	b.n	800aef2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d107      	bne.n	800ad34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ad24:	4b30      	ldr	r3, [pc, #192]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d109      	bne.n	800ad44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e0de      	b.n	800aef2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad34:	4b2c      	ldr	r3, [pc, #176]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0304 	and.w	r3, r3, #4
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d101      	bne.n	800ad44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	e0d6      	b.n	800aef2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ad44:	4b28      	ldr	r3, [pc, #160]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	f023 0207 	bic.w	r2, r3, #7
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	4925      	ldr	r1, [pc, #148]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ad52:	4313      	orrs	r3, r2
 800ad54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad56:	f7f8 fa97 	bl	8003288 <HAL_GetTick>
 800ad5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad5c:	e00a      	b.n	800ad74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ad5e:	f7f8 fa93 	bl	8003288 <HAL_GetTick>
 800ad62:	4602      	mov	r2, r0
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	1ad3      	subs	r3, r2, r3
 800ad68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d901      	bls.n	800ad74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800ad70:	2303      	movs	r3, #3
 800ad72:	e0be      	b.n	800aef2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ad74:	4b1c      	ldr	r3, [pc, #112]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d1eb      	bne.n	800ad5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d010      	beq.n	800adb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	68da      	ldr	r2, [r3, #12]
 800ad96:	4b14      	ldr	r3, [pc, #80]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	f003 030f 	and.w	r3, r3, #15
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d208      	bcs.n	800adb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ada2:	4b11      	ldr	r3, [pc, #68]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800ada4:	699b      	ldr	r3, [r3, #24]
 800ada6:	f023 020f 	bic.w	r2, r3, #15
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	490e      	ldr	r1, [pc, #56]	; (800ade8 <HAL_RCC_ClockConfig+0x244>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800adb4:	4b0b      	ldr	r3, [pc, #44]	; (800ade4 <HAL_RCC_ClockConfig+0x240>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 030f 	and.w	r3, r3, #15
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d214      	bcs.n	800adec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adc2:	4b08      	ldr	r3, [pc, #32]	; (800ade4 <HAL_RCC_ClockConfig+0x240>)
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f023 020f 	bic.w	r2, r3, #15
 800adca:	4906      	ldr	r1, [pc, #24]	; (800ade4 <HAL_RCC_ClockConfig+0x240>)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	4313      	orrs	r3, r2
 800add0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800add2:	4b04      	ldr	r3, [pc, #16]	; (800ade4 <HAL_RCC_ClockConfig+0x240>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f003 030f 	and.w	r3, r3, #15
 800adda:	683a      	ldr	r2, [r7, #0]
 800addc:	429a      	cmp	r2, r3
 800adde:	d005      	beq.n	800adec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800ade0:	2301      	movs	r3, #1
 800ade2:	e086      	b.n	800aef2 <HAL_RCC_ClockConfig+0x34e>
 800ade4:	52002000 	.word	0x52002000
 800ade8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d010      	beq.n	800ae1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	691a      	ldr	r2, [r3, #16]
 800adfc:	4b3f      	ldr	r3, [pc, #252]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d208      	bcs.n	800ae1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ae08:	4b3c      	ldr	r3, [pc, #240]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800ae0a:	699b      	ldr	r3, [r3, #24]
 800ae0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	691b      	ldr	r3, [r3, #16]
 800ae14:	4939      	ldr	r1, [pc, #228]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800ae16:	4313      	orrs	r3, r2
 800ae18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0308 	and.w	r3, r3, #8
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d010      	beq.n	800ae48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	695a      	ldr	r2, [r3, #20]
 800ae2a:	4b34      	ldr	r3, [pc, #208]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800ae2c:	69db      	ldr	r3, [r3, #28]
 800ae2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae32:	429a      	cmp	r2, r3
 800ae34:	d208      	bcs.n	800ae48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ae36:	4b31      	ldr	r3, [pc, #196]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800ae38:	69db      	ldr	r3, [r3, #28]
 800ae3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	695b      	ldr	r3, [r3, #20]
 800ae42:	492e      	ldr	r1, [pc, #184]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800ae44:	4313      	orrs	r3, r2
 800ae46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0310 	and.w	r3, r3, #16
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d010      	beq.n	800ae76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	699a      	ldr	r2, [r3, #24]
 800ae58:	4b28      	ldr	r3, [pc, #160]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800ae5a:	69db      	ldr	r3, [r3, #28]
 800ae5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d208      	bcs.n	800ae76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ae64:	4b25      	ldr	r3, [pc, #148]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800ae66:	69db      	ldr	r3, [r3, #28]
 800ae68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	699b      	ldr	r3, [r3, #24]
 800ae70:	4922      	ldr	r1, [pc, #136]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800ae72:	4313      	orrs	r3, r2
 800ae74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d010      	beq.n	800aea4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	69da      	ldr	r2, [r3, #28]
 800ae86:	4b1d      	ldr	r3, [pc, #116]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800ae88:	6a1b      	ldr	r3, [r3, #32]
 800ae8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d208      	bcs.n	800aea4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ae92:	4b1a      	ldr	r3, [pc, #104]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800ae94:	6a1b      	ldr	r3, [r3, #32]
 800ae96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	4917      	ldr	r1, [pc, #92]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aea4:	f000 f834 	bl	800af10 <HAL_RCC_GetSysClockFreq>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	4b14      	ldr	r3, [pc, #80]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800aeac:	699b      	ldr	r3, [r3, #24]
 800aeae:	0a1b      	lsrs	r3, r3, #8
 800aeb0:	f003 030f 	and.w	r3, r3, #15
 800aeb4:	4912      	ldr	r1, [pc, #72]	; (800af00 <HAL_RCC_ClockConfig+0x35c>)
 800aeb6:	5ccb      	ldrb	r3, [r1, r3]
 800aeb8:	f003 031f 	and.w	r3, r3, #31
 800aebc:	fa22 f303 	lsr.w	r3, r2, r3
 800aec0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aec2:	4b0e      	ldr	r3, [pc, #56]	; (800aefc <HAL_RCC_ClockConfig+0x358>)
 800aec4:	699b      	ldr	r3, [r3, #24]
 800aec6:	f003 030f 	and.w	r3, r3, #15
 800aeca:	4a0d      	ldr	r2, [pc, #52]	; (800af00 <HAL_RCC_ClockConfig+0x35c>)
 800aecc:	5cd3      	ldrb	r3, [r2, r3]
 800aece:	f003 031f 	and.w	r3, r3, #31
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	fa22 f303 	lsr.w	r3, r2, r3
 800aed8:	4a0a      	ldr	r2, [pc, #40]	; (800af04 <HAL_RCC_ClockConfig+0x360>)
 800aeda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aedc:	4a0a      	ldr	r2, [pc, #40]	; (800af08 <HAL_RCC_ClockConfig+0x364>)
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800aee2:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <HAL_RCC_ClockConfig+0x368>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f7f8 f984 	bl	80031f4 <HAL_InitTick>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	3718      	adds	r7, #24
 800aef6:	46bd      	mov	sp, r7
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	bf00      	nop
 800aefc:	58024400 	.word	0x58024400
 800af00:	08018350 	.word	0x08018350
 800af04:	24000004 	.word	0x24000004
 800af08:	24000000 	.word	0x24000000
 800af0c:	24000008 	.word	0x24000008

0800af10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800af10:	b480      	push	{r7}
 800af12:	b089      	sub	sp, #36	; 0x24
 800af14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800af16:	4bb3      	ldr	r3, [pc, #716]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af1e:	2b18      	cmp	r3, #24
 800af20:	f200 8155 	bhi.w	800b1ce <HAL_RCC_GetSysClockFreq+0x2be>
 800af24:	a201      	add	r2, pc, #4	; (adr r2, 800af2c <HAL_RCC_GetSysClockFreq+0x1c>)
 800af26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af2a:	bf00      	nop
 800af2c:	0800af91 	.word	0x0800af91
 800af30:	0800b1cf 	.word	0x0800b1cf
 800af34:	0800b1cf 	.word	0x0800b1cf
 800af38:	0800b1cf 	.word	0x0800b1cf
 800af3c:	0800b1cf 	.word	0x0800b1cf
 800af40:	0800b1cf 	.word	0x0800b1cf
 800af44:	0800b1cf 	.word	0x0800b1cf
 800af48:	0800b1cf 	.word	0x0800b1cf
 800af4c:	0800afb7 	.word	0x0800afb7
 800af50:	0800b1cf 	.word	0x0800b1cf
 800af54:	0800b1cf 	.word	0x0800b1cf
 800af58:	0800b1cf 	.word	0x0800b1cf
 800af5c:	0800b1cf 	.word	0x0800b1cf
 800af60:	0800b1cf 	.word	0x0800b1cf
 800af64:	0800b1cf 	.word	0x0800b1cf
 800af68:	0800b1cf 	.word	0x0800b1cf
 800af6c:	0800afbd 	.word	0x0800afbd
 800af70:	0800b1cf 	.word	0x0800b1cf
 800af74:	0800b1cf 	.word	0x0800b1cf
 800af78:	0800b1cf 	.word	0x0800b1cf
 800af7c:	0800b1cf 	.word	0x0800b1cf
 800af80:	0800b1cf 	.word	0x0800b1cf
 800af84:	0800b1cf 	.word	0x0800b1cf
 800af88:	0800b1cf 	.word	0x0800b1cf
 800af8c:	0800afc3 	.word	0x0800afc3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af90:	4b94      	ldr	r3, [pc, #592]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f003 0320 	and.w	r3, r3, #32
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d009      	beq.n	800afb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af9c:	4b91      	ldr	r3, [pc, #580]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	08db      	lsrs	r3, r3, #3
 800afa2:	f003 0303 	and.w	r3, r3, #3
 800afa6:	4a90      	ldr	r2, [pc, #576]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800afa8:	fa22 f303 	lsr.w	r3, r2, r3
 800afac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800afae:	e111      	b.n	800b1d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800afb0:	4b8d      	ldr	r3, [pc, #564]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800afb2:	61bb      	str	r3, [r7, #24]
      break;
 800afb4:	e10e      	b.n	800b1d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800afb6:	4b8d      	ldr	r3, [pc, #564]	; (800b1ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 800afb8:	61bb      	str	r3, [r7, #24]
      break;
 800afba:	e10b      	b.n	800b1d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800afbc:	4b8c      	ldr	r3, [pc, #560]	; (800b1f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800afbe:	61bb      	str	r3, [r7, #24]
      break;
 800afc0:	e108      	b.n	800b1d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afc2:	4b88      	ldr	r3, [pc, #544]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc6:	f003 0303 	and.w	r3, r3, #3
 800afca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800afcc:	4b85      	ldr	r3, [pc, #532]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd0:	091b      	lsrs	r3, r3, #4
 800afd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afd6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800afd8:	4b82      	ldr	r3, [pc, #520]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afdc:	f003 0301 	and.w	r3, r3, #1
 800afe0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800afe2:	4b80      	ldr	r3, [pc, #512]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800afe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe6:	08db      	lsrs	r3, r3, #3
 800afe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	fb02 f303 	mul.w	r3, r2, r3
 800aff2:	ee07 3a90 	vmov	s15, r3
 800aff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800affa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	f000 80e1 	beq.w	800b1c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	f000 8083 	beq.w	800b114 <HAL_RCC_GetSysClockFreq+0x204>
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	2b02      	cmp	r3, #2
 800b012:	f200 80a1 	bhi.w	800b158 <HAL_RCC_GetSysClockFreq+0x248>
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d003      	beq.n	800b024 <HAL_RCC_GetSysClockFreq+0x114>
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d056      	beq.n	800b0d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b022:	e099      	b.n	800b158 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b024:	4b6f      	ldr	r3, [pc, #444]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 0320 	and.w	r3, r3, #32
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d02d      	beq.n	800b08c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b030:	4b6c      	ldr	r3, [pc, #432]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	08db      	lsrs	r3, r3, #3
 800b036:	f003 0303 	and.w	r3, r3, #3
 800b03a:	4a6b      	ldr	r2, [pc, #428]	; (800b1e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b03c:	fa22 f303 	lsr.w	r3, r2, r3
 800b040:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	ee07 3a90 	vmov	s15, r3
 800b048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	ee07 3a90 	vmov	s15, r3
 800b052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05a:	4b62      	ldr	r3, [pc, #392]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b062:	ee07 3a90 	vmov	s15, r3
 800b066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b06e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b1f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b07e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b082:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b086:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b08a:	e087      	b.n	800b19c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b096:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b1f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b09a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b09e:	4b51      	ldr	r3, [pc, #324]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ae:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b1f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b0ce:	e065      	b.n	800b19c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	ee07 3a90 	vmov	s15, r3
 800b0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0da:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b1fc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b0de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0e2:	4b40      	ldr	r3, [pc, #256]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ea:	ee07 3a90 	vmov	s15, r3
 800b0ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b0f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b1f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b0fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b10a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b10e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b112:	e043      	b.n	800b19c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11e:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b200 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b126:	4b2f      	ldr	r3, [pc, #188]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b12e:	ee07 3a90 	vmov	s15, r3
 800b132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b136:	ed97 6a02 	vldr	s12, [r7, #8]
 800b13a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b1f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b13e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b14a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b14e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b152:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b156:	e021      	b.n	800b19c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b162:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b1fc <HAL_RCC_GetSysClockFreq+0x2ec>
 800b166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b16a:	4b1e      	ldr	r3, [pc, #120]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b16e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b172:	ee07 3a90 	vmov	s15, r3
 800b176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b17a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b17e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b1f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b18a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b18e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b192:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b196:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b19a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b19c:	4b11      	ldr	r3, [pc, #68]	; (800b1e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1a0:	0a5b      	lsrs	r3, r3, #9
 800b1a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	ee07 3a90 	vmov	s15, r3
 800b1b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b1b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c0:	ee17 3a90 	vmov	r3, s15
 800b1c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b1c6:	e005      	b.n	800b1d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	61bb      	str	r3, [r7, #24]
      break;
 800b1cc:	e002      	b.n	800b1d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b1ce:	4b07      	ldr	r3, [pc, #28]	; (800b1ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b1d0:	61bb      	str	r3, [r7, #24]
      break;
 800b1d2:	bf00      	nop
  }

  return sysclockfreq;
 800b1d4:	69bb      	ldr	r3, [r7, #24]
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3724      	adds	r7, #36	; 0x24
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr
 800b1e2:	bf00      	nop
 800b1e4:	58024400 	.word	0x58024400
 800b1e8:	03d09000 	.word	0x03d09000
 800b1ec:	003d0900 	.word	0x003d0900
 800b1f0:	017d7840 	.word	0x017d7840
 800b1f4:	46000000 	.word	0x46000000
 800b1f8:	4c742400 	.word	0x4c742400
 800b1fc:	4a742400 	.word	0x4a742400
 800b200:	4bbebc20 	.word	0x4bbebc20

0800b204 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b20a:	f7ff fe81 	bl	800af10 <HAL_RCC_GetSysClockFreq>
 800b20e:	4602      	mov	r2, r0
 800b210:	4b10      	ldr	r3, [pc, #64]	; (800b254 <HAL_RCC_GetHCLKFreq+0x50>)
 800b212:	699b      	ldr	r3, [r3, #24]
 800b214:	0a1b      	lsrs	r3, r3, #8
 800b216:	f003 030f 	and.w	r3, r3, #15
 800b21a:	490f      	ldr	r1, [pc, #60]	; (800b258 <HAL_RCC_GetHCLKFreq+0x54>)
 800b21c:	5ccb      	ldrb	r3, [r1, r3]
 800b21e:	f003 031f 	and.w	r3, r3, #31
 800b222:	fa22 f303 	lsr.w	r3, r2, r3
 800b226:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b228:	4b0a      	ldr	r3, [pc, #40]	; (800b254 <HAL_RCC_GetHCLKFreq+0x50>)
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	f003 030f 	and.w	r3, r3, #15
 800b230:	4a09      	ldr	r2, [pc, #36]	; (800b258 <HAL_RCC_GetHCLKFreq+0x54>)
 800b232:	5cd3      	ldrb	r3, [r2, r3]
 800b234:	f003 031f 	and.w	r3, r3, #31
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	fa22 f303 	lsr.w	r3, r2, r3
 800b23e:	4a07      	ldr	r2, [pc, #28]	; (800b25c <HAL_RCC_GetHCLKFreq+0x58>)
 800b240:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b242:	4a07      	ldr	r2, [pc, #28]	; (800b260 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b248:	4b04      	ldr	r3, [pc, #16]	; (800b25c <HAL_RCC_GetHCLKFreq+0x58>)
 800b24a:	681b      	ldr	r3, [r3, #0]
}
 800b24c:	4618      	mov	r0, r3
 800b24e:	3708      	adds	r7, #8
 800b250:	46bd      	mov	sp, r7
 800b252:	bd80      	pop	{r7, pc}
 800b254:	58024400 	.word	0x58024400
 800b258:	08018350 	.word	0x08018350
 800b25c:	24000004 	.word	0x24000004
 800b260:	24000000 	.word	0x24000000

0800b264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b268:	f7ff ffcc 	bl	800b204 <HAL_RCC_GetHCLKFreq>
 800b26c:	4602      	mov	r2, r0
 800b26e:	4b06      	ldr	r3, [pc, #24]	; (800b288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b270:	69db      	ldr	r3, [r3, #28]
 800b272:	091b      	lsrs	r3, r3, #4
 800b274:	f003 0307 	and.w	r3, r3, #7
 800b278:	4904      	ldr	r1, [pc, #16]	; (800b28c <HAL_RCC_GetPCLK1Freq+0x28>)
 800b27a:	5ccb      	ldrb	r3, [r1, r3]
 800b27c:	f003 031f 	and.w	r3, r3, #31
 800b280:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b284:	4618      	mov	r0, r3
 800b286:	bd80      	pop	{r7, pc}
 800b288:	58024400 	.word	0x58024400
 800b28c:	08018350 	.word	0x08018350

0800b290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b294:	f7ff ffb6 	bl	800b204 <HAL_RCC_GetHCLKFreq>
 800b298:	4602      	mov	r2, r0
 800b29a:	4b06      	ldr	r3, [pc, #24]	; (800b2b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b29c:	69db      	ldr	r3, [r3, #28]
 800b29e:	0a1b      	lsrs	r3, r3, #8
 800b2a0:	f003 0307 	and.w	r3, r3, #7
 800b2a4:	4904      	ldr	r1, [pc, #16]	; (800b2b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b2a6:	5ccb      	ldrb	r3, [r1, r3]
 800b2a8:	f003 031f 	and.w	r3, r3, #31
 800b2ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	08018350 	.word	0x08018350

0800b2bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b2bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2c0:	b0c6      	sub	sp, #280	; 0x118
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2dc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b2e0:	2500      	movs	r5, #0
 800b2e2:	ea54 0305 	orrs.w	r3, r4, r5
 800b2e6:	d049      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2f2:	d02f      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b2f4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b2f8:	d828      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b2fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2fe:	d01a      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b300:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b304:	d822      	bhi.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b30a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b30e:	d007      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b310:	e01c      	b.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b312:	4bab      	ldr	r3, [pc, #684]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b316:	4aaa      	ldr	r2, [pc, #680]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b31c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b31e:	e01a      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b324:	3308      	adds	r3, #8
 800b326:	2102      	movs	r1, #2
 800b328:	4618      	mov	r0, r3
 800b32a:	f002 fa49 	bl	800d7c0 <RCCEx_PLL2_Config>
 800b32e:	4603      	mov	r3, r0
 800b330:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b334:	e00f      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33a:	3328      	adds	r3, #40	; 0x28
 800b33c:	2102      	movs	r1, #2
 800b33e:	4618      	mov	r0, r3
 800b340:	f002 faf0 	bl	800d924 <RCCEx_PLL3_Config>
 800b344:	4603      	mov	r3, r0
 800b346:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b34a:	e004      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b352:	e000      	b.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b354:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b356:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10a      	bne.n	800b374 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b35e:	4b98      	ldr	r3, [pc, #608]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b362:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b366:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b36c:	4a94      	ldr	r2, [pc, #592]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b36e:	430b      	orrs	r3, r1
 800b370:	6513      	str	r3, [r2, #80]	; 0x50
 800b372:	e003      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b374:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b378:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b37c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b384:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b388:	f04f 0900 	mov.w	r9, #0
 800b38c:	ea58 0309 	orrs.w	r3, r8, r9
 800b390:	d047      	beq.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b398:	2b04      	cmp	r3, #4
 800b39a:	d82a      	bhi.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b39c:	a201      	add	r2, pc, #4	; (adr r2, 800b3a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a2:	bf00      	nop
 800b3a4:	0800b3b9 	.word	0x0800b3b9
 800b3a8:	0800b3c7 	.word	0x0800b3c7
 800b3ac:	0800b3dd 	.word	0x0800b3dd
 800b3b0:	0800b3fb 	.word	0x0800b3fb
 800b3b4:	0800b3fb 	.word	0x0800b3fb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3b8:	4b81      	ldr	r3, [pc, #516]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3bc:	4a80      	ldr	r2, [pc, #512]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b3be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3c4:	e01a      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ca:	3308      	adds	r3, #8
 800b3cc:	2100      	movs	r1, #0
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f002 f9f6 	bl	800d7c0 <RCCEx_PLL2_Config>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3da:	e00f      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e0:	3328      	adds	r3, #40	; 0x28
 800b3e2:	2100      	movs	r1, #0
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	f002 fa9d 	bl	800d924 <RCCEx_PLL3_Config>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b3f0:	e004      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3f8:	e000      	b.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b3fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10a      	bne.n	800b41a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b404:	4b6e      	ldr	r3, [pc, #440]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b408:	f023 0107 	bic.w	r1, r3, #7
 800b40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b412:	4a6b      	ldr	r2, [pc, #428]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b414:	430b      	orrs	r3, r1
 800b416:	6513      	str	r3, [r2, #80]	; 0x50
 800b418:	e003      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b41a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b41e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b422:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b42e:	f04f 0b00 	mov.w	fp, #0
 800b432:	ea5a 030b 	orrs.w	r3, sl, fp
 800b436:	d05b      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b43c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b440:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b444:	d03b      	beq.n	800b4be <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b446:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b44a:	d834      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b44c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b450:	d037      	beq.n	800b4c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b452:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b456:	d82e      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b458:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b45c:	d033      	beq.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b45e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b462:	d828      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b468:	d01a      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b46a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b46e:	d822      	bhi.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b474:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b478:	d007      	beq.n	800b48a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b47a:	e01c      	b.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b47c:	4b50      	ldr	r3, [pc, #320]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b480:	4a4f      	ldr	r2, [pc, #316]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b486:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b488:	e01e      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b48e:	3308      	adds	r3, #8
 800b490:	2100      	movs	r1, #0
 800b492:	4618      	mov	r0, r3
 800b494:	f002 f994 	bl	800d7c0 <RCCEx_PLL2_Config>
 800b498:	4603      	mov	r3, r0
 800b49a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b49e:	e013      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a4:	3328      	adds	r3, #40	; 0x28
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	f002 fa3b 	bl	800d924 <RCCEx_PLL3_Config>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b4b4:	e008      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4bc:	e004      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b4be:	bf00      	nop
 800b4c0:	e002      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b4c2:	bf00      	nop
 800b4c4:	e000      	b.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b4c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d10b      	bne.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b4d0:	4b3b      	ldr	r3, [pc, #236]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4d4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b4e0:	4a37      	ldr	r2, [pc, #220]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b4e2:	430b      	orrs	r3, r1
 800b4e4:	6593      	str	r3, [r2, #88]	; 0x58
 800b4e6:	e003      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b4fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b500:	2300      	movs	r3, #0
 800b502:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b506:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b50a:	460b      	mov	r3, r1
 800b50c:	4313      	orrs	r3, r2
 800b50e:	d05d      	beq.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b514:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b518:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b51c:	d03b      	beq.n	800b596 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b51e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b522:	d834      	bhi.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b528:	d037      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b52a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b52e:	d82e      	bhi.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b530:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b534:	d033      	beq.n	800b59e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b536:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b53a:	d828      	bhi.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b53c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b540:	d01a      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b546:	d822      	bhi.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d003      	beq.n	800b554 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b54c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b550:	d007      	beq.n	800b562 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b552:	e01c      	b.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b554:	4b1a      	ldr	r3, [pc, #104]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b558:	4a19      	ldr	r2, [pc, #100]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b55a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b55e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b560:	e01e      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b566:	3308      	adds	r3, #8
 800b568:	2100      	movs	r1, #0
 800b56a:	4618      	mov	r0, r3
 800b56c:	f002 f928 	bl	800d7c0 <RCCEx_PLL2_Config>
 800b570:	4603      	mov	r3, r0
 800b572:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b576:	e013      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b57c:	3328      	adds	r3, #40	; 0x28
 800b57e:	2100      	movs	r1, #0
 800b580:	4618      	mov	r0, r3
 800b582:	f002 f9cf 	bl	800d924 <RCCEx_PLL3_Config>
 800b586:	4603      	mov	r3, r0
 800b588:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b58c:	e008      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b594:	e004      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b596:	bf00      	nop
 800b598:	e002      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b59a:	bf00      	nop
 800b59c:	e000      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b59e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d10d      	bne.n	800b5c4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b5a8:	4b05      	ldr	r3, [pc, #20]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ac:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b5b8:	4a01      	ldr	r2, [pc, #4]	; (800b5c0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b5ba:	430b      	orrs	r3, r1
 800b5bc:	6593      	str	r3, [r2, #88]	; 0x58
 800b5be:	e005      	b.n	800b5cc <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b5c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b5d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b5e2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	d03a      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5f2:	2b30      	cmp	r3, #48	; 0x30
 800b5f4:	d01f      	beq.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b5f6:	2b30      	cmp	r3, #48	; 0x30
 800b5f8:	d819      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b5fa:	2b20      	cmp	r3, #32
 800b5fc:	d00c      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b5fe:	2b20      	cmp	r3, #32
 800b600:	d815      	bhi.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b602:	2b00      	cmp	r3, #0
 800b604:	d019      	beq.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b606:	2b10      	cmp	r3, #16
 800b608:	d111      	bne.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b60a:	4baa      	ldr	r3, [pc, #680]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60e:	4aa9      	ldr	r2, [pc, #676]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b610:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b614:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b616:	e011      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61c:	3308      	adds	r3, #8
 800b61e:	2102      	movs	r1, #2
 800b620:	4618      	mov	r0, r3
 800b622:	f002 f8cd 	bl	800d7c0 <RCCEx_PLL2_Config>
 800b626:	4603      	mov	r3, r0
 800b628:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b62c:	e006      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b634:	e002      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b636:	bf00      	nop
 800b638:	e000      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b63a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b63c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10a      	bne.n	800b65a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b644:	4b9b      	ldr	r3, [pc, #620]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b648:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b652:	4a98      	ldr	r2, [pc, #608]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b654:	430b      	orrs	r3, r1
 800b656:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b658:	e003      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b65a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b65e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b66e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b672:	2300      	movs	r3, #0
 800b674:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b678:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b67c:	460b      	mov	r3, r1
 800b67e:	4313      	orrs	r3, r2
 800b680:	d051      	beq.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b68c:	d035      	beq.n	800b6fa <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b68e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b692:	d82e      	bhi.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b694:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b698:	d031      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b69a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b69e:	d828      	bhi.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b6a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6a4:	d01a      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b6a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6aa:	d822      	bhi.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d003      	beq.n	800b6b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b6b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6b4:	d007      	beq.n	800b6c6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b6b6:	e01c      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6b8:	4b7e      	ldr	r3, [pc, #504]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6bc:	4a7d      	ldr	r2, [pc, #500]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b6be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6c4:	e01c      	b.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f002 f876 	bl	800d7c0 <RCCEx_PLL2_Config>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6da:	e011      	b.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e0:	3328      	adds	r3, #40	; 0x28
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f002 f91d 	bl	800d924 <RCCEx_PLL3_Config>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b6f0:	e006      	b.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6f8:	e002      	b.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b6fa:	bf00      	nop
 800b6fc:	e000      	b.n	800b700 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b6fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b700:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10a      	bne.n	800b71e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b708:	4b6a      	ldr	r3, [pc, #424]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b70a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b70c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b716:	4a67      	ldr	r2, [pc, #412]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b718:	430b      	orrs	r3, r1
 800b71a:	6513      	str	r3, [r2, #80]	; 0x50
 800b71c:	e003      	b.n	800b726 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b71e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b722:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b732:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b736:	2300      	movs	r3, #0
 800b738:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b73c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b740:	460b      	mov	r3, r1
 800b742:	4313      	orrs	r3, r2
 800b744:	d053      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b74c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b750:	d033      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b752:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b756:	d82c      	bhi.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b758:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b75c:	d02f      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b75e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b762:	d826      	bhi.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b764:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b768:	d02b      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b76a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b76e:	d820      	bhi.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b774:	d012      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b77a:	d81a      	bhi.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d022      	beq.n	800b7c6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b784:	d115      	bne.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78a:	3308      	adds	r3, #8
 800b78c:	2101      	movs	r1, #1
 800b78e:	4618      	mov	r0, r3
 800b790:	f002 f816 	bl	800d7c0 <RCCEx_PLL2_Config>
 800b794:	4603      	mov	r3, r0
 800b796:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b79a:	e015      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b79c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a0:	3328      	adds	r3, #40	; 0x28
 800b7a2:	2101      	movs	r1, #1
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f002 f8bd 	bl	800d924 <RCCEx_PLL3_Config>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b7b0:	e00a      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7b8:	e006      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b7ba:	bf00      	nop
 800b7bc:	e004      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b7be:	bf00      	nop
 800b7c0:	e002      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b7c2:	bf00      	nop
 800b7c4:	e000      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b7c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b7d0:	4b38      	ldr	r3, [pc, #224]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7de:	4a35      	ldr	r2, [pc, #212]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b7e0:	430b      	orrs	r3, r1
 800b7e2:	6513      	str	r3, [r2, #80]	; 0x50
 800b7e4:	e003      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b7fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b7fe:	2300      	movs	r3, #0
 800b800:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b804:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b808:	460b      	mov	r3, r1
 800b80a:	4313      	orrs	r3, r2
 800b80c:	d058      	beq.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b816:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b81a:	d033      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b81c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b820:	d82c      	bhi.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b826:	d02f      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b82c:	d826      	bhi.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b82e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b832:	d02b      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b834:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b838:	d820      	bhi.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b83a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83e:	d012      	beq.n	800b866 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b844:	d81a      	bhi.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b846:	2b00      	cmp	r3, #0
 800b848:	d022      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b84a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b84e:	d115      	bne.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b854:	3308      	adds	r3, #8
 800b856:	2101      	movs	r1, #1
 800b858:	4618      	mov	r0, r3
 800b85a:	f001 ffb1 	bl	800d7c0 <RCCEx_PLL2_Config>
 800b85e:	4603      	mov	r3, r0
 800b860:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b864:	e015      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86a:	3328      	adds	r3, #40	; 0x28
 800b86c:	2101      	movs	r1, #1
 800b86e:	4618      	mov	r0, r3
 800b870:	f002 f858 	bl	800d924 <RCCEx_PLL3_Config>
 800b874:	4603      	mov	r3, r0
 800b876:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b87a:	e00a      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b882:	e006      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b884:	bf00      	nop
 800b886:	e004      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b888:	bf00      	nop
 800b88a:	e002      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b88c:	bf00      	nop
 800b88e:	e000      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b890:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b892:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10e      	bne.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b89a:	4b06      	ldr	r3, [pc, #24]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b89e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b8aa:	4a02      	ldr	r2, [pc, #8]	; (800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b8ac:	430b      	orrs	r3, r1
 800b8ae:	6593      	str	r3, [r2, #88]	; 0x58
 800b8b0:	e006      	b.n	800b8c0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b8b2:	bf00      	nop
 800b8b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b8cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b8d6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	d037      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8ea:	d00e      	beq.n	800b90a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b8ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8f0:	d816      	bhi.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d018      	beq.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b8f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8fa:	d111      	bne.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8fc:	4bc4      	ldr	r3, [pc, #784]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b900:	4ac3      	ldr	r2, [pc, #780]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b908:	e00f      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90e:	3308      	adds	r3, #8
 800b910:	2101      	movs	r1, #1
 800b912:	4618      	mov	r0, r3
 800b914:	f001 ff54 	bl	800d7c0 <RCCEx_PLL2_Config>
 800b918:	4603      	mov	r3, r0
 800b91a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b91e:	e004      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b920:	2301      	movs	r3, #1
 800b922:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b926:	e000      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b928:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b92a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d10a      	bne.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b932:	4bb7      	ldr	r3, [pc, #732]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b936:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b940:	4ab3      	ldr	r2, [pc, #716]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b942:	430b      	orrs	r3, r1
 800b944:	6513      	str	r3, [r2, #80]	; 0x50
 800b946:	e003      	b.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b948:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b94c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b95c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b960:	2300      	movs	r3, #0
 800b962:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b966:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b96a:	460b      	mov	r3, r1
 800b96c:	4313      	orrs	r3, r2
 800b96e:	d039      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b976:	2b03      	cmp	r3, #3
 800b978:	d81c      	bhi.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b97a:	a201      	add	r2, pc, #4	; (adr r2, 800b980 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b980:	0800b9bd 	.word	0x0800b9bd
 800b984:	0800b991 	.word	0x0800b991
 800b988:	0800b99f 	.word	0x0800b99f
 800b98c:	0800b9bd 	.word	0x0800b9bd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b990:	4b9f      	ldr	r3, [pc, #636]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b994:	4a9e      	ldr	r2, [pc, #632]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b99a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b99c:	e00f      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b99e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a2:	3308      	adds	r3, #8
 800b9a4:	2102      	movs	r1, #2
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f001 ff0a 	bl	800d7c0 <RCCEx_PLL2_Config>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b9b2:	e004      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9ba:	e000      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b9bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10a      	bne.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b9c6:	4b92      	ldr	r3, [pc, #584]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9ca:	f023 0103 	bic.w	r1, r3, #3
 800b9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9d4:	4a8e      	ldr	r2, [pc, #568]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b9d6:	430b      	orrs	r3, r1
 800b9d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9da:	e003      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b9f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9fa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b9fe:	460b      	mov	r3, r1
 800ba00:	4313      	orrs	r3, r2
 800ba02:	f000 8099 	beq.w	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba06:	4b83      	ldr	r3, [pc, #524]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a82      	ldr	r2, [pc, #520]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba12:	f7f7 fc39 	bl	8003288 <HAL_GetTick>
 800ba16:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba1a:	e00b      	b.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba1c:	f7f7 fc34 	bl	8003288 <HAL_GetTick>
 800ba20:	4602      	mov	r2, r0
 800ba22:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ba26:	1ad3      	subs	r3, r2, r3
 800ba28:	2b64      	cmp	r3, #100	; 0x64
 800ba2a:	d903      	bls.n	800ba34 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba32:	e005      	b.n	800ba40 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba34:	4b77      	ldr	r3, [pc, #476]	; (800bc14 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d0ed      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ba40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d173      	bne.n	800bb30 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ba48:	4b71      	ldr	r3, [pc, #452]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba54:	4053      	eors	r3, r2
 800ba56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d015      	beq.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba5e:	4b6c      	ldr	r3, [pc, #432]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba66:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba6a:	4b69      	ldr	r3, [pc, #420]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba6e:	4a68      	ldr	r2, [pc, #416]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba74:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba76:	4b66      	ldr	r3, [pc, #408]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba7a:	4a65      	ldr	r2, [pc, #404]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba80:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ba82:	4a63      	ldr	r2, [pc, #396]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ba84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ba88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ba8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ba92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba96:	d118      	bne.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba98:	f7f7 fbf6 	bl	8003288 <HAL_GetTick>
 800ba9c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800baa0:	e00d      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800baa2:	f7f7 fbf1 	bl	8003288 <HAL_GetTick>
 800baa6:	4602      	mov	r2, r0
 800baa8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800baac:	1ad2      	subs	r2, r2, r3
 800baae:	f241 3388 	movw	r3, #5000	; 0x1388
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d903      	bls.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bab6:	2303      	movs	r3, #3
 800bab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800babc:	e005      	b.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800babe:	4b54      	ldr	r3, [pc, #336]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bac2:	f003 0302 	and.w	r3, r3, #2
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d0eb      	beq.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800baca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d129      	bne.n	800bb26 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bae2:	d10e      	bne.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bae4:	4b4a      	ldr	r3, [pc, #296]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800baec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800baf4:	091a      	lsrs	r2, r3, #4
 800baf6:	4b48      	ldr	r3, [pc, #288]	; (800bc18 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800baf8:	4013      	ands	r3, r2
 800bafa:	4a45      	ldr	r2, [pc, #276]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bafc:	430b      	orrs	r3, r1
 800bafe:	6113      	str	r3, [r2, #16]
 800bb00:	e005      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bb02:	4b43      	ldr	r3, [pc, #268]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb04:	691b      	ldr	r3, [r3, #16]
 800bb06:	4a42      	ldr	r2, [pc, #264]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bb0c:	6113      	str	r3, [r2, #16]
 800bb0e:	4b40      	ldr	r3, [pc, #256]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb10:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bb1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bb1e:	4a3c      	ldr	r2, [pc, #240]	; (800bc10 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bb20:	430b      	orrs	r3, r1
 800bb22:	6713      	str	r3, [r2, #112]	; 0x70
 800bb24:	e008      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800bb2e:	e003      	b.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bb38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb40:	f002 0301 	and.w	r3, r2, #1
 800bb44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bb48:	2300      	movs	r3, #0
 800bb4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bb4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bb52:	460b      	mov	r3, r1
 800bb54:	4313      	orrs	r3, r2
 800bb56:	f000 808f 	beq.w	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bb5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb60:	2b28      	cmp	r3, #40	; 0x28
 800bb62:	d871      	bhi.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bb64:	a201      	add	r2, pc, #4	; (adr r2, 800bb6c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6a:	bf00      	nop
 800bb6c:	0800bc51 	.word	0x0800bc51
 800bb70:	0800bc49 	.word	0x0800bc49
 800bb74:	0800bc49 	.word	0x0800bc49
 800bb78:	0800bc49 	.word	0x0800bc49
 800bb7c:	0800bc49 	.word	0x0800bc49
 800bb80:	0800bc49 	.word	0x0800bc49
 800bb84:	0800bc49 	.word	0x0800bc49
 800bb88:	0800bc49 	.word	0x0800bc49
 800bb8c:	0800bc1d 	.word	0x0800bc1d
 800bb90:	0800bc49 	.word	0x0800bc49
 800bb94:	0800bc49 	.word	0x0800bc49
 800bb98:	0800bc49 	.word	0x0800bc49
 800bb9c:	0800bc49 	.word	0x0800bc49
 800bba0:	0800bc49 	.word	0x0800bc49
 800bba4:	0800bc49 	.word	0x0800bc49
 800bba8:	0800bc49 	.word	0x0800bc49
 800bbac:	0800bc33 	.word	0x0800bc33
 800bbb0:	0800bc49 	.word	0x0800bc49
 800bbb4:	0800bc49 	.word	0x0800bc49
 800bbb8:	0800bc49 	.word	0x0800bc49
 800bbbc:	0800bc49 	.word	0x0800bc49
 800bbc0:	0800bc49 	.word	0x0800bc49
 800bbc4:	0800bc49 	.word	0x0800bc49
 800bbc8:	0800bc49 	.word	0x0800bc49
 800bbcc:	0800bc51 	.word	0x0800bc51
 800bbd0:	0800bc49 	.word	0x0800bc49
 800bbd4:	0800bc49 	.word	0x0800bc49
 800bbd8:	0800bc49 	.word	0x0800bc49
 800bbdc:	0800bc49 	.word	0x0800bc49
 800bbe0:	0800bc49 	.word	0x0800bc49
 800bbe4:	0800bc49 	.word	0x0800bc49
 800bbe8:	0800bc49 	.word	0x0800bc49
 800bbec:	0800bc51 	.word	0x0800bc51
 800bbf0:	0800bc49 	.word	0x0800bc49
 800bbf4:	0800bc49 	.word	0x0800bc49
 800bbf8:	0800bc49 	.word	0x0800bc49
 800bbfc:	0800bc49 	.word	0x0800bc49
 800bc00:	0800bc49 	.word	0x0800bc49
 800bc04:	0800bc49 	.word	0x0800bc49
 800bc08:	0800bc49 	.word	0x0800bc49
 800bc0c:	0800bc51 	.word	0x0800bc51
 800bc10:	58024400 	.word	0x58024400
 800bc14:	58024800 	.word	0x58024800
 800bc18:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc20:	3308      	adds	r3, #8
 800bc22:	2101      	movs	r1, #1
 800bc24:	4618      	mov	r0, r3
 800bc26:	f001 fdcb 	bl	800d7c0 <RCCEx_PLL2_Config>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc30:	e00f      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc36:	3328      	adds	r3, #40	; 0x28
 800bc38:	2101      	movs	r1, #1
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f001 fe72 	bl	800d924 <RCCEx_PLL3_Config>
 800bc40:	4603      	mov	r3, r0
 800bc42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bc46:	e004      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc4e:	e000      	b.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800bc50:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10a      	bne.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bc5a:	4bbf      	ldr	r3, [pc, #764]	; (800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bc5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc5e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800bc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc68:	4abb      	ldr	r2, [pc, #748]	; (800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bc6a:	430b      	orrs	r3, r1
 800bc6c:	6553      	str	r3, [r2, #84]	; 0x54
 800bc6e:	e003      	b.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc74:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bc78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc80:	f002 0302 	and.w	r3, r2, #2
 800bc84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc88:	2300      	movs	r3, #0
 800bc8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800bc92:	460b      	mov	r3, r1
 800bc94:	4313      	orrs	r3, r2
 800bc96:	d041      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc9e:	2b05      	cmp	r3, #5
 800bca0:	d824      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800bca2:	a201      	add	r2, pc, #4	; (adr r2, 800bca8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800bca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca8:	0800bcf5 	.word	0x0800bcf5
 800bcac:	0800bcc1 	.word	0x0800bcc1
 800bcb0:	0800bcd7 	.word	0x0800bcd7
 800bcb4:	0800bcf5 	.word	0x0800bcf5
 800bcb8:	0800bcf5 	.word	0x0800bcf5
 800bcbc:	0800bcf5 	.word	0x0800bcf5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc4:	3308      	adds	r3, #8
 800bcc6:	2101      	movs	r1, #1
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f001 fd79 	bl	800d7c0 <RCCEx_PLL2_Config>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bcd4:	e00f      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcda:	3328      	adds	r3, #40	; 0x28
 800bcdc:	2101      	movs	r1, #1
 800bcde:	4618      	mov	r0, r3
 800bce0:	f001 fe20 	bl	800d924 <RCCEx_PLL3_Config>
 800bce4:	4603      	mov	r3, r0
 800bce6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800bcea:	e004      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bcf2:	e000      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800bcf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10a      	bne.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800bcfe:	4b96      	ldr	r3, [pc, #600]	; (800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bd00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd02:	f023 0107 	bic.w	r1, r3, #7
 800bd06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd0c:	4a92      	ldr	r2, [pc, #584]	; (800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bd0e:	430b      	orrs	r3, r1
 800bd10:	6553      	str	r3, [r2, #84]	; 0x54
 800bd12:	e003      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bd1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f002 0304 	and.w	r3, r2, #4
 800bd28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bd32:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bd36:	460b      	mov	r3, r1
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	d044      	beq.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd44:	2b05      	cmp	r3, #5
 800bd46:	d825      	bhi.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800bd48:	a201      	add	r2, pc, #4	; (adr r2, 800bd50 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800bd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4e:	bf00      	nop
 800bd50:	0800bd9d 	.word	0x0800bd9d
 800bd54:	0800bd69 	.word	0x0800bd69
 800bd58:	0800bd7f 	.word	0x0800bd7f
 800bd5c:	0800bd9d 	.word	0x0800bd9d
 800bd60:	0800bd9d 	.word	0x0800bd9d
 800bd64:	0800bd9d 	.word	0x0800bd9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	2101      	movs	r1, #1
 800bd70:	4618      	mov	r0, r3
 800bd72:	f001 fd25 	bl	800d7c0 <RCCEx_PLL2_Config>
 800bd76:	4603      	mov	r3, r0
 800bd78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd7c:	e00f      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd82:	3328      	adds	r3, #40	; 0x28
 800bd84:	2101      	movs	r1, #1
 800bd86:	4618      	mov	r0, r3
 800bd88:	f001 fdcc 	bl	800d924 <RCCEx_PLL3_Config>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bd92:	e004      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd9a:	e000      	b.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800bd9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10b      	bne.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bda6:	4b6c      	ldr	r3, [pc, #432]	; (800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bda8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdaa:	f023 0107 	bic.w	r1, r3, #7
 800bdae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdb6:	4a68      	ldr	r2, [pc, #416]	; (800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bdb8:	430b      	orrs	r3, r1
 800bdba:	6593      	str	r3, [r2, #88]	; 0x58
 800bdbc:	e003      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bdc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	f002 0320 	and.w	r3, r2, #32
 800bdd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bddc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4313      	orrs	r3, r2
 800bde4:	d055      	beq.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdf2:	d033      	beq.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800bdf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bdf8:	d82c      	bhi.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bdfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdfe:	d02f      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800be00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be04:	d826      	bhi.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800be06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be0a:	d02b      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800be0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800be10:	d820      	bhi.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800be12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be16:	d012      	beq.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800be18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be1c:	d81a      	bhi.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d022      	beq.n	800be68 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800be22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be26:	d115      	bne.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be2c:	3308      	adds	r3, #8
 800be2e:	2100      	movs	r1, #0
 800be30:	4618      	mov	r0, r3
 800be32:	f001 fcc5 	bl	800d7c0 <RCCEx_PLL2_Config>
 800be36:	4603      	mov	r3, r0
 800be38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be3c:	e015      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be42:	3328      	adds	r3, #40	; 0x28
 800be44:	2102      	movs	r1, #2
 800be46:	4618      	mov	r0, r3
 800be48:	f001 fd6c 	bl	800d924 <RCCEx_PLL3_Config>
 800be4c:	4603      	mov	r3, r0
 800be4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800be52:	e00a      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be54:	2301      	movs	r3, #1
 800be56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be5a:	e006      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800be5c:	bf00      	nop
 800be5e:	e004      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800be60:	bf00      	nop
 800be62:	e002      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800be64:	bf00      	nop
 800be66:	e000      	b.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800be68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10b      	bne.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be72:	4b39      	ldr	r3, [pc, #228]	; (800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be76:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800be7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be82:	4a35      	ldr	r2, [pc, #212]	; (800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800be84:	430b      	orrs	r3, r1
 800be86:	6553      	str	r3, [r2, #84]	; 0x54
 800be88:	e003      	b.n	800be92 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800be92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800be9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bea2:	2300      	movs	r3, #0
 800bea4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bea8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800beac:	460b      	mov	r3, r1
 800beae:	4313      	orrs	r3, r2
 800beb0:	d058      	beq.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800beb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800beba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bebe:	d033      	beq.n	800bf28 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800bec0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bec4:	d82c      	bhi.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800beca:	d02f      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800becc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bed0:	d826      	bhi.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bed6:	d02b      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800bed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bedc:	d820      	bhi.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bee2:	d012      	beq.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800bee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bee8:	d81a      	bhi.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d022      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800beee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bef2:	d115      	bne.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bef8:	3308      	adds	r3, #8
 800befa:	2100      	movs	r1, #0
 800befc:	4618      	mov	r0, r3
 800befe:	f001 fc5f 	bl	800d7c0 <RCCEx_PLL2_Config>
 800bf02:	4603      	mov	r3, r0
 800bf04:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf08:	e015      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0e:	3328      	adds	r3, #40	; 0x28
 800bf10:	2102      	movs	r1, #2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f001 fd06 	bl	800d924 <RCCEx_PLL3_Config>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bf1e:	e00a      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf20:	2301      	movs	r3, #1
 800bf22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf26:	e006      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bf28:	bf00      	nop
 800bf2a:	e004      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bf2c:	bf00      	nop
 800bf2e:	e002      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bf30:	bf00      	nop
 800bf32:	e000      	b.n	800bf36 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bf34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10e      	bne.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bf3e:	4b06      	ldr	r3, [pc, #24]	; (800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf42:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bf46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bf4e:	4a02      	ldr	r2, [pc, #8]	; (800bf58 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bf50:	430b      	orrs	r3, r1
 800bf52:	6593      	str	r3, [r2, #88]	; 0x58
 800bf54:	e006      	b.n	800bf64 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800bf56:	bf00      	nop
 800bf58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bf64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bf70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf74:	2300      	movs	r3, #0
 800bf76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bf7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bf7e:	460b      	mov	r3, r1
 800bf80:	4313      	orrs	r3, r2
 800bf82:	d055      	beq.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bf84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bf8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bf90:	d033      	beq.n	800bffa <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800bf92:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bf96:	d82c      	bhi.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bf98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf9c:	d02f      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800bf9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfa2:	d826      	bhi.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bfa4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfa8:	d02b      	beq.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800bfaa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bfae:	d820      	bhi.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bfb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfb4:	d012      	beq.n	800bfdc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800bfb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfba:	d81a      	bhi.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d022      	beq.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800bfc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfc4:	d115      	bne.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bfc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfca:	3308      	adds	r3, #8
 800bfcc:	2100      	movs	r1, #0
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f001 fbf6 	bl	800d7c0 <RCCEx_PLL2_Config>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bfda:	e015      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bfdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfe0:	3328      	adds	r3, #40	; 0x28
 800bfe2:	2102      	movs	r1, #2
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f001 fc9d 	bl	800d924 <RCCEx_PLL3_Config>
 800bfea:	4603      	mov	r3, r0
 800bfec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bff0:	e00a      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bff2:	2301      	movs	r3, #1
 800bff4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bff8:	e006      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bffa:	bf00      	nop
 800bffc:	e004      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bffe:	bf00      	nop
 800c000:	e002      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c002:	bf00      	nop
 800c004:	e000      	b.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c006:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c008:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10b      	bne.n	800c028 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c010:	4ba0      	ldr	r3, [pc, #640]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c014:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c018:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c01c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c020:	4a9c      	ldr	r2, [pc, #624]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c022:	430b      	orrs	r3, r1
 800c024:	6593      	str	r3, [r2, #88]	; 0x58
 800c026:	e003      	b.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c028:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c02c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c038:	f002 0308 	and.w	r3, r2, #8
 800c03c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c040:	2300      	movs	r3, #0
 800c042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c046:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c04a:	460b      	mov	r3, r1
 800c04c:	4313      	orrs	r3, r2
 800c04e:	d01e      	beq.n	800c08e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c05c:	d10c      	bne.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c062:	3328      	adds	r3, #40	; 0x28
 800c064:	2102      	movs	r1, #2
 800c066:	4618      	mov	r0, r3
 800c068:	f001 fc5c 	bl	800d924 <RCCEx_PLL3_Config>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d002      	beq.n	800c078 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c078:	4b86      	ldr	r3, [pc, #536]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c07a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c07c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c088:	4a82      	ldr	r2, [pc, #520]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c08a:	430b      	orrs	r3, r1
 800c08c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	f002 0310 	and.w	r3, r2, #16
 800c09a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c0a4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c0a8:	460b      	mov	r3, r1
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	d01e      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0ba:	d10c      	bne.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0c0:	3328      	adds	r3, #40	; 0x28
 800c0c2:	2102      	movs	r1, #2
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f001 fc2d 	bl	800d924 <RCCEx_PLL3_Config>
 800c0ca:	4603      	mov	r3, r0
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d002      	beq.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c0d6:	4b6f      	ldr	r3, [pc, #444]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c0de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c0e6:	4a6b      	ldr	r2, [pc, #428]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c0e8:	430b      	orrs	r3, r1
 800c0ea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c0f8:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c0fe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c102:	460b      	mov	r3, r1
 800c104:	4313      	orrs	r3, r2
 800c106:	d03e      	beq.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c10c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c110:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c114:	d022      	beq.n	800c15c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c116:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11a:	d81b      	bhi.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d003      	beq.n	800c128 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c124:	d00b      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c126:	e015      	b.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c12c:	3308      	adds	r3, #8
 800c12e:	2100      	movs	r1, #0
 800c130:	4618      	mov	r0, r3
 800c132:	f001 fb45 	bl	800d7c0 <RCCEx_PLL2_Config>
 800c136:	4603      	mov	r3, r0
 800c138:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c13c:	e00f      	b.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c142:	3328      	adds	r3, #40	; 0x28
 800c144:	2102      	movs	r1, #2
 800c146:	4618      	mov	r0, r3
 800c148:	f001 fbec 	bl	800d924 <RCCEx_PLL3_Config>
 800c14c:	4603      	mov	r3, r0
 800c14e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c152:	e004      	b.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c15a:	e000      	b.n	800c15e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c15c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c15e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10b      	bne.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c166:	4b4b      	ldr	r3, [pc, #300]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c16a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c172:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c176:	4a47      	ldr	r2, [pc, #284]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c178:	430b      	orrs	r3, r1
 800c17a:	6593      	str	r3, [r2, #88]	; 0x58
 800c17c:	e003      	b.n	800c186 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c17e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c182:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c192:	673b      	str	r3, [r7, #112]	; 0x70
 800c194:	2300      	movs	r3, #0
 800c196:	677b      	str	r3, [r7, #116]	; 0x74
 800c198:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c19c:	460b      	mov	r3, r1
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	d03b      	beq.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c1aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1ae:	d01f      	beq.n	800c1f0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c1b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c1b4:	d818      	bhi.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c1b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1ba:	d003      	beq.n	800c1c4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c1bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1c0:	d007      	beq.n	800c1d2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c1c2:	e011      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1c4:	4b33      	ldr	r3, [pc, #204]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c8:	4a32      	ldr	r2, [pc, #200]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c1ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c1d0:	e00f      	b.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1d6:	3328      	adds	r3, #40	; 0x28
 800c1d8:	2101      	movs	r1, #1
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f001 fba2 	bl	800d924 <RCCEx_PLL3_Config>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c1e6:	e004      	b.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c1ee:	e000      	b.n	800c1f2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c1f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d10b      	bne.n	800c212 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c1fa:	4b26      	ldr	r3, [pc, #152]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c1fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1fe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c20a:	4a22      	ldr	r2, [pc, #136]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c20c:	430b      	orrs	r3, r1
 800c20e:	6553      	str	r3, [r2, #84]	; 0x54
 800c210:	e003      	b.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c212:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c216:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c222:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c226:	66bb      	str	r3, [r7, #104]	; 0x68
 800c228:	2300      	movs	r3, #0
 800c22a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c22c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c230:	460b      	mov	r3, r1
 800c232:	4313      	orrs	r3, r2
 800c234:	d034      	beq.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c244:	d007      	beq.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c246:	e011      	b.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c248:	4b12      	ldr	r3, [pc, #72]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24c:	4a11      	ldr	r2, [pc, #68]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c24e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c252:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c254:	e00e      	b.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c25a:	3308      	adds	r3, #8
 800c25c:	2102      	movs	r1, #2
 800c25e:	4618      	mov	r0, r3
 800c260:	f001 faae 	bl	800d7c0 <RCCEx_PLL2_Config>
 800c264:	4603      	mov	r3, r0
 800c266:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c26a:	e003      	b.n	800c274 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c272:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c274:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10d      	bne.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c27c:	4b05      	ldr	r3, [pc, #20]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c27e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c28a:	4a02      	ldr	r2, [pc, #8]	; (800c294 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c28c:	430b      	orrs	r3, r1
 800c28e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c290:	e006      	b.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c292:	bf00      	nop
 800c294:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c298:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c29c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c2ac:	663b      	str	r3, [r7, #96]	; 0x60
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	667b      	str	r3, [r7, #100]	; 0x64
 800c2b2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c2b6:	460b      	mov	r3, r1
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	d00c      	beq.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c2bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c0:	3328      	adds	r3, #40	; 0x28
 800c2c2:	2102      	movs	r1, #2
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f001 fb2d 	bl	800d924 <RCCEx_PLL3_Config>
 800c2ca:	4603      	mov	r3, r0
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d002      	beq.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c2e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c2e8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	d036      	beq.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c2fc:	d018      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c2fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c302:	d811      	bhi.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c308:	d014      	beq.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c30a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c30e:	d80b      	bhi.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c310:	2b00      	cmp	r3, #0
 800c312:	d011      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c318:	d106      	bne.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c31a:	4bb7      	ldr	r3, [pc, #732]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c31e:	4ab6      	ldr	r2, [pc, #728]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c324:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c326:	e008      	b.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c328:	2301      	movs	r3, #1
 800c32a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c32e:	e004      	b.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c330:	bf00      	nop
 800c332:	e002      	b.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c334:	bf00      	nop
 800c336:	e000      	b.n	800c33a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c33a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d10a      	bne.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c342:	4bad      	ldr	r3, [pc, #692]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c346:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c34e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c350:	4aa9      	ldr	r2, [pc, #676]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c352:	430b      	orrs	r3, r1
 800c354:	6553      	str	r3, [r2, #84]	; 0x54
 800c356:	e003      	b.n	800c360 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c358:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c35c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c368:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c36c:	653b      	str	r3, [r7, #80]	; 0x50
 800c36e:	2300      	movs	r3, #0
 800c370:	657b      	str	r3, [r7, #84]	; 0x54
 800c372:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c376:	460b      	mov	r3, r1
 800c378:	4313      	orrs	r3, r2
 800c37a:	d009      	beq.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c37c:	4b9e      	ldr	r3, [pc, #632]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c37e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c380:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c38a:	4a9b      	ldr	r2, [pc, #620]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c38c:	430b      	orrs	r3, r1
 800c38e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c398:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c39c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c39e:	2300      	movs	r3, #0
 800c3a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	d009      	beq.n	800c3c0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c3ac:	4b92      	ldr	r3, [pc, #584]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c3b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c3ba:	4a8f      	ldr	r2, [pc, #572]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3bc:	430b      	orrs	r3, r1
 800c3be:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c3cc:	643b      	str	r3, [r7, #64]	; 0x40
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	647b      	str	r3, [r7, #68]	; 0x44
 800c3d2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	d00e      	beq.n	800c3fa <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c3dc:	4b86      	ldr	r3, [pc, #536]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	4a85      	ldr	r2, [pc, #532]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c3e6:	6113      	str	r3, [r2, #16]
 800c3e8:	4b83      	ldr	r3, [pc, #524]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3ea:	6919      	ldr	r1, [r3, #16]
 800c3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3f0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c3f4:	4a80      	ldr	r2, [pc, #512]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c3f6:	430b      	orrs	r3, r1
 800c3f8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c402:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c406:	63bb      	str	r3, [r7, #56]	; 0x38
 800c408:	2300      	movs	r3, #0
 800c40a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c40c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c410:	460b      	mov	r3, r1
 800c412:	4313      	orrs	r3, r2
 800c414:	d009      	beq.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c416:	4b78      	ldr	r3, [pc, #480]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c41a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c424:	4a74      	ldr	r2, [pc, #464]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c426:	430b      	orrs	r3, r1
 800c428:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c432:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c436:	633b      	str	r3, [r7, #48]	; 0x30
 800c438:	2300      	movs	r3, #0
 800c43a:	637b      	str	r3, [r7, #52]	; 0x34
 800c43c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c440:	460b      	mov	r3, r1
 800c442:	4313      	orrs	r3, r2
 800c444:	d00a      	beq.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c446:	4b6c      	ldr	r3, [pc, #432]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c44a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c456:	4a68      	ldr	r2, [pc, #416]	; (800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c458:	430b      	orrs	r3, r1
 800c45a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c464:	2100      	movs	r1, #0
 800c466:	62b9      	str	r1, [r7, #40]	; 0x28
 800c468:	f003 0301 	and.w	r3, r3, #1
 800c46c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c46e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c472:	460b      	mov	r3, r1
 800c474:	4313      	orrs	r3, r2
 800c476:	d011      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c47c:	3308      	adds	r3, #8
 800c47e:	2100      	movs	r1, #0
 800c480:	4618      	mov	r0, r3
 800c482:	f001 f99d 	bl	800d7c0 <RCCEx_PLL2_Config>
 800c486:	4603      	mov	r3, r0
 800c488:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c48c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c490:	2b00      	cmp	r3, #0
 800c492:	d003      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c494:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c498:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a4:	2100      	movs	r1, #0
 800c4a6:	6239      	str	r1, [r7, #32]
 800c4a8:	f003 0302 	and.w	r3, r3, #2
 800c4ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c4ae:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c4b2:	460b      	mov	r3, r1
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	d011      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4bc:	3308      	adds	r3, #8
 800c4be:	2101      	movs	r1, #1
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f001 f97d 	bl	800d7c0 <RCCEx_PLL2_Config>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c4cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d003      	beq.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c4d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	61b9      	str	r1, [r7, #24]
 800c4e8:	f003 0304 	and.w	r3, r3, #4
 800c4ec:	61fb      	str	r3, [r7, #28]
 800c4ee:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c4f2:	460b      	mov	r3, r1
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	d011      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4fc:	3308      	adds	r3, #8
 800c4fe:	2102      	movs	r1, #2
 800c500:	4618      	mov	r0, r3
 800c502:	f001 f95d 	bl	800d7c0 <RCCEx_PLL2_Config>
 800c506:	4603      	mov	r3, r0
 800c508:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c50c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c514:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c524:	2100      	movs	r1, #0
 800c526:	6139      	str	r1, [r7, #16]
 800c528:	f003 0308 	and.w	r3, r3, #8
 800c52c:	617b      	str	r3, [r7, #20]
 800c52e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c532:	460b      	mov	r3, r1
 800c534:	4313      	orrs	r3, r2
 800c536:	d011      	beq.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c53c:	3328      	adds	r3, #40	; 0x28
 800c53e:	2100      	movs	r1, #0
 800c540:	4618      	mov	r0, r3
 800c542:	f001 f9ef 	bl	800d924 <RCCEx_PLL3_Config>
 800c546:	4603      	mov	r3, r0
 800c548:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800c54c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c550:	2b00      	cmp	r3, #0
 800c552:	d003      	beq.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c554:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c558:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c55c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c564:	2100      	movs	r1, #0
 800c566:	60b9      	str	r1, [r7, #8]
 800c568:	f003 0310 	and.w	r3, r3, #16
 800c56c:	60fb      	str	r3, [r7, #12]
 800c56e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c572:	460b      	mov	r3, r1
 800c574:	4313      	orrs	r3, r2
 800c576:	d011      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c57c:	3328      	adds	r3, #40	; 0x28
 800c57e:	2101      	movs	r1, #1
 800c580:	4618      	mov	r0, r3
 800c582:	f001 f9cf 	bl	800d924 <RCCEx_PLL3_Config>
 800c586:	4603      	mov	r3, r0
 800c588:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c58c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c590:	2b00      	cmp	r3, #0
 800c592:	d003      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c594:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c598:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	6039      	str	r1, [r7, #0]
 800c5a8:	f003 0320 	and.w	r3, r3, #32
 800c5ac:	607b      	str	r3, [r7, #4]
 800c5ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c5b2:	460b      	mov	r3, r1
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	d011      	beq.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5bc:	3328      	adds	r3, #40	; 0x28
 800c5be:	2102      	movs	r1, #2
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f001 f9af 	bl	800d924 <RCCEx_PLL3_Config>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c5cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d003      	beq.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800c5dc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	e000      	b.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c5e8:	2301      	movs	r3, #1
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5f6:	bf00      	nop
 800c5f8:	58024400 	.word	0x58024400

0800c5fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b090      	sub	sp, #64	; 0x40
 800c600:	af00      	add	r7, sp, #0
 800c602:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c60a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c60e:	430b      	orrs	r3, r1
 800c610:	f040 8094 	bne.w	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c614:	4b9b      	ldr	r3, [pc, #620]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c618:	f003 0307 	and.w	r3, r3, #7
 800c61c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	2b04      	cmp	r3, #4
 800c622:	f200 8087 	bhi.w	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c626:	a201      	add	r2, pc, #4	; (adr r2, 800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c62c:	0800c641 	.word	0x0800c641
 800c630:	0800c669 	.word	0x0800c669
 800c634:	0800c691 	.word	0x0800c691
 800c638:	0800c72d 	.word	0x0800c72d
 800c63c:	0800c6b9 	.word	0x0800c6b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c640:	4b90      	ldr	r3, [pc, #576]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c648:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c64c:	d108      	bne.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c64e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c652:	4618      	mov	r0, r3
 800c654:	f000 ff62 	bl	800d51c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c65c:	f000 bc93 	b.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c664:	f000 bc8f 	b.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c668:	4b86      	ldr	r3, [pc, #536]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c674:	d108      	bne.n	800c688 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c676:	f107 0318 	add.w	r3, r7, #24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 fca6 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c684:	f000 bc7f 	b.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c688:	2300      	movs	r3, #0
 800c68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c68c:	f000 bc7b 	b.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c690:	4b7c      	ldr	r3, [pc, #496]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c69c:	d108      	bne.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c69e:	f107 030c 	add.w	r3, r7, #12
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f000 fde6 	bl	800d274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ac:	f000 bc6b 	b.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b4:	f000 bc67 	b.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6b8:	4b72      	ldr	r3, [pc, #456]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6c0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6c2:	4b70      	ldr	r3, [pc, #448]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 0304 	and.w	r3, r3, #4
 800c6ca:	2b04      	cmp	r3, #4
 800c6cc:	d10c      	bne.n	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d109      	bne.n	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6d4:	4b6b      	ldr	r3, [pc, #428]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	08db      	lsrs	r3, r3, #3
 800c6da:	f003 0303 	and.w	r3, r3, #3
 800c6de:	4a6a      	ldr	r2, [pc, #424]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c6e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6e6:	e01f      	b.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6e8:	4b66      	ldr	r3, [pc, #408]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6f4:	d106      	bne.n	800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c6f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6fc:	d102      	bne.n	800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6fe:	4b63      	ldr	r3, [pc, #396]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c700:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c702:	e011      	b.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c704:	4b5f      	ldr	r3, [pc, #380]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c70c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c710:	d106      	bne.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c718:	d102      	bne.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c71a:	4b5d      	ldr	r3, [pc, #372]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c71c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c71e:	e003      	b.n	800c728 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c724:	f000 bc2f 	b.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c728:	f000 bc2d 	b.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c72c:	4b59      	ldr	r3, [pc, #356]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c730:	f000 bc29 	b.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c734:	2300      	movs	r3, #0
 800c736:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c738:	f000 bc25 	b.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c73c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c740:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c744:	430b      	orrs	r3, r1
 800c746:	f040 80a7 	bne.w	800c898 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c74a:	4b4e      	ldr	r3, [pc, #312]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c74c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c74e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c752:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c756:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c75a:	d054      	beq.n	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c762:	f200 808b 	bhi.w	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c76c:	f000 8083 	beq.w	800c876 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c772:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c776:	f200 8081 	bhi.w	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c77c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c780:	d02f      	beq.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c788:	d878      	bhi.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d004      	beq.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c796:	d012      	beq.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c798:	e070      	b.n	800c87c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c79a:	4b3a      	ldr	r3, [pc, #232]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7a6:	d107      	bne.n	800c7b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 feb5 	bl	800d51c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7b6:	e3e6      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7bc:	e3e3      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7be:	4b31      	ldr	r3, [pc, #196]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7ca:	d107      	bne.n	800c7dc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c7cc:	f107 0318 	add.w	r3, r7, #24
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 fbfb 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7da:	e3d4      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7dc:	2300      	movs	r3, #0
 800c7de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e0:	e3d1      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7e2:	4b28      	ldr	r3, [pc, #160]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7ee:	d107      	bne.n	800c800 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7f0:	f107 030c 	add.w	r3, r7, #12
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f000 fd3d 	bl	800d274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7fe:	e3c2      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c800:	2300      	movs	r3, #0
 800c802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c804:	e3bf      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c806:	4b1f      	ldr	r3, [pc, #124]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c80a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c80e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c810:	4b1c      	ldr	r3, [pc, #112]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f003 0304 	and.w	r3, r3, #4
 800c818:	2b04      	cmp	r3, #4
 800c81a:	d10c      	bne.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d109      	bne.n	800c836 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c822:	4b18      	ldr	r3, [pc, #96]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	08db      	lsrs	r3, r3, #3
 800c828:	f003 0303 	and.w	r3, r3, #3
 800c82c:	4a16      	ldr	r2, [pc, #88]	; (800c888 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c82e:	fa22 f303 	lsr.w	r3, r2, r3
 800c832:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c834:	e01e      	b.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c836:	4b13      	ldr	r3, [pc, #76]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c83e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c842:	d106      	bne.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c84a:	d102      	bne.n	800c852 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c84c:	4b0f      	ldr	r3, [pc, #60]	; (800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c84e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c850:	e010      	b.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c852:	4b0c      	ldr	r3, [pc, #48]	; (800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c85a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c85e:	d106      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c862:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c866:	d102      	bne.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c868:	4b09      	ldr	r3, [pc, #36]	; (800c890 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c86a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c86c:	e002      	b.n	800c874 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c86e:	2300      	movs	r3, #0
 800c870:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c872:	e388      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c874:	e387      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c876:	4b07      	ldr	r3, [pc, #28]	; (800c894 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c87a:	e384      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c880:	e381      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c882:	bf00      	nop
 800c884:	58024400 	.word	0x58024400
 800c888:	03d09000 	.word	0x03d09000
 800c88c:	003d0900 	.word	0x003d0900
 800c890:	017d7840 	.word	0x017d7840
 800c894:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c89c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c8a0:	430b      	orrs	r3, r1
 800c8a2:	f040 809c 	bne.w	800c9de <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c8a6:	4b9e      	ldr	r3, [pc, #632]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8aa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c8ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8b6:	d054      	beq.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c8be:	f200 808b 	bhi.w	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8c8:	f000 8083 	beq.w	800c9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c8d2:	f200 8081 	bhi.w	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8dc:	d02f      	beq.n	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c8e4:	d878      	bhi.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d004      	beq.n	800c8f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c8f2:	d012      	beq.n	800c91a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c8f4:	e070      	b.n	800c9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c8f6:	4b8a      	ldr	r3, [pc, #552]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c902:	d107      	bne.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 fe07 	bl	800d51c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c910:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c912:	e338      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c914:	2300      	movs	r3, #0
 800c916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c918:	e335      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c91a:	4b81      	ldr	r3, [pc, #516]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c926:	d107      	bne.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c928:	f107 0318 	add.w	r3, r7, #24
 800c92c:	4618      	mov	r0, r3
 800c92e:	f000 fb4d 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c936:	e326      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c93c:	e323      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c93e:	4b78      	ldr	r3, [pc, #480]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c94a:	d107      	bne.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c94c:	f107 030c 	add.w	r3, r7, #12
 800c950:	4618      	mov	r0, r3
 800c952:	f000 fc8f 	bl	800d274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c95a:	e314      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c960:	e311      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c962:	4b6f      	ldr	r3, [pc, #444]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c966:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c96a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c96c:	4b6c      	ldr	r3, [pc, #432]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f003 0304 	and.w	r3, r3, #4
 800c974:	2b04      	cmp	r3, #4
 800c976:	d10c      	bne.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d109      	bne.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c97e:	4b68      	ldr	r3, [pc, #416]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	08db      	lsrs	r3, r3, #3
 800c984:	f003 0303 	and.w	r3, r3, #3
 800c988:	4a66      	ldr	r2, [pc, #408]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c98a:	fa22 f303 	lsr.w	r3, r2, r3
 800c98e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c990:	e01e      	b.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c992:	4b63      	ldr	r3, [pc, #396]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c99a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c99e:	d106      	bne.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c9a6:	d102      	bne.n	800c9ae <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c9a8:	4b5f      	ldr	r3, [pc, #380]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ac:	e010      	b.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9ae:	4b5c      	ldr	r3, [pc, #368]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9ba:	d106      	bne.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c9bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9c2:	d102      	bne.n	800c9ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9c4:	4b59      	ldr	r3, [pc, #356]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9c8:	e002      	b.n	800c9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9ce:	e2da      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c9d0:	e2d9      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c9d2:	4b57      	ldr	r3, [pc, #348]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9d6:	e2d6      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9dc:	e2d3      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c9de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9e2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c9e6:	430b      	orrs	r3, r1
 800c9e8:	f040 80a7 	bne.w	800cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c9ec:	4b4c      	ldr	r3, [pc, #304]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c9ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9f0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c9f4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9fc:	d055      	beq.n	800caaa <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ca04:	f200 8096 	bhi.w	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ca08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca0e:	f000 8084 	beq.w	800cb1a <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800ca12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca14:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca18:	f200 808c 	bhi.w	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ca1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca22:	d030      	beq.n	800ca86 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800ca24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca2a:	f200 8083 	bhi.w	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800ca2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d004      	beq.n	800ca3e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca3a:	d012      	beq.n	800ca62 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ca3c:	e07a      	b.n	800cb34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca3e:	4b38      	ldr	r3, [pc, #224]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca4a:	d107      	bne.n	800ca5c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca50:	4618      	mov	r0, r3
 800ca52:	f000 fd63 	bl	800d51c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca5a:	e294      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca60:	e291      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca62:	4b2f      	ldr	r3, [pc, #188]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca6e:	d107      	bne.n	800ca80 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca70:	f107 0318 	add.w	r3, r7, #24
 800ca74:	4618      	mov	r0, r3
 800ca76:	f000 faa9 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca7e:	e282      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca80:	2300      	movs	r3, #0
 800ca82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca84:	e27f      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca86:	4b26      	ldr	r3, [pc, #152]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca92:	d107      	bne.n	800caa4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca94:	f107 030c 	add.w	r3, r7, #12
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 fbeb 	bl	800d274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caa2:	e270      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800caa4:	2300      	movs	r3, #0
 800caa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa8:	e26d      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800caaa:	4b1d      	ldr	r3, [pc, #116]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800caac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800caae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cab2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cab4:	4b1a      	ldr	r3, [pc, #104]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f003 0304 	and.w	r3, r3, #4
 800cabc:	2b04      	cmp	r3, #4
 800cabe:	d10c      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800cac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d109      	bne.n	800cada <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cac6:	4b16      	ldr	r3, [pc, #88]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	08db      	lsrs	r3, r3, #3
 800cacc:	f003 0303 	and.w	r3, r3, #3
 800cad0:	4a14      	ldr	r2, [pc, #80]	; (800cb24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cad2:	fa22 f303 	lsr.w	r3, r2, r3
 800cad6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cad8:	e01e      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cada:	4b11      	ldr	r3, [pc, #68]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cae6:	d106      	bne.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800cae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caee:	d102      	bne.n	800caf6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800caf0:	4b0d      	ldr	r3, [pc, #52]	; (800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800caf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caf4:	e010      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800caf6:	4b0a      	ldr	r3, [pc, #40]	; (800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cafe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb02:	d106      	bne.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800cb04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb0a:	d102      	bne.n	800cb12 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb0c:	4b07      	ldr	r3, [pc, #28]	; (800cb2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cb0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cb10:	e002      	b.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb12:	2300      	movs	r3, #0
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cb16:	e236      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb18:	e235      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb1a:	4b05      	ldr	r3, [pc, #20]	; (800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cb1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb1e:	e232      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cb20:	58024400 	.word	0x58024400
 800cb24:	03d09000 	.word	0x03d09000
 800cb28:	003d0900 	.word	0x003d0900
 800cb2c:	017d7840 	.word	0x017d7840
 800cb30:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cb34:	2300      	movs	r3, #0
 800cb36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb38:	e225      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cb3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb3e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cb42:	430b      	orrs	r3, r1
 800cb44:	f040 8085 	bne.w	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cb48:	4b9c      	ldr	r3, [pc, #624]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cb4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb4c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cb50:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb58:	d06b      	beq.n	800cc32 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800cb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cb60:	d874      	bhi.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb68:	d056      	beq.n	800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800cb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cb70:	d86c      	bhi.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb78:	d03b      	beq.n	800cbf2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cb80:	d864      	bhi.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb88:	d021      	beq.n	800cbce <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb90:	d85c      	bhi.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cb92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d004      	beq.n	800cba2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cb98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb9e:	d004      	beq.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cba0:	e054      	b.n	800cc4c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cba2:	f7fe fb5f 	bl	800b264 <HAL_RCC_GetPCLK1Freq>
 800cba6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cba8:	e1ed      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbaa:	4b84      	ldr	r3, [pc, #528]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbb6:	d107      	bne.n	800cbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbb8:	f107 0318 	add.w	r3, r7, #24
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	f000 fa05 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbc6:	e1de      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbcc:	e1db      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbce:	4b7b      	ldr	r3, [pc, #492]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbda:	d107      	bne.n	800cbec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbdc:	f107 030c 	add.w	r3, r7, #12
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f000 fb47 	bl	800d274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbea:	e1cc      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbf0:	e1c9      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cbf2:	4b72      	ldr	r3, [pc, #456]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f003 0304 	and.w	r3, r3, #4
 800cbfa:	2b04      	cmp	r3, #4
 800cbfc:	d109      	bne.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbfe:	4b6f      	ldr	r3, [pc, #444]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	08db      	lsrs	r3, r3, #3
 800cc04:	f003 0303 	and.w	r3, r3, #3
 800cc08:	4a6d      	ldr	r2, [pc, #436]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cc0a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc10:	e1b9      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc12:	2300      	movs	r3, #0
 800cc14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc16:	e1b6      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cc18:	4b68      	ldr	r3, [pc, #416]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc24:	d102      	bne.n	800cc2c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cc26:	4b67      	ldr	r3, [pc, #412]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cc28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc2a:	e1ac      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc30:	e1a9      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc32:	4b62      	ldr	r3, [pc, #392]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc3e:	d102      	bne.n	800cc46 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800cc40:	4b61      	ldr	r3, [pc, #388]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cc42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc44:	e19f      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc4a:	e19c      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc50:	e199      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cc52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc56:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cc5a:	430b      	orrs	r3, r1
 800cc5c:	d173      	bne.n	800cd46 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cc5e:	4b57      	ldr	r3, [pc, #348]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cc66:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc6e:	d02f      	beq.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800cc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc76:	d863      	bhi.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800cc78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d004      	beq.n	800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800cc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc84:	d012      	beq.n	800ccac <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800cc86:	e05b      	b.n	800cd40 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc88:	4b4c      	ldr	r3, [pc, #304]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc94:	d107      	bne.n	800cca6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc96:	f107 0318 	add.w	r3, r7, #24
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f000 f996 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cca4:	e16f      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cca6:	2300      	movs	r3, #0
 800cca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccaa:	e16c      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ccac:	4b43      	ldr	r3, [pc, #268]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ccb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ccb8:	d107      	bne.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ccba:	f107 030c 	add.w	r3, r7, #12
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f000 fad8 	bl	800d274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccc8:	e15d      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccce:	e15a      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ccd0:	4b3a      	ldr	r3, [pc, #232]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ccd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ccd8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ccda:	4b38      	ldr	r3, [pc, #224]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	f003 0304 	and.w	r3, r3, #4
 800cce2:	2b04      	cmp	r3, #4
 800cce4:	d10c      	bne.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800cce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d109      	bne.n	800cd00 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccec:	4b33      	ldr	r3, [pc, #204]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	08db      	lsrs	r3, r3, #3
 800ccf2:	f003 0303 	and.w	r3, r3, #3
 800ccf6:	4a32      	ldr	r2, [pc, #200]	; (800cdc0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800ccf8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccfe:	e01e      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd00:	4b2e      	ldr	r3, [pc, #184]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd0c:	d106      	bne.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800cd0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd14:	d102      	bne.n	800cd1c <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd16:	4b2b      	ldr	r3, [pc, #172]	; (800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cd18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd1a:	e010      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd1c:	4b27      	ldr	r3, [pc, #156]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd28:	d106      	bne.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800cd2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd30:	d102      	bne.n	800cd38 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd32:	4b25      	ldr	r3, [pc, #148]	; (800cdc8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800cd34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd36:	e002      	b.n	800cd3e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd3c:	e123      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd3e:	e122      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cd40:	2300      	movs	r3, #0
 800cd42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd44:	e11f      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cd46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cd4a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cd4e:	430b      	orrs	r3, r1
 800cd50:	d13c      	bne.n	800cdcc <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cd52:	4b1a      	ldr	r3, [pc, #104]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd5a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d004      	beq.n	800cd6c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800cd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cd68:	d012      	beq.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800cd6a:	e023      	b.n	800cdb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd6c:	4b13      	ldr	r3, [pc, #76]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cd78:	d107      	bne.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd7e:	4618      	mov	r0, r3
 800cd80:	f000 fbcc 	bl	800d51c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd88:	e0fd      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd8e:	e0fa      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd90:	4b0a      	ldr	r3, [pc, #40]	; (800cdbc <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd9c:	d107      	bne.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd9e:	f107 0318 	add.w	r3, r7, #24
 800cda2:	4618      	mov	r0, r3
 800cda4:	f000 f912 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800cda8:	6a3b      	ldr	r3, [r7, #32]
 800cdaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdac:	e0eb      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb2:	e0e8      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdb8:	e0e5      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cdba:	bf00      	nop
 800cdbc:	58024400 	.word	0x58024400
 800cdc0:	03d09000 	.word	0x03d09000
 800cdc4:	003d0900 	.word	0x003d0900
 800cdc8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cdcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdd0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cdd4:	430b      	orrs	r3, r1
 800cdd6:	f040 8085 	bne.w	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cdda:	4b6d      	ldr	r3, [pc, #436]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdde:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cde2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdea:	d06b      	beq.n	800cec4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cdf2:	d874      	bhi.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cdf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdfa:	d056      	beq.n	800ceaa <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800cdfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ce02:	d86c      	bhi.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ce04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce0a:	d03b      	beq.n	800ce84 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ce12:	d864      	bhi.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ce14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce1a:	d021      	beq.n	800ce60 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ce1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce22:	d85c      	bhi.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ce24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d004      	beq.n	800ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ce2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce30:	d004      	beq.n	800ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ce32:	e054      	b.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ce34:	f000 f8b4 	bl	800cfa0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce38:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ce3a:	e0a4      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce3c:	4b54      	ldr	r3, [pc, #336]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce48:	d107      	bne.n	800ce5a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce4a:	f107 0318 	add.w	r3, r7, #24
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f000 f8bc 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce58:	e095      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce5e:	e092      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce60:	4b4b      	ldr	r3, [pc, #300]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce6c:	d107      	bne.n	800ce7e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce6e:	f107 030c 	add.w	r3, r7, #12
 800ce72:	4618      	mov	r0, r3
 800ce74:	f000 f9fe 	bl	800d274 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce7c:	e083      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce82:	e080      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ce84:	4b42      	ldr	r3, [pc, #264]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	f003 0304 	and.w	r3, r3, #4
 800ce8c:	2b04      	cmp	r3, #4
 800ce8e:	d109      	bne.n	800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce90:	4b3f      	ldr	r3, [pc, #252]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	08db      	lsrs	r3, r3, #3
 800ce96:	f003 0303 	and.w	r3, r3, #3
 800ce9a:	4a3e      	ldr	r2, [pc, #248]	; (800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800ce9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cea2:	e070      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cea4:	2300      	movs	r3, #0
 800cea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cea8:	e06d      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ceaa:	4b39      	ldr	r3, [pc, #228]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceb6:	d102      	bne.n	800cebe <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800ceb8:	4b37      	ldr	r3, [pc, #220]	; (800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ceba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cebc:	e063      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cebe:	2300      	movs	r3, #0
 800cec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cec2:	e060      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cec4:	4b32      	ldr	r3, [pc, #200]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ced0:	d102      	bne.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800ced2:	4b32      	ldr	r3, [pc, #200]	; (800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800ced4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ced6:	e056      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cedc:	e053      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cee2:	e050      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cee8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ceec:	430b      	orrs	r3, r1
 800ceee:	d148      	bne.n	800cf82 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cef0:	4b27      	ldr	r3, [pc, #156]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cef8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cefa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cefc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf00:	d02a      	beq.n	800cf58 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800cf02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf08:	d838      	bhi.n	800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d004      	beq.n	800cf1a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800cf10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf16:	d00d      	beq.n	800cf34 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800cf18:	e030      	b.n	800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf1a:	4b1d      	ldr	r3, [pc, #116]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf26:	d102      	bne.n	800cf2e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800cf28:	4b1c      	ldr	r3, [pc, #112]	; (800cf9c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf2c:	e02b      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf32:	e028      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf34:	4b16      	ldr	r3, [pc, #88]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf40:	d107      	bne.n	800cf52 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 fae8 	bl	800d51c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf50:	e019      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf52:	2300      	movs	r3, #0
 800cf54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf56:	e016      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf58:	4b0d      	ldr	r3, [pc, #52]	; (800cf90 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf64:	d107      	bne.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf66:	f107 0318 	add.w	r3, r7, #24
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	f000 f82e 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf74:	e007      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf7a:	e004      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf80:	e001      	b.n	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800cf82:	2300      	movs	r3, #0
 800cf84:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cf86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3740      	adds	r7, #64	; 0x40
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	58024400 	.word	0x58024400
 800cf94:	03d09000 	.word	0x03d09000
 800cf98:	003d0900 	.word	0x003d0900
 800cf9c:	017d7840 	.word	0x017d7840

0800cfa0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cfa4:	f7fe f92e 	bl	800b204 <HAL_RCC_GetHCLKFreq>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	4b06      	ldr	r3, [pc, #24]	; (800cfc4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cfac:	6a1b      	ldr	r3, [r3, #32]
 800cfae:	091b      	lsrs	r3, r3, #4
 800cfb0:	f003 0307 	and.w	r3, r3, #7
 800cfb4:	4904      	ldr	r1, [pc, #16]	; (800cfc8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cfb6:	5ccb      	ldrb	r3, [r1, r3]
 800cfb8:	f003 031f 	and.w	r3, r3, #31
 800cfbc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	bd80      	pop	{r7, pc}
 800cfc4:	58024400 	.word	0x58024400
 800cfc8:	08018350 	.word	0x08018350

0800cfcc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b089      	sub	sp, #36	; 0x24
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cfd4:	4ba1      	ldr	r3, [pc, #644]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfd8:	f003 0303 	and.w	r3, r3, #3
 800cfdc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cfde:	4b9f      	ldr	r3, [pc, #636]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfe2:	0b1b      	lsrs	r3, r3, #12
 800cfe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfe8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cfea:	4b9c      	ldr	r3, [pc, #624]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfee:	091b      	lsrs	r3, r3, #4
 800cff0:	f003 0301 	and.w	r3, r3, #1
 800cff4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cff6:	4b99      	ldr	r3, [pc, #612]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffa:	08db      	lsrs	r3, r3, #3
 800cffc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d000:	693a      	ldr	r2, [r7, #16]
 800d002:	fb02 f303 	mul.w	r3, r2, r3
 800d006:	ee07 3a90 	vmov	s15, r3
 800d00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d00e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	2b00      	cmp	r3, #0
 800d016:	f000 8111 	beq.w	800d23c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d01a:	69bb      	ldr	r3, [r7, #24]
 800d01c:	2b02      	cmp	r3, #2
 800d01e:	f000 8083 	beq.w	800d128 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d022:	69bb      	ldr	r3, [r7, #24]
 800d024:	2b02      	cmp	r3, #2
 800d026:	f200 80a1 	bhi.w	800d16c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d02a:	69bb      	ldr	r3, [r7, #24]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d003      	beq.n	800d038 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d030:	69bb      	ldr	r3, [r7, #24]
 800d032:	2b01      	cmp	r3, #1
 800d034:	d056      	beq.n	800d0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d036:	e099      	b.n	800d16c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d038:	4b88      	ldr	r3, [pc, #544]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f003 0320 	and.w	r3, r3, #32
 800d040:	2b00      	cmp	r3, #0
 800d042:	d02d      	beq.n	800d0a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d044:	4b85      	ldr	r3, [pc, #532]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	08db      	lsrs	r3, r3, #3
 800d04a:	f003 0303 	and.w	r3, r3, #3
 800d04e:	4a84      	ldr	r2, [pc, #528]	; (800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d050:	fa22 f303 	lsr.w	r3, r2, r3
 800d054:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d056:	68bb      	ldr	r3, [r7, #8]
 800d058:	ee07 3a90 	vmov	s15, r3
 800d05c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	ee07 3a90 	vmov	s15, r3
 800d066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d06a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d06e:	4b7b      	ldr	r3, [pc, #492]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d076:	ee07 3a90 	vmov	s15, r3
 800d07a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d07e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d082:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d08a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d08e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d09a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d09e:	e087      	b.n	800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	ee07 3a90 	vmov	s15, r3
 800d0a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d268 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d0ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0b2:	4b6a      	ldr	r3, [pc, #424]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0ba:	ee07 3a90 	vmov	s15, r3
 800d0be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d0ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0e2:	e065      	b.n	800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	ee07 3a90 	vmov	s15, r3
 800d0ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d0f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0f6:	4b59      	ldr	r3, [pc, #356]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0fe:	ee07 3a90 	vmov	s15, r3
 800d102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d106:	ed97 6a03 	vldr	s12, [r7, #12]
 800d10a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d10e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d116:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d11a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d11e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d122:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d126:	e043      	b.n	800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	ee07 3a90 	vmov	s15, r3
 800d12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d132:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d270 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d13a:	4b48      	ldr	r3, [pc, #288]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d13e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d142:	ee07 3a90 	vmov	s15, r3
 800d146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d14a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d14e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d15a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d15e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d162:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d166:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d16a:	e021      	b.n	800d1b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	ee07 3a90 	vmov	s15, r3
 800d172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d176:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d26c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d17a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d17e:	4b37      	ldr	r3, [pc, #220]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d186:	ee07 3a90 	vmov	s15, r3
 800d18a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d18e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d192:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d264 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d19a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d19e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d1ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d1b0:	4b2a      	ldr	r3, [pc, #168]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b4:	0a5b      	lsrs	r3, r3, #9
 800d1b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ba:	ee07 3a90 	vmov	s15, r3
 800d1be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1ca:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1d6:	ee17 2a90 	vmov	r2, s15
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d1de:	4b1f      	ldr	r3, [pc, #124]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e2:	0c1b      	lsrs	r3, r3, #16
 800d1e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1e8:	ee07 3a90 	vmov	s15, r3
 800d1ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d200:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d204:	ee17 2a90 	vmov	r2, s15
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d20c:	4b13      	ldr	r3, [pc, #76]	; (800d25c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d210:	0e1b      	lsrs	r3, r3, #24
 800d212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d216:	ee07 3a90 	vmov	s15, r3
 800d21a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d21e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d222:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d226:	edd7 6a07 	vldr	s13, [r7, #28]
 800d22a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d22e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d232:	ee17 2a90 	vmov	r2, s15
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d23a:	e008      	b.n	800d24e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2200      	movs	r2, #0
 800d246:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2200      	movs	r2, #0
 800d24c:	609a      	str	r2, [r3, #8]
}
 800d24e:	bf00      	nop
 800d250:	3724      	adds	r7, #36	; 0x24
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
 800d25a:	bf00      	nop
 800d25c:	58024400 	.word	0x58024400
 800d260:	03d09000 	.word	0x03d09000
 800d264:	46000000 	.word	0x46000000
 800d268:	4c742400 	.word	0x4c742400
 800d26c:	4a742400 	.word	0x4a742400
 800d270:	4bbebc20 	.word	0x4bbebc20

0800d274 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d274:	b480      	push	{r7}
 800d276:	b089      	sub	sp, #36	; 0x24
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d27c:	4ba1      	ldr	r3, [pc, #644]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d280:	f003 0303 	and.w	r3, r3, #3
 800d284:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d286:	4b9f      	ldr	r3, [pc, #636]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d28a:	0d1b      	lsrs	r3, r3, #20
 800d28c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d290:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d292:	4b9c      	ldr	r3, [pc, #624]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d296:	0a1b      	lsrs	r3, r3, #8
 800d298:	f003 0301 	and.w	r3, r3, #1
 800d29c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d29e:	4b99      	ldr	r3, [pc, #612]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a2:	08db      	lsrs	r3, r3, #3
 800d2a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2a8:	693a      	ldr	r2, [r7, #16]
 800d2aa:	fb02 f303 	mul.w	r3, r2, r3
 800d2ae:	ee07 3a90 	vmov	s15, r3
 800d2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	f000 8111 	beq.w	800d4e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d2c2:	69bb      	ldr	r3, [r7, #24]
 800d2c4:	2b02      	cmp	r3, #2
 800d2c6:	f000 8083 	beq.w	800d3d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d2ca:	69bb      	ldr	r3, [r7, #24]
 800d2cc:	2b02      	cmp	r3, #2
 800d2ce:	f200 80a1 	bhi.w	800d414 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d2d2:	69bb      	ldr	r3, [r7, #24]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d003      	beq.n	800d2e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d056      	beq.n	800d38c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d2de:	e099      	b.n	800d414 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d2e0:	4b88      	ldr	r3, [pc, #544]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	f003 0320 	and.w	r3, r3, #32
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d02d      	beq.n	800d348 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2ec:	4b85      	ldr	r3, [pc, #532]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	08db      	lsrs	r3, r3, #3
 800d2f2:	f003 0303 	and.w	r3, r3, #3
 800d2f6:	4a84      	ldr	r2, [pc, #528]	; (800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d2f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d2fc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	ee07 3a90 	vmov	s15, r3
 800d304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	ee07 3a90 	vmov	s15, r3
 800d30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d316:	4b7b      	ldr	r3, [pc, #492]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d31a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d31e:	ee07 3a90 	vmov	s15, r3
 800d322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d326:	ed97 6a03 	vldr	s12, [r7, #12]
 800d32a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d50c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d32e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d33a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d33e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d342:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d346:	e087      	b.n	800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	ee07 3a90 	vmov	s15, r3
 800d34e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d352:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d510 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d35a:	4b6a      	ldr	r3, [pc, #424]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d362:	ee07 3a90 	vmov	s15, r3
 800d366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d36a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d36e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d50c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d37a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d37e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d382:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d38a:	e065      	b.n	800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d38c:	697b      	ldr	r3, [r7, #20]
 800d38e:	ee07 3a90 	vmov	s15, r3
 800d392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d396:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d39e:	4b59      	ldr	r3, [pc, #356]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a6:	ee07 3a90 	vmov	s15, r3
 800d3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d50c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3ce:	e043      	b.n	800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	ee07 3a90 	vmov	s15, r3
 800d3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d518 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3e2:	4b48      	ldr	r3, [pc, #288]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ea:	ee07 3a90 	vmov	s15, r3
 800d3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d50c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d40e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d412:	e021      	b.n	800d458 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d414:	697b      	ldr	r3, [r7, #20]
 800d416:	ee07 3a90 	vmov	s15, r3
 800d41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d41e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d514 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d426:	4b37      	ldr	r3, [pc, #220]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d42e:	ee07 3a90 	vmov	s15, r3
 800d432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d436:	ed97 6a03 	vldr	s12, [r7, #12]
 800d43a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d50c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d456:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d458:	4b2a      	ldr	r3, [pc, #168]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d45a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45c:	0a5b      	lsrs	r3, r3, #9
 800d45e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d462:	ee07 3a90 	vmov	s15, r3
 800d466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d46a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d46e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d472:	edd7 6a07 	vldr	s13, [r7, #28]
 800d476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d47a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d47e:	ee17 2a90 	vmov	r2, s15
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d486:	4b1f      	ldr	r3, [pc, #124]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d48a:	0c1b      	lsrs	r3, r3, #16
 800d48c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d490:	ee07 3a90 	vmov	s15, r3
 800d494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d49c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ac:	ee17 2a90 	vmov	r2, s15
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d4b4:	4b13      	ldr	r3, [pc, #76]	; (800d504 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b8:	0e1b      	lsrs	r3, r3, #24
 800d4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4be:	ee07 3a90 	vmov	s15, r3
 800d4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d4ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d4ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800d4d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4da:	ee17 2a90 	vmov	r2, s15
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d4e2:	e008      	b.n	800d4f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	609a      	str	r2, [r3, #8]
}
 800d4f6:	bf00      	nop
 800d4f8:	3724      	adds	r7, #36	; 0x24
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr
 800d502:	bf00      	nop
 800d504:	58024400 	.word	0x58024400
 800d508:	03d09000 	.word	0x03d09000
 800d50c:	46000000 	.word	0x46000000
 800d510:	4c742400 	.word	0x4c742400
 800d514:	4a742400 	.word	0x4a742400
 800d518:	4bbebc20 	.word	0x4bbebc20

0800d51c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b089      	sub	sp, #36	; 0x24
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d524:	4ba0      	ldr	r3, [pc, #640]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d528:	f003 0303 	and.w	r3, r3, #3
 800d52c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d52e:	4b9e      	ldr	r3, [pc, #632]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d532:	091b      	lsrs	r3, r3, #4
 800d534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d538:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d53a:	4b9b      	ldr	r3, [pc, #620]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d53e:	f003 0301 	and.w	r3, r3, #1
 800d542:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d544:	4b98      	ldr	r3, [pc, #608]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d548:	08db      	lsrs	r3, r3, #3
 800d54a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d54e:	693a      	ldr	r2, [r7, #16]
 800d550:	fb02 f303 	mul.w	r3, r2, r3
 800d554:	ee07 3a90 	vmov	s15, r3
 800d558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	2b00      	cmp	r3, #0
 800d564:	f000 8111 	beq.w	800d78a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d568:	69bb      	ldr	r3, [r7, #24]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	f000 8083 	beq.w	800d676 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d570:	69bb      	ldr	r3, [r7, #24]
 800d572:	2b02      	cmp	r3, #2
 800d574:	f200 80a1 	bhi.w	800d6ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d578:	69bb      	ldr	r3, [r7, #24]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d003      	beq.n	800d586 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d57e:	69bb      	ldr	r3, [r7, #24]
 800d580:	2b01      	cmp	r3, #1
 800d582:	d056      	beq.n	800d632 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d584:	e099      	b.n	800d6ba <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d586:	4b88      	ldr	r3, [pc, #544]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f003 0320 	and.w	r3, r3, #32
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d02d      	beq.n	800d5ee <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d592:	4b85      	ldr	r3, [pc, #532]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	08db      	lsrs	r3, r3, #3
 800d598:	f003 0303 	and.w	r3, r3, #3
 800d59c:	4a83      	ldr	r2, [pc, #524]	; (800d7ac <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d59e:	fa22 f303 	lsr.w	r3, r2, r3
 800d5a2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	ee07 3a90 	vmov	s15, r3
 800d5aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	ee07 3a90 	vmov	s15, r3
 800d5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5bc:	4b7a      	ldr	r3, [pc, #488]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5c4:	ee07 3a90 	vmov	s15, r3
 800d5c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5d0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5e8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d5ec:	e087      	b.n	800d6fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5ee:	697b      	ldr	r3, [r7, #20]
 800d5f0:	ee07 3a90 	vmov	s15, r3
 800d5f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5f8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d5fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d600:	4b69      	ldr	r3, [pc, #420]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d604:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d608:	ee07 3a90 	vmov	s15, r3
 800d60c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d610:	ed97 6a03 	vldr	s12, [r7, #12]
 800d614:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d618:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d61c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d620:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d624:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d62c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d630:	e065      	b.n	800d6fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	ee07 3a90 	vmov	s15, r3
 800d638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d63c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d7b8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d640:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d644:	4b58      	ldr	r3, [pc, #352]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d64c:	ee07 3a90 	vmov	s15, r3
 800d650:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d654:	ed97 6a03 	vldr	s12, [r7, #12]
 800d658:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d65c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d660:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d664:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d668:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d66c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d670:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d674:	e043      	b.n	800d6fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	ee07 3a90 	vmov	s15, r3
 800d67c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d680:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d7bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d688:	4b47      	ldr	r3, [pc, #284]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d68c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d690:	ee07 3a90 	vmov	s15, r3
 800d694:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d698:	ed97 6a03 	vldr	s12, [r7, #12]
 800d69c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6b8:	e021      	b.n	800d6fe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	ee07 3a90 	vmov	s15, r3
 800d6c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6c4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d6c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6cc:	4b36      	ldr	r3, [pc, #216]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d4:	ee07 3a90 	vmov	s15, r3
 800d6d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6e0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d7b0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d6e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d6ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d6f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d6f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d6fc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d6fe:	4b2a      	ldr	r3, [pc, #168]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d702:	0a5b      	lsrs	r3, r3, #9
 800d704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d708:	ee07 3a90 	vmov	s15, r3
 800d70c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d714:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d718:	edd7 6a07 	vldr	s13, [r7, #28]
 800d71c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d724:	ee17 2a90 	vmov	r2, s15
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d72c:	4b1e      	ldr	r3, [pc, #120]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d72e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d730:	0c1b      	lsrs	r3, r3, #16
 800d732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d736:	ee07 3a90 	vmov	s15, r3
 800d73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d73e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d742:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d746:	edd7 6a07 	vldr	s13, [r7, #28]
 800d74a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d74e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d752:	ee17 2a90 	vmov	r2, s15
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d75a:	4b13      	ldr	r3, [pc, #76]	; (800d7a8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d75c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d75e:	0e1b      	lsrs	r3, r3, #24
 800d760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d764:	ee07 3a90 	vmov	s15, r3
 800d768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d76c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d770:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d774:	edd7 6a07 	vldr	s13, [r7, #28]
 800d778:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d77c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d780:	ee17 2a90 	vmov	r2, s15
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d788:	e008      	b.n	800d79c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2200      	movs	r2, #0
 800d78e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	609a      	str	r2, [r3, #8]
}
 800d79c:	bf00      	nop
 800d79e:	3724      	adds	r7, #36	; 0x24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a6:	4770      	bx	lr
 800d7a8:	58024400 	.word	0x58024400
 800d7ac:	03d09000 	.word	0x03d09000
 800d7b0:	46000000 	.word	0x46000000
 800d7b4:	4c742400 	.word	0x4c742400
 800d7b8:	4a742400 	.word	0x4a742400
 800d7bc:	4bbebc20 	.word	0x4bbebc20

0800d7c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d7ce:	4b53      	ldr	r3, [pc, #332]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d7d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7d2:	f003 0303 	and.w	r3, r3, #3
 800d7d6:	2b03      	cmp	r3, #3
 800d7d8:	d101      	bne.n	800d7de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	e099      	b.n	800d912 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d7de:	4b4f      	ldr	r3, [pc, #316]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	4a4e      	ldr	r2, [pc, #312]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d7e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d7e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d7ea:	f7f5 fd4d 	bl	8003288 <HAL_GetTick>
 800d7ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d7f0:	e008      	b.n	800d804 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d7f2:	f7f5 fd49 	bl	8003288 <HAL_GetTick>
 800d7f6:	4602      	mov	r2, r0
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	1ad3      	subs	r3, r2, r3
 800d7fc:	2b02      	cmp	r3, #2
 800d7fe:	d901      	bls.n	800d804 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d800:	2303      	movs	r3, #3
 800d802:	e086      	b.n	800d912 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d804:	4b45      	ldr	r3, [pc, #276]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1f0      	bne.n	800d7f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d810:	4b42      	ldr	r3, [pc, #264]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d814:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	031b      	lsls	r3, r3, #12
 800d81e:	493f      	ldr	r1, [pc, #252]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d820:	4313      	orrs	r3, r2
 800d822:	628b      	str	r3, [r1, #40]	; 0x28
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	685b      	ldr	r3, [r3, #4]
 800d828:	3b01      	subs	r3, #1
 800d82a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	3b01      	subs	r3, #1
 800d834:	025b      	lsls	r3, r3, #9
 800d836:	b29b      	uxth	r3, r3
 800d838:	431a      	orrs	r2, r3
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	3b01      	subs	r3, #1
 800d840:	041b      	lsls	r3, r3, #16
 800d842:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d846:	431a      	orrs	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	3b01      	subs	r3, #1
 800d84e:	061b      	lsls	r3, r3, #24
 800d850:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d854:	4931      	ldr	r1, [pc, #196]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d856:	4313      	orrs	r3, r2
 800d858:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d85a:	4b30      	ldr	r3, [pc, #192]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	695b      	ldr	r3, [r3, #20]
 800d866:	492d      	ldr	r1, [pc, #180]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d868:	4313      	orrs	r3, r2
 800d86a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d86c:	4b2b      	ldr	r3, [pc, #172]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d870:	f023 0220 	bic.w	r2, r3, #32
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	699b      	ldr	r3, [r3, #24]
 800d878:	4928      	ldr	r1, [pc, #160]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d87a:	4313      	orrs	r3, r2
 800d87c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d87e:	4b27      	ldr	r3, [pc, #156]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d882:	4a26      	ldr	r2, [pc, #152]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d884:	f023 0310 	bic.w	r3, r3, #16
 800d888:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d88a:	4b24      	ldr	r3, [pc, #144]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d88c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d88e:	4b24      	ldr	r3, [pc, #144]	; (800d920 <RCCEx_PLL2_Config+0x160>)
 800d890:	4013      	ands	r3, r2
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	69d2      	ldr	r2, [r2, #28]
 800d896:	00d2      	lsls	r2, r2, #3
 800d898:	4920      	ldr	r1, [pc, #128]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d89a:	4313      	orrs	r3, r2
 800d89c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d89e:	4b1f      	ldr	r3, [pc, #124]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d8a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8a2:	4a1e      	ldr	r2, [pc, #120]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d8a4:	f043 0310 	orr.w	r3, r3, #16
 800d8a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d106      	bne.n	800d8be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d8b0:	4b1a      	ldr	r3, [pc, #104]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b4:	4a19      	ldr	r2, [pc, #100]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d8b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8bc:	e00f      	b.n	800d8de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	d106      	bne.n	800d8d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d8c4:	4b15      	ldr	r3, [pc, #84]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c8:	4a14      	ldr	r2, [pc, #80]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d8ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d8ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d8d0:	e005      	b.n	800d8de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d8d2:	4b12      	ldr	r3, [pc, #72]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d6:	4a11      	ldr	r2, [pc, #68]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d8d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d8dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d8de:	4b0f      	ldr	r3, [pc, #60]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a0e      	ldr	r2, [pc, #56]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d8e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d8e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d8ea:	f7f5 fccd 	bl	8003288 <HAL_GetTick>
 800d8ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d8f0:	e008      	b.n	800d904 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d8f2:	f7f5 fcc9 	bl	8003288 <HAL_GetTick>
 800d8f6:	4602      	mov	r2, r0
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	1ad3      	subs	r3, r2, r3
 800d8fc:	2b02      	cmp	r3, #2
 800d8fe:	d901      	bls.n	800d904 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d900:	2303      	movs	r3, #3
 800d902:	e006      	b.n	800d912 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d904:	4b05      	ldr	r3, [pc, #20]	; (800d91c <RCCEx_PLL2_Config+0x15c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d0f0      	beq.n	800d8f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d910:	7bfb      	ldrb	r3, [r7, #15]
}
 800d912:	4618      	mov	r0, r3
 800d914:	3710      	adds	r7, #16
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
 800d91a:	bf00      	nop
 800d91c:	58024400 	.word	0x58024400
 800d920:	ffff0007 	.word	0xffff0007

0800d924 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d92e:	2300      	movs	r3, #0
 800d930:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d932:	4b53      	ldr	r3, [pc, #332]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d936:	f003 0303 	and.w	r3, r3, #3
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	d101      	bne.n	800d942 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	e099      	b.n	800da76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d942:	4b4f      	ldr	r3, [pc, #316]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a4e      	ldr	r2, [pc, #312]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d948:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d94c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d94e:	f7f5 fc9b 	bl	8003288 <HAL_GetTick>
 800d952:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d954:	e008      	b.n	800d968 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d956:	f7f5 fc97 	bl	8003288 <HAL_GetTick>
 800d95a:	4602      	mov	r2, r0
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	1ad3      	subs	r3, r2, r3
 800d960:	2b02      	cmp	r3, #2
 800d962:	d901      	bls.n	800d968 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d964:	2303      	movs	r3, #3
 800d966:	e086      	b.n	800da76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d968:	4b45      	ldr	r3, [pc, #276]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d970:	2b00      	cmp	r3, #0
 800d972:	d1f0      	bne.n	800d956 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d974:	4b42      	ldr	r3, [pc, #264]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d978:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	051b      	lsls	r3, r3, #20
 800d982:	493f      	ldr	r1, [pc, #252]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d984:	4313      	orrs	r3, r2
 800d986:	628b      	str	r3, [r1, #40]	; 0x28
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	3b01      	subs	r3, #1
 800d98e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	689b      	ldr	r3, [r3, #8]
 800d996:	3b01      	subs	r3, #1
 800d998:	025b      	lsls	r3, r3, #9
 800d99a:	b29b      	uxth	r3, r3
 800d99c:	431a      	orrs	r2, r3
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	041b      	lsls	r3, r3, #16
 800d9a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d9aa:	431a      	orrs	r2, r3
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	061b      	lsls	r3, r3, #24
 800d9b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d9b8:	4931      	ldr	r1, [pc, #196]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d9ba:	4313      	orrs	r3, r2
 800d9bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d9be:	4b30      	ldr	r3, [pc, #192]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	492d      	ldr	r1, [pc, #180]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d9d0:	4b2b      	ldr	r3, [pc, #172]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d9d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	699b      	ldr	r3, [r3, #24]
 800d9dc:	4928      	ldr	r1, [pc, #160]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d9de:	4313      	orrs	r3, r2
 800d9e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d9e2:	4b27      	ldr	r3, [pc, #156]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e6:	4a26      	ldr	r2, [pc, #152]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d9e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d9ee:	4b24      	ldr	r3, [pc, #144]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d9f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9f2:	4b24      	ldr	r3, [pc, #144]	; (800da84 <RCCEx_PLL3_Config+0x160>)
 800d9f4:	4013      	ands	r3, r2
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	69d2      	ldr	r2, [r2, #28]
 800d9fa:	00d2      	lsls	r2, r2, #3
 800d9fc:	4920      	ldr	r1, [pc, #128]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800d9fe:	4313      	orrs	r3, r2
 800da00:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800da02:	4b1f      	ldr	r3, [pc, #124]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da06:	4a1e      	ldr	r2, [pc, #120]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800da0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d106      	bne.n	800da22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800da14:	4b1a      	ldr	r3, [pc, #104]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da18:	4a19      	ldr	r2, [pc, #100]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800da1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da20:	e00f      	b.n	800da42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	2b01      	cmp	r3, #1
 800da26:	d106      	bne.n	800da36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800da28:	4b15      	ldr	r3, [pc, #84]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da2c:	4a14      	ldr	r2, [pc, #80]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da2e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800da32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800da34:	e005      	b.n	800da42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800da36:	4b12      	ldr	r3, [pc, #72]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da3a:	4a11      	ldr	r2, [pc, #68]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da3c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800da40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800da42:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4a0e      	ldr	r2, [pc, #56]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da4e:	f7f5 fc1b 	bl	8003288 <HAL_GetTick>
 800da52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da54:	e008      	b.n	800da68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da56:	f7f5 fc17 	bl	8003288 <HAL_GetTick>
 800da5a:	4602      	mov	r2, r0
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	1ad3      	subs	r3, r2, r3
 800da60:	2b02      	cmp	r3, #2
 800da62:	d901      	bls.n	800da68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da64:	2303      	movs	r3, #3
 800da66:	e006      	b.n	800da76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da68:	4b05      	ldr	r3, [pc, #20]	; (800da80 <RCCEx_PLL3_Config+0x15c>)
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da70:	2b00      	cmp	r3, #0
 800da72:	d0f0      	beq.n	800da56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da74:	7bfb      	ldrb	r3, [r7, #15]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	58024400 	.word	0x58024400
 800da84:	ffff0007 	.word	0xffff0007

0800da88 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b084      	sub	sp, #16
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d101      	bne.n	800da9a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800da96:	2301      	movs	r3, #1
 800da98:	e092      	b.n	800dbc0 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	7a5b      	ldrb	r3, [r3, #9]
 800da9e:	b2db      	uxtb	r3, r3
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d105      	bne.n	800dab0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2200      	movs	r2, #0
 800daa8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7f4 fce0 	bl	8002470 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2202      	movs	r2, #2
 800dab4:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	f022 0204 	bic.w	r2, r2, #4
 800dac4:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	4b3e      	ldr	r3, [pc, #248]	; (800dbc8 <HAL_RNG_Init+0x140>)
 800dace:	4013      	ands	r3, r2
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	6852      	ldr	r2, [r2, #4]
 800dad4:	431a      	orrs	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800dade:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	4a39      	ldr	r2, [pc, #228]	; (800dbcc <HAL_RNG_Init+0x144>)
 800dae6:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	f247 2274 	movw	r2, #29300	; 0x7274
 800daf0:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800db00:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800db02:	f7f5 fbc1 	bl	8003288 <HAL_GetTick>
 800db06:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800db08:	e016      	b.n	800db38 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800db0a:	f7f5 fbbd 	bl	8003288 <HAL_GetTick>
 800db0e:	4602      	mov	r2, r0
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	2b02      	cmp	r3, #2
 800db16:	d90f      	bls.n	800db38 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800db22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db26:	d107      	bne.n	800db38 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2202      	movs	r2, #2
 800db32:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800db34:	2301      	movs	r3, #1
 800db36:	e043      	b.n	800dbc0 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800db42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db46:	d0e0      	beq.n	800db0a <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f042 0204 	orr.w	r2, r2, #4
 800db56:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db62:	2b40      	cmp	r3, #64	; 0x40
 800db64:	d104      	bne.n	800db70 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2204      	movs	r2, #4
 800db6a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800db6c:	2301      	movs	r3, #1
 800db6e:	e027      	b.n	800dbc0 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800db70:	f7f5 fb8a 	bl	8003288 <HAL_GetTick>
 800db74:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800db76:	e015      	b.n	800dba4 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800db78:	f7f5 fb86 	bl	8003288 <HAL_GetTick>
 800db7c:	4602      	mov	r2, r0
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	1ad3      	subs	r3, r2, r3
 800db82:	2b02      	cmp	r3, #2
 800db84:	d90e      	bls.n	800dba4 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	685b      	ldr	r3, [r3, #4]
 800db8c:	f003 0304 	and.w	r3, r3, #4
 800db90:	2b04      	cmp	r3, #4
 800db92:	d107      	bne.n	800dba4 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2204      	movs	r2, #4
 800db98:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2202      	movs	r2, #2
 800db9e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e00d      	b.n	800dbc0 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	685b      	ldr	r3, [r3, #4]
 800dbaa:	f003 0304 	and.w	r3, r3, #4
 800dbae:	2b04      	cmp	r3, #4
 800dbb0:	d0e2      	beq.n	800db78 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800dbbe:	2300      	movs	r3, #0
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3710      	adds	r7, #16
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	bfffffdf 	.word	0xbfffffdf
 800dbcc:	17590abc 	.word	0x17590abc

0800dbd0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b084      	sub	sp, #16
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d101      	bne.n	800dbe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e10f      	b.n	800de02 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a87      	ldr	r2, [pc, #540]	; (800de0c <HAL_SPI_Init+0x23c>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d00f      	beq.n	800dc12 <HAL_SPI_Init+0x42>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	4a86      	ldr	r2, [pc, #536]	; (800de10 <HAL_SPI_Init+0x240>)
 800dbf8:	4293      	cmp	r3, r2
 800dbfa:	d00a      	beq.n	800dc12 <HAL_SPI_Init+0x42>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a84      	ldr	r2, [pc, #528]	; (800de14 <HAL_SPI_Init+0x244>)
 800dc02:	4293      	cmp	r3, r2
 800dc04:	d005      	beq.n	800dc12 <HAL_SPI_Init+0x42>
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	2b0f      	cmp	r3, #15
 800dc0c:	d901      	bls.n	800dc12 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e0f7      	b.n	800de02 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dc12:	6878      	ldr	r0, [r7, #4]
 800dc14:	f000 f900 	bl	800de18 <SPI_GetPacketSize>
 800dc18:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4a7b      	ldr	r2, [pc, #492]	; (800de0c <HAL_SPI_Init+0x23c>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d00c      	beq.n	800dc3e <HAL_SPI_Init+0x6e>
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4a79      	ldr	r2, [pc, #484]	; (800de10 <HAL_SPI_Init+0x240>)
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	d007      	beq.n	800dc3e <HAL_SPI_Init+0x6e>
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	4a78      	ldr	r2, [pc, #480]	; (800de14 <HAL_SPI_Init+0x244>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d002      	beq.n	800dc3e <HAL_SPI_Init+0x6e>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	2b08      	cmp	r3, #8
 800dc3c:	d811      	bhi.n	800dc62 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dc42:	4a72      	ldr	r2, [pc, #456]	; (800de0c <HAL_SPI_Init+0x23c>)
 800dc44:	4293      	cmp	r3, r2
 800dc46:	d009      	beq.n	800dc5c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4a70      	ldr	r2, [pc, #448]	; (800de10 <HAL_SPI_Init+0x240>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d004      	beq.n	800dc5c <HAL_SPI_Init+0x8c>
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a6f      	ldr	r2, [pc, #444]	; (800de14 <HAL_SPI_Init+0x244>)
 800dc58:	4293      	cmp	r3, r2
 800dc5a:	d104      	bne.n	800dc66 <HAL_SPI_Init+0x96>
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2b10      	cmp	r3, #16
 800dc60:	d901      	bls.n	800dc66 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	e0cd      	b.n	800de02 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d106      	bne.n	800dc80 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7f4 fc9e 	bl	80025bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	2202      	movs	r2, #2
 800dc84:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f022 0201 	bic.w	r2, r2, #1
 800dc96:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800dca2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dcac:	d119      	bne.n	800dce2 <HAL_SPI_Init+0x112>
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dcb6:	d103      	bne.n	800dcc0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d008      	beq.n	800dcd2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d10c      	bne.n	800dce2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dccc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcd0:	d107      	bne.n	800dce2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	681a      	ldr	r2, [r3, #0]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dce0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d00f      	beq.n	800dd0e <HAL_SPI_Init+0x13e>
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	2b06      	cmp	r3, #6
 800dcf4:	d90b      	bls.n	800dd0e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	430a      	orrs	r2, r1
 800dd0a:	601a      	str	r2, [r3, #0]
 800dd0c:	e007      	b.n	800dd1e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	681a      	ldr	r2, [r3, #0]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dd1c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	69da      	ldr	r2, [r3, #28]
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd26:	431a      	orrs	r2, r3
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	431a      	orrs	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd30:	ea42 0103 	orr.w	r1, r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	68da      	ldr	r2, [r3, #12]
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	430a      	orrs	r2, r1
 800dd3e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	431a      	orrs	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd4e:	431a      	orrs	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	699b      	ldr	r3, [r3, #24]
 800dd54:	431a      	orrs	r2, r3
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	691b      	ldr	r3, [r3, #16]
 800dd5a:	431a      	orrs	r2, r3
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	695b      	ldr	r3, [r3, #20]
 800dd60:	431a      	orrs	r2, r3
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6a1b      	ldr	r3, [r3, #32]
 800dd66:	431a      	orrs	r2, r3
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	431a      	orrs	r2, r3
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dd72:	431a      	orrs	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	689b      	ldr	r3, [r3, #8]
 800dd78:	431a      	orrs	r2, r3
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd7e:	ea42 0103 	orr.w	r1, r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	430a      	orrs	r2, r1
 800dd8c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	685b      	ldr	r3, [r3, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d113      	bne.n	800ddbe <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dda8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	689b      	ldr	r3, [r3, #8]
 800ddb0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ddbc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	f022 0201 	bic.w	r2, r2, #1
 800ddcc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d00a      	beq.n	800ddf0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	68db      	ldr	r3, [r3, #12]
 800dde0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	430a      	orrs	r2, r1
 800ddee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2201      	movs	r2, #1
 800ddfc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	40013000 	.word	0x40013000
 800de10:	40003800 	.word	0x40003800
 800de14:	40003c00 	.word	0x40003c00

0800de18 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800de18:	b480      	push	{r7}
 800de1a:	b085      	sub	sp, #20
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de24:	095b      	lsrs	r3, r3, #5
 800de26:	3301      	adds	r3, #1
 800de28:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	68db      	ldr	r3, [r3, #12]
 800de2e:	3301      	adds	r3, #1
 800de30:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	3307      	adds	r3, #7
 800de36:	08db      	lsrs	r3, r3, #3
 800de38:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	fb02 f303 	mul.w	r3, r2, r3
}
 800de42:	4618      	mov	r0, r3
 800de44:	3714      	adds	r7, #20
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr

0800de4e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b082      	sub	sp, #8
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d101      	bne.n	800de60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de5c:	2301      	movs	r3, #1
 800de5e:	e042      	b.n	800dee6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de66:	2b00      	cmp	r3, #0
 800de68:	d106      	bne.n	800de78 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2200      	movs	r2, #0
 800de6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de72:	6878      	ldr	r0, [r7, #4]
 800de74:	f7f4 feba 	bl	8002bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2224      	movs	r2, #36	; 0x24
 800de7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	681a      	ldr	r2, [r3, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	f022 0201 	bic.w	r2, r2, #1
 800de8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 f82d 	bl	800def0 <UART_SetConfig>
 800de96:	4603      	mov	r3, r0
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d101      	bne.n	800dea0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800de9c:	2301      	movs	r3, #1
 800de9e:	e022      	b.n	800dee6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d002      	beq.n	800deae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fe8d 	bl	800ebc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	685a      	ldr	r2, [r3, #4]
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800debc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	689a      	ldr	r2, [r3, #8]
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800decc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f042 0201 	orr.w	r2, r2, #1
 800dedc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 ff14 	bl	800ed0c <UART_CheckIdleState>
 800dee4:	4603      	mov	r3, r0
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3708      	adds	r7, #8
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
	...

0800def0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800def0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800def4:	b092      	sub	sp, #72	; 0x48
 800def6:	af00      	add	r7, sp, #0
 800def8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800defa:	2300      	movs	r3, #0
 800defc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800df00:	697b      	ldr	r3, [r7, #20]
 800df02:	689a      	ldr	r2, [r3, #8]
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	691b      	ldr	r3, [r3, #16]
 800df08:	431a      	orrs	r2, r3
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	695b      	ldr	r3, [r3, #20]
 800df0e:	431a      	orrs	r2, r3
 800df10:	697b      	ldr	r3, [r7, #20]
 800df12:	69db      	ldr	r3, [r3, #28]
 800df14:	4313      	orrs	r3, r2
 800df16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	4bbe      	ldr	r3, [pc, #760]	; (800e218 <UART_SetConfig+0x328>)
 800df20:	4013      	ands	r3, r2
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	6812      	ldr	r2, [r2, #0]
 800df26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df28:	430b      	orrs	r3, r1
 800df2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df36:	697b      	ldr	r3, [r7, #20]
 800df38:	68da      	ldr	r2, [r3, #12]
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	430a      	orrs	r2, r1
 800df40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	699b      	ldr	r3, [r3, #24]
 800df46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	4ab3      	ldr	r2, [pc, #716]	; (800e21c <UART_SetConfig+0x32c>)
 800df4e:	4293      	cmp	r3, r2
 800df50:	d004      	beq.n	800df5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	6a1b      	ldr	r3, [r3, #32]
 800df56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df58:	4313      	orrs	r3, r2
 800df5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	689a      	ldr	r2, [r3, #8]
 800df62:	4baf      	ldr	r3, [pc, #700]	; (800e220 <UART_SetConfig+0x330>)
 800df64:	4013      	ands	r3, r2
 800df66:	697a      	ldr	r2, [r7, #20]
 800df68:	6812      	ldr	r2, [r2, #0]
 800df6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800df6c:	430b      	orrs	r3, r1
 800df6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df76:	f023 010f 	bic.w	r1, r3, #15
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	430a      	orrs	r2, r1
 800df84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800df86:	697b      	ldr	r3, [r7, #20]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4aa6      	ldr	r2, [pc, #664]	; (800e224 <UART_SetConfig+0x334>)
 800df8c:	4293      	cmp	r3, r2
 800df8e:	d177      	bne.n	800e080 <UART_SetConfig+0x190>
 800df90:	4ba5      	ldr	r3, [pc, #660]	; (800e228 <UART_SetConfig+0x338>)
 800df92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df98:	2b28      	cmp	r3, #40	; 0x28
 800df9a:	d86d      	bhi.n	800e078 <UART_SetConfig+0x188>
 800df9c:	a201      	add	r2, pc, #4	; (adr r2, 800dfa4 <UART_SetConfig+0xb4>)
 800df9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfa2:	bf00      	nop
 800dfa4:	0800e049 	.word	0x0800e049
 800dfa8:	0800e079 	.word	0x0800e079
 800dfac:	0800e079 	.word	0x0800e079
 800dfb0:	0800e079 	.word	0x0800e079
 800dfb4:	0800e079 	.word	0x0800e079
 800dfb8:	0800e079 	.word	0x0800e079
 800dfbc:	0800e079 	.word	0x0800e079
 800dfc0:	0800e079 	.word	0x0800e079
 800dfc4:	0800e051 	.word	0x0800e051
 800dfc8:	0800e079 	.word	0x0800e079
 800dfcc:	0800e079 	.word	0x0800e079
 800dfd0:	0800e079 	.word	0x0800e079
 800dfd4:	0800e079 	.word	0x0800e079
 800dfd8:	0800e079 	.word	0x0800e079
 800dfdc:	0800e079 	.word	0x0800e079
 800dfe0:	0800e079 	.word	0x0800e079
 800dfe4:	0800e059 	.word	0x0800e059
 800dfe8:	0800e079 	.word	0x0800e079
 800dfec:	0800e079 	.word	0x0800e079
 800dff0:	0800e079 	.word	0x0800e079
 800dff4:	0800e079 	.word	0x0800e079
 800dff8:	0800e079 	.word	0x0800e079
 800dffc:	0800e079 	.word	0x0800e079
 800e000:	0800e079 	.word	0x0800e079
 800e004:	0800e061 	.word	0x0800e061
 800e008:	0800e079 	.word	0x0800e079
 800e00c:	0800e079 	.word	0x0800e079
 800e010:	0800e079 	.word	0x0800e079
 800e014:	0800e079 	.word	0x0800e079
 800e018:	0800e079 	.word	0x0800e079
 800e01c:	0800e079 	.word	0x0800e079
 800e020:	0800e079 	.word	0x0800e079
 800e024:	0800e069 	.word	0x0800e069
 800e028:	0800e079 	.word	0x0800e079
 800e02c:	0800e079 	.word	0x0800e079
 800e030:	0800e079 	.word	0x0800e079
 800e034:	0800e079 	.word	0x0800e079
 800e038:	0800e079 	.word	0x0800e079
 800e03c:	0800e079 	.word	0x0800e079
 800e040:	0800e079 	.word	0x0800e079
 800e044:	0800e071 	.word	0x0800e071
 800e048:	2301      	movs	r3, #1
 800e04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04e:	e326      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e050:	2304      	movs	r3, #4
 800e052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e056:	e322      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e058:	2308      	movs	r3, #8
 800e05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05e:	e31e      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e060:	2310      	movs	r3, #16
 800e062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e066:	e31a      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e068:	2320      	movs	r3, #32
 800e06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06e:	e316      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e070:	2340      	movs	r3, #64	; 0x40
 800e072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e076:	e312      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e078:	2380      	movs	r3, #128	; 0x80
 800e07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e07e:	e30e      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	4a69      	ldr	r2, [pc, #420]	; (800e22c <UART_SetConfig+0x33c>)
 800e086:	4293      	cmp	r3, r2
 800e088:	d130      	bne.n	800e0ec <UART_SetConfig+0x1fc>
 800e08a:	4b67      	ldr	r3, [pc, #412]	; (800e228 <UART_SetConfig+0x338>)
 800e08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e08e:	f003 0307 	and.w	r3, r3, #7
 800e092:	2b05      	cmp	r3, #5
 800e094:	d826      	bhi.n	800e0e4 <UART_SetConfig+0x1f4>
 800e096:	a201      	add	r2, pc, #4	; (adr r2, 800e09c <UART_SetConfig+0x1ac>)
 800e098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e09c:	0800e0b5 	.word	0x0800e0b5
 800e0a0:	0800e0bd 	.word	0x0800e0bd
 800e0a4:	0800e0c5 	.word	0x0800e0c5
 800e0a8:	0800e0cd 	.word	0x0800e0cd
 800e0ac:	0800e0d5 	.word	0x0800e0d5
 800e0b0:	0800e0dd 	.word	0x0800e0dd
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ba:	e2f0      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e0bc:	2304      	movs	r3, #4
 800e0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0c2:	e2ec      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e0c4:	2308      	movs	r3, #8
 800e0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ca:	e2e8      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e0cc:	2310      	movs	r3, #16
 800e0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0d2:	e2e4      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e0d4:	2320      	movs	r3, #32
 800e0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0da:	e2e0      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e0dc:	2340      	movs	r3, #64	; 0x40
 800e0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0e2:	e2dc      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e0e4:	2380      	movs	r3, #128	; 0x80
 800e0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0ea:	e2d8      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	4a4f      	ldr	r2, [pc, #316]	; (800e230 <UART_SetConfig+0x340>)
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d130      	bne.n	800e158 <UART_SetConfig+0x268>
 800e0f6:	4b4c      	ldr	r3, [pc, #304]	; (800e228 <UART_SetConfig+0x338>)
 800e0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0fa:	f003 0307 	and.w	r3, r3, #7
 800e0fe:	2b05      	cmp	r3, #5
 800e100:	d826      	bhi.n	800e150 <UART_SetConfig+0x260>
 800e102:	a201      	add	r2, pc, #4	; (adr r2, 800e108 <UART_SetConfig+0x218>)
 800e104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e108:	0800e121 	.word	0x0800e121
 800e10c:	0800e129 	.word	0x0800e129
 800e110:	0800e131 	.word	0x0800e131
 800e114:	0800e139 	.word	0x0800e139
 800e118:	0800e141 	.word	0x0800e141
 800e11c:	0800e149 	.word	0x0800e149
 800e120:	2300      	movs	r3, #0
 800e122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e126:	e2ba      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e128:	2304      	movs	r3, #4
 800e12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e12e:	e2b6      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e130:	2308      	movs	r3, #8
 800e132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e136:	e2b2      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e138:	2310      	movs	r3, #16
 800e13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e13e:	e2ae      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e140:	2320      	movs	r3, #32
 800e142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e146:	e2aa      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e148:	2340      	movs	r3, #64	; 0x40
 800e14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e14e:	e2a6      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e150:	2380      	movs	r3, #128	; 0x80
 800e152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e156:	e2a2      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e158:	697b      	ldr	r3, [r7, #20]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a35      	ldr	r2, [pc, #212]	; (800e234 <UART_SetConfig+0x344>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d130      	bne.n	800e1c4 <UART_SetConfig+0x2d4>
 800e162:	4b31      	ldr	r3, [pc, #196]	; (800e228 <UART_SetConfig+0x338>)
 800e164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e166:	f003 0307 	and.w	r3, r3, #7
 800e16a:	2b05      	cmp	r3, #5
 800e16c:	d826      	bhi.n	800e1bc <UART_SetConfig+0x2cc>
 800e16e:	a201      	add	r2, pc, #4	; (adr r2, 800e174 <UART_SetConfig+0x284>)
 800e170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e174:	0800e18d 	.word	0x0800e18d
 800e178:	0800e195 	.word	0x0800e195
 800e17c:	0800e19d 	.word	0x0800e19d
 800e180:	0800e1a5 	.word	0x0800e1a5
 800e184:	0800e1ad 	.word	0x0800e1ad
 800e188:	0800e1b5 	.word	0x0800e1b5
 800e18c:	2300      	movs	r3, #0
 800e18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e192:	e284      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e194:	2304      	movs	r3, #4
 800e196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e19a:	e280      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e19c:	2308      	movs	r3, #8
 800e19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1a2:	e27c      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e1a4:	2310      	movs	r3, #16
 800e1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1aa:	e278      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e1ac:	2320      	movs	r3, #32
 800e1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1b2:	e274      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e1b4:	2340      	movs	r3, #64	; 0x40
 800e1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ba:	e270      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e1bc:	2380      	movs	r3, #128	; 0x80
 800e1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1c2:	e26c      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4a1b      	ldr	r2, [pc, #108]	; (800e238 <UART_SetConfig+0x348>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d142      	bne.n	800e254 <UART_SetConfig+0x364>
 800e1ce:	4b16      	ldr	r3, [pc, #88]	; (800e228 <UART_SetConfig+0x338>)
 800e1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1d2:	f003 0307 	and.w	r3, r3, #7
 800e1d6:	2b05      	cmp	r3, #5
 800e1d8:	d838      	bhi.n	800e24c <UART_SetConfig+0x35c>
 800e1da:	a201      	add	r2, pc, #4	; (adr r2, 800e1e0 <UART_SetConfig+0x2f0>)
 800e1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e0:	0800e1f9 	.word	0x0800e1f9
 800e1e4:	0800e201 	.word	0x0800e201
 800e1e8:	0800e209 	.word	0x0800e209
 800e1ec:	0800e211 	.word	0x0800e211
 800e1f0:	0800e23d 	.word	0x0800e23d
 800e1f4:	0800e245 	.word	0x0800e245
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fe:	e24e      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e200:	2304      	movs	r3, #4
 800e202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e206:	e24a      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e208:	2308      	movs	r3, #8
 800e20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e20e:	e246      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e210:	2310      	movs	r3, #16
 800e212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e216:	e242      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e218:	cfff69f3 	.word	0xcfff69f3
 800e21c:	58000c00 	.word	0x58000c00
 800e220:	11fff4ff 	.word	0x11fff4ff
 800e224:	40011000 	.word	0x40011000
 800e228:	58024400 	.word	0x58024400
 800e22c:	40004400 	.word	0x40004400
 800e230:	40004800 	.word	0x40004800
 800e234:	40004c00 	.word	0x40004c00
 800e238:	40005000 	.word	0x40005000
 800e23c:	2320      	movs	r3, #32
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e242:	e22c      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e244:	2340      	movs	r3, #64	; 0x40
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e228      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e24c:	2380      	movs	r3, #128	; 0x80
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e224      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	4ab1      	ldr	r2, [pc, #708]	; (800e520 <UART_SetConfig+0x630>)
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d176      	bne.n	800e34c <UART_SetConfig+0x45c>
 800e25e:	4bb1      	ldr	r3, [pc, #708]	; (800e524 <UART_SetConfig+0x634>)
 800e260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e266:	2b28      	cmp	r3, #40	; 0x28
 800e268:	d86c      	bhi.n	800e344 <UART_SetConfig+0x454>
 800e26a:	a201      	add	r2, pc, #4	; (adr r2, 800e270 <UART_SetConfig+0x380>)
 800e26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e270:	0800e315 	.word	0x0800e315
 800e274:	0800e345 	.word	0x0800e345
 800e278:	0800e345 	.word	0x0800e345
 800e27c:	0800e345 	.word	0x0800e345
 800e280:	0800e345 	.word	0x0800e345
 800e284:	0800e345 	.word	0x0800e345
 800e288:	0800e345 	.word	0x0800e345
 800e28c:	0800e345 	.word	0x0800e345
 800e290:	0800e31d 	.word	0x0800e31d
 800e294:	0800e345 	.word	0x0800e345
 800e298:	0800e345 	.word	0x0800e345
 800e29c:	0800e345 	.word	0x0800e345
 800e2a0:	0800e345 	.word	0x0800e345
 800e2a4:	0800e345 	.word	0x0800e345
 800e2a8:	0800e345 	.word	0x0800e345
 800e2ac:	0800e345 	.word	0x0800e345
 800e2b0:	0800e325 	.word	0x0800e325
 800e2b4:	0800e345 	.word	0x0800e345
 800e2b8:	0800e345 	.word	0x0800e345
 800e2bc:	0800e345 	.word	0x0800e345
 800e2c0:	0800e345 	.word	0x0800e345
 800e2c4:	0800e345 	.word	0x0800e345
 800e2c8:	0800e345 	.word	0x0800e345
 800e2cc:	0800e345 	.word	0x0800e345
 800e2d0:	0800e32d 	.word	0x0800e32d
 800e2d4:	0800e345 	.word	0x0800e345
 800e2d8:	0800e345 	.word	0x0800e345
 800e2dc:	0800e345 	.word	0x0800e345
 800e2e0:	0800e345 	.word	0x0800e345
 800e2e4:	0800e345 	.word	0x0800e345
 800e2e8:	0800e345 	.word	0x0800e345
 800e2ec:	0800e345 	.word	0x0800e345
 800e2f0:	0800e335 	.word	0x0800e335
 800e2f4:	0800e345 	.word	0x0800e345
 800e2f8:	0800e345 	.word	0x0800e345
 800e2fc:	0800e345 	.word	0x0800e345
 800e300:	0800e345 	.word	0x0800e345
 800e304:	0800e345 	.word	0x0800e345
 800e308:	0800e345 	.word	0x0800e345
 800e30c:	0800e345 	.word	0x0800e345
 800e310:	0800e33d 	.word	0x0800e33d
 800e314:	2301      	movs	r3, #1
 800e316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e31a:	e1c0      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e31c:	2304      	movs	r3, #4
 800e31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e322:	e1bc      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e324:	2308      	movs	r3, #8
 800e326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e32a:	e1b8      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e32c:	2310      	movs	r3, #16
 800e32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e332:	e1b4      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e334:	2320      	movs	r3, #32
 800e336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e33a:	e1b0      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e33c:	2340      	movs	r3, #64	; 0x40
 800e33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e342:	e1ac      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e344:	2380      	movs	r3, #128	; 0x80
 800e346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e34a:	e1a8      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	4a75      	ldr	r2, [pc, #468]	; (800e528 <UART_SetConfig+0x638>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d130      	bne.n	800e3b8 <UART_SetConfig+0x4c8>
 800e356:	4b73      	ldr	r3, [pc, #460]	; (800e524 <UART_SetConfig+0x634>)
 800e358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e35a:	f003 0307 	and.w	r3, r3, #7
 800e35e:	2b05      	cmp	r3, #5
 800e360:	d826      	bhi.n	800e3b0 <UART_SetConfig+0x4c0>
 800e362:	a201      	add	r2, pc, #4	; (adr r2, 800e368 <UART_SetConfig+0x478>)
 800e364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e368:	0800e381 	.word	0x0800e381
 800e36c:	0800e389 	.word	0x0800e389
 800e370:	0800e391 	.word	0x0800e391
 800e374:	0800e399 	.word	0x0800e399
 800e378:	0800e3a1 	.word	0x0800e3a1
 800e37c:	0800e3a9 	.word	0x0800e3a9
 800e380:	2300      	movs	r3, #0
 800e382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e386:	e18a      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e388:	2304      	movs	r3, #4
 800e38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38e:	e186      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e390:	2308      	movs	r3, #8
 800e392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e396:	e182      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e398:	2310      	movs	r3, #16
 800e39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39e:	e17e      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e3a0:	2320      	movs	r3, #32
 800e3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a6:	e17a      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e3a8:	2340      	movs	r3, #64	; 0x40
 800e3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ae:	e176      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e3b0:	2380      	movs	r3, #128	; 0x80
 800e3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b6:	e172      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e3b8:	697b      	ldr	r3, [r7, #20]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	4a5b      	ldr	r2, [pc, #364]	; (800e52c <UART_SetConfig+0x63c>)
 800e3be:	4293      	cmp	r3, r2
 800e3c0:	d130      	bne.n	800e424 <UART_SetConfig+0x534>
 800e3c2:	4b58      	ldr	r3, [pc, #352]	; (800e524 <UART_SetConfig+0x634>)
 800e3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3c6:	f003 0307 	and.w	r3, r3, #7
 800e3ca:	2b05      	cmp	r3, #5
 800e3cc:	d826      	bhi.n	800e41c <UART_SetConfig+0x52c>
 800e3ce:	a201      	add	r2, pc, #4	; (adr r2, 800e3d4 <UART_SetConfig+0x4e4>)
 800e3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d4:	0800e3ed 	.word	0x0800e3ed
 800e3d8:	0800e3f5 	.word	0x0800e3f5
 800e3dc:	0800e3fd 	.word	0x0800e3fd
 800e3e0:	0800e405 	.word	0x0800e405
 800e3e4:	0800e40d 	.word	0x0800e40d
 800e3e8:	0800e415 	.word	0x0800e415
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e154      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e3f4:	2304      	movs	r3, #4
 800e3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fa:	e150      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e3fc:	2308      	movs	r3, #8
 800e3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e402:	e14c      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e404:	2310      	movs	r3, #16
 800e406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40a:	e148      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e40c:	2320      	movs	r3, #32
 800e40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e412:	e144      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e414:	2340      	movs	r3, #64	; 0x40
 800e416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41a:	e140      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e41c:	2380      	movs	r3, #128	; 0x80
 800e41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e422:	e13c      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e424:	697b      	ldr	r3, [r7, #20]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a41      	ldr	r2, [pc, #260]	; (800e530 <UART_SetConfig+0x640>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	f040 8082 	bne.w	800e534 <UART_SetConfig+0x644>
 800e430:	4b3c      	ldr	r3, [pc, #240]	; (800e524 <UART_SetConfig+0x634>)
 800e432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e434:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e438:	2b28      	cmp	r3, #40	; 0x28
 800e43a:	d86d      	bhi.n	800e518 <UART_SetConfig+0x628>
 800e43c:	a201      	add	r2, pc, #4	; (adr r2, 800e444 <UART_SetConfig+0x554>)
 800e43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e442:	bf00      	nop
 800e444:	0800e4e9 	.word	0x0800e4e9
 800e448:	0800e519 	.word	0x0800e519
 800e44c:	0800e519 	.word	0x0800e519
 800e450:	0800e519 	.word	0x0800e519
 800e454:	0800e519 	.word	0x0800e519
 800e458:	0800e519 	.word	0x0800e519
 800e45c:	0800e519 	.word	0x0800e519
 800e460:	0800e519 	.word	0x0800e519
 800e464:	0800e4f1 	.word	0x0800e4f1
 800e468:	0800e519 	.word	0x0800e519
 800e46c:	0800e519 	.word	0x0800e519
 800e470:	0800e519 	.word	0x0800e519
 800e474:	0800e519 	.word	0x0800e519
 800e478:	0800e519 	.word	0x0800e519
 800e47c:	0800e519 	.word	0x0800e519
 800e480:	0800e519 	.word	0x0800e519
 800e484:	0800e4f9 	.word	0x0800e4f9
 800e488:	0800e519 	.word	0x0800e519
 800e48c:	0800e519 	.word	0x0800e519
 800e490:	0800e519 	.word	0x0800e519
 800e494:	0800e519 	.word	0x0800e519
 800e498:	0800e519 	.word	0x0800e519
 800e49c:	0800e519 	.word	0x0800e519
 800e4a0:	0800e519 	.word	0x0800e519
 800e4a4:	0800e501 	.word	0x0800e501
 800e4a8:	0800e519 	.word	0x0800e519
 800e4ac:	0800e519 	.word	0x0800e519
 800e4b0:	0800e519 	.word	0x0800e519
 800e4b4:	0800e519 	.word	0x0800e519
 800e4b8:	0800e519 	.word	0x0800e519
 800e4bc:	0800e519 	.word	0x0800e519
 800e4c0:	0800e519 	.word	0x0800e519
 800e4c4:	0800e509 	.word	0x0800e509
 800e4c8:	0800e519 	.word	0x0800e519
 800e4cc:	0800e519 	.word	0x0800e519
 800e4d0:	0800e519 	.word	0x0800e519
 800e4d4:	0800e519 	.word	0x0800e519
 800e4d8:	0800e519 	.word	0x0800e519
 800e4dc:	0800e519 	.word	0x0800e519
 800e4e0:	0800e519 	.word	0x0800e519
 800e4e4:	0800e511 	.word	0x0800e511
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ee:	e0d6      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e4f0:	2304      	movs	r3, #4
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e0d2      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e4f8:	2308      	movs	r3, #8
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e0ce      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e500:	2310      	movs	r3, #16
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e0ca      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e508:	2320      	movs	r3, #32
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e0c6      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e510:	2340      	movs	r3, #64	; 0x40
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e0c2      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e518:	2380      	movs	r3, #128	; 0x80
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e0be      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e520:	40011400 	.word	0x40011400
 800e524:	58024400 	.word	0x58024400
 800e528:	40007800 	.word	0x40007800
 800e52c:	40007c00 	.word	0x40007c00
 800e530:	40011800 	.word	0x40011800
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4aad      	ldr	r2, [pc, #692]	; (800e7f0 <UART_SetConfig+0x900>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d176      	bne.n	800e62c <UART_SetConfig+0x73c>
 800e53e:	4bad      	ldr	r3, [pc, #692]	; (800e7f4 <UART_SetConfig+0x904>)
 800e540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e546:	2b28      	cmp	r3, #40	; 0x28
 800e548:	d86c      	bhi.n	800e624 <UART_SetConfig+0x734>
 800e54a:	a201      	add	r2, pc, #4	; (adr r2, 800e550 <UART_SetConfig+0x660>)
 800e54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e550:	0800e5f5 	.word	0x0800e5f5
 800e554:	0800e625 	.word	0x0800e625
 800e558:	0800e625 	.word	0x0800e625
 800e55c:	0800e625 	.word	0x0800e625
 800e560:	0800e625 	.word	0x0800e625
 800e564:	0800e625 	.word	0x0800e625
 800e568:	0800e625 	.word	0x0800e625
 800e56c:	0800e625 	.word	0x0800e625
 800e570:	0800e5fd 	.word	0x0800e5fd
 800e574:	0800e625 	.word	0x0800e625
 800e578:	0800e625 	.word	0x0800e625
 800e57c:	0800e625 	.word	0x0800e625
 800e580:	0800e625 	.word	0x0800e625
 800e584:	0800e625 	.word	0x0800e625
 800e588:	0800e625 	.word	0x0800e625
 800e58c:	0800e625 	.word	0x0800e625
 800e590:	0800e605 	.word	0x0800e605
 800e594:	0800e625 	.word	0x0800e625
 800e598:	0800e625 	.word	0x0800e625
 800e59c:	0800e625 	.word	0x0800e625
 800e5a0:	0800e625 	.word	0x0800e625
 800e5a4:	0800e625 	.word	0x0800e625
 800e5a8:	0800e625 	.word	0x0800e625
 800e5ac:	0800e625 	.word	0x0800e625
 800e5b0:	0800e60d 	.word	0x0800e60d
 800e5b4:	0800e625 	.word	0x0800e625
 800e5b8:	0800e625 	.word	0x0800e625
 800e5bc:	0800e625 	.word	0x0800e625
 800e5c0:	0800e625 	.word	0x0800e625
 800e5c4:	0800e625 	.word	0x0800e625
 800e5c8:	0800e625 	.word	0x0800e625
 800e5cc:	0800e625 	.word	0x0800e625
 800e5d0:	0800e615 	.word	0x0800e615
 800e5d4:	0800e625 	.word	0x0800e625
 800e5d8:	0800e625 	.word	0x0800e625
 800e5dc:	0800e625 	.word	0x0800e625
 800e5e0:	0800e625 	.word	0x0800e625
 800e5e4:	0800e625 	.word	0x0800e625
 800e5e8:	0800e625 	.word	0x0800e625
 800e5ec:	0800e625 	.word	0x0800e625
 800e5f0:	0800e61d 	.word	0x0800e61d
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5fa:	e050      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e5fc:	2304      	movs	r3, #4
 800e5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e602:	e04c      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e604:	2308      	movs	r3, #8
 800e606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e60a:	e048      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e60c:	2310      	movs	r3, #16
 800e60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e612:	e044      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e614:	2320      	movs	r3, #32
 800e616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e61a:	e040      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e61c:	2340      	movs	r3, #64	; 0x40
 800e61e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e622:	e03c      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e624:	2380      	movs	r3, #128	; 0x80
 800e626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e62a:	e038      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4a71      	ldr	r2, [pc, #452]	; (800e7f8 <UART_SetConfig+0x908>)
 800e632:	4293      	cmp	r3, r2
 800e634:	d130      	bne.n	800e698 <UART_SetConfig+0x7a8>
 800e636:	4b6f      	ldr	r3, [pc, #444]	; (800e7f4 <UART_SetConfig+0x904>)
 800e638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e63a:	f003 0307 	and.w	r3, r3, #7
 800e63e:	2b05      	cmp	r3, #5
 800e640:	d826      	bhi.n	800e690 <UART_SetConfig+0x7a0>
 800e642:	a201      	add	r2, pc, #4	; (adr r2, 800e648 <UART_SetConfig+0x758>)
 800e644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e648:	0800e661 	.word	0x0800e661
 800e64c:	0800e669 	.word	0x0800e669
 800e650:	0800e671 	.word	0x0800e671
 800e654:	0800e679 	.word	0x0800e679
 800e658:	0800e681 	.word	0x0800e681
 800e65c:	0800e689 	.word	0x0800e689
 800e660:	2302      	movs	r3, #2
 800e662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e666:	e01a      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e668:	2304      	movs	r3, #4
 800e66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66e:	e016      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e670:	2308      	movs	r3, #8
 800e672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e676:	e012      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e678:	2310      	movs	r3, #16
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e00e      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e680:	2320      	movs	r3, #32
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e00a      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e688:	2340      	movs	r3, #64	; 0x40
 800e68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68e:	e006      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e690:	2380      	movs	r3, #128	; 0x80
 800e692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e696:	e002      	b.n	800e69e <UART_SetConfig+0x7ae>
 800e698:	2380      	movs	r3, #128	; 0x80
 800e69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e69e:	697b      	ldr	r3, [r7, #20]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4a55      	ldr	r2, [pc, #340]	; (800e7f8 <UART_SetConfig+0x908>)
 800e6a4:	4293      	cmp	r3, r2
 800e6a6:	f040 80f8 	bne.w	800e89a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e6aa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e6ae:	2b20      	cmp	r3, #32
 800e6b0:	dc46      	bgt.n	800e740 <UART_SetConfig+0x850>
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	db75      	blt.n	800e7a2 <UART_SetConfig+0x8b2>
 800e6b6:	3b02      	subs	r3, #2
 800e6b8:	2b1e      	cmp	r3, #30
 800e6ba:	d872      	bhi.n	800e7a2 <UART_SetConfig+0x8b2>
 800e6bc:	a201      	add	r2, pc, #4	; (adr r2, 800e6c4 <UART_SetConfig+0x7d4>)
 800e6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c2:	bf00      	nop
 800e6c4:	0800e747 	.word	0x0800e747
 800e6c8:	0800e7a3 	.word	0x0800e7a3
 800e6cc:	0800e74f 	.word	0x0800e74f
 800e6d0:	0800e7a3 	.word	0x0800e7a3
 800e6d4:	0800e7a3 	.word	0x0800e7a3
 800e6d8:	0800e7a3 	.word	0x0800e7a3
 800e6dc:	0800e75f 	.word	0x0800e75f
 800e6e0:	0800e7a3 	.word	0x0800e7a3
 800e6e4:	0800e7a3 	.word	0x0800e7a3
 800e6e8:	0800e7a3 	.word	0x0800e7a3
 800e6ec:	0800e7a3 	.word	0x0800e7a3
 800e6f0:	0800e7a3 	.word	0x0800e7a3
 800e6f4:	0800e7a3 	.word	0x0800e7a3
 800e6f8:	0800e7a3 	.word	0x0800e7a3
 800e6fc:	0800e76f 	.word	0x0800e76f
 800e700:	0800e7a3 	.word	0x0800e7a3
 800e704:	0800e7a3 	.word	0x0800e7a3
 800e708:	0800e7a3 	.word	0x0800e7a3
 800e70c:	0800e7a3 	.word	0x0800e7a3
 800e710:	0800e7a3 	.word	0x0800e7a3
 800e714:	0800e7a3 	.word	0x0800e7a3
 800e718:	0800e7a3 	.word	0x0800e7a3
 800e71c:	0800e7a3 	.word	0x0800e7a3
 800e720:	0800e7a3 	.word	0x0800e7a3
 800e724:	0800e7a3 	.word	0x0800e7a3
 800e728:	0800e7a3 	.word	0x0800e7a3
 800e72c:	0800e7a3 	.word	0x0800e7a3
 800e730:	0800e7a3 	.word	0x0800e7a3
 800e734:	0800e7a3 	.word	0x0800e7a3
 800e738:	0800e7a3 	.word	0x0800e7a3
 800e73c:	0800e795 	.word	0x0800e795
 800e740:	2b40      	cmp	r3, #64	; 0x40
 800e742:	d02a      	beq.n	800e79a <UART_SetConfig+0x8aa>
 800e744:	e02d      	b.n	800e7a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e746:	f7fe fc2b 	bl	800cfa0 <HAL_RCCEx_GetD3PCLK1Freq>
 800e74a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e74c:	e02f      	b.n	800e7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e74e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e752:	4618      	mov	r0, r3
 800e754:	f7fe fc3a 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e75c:	e027      	b.n	800e7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e75e:	f107 0318 	add.w	r3, r7, #24
 800e762:	4618      	mov	r0, r3
 800e764:	f7fe fd86 	bl	800d274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e76c:	e01f      	b.n	800e7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e76e:	4b21      	ldr	r3, [pc, #132]	; (800e7f4 <UART_SetConfig+0x904>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	f003 0320 	and.w	r3, r3, #32
 800e776:	2b00      	cmp	r3, #0
 800e778:	d009      	beq.n	800e78e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e77a:	4b1e      	ldr	r3, [pc, #120]	; (800e7f4 <UART_SetConfig+0x904>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	08db      	lsrs	r3, r3, #3
 800e780:	f003 0303 	and.w	r3, r3, #3
 800e784:	4a1d      	ldr	r2, [pc, #116]	; (800e7fc <UART_SetConfig+0x90c>)
 800e786:	fa22 f303 	lsr.w	r3, r2, r3
 800e78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e78c:	e00f      	b.n	800e7ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e78e:	4b1b      	ldr	r3, [pc, #108]	; (800e7fc <UART_SetConfig+0x90c>)
 800e790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e792:	e00c      	b.n	800e7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e794:	4b1a      	ldr	r3, [pc, #104]	; (800e800 <UART_SetConfig+0x910>)
 800e796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e798:	e009      	b.n	800e7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e79a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e7a0:	e005      	b.n	800e7ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e7a6:	2301      	movs	r3, #1
 800e7a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e7ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	f000 81ee 	beq.w	800eb92 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7ba:	4a12      	ldr	r2, [pc, #72]	; (800e804 <UART_SetConfig+0x914>)
 800e7bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7c8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	685a      	ldr	r2, [r3, #4]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	005b      	lsls	r3, r3, #1
 800e7d2:	4413      	add	r3, r2
 800e7d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d305      	bcc.n	800e7e6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e7da:	697b      	ldr	r3, [r7, #20]
 800e7dc:	685b      	ldr	r3, [r3, #4]
 800e7de:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e7e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d910      	bls.n	800e808 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e7e6:	2301      	movs	r3, #1
 800e7e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e7ec:	e1d1      	b.n	800eb92 <UART_SetConfig+0xca2>
 800e7ee:	bf00      	nop
 800e7f0:	40011c00 	.word	0x40011c00
 800e7f4:	58024400 	.word	0x58024400
 800e7f8:	58000c00 	.word	0x58000c00
 800e7fc:	03d09000 	.word	0x03d09000
 800e800:	003d0900 	.word	0x003d0900
 800e804:	08018360 	.word	0x08018360
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e80a:	2200      	movs	r2, #0
 800e80c:	60bb      	str	r3, [r7, #8]
 800e80e:	60fa      	str	r2, [r7, #12]
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e814:	4ac0      	ldr	r2, [pc, #768]	; (800eb18 <UART_SetConfig+0xc28>)
 800e816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e81a:	b29b      	uxth	r3, r3
 800e81c:	2200      	movs	r2, #0
 800e81e:	603b      	str	r3, [r7, #0]
 800e820:	607a      	str	r2, [r7, #4]
 800e822:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e826:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e82a:	f7f1 ff85 	bl	8000738 <__aeabi_uldivmod>
 800e82e:	4602      	mov	r2, r0
 800e830:	460b      	mov	r3, r1
 800e832:	4610      	mov	r0, r2
 800e834:	4619      	mov	r1, r3
 800e836:	f04f 0200 	mov.w	r2, #0
 800e83a:	f04f 0300 	mov.w	r3, #0
 800e83e:	020b      	lsls	r3, r1, #8
 800e840:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e844:	0202      	lsls	r2, r0, #8
 800e846:	6979      	ldr	r1, [r7, #20]
 800e848:	6849      	ldr	r1, [r1, #4]
 800e84a:	0849      	lsrs	r1, r1, #1
 800e84c:	2000      	movs	r0, #0
 800e84e:	460c      	mov	r4, r1
 800e850:	4605      	mov	r5, r0
 800e852:	eb12 0804 	adds.w	r8, r2, r4
 800e856:	eb43 0905 	adc.w	r9, r3, r5
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	685b      	ldr	r3, [r3, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	469a      	mov	sl, r3
 800e862:	4693      	mov	fp, r2
 800e864:	4652      	mov	r2, sl
 800e866:	465b      	mov	r3, fp
 800e868:	4640      	mov	r0, r8
 800e86a:	4649      	mov	r1, r9
 800e86c:	f7f1 ff64 	bl	8000738 <__aeabi_uldivmod>
 800e870:	4602      	mov	r2, r0
 800e872:	460b      	mov	r3, r1
 800e874:	4613      	mov	r3, r2
 800e876:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e87e:	d308      	bcc.n	800e892 <UART_SetConfig+0x9a2>
 800e880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e886:	d204      	bcs.n	800e892 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e88e:	60da      	str	r2, [r3, #12]
 800e890:	e17f      	b.n	800eb92 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e892:	2301      	movs	r3, #1
 800e894:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e898:	e17b      	b.n	800eb92 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	69db      	ldr	r3, [r3, #28]
 800e89e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8a2:	f040 80bd 	bne.w	800ea20 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e8a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e8aa:	2b20      	cmp	r3, #32
 800e8ac:	dc48      	bgt.n	800e940 <UART_SetConfig+0xa50>
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	db7b      	blt.n	800e9aa <UART_SetConfig+0xaba>
 800e8b2:	2b20      	cmp	r3, #32
 800e8b4:	d879      	bhi.n	800e9aa <UART_SetConfig+0xaba>
 800e8b6:	a201      	add	r2, pc, #4	; (adr r2, 800e8bc <UART_SetConfig+0x9cc>)
 800e8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8bc:	0800e947 	.word	0x0800e947
 800e8c0:	0800e94f 	.word	0x0800e94f
 800e8c4:	0800e9ab 	.word	0x0800e9ab
 800e8c8:	0800e9ab 	.word	0x0800e9ab
 800e8cc:	0800e957 	.word	0x0800e957
 800e8d0:	0800e9ab 	.word	0x0800e9ab
 800e8d4:	0800e9ab 	.word	0x0800e9ab
 800e8d8:	0800e9ab 	.word	0x0800e9ab
 800e8dc:	0800e967 	.word	0x0800e967
 800e8e0:	0800e9ab 	.word	0x0800e9ab
 800e8e4:	0800e9ab 	.word	0x0800e9ab
 800e8e8:	0800e9ab 	.word	0x0800e9ab
 800e8ec:	0800e9ab 	.word	0x0800e9ab
 800e8f0:	0800e9ab 	.word	0x0800e9ab
 800e8f4:	0800e9ab 	.word	0x0800e9ab
 800e8f8:	0800e9ab 	.word	0x0800e9ab
 800e8fc:	0800e977 	.word	0x0800e977
 800e900:	0800e9ab 	.word	0x0800e9ab
 800e904:	0800e9ab 	.word	0x0800e9ab
 800e908:	0800e9ab 	.word	0x0800e9ab
 800e90c:	0800e9ab 	.word	0x0800e9ab
 800e910:	0800e9ab 	.word	0x0800e9ab
 800e914:	0800e9ab 	.word	0x0800e9ab
 800e918:	0800e9ab 	.word	0x0800e9ab
 800e91c:	0800e9ab 	.word	0x0800e9ab
 800e920:	0800e9ab 	.word	0x0800e9ab
 800e924:	0800e9ab 	.word	0x0800e9ab
 800e928:	0800e9ab 	.word	0x0800e9ab
 800e92c:	0800e9ab 	.word	0x0800e9ab
 800e930:	0800e9ab 	.word	0x0800e9ab
 800e934:	0800e9ab 	.word	0x0800e9ab
 800e938:	0800e9ab 	.word	0x0800e9ab
 800e93c:	0800e99d 	.word	0x0800e99d
 800e940:	2b40      	cmp	r3, #64	; 0x40
 800e942:	d02e      	beq.n	800e9a2 <UART_SetConfig+0xab2>
 800e944:	e031      	b.n	800e9aa <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e946:	f7fc fc8d 	bl	800b264 <HAL_RCC_GetPCLK1Freq>
 800e94a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e94c:	e033      	b.n	800e9b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e94e:	f7fc fc9f 	bl	800b290 <HAL_RCC_GetPCLK2Freq>
 800e952:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e954:	e02f      	b.n	800e9b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e956:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7fe fb36 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e964:	e027      	b.n	800e9b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e966:	f107 0318 	add.w	r3, r7, #24
 800e96a:	4618      	mov	r0, r3
 800e96c:	f7fe fc82 	bl	800d274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e974:	e01f      	b.n	800e9b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e976:	4b69      	ldr	r3, [pc, #420]	; (800eb1c <UART_SetConfig+0xc2c>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f003 0320 	and.w	r3, r3, #32
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d009      	beq.n	800e996 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e982:	4b66      	ldr	r3, [pc, #408]	; (800eb1c <UART_SetConfig+0xc2c>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	08db      	lsrs	r3, r3, #3
 800e988:	f003 0303 	and.w	r3, r3, #3
 800e98c:	4a64      	ldr	r2, [pc, #400]	; (800eb20 <UART_SetConfig+0xc30>)
 800e98e:	fa22 f303 	lsr.w	r3, r2, r3
 800e992:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e994:	e00f      	b.n	800e9b6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e996:	4b62      	ldr	r3, [pc, #392]	; (800eb20 <UART_SetConfig+0xc30>)
 800e998:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e99a:	e00c      	b.n	800e9b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e99c:	4b61      	ldr	r3, [pc, #388]	; (800eb24 <UART_SetConfig+0xc34>)
 800e99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9a0:	e009      	b.n	800e9b6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9a8:	e005      	b.n	800e9b6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e9b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e9b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	f000 80ea 	beq.w	800eb92 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9c2:	4a55      	ldr	r2, [pc, #340]	; (800eb18 <UART_SetConfig+0xc28>)
 800e9c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9cc:	fbb3 f3f2 	udiv	r3, r3, r2
 800e9d0:	005a      	lsls	r2, r3, #1
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	685b      	ldr	r3, [r3, #4]
 800e9d6:	085b      	lsrs	r3, r3, #1
 800e9d8:	441a      	add	r2, r3
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	685b      	ldr	r3, [r3, #4]
 800e9de:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9e2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9e6:	2b0f      	cmp	r3, #15
 800e9e8:	d916      	bls.n	800ea18 <UART_SetConfig+0xb28>
 800e9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e9f0:	d212      	bcs.n	800ea18 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	f023 030f 	bic.w	r3, r3, #15
 800e9fa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9fe:	085b      	lsrs	r3, r3, #1
 800ea00:	b29b      	uxth	r3, r3
 800ea02:	f003 0307 	and.w	r3, r3, #7
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ea0a:	4313      	orrs	r3, r2
 800ea0c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ea14:	60da      	str	r2, [r3, #12]
 800ea16:	e0bc      	b.n	800eb92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ea18:	2301      	movs	r3, #1
 800ea1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ea1e:	e0b8      	b.n	800eb92 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ea20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ea24:	2b20      	cmp	r3, #32
 800ea26:	dc4b      	bgt.n	800eac0 <UART_SetConfig+0xbd0>
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	f2c0 8087 	blt.w	800eb3c <UART_SetConfig+0xc4c>
 800ea2e:	2b20      	cmp	r3, #32
 800ea30:	f200 8084 	bhi.w	800eb3c <UART_SetConfig+0xc4c>
 800ea34:	a201      	add	r2, pc, #4	; (adr r2, 800ea3c <UART_SetConfig+0xb4c>)
 800ea36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3a:	bf00      	nop
 800ea3c:	0800eac7 	.word	0x0800eac7
 800ea40:	0800eacf 	.word	0x0800eacf
 800ea44:	0800eb3d 	.word	0x0800eb3d
 800ea48:	0800eb3d 	.word	0x0800eb3d
 800ea4c:	0800ead7 	.word	0x0800ead7
 800ea50:	0800eb3d 	.word	0x0800eb3d
 800ea54:	0800eb3d 	.word	0x0800eb3d
 800ea58:	0800eb3d 	.word	0x0800eb3d
 800ea5c:	0800eae7 	.word	0x0800eae7
 800ea60:	0800eb3d 	.word	0x0800eb3d
 800ea64:	0800eb3d 	.word	0x0800eb3d
 800ea68:	0800eb3d 	.word	0x0800eb3d
 800ea6c:	0800eb3d 	.word	0x0800eb3d
 800ea70:	0800eb3d 	.word	0x0800eb3d
 800ea74:	0800eb3d 	.word	0x0800eb3d
 800ea78:	0800eb3d 	.word	0x0800eb3d
 800ea7c:	0800eaf7 	.word	0x0800eaf7
 800ea80:	0800eb3d 	.word	0x0800eb3d
 800ea84:	0800eb3d 	.word	0x0800eb3d
 800ea88:	0800eb3d 	.word	0x0800eb3d
 800ea8c:	0800eb3d 	.word	0x0800eb3d
 800ea90:	0800eb3d 	.word	0x0800eb3d
 800ea94:	0800eb3d 	.word	0x0800eb3d
 800ea98:	0800eb3d 	.word	0x0800eb3d
 800ea9c:	0800eb3d 	.word	0x0800eb3d
 800eaa0:	0800eb3d 	.word	0x0800eb3d
 800eaa4:	0800eb3d 	.word	0x0800eb3d
 800eaa8:	0800eb3d 	.word	0x0800eb3d
 800eaac:	0800eb3d 	.word	0x0800eb3d
 800eab0:	0800eb3d 	.word	0x0800eb3d
 800eab4:	0800eb3d 	.word	0x0800eb3d
 800eab8:	0800eb3d 	.word	0x0800eb3d
 800eabc:	0800eb2f 	.word	0x0800eb2f
 800eac0:	2b40      	cmp	r3, #64	; 0x40
 800eac2:	d037      	beq.n	800eb34 <UART_SetConfig+0xc44>
 800eac4:	e03a      	b.n	800eb3c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800eac6:	f7fc fbcd 	bl	800b264 <HAL_RCC_GetPCLK1Freq>
 800eaca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eacc:	e03c      	b.n	800eb48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eace:	f7fc fbdf 	bl	800b290 <HAL_RCC_GetPCLK2Freq>
 800ead2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ead4:	e038      	b.n	800eb48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ead6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eada:	4618      	mov	r0, r3
 800eadc:	f7fe fa76 	bl	800cfcc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae4:	e030      	b.n	800eb48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eae6:	f107 0318 	add.w	r3, r7, #24
 800eaea:	4618      	mov	r0, r3
 800eaec:	f7fe fbc2 	bl	800d274 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eaf0:	69fb      	ldr	r3, [r7, #28]
 800eaf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaf4:	e028      	b.n	800eb48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eaf6:	4b09      	ldr	r3, [pc, #36]	; (800eb1c <UART_SetConfig+0xc2c>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	f003 0320 	and.w	r3, r3, #32
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d012      	beq.n	800eb28 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eb02:	4b06      	ldr	r3, [pc, #24]	; (800eb1c <UART_SetConfig+0xc2c>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	08db      	lsrs	r3, r3, #3
 800eb08:	f003 0303 	and.w	r3, r3, #3
 800eb0c:	4a04      	ldr	r2, [pc, #16]	; (800eb20 <UART_SetConfig+0xc30>)
 800eb0e:	fa22 f303 	lsr.w	r3, r2, r3
 800eb12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eb14:	e018      	b.n	800eb48 <UART_SetConfig+0xc58>
 800eb16:	bf00      	nop
 800eb18:	08018360 	.word	0x08018360
 800eb1c:	58024400 	.word	0x58024400
 800eb20:	03d09000 	.word	0x03d09000
 800eb24:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800eb28:	4b24      	ldr	r3, [pc, #144]	; (800ebbc <UART_SetConfig+0xccc>)
 800eb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb2c:	e00c      	b.n	800eb48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eb2e:	4b24      	ldr	r3, [pc, #144]	; (800ebc0 <UART_SetConfig+0xcd0>)
 800eb30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb32:	e009      	b.n	800eb48 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eb34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eb38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eb3a:	e005      	b.n	800eb48 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eb40:	2301      	movs	r3, #1
 800eb42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eb46:	bf00      	nop
    }

    if (pclk != 0U)
 800eb48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d021      	beq.n	800eb92 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb52:	4a1c      	ldr	r2, [pc, #112]	; (800ebc4 <UART_SetConfig+0xcd4>)
 800eb54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb58:	461a      	mov	r2, r3
 800eb5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb5c:	fbb3 f2f2 	udiv	r2, r3, r2
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	685b      	ldr	r3, [r3, #4]
 800eb64:	085b      	lsrs	r3, r3, #1
 800eb66:	441a      	add	r2, r3
 800eb68:	697b      	ldr	r3, [r7, #20]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb70:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb74:	2b0f      	cmp	r3, #15
 800eb76:	d909      	bls.n	800eb8c <UART_SetConfig+0xc9c>
 800eb78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb7e:	d205      	bcs.n	800eb8c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eb80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	60da      	str	r2, [r3, #12]
 800eb8a:	e002      	b.n	800eb92 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	2201      	movs	r2, #1
 800eb96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	2201      	movs	r2, #1
 800eb9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eba2:	697b      	ldr	r3, [r7, #20]
 800eba4:	2200      	movs	r2, #0
 800eba6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ebae:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	3748      	adds	r7, #72	; 0x48
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ebbc:	03d09000 	.word	0x03d09000
 800ebc0:	003d0900 	.word	0x003d0900
 800ebc4:	08018360 	.word	0x08018360

0800ebc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00a      	beq.n	800ebf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	685b      	ldr	r3, [r3, #4]
 800ebe2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	430a      	orrs	r2, r1
 800ebf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf6:	f003 0302 	and.w	r3, r3, #2
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d00a      	beq.n	800ec14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	430a      	orrs	r2, r1
 800ec12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec18:	f003 0304 	and.w	r3, r3, #4
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00a      	beq.n	800ec36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	685b      	ldr	r3, [r3, #4]
 800ec26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	430a      	orrs	r2, r1
 800ec34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec3a:	f003 0308 	and.w	r3, r3, #8
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d00a      	beq.n	800ec58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	685b      	ldr	r3, [r3, #4]
 800ec48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	430a      	orrs	r2, r1
 800ec56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec5c:	f003 0310 	and.w	r3, r3, #16
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d00a      	beq.n	800ec7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	689b      	ldr	r3, [r3, #8]
 800ec6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	430a      	orrs	r2, r1
 800ec78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7e:	f003 0320 	and.w	r3, r3, #32
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d00a      	beq.n	800ec9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	689b      	ldr	r3, [r3, #8]
 800ec8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	430a      	orrs	r2, r1
 800ec9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d01a      	beq.n	800ecde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	685b      	ldr	r3, [r3, #4]
 800ecae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	430a      	orrs	r2, r1
 800ecbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ecc6:	d10a      	bne.n	800ecde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	685b      	ldr	r3, [r3, #4]
 800ecce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	430a      	orrs	r2, r1
 800ecdc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d00a      	beq.n	800ed00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	430a      	orrs	r2, r1
 800ecfe:	605a      	str	r2, [r3, #4]
  }
}
 800ed00:	bf00      	nop
 800ed02:	370c      	adds	r7, #12
 800ed04:	46bd      	mov	sp, r7
 800ed06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0a:	4770      	bx	lr

0800ed0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b098      	sub	sp, #96	; 0x60
 800ed10:	af02      	add	r7, sp, #8
 800ed12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2200      	movs	r2, #0
 800ed18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ed1c:	f7f4 fab4 	bl	8003288 <HAL_GetTick>
 800ed20:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f003 0308 	and.w	r3, r3, #8
 800ed2c:	2b08      	cmp	r3, #8
 800ed2e:	d12f      	bne.n	800ed90 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 f88e 	bl	800ee60 <UART_WaitOnFlagUntilTimeout>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d022      	beq.n	800ed90 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed52:	e853 3f00 	ldrex	r3, [r3]
 800ed56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ed58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed5e:	653b      	str	r3, [r7, #80]	; 0x50
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	461a      	mov	r2, r3
 800ed66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed68:	647b      	str	r3, [r7, #68]	; 0x44
 800ed6a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ed6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ed70:	e841 2300 	strex	r3, r2, [r1]
 800ed74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ed76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d1e6      	bne.n	800ed4a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2220      	movs	r2, #32
 800ed80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ed8c:	2303      	movs	r3, #3
 800ed8e:	e063      	b.n	800ee58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f003 0304 	and.w	r3, r3, #4
 800ed9a:	2b04      	cmp	r3, #4
 800ed9c:	d149      	bne.n	800ee32 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ed9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eda2:	9300      	str	r3, [sp, #0]
 800eda4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eda6:	2200      	movs	r2, #0
 800eda8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f000 f857 	bl	800ee60 <UART_WaitOnFlagUntilTimeout>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d03c      	beq.n	800ee32 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc0:	e853 3f00 	ldrex	r3, [r3]
 800edc4:	623b      	str	r3, [r7, #32]
   return(result);
 800edc6:	6a3b      	ldr	r3, [r7, #32]
 800edc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800edcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	461a      	mov	r2, r3
 800edd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edd6:	633b      	str	r3, [r7, #48]	; 0x30
 800edd8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edde:	e841 2300 	strex	r3, r2, [r1]
 800ede2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ede4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d1e6      	bne.n	800edb8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	3308      	adds	r3, #8
 800edf0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf2:	693b      	ldr	r3, [r7, #16]
 800edf4:	e853 3f00 	ldrex	r3, [r3]
 800edf8:	60fb      	str	r3, [r7, #12]
   return(result);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	f023 0301 	bic.w	r3, r3, #1
 800ee00:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	3308      	adds	r3, #8
 800ee08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee0a:	61fa      	str	r2, [r7, #28]
 800ee0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee0e:	69b9      	ldr	r1, [r7, #24]
 800ee10:	69fa      	ldr	r2, [r7, #28]
 800ee12:	e841 2300 	strex	r3, r2, [r1]
 800ee16:	617b      	str	r3, [r7, #20]
   return(result);
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d1e5      	bne.n	800edea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2220      	movs	r2, #32
 800ee22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ee2e:	2303      	movs	r3, #3
 800ee30:	e012      	b.n	800ee58 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2220      	movs	r2, #32
 800ee36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2220      	movs	r2, #32
 800ee3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	2200      	movs	r2, #0
 800ee46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2200      	movs	r2, #0
 800ee52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3758      	adds	r7, #88	; 0x58
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	60b9      	str	r1, [r7, #8]
 800ee6a:	603b      	str	r3, [r7, #0]
 800ee6c:	4613      	mov	r3, r2
 800ee6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ee70:	e049      	b.n	800ef06 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee78:	d045      	beq.n	800ef06 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ee7a:	f7f4 fa05 	bl	8003288 <HAL_GetTick>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	1ad3      	subs	r3, r2, r3
 800ee84:	69ba      	ldr	r2, [r7, #24]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d302      	bcc.n	800ee90 <UART_WaitOnFlagUntilTimeout+0x30>
 800ee8a:	69bb      	ldr	r3, [r7, #24]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d101      	bne.n	800ee94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ee90:	2303      	movs	r3, #3
 800ee92:	e048      	b.n	800ef26 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	f003 0304 	and.w	r3, r3, #4
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d031      	beq.n	800ef06 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	69db      	ldr	r3, [r3, #28]
 800eea8:	f003 0308 	and.w	r3, r3, #8
 800eeac:	2b08      	cmp	r3, #8
 800eeae:	d110      	bne.n	800eed2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	2208      	movs	r2, #8
 800eeb6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f000 f839 	bl	800ef30 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	2208      	movs	r2, #8
 800eec2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	2200      	movs	r2, #0
 800eeca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800eece:	2301      	movs	r3, #1
 800eed0:	e029      	b.n	800ef26 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	69db      	ldr	r3, [r3, #28]
 800eed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eedc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eee0:	d111      	bne.n	800ef06 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eeea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800eeec:	68f8      	ldr	r0, [r7, #12]
 800eeee:	f000 f81f 	bl	800ef30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2220      	movs	r2, #32
 800eef6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	2200      	movs	r2, #0
 800eefe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ef02:	2303      	movs	r3, #3
 800ef04:	e00f      	b.n	800ef26 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	69da      	ldr	r2, [r3, #28]
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	4013      	ands	r3, r2
 800ef10:	68ba      	ldr	r2, [r7, #8]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	bf0c      	ite	eq
 800ef16:	2301      	moveq	r3, #1
 800ef18:	2300      	movne	r3, #0
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	79fb      	ldrb	r3, [r7, #7]
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d0a6      	beq.n	800ee72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ef24:	2300      	movs	r3, #0
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
	...

0800ef30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ef30:	b480      	push	{r7}
 800ef32:	b095      	sub	sp, #84	; 0x54
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef40:	e853 3f00 	ldrex	r3, [r3]
 800ef44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ef46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ef4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	461a      	mov	r2, r3
 800ef54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef56:	643b      	str	r3, [r7, #64]	; 0x40
 800ef58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ef5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef5e:	e841 2300 	strex	r3, r2, [r1]
 800ef62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1e6      	bne.n	800ef38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	3308      	adds	r3, #8
 800ef70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef72:	6a3b      	ldr	r3, [r7, #32]
 800ef74:	e853 3f00 	ldrex	r3, [r3]
 800ef78:	61fb      	str	r3, [r7, #28]
   return(result);
 800ef7a:	69fa      	ldr	r2, [r7, #28]
 800ef7c:	4b1e      	ldr	r3, [pc, #120]	; (800eff8 <UART_EndRxTransfer+0xc8>)
 800ef7e:	4013      	ands	r3, r2
 800ef80:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	3308      	adds	r3, #8
 800ef88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ef8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ef90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ef92:	e841 2300 	strex	r3, r2, [r1]
 800ef96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ef98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d1e5      	bne.n	800ef6a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d118      	bne.n	800efd8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	e853 3f00 	ldrex	r3, [r3]
 800efb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	f023 0310 	bic.w	r3, r3, #16
 800efba:	647b      	str	r3, [r7, #68]	; 0x44
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	461a      	mov	r2, r3
 800efc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800efc4:	61bb      	str	r3, [r7, #24]
 800efc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efc8:	6979      	ldr	r1, [r7, #20]
 800efca:	69ba      	ldr	r2, [r7, #24]
 800efcc:	e841 2300 	strex	r3, r2, [r1]
 800efd0:	613b      	str	r3, [r7, #16]
   return(result);
 800efd2:	693b      	ldr	r3, [r7, #16]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d1e6      	bne.n	800efa6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2220      	movs	r2, #32
 800efdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	2200      	movs	r2, #0
 800efe4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2200      	movs	r2, #0
 800efea:	675a      	str	r2, [r3, #116]	; 0x74
}
 800efec:	bf00      	nop
 800efee:	3754      	adds	r7, #84	; 0x54
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr
 800eff8:	effffffe 	.word	0xeffffffe

0800effc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800effc:	b480      	push	{r7}
 800effe:	b085      	sub	sp, #20
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d101      	bne.n	800f012 <HAL_UARTEx_DisableFifoMode+0x16>
 800f00e:	2302      	movs	r3, #2
 800f010:	e027      	b.n	800f062 <HAL_UARTEx_DisableFifoMode+0x66>
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2201      	movs	r2, #1
 800f016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2224      	movs	r2, #36	; 0x24
 800f01e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	681a      	ldr	r2, [r3, #0]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	f022 0201 	bic.w	r2, r2, #1
 800f038:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f040:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	2200      	movs	r2, #0
 800f046:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	68fa      	ldr	r2, [r7, #12]
 800f04e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2220      	movs	r2, #32
 800f054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	2200      	movs	r2, #0
 800f05c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f060:	2300      	movs	r3, #0
}
 800f062:	4618      	mov	r0, r3
 800f064:	3714      	adds	r7, #20
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr

0800f06e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f06e:	b580      	push	{r7, lr}
 800f070:	b084      	sub	sp, #16
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
 800f076:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f07e:	2b01      	cmp	r3, #1
 800f080:	d101      	bne.n	800f086 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f082:	2302      	movs	r3, #2
 800f084:	e02d      	b.n	800f0e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	2201      	movs	r2, #1
 800f08a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2224      	movs	r2, #36	; 0x24
 800f092:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f022 0201 	bic.w	r2, r2, #1
 800f0ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	689b      	ldr	r3, [r3, #8]
 800f0b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	683a      	ldr	r2, [r7, #0]
 800f0be:	430a      	orrs	r2, r1
 800f0c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f0c2:	6878      	ldr	r0, [r7, #4]
 800f0c4:	f000 f850 	bl	800f168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	68fa      	ldr	r2, [r7, #12]
 800f0ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2220      	movs	r2, #32
 800f0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0ea:	b580      	push	{r7, lr}
 800f0ec:	b084      	sub	sp, #16
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
 800f0f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f0fa:	2b01      	cmp	r3, #1
 800f0fc:	d101      	bne.n	800f102 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f0fe:	2302      	movs	r3, #2
 800f100:	e02d      	b.n	800f15e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2201      	movs	r2, #1
 800f106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2224      	movs	r2, #36	; 0x24
 800f10e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	681a      	ldr	r2, [r3, #0]
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f022 0201 	bic.w	r2, r2, #1
 800f128:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	689b      	ldr	r3, [r3, #8]
 800f130:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	683a      	ldr	r2, [r7, #0]
 800f13a:	430a      	orrs	r2, r1
 800f13c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 f812 	bl	800f168 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	2220      	movs	r2, #32
 800f150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2200      	movs	r2, #0
 800f158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f15c:	2300      	movs	r3, #0
}
 800f15e:	4618      	mov	r0, r3
 800f160:	3710      	adds	r7, #16
 800f162:	46bd      	mov	sp, r7
 800f164:	bd80      	pop	{r7, pc}
	...

0800f168 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f168:	b480      	push	{r7}
 800f16a:	b085      	sub	sp, #20
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f174:	2b00      	cmp	r3, #0
 800f176:	d108      	bne.n	800f18a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2201      	movs	r2, #1
 800f184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f188:	e031      	b.n	800f1ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f18a:	2310      	movs	r3, #16
 800f18c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f18e:	2310      	movs	r3, #16
 800f190:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	689b      	ldr	r3, [r3, #8]
 800f198:	0e5b      	lsrs	r3, r3, #25
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	f003 0307 	and.w	r3, r3, #7
 800f1a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	0f5b      	lsrs	r3, r3, #29
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	f003 0307 	and.w	r3, r3, #7
 800f1b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f1b2:	7bbb      	ldrb	r3, [r7, #14]
 800f1b4:	7b3a      	ldrb	r2, [r7, #12]
 800f1b6:	4911      	ldr	r1, [pc, #68]	; (800f1fc <UARTEx_SetNbDataToProcess+0x94>)
 800f1b8:	5c8a      	ldrb	r2, [r1, r2]
 800f1ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f1be:	7b3a      	ldrb	r2, [r7, #12]
 800f1c0:	490f      	ldr	r1, [pc, #60]	; (800f200 <UARTEx_SetNbDataToProcess+0x98>)
 800f1c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f1c4:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f1d0:	7bfb      	ldrb	r3, [r7, #15]
 800f1d2:	7b7a      	ldrb	r2, [r7, #13]
 800f1d4:	4909      	ldr	r1, [pc, #36]	; (800f1fc <UARTEx_SetNbDataToProcess+0x94>)
 800f1d6:	5c8a      	ldrb	r2, [r1, r2]
 800f1d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f1dc:	7b7a      	ldrb	r2, [r7, #13]
 800f1de:	4908      	ldr	r1, [pc, #32]	; (800f200 <UARTEx_SetNbDataToProcess+0x98>)
 800f1e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f1e2:	fb93 f3f2 	sdiv	r3, r3, r2
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f1ee:	bf00      	nop
 800f1f0:	3714      	adds	r7, #20
 800f1f2:	46bd      	mov	sp, r7
 800f1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f8:	4770      	bx	lr
 800f1fa:	bf00      	nop
 800f1fc:	08018378 	.word	0x08018378
 800f200:	08018380 	.word	0x08018380

0800f204 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800f204:	b084      	sub	sp, #16
 800f206:	b480      	push	{r7}
 800f208:	b085      	sub	sp, #20
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
 800f20e:	f107 001c 	add.w	r0, r7, #28
 800f212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800f21a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800f21c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800f21e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800f220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800f222:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800f224:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800f226:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800f22a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800f22c:	68fa      	ldr	r2, [r7, #12]
 800f22e:	4313      	orrs	r3, r2
 800f230:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	685a      	ldr	r2, [r3, #4]
 800f236:	4b07      	ldr	r3, [pc, #28]	; (800f254 <SDMMC_Init+0x50>)
 800f238:	4013      	ands	r3, r2
 800f23a:	68fa      	ldr	r2, [r7, #12]
 800f23c:	431a      	orrs	r2, r3
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3714      	adds	r7, #20
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	b004      	add	sp, #16
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	ffc02c00 	.word	0xffc02c00

0800f258 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800f258:	b480      	push	{r7}
 800f25a:	b083      	sub	sp, #12
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f266:	4618      	mov	r0, r3
 800f268:	370c      	adds	r7, #12
 800f26a:	46bd      	mov	sp, r7
 800f26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f270:	4770      	bx	lr

0800f272 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800f272:	b480      	push	{r7}
 800f274:	b083      	sub	sp, #12
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f043 0203 	orr.w	r2, r3, #3
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f286:	2300      	movs	r3, #0
}
 800f288:	4618      	mov	r0, r3
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f003 0303 	and.w	r3, r3, #3
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	370c      	adds	r7, #12
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ae:	4770      	bx	lr

0800f2b0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800f2be:	683b      	ldr	r3, [r7, #0]
 800f2c0:	681a      	ldr	r2, [r3, #0]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f2c6:	683b      	ldr	r3, [r7, #0]
 800f2c8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f2ce:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800f2d0:	683b      	ldr	r3, [r7, #0]
 800f2d2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800f2d4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800f2da:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800f2dc:	68fa      	ldr	r2, [r7, #12]
 800f2de:	4313      	orrs	r3, r2
 800f2e0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	68da      	ldr	r2, [r3, #12]
 800f2e6:	4b06      	ldr	r3, [pc, #24]	; (800f300 <SDMMC_SendCommand+0x50>)
 800f2e8:	4013      	ands	r3, r2
 800f2ea:	68fa      	ldr	r2, [r7, #12]
 800f2ec:	431a      	orrs	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f2f2:	2300      	movs	r3, #0
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3714      	adds	r7, #20
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr
 800f300:	fffee0c0 	.word	0xfffee0c0

0800f304 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800f304:	b480      	push	{r7}
 800f306:	b083      	sub	sp, #12
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	691b      	ldr	r3, [r3, #16]
 800f310:	b2db      	uxtb	r3, r3
}
 800f312:	4618      	mov	r0, r3
 800f314:	370c      	adds	r7, #12
 800f316:	46bd      	mov	sp, r7
 800f318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31c:	4770      	bx	lr

0800f31e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800f31e:	b480      	push	{r7}
 800f320:	b085      	sub	sp, #20
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	3314      	adds	r3, #20
 800f32c:	461a      	mov	r2, r3
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	4413      	add	r3, r2
 800f332:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3714      	adds	r7, #20
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f34e:	2300      	movs	r3, #0
 800f350:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	681a      	ldr	r2, [r3, #0]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	685a      	ldr	r2, [r3, #4]
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f36a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800f370:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800f376:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800f378:	68fa      	ldr	r2, [r7, #12]
 800f37a:	4313      	orrs	r3, r2
 800f37c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f382:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	431a      	orrs	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f38e:	2300      	movs	r3, #0

}
 800f390:	4618      	mov	r0, r3
 800f392:	3714      	adds	r7, #20
 800f394:	46bd      	mov	sp, r7
 800f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39a:	4770      	bx	lr

0800f39c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b088      	sub	sp, #32
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
 800f3a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f3aa:	2310      	movs	r3, #16
 800f3ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f3b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f3bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3be:	f107 0308 	add.w	r3, r7, #8
 800f3c2:	4619      	mov	r1, r3
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	f7ff ff73 	bl	800f2b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f3ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800f3ce:	2110      	movs	r1, #16
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 f935 	bl	800f640 <SDMMC_GetCmdResp1>
 800f3d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3d8:	69fb      	ldr	r3, [r7, #28]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3720      	adds	r7, #32
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b088      	sub	sp, #32
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
 800f3ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f3f0:	2307      	movs	r3, #7
 800f3f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f3f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f402:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f404:	f107 0308 	add.w	r3, r7, #8
 800f408:	4619      	mov	r1, r3
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f7ff ff50 	bl	800f2b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f410:	f241 3288 	movw	r2, #5000	; 0x1388
 800f414:	2107      	movs	r1, #7
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	f000 f912 	bl	800f640 <SDMMC_GetCmdResp1>
 800f41c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f41e:	69fb      	ldr	r3, [r7, #28]
}
 800f420:	4618      	mov	r0, r3
 800f422:	3720      	adds	r7, #32
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b088      	sub	sp, #32
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800f430:	2300      	movs	r3, #0
 800f432:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f434:	2300      	movs	r3, #0
 800f436:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f438:	2300      	movs	r3, #0
 800f43a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f43c:	2300      	movs	r3, #0
 800f43e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f444:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f446:	f107 0308 	add.w	r3, r7, #8
 800f44a:	4619      	mov	r1, r3
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7ff ff2f 	bl	800f2b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 fa70 	bl	800f938 <SDMMC_GetCmdError>
 800f458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f45a:	69fb      	ldr	r3, [r7, #28]
}
 800f45c:	4618      	mov	r0, r3
 800f45e:	3720      	adds	r7, #32
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b088      	sub	sp, #32
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f46c:	2300      	movs	r3, #0
 800f46e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f470:	2302      	movs	r3, #2
 800f472:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f474:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f47a:	2300      	movs	r3, #0
 800f47c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f47e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f482:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f484:	f107 0308 	add.w	r3, r7, #8
 800f488:	4619      	mov	r1, r3
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f7ff ff10 	bl	800f2b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 f9c7 	bl	800f824 <SDMMC_GetCmdResp2>
 800f496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f498:	69fb      	ldr	r3, [r7, #28]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3720      	adds	r7, #32
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f4a2:	b580      	push	{r7, lr}
 800f4a4:	b088      	sub	sp, #32
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
 800f4aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f4b0:	2309      	movs	r3, #9
 800f4b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f4b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f4b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f4be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f4c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f4c4:	f107 0308 	add.w	r3, r7, #8
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f7ff fef0 	bl	800f2b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	f000 f9a7 	bl	800f824 <SDMMC_GetCmdResp2>
 800f4d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4d8:	69fb      	ldr	r3, [r7, #28]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3720      	adds	r7, #32
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}

0800f4e2 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800f4e2:	b580      	push	{r7, lr}
 800f4e4:	b088      	sub	sp, #32
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800f4ee:	887b      	ldrh	r3, [r7, #2]
 800f4f0:	041b      	lsls	r3, r3, #16
 800f4f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f4f4:	2303      	movs	r3, #3
 800f4f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f4f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f4fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f4fe:	2300      	movs	r3, #0
 800f500:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f502:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f506:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f508:	f107 0308 	add.w	r3, r7, #8
 800f50c:	4619      	mov	r1, r3
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f7ff fece 	bl	800f2b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800f514:	f241 3288 	movw	r2, #5000	; 0x1388
 800f518:	2103      	movs	r1, #3
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 f890 	bl	800f640 <SDMMC_GetCmdResp1>
 800f520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f522:	69fb      	ldr	r3, [r7, #28]
}
 800f524:	4618      	mov	r0, r3
 800f526:	3720      	adds	r7, #32
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b088      	sub	sp, #32
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f53a:	230d      	movs	r3, #13
 800f53c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f53e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f544:	2300      	movs	r3, #0
 800f546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f54c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f54e:	f107 0308 	add.w	r3, r7, #8
 800f552:	4619      	mov	r1, r3
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7ff feab 	bl	800f2b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f55a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f55e:	210d      	movs	r1, #13
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 f86d 	bl	800f640 <SDMMC_GetCmdResp1>
 800f566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f568:	69fb      	ldr	r3, [r7, #28]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3720      	adds	r7, #32
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}

0800f572 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f572:	b580      	push	{r7, lr}
 800f574:	b088      	sub	sp, #32
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
 800f57a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800f580:	2301      	movs	r3, #1
 800f582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f584:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f58a:	2300      	movs	r3, #0
 800f58c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f58e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f592:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f594:	f107 0308 	add.w	r3, r7, #8
 800f598:	4619      	mov	r1, r3
 800f59a:	6878      	ldr	r0, [r7, #4]
 800f59c:	f7ff fe88 	bl	800f2b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f989 	bl	800f8b8 <SDMMC_GetCmdResp3>
 800f5a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5a8:	69fb      	ldr	r3, [r7, #28]
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3720      	adds	r7, #32
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}

0800f5b2 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b088      	sub	sp, #32
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
 800f5ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800f5bc:	683b      	ldr	r3, [r7, #0]
 800f5be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800f5c0:	2306      	movs	r3, #6
 800f5c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f5c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f5c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f5ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f5d4:	f107 0308 	add.w	r3, r7, #8
 800f5d8:	4619      	mov	r1, r3
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f7ff fe68 	bl	800f2b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800f5e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5e4:	2106      	movs	r1, #6
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 f82a 	bl	800f640 <SDMMC_GetCmdResp1>
 800f5ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5ee:	69fb      	ldr	r3, [r7, #28]
}
 800f5f0:	4618      	mov	r0, r3
 800f5f2:	3720      	adds	r7, #32
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}

0800f5f8 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f5f8:	b580      	push	{r7, lr}
 800f5fa:	b088      	sub	sp, #32
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	6078      	str	r0, [r7, #4]
 800f600:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f606:	2308      	movs	r3, #8
 800f608:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f60a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f60e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f610:	2300      	movs	r3, #0
 800f612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f618:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f61a:	f107 0308 	add.w	r3, r7, #8
 800f61e:	4619      	mov	r1, r3
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7ff fe45 	bl	800f2b0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800f626:	f241 3288 	movw	r2, #5000	; 0x1388
 800f62a:	2108      	movs	r1, #8
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 f807 	bl	800f640 <SDMMC_GetCmdResp1>
 800f632:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f634:	69fb      	ldr	r3, [r7, #28]
}
 800f636:	4618      	mov	r0, r3
 800f638:	3720      	adds	r7, #32
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
	...

0800f640 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af00      	add	r7, sp, #0
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	460b      	mov	r3, r1
 800f64a:	607a      	str	r2, [r7, #4]
 800f64c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f64e:	4b70      	ldr	r3, [pc, #448]	; (800f810 <SDMMC_GetCmdResp1+0x1d0>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	4a70      	ldr	r2, [pc, #448]	; (800f814 <SDMMC_GetCmdResp1+0x1d4>)
 800f654:	fba2 2303 	umull	r2, r3, r2, r3
 800f658:	0a5a      	lsrs	r2, r3, #9
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	fb02 f303 	mul.w	r3, r2, r3
 800f660:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f662:	69fb      	ldr	r3, [r7, #28]
 800f664:	1e5a      	subs	r2, r3, #1
 800f666:	61fa      	str	r2, [r7, #28]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d102      	bne.n	800f672 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f66c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f670:	e0c9      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f676:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f678:	69ba      	ldr	r2, [r7, #24]
 800f67a:	4b67      	ldr	r3, [pc, #412]	; (800f818 <SDMMC_GetCmdResp1+0x1d8>)
 800f67c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d0ef      	beq.n	800f662 <SDMMC_GetCmdResp1+0x22>
 800f682:	69bb      	ldr	r3, [r7, #24]
 800f684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d1ea      	bne.n	800f662 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f690:	f003 0304 	and.w	r3, r3, #4
 800f694:	2b00      	cmp	r3, #0
 800f696:	d004      	beq.n	800f6a2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	2204      	movs	r2, #4
 800f69c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f69e:	2304      	movs	r3, #4
 800f6a0:	e0b1      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6a6:	f003 0301 	and.w	r3, r3, #1
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d004      	beq.n	800f6b8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2201      	movs	r2, #1
 800f6b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	e0a6      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	4a58      	ldr	r2, [pc, #352]	; (800f81c <SDMMC_GetCmdResp1+0x1dc>)
 800f6bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f6be:	68f8      	ldr	r0, [r7, #12]
 800f6c0:	f7ff fe20 	bl	800f304 <SDMMC_GetCommandResponse>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	461a      	mov	r2, r3
 800f6c8:	7afb      	ldrb	r3, [r7, #11]
 800f6ca:	4293      	cmp	r3, r2
 800f6cc:	d001      	beq.n	800f6d2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e099      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f6d2:	2100      	movs	r1, #0
 800f6d4:	68f8      	ldr	r0, [r7, #12]
 800f6d6:	f7ff fe22 	bl	800f31e <SDMMC_GetResponse>
 800f6da:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f6dc:	697a      	ldr	r2, [r7, #20]
 800f6de:	4b50      	ldr	r3, [pc, #320]	; (800f820 <SDMMC_GetCmdResp1+0x1e0>)
 800f6e0:	4013      	ands	r3, r2
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d101      	bne.n	800f6ea <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	e08d      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	da02      	bge.n	800f6f6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f6f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f6f4:	e087      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f6f6:	697b      	ldr	r3, [r7, #20]
 800f6f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d001      	beq.n	800f704 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f700:	2340      	movs	r3, #64	; 0x40
 800f702:	e080      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d001      	beq.n	800f712 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f70e:	2380      	movs	r3, #128	; 0x80
 800f710:	e079      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d002      	beq.n	800f722 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f71c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f720:	e071      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f72c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f730:	e069      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d002      	beq.n	800f742 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f73c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f740:	e061      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d002      	beq.n	800f752 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f74c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f750:	e059      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d002      	beq.n	800f762 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f75c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f760:	e051      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d002      	beq.n	800f772 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f76c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f770:	e049      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d002      	beq.n	800f782 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f77c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f780:	e041      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d002      	beq.n	800f792 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f78c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f790:	e039      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d002      	beq.n	800f7a2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f79c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f7a0:	e031      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d002      	beq.n	800f7b2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f7ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f7b0:	e029      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f7b2:	697b      	ldr	r3, [r7, #20]
 800f7b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d002      	beq.n	800f7c2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f7bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f7c0:	e021      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d002      	beq.n	800f7d2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f7cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f7d0:	e019      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f7d2:	697b      	ldr	r3, [r7, #20]
 800f7d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d002      	beq.n	800f7e2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f7dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f7e0:	e011      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d002      	beq.n	800f7f2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f7ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f7f0:	e009      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f7f2:	697b      	ldr	r3, [r7, #20]
 800f7f4:	f003 0308 	and.w	r3, r3, #8
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d002      	beq.n	800f802 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f7fc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f800:	e001      	b.n	800f806 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f806:	4618      	mov	r0, r3
 800f808:	3720      	adds	r7, #32
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}
 800f80e:	bf00      	nop
 800f810:	24000000 	.word	0x24000000
 800f814:	10624dd3 	.word	0x10624dd3
 800f818:	00200045 	.word	0x00200045
 800f81c:	002000c5 	.word	0x002000c5
 800f820:	fdffe008 	.word	0xfdffe008

0800f824 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f824:	b480      	push	{r7}
 800f826:	b085      	sub	sp, #20
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f82c:	4b1f      	ldr	r3, [pc, #124]	; (800f8ac <SDMMC_GetCmdResp2+0x88>)
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	4a1f      	ldr	r2, [pc, #124]	; (800f8b0 <SDMMC_GetCmdResp2+0x8c>)
 800f832:	fba2 2303 	umull	r2, r3, r2, r3
 800f836:	0a5b      	lsrs	r3, r3, #9
 800f838:	f241 3288 	movw	r2, #5000	; 0x1388
 800f83c:	fb02 f303 	mul.w	r3, r2, r3
 800f840:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	1e5a      	subs	r2, r3, #1
 800f846:	60fa      	str	r2, [r7, #12]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d102      	bne.n	800f852 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f84c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f850:	e026      	b.n	800f8a0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f856:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d0ef      	beq.n	800f842 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d1ea      	bne.n	800f842 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f870:	f003 0304 	and.w	r3, r3, #4
 800f874:	2b00      	cmp	r3, #0
 800f876:	d004      	beq.n	800f882 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	2204      	movs	r2, #4
 800f87c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f87e:	2304      	movs	r3, #4
 800f880:	e00e      	b.n	800f8a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f886:	f003 0301 	and.w	r3, r3, #1
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d004      	beq.n	800f898 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	2201      	movs	r2, #1
 800f892:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f894:	2301      	movs	r3, #1
 800f896:	e003      	b.n	800f8a0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a06      	ldr	r2, [pc, #24]	; (800f8b4 <SDMMC_GetCmdResp2+0x90>)
 800f89c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f89e:	2300      	movs	r3, #0
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	3714      	adds	r7, #20
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr
 800f8ac:	24000000 	.word	0x24000000
 800f8b0:	10624dd3 	.word	0x10624dd3
 800f8b4:	002000c5 	.word	0x002000c5

0800f8b8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f8b8:	b480      	push	{r7}
 800f8ba:	b085      	sub	sp, #20
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f8c0:	4b1a      	ldr	r3, [pc, #104]	; (800f92c <SDMMC_GetCmdResp3+0x74>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	4a1a      	ldr	r2, [pc, #104]	; (800f930 <SDMMC_GetCmdResp3+0x78>)
 800f8c6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8ca:	0a5b      	lsrs	r3, r3, #9
 800f8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8d0:	fb02 f303 	mul.w	r3, r2, r3
 800f8d4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	1e5a      	subs	r2, r3, #1
 800f8da:	60fa      	str	r2, [r7, #12]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d102      	bne.n	800f8e6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f8e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f8e4:	e01b      	b.n	800f91e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8ea:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d0ef      	beq.n	800f8d6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d1ea      	bne.n	800f8d6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f904:	f003 0304 	and.w	r3, r3, #4
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d004      	beq.n	800f916 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2204      	movs	r2, #4
 800f910:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f912:	2304      	movs	r3, #4
 800f914:	e003      	b.n	800f91e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a06      	ldr	r2, [pc, #24]	; (800f934 <SDMMC_GetCmdResp3+0x7c>)
 800f91a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f91c:	2300      	movs	r3, #0
}
 800f91e:	4618      	mov	r0, r3
 800f920:	3714      	adds	r7, #20
 800f922:	46bd      	mov	sp, r7
 800f924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f928:	4770      	bx	lr
 800f92a:	bf00      	nop
 800f92c:	24000000 	.word	0x24000000
 800f930:	10624dd3 	.word	0x10624dd3
 800f934:	002000c5 	.word	0x002000c5

0800f938 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f940:	4b11      	ldr	r3, [pc, #68]	; (800f988 <SDMMC_GetCmdError+0x50>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	4a11      	ldr	r2, [pc, #68]	; (800f98c <SDMMC_GetCmdError+0x54>)
 800f946:	fba2 2303 	umull	r2, r3, r2, r3
 800f94a:	0a5b      	lsrs	r3, r3, #9
 800f94c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f950:	fb02 f303 	mul.w	r3, r2, r3
 800f954:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	1e5a      	subs	r2, r3, #1
 800f95a:	60fa      	str	r2, [r7, #12]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d102      	bne.n	800f966 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f964:	e009      	b.n	800f97a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f96a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d0f1      	beq.n	800f956 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	4a06      	ldr	r2, [pc, #24]	; (800f990 <SDMMC_GetCmdError+0x58>)
 800f976:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800f978:	2300      	movs	r3, #0
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3714      	adds	r7, #20
 800f97e:	46bd      	mov	sp, r7
 800f980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f984:	4770      	bx	lr
 800f986:	bf00      	nop
 800f988:	24000000 	.word	0x24000000
 800f98c:	10624dd3 	.word	0x10624dd3
 800f990:	002000c5 	.word	0x002000c5

0800f994 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f994:	b084      	sub	sp, #16
 800f996:	b580      	push	{r7, lr}
 800f998:	b084      	sub	sp, #16
 800f99a:	af00      	add	r7, sp, #0
 800f99c:	6078      	str	r0, [r7, #4]
 800f99e:	f107 001c 	add.w	r0, r7, #28
 800f9a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d120      	bne.n	800f9ee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	68da      	ldr	r2, [r3, #12]
 800f9bc:	4b2a      	ldr	r3, [pc, #168]	; (800fa68 <USB_CoreInit+0xd4>)
 800f9be:	4013      	ands	r3, r2
 800f9c0:	687a      	ldr	r2, [r7, #4]
 800f9c2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	68db      	ldr	r3, [r3, #12]
 800f9c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f9d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d105      	bne.n	800f9e2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	f001 faf8 	bl	8010fd8 <USB_CoreReset>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	73fb      	strb	r3, [r7, #15]
 800f9ec:	e01a      	b.n	800fa24 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	68db      	ldr	r3, [r3, #12]
 800f9f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f001 faec 	bl	8010fd8 <USB_CoreReset>
 800fa00:	4603      	mov	r3, r0
 800fa02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fa04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d106      	bne.n	800fa18 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	639a      	str	r2, [r3, #56]	; 0x38
 800fa16:	e005      	b.n	800fa24 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d116      	bne.n	800fa58 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa2e:	b29a      	uxth	r2, r3
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fa38:	4b0c      	ldr	r3, [pc, #48]	; (800fa6c <USB_CoreInit+0xd8>)
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	687a      	ldr	r2, [r7, #4]
 800fa3e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	689b      	ldr	r3, [r3, #8]
 800fa44:	f043 0206 	orr.w	r2, r3, #6
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	689b      	ldr	r3, [r3, #8]
 800fa50:	f043 0220 	orr.w	r2, r3, #32
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fa58:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	3710      	adds	r7, #16
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fa64:	b004      	add	sp, #16
 800fa66:	4770      	bx	lr
 800fa68:	ffbdffbf 	.word	0xffbdffbf
 800fa6c:	03ee0000 	.word	0x03ee0000

0800fa70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b087      	sub	sp, #28
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	4613      	mov	r3, r2
 800fa7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fa7e:	79fb      	ldrb	r3, [r7, #7]
 800fa80:	2b02      	cmp	r3, #2
 800fa82:	d165      	bne.n	800fb50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	4a41      	ldr	r2, [pc, #260]	; (800fb8c <USB_SetTurnaroundTime+0x11c>)
 800fa88:	4293      	cmp	r3, r2
 800fa8a:	d906      	bls.n	800fa9a <USB_SetTurnaroundTime+0x2a>
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	4a40      	ldr	r2, [pc, #256]	; (800fb90 <USB_SetTurnaroundTime+0x120>)
 800fa90:	4293      	cmp	r3, r2
 800fa92:	d202      	bcs.n	800fa9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fa94:	230f      	movs	r3, #15
 800fa96:	617b      	str	r3, [r7, #20]
 800fa98:	e062      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	4a3c      	ldr	r2, [pc, #240]	; (800fb90 <USB_SetTurnaroundTime+0x120>)
 800fa9e:	4293      	cmp	r3, r2
 800faa0:	d306      	bcc.n	800fab0 <USB_SetTurnaroundTime+0x40>
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	4a3b      	ldr	r2, [pc, #236]	; (800fb94 <USB_SetTurnaroundTime+0x124>)
 800faa6:	4293      	cmp	r3, r2
 800faa8:	d202      	bcs.n	800fab0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800faaa:	230e      	movs	r3, #14
 800faac:	617b      	str	r3, [r7, #20]
 800faae:	e057      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fab0:	68bb      	ldr	r3, [r7, #8]
 800fab2:	4a38      	ldr	r2, [pc, #224]	; (800fb94 <USB_SetTurnaroundTime+0x124>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d306      	bcc.n	800fac6 <USB_SetTurnaroundTime+0x56>
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	4a37      	ldr	r2, [pc, #220]	; (800fb98 <USB_SetTurnaroundTime+0x128>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d202      	bcs.n	800fac6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fac0:	230d      	movs	r3, #13
 800fac2:	617b      	str	r3, [r7, #20]
 800fac4:	e04c      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	4a33      	ldr	r2, [pc, #204]	; (800fb98 <USB_SetTurnaroundTime+0x128>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d306      	bcc.n	800fadc <USB_SetTurnaroundTime+0x6c>
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	4a32      	ldr	r2, [pc, #200]	; (800fb9c <USB_SetTurnaroundTime+0x12c>)
 800fad2:	4293      	cmp	r3, r2
 800fad4:	d802      	bhi.n	800fadc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fad6:	230c      	movs	r3, #12
 800fad8:	617b      	str	r3, [r7, #20]
 800fada:	e041      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	4a2f      	ldr	r2, [pc, #188]	; (800fb9c <USB_SetTurnaroundTime+0x12c>)
 800fae0:	4293      	cmp	r3, r2
 800fae2:	d906      	bls.n	800faf2 <USB_SetTurnaroundTime+0x82>
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	4a2e      	ldr	r2, [pc, #184]	; (800fba0 <USB_SetTurnaroundTime+0x130>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d802      	bhi.n	800faf2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800faec:	230b      	movs	r3, #11
 800faee:	617b      	str	r3, [r7, #20]
 800faf0:	e036      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	4a2a      	ldr	r2, [pc, #168]	; (800fba0 <USB_SetTurnaroundTime+0x130>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d906      	bls.n	800fb08 <USB_SetTurnaroundTime+0x98>
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	4a29      	ldr	r2, [pc, #164]	; (800fba4 <USB_SetTurnaroundTime+0x134>)
 800fafe:	4293      	cmp	r3, r2
 800fb00:	d802      	bhi.n	800fb08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fb02:	230a      	movs	r3, #10
 800fb04:	617b      	str	r3, [r7, #20]
 800fb06:	e02b      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	4a26      	ldr	r2, [pc, #152]	; (800fba4 <USB_SetTurnaroundTime+0x134>)
 800fb0c:	4293      	cmp	r3, r2
 800fb0e:	d906      	bls.n	800fb1e <USB_SetTurnaroundTime+0xae>
 800fb10:	68bb      	ldr	r3, [r7, #8]
 800fb12:	4a25      	ldr	r2, [pc, #148]	; (800fba8 <USB_SetTurnaroundTime+0x138>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d202      	bcs.n	800fb1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fb18:	2309      	movs	r3, #9
 800fb1a:	617b      	str	r3, [r7, #20]
 800fb1c:	e020      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	4a21      	ldr	r2, [pc, #132]	; (800fba8 <USB_SetTurnaroundTime+0x138>)
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d306      	bcc.n	800fb34 <USB_SetTurnaroundTime+0xc4>
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	4a20      	ldr	r2, [pc, #128]	; (800fbac <USB_SetTurnaroundTime+0x13c>)
 800fb2a:	4293      	cmp	r3, r2
 800fb2c:	d802      	bhi.n	800fb34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fb2e:	2308      	movs	r3, #8
 800fb30:	617b      	str	r3, [r7, #20]
 800fb32:	e015      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	4a1d      	ldr	r2, [pc, #116]	; (800fbac <USB_SetTurnaroundTime+0x13c>)
 800fb38:	4293      	cmp	r3, r2
 800fb3a:	d906      	bls.n	800fb4a <USB_SetTurnaroundTime+0xda>
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	4a1c      	ldr	r2, [pc, #112]	; (800fbb0 <USB_SetTurnaroundTime+0x140>)
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d202      	bcs.n	800fb4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fb44:	2307      	movs	r3, #7
 800fb46:	617b      	str	r3, [r7, #20]
 800fb48:	e00a      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fb4a:	2306      	movs	r3, #6
 800fb4c:	617b      	str	r3, [r7, #20]
 800fb4e:	e007      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fb50:	79fb      	ldrb	r3, [r7, #7]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d102      	bne.n	800fb5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fb56:	2309      	movs	r3, #9
 800fb58:	617b      	str	r3, [r7, #20]
 800fb5a:	e001      	b.n	800fb60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fb5c:	2309      	movs	r3, #9
 800fb5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	68db      	ldr	r3, [r3, #12]
 800fb64:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	68da      	ldr	r2, [r3, #12]
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	029b      	lsls	r3, r3, #10
 800fb74:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fb78:	431a      	orrs	r2, r3
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fb7e:	2300      	movs	r3, #0
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	371c      	adds	r7, #28
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr
 800fb8c:	00d8acbf 	.word	0x00d8acbf
 800fb90:	00e4e1c0 	.word	0x00e4e1c0
 800fb94:	00f42400 	.word	0x00f42400
 800fb98:	01067380 	.word	0x01067380
 800fb9c:	011a499f 	.word	0x011a499f
 800fba0:	01312cff 	.word	0x01312cff
 800fba4:	014ca43f 	.word	0x014ca43f
 800fba8:	016e3600 	.word	0x016e3600
 800fbac:	01a6ab1f 	.word	0x01a6ab1f
 800fbb0:	01e84800 	.word	0x01e84800

0800fbb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	f043 0201 	orr.w	r2, r3, #1
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fbc8:	2300      	movs	r3, #0
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr

0800fbd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fbd6:	b480      	push	{r7}
 800fbd8:	b083      	sub	sp, #12
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	689b      	ldr	r3, [r3, #8]
 800fbe2:	f023 0201 	bic.w	r2, r3, #1
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fbea:	2300      	movs	r3, #0
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	370c      	adds	r7, #12
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf6:	4770      	bx	lr

0800fbf8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	460b      	mov	r3, r1
 800fc02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fc04:	2300      	movs	r3, #0
 800fc06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	68db      	ldr	r3, [r3, #12]
 800fc0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fc14:	78fb      	ldrb	r3, [r7, #3]
 800fc16:	2b01      	cmp	r3, #1
 800fc18:	d115      	bne.n	800fc46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	68db      	ldr	r3, [r3, #12]
 800fc1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fc26:	2001      	movs	r0, #1
 800fc28:	f7f3 fb3a 	bl	80032a0 <HAL_Delay>
      ms++;
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f001 f93f 	bl	8010eb6 <USB_GetMode>
 800fc38:	4603      	mov	r3, r0
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	d01e      	beq.n	800fc7c <USB_SetCurrentMode+0x84>
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2b31      	cmp	r3, #49	; 0x31
 800fc42:	d9f0      	bls.n	800fc26 <USB_SetCurrentMode+0x2e>
 800fc44:	e01a      	b.n	800fc7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fc46:	78fb      	ldrb	r3, [r7, #3]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d115      	bne.n	800fc78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fc58:	2001      	movs	r0, #1
 800fc5a:	f7f3 fb21 	bl	80032a0 <HAL_Delay>
      ms++;
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	3301      	adds	r3, #1
 800fc62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fc64:	6878      	ldr	r0, [r7, #4]
 800fc66:	f001 f926 	bl	8010eb6 <USB_GetMode>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d005      	beq.n	800fc7c <USB_SetCurrentMode+0x84>
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2b31      	cmp	r3, #49	; 0x31
 800fc74:	d9f0      	bls.n	800fc58 <USB_SetCurrentMode+0x60>
 800fc76:	e001      	b.n	800fc7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	e005      	b.n	800fc88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2b32      	cmp	r3, #50	; 0x32
 800fc80:	d101      	bne.n	800fc86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fc82:	2301      	movs	r3, #1
 800fc84:	e000      	b.n	800fc88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fc86:	2300      	movs	r3, #0
}
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3710      	adds	r7, #16
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}

0800fc90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fc90:	b084      	sub	sp, #16
 800fc92:	b580      	push	{r7, lr}
 800fc94:	b086      	sub	sp, #24
 800fc96:	af00      	add	r7, sp, #0
 800fc98:	6078      	str	r0, [r7, #4]
 800fc9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fc9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fca2:	2300      	movs	r3, #0
 800fca4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fcaa:	2300      	movs	r3, #0
 800fcac:	613b      	str	r3, [r7, #16]
 800fcae:	e009      	b.n	800fcc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	3340      	adds	r3, #64	; 0x40
 800fcb6:	009b      	lsls	r3, r3, #2
 800fcb8:	4413      	add	r3, r2
 800fcba:	2200      	movs	r2, #0
 800fcbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	3301      	adds	r3, #1
 800fcc2:	613b      	str	r3, [r7, #16]
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	2b0e      	cmp	r3, #14
 800fcc8:	d9f2      	bls.n	800fcb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d11c      	bne.n	800fd0a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcd6:	685b      	ldr	r3, [r3, #4]
 800fcd8:	68fa      	ldr	r2, [r7, #12]
 800fcda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcde:	f043 0302 	orr.w	r3, r3, #2
 800fce2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fce8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	601a      	str	r2, [r3, #0]
 800fd08:	e005      	b.n	800fd16 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd0e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	2300      	movs	r3, #0
 800fd20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd28:	4619      	mov	r1, r3
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd30:	461a      	mov	r2, r3
 800fd32:	680b      	ldr	r3, [r1, #0]
 800fd34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d10c      	bne.n	800fd56 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fd3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d104      	bne.n	800fd4c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fd42:	2100      	movs	r1, #0
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 f965 	bl	8010014 <USB_SetDevSpeed>
 800fd4a:	e008      	b.n	800fd5e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fd4c:	2101      	movs	r1, #1
 800fd4e:	6878      	ldr	r0, [r7, #4]
 800fd50:	f000 f960 	bl	8010014 <USB_SetDevSpeed>
 800fd54:	e003      	b.n	800fd5e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fd56:	2103      	movs	r1, #3
 800fd58:	6878      	ldr	r0, [r7, #4]
 800fd5a:	f000 f95b 	bl	8010014 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fd5e:	2110      	movs	r1, #16
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 f8f3 	bl	800ff4c <USB_FlushTxFifo>
 800fd66:	4603      	mov	r3, r0
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d001      	beq.n	800fd70 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f000 f91f 	bl	800ffb4 <USB_FlushRxFifo>
 800fd76:	4603      	mov	r3, r0
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800fd7c:	2301      	movs	r3, #1
 800fd7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd86:	461a      	mov	r2, r3
 800fd88:	2300      	movs	r3, #0
 800fd8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd92:	461a      	mov	r2, r3
 800fd94:	2300      	movs	r3, #0
 800fd96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd9e:	461a      	mov	r2, r3
 800fda0:	2300      	movs	r3, #0
 800fda2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fda4:	2300      	movs	r3, #0
 800fda6:	613b      	str	r3, [r7, #16]
 800fda8:	e043      	b.n	800fe32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	015a      	lsls	r2, r3, #5
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdc0:	d118      	bne.n	800fdf4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800fdc2:	693b      	ldr	r3, [r7, #16]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d10a      	bne.n	800fdde <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	015a      	lsls	r2, r3, #5
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	4413      	add	r3, r2
 800fdd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fdda:	6013      	str	r3, [r2, #0]
 800fddc:	e013      	b.n	800fe06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fdde:	693b      	ldr	r3, [r7, #16]
 800fde0:	015a      	lsls	r2, r3, #5
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	4413      	add	r3, r2
 800fde6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdea:	461a      	mov	r2, r3
 800fdec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fdf0:	6013      	str	r3, [r2, #0]
 800fdf2:	e008      	b.n	800fe06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fdf4:	693b      	ldr	r3, [r7, #16]
 800fdf6:	015a      	lsls	r2, r3, #5
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	4413      	add	r3, r2
 800fdfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe00:	461a      	mov	r2, r3
 800fe02:	2300      	movs	r3, #0
 800fe04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fe06:	693b      	ldr	r3, [r7, #16]
 800fe08:	015a      	lsls	r2, r3, #5
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	4413      	add	r3, r2
 800fe0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe12:	461a      	mov	r2, r3
 800fe14:	2300      	movs	r3, #0
 800fe16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	015a      	lsls	r2, r3, #5
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	4413      	add	r3, r2
 800fe20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe24:	461a      	mov	r2, r3
 800fe26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fe2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	613b      	str	r3, [r7, #16]
 800fe32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe34:	693a      	ldr	r2, [r7, #16]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d3b7      	bcc.n	800fdaa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	613b      	str	r3, [r7, #16]
 800fe3e:	e043      	b.n	800fec8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	015a      	lsls	r2, r3, #5
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	4413      	add	r3, r2
 800fe48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe56:	d118      	bne.n	800fe8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10a      	bne.n	800fe74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	015a      	lsls	r2, r3, #5
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	4413      	add	r3, r2
 800fe66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe6a:	461a      	mov	r2, r3
 800fe6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fe70:	6013      	str	r3, [r2, #0]
 800fe72:	e013      	b.n	800fe9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	015a      	lsls	r2, r3, #5
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	4413      	add	r3, r2
 800fe7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe80:	461a      	mov	r2, r3
 800fe82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fe86:	6013      	str	r3, [r2, #0]
 800fe88:	e008      	b.n	800fe9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	015a      	lsls	r2, r3, #5
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	4413      	add	r3, r2
 800fe92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe96:	461a      	mov	r2, r3
 800fe98:	2300      	movs	r3, #0
 800fe9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	015a      	lsls	r2, r3, #5
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	4413      	add	r3, r2
 800fea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fea8:	461a      	mov	r2, r3
 800feaa:	2300      	movs	r3, #0
 800feac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	015a      	lsls	r2, r3, #5
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	4413      	add	r3, r2
 800feb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feba:	461a      	mov	r2, r3
 800febc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fec0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	3301      	adds	r3, #1
 800fec6:	613b      	str	r3, [r7, #16]
 800fec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feca:	693a      	ldr	r2, [r7, #16]
 800fecc:	429a      	cmp	r2, r3
 800fece:	d3b7      	bcc.n	800fe40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fed6:	691b      	ldr	r3, [r3, #16]
 800fed8:	68fa      	ldr	r2, [r7, #12]
 800feda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fee2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	2200      	movs	r2, #0
 800fee8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fef0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d105      	bne.n	800ff04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	699b      	ldr	r3, [r3, #24]
 800fefc:	f043 0210 	orr.w	r2, r3, #16
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	699a      	ldr	r2, [r3, #24]
 800ff08:	4b0e      	ldr	r3, [pc, #56]	; (800ff44 <USB_DevInit+0x2b4>)
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	687a      	ldr	r2, [r7, #4]
 800ff0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ff10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d005      	beq.n	800ff22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	699b      	ldr	r3, [r3, #24]
 800ff1a:	f043 0208 	orr.w	r2, r3, #8
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ff22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff24:	2b01      	cmp	r3, #1
 800ff26:	d105      	bne.n	800ff34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	699a      	ldr	r2, [r3, #24]
 800ff2c:	4b06      	ldr	r3, [pc, #24]	; (800ff48 <USB_DevInit+0x2b8>)
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ff34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3718      	adds	r7, #24
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff40:	b004      	add	sp, #16
 800ff42:	4770      	bx	lr
 800ff44:	803c3800 	.word	0x803c3800
 800ff48:	40000004 	.word	0x40000004

0800ff4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ff56:	2300      	movs	r3, #0
 800ff58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	3301      	adds	r3, #1
 800ff5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	4a13      	ldr	r2, [pc, #76]	; (800ffb0 <USB_FlushTxFifo+0x64>)
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d901      	bls.n	800ff6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ff68:	2303      	movs	r3, #3
 800ff6a:	e01b      	b.n	800ffa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	691b      	ldr	r3, [r3, #16]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	daf2      	bge.n	800ff5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800ff74:	2300      	movs	r3, #0
 800ff76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	019b      	lsls	r3, r3, #6
 800ff7c:	f043 0220 	orr.w	r2, r3, #32
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	3301      	adds	r3, #1
 800ff88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	4a08      	ldr	r2, [pc, #32]	; (800ffb0 <USB_FlushTxFifo+0x64>)
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d901      	bls.n	800ff96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ff92:	2303      	movs	r3, #3
 800ff94:	e006      	b.n	800ffa4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	691b      	ldr	r3, [r3, #16]
 800ff9a:	f003 0320 	and.w	r3, r3, #32
 800ff9e:	2b20      	cmp	r3, #32
 800ffa0:	d0f0      	beq.n	800ff84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ffa2:	2300      	movs	r3, #0
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3714      	adds	r7, #20
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffae:	4770      	bx	lr
 800ffb0:	00030d40 	.word	0x00030d40

0800ffb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b085      	sub	sp, #20
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ffc6:	68fb      	ldr	r3, [r7, #12]
 800ffc8:	4a11      	ldr	r2, [pc, #68]	; (8010010 <USB_FlushRxFifo+0x5c>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d901      	bls.n	800ffd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ffce:	2303      	movs	r3, #3
 800ffd0:	e018      	b.n	8010004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	691b      	ldr	r3, [r3, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	daf2      	bge.n	800ffc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	2210      	movs	r2, #16
 800ffe2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	3301      	adds	r3, #1
 800ffe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	4a08      	ldr	r2, [pc, #32]	; (8010010 <USB_FlushRxFifo+0x5c>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d901      	bls.n	800fff6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fff2:	2303      	movs	r3, #3
 800fff4:	e006      	b.n	8010004 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	691b      	ldr	r3, [r3, #16]
 800fffa:	f003 0310 	and.w	r3, r3, #16
 800fffe:	2b10      	cmp	r3, #16
 8010000:	d0f0      	beq.n	800ffe4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010002:	2300      	movs	r3, #0
}
 8010004:	4618      	mov	r0, r3
 8010006:	3714      	adds	r7, #20
 8010008:	46bd      	mov	sp, r7
 801000a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000e:	4770      	bx	lr
 8010010:	00030d40 	.word	0x00030d40

08010014 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010014:	b480      	push	{r7}
 8010016:	b085      	sub	sp, #20
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	460b      	mov	r3, r1
 801001e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801002a:	681a      	ldr	r2, [r3, #0]
 801002c:	78fb      	ldrb	r3, [r7, #3]
 801002e:	68f9      	ldr	r1, [r7, #12]
 8010030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010034:	4313      	orrs	r3, r2
 8010036:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010038:	2300      	movs	r3, #0
}
 801003a:	4618      	mov	r0, r3
 801003c:	3714      	adds	r7, #20
 801003e:	46bd      	mov	sp, r7
 8010040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010044:	4770      	bx	lr

08010046 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010046:	b480      	push	{r7}
 8010048:	b087      	sub	sp, #28
 801004a:	af00      	add	r7, sp, #0
 801004c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010058:	689b      	ldr	r3, [r3, #8]
 801005a:	f003 0306 	and.w	r3, r3, #6
 801005e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d102      	bne.n	801006c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010066:	2300      	movs	r3, #0
 8010068:	75fb      	strb	r3, [r7, #23]
 801006a:	e00a      	b.n	8010082 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2b02      	cmp	r3, #2
 8010070:	d002      	beq.n	8010078 <USB_GetDevSpeed+0x32>
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2b06      	cmp	r3, #6
 8010076:	d102      	bne.n	801007e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010078:	2302      	movs	r3, #2
 801007a:	75fb      	strb	r3, [r7, #23]
 801007c:	e001      	b.n	8010082 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801007e:	230f      	movs	r3, #15
 8010080:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010082:	7dfb      	ldrb	r3, [r7, #23]
}
 8010084:	4618      	mov	r0, r3
 8010086:	371c      	adds	r7, #28
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010090:	b480      	push	{r7}
 8010092:	b085      	sub	sp, #20
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	785b      	ldrb	r3, [r3, #1]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d139      	bne.n	8010120 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100b2:	69da      	ldr	r2, [r3, #28]
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	f003 030f 	and.w	r3, r3, #15
 80100bc:	2101      	movs	r1, #1
 80100be:	fa01 f303 	lsl.w	r3, r1, r3
 80100c2:	b29b      	uxth	r3, r3
 80100c4:	68f9      	ldr	r1, [r7, #12]
 80100c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100ca:	4313      	orrs	r3, r2
 80100cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	015a      	lsls	r2, r3, #5
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	4413      	add	r3, r2
 80100d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d153      	bne.n	801018c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	015a      	lsls	r2, r3, #5
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	4413      	add	r3, r2
 80100ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100f0:	681a      	ldr	r2, [r3, #0]
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	689b      	ldr	r3, [r3, #8]
 80100f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	791b      	ldrb	r3, [r3, #4]
 80100fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010100:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	059b      	lsls	r3, r3, #22
 8010106:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010108:	431a      	orrs	r2, r3
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	0159      	lsls	r1, r3, #5
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	440b      	add	r3, r1
 8010112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010116:	4619      	mov	r1, r3
 8010118:	4b20      	ldr	r3, [pc, #128]	; (801019c <USB_ActivateEndpoint+0x10c>)
 801011a:	4313      	orrs	r3, r2
 801011c:	600b      	str	r3, [r1, #0]
 801011e:	e035      	b.n	801018c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010126:	69da      	ldr	r2, [r3, #28]
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	f003 030f 	and.w	r3, r3, #15
 8010130:	2101      	movs	r1, #1
 8010132:	fa01 f303 	lsl.w	r3, r1, r3
 8010136:	041b      	lsls	r3, r3, #16
 8010138:	68f9      	ldr	r1, [r7, #12]
 801013a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801013e:	4313      	orrs	r3, r2
 8010140:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010142:	68bb      	ldr	r3, [r7, #8]
 8010144:	015a      	lsls	r2, r3, #5
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	4413      	add	r3, r2
 801014a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010154:	2b00      	cmp	r3, #0
 8010156:	d119      	bne.n	801018c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	015a      	lsls	r2, r3, #5
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	4413      	add	r3, r2
 8010160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	689b      	ldr	r3, [r3, #8]
 801016a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	791b      	ldrb	r3, [r3, #4]
 8010172:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010174:	430b      	orrs	r3, r1
 8010176:	431a      	orrs	r2, r3
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	0159      	lsls	r1, r3, #5
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	440b      	add	r3, r1
 8010180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010184:	4619      	mov	r1, r3
 8010186:	4b05      	ldr	r3, [pc, #20]	; (801019c <USB_ActivateEndpoint+0x10c>)
 8010188:	4313      	orrs	r3, r2
 801018a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801018c:	2300      	movs	r3, #0
}
 801018e:	4618      	mov	r0, r3
 8010190:	3714      	adds	r7, #20
 8010192:	46bd      	mov	sp, r7
 8010194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010198:	4770      	bx	lr
 801019a:	bf00      	nop
 801019c:	10008000 	.word	0x10008000

080101a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80101a0:	b480      	push	{r7}
 80101a2:	b085      	sub	sp, #20
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
 80101a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	785b      	ldrb	r3, [r3, #1]
 80101b8:	2b01      	cmp	r3, #1
 80101ba:	d161      	bne.n	8010280 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	015a      	lsls	r2, r3, #5
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	4413      	add	r3, r2
 80101c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101d2:	d11f      	bne.n	8010214 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	015a      	lsls	r2, r3, #5
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	4413      	add	r3, r2
 80101dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	68ba      	ldr	r2, [r7, #8]
 80101e4:	0151      	lsls	r1, r2, #5
 80101e6:	68fa      	ldr	r2, [r7, #12]
 80101e8:	440a      	add	r2, r1
 80101ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80101f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80101f4:	68bb      	ldr	r3, [r7, #8]
 80101f6:	015a      	lsls	r2, r3, #5
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	4413      	add	r3, r2
 80101fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	68ba      	ldr	r2, [r7, #8]
 8010204:	0151      	lsls	r1, r2, #5
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	440a      	add	r2, r1
 801020a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801020e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010212:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801021a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801021c:	683b      	ldr	r3, [r7, #0]
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	f003 030f 	and.w	r3, r3, #15
 8010224:	2101      	movs	r1, #1
 8010226:	fa01 f303 	lsl.w	r3, r1, r3
 801022a:	b29b      	uxth	r3, r3
 801022c:	43db      	mvns	r3, r3
 801022e:	68f9      	ldr	r1, [r7, #12]
 8010230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010234:	4013      	ands	r3, r2
 8010236:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801023e:	69da      	ldr	r2, [r3, #28]
 8010240:	683b      	ldr	r3, [r7, #0]
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	f003 030f 	and.w	r3, r3, #15
 8010248:	2101      	movs	r1, #1
 801024a:	fa01 f303 	lsl.w	r3, r1, r3
 801024e:	b29b      	uxth	r3, r3
 8010250:	43db      	mvns	r3, r3
 8010252:	68f9      	ldr	r1, [r7, #12]
 8010254:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010258:	4013      	ands	r3, r2
 801025a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	015a      	lsls	r2, r3, #5
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	4413      	add	r3, r2
 8010264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	0159      	lsls	r1, r3, #5
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	440b      	add	r3, r1
 8010272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010276:	4619      	mov	r1, r3
 8010278:	4b35      	ldr	r3, [pc, #212]	; (8010350 <USB_DeactivateEndpoint+0x1b0>)
 801027a:	4013      	ands	r3, r2
 801027c:	600b      	str	r3, [r1, #0]
 801027e:	e060      	b.n	8010342 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	015a      	lsls	r2, r3, #5
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	4413      	add	r3, r2
 8010288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010296:	d11f      	bne.n	80102d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	015a      	lsls	r2, r3, #5
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	4413      	add	r3, r2
 80102a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	68ba      	ldr	r2, [r7, #8]
 80102a8:	0151      	lsls	r1, r2, #5
 80102aa:	68fa      	ldr	r2, [r7, #12]
 80102ac:	440a      	add	r2, r1
 80102ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80102b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	015a      	lsls	r2, r3, #5
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	4413      	add	r3, r2
 80102c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	68ba      	ldr	r2, [r7, #8]
 80102c8:	0151      	lsls	r1, r2, #5
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	440a      	add	r2, r1
 80102ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80102d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	f003 030f 	and.w	r3, r3, #15
 80102e8:	2101      	movs	r1, #1
 80102ea:	fa01 f303 	lsl.w	r3, r1, r3
 80102ee:	041b      	lsls	r3, r3, #16
 80102f0:	43db      	mvns	r3, r3
 80102f2:	68f9      	ldr	r1, [r7, #12]
 80102f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102f8:	4013      	ands	r3, r2
 80102fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010302:	69da      	ldr	r2, [r3, #28]
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	f003 030f 	and.w	r3, r3, #15
 801030c:	2101      	movs	r1, #1
 801030e:	fa01 f303 	lsl.w	r3, r1, r3
 8010312:	041b      	lsls	r3, r3, #16
 8010314:	43db      	mvns	r3, r3
 8010316:	68f9      	ldr	r1, [r7, #12]
 8010318:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801031c:	4013      	ands	r3, r2
 801031e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010320:	68bb      	ldr	r3, [r7, #8]
 8010322:	015a      	lsls	r2, r3, #5
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	4413      	add	r3, r2
 8010328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	68bb      	ldr	r3, [r7, #8]
 8010330:	0159      	lsls	r1, r3, #5
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	440b      	add	r3, r1
 8010336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801033a:	4619      	mov	r1, r3
 801033c:	4b05      	ldr	r3, [pc, #20]	; (8010354 <USB_DeactivateEndpoint+0x1b4>)
 801033e:	4013      	ands	r3, r2
 8010340:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3714      	adds	r7, #20
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr
 8010350:	ec337800 	.word	0xec337800
 8010354:	eff37800 	.word	0xeff37800

08010358 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010358:	b580      	push	{r7, lr}
 801035a:	b08a      	sub	sp, #40	; 0x28
 801035c:	af02      	add	r7, sp, #8
 801035e:	60f8      	str	r0, [r7, #12]
 8010360:	60b9      	str	r1, [r7, #8]
 8010362:	4613      	mov	r3, r2
 8010364:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	785b      	ldrb	r3, [r3, #1]
 8010374:	2b01      	cmp	r3, #1
 8010376:	f040 8181 	bne.w	801067c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	691b      	ldr	r3, [r3, #16]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d132      	bne.n	80103e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010382:	69bb      	ldr	r3, [r7, #24]
 8010384:	015a      	lsls	r2, r3, #5
 8010386:	69fb      	ldr	r3, [r7, #28]
 8010388:	4413      	add	r3, r2
 801038a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801038e:	691a      	ldr	r2, [r3, #16]
 8010390:	69bb      	ldr	r3, [r7, #24]
 8010392:	0159      	lsls	r1, r3, #5
 8010394:	69fb      	ldr	r3, [r7, #28]
 8010396:	440b      	add	r3, r1
 8010398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801039c:	4619      	mov	r1, r3
 801039e:	4ba5      	ldr	r3, [pc, #660]	; (8010634 <USB_EPStartXfer+0x2dc>)
 80103a0:	4013      	ands	r3, r2
 80103a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80103a4:	69bb      	ldr	r3, [r7, #24]
 80103a6:	015a      	lsls	r2, r3, #5
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	4413      	add	r3, r2
 80103ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103b0:	691b      	ldr	r3, [r3, #16]
 80103b2:	69ba      	ldr	r2, [r7, #24]
 80103b4:	0151      	lsls	r1, r2, #5
 80103b6:	69fa      	ldr	r2, [r7, #28]
 80103b8:	440a      	add	r2, r1
 80103ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103c4:	69bb      	ldr	r3, [r7, #24]
 80103c6:	015a      	lsls	r2, r3, #5
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	4413      	add	r3, r2
 80103cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103d0:	691a      	ldr	r2, [r3, #16]
 80103d2:	69bb      	ldr	r3, [r7, #24]
 80103d4:	0159      	lsls	r1, r3, #5
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	440b      	add	r3, r1
 80103da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103de:	4619      	mov	r1, r3
 80103e0:	4b95      	ldr	r3, [pc, #596]	; (8010638 <USB_EPStartXfer+0x2e0>)
 80103e2:	4013      	ands	r3, r2
 80103e4:	610b      	str	r3, [r1, #16]
 80103e6:	e092      	b.n	801050e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	015a      	lsls	r2, r3, #5
 80103ec:	69fb      	ldr	r3, [r7, #28]
 80103ee:	4413      	add	r3, r2
 80103f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103f4:	691a      	ldr	r2, [r3, #16]
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	0159      	lsls	r1, r3, #5
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	440b      	add	r3, r1
 80103fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010402:	4619      	mov	r1, r3
 8010404:	4b8c      	ldr	r3, [pc, #560]	; (8010638 <USB_EPStartXfer+0x2e0>)
 8010406:	4013      	ands	r3, r2
 8010408:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	015a      	lsls	r2, r3, #5
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	4413      	add	r3, r2
 8010412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010416:	691a      	ldr	r2, [r3, #16]
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	0159      	lsls	r1, r3, #5
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	440b      	add	r3, r1
 8010420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010424:	4619      	mov	r1, r3
 8010426:	4b83      	ldr	r3, [pc, #524]	; (8010634 <USB_EPStartXfer+0x2dc>)
 8010428:	4013      	ands	r3, r2
 801042a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d11a      	bne.n	8010468 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010432:	68bb      	ldr	r3, [r7, #8]
 8010434:	691a      	ldr	r2, [r3, #16]
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	689b      	ldr	r3, [r3, #8]
 801043a:	429a      	cmp	r2, r3
 801043c:	d903      	bls.n	8010446 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	689a      	ldr	r2, [r3, #8]
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	015a      	lsls	r2, r3, #5
 801044a:	69fb      	ldr	r3, [r7, #28]
 801044c:	4413      	add	r3, r2
 801044e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010452:	691b      	ldr	r3, [r3, #16]
 8010454:	69ba      	ldr	r2, [r7, #24]
 8010456:	0151      	lsls	r1, r2, #5
 8010458:	69fa      	ldr	r2, [r7, #28]
 801045a:	440a      	add	r2, r1
 801045c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010460:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010464:	6113      	str	r3, [r2, #16]
 8010466:	e01b      	b.n	80104a0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010468:	69bb      	ldr	r3, [r7, #24]
 801046a:	015a      	lsls	r2, r3, #5
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	4413      	add	r3, r2
 8010470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010474:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	6919      	ldr	r1, [r3, #16]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	689b      	ldr	r3, [r3, #8]
 801047e:	440b      	add	r3, r1
 8010480:	1e59      	subs	r1, r3, #1
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	689b      	ldr	r3, [r3, #8]
 8010486:	fbb1 f3f3 	udiv	r3, r1, r3
 801048a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801048c:	4b6b      	ldr	r3, [pc, #428]	; (801063c <USB_EPStartXfer+0x2e4>)
 801048e:	400b      	ands	r3, r1
 8010490:	69b9      	ldr	r1, [r7, #24]
 8010492:	0148      	lsls	r0, r1, #5
 8010494:	69f9      	ldr	r1, [r7, #28]
 8010496:	4401      	add	r1, r0
 8010498:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801049c:	4313      	orrs	r3, r2
 801049e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80104a0:	69bb      	ldr	r3, [r7, #24]
 80104a2:	015a      	lsls	r2, r3, #5
 80104a4:	69fb      	ldr	r3, [r7, #28]
 80104a6:	4413      	add	r3, r2
 80104a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104ac:	691a      	ldr	r2, [r3, #16]
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	691b      	ldr	r3, [r3, #16]
 80104b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104b6:	69b9      	ldr	r1, [r7, #24]
 80104b8:	0148      	lsls	r0, r1, #5
 80104ba:	69f9      	ldr	r1, [r7, #28]
 80104bc:	4401      	add	r1, r0
 80104be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80104c2:	4313      	orrs	r3, r2
 80104c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	791b      	ldrb	r3, [r3, #4]
 80104ca:	2b01      	cmp	r3, #1
 80104cc:	d11f      	bne.n	801050e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80104ce:	69bb      	ldr	r3, [r7, #24]
 80104d0:	015a      	lsls	r2, r3, #5
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	4413      	add	r3, r2
 80104d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104da:	691b      	ldr	r3, [r3, #16]
 80104dc:	69ba      	ldr	r2, [r7, #24]
 80104de:	0151      	lsls	r1, r2, #5
 80104e0:	69fa      	ldr	r2, [r7, #28]
 80104e2:	440a      	add	r2, r1
 80104e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80104ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	015a      	lsls	r2, r3, #5
 80104f2:	69fb      	ldr	r3, [r7, #28]
 80104f4:	4413      	add	r3, r2
 80104f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104fa:	691b      	ldr	r3, [r3, #16]
 80104fc:	69ba      	ldr	r2, [r7, #24]
 80104fe:	0151      	lsls	r1, r2, #5
 8010500:	69fa      	ldr	r2, [r7, #28]
 8010502:	440a      	add	r2, r1
 8010504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010508:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801050c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801050e:	79fb      	ldrb	r3, [r7, #7]
 8010510:	2b01      	cmp	r3, #1
 8010512:	d14b      	bne.n	80105ac <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	69db      	ldr	r3, [r3, #28]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d009      	beq.n	8010530 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801051c:	69bb      	ldr	r3, [r7, #24]
 801051e:	015a      	lsls	r2, r3, #5
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	4413      	add	r3, r2
 8010524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010528:	461a      	mov	r2, r3
 801052a:	68bb      	ldr	r3, [r7, #8]
 801052c:	69db      	ldr	r3, [r3, #28]
 801052e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	791b      	ldrb	r3, [r3, #4]
 8010534:	2b01      	cmp	r3, #1
 8010536:	d128      	bne.n	801058a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801053e:	689b      	ldr	r3, [r3, #8]
 8010540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010544:	2b00      	cmp	r3, #0
 8010546:	d110      	bne.n	801056a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010548:	69bb      	ldr	r3, [r7, #24]
 801054a:	015a      	lsls	r2, r3, #5
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	4413      	add	r3, r2
 8010550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	69ba      	ldr	r2, [r7, #24]
 8010558:	0151      	lsls	r1, r2, #5
 801055a:	69fa      	ldr	r2, [r7, #28]
 801055c:	440a      	add	r2, r1
 801055e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010562:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010566:	6013      	str	r3, [r2, #0]
 8010568:	e00f      	b.n	801058a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801056a:	69bb      	ldr	r3, [r7, #24]
 801056c:	015a      	lsls	r2, r3, #5
 801056e:	69fb      	ldr	r3, [r7, #28]
 8010570:	4413      	add	r3, r2
 8010572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	69ba      	ldr	r2, [r7, #24]
 801057a:	0151      	lsls	r1, r2, #5
 801057c:	69fa      	ldr	r2, [r7, #28]
 801057e:	440a      	add	r2, r1
 8010580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010588:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	015a      	lsls	r2, r3, #5
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	4413      	add	r3, r2
 8010592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	69ba      	ldr	r2, [r7, #24]
 801059a:	0151      	lsls	r1, r2, #5
 801059c:	69fa      	ldr	r2, [r7, #28]
 801059e:	440a      	add	r2, r1
 80105a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105a8:	6013      	str	r3, [r2, #0]
 80105aa:	e16a      	b.n	8010882 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80105ac:	69bb      	ldr	r3, [r7, #24]
 80105ae:	015a      	lsls	r2, r3, #5
 80105b0:	69fb      	ldr	r3, [r7, #28]
 80105b2:	4413      	add	r3, r2
 80105b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	69ba      	ldr	r2, [r7, #24]
 80105bc:	0151      	lsls	r1, r2, #5
 80105be:	69fa      	ldr	r2, [r7, #28]
 80105c0:	440a      	add	r2, r1
 80105c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	791b      	ldrb	r3, [r3, #4]
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d015      	beq.n	8010600 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	691b      	ldr	r3, [r3, #16]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	f000 8152 	beq.w	8010882 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80105de:	69fb      	ldr	r3, [r7, #28]
 80105e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	781b      	ldrb	r3, [r3, #0]
 80105ea:	f003 030f 	and.w	r3, r3, #15
 80105ee:	2101      	movs	r1, #1
 80105f0:	fa01 f303 	lsl.w	r3, r1, r3
 80105f4:	69f9      	ldr	r1, [r7, #28]
 80105f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105fa:	4313      	orrs	r3, r2
 80105fc:	634b      	str	r3, [r1, #52]	; 0x34
 80105fe:	e140      	b.n	8010882 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010600:	69fb      	ldr	r3, [r7, #28]
 8010602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010606:	689b      	ldr	r3, [r3, #8]
 8010608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801060c:	2b00      	cmp	r3, #0
 801060e:	d117      	bne.n	8010640 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010610:	69bb      	ldr	r3, [r7, #24]
 8010612:	015a      	lsls	r2, r3, #5
 8010614:	69fb      	ldr	r3, [r7, #28]
 8010616:	4413      	add	r3, r2
 8010618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	69ba      	ldr	r2, [r7, #24]
 8010620:	0151      	lsls	r1, r2, #5
 8010622:	69fa      	ldr	r2, [r7, #28]
 8010624:	440a      	add	r2, r1
 8010626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801062a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801062e:	6013      	str	r3, [r2, #0]
 8010630:	e016      	b.n	8010660 <USB_EPStartXfer+0x308>
 8010632:	bf00      	nop
 8010634:	e007ffff 	.word	0xe007ffff
 8010638:	fff80000 	.word	0xfff80000
 801063c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010640:	69bb      	ldr	r3, [r7, #24]
 8010642:	015a      	lsls	r2, r3, #5
 8010644:	69fb      	ldr	r3, [r7, #28]
 8010646:	4413      	add	r3, r2
 8010648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	69ba      	ldr	r2, [r7, #24]
 8010650:	0151      	lsls	r1, r2, #5
 8010652:	69fa      	ldr	r2, [r7, #28]
 8010654:	440a      	add	r2, r1
 8010656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801065e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010660:	68bb      	ldr	r3, [r7, #8]
 8010662:	68d9      	ldr	r1, [r3, #12]
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	781a      	ldrb	r2, [r3, #0]
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	691b      	ldr	r3, [r3, #16]
 801066c:	b298      	uxth	r0, r3
 801066e:	79fb      	ldrb	r3, [r7, #7]
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	4603      	mov	r3, r0
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	f000 f9b9 	bl	80109ec <USB_WritePacket>
 801067a:	e102      	b.n	8010882 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	015a      	lsls	r2, r3, #5
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	4413      	add	r3, r2
 8010684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010688:	691a      	ldr	r2, [r3, #16]
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	0159      	lsls	r1, r3, #5
 801068e:	69fb      	ldr	r3, [r7, #28]
 8010690:	440b      	add	r3, r1
 8010692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010696:	4619      	mov	r1, r3
 8010698:	4b7c      	ldr	r3, [pc, #496]	; (801088c <USB_EPStartXfer+0x534>)
 801069a:	4013      	ands	r3, r2
 801069c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	015a      	lsls	r2, r3, #5
 80106a2:	69fb      	ldr	r3, [r7, #28]
 80106a4:	4413      	add	r3, r2
 80106a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106aa:	691a      	ldr	r2, [r3, #16]
 80106ac:	69bb      	ldr	r3, [r7, #24]
 80106ae:	0159      	lsls	r1, r3, #5
 80106b0:	69fb      	ldr	r3, [r7, #28]
 80106b2:	440b      	add	r3, r1
 80106b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106b8:	4619      	mov	r1, r3
 80106ba:	4b75      	ldr	r3, [pc, #468]	; (8010890 <USB_EPStartXfer+0x538>)
 80106bc:	4013      	ands	r3, r2
 80106be:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80106c0:	69bb      	ldr	r3, [r7, #24]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d12f      	bne.n	8010726 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	691b      	ldr	r3, [r3, #16]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d003      	beq.n	80106d6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	689a      	ldr	r2, [r3, #8]
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	689a      	ldr	r2, [r3, #8]
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80106de:	69bb      	ldr	r3, [r7, #24]
 80106e0:	015a      	lsls	r2, r3, #5
 80106e2:	69fb      	ldr	r3, [r7, #28]
 80106e4:	4413      	add	r3, r2
 80106e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106ea:	691a      	ldr	r2, [r3, #16]
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	6a1b      	ldr	r3, [r3, #32]
 80106f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106f4:	69b9      	ldr	r1, [r7, #24]
 80106f6:	0148      	lsls	r0, r1, #5
 80106f8:	69f9      	ldr	r1, [r7, #28]
 80106fa:	4401      	add	r1, r0
 80106fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010700:	4313      	orrs	r3, r2
 8010702:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	015a      	lsls	r2, r3, #5
 8010708:	69fb      	ldr	r3, [r7, #28]
 801070a:	4413      	add	r3, r2
 801070c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010710:	691b      	ldr	r3, [r3, #16]
 8010712:	69ba      	ldr	r2, [r7, #24]
 8010714:	0151      	lsls	r1, r2, #5
 8010716:	69fa      	ldr	r2, [r7, #28]
 8010718:	440a      	add	r2, r1
 801071a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801071e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010722:	6113      	str	r3, [r2, #16]
 8010724:	e05f      	b.n	80107e6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8010726:	68bb      	ldr	r3, [r7, #8]
 8010728:	691b      	ldr	r3, [r3, #16]
 801072a:	2b00      	cmp	r3, #0
 801072c:	d123      	bne.n	8010776 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	015a      	lsls	r2, r3, #5
 8010732:	69fb      	ldr	r3, [r7, #28]
 8010734:	4413      	add	r3, r2
 8010736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801073a:	691a      	ldr	r2, [r3, #16]
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	689b      	ldr	r3, [r3, #8]
 8010740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010744:	69b9      	ldr	r1, [r7, #24]
 8010746:	0148      	lsls	r0, r1, #5
 8010748:	69f9      	ldr	r1, [r7, #28]
 801074a:	4401      	add	r1, r0
 801074c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010750:	4313      	orrs	r3, r2
 8010752:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010754:	69bb      	ldr	r3, [r7, #24]
 8010756:	015a      	lsls	r2, r3, #5
 8010758:	69fb      	ldr	r3, [r7, #28]
 801075a:	4413      	add	r3, r2
 801075c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010760:	691b      	ldr	r3, [r3, #16]
 8010762:	69ba      	ldr	r2, [r7, #24]
 8010764:	0151      	lsls	r1, r2, #5
 8010766:	69fa      	ldr	r2, [r7, #28]
 8010768:	440a      	add	r2, r1
 801076a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801076e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010772:	6113      	str	r3, [r2, #16]
 8010774:	e037      	b.n	80107e6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010776:	68bb      	ldr	r3, [r7, #8]
 8010778:	691a      	ldr	r2, [r3, #16]
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	689b      	ldr	r3, [r3, #8]
 801077e:	4413      	add	r3, r2
 8010780:	1e5a      	subs	r2, r3, #1
 8010782:	68bb      	ldr	r3, [r7, #8]
 8010784:	689b      	ldr	r3, [r3, #8]
 8010786:	fbb2 f3f3 	udiv	r3, r2, r3
 801078a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	689b      	ldr	r3, [r3, #8]
 8010790:	8afa      	ldrh	r2, [r7, #22]
 8010792:	fb03 f202 	mul.w	r2, r3, r2
 8010796:	68bb      	ldr	r3, [r7, #8]
 8010798:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801079a:	69bb      	ldr	r3, [r7, #24]
 801079c:	015a      	lsls	r2, r3, #5
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	4413      	add	r3, r2
 80107a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107a6:	691a      	ldr	r2, [r3, #16]
 80107a8:	8afb      	ldrh	r3, [r7, #22]
 80107aa:	04d9      	lsls	r1, r3, #19
 80107ac:	4b39      	ldr	r3, [pc, #228]	; (8010894 <USB_EPStartXfer+0x53c>)
 80107ae:	400b      	ands	r3, r1
 80107b0:	69b9      	ldr	r1, [r7, #24]
 80107b2:	0148      	lsls	r0, r1, #5
 80107b4:	69f9      	ldr	r1, [r7, #28]
 80107b6:	4401      	add	r1, r0
 80107b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80107bc:	4313      	orrs	r3, r2
 80107be:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80107c0:	69bb      	ldr	r3, [r7, #24]
 80107c2:	015a      	lsls	r2, r3, #5
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	4413      	add	r3, r2
 80107c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107cc:	691a      	ldr	r2, [r3, #16]
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	6a1b      	ldr	r3, [r3, #32]
 80107d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107d6:	69b9      	ldr	r1, [r7, #24]
 80107d8:	0148      	lsls	r0, r1, #5
 80107da:	69f9      	ldr	r1, [r7, #28]
 80107dc:	4401      	add	r1, r0
 80107de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80107e2:	4313      	orrs	r3, r2
 80107e4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80107e6:	79fb      	ldrb	r3, [r7, #7]
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d10d      	bne.n	8010808 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80107ec:	68bb      	ldr	r3, [r7, #8]
 80107ee:	68db      	ldr	r3, [r3, #12]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d009      	beq.n	8010808 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	68d9      	ldr	r1, [r3, #12]
 80107f8:	69bb      	ldr	r3, [r7, #24]
 80107fa:	015a      	lsls	r2, r3, #5
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	4413      	add	r3, r2
 8010800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010804:	460a      	mov	r2, r1
 8010806:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	791b      	ldrb	r3, [r3, #4]
 801080c:	2b01      	cmp	r3, #1
 801080e:	d128      	bne.n	8010862 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010816:	689b      	ldr	r3, [r3, #8]
 8010818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801081c:	2b00      	cmp	r3, #0
 801081e:	d110      	bne.n	8010842 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010820:	69bb      	ldr	r3, [r7, #24]
 8010822:	015a      	lsls	r2, r3, #5
 8010824:	69fb      	ldr	r3, [r7, #28]
 8010826:	4413      	add	r3, r2
 8010828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	69ba      	ldr	r2, [r7, #24]
 8010830:	0151      	lsls	r1, r2, #5
 8010832:	69fa      	ldr	r2, [r7, #28]
 8010834:	440a      	add	r2, r1
 8010836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801083a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801083e:	6013      	str	r3, [r2, #0]
 8010840:	e00f      	b.n	8010862 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010842:	69bb      	ldr	r3, [r7, #24]
 8010844:	015a      	lsls	r2, r3, #5
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	4413      	add	r3, r2
 801084a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	69ba      	ldr	r2, [r7, #24]
 8010852:	0151      	lsls	r1, r2, #5
 8010854:	69fa      	ldr	r2, [r7, #28]
 8010856:	440a      	add	r2, r1
 8010858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801085c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010860:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010862:	69bb      	ldr	r3, [r7, #24]
 8010864:	015a      	lsls	r2, r3, #5
 8010866:	69fb      	ldr	r3, [r7, #28]
 8010868:	4413      	add	r3, r2
 801086a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	69ba      	ldr	r2, [r7, #24]
 8010872:	0151      	lsls	r1, r2, #5
 8010874:	69fa      	ldr	r2, [r7, #28]
 8010876:	440a      	add	r2, r1
 8010878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801087c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010880:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010882:	2300      	movs	r3, #0
}
 8010884:	4618      	mov	r0, r3
 8010886:	3720      	adds	r7, #32
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	fff80000 	.word	0xfff80000
 8010890:	e007ffff 	.word	0xe007ffff
 8010894:	1ff80000 	.word	0x1ff80000

08010898 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010898:	b480      	push	{r7}
 801089a:	b087      	sub	sp, #28
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
 80108a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80108a2:	2300      	movs	r3, #0
 80108a4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80108a6:	2300      	movs	r3, #0
 80108a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80108ae:	683b      	ldr	r3, [r7, #0]
 80108b0:	785b      	ldrb	r3, [r3, #1]
 80108b2:	2b01      	cmp	r3, #1
 80108b4:	d14a      	bne.n	801094c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80108b6:	683b      	ldr	r3, [r7, #0]
 80108b8:	781b      	ldrb	r3, [r3, #0]
 80108ba:	015a      	lsls	r2, r3, #5
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	4413      	add	r3, r2
 80108c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80108ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80108ce:	f040 8086 	bne.w	80109de <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	781b      	ldrb	r3, [r3, #0]
 80108d6:	015a      	lsls	r2, r3, #5
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	4413      	add	r3, r2
 80108dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	683a      	ldr	r2, [r7, #0]
 80108e4:	7812      	ldrb	r2, [r2, #0]
 80108e6:	0151      	lsls	r1, r2, #5
 80108e8:	693a      	ldr	r2, [r7, #16]
 80108ea:	440a      	add	r2, r1
 80108ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80108f4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	781b      	ldrb	r3, [r3, #0]
 80108fa:	015a      	lsls	r2, r3, #5
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	4413      	add	r3, r2
 8010900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	683a      	ldr	r2, [r7, #0]
 8010908:	7812      	ldrb	r2, [r2, #0]
 801090a:	0151      	lsls	r1, r2, #5
 801090c:	693a      	ldr	r2, [r7, #16]
 801090e:	440a      	add	r2, r1
 8010910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010918:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	3301      	adds	r3, #1
 801091e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	f242 7210 	movw	r2, #10000	; 0x2710
 8010926:	4293      	cmp	r3, r2
 8010928:	d902      	bls.n	8010930 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801092a:	2301      	movs	r3, #1
 801092c:	75fb      	strb	r3, [r7, #23]
          break;
 801092e:	e056      	b.n	80109de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	015a      	lsls	r2, r3, #5
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	4413      	add	r3, r2
 801093a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010948:	d0e7      	beq.n	801091a <USB_EPStopXfer+0x82>
 801094a:	e048      	b.n	80109de <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	015a      	lsls	r2, r3, #5
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	4413      	add	r3, r2
 8010956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010964:	d13b      	bne.n	80109de <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010966:	683b      	ldr	r3, [r7, #0]
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	015a      	lsls	r2, r3, #5
 801096c:	693b      	ldr	r3, [r7, #16]
 801096e:	4413      	add	r3, r2
 8010970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	683a      	ldr	r2, [r7, #0]
 8010978:	7812      	ldrb	r2, [r2, #0]
 801097a:	0151      	lsls	r1, r2, #5
 801097c:	693a      	ldr	r2, [r7, #16]
 801097e:	440a      	add	r2, r1
 8010980:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010984:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010988:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	781b      	ldrb	r3, [r3, #0]
 801098e:	015a      	lsls	r2, r3, #5
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	4413      	add	r3, r2
 8010994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	683a      	ldr	r2, [r7, #0]
 801099c:	7812      	ldrb	r2, [r2, #0]
 801099e:	0151      	lsls	r1, r2, #5
 80109a0:	693a      	ldr	r2, [r7, #16]
 80109a2:	440a      	add	r2, r1
 80109a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80109ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80109ae:	68fb      	ldr	r3, [r7, #12]
 80109b0:	3301      	adds	r3, #1
 80109b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80109ba:	4293      	cmp	r3, r2
 80109bc:	d902      	bls.n	80109c4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80109be:	2301      	movs	r3, #1
 80109c0:	75fb      	strb	r3, [r7, #23]
          break;
 80109c2:	e00c      	b.n	80109de <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	781b      	ldrb	r3, [r3, #0]
 80109c8:	015a      	lsls	r2, r3, #5
 80109ca:	693b      	ldr	r3, [r7, #16]
 80109cc:	4413      	add	r3, r2
 80109ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80109d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80109dc:	d0e7      	beq.n	80109ae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80109de:	7dfb      	ldrb	r3, [r7, #23]
}
 80109e0:	4618      	mov	r0, r3
 80109e2:	371c      	adds	r7, #28
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr

080109ec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b089      	sub	sp, #36	; 0x24
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	60f8      	str	r0, [r7, #12]
 80109f4:	60b9      	str	r1, [r7, #8]
 80109f6:	4611      	mov	r1, r2
 80109f8:	461a      	mov	r2, r3
 80109fa:	460b      	mov	r3, r1
 80109fc:	71fb      	strb	r3, [r7, #7]
 80109fe:	4613      	mov	r3, r2
 8010a00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010a06:	68bb      	ldr	r3, [r7, #8]
 8010a08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010a0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d123      	bne.n	8010a5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010a12:	88bb      	ldrh	r3, [r7, #4]
 8010a14:	3303      	adds	r3, #3
 8010a16:	089b      	lsrs	r3, r3, #2
 8010a18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	61bb      	str	r3, [r7, #24]
 8010a1e:	e018      	b.n	8010a52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010a20:	79fb      	ldrb	r3, [r7, #7]
 8010a22:	031a      	lsls	r2, r3, #12
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	4413      	add	r3, r2
 8010a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a2c:	461a      	mov	r2, r3
 8010a2e:	69fb      	ldr	r3, [r7, #28]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010a34:	69fb      	ldr	r3, [r7, #28]
 8010a36:	3301      	adds	r3, #1
 8010a38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010a3a:	69fb      	ldr	r3, [r7, #28]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010a40:	69fb      	ldr	r3, [r7, #28]
 8010a42:	3301      	adds	r3, #1
 8010a44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	3301      	adds	r3, #1
 8010a4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	3301      	adds	r3, #1
 8010a50:	61bb      	str	r3, [r7, #24]
 8010a52:	69ba      	ldr	r2, [r7, #24]
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d3e2      	bcc.n	8010a20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010a5a:	2300      	movs	r3, #0
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	3724      	adds	r7, #36	; 0x24
 8010a60:	46bd      	mov	sp, r7
 8010a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a66:	4770      	bx	lr

08010a68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b08b      	sub	sp, #44	; 0x2c
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	60f8      	str	r0, [r7, #12]
 8010a70:	60b9      	str	r1, [r7, #8]
 8010a72:	4613      	mov	r3, r2
 8010a74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010a7e:	88fb      	ldrh	r3, [r7, #6]
 8010a80:	089b      	lsrs	r3, r3, #2
 8010a82:	b29b      	uxth	r3, r3
 8010a84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010a86:	88fb      	ldrh	r3, [r7, #6]
 8010a88:	f003 0303 	and.w	r3, r3, #3
 8010a8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010a8e:	2300      	movs	r3, #0
 8010a90:	623b      	str	r3, [r7, #32]
 8010a92:	e014      	b.n	8010abe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010a94:	69bb      	ldr	r3, [r7, #24]
 8010a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a9a:	681a      	ldr	r2, [r3, #0]
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa2:	3301      	adds	r3, #1
 8010aa4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aae:	3301      	adds	r3, #1
 8010ab0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab4:	3301      	adds	r3, #1
 8010ab6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010ab8:	6a3b      	ldr	r3, [r7, #32]
 8010aba:	3301      	adds	r3, #1
 8010abc:	623b      	str	r3, [r7, #32]
 8010abe:	6a3a      	ldr	r2, [r7, #32]
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d3e6      	bcc.n	8010a94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010ac6:	8bfb      	ldrh	r3, [r7, #30]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d01e      	beq.n	8010b0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010acc:	2300      	movs	r3, #0
 8010ace:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010ad0:	69bb      	ldr	r3, [r7, #24]
 8010ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ad6:	461a      	mov	r2, r3
 8010ad8:	f107 0310 	add.w	r3, r7, #16
 8010adc:	6812      	ldr	r2, [r2, #0]
 8010ade:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010ae0:	693a      	ldr	r2, [r7, #16]
 8010ae2:	6a3b      	ldr	r3, [r7, #32]
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	00db      	lsls	r3, r3, #3
 8010ae8:	fa22 f303 	lsr.w	r3, r2, r3
 8010aec:	b2da      	uxtb	r2, r3
 8010aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af0:	701a      	strb	r2, [r3, #0]
      i++;
 8010af2:	6a3b      	ldr	r3, [r7, #32]
 8010af4:	3301      	adds	r3, #1
 8010af6:	623b      	str	r3, [r7, #32]
      pDest++;
 8010af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afa:	3301      	adds	r3, #1
 8010afc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010afe:	8bfb      	ldrh	r3, [r7, #30]
 8010b00:	3b01      	subs	r3, #1
 8010b02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010b04:	8bfb      	ldrh	r3, [r7, #30]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d1ea      	bne.n	8010ae0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8010b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	372c      	adds	r7, #44	; 0x2c
 8010b10:	46bd      	mov	sp, r7
 8010b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b16:	4770      	bx	lr

08010b18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b26:	683b      	ldr	r3, [r7, #0]
 8010b28:	781b      	ldrb	r3, [r3, #0]
 8010b2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	785b      	ldrb	r3, [r3, #1]
 8010b30:	2b01      	cmp	r3, #1
 8010b32:	d12c      	bne.n	8010b8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	015a      	lsls	r2, r3, #5
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	4413      	add	r3, r2
 8010b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	db12      	blt.n	8010b6c <USB_EPSetStall+0x54>
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d00f      	beq.n	8010b6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	015a      	lsls	r2, r3, #5
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	4413      	add	r3, r2
 8010b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	68ba      	ldr	r2, [r7, #8]
 8010b5c:	0151      	lsls	r1, r2, #5
 8010b5e:	68fa      	ldr	r2, [r7, #12]
 8010b60:	440a      	add	r2, r1
 8010b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010b6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010b6c:	68bb      	ldr	r3, [r7, #8]
 8010b6e:	015a      	lsls	r2, r3, #5
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	4413      	add	r3, r2
 8010b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	68ba      	ldr	r2, [r7, #8]
 8010b7c:	0151      	lsls	r1, r2, #5
 8010b7e:	68fa      	ldr	r2, [r7, #12]
 8010b80:	440a      	add	r2, r1
 8010b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010b8a:	6013      	str	r3, [r2, #0]
 8010b8c:	e02b      	b.n	8010be6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010b8e:	68bb      	ldr	r3, [r7, #8]
 8010b90:	015a      	lsls	r2, r3, #5
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	4413      	add	r3, r2
 8010b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	db12      	blt.n	8010bc6 <USB_EPSetStall+0xae>
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00f      	beq.n	8010bc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	015a      	lsls	r2, r3, #5
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	4413      	add	r3, r2
 8010bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	68ba      	ldr	r2, [r7, #8]
 8010bb6:	0151      	lsls	r1, r2, #5
 8010bb8:	68fa      	ldr	r2, [r7, #12]
 8010bba:	440a      	add	r2, r1
 8010bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010bc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	015a      	lsls	r2, r3, #5
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	4413      	add	r3, r2
 8010bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	68ba      	ldr	r2, [r7, #8]
 8010bd6:	0151      	lsls	r1, r2, #5
 8010bd8:	68fa      	ldr	r2, [r7, #12]
 8010bda:	440a      	add	r2, r1
 8010bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010be0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010be4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010be6:	2300      	movs	r3, #0
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3714      	adds	r7, #20
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr

08010bf4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b085      	sub	sp, #20
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
 8010bfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010c02:	683b      	ldr	r3, [r7, #0]
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	785b      	ldrb	r3, [r3, #1]
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d128      	bne.n	8010c62 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	015a      	lsls	r2, r3, #5
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	4413      	add	r3, r2
 8010c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	68ba      	ldr	r2, [r7, #8]
 8010c20:	0151      	lsls	r1, r2, #5
 8010c22:	68fa      	ldr	r2, [r7, #12]
 8010c24:	440a      	add	r2, r1
 8010c26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010c2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010c30:	683b      	ldr	r3, [r7, #0]
 8010c32:	791b      	ldrb	r3, [r3, #4]
 8010c34:	2b03      	cmp	r3, #3
 8010c36:	d003      	beq.n	8010c40 <USB_EPClearStall+0x4c>
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	791b      	ldrb	r3, [r3, #4]
 8010c3c:	2b02      	cmp	r3, #2
 8010c3e:	d138      	bne.n	8010cb2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010c40:	68bb      	ldr	r3, [r7, #8]
 8010c42:	015a      	lsls	r2, r3, #5
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	4413      	add	r3, r2
 8010c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	68ba      	ldr	r2, [r7, #8]
 8010c50:	0151      	lsls	r1, r2, #5
 8010c52:	68fa      	ldr	r2, [r7, #12]
 8010c54:	440a      	add	r2, r1
 8010c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c5e:	6013      	str	r3, [r2, #0]
 8010c60:	e027      	b.n	8010cb2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	015a      	lsls	r2, r3, #5
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	4413      	add	r3, r2
 8010c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	68ba      	ldr	r2, [r7, #8]
 8010c72:	0151      	lsls	r1, r2, #5
 8010c74:	68fa      	ldr	r2, [r7, #12]
 8010c76:	440a      	add	r2, r1
 8010c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010c80:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	791b      	ldrb	r3, [r3, #4]
 8010c86:	2b03      	cmp	r3, #3
 8010c88:	d003      	beq.n	8010c92 <USB_EPClearStall+0x9e>
 8010c8a:	683b      	ldr	r3, [r7, #0]
 8010c8c:	791b      	ldrb	r3, [r3, #4]
 8010c8e:	2b02      	cmp	r3, #2
 8010c90:	d10f      	bne.n	8010cb2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	015a      	lsls	r2, r3, #5
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	4413      	add	r3, r2
 8010c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	68ba      	ldr	r2, [r7, #8]
 8010ca2:	0151      	lsls	r1, r2, #5
 8010ca4:	68fa      	ldr	r2, [r7, #12]
 8010ca6:	440a      	add	r2, r1
 8010ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010cb0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010cb2:	2300      	movs	r3, #0
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3714      	adds	r7, #20
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbe:	4770      	bx	lr

08010cc0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010cc0:	b480      	push	{r7}
 8010cc2:	b085      	sub	sp, #20
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	460b      	mov	r3, r1
 8010cca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	68fa      	ldr	r2, [r7, #12]
 8010cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010cde:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010ce2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	78fb      	ldrb	r3, [r7, #3]
 8010cee:	011b      	lsls	r3, r3, #4
 8010cf0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010cf4:	68f9      	ldr	r1, [r7, #12]
 8010cf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010cfa:	4313      	orrs	r3, r2
 8010cfc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010cfe:	2300      	movs	r3, #0
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3714      	adds	r7, #20
 8010d04:	46bd      	mov	sp, r7
 8010d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0a:	4770      	bx	lr

08010d0c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b085      	sub	sp, #20
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	68fa      	ldr	r2, [r7, #12]
 8010d22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010d26:	f023 0303 	bic.w	r3, r3, #3
 8010d2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	68fa      	ldr	r2, [r7, #12]
 8010d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d3a:	f023 0302 	bic.w	r3, r3, #2
 8010d3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010d40:	2300      	movs	r3, #0
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	3714      	adds	r7, #20
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr

08010d4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010d4e:	b480      	push	{r7}
 8010d50:	b085      	sub	sp, #20
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	68fa      	ldr	r2, [r7, #12]
 8010d64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010d68:	f023 0303 	bic.w	r3, r3, #3
 8010d6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	68fa      	ldr	r2, [r7, #12]
 8010d78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d7c:	f043 0302 	orr.w	r3, r3, #2
 8010d80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010d82:	2300      	movs	r3, #0
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3714      	adds	r7, #20
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8e:	4770      	bx	lr

08010d90 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b085      	sub	sp, #20
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	695b      	ldr	r3, [r3, #20]
 8010d9c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	699b      	ldr	r3, [r3, #24]
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	4013      	ands	r3, r2
 8010da6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010da8:	68fb      	ldr	r3, [r7, #12]
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	3714      	adds	r7, #20
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr

08010db6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010db6:	b480      	push	{r7}
 8010db8:	b085      	sub	sp, #20
 8010dba:	af00      	add	r7, sp, #0
 8010dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dc8:	699b      	ldr	r3, [r3, #24]
 8010dca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dd2:	69db      	ldr	r3, [r3, #28]
 8010dd4:	68ba      	ldr	r2, [r7, #8]
 8010dd6:	4013      	ands	r3, r2
 8010dd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010dda:	68bb      	ldr	r3, [r7, #8]
 8010ddc:	0c1b      	lsrs	r3, r3, #16
}
 8010dde:	4618      	mov	r0, r3
 8010de0:	3714      	adds	r7, #20
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010dea:	b480      	push	{r7}
 8010dec:	b085      	sub	sp, #20
 8010dee:	af00      	add	r7, sp, #0
 8010df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dfc:	699b      	ldr	r3, [r3, #24]
 8010dfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e06:	69db      	ldr	r3, [r3, #28]
 8010e08:	68ba      	ldr	r2, [r7, #8]
 8010e0a:	4013      	ands	r3, r2
 8010e0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010e0e:	68bb      	ldr	r3, [r7, #8]
 8010e10:	b29b      	uxth	r3, r3
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3714      	adds	r7, #20
 8010e16:	46bd      	mov	sp, r7
 8010e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1c:	4770      	bx	lr

08010e1e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010e1e:	b480      	push	{r7}
 8010e20:	b085      	sub	sp, #20
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
 8010e26:	460b      	mov	r3, r1
 8010e28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010e2e:	78fb      	ldrb	r3, [r7, #3]
 8010e30:	015a      	lsls	r2, r3, #5
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	4413      	add	r3, r2
 8010e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e3a:	689b      	ldr	r3, [r3, #8]
 8010e3c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e44:	695b      	ldr	r3, [r3, #20]
 8010e46:	68ba      	ldr	r2, [r7, #8]
 8010e48:	4013      	ands	r3, r2
 8010e4a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010e4c:	68bb      	ldr	r3, [r7, #8]
}
 8010e4e:	4618      	mov	r0, r3
 8010e50:	3714      	adds	r7, #20
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010e5a:	b480      	push	{r7}
 8010e5c:	b087      	sub	sp, #28
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	460b      	mov	r3, r1
 8010e64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010e6a:	697b      	ldr	r3, [r7, #20]
 8010e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e70:	691b      	ldr	r3, [r3, #16]
 8010e72:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010e74:	697b      	ldr	r3, [r7, #20]
 8010e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e7c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010e7e:	78fb      	ldrb	r3, [r7, #3]
 8010e80:	f003 030f 	and.w	r3, r3, #15
 8010e84:	68fa      	ldr	r2, [r7, #12]
 8010e86:	fa22 f303 	lsr.w	r3, r2, r3
 8010e8a:	01db      	lsls	r3, r3, #7
 8010e8c:	b2db      	uxtb	r3, r3
 8010e8e:	693a      	ldr	r2, [r7, #16]
 8010e90:	4313      	orrs	r3, r2
 8010e92:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010e94:	78fb      	ldrb	r3, [r7, #3]
 8010e96:	015a      	lsls	r2, r3, #5
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	4413      	add	r3, r2
 8010e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ea0:	689b      	ldr	r3, [r3, #8]
 8010ea2:	693a      	ldr	r2, [r7, #16]
 8010ea4:	4013      	ands	r3, r2
 8010ea6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ea8:	68bb      	ldr	r3, [r7, #8]
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	371c      	adds	r7, #28
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr

08010eb6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010eb6:	b480      	push	{r7}
 8010eb8:	b083      	sub	sp, #12
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	695b      	ldr	r3, [r3, #20]
 8010ec2:	f003 0301 	and.w	r3, r3, #1
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	370c      	adds	r7, #12
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr
	...

08010ed4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010ed4:	b480      	push	{r7}
 8010ed6:	b085      	sub	sp, #20
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ee6:	681a      	ldr	r2, [r3, #0]
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010eee:	4619      	mov	r1, r3
 8010ef0:	4b09      	ldr	r3, [pc, #36]	; (8010f18 <USB_ActivateSetup+0x44>)
 8010ef2:	4013      	ands	r3, r2
 8010ef4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010efc:	685b      	ldr	r3, [r3, #4]
 8010efe:	68fa      	ldr	r2, [r7, #12]
 8010f00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010f08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010f0a:	2300      	movs	r3, #0
}
 8010f0c:	4618      	mov	r0, r3
 8010f0e:	3714      	adds	r7, #20
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr
 8010f18:	fffff800 	.word	0xfffff800

08010f1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010f1c:	b480      	push	{r7}
 8010f1e:	b087      	sub	sp, #28
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	60f8      	str	r0, [r7, #12]
 8010f24:	460b      	mov	r3, r1
 8010f26:	607a      	str	r2, [r7, #4]
 8010f28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	333c      	adds	r3, #60	; 0x3c
 8010f32:	3304      	adds	r3, #4
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	4a26      	ldr	r2, [pc, #152]	; (8010fd4 <USB_EP0_OutStart+0xb8>)
 8010f3c:	4293      	cmp	r3, r2
 8010f3e:	d90a      	bls.n	8010f56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f50:	d101      	bne.n	8010f56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010f52:	2300      	movs	r3, #0
 8010f54:	e037      	b.n	8010fc6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010f56:	697b      	ldr	r3, [r7, #20]
 8010f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f5c:	461a      	mov	r2, r3
 8010f5e:	2300      	movs	r3, #0
 8010f60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f68:	691b      	ldr	r3, [r3, #16]
 8010f6a:	697a      	ldr	r2, [r7, #20]
 8010f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010f74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010f76:	697b      	ldr	r3, [r7, #20]
 8010f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f7c:	691b      	ldr	r3, [r3, #16]
 8010f7e:	697a      	ldr	r2, [r7, #20]
 8010f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f84:	f043 0318 	orr.w	r3, r3, #24
 8010f88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f90:	691b      	ldr	r3, [r3, #16]
 8010f92:	697a      	ldr	r2, [r7, #20]
 8010f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010f9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010f9e:	7afb      	ldrb	r3, [r7, #11]
 8010fa0:	2b01      	cmp	r3, #1
 8010fa2:	d10f      	bne.n	8010fc4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010fa4:	697b      	ldr	r3, [r7, #20]
 8010fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010faa:	461a      	mov	r2, r3
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010fb0:	697b      	ldr	r3, [r7, #20]
 8010fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	697a      	ldr	r2, [r7, #20]
 8010fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010fbe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010fc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010fc4:	2300      	movs	r3, #0
}
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	371c      	adds	r7, #28
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd0:	4770      	bx	lr
 8010fd2:	bf00      	nop
 8010fd4:	4f54300a 	.word	0x4f54300a

08010fd8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b085      	sub	sp, #20
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	3301      	adds	r3, #1
 8010fe8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	4a13      	ldr	r2, [pc, #76]	; (801103c <USB_CoreReset+0x64>)
 8010fee:	4293      	cmp	r3, r2
 8010ff0:	d901      	bls.n	8010ff6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010ff2:	2303      	movs	r3, #3
 8010ff4:	e01b      	b.n	801102e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	691b      	ldr	r3, [r3, #16]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	daf2      	bge.n	8010fe4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010ffe:	2300      	movs	r3, #0
 8011000:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	691b      	ldr	r3, [r3, #16]
 8011006:	f043 0201 	orr.w	r2, r3, #1
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	3301      	adds	r3, #1
 8011012:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	4a09      	ldr	r2, [pc, #36]	; (801103c <USB_CoreReset+0x64>)
 8011018:	4293      	cmp	r3, r2
 801101a:	d901      	bls.n	8011020 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801101c:	2303      	movs	r3, #3
 801101e:	e006      	b.n	801102e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	691b      	ldr	r3, [r3, #16]
 8011024:	f003 0301 	and.w	r3, r3, #1
 8011028:	2b01      	cmp	r3, #1
 801102a:	d0f0      	beq.n	801100e <USB_CoreReset+0x36>

  return HAL_OK;
 801102c:	2300      	movs	r3, #0
}
 801102e:	4618      	mov	r0, r3
 8011030:	3714      	adds	r7, #20
 8011032:	46bd      	mov	sp, r7
 8011034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011038:	4770      	bx	lr
 801103a:	bf00      	nop
 801103c:	00030d40 	.word	0x00030d40

08011040 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8011044:	4904      	ldr	r1, [pc, #16]	; (8011058 <MX_FATFS_Init+0x18>)
 8011046:	4805      	ldr	r0, [pc, #20]	; (801105c <MX_FATFS_Init+0x1c>)
 8011048:	f002 f8a2 	bl	8013190 <FATFS_LinkDriver>
 801104c:	4603      	mov	r3, r0
 801104e:	461a      	mov	r2, r3
 8011050:	4b03      	ldr	r3, [pc, #12]	; (8011060 <MX_FATFS_Init+0x20>)
 8011052:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011054:	bf00      	nop
 8011056:	bd80      	pop	{r7, pc}
 8011058:	24000c84 	.word	0x24000c84
 801105c:	24000010 	.word	0x24000010
 8011060:	24000c80 	.word	0x24000c80

08011064 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8011064:	b480      	push	{r7}
 8011066:	b083      	sub	sp, #12
 8011068:	af00      	add	r7, sp, #0
 801106a:	4603      	mov	r3, r0
 801106c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 801106e:	4b06      	ldr	r3, [pc, #24]	; (8011088 <USER_initialize+0x24>)
 8011070:	2201      	movs	r2, #1
 8011072:	701a      	strb	r2, [r3, #0]
    return Stat;
 8011074:	4b04      	ldr	r3, [pc, #16]	; (8011088 <USER_initialize+0x24>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 801107a:	4618      	mov	r0, r3
 801107c:	370c      	adds	r7, #12
 801107e:	46bd      	mov	sp, r7
 8011080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011084:	4770      	bx	lr
 8011086:	bf00      	nop
 8011088:	2400000d 	.word	0x2400000d

0801108c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 801108c:	b480      	push	{r7}
 801108e:	b083      	sub	sp, #12
 8011090:	af00      	add	r7, sp, #0
 8011092:	4603      	mov	r3, r0
 8011094:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8011096:	4b06      	ldr	r3, [pc, #24]	; (80110b0 <USER_status+0x24>)
 8011098:	2201      	movs	r2, #1
 801109a:	701a      	strb	r2, [r3, #0]
    return Stat;
 801109c:	4b04      	ldr	r3, [pc, #16]	; (80110b0 <USER_status+0x24>)
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80110a2:	4618      	mov	r0, r3
 80110a4:	370c      	adds	r7, #12
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr
 80110ae:	bf00      	nop
 80110b0:	2400000d 	.word	0x2400000d

080110b4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80110b4:	b480      	push	{r7}
 80110b6:	b085      	sub	sp, #20
 80110b8:	af00      	add	r7, sp, #0
 80110ba:	60b9      	str	r1, [r7, #8]
 80110bc:	607a      	str	r2, [r7, #4]
 80110be:	603b      	str	r3, [r7, #0]
 80110c0:	4603      	mov	r3, r0
 80110c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 80110c4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 80110c6:	4618      	mov	r0, r3
 80110c8:	3714      	adds	r7, #20
 80110ca:	46bd      	mov	sp, r7
 80110cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d0:	4770      	bx	lr

080110d2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80110d2:	b480      	push	{r7}
 80110d4:	b085      	sub	sp, #20
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	60b9      	str	r1, [r7, #8]
 80110da:	607a      	str	r2, [r7, #4]
 80110dc:	603b      	str	r3, [r7, #0]
 80110de:	4603      	mov	r3, r0
 80110e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 80110e2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b085      	sub	sp, #20
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	4603      	mov	r3, r0
 80110f8:	603a      	str	r2, [r7, #0]
 80110fa:	71fb      	strb	r3, [r7, #7]
 80110fc:	460b      	mov	r3, r1
 80110fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8011100:	2301      	movs	r3, #1
 8011102:	73fb      	strb	r3, [r7, #15]
    return res;
 8011104:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8011106:	4618      	mov	r0, r3
 8011108:	3714      	adds	r7, #20
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr
	...

08011114 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b084      	sub	sp, #16
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	460b      	mov	r3, r1
 801111e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011120:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011124:	f002 fd12 	bl	8013b4c <USBD_static_malloc>
 8011128:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d109      	bne.n	8011144 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	32b0      	adds	r2, #176	; 0xb0
 801113a:	2100      	movs	r1, #0
 801113c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011140:	2302      	movs	r3, #2
 8011142:	e0d4      	b.n	80112ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011144:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8011148:	2100      	movs	r1, #0
 801114a:	68f8      	ldr	r0, [r7, #12]
 801114c:	f003 fd5b 	bl	8014c06 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	32b0      	adds	r2, #176	; 0xb0
 801115a:	68f9      	ldr	r1, [r7, #12]
 801115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	32b0      	adds	r2, #176	; 0xb0
 801116a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	7c1b      	ldrb	r3, [r3, #16]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d138      	bne.n	80111ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801117c:	4b5e      	ldr	r3, [pc, #376]	; (80112f8 <USBD_CDC_Init+0x1e4>)
 801117e:	7819      	ldrb	r1, [r3, #0]
 8011180:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011184:	2202      	movs	r2, #2
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f002 fbbd 	bl	8013906 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 801118c:	4b5a      	ldr	r3, [pc, #360]	; (80112f8 <USBD_CDC_Init+0x1e4>)
 801118e:	781b      	ldrb	r3, [r3, #0]
 8011190:	f003 020f 	and.w	r2, r3, #15
 8011194:	6879      	ldr	r1, [r7, #4]
 8011196:	4613      	mov	r3, r2
 8011198:	009b      	lsls	r3, r3, #2
 801119a:	4413      	add	r3, r2
 801119c:	009b      	lsls	r3, r3, #2
 801119e:	440b      	add	r3, r1
 80111a0:	3324      	adds	r3, #36	; 0x24
 80111a2:	2201      	movs	r2, #1
 80111a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80111a6:	4b55      	ldr	r3, [pc, #340]	; (80112fc <USBD_CDC_Init+0x1e8>)
 80111a8:	7819      	ldrb	r1, [r3, #0]
 80111aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80111ae:	2202      	movs	r2, #2
 80111b0:	6878      	ldr	r0, [r7, #4]
 80111b2:	f002 fba8 	bl	8013906 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80111b6:	4b51      	ldr	r3, [pc, #324]	; (80112fc <USBD_CDC_Init+0x1e8>)
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	f003 020f 	and.w	r2, r3, #15
 80111be:	6879      	ldr	r1, [r7, #4]
 80111c0:	4613      	mov	r3, r2
 80111c2:	009b      	lsls	r3, r3, #2
 80111c4:	4413      	add	r3, r2
 80111c6:	009b      	lsls	r3, r3, #2
 80111c8:	440b      	add	r3, r1
 80111ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80111ce:	2201      	movs	r2, #1
 80111d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80111d2:	4b4b      	ldr	r3, [pc, #300]	; (8011300 <USBD_CDC_Init+0x1ec>)
 80111d4:	781b      	ldrb	r3, [r3, #0]
 80111d6:	f003 020f 	and.w	r2, r3, #15
 80111da:	6879      	ldr	r1, [r7, #4]
 80111dc:	4613      	mov	r3, r2
 80111de:	009b      	lsls	r3, r3, #2
 80111e0:	4413      	add	r3, r2
 80111e2:	009b      	lsls	r3, r3, #2
 80111e4:	440b      	add	r3, r1
 80111e6:	3326      	adds	r3, #38	; 0x26
 80111e8:	2210      	movs	r2, #16
 80111ea:	801a      	strh	r2, [r3, #0]
 80111ec:	e035      	b.n	801125a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80111ee:	4b42      	ldr	r3, [pc, #264]	; (80112f8 <USBD_CDC_Init+0x1e4>)
 80111f0:	7819      	ldrb	r1, [r3, #0]
 80111f2:	2340      	movs	r3, #64	; 0x40
 80111f4:	2202      	movs	r2, #2
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f002 fb85 	bl	8013906 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80111fc:	4b3e      	ldr	r3, [pc, #248]	; (80112f8 <USBD_CDC_Init+0x1e4>)
 80111fe:	781b      	ldrb	r3, [r3, #0]
 8011200:	f003 020f 	and.w	r2, r3, #15
 8011204:	6879      	ldr	r1, [r7, #4]
 8011206:	4613      	mov	r3, r2
 8011208:	009b      	lsls	r3, r3, #2
 801120a:	4413      	add	r3, r2
 801120c:	009b      	lsls	r3, r3, #2
 801120e:	440b      	add	r3, r1
 8011210:	3324      	adds	r3, #36	; 0x24
 8011212:	2201      	movs	r2, #1
 8011214:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011216:	4b39      	ldr	r3, [pc, #228]	; (80112fc <USBD_CDC_Init+0x1e8>)
 8011218:	7819      	ldrb	r1, [r3, #0]
 801121a:	2340      	movs	r3, #64	; 0x40
 801121c:	2202      	movs	r2, #2
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f002 fb71 	bl	8013906 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011224:	4b35      	ldr	r3, [pc, #212]	; (80112fc <USBD_CDC_Init+0x1e8>)
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	f003 020f 	and.w	r2, r3, #15
 801122c:	6879      	ldr	r1, [r7, #4]
 801122e:	4613      	mov	r3, r2
 8011230:	009b      	lsls	r3, r3, #2
 8011232:	4413      	add	r3, r2
 8011234:	009b      	lsls	r3, r3, #2
 8011236:	440b      	add	r3, r1
 8011238:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801123c:	2201      	movs	r2, #1
 801123e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011240:	4b2f      	ldr	r3, [pc, #188]	; (8011300 <USBD_CDC_Init+0x1ec>)
 8011242:	781b      	ldrb	r3, [r3, #0]
 8011244:	f003 020f 	and.w	r2, r3, #15
 8011248:	6879      	ldr	r1, [r7, #4]
 801124a:	4613      	mov	r3, r2
 801124c:	009b      	lsls	r3, r3, #2
 801124e:	4413      	add	r3, r2
 8011250:	009b      	lsls	r3, r3, #2
 8011252:	440b      	add	r3, r1
 8011254:	3326      	adds	r3, #38	; 0x26
 8011256:	2210      	movs	r2, #16
 8011258:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801125a:	4b29      	ldr	r3, [pc, #164]	; (8011300 <USBD_CDC_Init+0x1ec>)
 801125c:	7819      	ldrb	r1, [r3, #0]
 801125e:	2308      	movs	r3, #8
 8011260:	2203      	movs	r2, #3
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f002 fb4f 	bl	8013906 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011268:	4b25      	ldr	r3, [pc, #148]	; (8011300 <USBD_CDC_Init+0x1ec>)
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	f003 020f 	and.w	r2, r3, #15
 8011270:	6879      	ldr	r1, [r7, #4]
 8011272:	4613      	mov	r3, r2
 8011274:	009b      	lsls	r3, r3, #2
 8011276:	4413      	add	r3, r2
 8011278:	009b      	lsls	r3, r3, #2
 801127a:	440b      	add	r3, r1
 801127c:	3324      	adds	r3, #36	; 0x24
 801127e:	2201      	movs	r2, #1
 8011280:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	2200      	movs	r2, #0
 8011286:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	33b0      	adds	r3, #176	; 0xb0
 8011294:	009b      	lsls	r3, r3, #2
 8011296:	4413      	add	r3, r2
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	2200      	movs	r2, #0
 80112a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	2200      	movs	r2, #0
 80112aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d101      	bne.n	80112bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80112b8:	2302      	movs	r3, #2
 80112ba:	e018      	b.n	80112ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	7c1b      	ldrb	r3, [r3, #16]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d10a      	bne.n	80112da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80112c4:	4b0d      	ldr	r3, [pc, #52]	; (80112fc <USBD_CDC_Init+0x1e8>)
 80112c6:	7819      	ldrb	r1, [r3, #0]
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80112ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112d2:	6878      	ldr	r0, [r7, #4]
 80112d4:	f002 fc06 	bl	8013ae4 <USBD_LL_PrepareReceive>
 80112d8:	e008      	b.n	80112ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80112da:	4b08      	ldr	r3, [pc, #32]	; (80112fc <USBD_CDC_Init+0x1e8>)
 80112dc:	7819      	ldrb	r1, [r3, #0]
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80112e4:	2340      	movs	r3, #64	; 0x40
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f002 fbfc 	bl	8013ae4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80112ec:	2300      	movs	r3, #0
}
 80112ee:	4618      	mov	r0, r3
 80112f0:	3710      	adds	r7, #16
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}
 80112f6:	bf00      	nop
 80112f8:	240000ab 	.word	0x240000ab
 80112fc:	240000ac 	.word	0x240000ac
 8011300:	240000ad 	.word	0x240000ad

08011304 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b082      	sub	sp, #8
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
 801130c:	460b      	mov	r3, r1
 801130e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011310:	4b3a      	ldr	r3, [pc, #232]	; (80113fc <USBD_CDC_DeInit+0xf8>)
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	4619      	mov	r1, r3
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f002 fb1b 	bl	8013952 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801131c:	4b37      	ldr	r3, [pc, #220]	; (80113fc <USBD_CDC_DeInit+0xf8>)
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	f003 020f 	and.w	r2, r3, #15
 8011324:	6879      	ldr	r1, [r7, #4]
 8011326:	4613      	mov	r3, r2
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	4413      	add	r3, r2
 801132c:	009b      	lsls	r3, r3, #2
 801132e:	440b      	add	r3, r1
 8011330:	3324      	adds	r3, #36	; 0x24
 8011332:	2200      	movs	r2, #0
 8011334:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011336:	4b32      	ldr	r3, [pc, #200]	; (8011400 <USBD_CDC_DeInit+0xfc>)
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	4619      	mov	r1, r3
 801133c:	6878      	ldr	r0, [r7, #4]
 801133e:	f002 fb08 	bl	8013952 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8011342:	4b2f      	ldr	r3, [pc, #188]	; (8011400 <USBD_CDC_DeInit+0xfc>)
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	f003 020f 	and.w	r2, r3, #15
 801134a:	6879      	ldr	r1, [r7, #4]
 801134c:	4613      	mov	r3, r2
 801134e:	009b      	lsls	r3, r3, #2
 8011350:	4413      	add	r3, r2
 8011352:	009b      	lsls	r3, r3, #2
 8011354:	440b      	add	r3, r1
 8011356:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801135a:	2200      	movs	r2, #0
 801135c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801135e:	4b29      	ldr	r3, [pc, #164]	; (8011404 <USBD_CDC_DeInit+0x100>)
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	4619      	mov	r1, r3
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f002 faf4 	bl	8013952 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801136a:	4b26      	ldr	r3, [pc, #152]	; (8011404 <USBD_CDC_DeInit+0x100>)
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	f003 020f 	and.w	r2, r3, #15
 8011372:	6879      	ldr	r1, [r7, #4]
 8011374:	4613      	mov	r3, r2
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	4413      	add	r3, r2
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	440b      	add	r3, r1
 801137e:	3324      	adds	r3, #36	; 0x24
 8011380:	2200      	movs	r2, #0
 8011382:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011384:	4b1f      	ldr	r3, [pc, #124]	; (8011404 <USBD_CDC_DeInit+0x100>)
 8011386:	781b      	ldrb	r3, [r3, #0]
 8011388:	f003 020f 	and.w	r2, r3, #15
 801138c:	6879      	ldr	r1, [r7, #4]
 801138e:	4613      	mov	r3, r2
 8011390:	009b      	lsls	r3, r3, #2
 8011392:	4413      	add	r3, r2
 8011394:	009b      	lsls	r3, r3, #2
 8011396:	440b      	add	r3, r1
 8011398:	3326      	adds	r3, #38	; 0x26
 801139a:	2200      	movs	r2, #0
 801139c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	32b0      	adds	r2, #176	; 0xb0
 80113a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d01f      	beq.n	80113f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80113b6:	687a      	ldr	r2, [r7, #4]
 80113b8:	33b0      	adds	r3, #176	; 0xb0
 80113ba:	009b      	lsls	r3, r3, #2
 80113bc:	4413      	add	r3, r2
 80113be:	685b      	ldr	r3, [r3, #4]
 80113c0:	685b      	ldr	r3, [r3, #4]
 80113c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	32b0      	adds	r2, #176	; 0xb0
 80113ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113d2:	4618      	mov	r0, r3
 80113d4:	f002 fbc8 	bl	8013b68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	32b0      	adds	r2, #176	; 0xb0
 80113e2:	2100      	movs	r1, #0
 80113e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2200      	movs	r2, #0
 80113ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80113f0:	2300      	movs	r3, #0
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3708      	adds	r7, #8
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	240000ab 	.word	0x240000ab
 8011400:	240000ac 	.word	0x240000ac
 8011404:	240000ad 	.word	0x240000ad

08011408 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b086      	sub	sp, #24
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	32b0      	adds	r2, #176	; 0xb0
 801141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011420:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011422:	2300      	movs	r3, #0
 8011424:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011426:	2300      	movs	r3, #0
 8011428:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801142a:	2300      	movs	r3, #0
 801142c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d101      	bne.n	8011438 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011434:	2303      	movs	r3, #3
 8011436:	e0bf      	b.n	80115b8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	781b      	ldrb	r3, [r3, #0]
 801143c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011440:	2b00      	cmp	r3, #0
 8011442:	d050      	beq.n	80114e6 <USBD_CDC_Setup+0xde>
 8011444:	2b20      	cmp	r3, #32
 8011446:	f040 80af 	bne.w	80115a8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801144a:	683b      	ldr	r3, [r7, #0]
 801144c:	88db      	ldrh	r3, [r3, #6]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d03a      	beq.n	80114c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	b25b      	sxtb	r3, r3
 8011458:	2b00      	cmp	r3, #0
 801145a:	da1b      	bge.n	8011494 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	33b0      	adds	r3, #176	; 0xb0
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	4413      	add	r3, r2
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	689b      	ldr	r3, [r3, #8]
 801146e:	683a      	ldr	r2, [r7, #0]
 8011470:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011472:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011474:	683a      	ldr	r2, [r7, #0]
 8011476:	88d2      	ldrh	r2, [r2, #6]
 8011478:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	88db      	ldrh	r3, [r3, #6]
 801147e:	2b07      	cmp	r3, #7
 8011480:	bf28      	it	cs
 8011482:	2307      	movcs	r3, #7
 8011484:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	89fa      	ldrh	r2, [r7, #14]
 801148a:	4619      	mov	r1, r3
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f001 fdb3 	bl	8012ff8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011492:	e090      	b.n	80115b6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	785a      	ldrb	r2, [r3, #1]
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	88db      	ldrh	r3, [r3, #6]
 80114a2:	2b3f      	cmp	r3, #63	; 0x3f
 80114a4:	d803      	bhi.n	80114ae <USBD_CDC_Setup+0xa6>
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	88db      	ldrh	r3, [r3, #6]
 80114aa:	b2da      	uxtb	r2, r3
 80114ac:	e000      	b.n	80114b0 <USBD_CDC_Setup+0xa8>
 80114ae:	2240      	movs	r2, #64	; 0x40
 80114b0:	693b      	ldr	r3, [r7, #16]
 80114b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80114b6:	6939      	ldr	r1, [r7, #16]
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80114be:	461a      	mov	r2, r3
 80114c0:	6878      	ldr	r0, [r7, #4]
 80114c2:	f001 fdc5 	bl	8013050 <USBD_CtlPrepareRx>
      break;
 80114c6:	e076      	b.n	80115b6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80114ce:	687a      	ldr	r2, [r7, #4]
 80114d0:	33b0      	adds	r3, #176	; 0xb0
 80114d2:	009b      	lsls	r3, r3, #2
 80114d4:	4413      	add	r3, r2
 80114d6:	685b      	ldr	r3, [r3, #4]
 80114d8:	689b      	ldr	r3, [r3, #8]
 80114da:	683a      	ldr	r2, [r7, #0]
 80114dc:	7850      	ldrb	r0, [r2, #1]
 80114de:	2200      	movs	r2, #0
 80114e0:	6839      	ldr	r1, [r7, #0]
 80114e2:	4798      	blx	r3
      break;
 80114e4:	e067      	b.n	80115b6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	785b      	ldrb	r3, [r3, #1]
 80114ea:	2b0b      	cmp	r3, #11
 80114ec:	d851      	bhi.n	8011592 <USBD_CDC_Setup+0x18a>
 80114ee:	a201      	add	r2, pc, #4	; (adr r2, 80114f4 <USBD_CDC_Setup+0xec>)
 80114f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f4:	08011525 	.word	0x08011525
 80114f8:	080115a1 	.word	0x080115a1
 80114fc:	08011593 	.word	0x08011593
 8011500:	08011593 	.word	0x08011593
 8011504:	08011593 	.word	0x08011593
 8011508:	08011593 	.word	0x08011593
 801150c:	08011593 	.word	0x08011593
 8011510:	08011593 	.word	0x08011593
 8011514:	08011593 	.word	0x08011593
 8011518:	08011593 	.word	0x08011593
 801151c:	0801154f 	.word	0x0801154f
 8011520:	08011579 	.word	0x08011579
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801152a:	b2db      	uxtb	r3, r3
 801152c:	2b03      	cmp	r3, #3
 801152e:	d107      	bne.n	8011540 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011530:	f107 030a 	add.w	r3, r7, #10
 8011534:	2202      	movs	r2, #2
 8011536:	4619      	mov	r1, r3
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f001 fd5d 	bl	8012ff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801153e:	e032      	b.n	80115a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011540:	6839      	ldr	r1, [r7, #0]
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f001 fce7 	bl	8012f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8011548:	2303      	movs	r3, #3
 801154a:	75fb      	strb	r3, [r7, #23]
          break;
 801154c:	e02b      	b.n	80115a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011554:	b2db      	uxtb	r3, r3
 8011556:	2b03      	cmp	r3, #3
 8011558:	d107      	bne.n	801156a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801155a:	f107 030d 	add.w	r3, r7, #13
 801155e:	2201      	movs	r2, #1
 8011560:	4619      	mov	r1, r3
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f001 fd48 	bl	8012ff8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011568:	e01d      	b.n	80115a6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801156a:	6839      	ldr	r1, [r7, #0]
 801156c:	6878      	ldr	r0, [r7, #4]
 801156e:	f001 fcd2 	bl	8012f16 <USBD_CtlError>
            ret = USBD_FAIL;
 8011572:	2303      	movs	r3, #3
 8011574:	75fb      	strb	r3, [r7, #23]
          break;
 8011576:	e016      	b.n	80115a6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801157e:	b2db      	uxtb	r3, r3
 8011580:	2b03      	cmp	r3, #3
 8011582:	d00f      	beq.n	80115a4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011584:	6839      	ldr	r1, [r7, #0]
 8011586:	6878      	ldr	r0, [r7, #4]
 8011588:	f001 fcc5 	bl	8012f16 <USBD_CtlError>
            ret = USBD_FAIL;
 801158c:	2303      	movs	r3, #3
 801158e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011590:	e008      	b.n	80115a4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011592:	6839      	ldr	r1, [r7, #0]
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f001 fcbe 	bl	8012f16 <USBD_CtlError>
          ret = USBD_FAIL;
 801159a:	2303      	movs	r3, #3
 801159c:	75fb      	strb	r3, [r7, #23]
          break;
 801159e:	e002      	b.n	80115a6 <USBD_CDC_Setup+0x19e>
          break;
 80115a0:	bf00      	nop
 80115a2:	e008      	b.n	80115b6 <USBD_CDC_Setup+0x1ae>
          break;
 80115a4:	bf00      	nop
      }
      break;
 80115a6:	e006      	b.n	80115b6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80115a8:	6839      	ldr	r1, [r7, #0]
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	f001 fcb3 	bl	8012f16 <USBD_CtlError>
      ret = USBD_FAIL;
 80115b0:	2303      	movs	r3, #3
 80115b2:	75fb      	strb	r3, [r7, #23]
      break;
 80115b4:	bf00      	nop
  }

  return (uint8_t)ret;
 80115b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80115b8:	4618      	mov	r0, r3
 80115ba:	3718      	adds	r7, #24
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}

080115c0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b084      	sub	sp, #16
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	6078      	str	r0, [r7, #4]
 80115c8:	460b      	mov	r3, r1
 80115ca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80115d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	32b0      	adds	r2, #176	; 0xb0
 80115de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d101      	bne.n	80115ea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80115e6:	2303      	movs	r3, #3
 80115e8:	e065      	b.n	80116b6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	32b0      	adds	r2, #176	; 0xb0
 80115f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80115fa:	78fb      	ldrb	r3, [r7, #3]
 80115fc:	f003 020f 	and.w	r2, r3, #15
 8011600:	6879      	ldr	r1, [r7, #4]
 8011602:	4613      	mov	r3, r2
 8011604:	009b      	lsls	r3, r3, #2
 8011606:	4413      	add	r3, r2
 8011608:	009b      	lsls	r3, r3, #2
 801160a:	440b      	add	r3, r1
 801160c:	3318      	adds	r3, #24
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d02f      	beq.n	8011674 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011614:	78fb      	ldrb	r3, [r7, #3]
 8011616:	f003 020f 	and.w	r2, r3, #15
 801161a:	6879      	ldr	r1, [r7, #4]
 801161c:	4613      	mov	r3, r2
 801161e:	009b      	lsls	r3, r3, #2
 8011620:	4413      	add	r3, r2
 8011622:	009b      	lsls	r3, r3, #2
 8011624:	440b      	add	r3, r1
 8011626:	3318      	adds	r3, #24
 8011628:	681a      	ldr	r2, [r3, #0]
 801162a:	78fb      	ldrb	r3, [r7, #3]
 801162c:	f003 010f 	and.w	r1, r3, #15
 8011630:	68f8      	ldr	r0, [r7, #12]
 8011632:	460b      	mov	r3, r1
 8011634:	00db      	lsls	r3, r3, #3
 8011636:	440b      	add	r3, r1
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	4403      	add	r3, r0
 801163c:	3344      	adds	r3, #68	; 0x44
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	fbb2 f1f3 	udiv	r1, r2, r3
 8011644:	fb01 f303 	mul.w	r3, r1, r3
 8011648:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801164a:	2b00      	cmp	r3, #0
 801164c:	d112      	bne.n	8011674 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801164e:	78fb      	ldrb	r3, [r7, #3]
 8011650:	f003 020f 	and.w	r2, r3, #15
 8011654:	6879      	ldr	r1, [r7, #4]
 8011656:	4613      	mov	r3, r2
 8011658:	009b      	lsls	r3, r3, #2
 801165a:	4413      	add	r3, r2
 801165c:	009b      	lsls	r3, r3, #2
 801165e:	440b      	add	r3, r1
 8011660:	3318      	adds	r3, #24
 8011662:	2200      	movs	r2, #0
 8011664:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011666:	78f9      	ldrb	r1, [r7, #3]
 8011668:	2300      	movs	r3, #0
 801166a:	2200      	movs	r2, #0
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f002 fa18 	bl	8013aa2 <USBD_LL_Transmit>
 8011672:	e01f      	b.n	80116b4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011674:	68bb      	ldr	r3, [r7, #8]
 8011676:	2200      	movs	r2, #0
 8011678:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011682:	687a      	ldr	r2, [r7, #4]
 8011684:	33b0      	adds	r3, #176	; 0xb0
 8011686:	009b      	lsls	r3, r3, #2
 8011688:	4413      	add	r3, r2
 801168a:	685b      	ldr	r3, [r3, #4]
 801168c:	691b      	ldr	r3, [r3, #16]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d010      	beq.n	80116b4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	33b0      	adds	r3, #176	; 0xb0
 801169c:	009b      	lsls	r3, r3, #2
 801169e:	4413      	add	r3, r2
 80116a0:	685b      	ldr	r3, [r3, #4]
 80116a2:	691b      	ldr	r3, [r3, #16]
 80116a4:	68ba      	ldr	r2, [r7, #8]
 80116a6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80116aa:	68ba      	ldr	r2, [r7, #8]
 80116ac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80116b0:	78fa      	ldrb	r2, [r7, #3]
 80116b2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80116b4:	2300      	movs	r3, #0
}
 80116b6:	4618      	mov	r0, r3
 80116b8:	3710      	adds	r7, #16
 80116ba:	46bd      	mov	sp, r7
 80116bc:	bd80      	pop	{r7, pc}

080116be <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80116be:	b580      	push	{r7, lr}
 80116c0:	b084      	sub	sp, #16
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
 80116c6:	460b      	mov	r3, r1
 80116c8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	32b0      	adds	r2, #176	; 0xb0
 80116d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	32b0      	adds	r2, #176	; 0xb0
 80116e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d101      	bne.n	80116f0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80116ec:	2303      	movs	r3, #3
 80116ee:	e01a      	b.n	8011726 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80116f0:	78fb      	ldrb	r3, [r7, #3]
 80116f2:	4619      	mov	r1, r3
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f002 fa16 	bl	8013b26 <USBD_LL_GetRxDataSize>
 80116fa:	4602      	mov	r2, r0
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011708:	687a      	ldr	r2, [r7, #4]
 801170a:	33b0      	adds	r3, #176	; 0xb0
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	4413      	add	r3, r2
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	68fa      	ldr	r2, [r7, #12]
 8011716:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801171a:	68fa      	ldr	r2, [r7, #12]
 801171c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011720:	4611      	mov	r1, r2
 8011722:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011724:	2300      	movs	r3, #0
}
 8011726:	4618      	mov	r0, r3
 8011728:	3710      	adds	r7, #16
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}

0801172e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801172e:	b580      	push	{r7, lr}
 8011730:	b084      	sub	sp, #16
 8011732:	af00      	add	r7, sp, #0
 8011734:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	32b0      	adds	r2, #176	; 0xb0
 8011740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011744:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d101      	bne.n	8011750 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801174c:	2303      	movs	r3, #3
 801174e:	e025      	b.n	801179c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011756:	687a      	ldr	r2, [r7, #4]
 8011758:	33b0      	adds	r3, #176	; 0xb0
 801175a:	009b      	lsls	r3, r3, #2
 801175c:	4413      	add	r3, r2
 801175e:	685b      	ldr	r3, [r3, #4]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d01a      	beq.n	801179a <USBD_CDC_EP0_RxReady+0x6c>
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801176a:	2bff      	cmp	r3, #255	; 0xff
 801176c:	d015      	beq.n	801179a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011774:	687a      	ldr	r2, [r7, #4]
 8011776:	33b0      	adds	r3, #176	; 0xb0
 8011778:	009b      	lsls	r3, r3, #2
 801177a:	4413      	add	r3, r2
 801177c:	685b      	ldr	r3, [r3, #4]
 801177e:	689b      	ldr	r3, [r3, #8]
 8011780:	68fa      	ldr	r2, [r7, #12]
 8011782:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8011786:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011788:	68fa      	ldr	r2, [r7, #12]
 801178a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801178e:	b292      	uxth	r2, r2
 8011790:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	22ff      	movs	r2, #255	; 0xff
 8011796:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801179a:	2300      	movs	r3, #0
}
 801179c:	4618      	mov	r0, r3
 801179e:	3710      	adds	r7, #16
 80117a0:	46bd      	mov	sp, r7
 80117a2:	bd80      	pop	{r7, pc}

080117a4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b086      	sub	sp, #24
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80117ac:	2182      	movs	r1, #130	; 0x82
 80117ae:	4818      	ldr	r0, [pc, #96]	; (8011810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80117b0:	f000 fd4f 	bl	8012252 <USBD_GetEpDesc>
 80117b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80117b6:	2101      	movs	r1, #1
 80117b8:	4815      	ldr	r0, [pc, #84]	; (8011810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80117ba:	f000 fd4a 	bl	8012252 <USBD_GetEpDesc>
 80117be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80117c0:	2181      	movs	r1, #129	; 0x81
 80117c2:	4813      	ldr	r0, [pc, #76]	; (8011810 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80117c4:	f000 fd45 	bl	8012252 <USBD_GetEpDesc>
 80117c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d002      	beq.n	80117d6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80117d0:	697b      	ldr	r3, [r7, #20]
 80117d2:	2210      	movs	r2, #16
 80117d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80117d6:	693b      	ldr	r3, [r7, #16]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d006      	beq.n	80117ea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	2200      	movs	r2, #0
 80117e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117e4:	711a      	strb	r2, [r3, #4]
 80117e6:	2200      	movs	r2, #0
 80117e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	d006      	beq.n	80117fe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	2200      	movs	r2, #0
 80117f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117f8:	711a      	strb	r2, [r3, #4]
 80117fa:	2200      	movs	r2, #0
 80117fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2243      	movs	r2, #67	; 0x43
 8011802:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011804:	4b02      	ldr	r3, [pc, #8]	; (8011810 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8011806:	4618      	mov	r0, r3
 8011808:	3718      	adds	r7, #24
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	24000068 	.word	0x24000068

08011814 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b086      	sub	sp, #24
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801181c:	2182      	movs	r1, #130	; 0x82
 801181e:	4818      	ldr	r0, [pc, #96]	; (8011880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011820:	f000 fd17 	bl	8012252 <USBD_GetEpDesc>
 8011824:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011826:	2101      	movs	r1, #1
 8011828:	4815      	ldr	r0, [pc, #84]	; (8011880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801182a:	f000 fd12 	bl	8012252 <USBD_GetEpDesc>
 801182e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011830:	2181      	movs	r1, #129	; 0x81
 8011832:	4813      	ldr	r0, [pc, #76]	; (8011880 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011834:	f000 fd0d 	bl	8012252 <USBD_GetEpDesc>
 8011838:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	2210      	movs	r2, #16
 8011844:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d006      	beq.n	801185a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	2200      	movs	r2, #0
 8011850:	711a      	strb	r2, [r3, #4]
 8011852:	2200      	movs	r2, #0
 8011854:	f042 0202 	orr.w	r2, r2, #2
 8011858:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d006      	beq.n	801186e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2200      	movs	r2, #0
 8011864:	711a      	strb	r2, [r3, #4]
 8011866:	2200      	movs	r2, #0
 8011868:	f042 0202 	orr.w	r2, r2, #2
 801186c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	2243      	movs	r2, #67	; 0x43
 8011872:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011874:	4b02      	ldr	r3, [pc, #8]	; (8011880 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011876:	4618      	mov	r0, r3
 8011878:	3718      	adds	r7, #24
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}
 801187e:	bf00      	nop
 8011880:	24000068 	.word	0x24000068

08011884 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b086      	sub	sp, #24
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801188c:	2182      	movs	r1, #130	; 0x82
 801188e:	4818      	ldr	r0, [pc, #96]	; (80118f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011890:	f000 fcdf 	bl	8012252 <USBD_GetEpDesc>
 8011894:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011896:	2101      	movs	r1, #1
 8011898:	4815      	ldr	r0, [pc, #84]	; (80118f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801189a:	f000 fcda 	bl	8012252 <USBD_GetEpDesc>
 801189e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80118a0:	2181      	movs	r1, #129	; 0x81
 80118a2:	4813      	ldr	r0, [pc, #76]	; (80118f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80118a4:	f000 fcd5 	bl	8012252 <USBD_GetEpDesc>
 80118a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80118aa:	697b      	ldr	r3, [r7, #20]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d002      	beq.n	80118b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	2210      	movs	r2, #16
 80118b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80118b6:	693b      	ldr	r3, [r7, #16]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d006      	beq.n	80118ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80118bc:	693b      	ldr	r3, [r7, #16]
 80118be:	2200      	movs	r2, #0
 80118c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80118c4:	711a      	strb	r2, [r3, #4]
 80118c6:	2200      	movs	r2, #0
 80118c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d006      	beq.n	80118de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	2200      	movs	r2, #0
 80118d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80118d8:	711a      	strb	r2, [r3, #4]
 80118da:	2200      	movs	r2, #0
 80118dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2243      	movs	r2, #67	; 0x43
 80118e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80118e4:	4b02      	ldr	r3, [pc, #8]	; (80118f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3718      	adds	r7, #24
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}
 80118ee:	bf00      	nop
 80118f0:	24000068 	.word	0x24000068

080118f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80118f4:	b480      	push	{r7}
 80118f6:	b083      	sub	sp, #12
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	220a      	movs	r2, #10
 8011900:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011902:	4b03      	ldr	r3, [pc, #12]	; (8011910 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011904:	4618      	mov	r0, r3
 8011906:	370c      	adds	r7, #12
 8011908:	46bd      	mov	sp, r7
 801190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190e:	4770      	bx	lr
 8011910:	24000024 	.word	0x24000024

08011914 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011914:	b480      	push	{r7}
 8011916:	b083      	sub	sp, #12
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801191e:	683b      	ldr	r3, [r7, #0]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d101      	bne.n	8011928 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011924:	2303      	movs	r3, #3
 8011926:	e009      	b.n	801193c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801192e:	687a      	ldr	r2, [r7, #4]
 8011930:	33b0      	adds	r3, #176	; 0xb0
 8011932:	009b      	lsls	r3, r3, #2
 8011934:	4413      	add	r3, r2
 8011936:	683a      	ldr	r2, [r7, #0]
 8011938:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011948:	b480      	push	{r7}
 801194a:	b087      	sub	sp, #28
 801194c:	af00      	add	r7, sp, #0
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	60b9      	str	r1, [r7, #8]
 8011952:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	32b0      	adds	r2, #176	; 0xb0
 801195e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011962:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d101      	bne.n	801196e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801196a:	2303      	movs	r3, #3
 801196c:	e008      	b.n	8011980 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	68ba      	ldr	r2, [r7, #8]
 8011972:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011976:	697b      	ldr	r3, [r7, #20]
 8011978:	687a      	ldr	r2, [r7, #4]
 801197a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801197e:	2300      	movs	r3, #0
}
 8011980:	4618      	mov	r0, r3
 8011982:	371c      	adds	r7, #28
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr

0801198c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801198c:	b480      	push	{r7}
 801198e:	b085      	sub	sp, #20
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	32b0      	adds	r2, #176	; 0xb0
 80119a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d101      	bne.n	80119b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80119ac:	2303      	movs	r3, #3
 80119ae:	e004      	b.n	80119ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	683a      	ldr	r2, [r7, #0]
 80119b4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80119b8:	2300      	movs	r3, #0
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3714      	adds	r7, #20
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr
	...

080119c8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	32b0      	adds	r2, #176	; 0xb0
 80119da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119de:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80119e0:	2301      	movs	r3, #1
 80119e2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d101      	bne.n	80119ee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80119ea:	2303      	movs	r3, #3
 80119ec:	e025      	b.n	8011a3a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d11f      	bne.n	8011a38 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80119f8:	68bb      	ldr	r3, [r7, #8]
 80119fa:	2201      	movs	r2, #1
 80119fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011a00:	4b10      	ldr	r3, [pc, #64]	; (8011a44 <USBD_CDC_TransmitPacket+0x7c>)
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	f003 020f 	and.w	r2, r3, #15
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	4613      	mov	r3, r2
 8011a12:	009b      	lsls	r3, r3, #2
 8011a14:	4413      	add	r3, r2
 8011a16:	009b      	lsls	r3, r3, #2
 8011a18:	4403      	add	r3, r0
 8011a1a:	3318      	adds	r3, #24
 8011a1c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011a1e:	4b09      	ldr	r3, [pc, #36]	; (8011a44 <USBD_CDC_TransmitPacket+0x7c>)
 8011a20:	7819      	ldrb	r1, [r3, #0]
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011a2e:	6878      	ldr	r0, [r7, #4]
 8011a30:	f002 f837 	bl	8013aa2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011a34:	2300      	movs	r3, #0
 8011a36:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	3710      	adds	r7, #16
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	bd80      	pop	{r7, pc}
 8011a42:	bf00      	nop
 8011a44:	240000ab 	.word	0x240000ab

08011a48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	32b0      	adds	r2, #176	; 0xb0
 8011a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	32b0      	adds	r2, #176	; 0xb0
 8011a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d101      	bne.n	8011a76 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011a72:	2303      	movs	r3, #3
 8011a74:	e018      	b.n	8011aa8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	7c1b      	ldrb	r3, [r3, #16]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d10a      	bne.n	8011a94 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011a7e:	4b0c      	ldr	r3, [pc, #48]	; (8011ab0 <USBD_CDC_ReceivePacket+0x68>)
 8011a80:	7819      	ldrb	r1, [r3, #0]
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f002 f829 	bl	8013ae4 <USBD_LL_PrepareReceive>
 8011a92:	e008      	b.n	8011aa6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011a94:	4b06      	ldr	r3, [pc, #24]	; (8011ab0 <USBD_CDC_ReceivePacket+0x68>)
 8011a96:	7819      	ldrb	r1, [r3, #0]
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a9e:	2340      	movs	r3, #64	; 0x40
 8011aa0:	6878      	ldr	r0, [r7, #4]
 8011aa2:	f002 f81f 	bl	8013ae4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011aa6:	2300      	movs	r3, #0
}
 8011aa8:	4618      	mov	r0, r3
 8011aaa:	3710      	adds	r7, #16
 8011aac:	46bd      	mov	sp, r7
 8011aae:	bd80      	pop	{r7, pc}
 8011ab0:	240000ac 	.word	0x240000ac

08011ab4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	60b9      	str	r1, [r7, #8]
 8011abe:	4613      	mov	r3, r2
 8011ac0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d101      	bne.n	8011acc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011ac8:	2303      	movs	r3, #3
 8011aca:	e01f      	b.n	8011b0c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011ae4:	68bb      	ldr	r3, [r7, #8]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d003      	beq.n	8011af2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	68ba      	ldr	r2, [r7, #8]
 8011aee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	2201      	movs	r2, #1
 8011af6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	79fa      	ldrb	r2, [r7, #7]
 8011afe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011b00:	68f8      	ldr	r0, [r7, #12]
 8011b02:	f001 fe93 	bl	801382c <USBD_LL_Init>
 8011b06:	4603      	mov	r3, r0
 8011b08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	3718      	adds	r7, #24
 8011b10:	46bd      	mov	sp, r7
 8011b12:	bd80      	pop	{r7, pc}

08011b14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d101      	bne.n	8011b2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011b28:	2303      	movs	r3, #3
 8011b2a:	e025      	b.n	8011b78 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	683a      	ldr	r2, [r7, #0]
 8011b30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	32ae      	adds	r2, #174	; 0xae
 8011b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d00f      	beq.n	8011b68 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	32ae      	adds	r2, #174	; 0xae
 8011b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b58:	f107 020e 	add.w	r2, r7, #14
 8011b5c:	4610      	mov	r0, r2
 8011b5e:	4798      	blx	r3
 8011b60:	4602      	mov	r2, r0
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011b6e:	1c5a      	adds	r2, r3, #1
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8011b76:	2300      	movs	r3, #0
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	3710      	adds	r7, #16
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	bd80      	pop	{r7, pc}

08011b80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b082      	sub	sp, #8
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f001 fea1 	bl	80138d0 <USBD_LL_Start>
 8011b8e:	4603      	mov	r3, r0
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011b98:	b480      	push	{r7}
 8011b9a:	b083      	sub	sp, #12
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011ba0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	370c      	adds	r7, #12
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bac:	4770      	bx	lr

08011bae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011bae:	b580      	push	{r7, lr}
 8011bb0:	b084      	sub	sp, #16
 8011bb2:	af00      	add	r7, sp, #0
 8011bb4:	6078      	str	r0, [r7, #4]
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d009      	beq.n	8011bdc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	78fa      	ldrb	r2, [r7, #3]
 8011bd2:	4611      	mov	r1, r2
 8011bd4:	6878      	ldr	r0, [r7, #4]
 8011bd6:	4798      	blx	r3
 8011bd8:	4603      	mov	r3, r0
 8011bda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3710      	adds	r7, #16
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}

08011be6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011be6:	b580      	push	{r7, lr}
 8011be8:	b084      	sub	sp, #16
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	6078      	str	r0, [r7, #4]
 8011bee:	460b      	mov	r3, r1
 8011bf0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bfc:	685b      	ldr	r3, [r3, #4]
 8011bfe:	78fa      	ldrb	r2, [r7, #3]
 8011c00:	4611      	mov	r1, r2
 8011c02:	6878      	ldr	r0, [r7, #4]
 8011c04:	4798      	blx	r3
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d001      	beq.n	8011c10 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011c0c:	2303      	movs	r3, #3
 8011c0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}

08011c1a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011c1a:	b580      	push	{r7, lr}
 8011c1c:	b084      	sub	sp, #16
 8011c1e:	af00      	add	r7, sp, #0
 8011c20:	6078      	str	r0, [r7, #4]
 8011c22:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c2a:	6839      	ldr	r1, [r7, #0]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f001 f938 	bl	8012ea2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	2201      	movs	r2, #1
 8011c36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011c40:	461a      	mov	r2, r3
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c4e:	f003 031f 	and.w	r3, r3, #31
 8011c52:	2b02      	cmp	r3, #2
 8011c54:	d01a      	beq.n	8011c8c <USBD_LL_SetupStage+0x72>
 8011c56:	2b02      	cmp	r3, #2
 8011c58:	d822      	bhi.n	8011ca0 <USBD_LL_SetupStage+0x86>
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d002      	beq.n	8011c64 <USBD_LL_SetupStage+0x4a>
 8011c5e:	2b01      	cmp	r3, #1
 8011c60:	d00a      	beq.n	8011c78 <USBD_LL_SetupStage+0x5e>
 8011c62:	e01d      	b.n	8011ca0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	6878      	ldr	r0, [r7, #4]
 8011c6e:	f000 fb65 	bl	801233c <USBD_StdDevReq>
 8011c72:	4603      	mov	r3, r0
 8011c74:	73fb      	strb	r3, [r7, #15]
      break;
 8011c76:	e020      	b.n	8011cba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c7e:	4619      	mov	r1, r3
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f000 fbcd 	bl	8012420 <USBD_StdItfReq>
 8011c86:	4603      	mov	r3, r0
 8011c88:	73fb      	strb	r3, [r7, #15]
      break;
 8011c8a:	e016      	b.n	8011cba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011c92:	4619      	mov	r1, r3
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f000 fc2f 	bl	80124f8 <USBD_StdEPReq>
 8011c9a:	4603      	mov	r3, r0
 8011c9c:	73fb      	strb	r3, [r7, #15]
      break;
 8011c9e:	e00c      	b.n	8011cba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011ca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011caa:	b2db      	uxtb	r3, r3
 8011cac:	4619      	mov	r1, r3
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f001 fe6e 	bl	8013990 <USBD_LL_StallEP>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8011cb8:	bf00      	nop
  }

  return ret;
 8011cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	3710      	adds	r7, #16
 8011cc0:	46bd      	mov	sp, r7
 8011cc2:	bd80      	pop	{r7, pc}

08011cc4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011cc4:	b580      	push	{r7, lr}
 8011cc6:	b086      	sub	sp, #24
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	60f8      	str	r0, [r7, #12]
 8011ccc:	460b      	mov	r3, r1
 8011cce:	607a      	str	r2, [r7, #4]
 8011cd0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011cd6:	7afb      	ldrb	r3, [r7, #11]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d16e      	bne.n	8011dba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011cdc:	68fb      	ldr	r3, [r7, #12]
 8011cde:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011ce2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011cea:	2b03      	cmp	r3, #3
 8011cec:	f040 8098 	bne.w	8011e20 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	689a      	ldr	r2, [r3, #8]
 8011cf4:	693b      	ldr	r3, [r7, #16]
 8011cf6:	68db      	ldr	r3, [r3, #12]
 8011cf8:	429a      	cmp	r2, r3
 8011cfa:	d913      	bls.n	8011d24 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	689a      	ldr	r2, [r3, #8]
 8011d00:	693b      	ldr	r3, [r7, #16]
 8011d02:	68db      	ldr	r3, [r3, #12]
 8011d04:	1ad2      	subs	r2, r2, r3
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	68da      	ldr	r2, [r3, #12]
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	4293      	cmp	r3, r2
 8011d14:	bf28      	it	cs
 8011d16:	4613      	movcs	r3, r2
 8011d18:	461a      	mov	r2, r3
 8011d1a:	6879      	ldr	r1, [r7, #4]
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f001 f9b4 	bl	801308a <USBD_CtlContinueRx>
 8011d22:	e07d      	b.n	8011e20 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d2a:	f003 031f 	and.w	r3, r3, #31
 8011d2e:	2b02      	cmp	r3, #2
 8011d30:	d014      	beq.n	8011d5c <USBD_LL_DataOutStage+0x98>
 8011d32:	2b02      	cmp	r3, #2
 8011d34:	d81d      	bhi.n	8011d72 <USBD_LL_DataOutStage+0xae>
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d002      	beq.n	8011d40 <USBD_LL_DataOutStage+0x7c>
 8011d3a:	2b01      	cmp	r3, #1
 8011d3c:	d003      	beq.n	8011d46 <USBD_LL_DataOutStage+0x82>
 8011d3e:	e018      	b.n	8011d72 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011d40:	2300      	movs	r3, #0
 8011d42:	75bb      	strb	r3, [r7, #22]
            break;
 8011d44:	e018      	b.n	8011d78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011d4c:	b2db      	uxtb	r3, r3
 8011d4e:	4619      	mov	r1, r3
 8011d50:	68f8      	ldr	r0, [r7, #12]
 8011d52:	f000 fa64 	bl	801221e <USBD_CoreFindIF>
 8011d56:	4603      	mov	r3, r0
 8011d58:	75bb      	strb	r3, [r7, #22]
            break;
 8011d5a:	e00d      	b.n	8011d78 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011d62:	b2db      	uxtb	r3, r3
 8011d64:	4619      	mov	r1, r3
 8011d66:	68f8      	ldr	r0, [r7, #12]
 8011d68:	f000 fa66 	bl	8012238 <USBD_CoreFindEP>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	75bb      	strb	r3, [r7, #22]
            break;
 8011d70:	e002      	b.n	8011d78 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011d72:	2300      	movs	r3, #0
 8011d74:	75bb      	strb	r3, [r7, #22]
            break;
 8011d76:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011d78:	7dbb      	ldrb	r3, [r7, #22]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d119      	bne.n	8011db2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011d7e:	68fb      	ldr	r3, [r7, #12]
 8011d80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011d84:	b2db      	uxtb	r3, r3
 8011d86:	2b03      	cmp	r3, #3
 8011d88:	d113      	bne.n	8011db2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011d8a:	7dba      	ldrb	r2, [r7, #22]
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	32ae      	adds	r2, #174	; 0xae
 8011d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d94:	691b      	ldr	r3, [r3, #16]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d00b      	beq.n	8011db2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011d9a:	7dba      	ldrb	r2, [r7, #22]
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011da2:	7dba      	ldrb	r2, [r7, #22]
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	32ae      	adds	r2, #174	; 0xae
 8011da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dac:	691b      	ldr	r3, [r3, #16]
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011db2:	68f8      	ldr	r0, [r7, #12]
 8011db4:	f001 f97a 	bl	80130ac <USBD_CtlSendStatus>
 8011db8:	e032      	b.n	8011e20 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011dba:	7afb      	ldrb	r3, [r7, #11]
 8011dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	4619      	mov	r1, r3
 8011dc4:	68f8      	ldr	r0, [r7, #12]
 8011dc6:	f000 fa37 	bl	8012238 <USBD_CoreFindEP>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011dce:	7dbb      	ldrb	r3, [r7, #22]
 8011dd0:	2bff      	cmp	r3, #255	; 0xff
 8011dd2:	d025      	beq.n	8011e20 <USBD_LL_DataOutStage+0x15c>
 8011dd4:	7dbb      	ldrb	r3, [r7, #22]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d122      	bne.n	8011e20 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011de0:	b2db      	uxtb	r3, r3
 8011de2:	2b03      	cmp	r3, #3
 8011de4:	d117      	bne.n	8011e16 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011de6:	7dba      	ldrb	r2, [r7, #22]
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	32ae      	adds	r2, #174	; 0xae
 8011dec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011df0:	699b      	ldr	r3, [r3, #24]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d00f      	beq.n	8011e16 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011df6:	7dba      	ldrb	r2, [r7, #22]
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011dfe:	7dba      	ldrb	r2, [r7, #22]
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	32ae      	adds	r2, #174	; 0xae
 8011e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e08:	699b      	ldr	r3, [r3, #24]
 8011e0a:	7afa      	ldrb	r2, [r7, #11]
 8011e0c:	4611      	mov	r1, r2
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	4798      	blx	r3
 8011e12:	4603      	mov	r3, r0
 8011e14:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011e16:	7dfb      	ldrb	r3, [r7, #23]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d001      	beq.n	8011e20 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011e1c:	7dfb      	ldrb	r3, [r7, #23]
 8011e1e:	e000      	b.n	8011e22 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011e20:	2300      	movs	r3, #0
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	3718      	adds	r7, #24
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011e2a:	b580      	push	{r7, lr}
 8011e2c:	b086      	sub	sp, #24
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	60f8      	str	r0, [r7, #12]
 8011e32:	460b      	mov	r3, r1
 8011e34:	607a      	str	r2, [r7, #4]
 8011e36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011e38:	7afb      	ldrb	r3, [r7, #11]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d16f      	bne.n	8011f1e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	3314      	adds	r3, #20
 8011e42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011e4a:	2b02      	cmp	r3, #2
 8011e4c:	d15a      	bne.n	8011f04 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	689a      	ldr	r2, [r3, #8]
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	68db      	ldr	r3, [r3, #12]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d914      	bls.n	8011e84 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	689a      	ldr	r2, [r3, #8]
 8011e5e:	693b      	ldr	r3, [r7, #16]
 8011e60:	68db      	ldr	r3, [r3, #12]
 8011e62:	1ad2      	subs	r2, r2, r3
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	689b      	ldr	r3, [r3, #8]
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	6879      	ldr	r1, [r7, #4]
 8011e70:	68f8      	ldr	r0, [r7, #12]
 8011e72:	f001 f8dc 	bl	801302e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e76:	2300      	movs	r3, #0
 8011e78:	2200      	movs	r2, #0
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	68f8      	ldr	r0, [r7, #12]
 8011e7e:	f001 fe31 	bl	8013ae4 <USBD_LL_PrepareReceive>
 8011e82:	e03f      	b.n	8011f04 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	68da      	ldr	r2, [r3, #12]
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d11c      	bne.n	8011eca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011e90:	693b      	ldr	r3, [r7, #16]
 8011e92:	685a      	ldr	r2, [r3, #4]
 8011e94:	693b      	ldr	r3, [r7, #16]
 8011e96:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d316      	bcc.n	8011eca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011e9c:	693b      	ldr	r3, [r7, #16]
 8011e9e:	685a      	ldr	r2, [r3, #4]
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d20f      	bcs.n	8011eca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011eaa:	2200      	movs	r2, #0
 8011eac:	2100      	movs	r1, #0
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	f001 f8bd 	bl	801302e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011eb4:	68fb      	ldr	r3, [r7, #12]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	68f8      	ldr	r0, [r7, #12]
 8011ec4:	f001 fe0e 	bl	8013ae4 <USBD_LL_PrepareReceive>
 8011ec8:	e01c      	b.n	8011f04 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ed0:	b2db      	uxtb	r3, r3
 8011ed2:	2b03      	cmp	r3, #3
 8011ed4:	d10f      	bne.n	8011ef6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011edc:	68db      	ldr	r3, [r3, #12]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d009      	beq.n	8011ef6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ef0:	68db      	ldr	r3, [r3, #12]
 8011ef2:	68f8      	ldr	r0, [r7, #12]
 8011ef4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ef6:	2180      	movs	r1, #128	; 0x80
 8011ef8:	68f8      	ldr	r0, [r7, #12]
 8011efa:	f001 fd49 	bl	8013990 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011efe:	68f8      	ldr	r0, [r7, #12]
 8011f00:	f001 f8e7 	bl	80130d2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d03a      	beq.n	8011f84 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011f0e:	68f8      	ldr	r0, [r7, #12]
 8011f10:	f7ff fe42 	bl	8011b98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	2200      	movs	r2, #0
 8011f18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011f1c:	e032      	b.n	8011f84 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011f1e:	7afb      	ldrb	r3, [r7, #11]
 8011f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	4619      	mov	r1, r3
 8011f28:	68f8      	ldr	r0, [r7, #12]
 8011f2a:	f000 f985 	bl	8012238 <USBD_CoreFindEP>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f32:	7dfb      	ldrb	r3, [r7, #23]
 8011f34:	2bff      	cmp	r3, #255	; 0xff
 8011f36:	d025      	beq.n	8011f84 <USBD_LL_DataInStage+0x15a>
 8011f38:	7dfb      	ldrb	r3, [r7, #23]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d122      	bne.n	8011f84 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f44:	b2db      	uxtb	r3, r3
 8011f46:	2b03      	cmp	r3, #3
 8011f48:	d11c      	bne.n	8011f84 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011f4a:	7dfa      	ldrb	r2, [r7, #23]
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	32ae      	adds	r2, #174	; 0xae
 8011f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f54:	695b      	ldr	r3, [r3, #20]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d014      	beq.n	8011f84 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011f5a:	7dfa      	ldrb	r2, [r7, #23]
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011f62:	7dfa      	ldrb	r2, [r7, #23]
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	32ae      	adds	r2, #174	; 0xae
 8011f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f6c:	695b      	ldr	r3, [r3, #20]
 8011f6e:	7afa      	ldrb	r2, [r7, #11]
 8011f70:	4611      	mov	r1, r2
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	4798      	blx	r3
 8011f76:	4603      	mov	r3, r0
 8011f78:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011f7a:	7dbb      	ldrb	r3, [r7, #22]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d001      	beq.n	8011f84 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011f80:	7dbb      	ldrb	r3, [r7, #22]
 8011f82:	e000      	b.n	8011f86 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011f84:	2300      	movs	r3, #0
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3718      	adds	r7, #24
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}

08011f8e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011f8e:	b580      	push	{r7, lr}
 8011f90:	b084      	sub	sp, #16
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011f96:	2300      	movs	r3, #0
 8011f98:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2201      	movs	r2, #1
 8011f9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2200      	movs	r2, #0
 8011fae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	2200      	movs	r2, #0
 8011fbc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d014      	beq.n	8011ff4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fd0:	685b      	ldr	r3, [r3, #4]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d00e      	beq.n	8011ff4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	687a      	ldr	r2, [r7, #4]
 8011fe0:	6852      	ldr	r2, [r2, #4]
 8011fe2:	b2d2      	uxtb	r2, r2
 8011fe4:	4611      	mov	r1, r2
 8011fe6:	6878      	ldr	r0, [r7, #4]
 8011fe8:	4798      	blx	r3
 8011fea:	4603      	mov	r3, r0
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d001      	beq.n	8011ff4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011ff0:	2303      	movs	r3, #3
 8011ff2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011ff4:	2340      	movs	r3, #64	; 0x40
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	2100      	movs	r1, #0
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f001 fc83 	bl	8013906 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2201      	movs	r2, #1
 8012004:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2240      	movs	r2, #64	; 0x40
 801200c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012010:	2340      	movs	r3, #64	; 0x40
 8012012:	2200      	movs	r2, #0
 8012014:	2180      	movs	r1, #128	; 0x80
 8012016:	6878      	ldr	r0, [r7, #4]
 8012018:	f001 fc75 	bl	8013906 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2201      	movs	r2, #1
 8012020:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	2240      	movs	r2, #64	; 0x40
 8012026:	621a      	str	r2, [r3, #32]

  return ret;
 8012028:	7bfb      	ldrb	r3, [r7, #15]
}
 801202a:	4618      	mov	r0, r3
 801202c:	3710      	adds	r7, #16
 801202e:	46bd      	mov	sp, r7
 8012030:	bd80      	pop	{r7, pc}

08012032 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012032:	b480      	push	{r7}
 8012034:	b083      	sub	sp, #12
 8012036:	af00      	add	r7, sp, #0
 8012038:	6078      	str	r0, [r7, #4]
 801203a:	460b      	mov	r3, r1
 801203c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	78fa      	ldrb	r2, [r7, #3]
 8012042:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	370c      	adds	r7, #12
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr

08012052 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012052:	b480      	push	{r7}
 8012054:	b083      	sub	sp, #12
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012060:	b2db      	uxtb	r3, r3
 8012062:	2b04      	cmp	r3, #4
 8012064:	d006      	beq.n	8012074 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801206c:	b2da      	uxtb	r2, r3
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	2204      	movs	r2, #4
 8012078:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801207c:	2300      	movs	r3, #0
}
 801207e:	4618      	mov	r0, r3
 8012080:	370c      	adds	r7, #12
 8012082:	46bd      	mov	sp, r7
 8012084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012088:	4770      	bx	lr

0801208a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801208a:	b480      	push	{r7}
 801208c:	b083      	sub	sp, #12
 801208e:	af00      	add	r7, sp, #0
 8012090:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012098:	b2db      	uxtb	r3, r3
 801209a:	2b04      	cmp	r3, #4
 801209c:	d106      	bne.n	80120ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80120a4:	b2da      	uxtb	r2, r3
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80120ac:	2300      	movs	r3, #0
}
 80120ae:	4618      	mov	r0, r3
 80120b0:	370c      	adds	r7, #12
 80120b2:	46bd      	mov	sp, r7
 80120b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b8:	4770      	bx	lr

080120ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b082      	sub	sp, #8
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	2b03      	cmp	r3, #3
 80120cc:	d110      	bne.n	80120f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d00b      	beq.n	80120f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120de:	69db      	ldr	r3, [r3, #28]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d005      	beq.n	80120f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120ea:	69db      	ldr	r3, [r3, #28]
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80120f0:	2300      	movs	r3, #0
}
 80120f2:	4618      	mov	r0, r3
 80120f4:	3708      	adds	r7, #8
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}

080120fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80120fa:	b580      	push	{r7, lr}
 80120fc:	b082      	sub	sp, #8
 80120fe:	af00      	add	r7, sp, #0
 8012100:	6078      	str	r0, [r7, #4]
 8012102:	460b      	mov	r3, r1
 8012104:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	32ae      	adds	r2, #174	; 0xae
 8012110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d101      	bne.n	801211c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012118:	2303      	movs	r3, #3
 801211a:	e01c      	b.n	8012156 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012122:	b2db      	uxtb	r3, r3
 8012124:	2b03      	cmp	r3, #3
 8012126:	d115      	bne.n	8012154 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	32ae      	adds	r2, #174	; 0xae
 8012132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012136:	6a1b      	ldr	r3, [r3, #32]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d00b      	beq.n	8012154 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	32ae      	adds	r2, #174	; 0xae
 8012146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801214a:	6a1b      	ldr	r3, [r3, #32]
 801214c:	78fa      	ldrb	r2, [r7, #3]
 801214e:	4611      	mov	r1, r2
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012154:	2300      	movs	r3, #0
}
 8012156:	4618      	mov	r0, r3
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}

0801215e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801215e:	b580      	push	{r7, lr}
 8012160:	b082      	sub	sp, #8
 8012162:	af00      	add	r7, sp, #0
 8012164:	6078      	str	r0, [r7, #4]
 8012166:	460b      	mov	r3, r1
 8012168:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	32ae      	adds	r2, #174	; 0xae
 8012174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d101      	bne.n	8012180 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801217c:	2303      	movs	r3, #3
 801217e:	e01c      	b.n	80121ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012186:	b2db      	uxtb	r3, r3
 8012188:	2b03      	cmp	r3, #3
 801218a:	d115      	bne.n	80121b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	32ae      	adds	r2, #174	; 0xae
 8012196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801219c:	2b00      	cmp	r3, #0
 801219e:	d00b      	beq.n	80121b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	32ae      	adds	r2, #174	; 0xae
 80121aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b0:	78fa      	ldrb	r2, [r7, #3]
 80121b2:	4611      	mov	r1, r2
 80121b4:	6878      	ldr	r0, [r7, #4]
 80121b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80121b8:	2300      	movs	r3, #0
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3708      	adds	r7, #8
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80121c2:	b480      	push	{r7}
 80121c4:	b083      	sub	sp, #12
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80121ca:	2300      	movs	r3, #0
}
 80121cc:	4618      	mov	r0, r3
 80121ce:	370c      	adds	r7, #12
 80121d0:	46bd      	mov	sp, r7
 80121d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d6:	4770      	bx	lr

080121d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b084      	sub	sp, #16
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80121e0:	2300      	movs	r3, #0
 80121e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	2201      	movs	r2, #1
 80121e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d00e      	beq.n	8012214 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121fc:	685b      	ldr	r3, [r3, #4]
 80121fe:	687a      	ldr	r2, [r7, #4]
 8012200:	6852      	ldr	r2, [r2, #4]
 8012202:	b2d2      	uxtb	r2, r2
 8012204:	4611      	mov	r1, r2
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	4798      	blx	r3
 801220a:	4603      	mov	r3, r0
 801220c:	2b00      	cmp	r3, #0
 801220e:	d001      	beq.n	8012214 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012210:	2303      	movs	r3, #3
 8012212:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012214:	7bfb      	ldrb	r3, [r7, #15]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3710      	adds	r7, #16
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}

0801221e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801221e:	b480      	push	{r7}
 8012220:	b083      	sub	sp, #12
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
 8012226:	460b      	mov	r3, r1
 8012228:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801222a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801222c:	4618      	mov	r0, r3
 801222e:	370c      	adds	r7, #12
 8012230:	46bd      	mov	sp, r7
 8012232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012236:	4770      	bx	lr

08012238 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012238:	b480      	push	{r7}
 801223a:	b083      	sub	sp, #12
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
 8012240:	460b      	mov	r3, r1
 8012242:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012244:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012246:	4618      	mov	r0, r3
 8012248:	370c      	adds	r7, #12
 801224a:	46bd      	mov	sp, r7
 801224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012250:	4770      	bx	lr

08012252 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012252:	b580      	push	{r7, lr}
 8012254:	b086      	sub	sp, #24
 8012256:	af00      	add	r7, sp, #0
 8012258:	6078      	str	r0, [r7, #4]
 801225a:	460b      	mov	r3, r1
 801225c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012266:	2300      	movs	r3, #0
 8012268:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	885b      	ldrh	r3, [r3, #2]
 801226e:	b29a      	uxth	r2, r3
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	b29b      	uxth	r3, r3
 8012276:	429a      	cmp	r2, r3
 8012278:	d920      	bls.n	80122bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	781b      	ldrb	r3, [r3, #0]
 801227e:	b29b      	uxth	r3, r3
 8012280:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012282:	e013      	b.n	80122ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012284:	f107 030a 	add.w	r3, r7, #10
 8012288:	4619      	mov	r1, r3
 801228a:	6978      	ldr	r0, [r7, #20]
 801228c:	f000 f81b 	bl	80122c6 <USBD_GetNextDesc>
 8012290:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012292:	697b      	ldr	r3, [r7, #20]
 8012294:	785b      	ldrb	r3, [r3, #1]
 8012296:	2b05      	cmp	r3, #5
 8012298:	d108      	bne.n	80122ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801229a:	697b      	ldr	r3, [r7, #20]
 801229c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801229e:	693b      	ldr	r3, [r7, #16]
 80122a0:	789b      	ldrb	r3, [r3, #2]
 80122a2:	78fa      	ldrb	r2, [r7, #3]
 80122a4:	429a      	cmp	r2, r3
 80122a6:	d008      	beq.n	80122ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80122a8:	2300      	movs	r3, #0
 80122aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	885b      	ldrh	r3, [r3, #2]
 80122b0:	b29a      	uxth	r2, r3
 80122b2:	897b      	ldrh	r3, [r7, #10]
 80122b4:	429a      	cmp	r2, r3
 80122b6:	d8e5      	bhi.n	8012284 <USBD_GetEpDesc+0x32>
 80122b8:	e000      	b.n	80122bc <USBD_GetEpDesc+0x6a>
          break;
 80122ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80122bc:	693b      	ldr	r3, [r7, #16]
}
 80122be:	4618      	mov	r0, r3
 80122c0:	3718      	adds	r7, #24
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}

080122c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80122c6:	b480      	push	{r7}
 80122c8:	b085      	sub	sp, #20
 80122ca:	af00      	add	r7, sp, #0
 80122cc:	6078      	str	r0, [r7, #4]
 80122ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	881a      	ldrh	r2, [r3, #0]
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	b29b      	uxth	r3, r3
 80122de:	4413      	add	r3, r2
 80122e0:	b29a      	uxth	r2, r3
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	461a      	mov	r2, r3
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	4413      	add	r3, r2
 80122f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80122f2:	68fb      	ldr	r3, [r7, #12]
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3714      	adds	r7, #20
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012300:	b480      	push	{r7}
 8012302:	b087      	sub	sp, #28
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	3301      	adds	r3, #1
 8012316:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	781b      	ldrb	r3, [r3, #0]
 801231c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801231e:	8a3b      	ldrh	r3, [r7, #16]
 8012320:	021b      	lsls	r3, r3, #8
 8012322:	b21a      	sxth	r2, r3
 8012324:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012328:	4313      	orrs	r3, r2
 801232a:	b21b      	sxth	r3, r3
 801232c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801232e:	89fb      	ldrh	r3, [r7, #14]
}
 8012330:	4618      	mov	r0, r3
 8012332:	371c      	adds	r7, #28
 8012334:	46bd      	mov	sp, r7
 8012336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233a:	4770      	bx	lr

0801233c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b084      	sub	sp, #16
 8012340:	af00      	add	r7, sp, #0
 8012342:	6078      	str	r0, [r7, #4]
 8012344:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012346:	2300      	movs	r3, #0
 8012348:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801234a:	683b      	ldr	r3, [r7, #0]
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012352:	2b40      	cmp	r3, #64	; 0x40
 8012354:	d005      	beq.n	8012362 <USBD_StdDevReq+0x26>
 8012356:	2b40      	cmp	r3, #64	; 0x40
 8012358:	d857      	bhi.n	801240a <USBD_StdDevReq+0xce>
 801235a:	2b00      	cmp	r3, #0
 801235c:	d00f      	beq.n	801237e <USBD_StdDevReq+0x42>
 801235e:	2b20      	cmp	r3, #32
 8012360:	d153      	bne.n	801240a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	32ae      	adds	r2, #174	; 0xae
 801236c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012370:	689b      	ldr	r3, [r3, #8]
 8012372:	6839      	ldr	r1, [r7, #0]
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	4798      	blx	r3
 8012378:	4603      	mov	r3, r0
 801237a:	73fb      	strb	r3, [r7, #15]
      break;
 801237c:	e04a      	b.n	8012414 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	785b      	ldrb	r3, [r3, #1]
 8012382:	2b09      	cmp	r3, #9
 8012384:	d83b      	bhi.n	80123fe <USBD_StdDevReq+0xc2>
 8012386:	a201      	add	r2, pc, #4	; (adr r2, 801238c <USBD_StdDevReq+0x50>)
 8012388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801238c:	080123e1 	.word	0x080123e1
 8012390:	080123f5 	.word	0x080123f5
 8012394:	080123ff 	.word	0x080123ff
 8012398:	080123eb 	.word	0x080123eb
 801239c:	080123ff 	.word	0x080123ff
 80123a0:	080123bf 	.word	0x080123bf
 80123a4:	080123b5 	.word	0x080123b5
 80123a8:	080123ff 	.word	0x080123ff
 80123ac:	080123d7 	.word	0x080123d7
 80123b0:	080123c9 	.word	0x080123c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80123b4:	6839      	ldr	r1, [r7, #0]
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f000 fa3c 	bl	8012834 <USBD_GetDescriptor>
          break;
 80123bc:	e024      	b.n	8012408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80123be:	6839      	ldr	r1, [r7, #0]
 80123c0:	6878      	ldr	r0, [r7, #4]
 80123c2:	f000 fbcb 	bl	8012b5c <USBD_SetAddress>
          break;
 80123c6:	e01f      	b.n	8012408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80123c8:	6839      	ldr	r1, [r7, #0]
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 fc0a 	bl	8012be4 <USBD_SetConfig>
 80123d0:	4603      	mov	r3, r0
 80123d2:	73fb      	strb	r3, [r7, #15]
          break;
 80123d4:	e018      	b.n	8012408 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80123d6:	6839      	ldr	r1, [r7, #0]
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f000 fcad 	bl	8012d38 <USBD_GetConfig>
          break;
 80123de:	e013      	b.n	8012408 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80123e0:	6839      	ldr	r1, [r7, #0]
 80123e2:	6878      	ldr	r0, [r7, #4]
 80123e4:	f000 fcde 	bl	8012da4 <USBD_GetStatus>
          break;
 80123e8:	e00e      	b.n	8012408 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80123ea:	6839      	ldr	r1, [r7, #0]
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f000 fd0d 	bl	8012e0c <USBD_SetFeature>
          break;
 80123f2:	e009      	b.n	8012408 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80123f4:	6839      	ldr	r1, [r7, #0]
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f000 fd31 	bl	8012e5e <USBD_ClrFeature>
          break;
 80123fc:	e004      	b.n	8012408 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80123fe:	6839      	ldr	r1, [r7, #0]
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 fd88 	bl	8012f16 <USBD_CtlError>
          break;
 8012406:	bf00      	nop
      }
      break;
 8012408:	e004      	b.n	8012414 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801240a:	6839      	ldr	r1, [r7, #0]
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f000 fd82 	bl	8012f16 <USBD_CtlError>
      break;
 8012412:	bf00      	nop
  }

  return ret;
 8012414:	7bfb      	ldrb	r3, [r7, #15]
}
 8012416:	4618      	mov	r0, r3
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop

08012420 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012420:	b580      	push	{r7, lr}
 8012422:	b084      	sub	sp, #16
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
 8012428:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801242a:	2300      	movs	r3, #0
 801242c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012436:	2b40      	cmp	r3, #64	; 0x40
 8012438:	d005      	beq.n	8012446 <USBD_StdItfReq+0x26>
 801243a:	2b40      	cmp	r3, #64	; 0x40
 801243c:	d852      	bhi.n	80124e4 <USBD_StdItfReq+0xc4>
 801243e:	2b00      	cmp	r3, #0
 8012440:	d001      	beq.n	8012446 <USBD_StdItfReq+0x26>
 8012442:	2b20      	cmp	r3, #32
 8012444:	d14e      	bne.n	80124e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801244c:	b2db      	uxtb	r3, r3
 801244e:	3b01      	subs	r3, #1
 8012450:	2b02      	cmp	r3, #2
 8012452:	d840      	bhi.n	80124d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012454:	683b      	ldr	r3, [r7, #0]
 8012456:	889b      	ldrh	r3, [r3, #4]
 8012458:	b2db      	uxtb	r3, r3
 801245a:	2b01      	cmp	r3, #1
 801245c:	d836      	bhi.n	80124cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	889b      	ldrh	r3, [r3, #4]
 8012462:	b2db      	uxtb	r3, r3
 8012464:	4619      	mov	r1, r3
 8012466:	6878      	ldr	r0, [r7, #4]
 8012468:	f7ff fed9 	bl	801221e <USBD_CoreFindIF>
 801246c:	4603      	mov	r3, r0
 801246e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012470:	7bbb      	ldrb	r3, [r7, #14]
 8012472:	2bff      	cmp	r3, #255	; 0xff
 8012474:	d01d      	beq.n	80124b2 <USBD_StdItfReq+0x92>
 8012476:	7bbb      	ldrb	r3, [r7, #14]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d11a      	bne.n	80124b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801247c:	7bba      	ldrb	r2, [r7, #14]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	32ae      	adds	r2, #174	; 0xae
 8012482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012486:	689b      	ldr	r3, [r3, #8]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d00f      	beq.n	80124ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801248c:	7bba      	ldrb	r2, [r7, #14]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012494:	7bba      	ldrb	r2, [r7, #14]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	32ae      	adds	r2, #174	; 0xae
 801249a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801249e:	689b      	ldr	r3, [r3, #8]
 80124a0:	6839      	ldr	r1, [r7, #0]
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	4798      	blx	r3
 80124a6:	4603      	mov	r3, r0
 80124a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80124aa:	e004      	b.n	80124b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80124ac:	2303      	movs	r3, #3
 80124ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80124b0:	e001      	b.n	80124b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80124b2:	2303      	movs	r3, #3
 80124b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	88db      	ldrh	r3, [r3, #6]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d110      	bne.n	80124e0 <USBD_StdItfReq+0xc0>
 80124be:	7bfb      	ldrb	r3, [r7, #15]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d10d      	bne.n	80124e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f000 fdf1 	bl	80130ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80124ca:	e009      	b.n	80124e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80124cc:	6839      	ldr	r1, [r7, #0]
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 fd21 	bl	8012f16 <USBD_CtlError>
          break;
 80124d4:	e004      	b.n	80124e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80124d6:	6839      	ldr	r1, [r7, #0]
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f000 fd1c 	bl	8012f16 <USBD_CtlError>
          break;
 80124de:	e000      	b.n	80124e2 <USBD_StdItfReq+0xc2>
          break;
 80124e0:	bf00      	nop
      }
      break;
 80124e2:	e004      	b.n	80124ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80124e4:	6839      	ldr	r1, [r7, #0]
 80124e6:	6878      	ldr	r0, [r7, #4]
 80124e8:	f000 fd15 	bl	8012f16 <USBD_CtlError>
      break;
 80124ec:	bf00      	nop
  }

  return ret;
 80124ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	3710      	adds	r7, #16
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012502:	2300      	movs	r3, #0
 8012504:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	889b      	ldrh	r3, [r3, #4]
 801250a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	781b      	ldrb	r3, [r3, #0]
 8012510:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012514:	2b40      	cmp	r3, #64	; 0x40
 8012516:	d007      	beq.n	8012528 <USBD_StdEPReq+0x30>
 8012518:	2b40      	cmp	r3, #64	; 0x40
 801251a:	f200 817f 	bhi.w	801281c <USBD_StdEPReq+0x324>
 801251e:	2b00      	cmp	r3, #0
 8012520:	d02a      	beq.n	8012578 <USBD_StdEPReq+0x80>
 8012522:	2b20      	cmp	r3, #32
 8012524:	f040 817a 	bne.w	801281c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012528:	7bbb      	ldrb	r3, [r7, #14]
 801252a:	4619      	mov	r1, r3
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f7ff fe83 	bl	8012238 <USBD_CoreFindEP>
 8012532:	4603      	mov	r3, r0
 8012534:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012536:	7b7b      	ldrb	r3, [r7, #13]
 8012538:	2bff      	cmp	r3, #255	; 0xff
 801253a:	f000 8174 	beq.w	8012826 <USBD_StdEPReq+0x32e>
 801253e:	7b7b      	ldrb	r3, [r7, #13]
 8012540:	2b00      	cmp	r3, #0
 8012542:	f040 8170 	bne.w	8012826 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012546:	7b7a      	ldrb	r2, [r7, #13]
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801254e:	7b7a      	ldrb	r2, [r7, #13]
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	32ae      	adds	r2, #174	; 0xae
 8012554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012558:	689b      	ldr	r3, [r3, #8]
 801255a:	2b00      	cmp	r3, #0
 801255c:	f000 8163 	beq.w	8012826 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012560:	7b7a      	ldrb	r2, [r7, #13]
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	32ae      	adds	r2, #174	; 0xae
 8012566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801256a:	689b      	ldr	r3, [r3, #8]
 801256c:	6839      	ldr	r1, [r7, #0]
 801256e:	6878      	ldr	r0, [r7, #4]
 8012570:	4798      	blx	r3
 8012572:	4603      	mov	r3, r0
 8012574:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012576:	e156      	b.n	8012826 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012578:	683b      	ldr	r3, [r7, #0]
 801257a:	785b      	ldrb	r3, [r3, #1]
 801257c:	2b03      	cmp	r3, #3
 801257e:	d008      	beq.n	8012592 <USBD_StdEPReq+0x9a>
 8012580:	2b03      	cmp	r3, #3
 8012582:	f300 8145 	bgt.w	8012810 <USBD_StdEPReq+0x318>
 8012586:	2b00      	cmp	r3, #0
 8012588:	f000 809b 	beq.w	80126c2 <USBD_StdEPReq+0x1ca>
 801258c:	2b01      	cmp	r3, #1
 801258e:	d03c      	beq.n	801260a <USBD_StdEPReq+0x112>
 8012590:	e13e      	b.n	8012810 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012598:	b2db      	uxtb	r3, r3
 801259a:	2b02      	cmp	r3, #2
 801259c:	d002      	beq.n	80125a4 <USBD_StdEPReq+0xac>
 801259e:	2b03      	cmp	r3, #3
 80125a0:	d016      	beq.n	80125d0 <USBD_StdEPReq+0xd8>
 80125a2:	e02c      	b.n	80125fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80125a4:	7bbb      	ldrb	r3, [r7, #14]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d00d      	beq.n	80125c6 <USBD_StdEPReq+0xce>
 80125aa:	7bbb      	ldrb	r3, [r7, #14]
 80125ac:	2b80      	cmp	r3, #128	; 0x80
 80125ae:	d00a      	beq.n	80125c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80125b0:	7bbb      	ldrb	r3, [r7, #14]
 80125b2:	4619      	mov	r1, r3
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f001 f9eb 	bl	8013990 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80125ba:	2180      	movs	r1, #128	; 0x80
 80125bc:	6878      	ldr	r0, [r7, #4]
 80125be:	f001 f9e7 	bl	8013990 <USBD_LL_StallEP>
 80125c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80125c4:	e020      	b.n	8012608 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80125c6:	6839      	ldr	r1, [r7, #0]
 80125c8:	6878      	ldr	r0, [r7, #4]
 80125ca:	f000 fca4 	bl	8012f16 <USBD_CtlError>
              break;
 80125ce:	e01b      	b.n	8012608 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	885b      	ldrh	r3, [r3, #2]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d10e      	bne.n	80125f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80125d8:	7bbb      	ldrb	r3, [r7, #14]
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d00b      	beq.n	80125f6 <USBD_StdEPReq+0xfe>
 80125de:	7bbb      	ldrb	r3, [r7, #14]
 80125e0:	2b80      	cmp	r3, #128	; 0x80
 80125e2:	d008      	beq.n	80125f6 <USBD_StdEPReq+0xfe>
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	88db      	ldrh	r3, [r3, #6]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d104      	bne.n	80125f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80125ec:	7bbb      	ldrb	r3, [r7, #14]
 80125ee:	4619      	mov	r1, r3
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f001 f9cd 	bl	8013990 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f000 fd58 	bl	80130ac <USBD_CtlSendStatus>

              break;
 80125fc:	e004      	b.n	8012608 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80125fe:	6839      	ldr	r1, [r7, #0]
 8012600:	6878      	ldr	r0, [r7, #4]
 8012602:	f000 fc88 	bl	8012f16 <USBD_CtlError>
              break;
 8012606:	bf00      	nop
          }
          break;
 8012608:	e107      	b.n	801281a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012610:	b2db      	uxtb	r3, r3
 8012612:	2b02      	cmp	r3, #2
 8012614:	d002      	beq.n	801261c <USBD_StdEPReq+0x124>
 8012616:	2b03      	cmp	r3, #3
 8012618:	d016      	beq.n	8012648 <USBD_StdEPReq+0x150>
 801261a:	e04b      	b.n	80126b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801261c:	7bbb      	ldrb	r3, [r7, #14]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d00d      	beq.n	801263e <USBD_StdEPReq+0x146>
 8012622:	7bbb      	ldrb	r3, [r7, #14]
 8012624:	2b80      	cmp	r3, #128	; 0x80
 8012626:	d00a      	beq.n	801263e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012628:	7bbb      	ldrb	r3, [r7, #14]
 801262a:	4619      	mov	r1, r3
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f001 f9af 	bl	8013990 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012632:	2180      	movs	r1, #128	; 0x80
 8012634:	6878      	ldr	r0, [r7, #4]
 8012636:	f001 f9ab 	bl	8013990 <USBD_LL_StallEP>
 801263a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801263c:	e040      	b.n	80126c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801263e:	6839      	ldr	r1, [r7, #0]
 8012640:	6878      	ldr	r0, [r7, #4]
 8012642:	f000 fc68 	bl	8012f16 <USBD_CtlError>
              break;
 8012646:	e03b      	b.n	80126c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012648:	683b      	ldr	r3, [r7, #0]
 801264a:	885b      	ldrh	r3, [r3, #2]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d136      	bne.n	80126be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012650:	7bbb      	ldrb	r3, [r7, #14]
 8012652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012656:	2b00      	cmp	r3, #0
 8012658:	d004      	beq.n	8012664 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801265a:	7bbb      	ldrb	r3, [r7, #14]
 801265c:	4619      	mov	r1, r3
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f001 f9b5 	bl	80139ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f000 fd21 	bl	80130ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801266a:	7bbb      	ldrb	r3, [r7, #14]
 801266c:	4619      	mov	r1, r3
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f7ff fde2 	bl	8012238 <USBD_CoreFindEP>
 8012674:	4603      	mov	r3, r0
 8012676:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012678:	7b7b      	ldrb	r3, [r7, #13]
 801267a:	2bff      	cmp	r3, #255	; 0xff
 801267c:	d01f      	beq.n	80126be <USBD_StdEPReq+0x1c6>
 801267e:	7b7b      	ldrb	r3, [r7, #13]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d11c      	bne.n	80126be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012684:	7b7a      	ldrb	r2, [r7, #13]
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801268c:	7b7a      	ldrb	r2, [r7, #13]
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	32ae      	adds	r2, #174	; 0xae
 8012692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d010      	beq.n	80126be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801269c:	7b7a      	ldrb	r2, [r7, #13]
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	32ae      	adds	r2, #174	; 0xae
 80126a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126a6:	689b      	ldr	r3, [r3, #8]
 80126a8:	6839      	ldr	r1, [r7, #0]
 80126aa:	6878      	ldr	r0, [r7, #4]
 80126ac:	4798      	blx	r3
 80126ae:	4603      	mov	r3, r0
 80126b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80126b2:	e004      	b.n	80126be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80126b4:	6839      	ldr	r1, [r7, #0]
 80126b6:	6878      	ldr	r0, [r7, #4]
 80126b8:	f000 fc2d 	bl	8012f16 <USBD_CtlError>
              break;
 80126bc:	e000      	b.n	80126c0 <USBD_StdEPReq+0x1c8>
              break;
 80126be:	bf00      	nop
          }
          break;
 80126c0:	e0ab      	b.n	801281a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	2b02      	cmp	r3, #2
 80126cc:	d002      	beq.n	80126d4 <USBD_StdEPReq+0x1dc>
 80126ce:	2b03      	cmp	r3, #3
 80126d0:	d032      	beq.n	8012738 <USBD_StdEPReq+0x240>
 80126d2:	e097      	b.n	8012804 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80126d4:	7bbb      	ldrb	r3, [r7, #14]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d007      	beq.n	80126ea <USBD_StdEPReq+0x1f2>
 80126da:	7bbb      	ldrb	r3, [r7, #14]
 80126dc:	2b80      	cmp	r3, #128	; 0x80
 80126de:	d004      	beq.n	80126ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80126e0:	6839      	ldr	r1, [r7, #0]
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f000 fc17 	bl	8012f16 <USBD_CtlError>
                break;
 80126e8:	e091      	b.n	801280e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80126ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	da0b      	bge.n	801270a <USBD_StdEPReq+0x212>
 80126f2:	7bbb      	ldrb	r3, [r7, #14]
 80126f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80126f8:	4613      	mov	r3, r2
 80126fa:	009b      	lsls	r3, r3, #2
 80126fc:	4413      	add	r3, r2
 80126fe:	009b      	lsls	r3, r3, #2
 8012700:	3310      	adds	r3, #16
 8012702:	687a      	ldr	r2, [r7, #4]
 8012704:	4413      	add	r3, r2
 8012706:	3304      	adds	r3, #4
 8012708:	e00b      	b.n	8012722 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801270a:	7bbb      	ldrb	r3, [r7, #14]
 801270c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012710:	4613      	mov	r3, r2
 8012712:	009b      	lsls	r3, r3, #2
 8012714:	4413      	add	r3, r2
 8012716:	009b      	lsls	r3, r3, #2
 8012718:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	4413      	add	r3, r2
 8012720:	3304      	adds	r3, #4
 8012722:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	2200      	movs	r2, #0
 8012728:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	2202      	movs	r2, #2
 801272e:	4619      	mov	r1, r3
 8012730:	6878      	ldr	r0, [r7, #4]
 8012732:	f000 fc61 	bl	8012ff8 <USBD_CtlSendData>
              break;
 8012736:	e06a      	b.n	801280e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012738:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801273c:	2b00      	cmp	r3, #0
 801273e:	da11      	bge.n	8012764 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012740:	7bbb      	ldrb	r3, [r7, #14]
 8012742:	f003 020f 	and.w	r2, r3, #15
 8012746:	6879      	ldr	r1, [r7, #4]
 8012748:	4613      	mov	r3, r2
 801274a:	009b      	lsls	r3, r3, #2
 801274c:	4413      	add	r3, r2
 801274e:	009b      	lsls	r3, r3, #2
 8012750:	440b      	add	r3, r1
 8012752:	3324      	adds	r3, #36	; 0x24
 8012754:	881b      	ldrh	r3, [r3, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d117      	bne.n	801278a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801275a:	6839      	ldr	r1, [r7, #0]
 801275c:	6878      	ldr	r0, [r7, #4]
 801275e:	f000 fbda 	bl	8012f16 <USBD_CtlError>
                  break;
 8012762:	e054      	b.n	801280e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012764:	7bbb      	ldrb	r3, [r7, #14]
 8012766:	f003 020f 	and.w	r2, r3, #15
 801276a:	6879      	ldr	r1, [r7, #4]
 801276c:	4613      	mov	r3, r2
 801276e:	009b      	lsls	r3, r3, #2
 8012770:	4413      	add	r3, r2
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	440b      	add	r3, r1
 8012776:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801277a:	881b      	ldrh	r3, [r3, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d104      	bne.n	801278a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012780:	6839      	ldr	r1, [r7, #0]
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	f000 fbc7 	bl	8012f16 <USBD_CtlError>
                  break;
 8012788:	e041      	b.n	801280e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801278a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801278e:	2b00      	cmp	r3, #0
 8012790:	da0b      	bge.n	80127aa <USBD_StdEPReq+0x2b2>
 8012792:	7bbb      	ldrb	r3, [r7, #14]
 8012794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012798:	4613      	mov	r3, r2
 801279a:	009b      	lsls	r3, r3, #2
 801279c:	4413      	add	r3, r2
 801279e:	009b      	lsls	r3, r3, #2
 80127a0:	3310      	adds	r3, #16
 80127a2:	687a      	ldr	r2, [r7, #4]
 80127a4:	4413      	add	r3, r2
 80127a6:	3304      	adds	r3, #4
 80127a8:	e00b      	b.n	80127c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80127aa:	7bbb      	ldrb	r3, [r7, #14]
 80127ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80127b0:	4613      	mov	r3, r2
 80127b2:	009b      	lsls	r3, r3, #2
 80127b4:	4413      	add	r3, r2
 80127b6:	009b      	lsls	r3, r3, #2
 80127b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80127bc:	687a      	ldr	r2, [r7, #4]
 80127be:	4413      	add	r3, r2
 80127c0:	3304      	adds	r3, #4
 80127c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80127c4:	7bbb      	ldrb	r3, [r7, #14]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d002      	beq.n	80127d0 <USBD_StdEPReq+0x2d8>
 80127ca:	7bbb      	ldrb	r3, [r7, #14]
 80127cc:	2b80      	cmp	r3, #128	; 0x80
 80127ce:	d103      	bne.n	80127d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	2200      	movs	r2, #0
 80127d4:	601a      	str	r2, [r3, #0]
 80127d6:	e00e      	b.n	80127f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80127d8:	7bbb      	ldrb	r3, [r7, #14]
 80127da:	4619      	mov	r1, r3
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f001 f915 	bl	8013a0c <USBD_LL_IsStallEP>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d003      	beq.n	80127f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80127e8:	68bb      	ldr	r3, [r7, #8]
 80127ea:	2201      	movs	r2, #1
 80127ec:	601a      	str	r2, [r3, #0]
 80127ee:	e002      	b.n	80127f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	2200      	movs	r2, #0
 80127f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80127f6:	68bb      	ldr	r3, [r7, #8]
 80127f8:	2202      	movs	r2, #2
 80127fa:	4619      	mov	r1, r3
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 fbfb 	bl	8012ff8 <USBD_CtlSendData>
              break;
 8012802:	e004      	b.n	801280e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012804:	6839      	ldr	r1, [r7, #0]
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f000 fb85 	bl	8012f16 <USBD_CtlError>
              break;
 801280c:	bf00      	nop
          }
          break;
 801280e:	e004      	b.n	801281a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012810:	6839      	ldr	r1, [r7, #0]
 8012812:	6878      	ldr	r0, [r7, #4]
 8012814:	f000 fb7f 	bl	8012f16 <USBD_CtlError>
          break;
 8012818:	bf00      	nop
      }
      break;
 801281a:	e005      	b.n	8012828 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801281c:	6839      	ldr	r1, [r7, #0]
 801281e:	6878      	ldr	r0, [r7, #4]
 8012820:	f000 fb79 	bl	8012f16 <USBD_CtlError>
      break;
 8012824:	e000      	b.n	8012828 <USBD_StdEPReq+0x330>
      break;
 8012826:	bf00      	nop
  }

  return ret;
 8012828:	7bfb      	ldrb	r3, [r7, #15]
}
 801282a:	4618      	mov	r0, r3
 801282c:	3710      	adds	r7, #16
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}
	...

08012834 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b084      	sub	sp, #16
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801283e:	2300      	movs	r3, #0
 8012840:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012842:	2300      	movs	r3, #0
 8012844:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012846:	2300      	movs	r3, #0
 8012848:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801284a:	683b      	ldr	r3, [r7, #0]
 801284c:	885b      	ldrh	r3, [r3, #2]
 801284e:	0a1b      	lsrs	r3, r3, #8
 8012850:	b29b      	uxth	r3, r3
 8012852:	3b01      	subs	r3, #1
 8012854:	2b0e      	cmp	r3, #14
 8012856:	f200 8152 	bhi.w	8012afe <USBD_GetDescriptor+0x2ca>
 801285a:	a201      	add	r2, pc, #4	; (adr r2, 8012860 <USBD_GetDescriptor+0x2c>)
 801285c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012860:	080128d1 	.word	0x080128d1
 8012864:	080128e9 	.word	0x080128e9
 8012868:	08012929 	.word	0x08012929
 801286c:	08012aff 	.word	0x08012aff
 8012870:	08012aff 	.word	0x08012aff
 8012874:	08012a9f 	.word	0x08012a9f
 8012878:	08012acb 	.word	0x08012acb
 801287c:	08012aff 	.word	0x08012aff
 8012880:	08012aff 	.word	0x08012aff
 8012884:	08012aff 	.word	0x08012aff
 8012888:	08012aff 	.word	0x08012aff
 801288c:	08012aff 	.word	0x08012aff
 8012890:	08012aff 	.word	0x08012aff
 8012894:	08012aff 	.word	0x08012aff
 8012898:	0801289d 	.word	0x0801289d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128a2:	69db      	ldr	r3, [r3, #28]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d00b      	beq.n	80128c0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128ae:	69db      	ldr	r3, [r3, #28]
 80128b0:	687a      	ldr	r2, [r7, #4]
 80128b2:	7c12      	ldrb	r2, [r2, #16]
 80128b4:	f107 0108 	add.w	r1, r7, #8
 80128b8:	4610      	mov	r0, r2
 80128ba:	4798      	blx	r3
 80128bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80128be:	e126      	b.n	8012b0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80128c0:	6839      	ldr	r1, [r7, #0]
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f000 fb27 	bl	8012f16 <USBD_CtlError>
        err++;
 80128c8:	7afb      	ldrb	r3, [r7, #11]
 80128ca:	3301      	adds	r3, #1
 80128cc:	72fb      	strb	r3, [r7, #11]
      break;
 80128ce:	e11e      	b.n	8012b0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	687a      	ldr	r2, [r7, #4]
 80128da:	7c12      	ldrb	r2, [r2, #16]
 80128dc:	f107 0108 	add.w	r1, r7, #8
 80128e0:	4610      	mov	r0, r2
 80128e2:	4798      	blx	r3
 80128e4:	60f8      	str	r0, [r7, #12]
      break;
 80128e6:	e112      	b.n	8012b0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	7c1b      	ldrb	r3, [r3, #16]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d10d      	bne.n	801290c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80128f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128f8:	f107 0208 	add.w	r2, r7, #8
 80128fc:	4610      	mov	r0, r2
 80128fe:	4798      	blx	r3
 8012900:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012902:	68fb      	ldr	r3, [r7, #12]
 8012904:	3301      	adds	r3, #1
 8012906:	2202      	movs	r2, #2
 8012908:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801290a:	e100      	b.n	8012b0e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012914:	f107 0208 	add.w	r2, r7, #8
 8012918:	4610      	mov	r0, r2
 801291a:	4798      	blx	r3
 801291c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	3301      	adds	r3, #1
 8012922:	2202      	movs	r2, #2
 8012924:	701a      	strb	r2, [r3, #0]
      break;
 8012926:	e0f2      	b.n	8012b0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012928:	683b      	ldr	r3, [r7, #0]
 801292a:	885b      	ldrh	r3, [r3, #2]
 801292c:	b2db      	uxtb	r3, r3
 801292e:	2b05      	cmp	r3, #5
 8012930:	f200 80ac 	bhi.w	8012a8c <USBD_GetDescriptor+0x258>
 8012934:	a201      	add	r2, pc, #4	; (adr r2, 801293c <USBD_GetDescriptor+0x108>)
 8012936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801293a:	bf00      	nop
 801293c:	08012955 	.word	0x08012955
 8012940:	08012989 	.word	0x08012989
 8012944:	080129bd 	.word	0x080129bd
 8012948:	080129f1 	.word	0x080129f1
 801294c:	08012a25 	.word	0x08012a25
 8012950:	08012a59 	.word	0x08012a59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d00b      	beq.n	8012978 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012966:	685b      	ldr	r3, [r3, #4]
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	7c12      	ldrb	r2, [r2, #16]
 801296c:	f107 0108 	add.w	r1, r7, #8
 8012970:	4610      	mov	r0, r2
 8012972:	4798      	blx	r3
 8012974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012976:	e091      	b.n	8012a9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012978:	6839      	ldr	r1, [r7, #0]
 801297a:	6878      	ldr	r0, [r7, #4]
 801297c:	f000 facb 	bl	8012f16 <USBD_CtlError>
            err++;
 8012980:	7afb      	ldrb	r3, [r7, #11]
 8012982:	3301      	adds	r3, #1
 8012984:	72fb      	strb	r3, [r7, #11]
          break;
 8012986:	e089      	b.n	8012a9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d00b      	beq.n	80129ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801299a:	689b      	ldr	r3, [r3, #8]
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	7c12      	ldrb	r2, [r2, #16]
 80129a0:	f107 0108 	add.w	r1, r7, #8
 80129a4:	4610      	mov	r0, r2
 80129a6:	4798      	blx	r3
 80129a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80129aa:	e077      	b.n	8012a9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80129ac:	6839      	ldr	r1, [r7, #0]
 80129ae:	6878      	ldr	r0, [r7, #4]
 80129b0:	f000 fab1 	bl	8012f16 <USBD_CtlError>
            err++;
 80129b4:	7afb      	ldrb	r3, [r7, #11]
 80129b6:	3301      	adds	r3, #1
 80129b8:	72fb      	strb	r3, [r7, #11]
          break;
 80129ba:	e06f      	b.n	8012a9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d00b      	beq.n	80129e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129ce:	68db      	ldr	r3, [r3, #12]
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	7c12      	ldrb	r2, [r2, #16]
 80129d4:	f107 0108 	add.w	r1, r7, #8
 80129d8:	4610      	mov	r0, r2
 80129da:	4798      	blx	r3
 80129dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80129de:	e05d      	b.n	8012a9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80129e0:	6839      	ldr	r1, [r7, #0]
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f000 fa97 	bl	8012f16 <USBD_CtlError>
            err++;
 80129e8:	7afb      	ldrb	r3, [r7, #11]
 80129ea:	3301      	adds	r3, #1
 80129ec:	72fb      	strb	r3, [r7, #11]
          break;
 80129ee:	e055      	b.n	8012a9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129f6:	691b      	ldr	r3, [r3, #16]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d00b      	beq.n	8012a14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a02:	691b      	ldr	r3, [r3, #16]
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	7c12      	ldrb	r2, [r2, #16]
 8012a08:	f107 0108 	add.w	r1, r7, #8
 8012a0c:	4610      	mov	r0, r2
 8012a0e:	4798      	blx	r3
 8012a10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a12:	e043      	b.n	8012a9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012a14:	6839      	ldr	r1, [r7, #0]
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f000 fa7d 	bl	8012f16 <USBD_CtlError>
            err++;
 8012a1c:	7afb      	ldrb	r3, [r7, #11]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	72fb      	strb	r3, [r7, #11]
          break;
 8012a22:	e03b      	b.n	8012a9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a2a:	695b      	ldr	r3, [r3, #20]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d00b      	beq.n	8012a48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a36:	695b      	ldr	r3, [r3, #20]
 8012a38:	687a      	ldr	r2, [r7, #4]
 8012a3a:	7c12      	ldrb	r2, [r2, #16]
 8012a3c:	f107 0108 	add.w	r1, r7, #8
 8012a40:	4610      	mov	r0, r2
 8012a42:	4798      	blx	r3
 8012a44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a46:	e029      	b.n	8012a9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012a48:	6839      	ldr	r1, [r7, #0]
 8012a4a:	6878      	ldr	r0, [r7, #4]
 8012a4c:	f000 fa63 	bl	8012f16 <USBD_CtlError>
            err++;
 8012a50:	7afb      	ldrb	r3, [r7, #11]
 8012a52:	3301      	adds	r3, #1
 8012a54:	72fb      	strb	r3, [r7, #11]
          break;
 8012a56:	e021      	b.n	8012a9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a5e:	699b      	ldr	r3, [r3, #24]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d00b      	beq.n	8012a7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a6a:	699b      	ldr	r3, [r3, #24]
 8012a6c:	687a      	ldr	r2, [r7, #4]
 8012a6e:	7c12      	ldrb	r2, [r2, #16]
 8012a70:	f107 0108 	add.w	r1, r7, #8
 8012a74:	4610      	mov	r0, r2
 8012a76:	4798      	blx	r3
 8012a78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a7a:	e00f      	b.n	8012a9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012a7c:	6839      	ldr	r1, [r7, #0]
 8012a7e:	6878      	ldr	r0, [r7, #4]
 8012a80:	f000 fa49 	bl	8012f16 <USBD_CtlError>
            err++;
 8012a84:	7afb      	ldrb	r3, [r7, #11]
 8012a86:	3301      	adds	r3, #1
 8012a88:	72fb      	strb	r3, [r7, #11]
          break;
 8012a8a:	e007      	b.n	8012a9c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012a8c:	6839      	ldr	r1, [r7, #0]
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f000 fa41 	bl	8012f16 <USBD_CtlError>
          err++;
 8012a94:	7afb      	ldrb	r3, [r7, #11]
 8012a96:	3301      	adds	r3, #1
 8012a98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012a9a:	bf00      	nop
      }
      break;
 8012a9c:	e037      	b.n	8012b0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	7c1b      	ldrb	r3, [r3, #16]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d109      	bne.n	8012aba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012aae:	f107 0208 	add.w	r2, r7, #8
 8012ab2:	4610      	mov	r0, r2
 8012ab4:	4798      	blx	r3
 8012ab6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012ab8:	e029      	b.n	8012b0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012aba:	6839      	ldr	r1, [r7, #0]
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f000 fa2a 	bl	8012f16 <USBD_CtlError>
        err++;
 8012ac2:	7afb      	ldrb	r3, [r7, #11]
 8012ac4:	3301      	adds	r3, #1
 8012ac6:	72fb      	strb	r3, [r7, #11]
      break;
 8012ac8:	e021      	b.n	8012b0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	7c1b      	ldrb	r3, [r3, #16]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d10d      	bne.n	8012aee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ada:	f107 0208 	add.w	r2, r7, #8
 8012ade:	4610      	mov	r0, r2
 8012ae0:	4798      	blx	r3
 8012ae2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	3301      	adds	r3, #1
 8012ae8:	2207      	movs	r2, #7
 8012aea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012aec:	e00f      	b.n	8012b0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012aee:	6839      	ldr	r1, [r7, #0]
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f000 fa10 	bl	8012f16 <USBD_CtlError>
        err++;
 8012af6:	7afb      	ldrb	r3, [r7, #11]
 8012af8:	3301      	adds	r3, #1
 8012afa:	72fb      	strb	r3, [r7, #11]
      break;
 8012afc:	e007      	b.n	8012b0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012afe:	6839      	ldr	r1, [r7, #0]
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f000 fa08 	bl	8012f16 <USBD_CtlError>
      err++;
 8012b06:	7afb      	ldrb	r3, [r7, #11]
 8012b08:	3301      	adds	r3, #1
 8012b0a:	72fb      	strb	r3, [r7, #11]
      break;
 8012b0c:	bf00      	nop
  }

  if (err != 0U)
 8012b0e:	7afb      	ldrb	r3, [r7, #11]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d11e      	bne.n	8012b52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	88db      	ldrh	r3, [r3, #6]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d016      	beq.n	8012b4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012b1c:	893b      	ldrh	r3, [r7, #8]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d00e      	beq.n	8012b40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	88da      	ldrh	r2, [r3, #6]
 8012b26:	893b      	ldrh	r3, [r7, #8]
 8012b28:	4293      	cmp	r3, r2
 8012b2a:	bf28      	it	cs
 8012b2c:	4613      	movcs	r3, r2
 8012b2e:	b29b      	uxth	r3, r3
 8012b30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012b32:	893b      	ldrh	r3, [r7, #8]
 8012b34:	461a      	mov	r2, r3
 8012b36:	68f9      	ldr	r1, [r7, #12]
 8012b38:	6878      	ldr	r0, [r7, #4]
 8012b3a:	f000 fa5d 	bl	8012ff8 <USBD_CtlSendData>
 8012b3e:	e009      	b.n	8012b54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012b40:	6839      	ldr	r1, [r7, #0]
 8012b42:	6878      	ldr	r0, [r7, #4]
 8012b44:	f000 f9e7 	bl	8012f16 <USBD_CtlError>
 8012b48:	e004      	b.n	8012b54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f000 faae 	bl	80130ac <USBD_CtlSendStatus>
 8012b50:	e000      	b.n	8012b54 <USBD_GetDescriptor+0x320>
    return;
 8012b52:	bf00      	nop
  }
}
 8012b54:	3710      	adds	r7, #16
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
 8012b5a:	bf00      	nop

08012b5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b084      	sub	sp, #16
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	889b      	ldrh	r3, [r3, #4]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d131      	bne.n	8012bd2 <USBD_SetAddress+0x76>
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	88db      	ldrh	r3, [r3, #6]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d12d      	bne.n	8012bd2 <USBD_SetAddress+0x76>
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	885b      	ldrh	r3, [r3, #2]
 8012b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8012b7c:	d829      	bhi.n	8012bd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	885b      	ldrh	r3, [r3, #2]
 8012b82:	b2db      	uxtb	r3, r3
 8012b84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012b88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012b90:	b2db      	uxtb	r3, r3
 8012b92:	2b03      	cmp	r3, #3
 8012b94:	d104      	bne.n	8012ba0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012b96:	6839      	ldr	r1, [r7, #0]
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f000 f9bc 	bl	8012f16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b9e:	e01d      	b.n	8012bdc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	7bfa      	ldrb	r2, [r7, #15]
 8012ba4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012ba8:	7bfb      	ldrb	r3, [r7, #15]
 8012baa:	4619      	mov	r1, r3
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 ff59 	bl	8013a64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012bb2:	6878      	ldr	r0, [r7, #4]
 8012bb4:	f000 fa7a 	bl	80130ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012bb8:	7bfb      	ldrb	r3, [r7, #15]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d004      	beq.n	8012bc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2202      	movs	r2, #2
 8012bc2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bc6:	e009      	b.n	8012bdc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	2201      	movs	r2, #1
 8012bcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bd0:	e004      	b.n	8012bdc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012bd2:	6839      	ldr	r1, [r7, #0]
 8012bd4:	6878      	ldr	r0, [r7, #4]
 8012bd6:	f000 f99e 	bl	8012f16 <USBD_CtlError>
  }
}
 8012bda:	bf00      	nop
 8012bdc:	bf00      	nop
 8012bde:	3710      	adds	r7, #16
 8012be0:	46bd      	mov	sp, r7
 8012be2:	bd80      	pop	{r7, pc}

08012be4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b084      	sub	sp, #16
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
 8012bec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	885b      	ldrh	r3, [r3, #2]
 8012bf6:	b2da      	uxtb	r2, r3
 8012bf8:	4b4e      	ldr	r3, [pc, #312]	; (8012d34 <USBD_SetConfig+0x150>)
 8012bfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012bfc:	4b4d      	ldr	r3, [pc, #308]	; (8012d34 <USBD_SetConfig+0x150>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	2b01      	cmp	r3, #1
 8012c02:	d905      	bls.n	8012c10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012c04:	6839      	ldr	r1, [r7, #0]
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f000 f985 	bl	8012f16 <USBD_CtlError>
    return USBD_FAIL;
 8012c0c:	2303      	movs	r3, #3
 8012c0e:	e08c      	b.n	8012d2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c16:	b2db      	uxtb	r3, r3
 8012c18:	2b02      	cmp	r3, #2
 8012c1a:	d002      	beq.n	8012c22 <USBD_SetConfig+0x3e>
 8012c1c:	2b03      	cmp	r3, #3
 8012c1e:	d029      	beq.n	8012c74 <USBD_SetConfig+0x90>
 8012c20:	e075      	b.n	8012d0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012c22:	4b44      	ldr	r3, [pc, #272]	; (8012d34 <USBD_SetConfig+0x150>)
 8012c24:	781b      	ldrb	r3, [r3, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d020      	beq.n	8012c6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012c2a:	4b42      	ldr	r3, [pc, #264]	; (8012d34 <USBD_SetConfig+0x150>)
 8012c2c:	781b      	ldrb	r3, [r3, #0]
 8012c2e:	461a      	mov	r2, r3
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012c34:	4b3f      	ldr	r3, [pc, #252]	; (8012d34 <USBD_SetConfig+0x150>)
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	4619      	mov	r1, r3
 8012c3a:	6878      	ldr	r0, [r7, #4]
 8012c3c:	f7fe ffb7 	bl	8011bae <USBD_SetClassConfig>
 8012c40:	4603      	mov	r3, r0
 8012c42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012c44:	7bfb      	ldrb	r3, [r7, #15]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d008      	beq.n	8012c5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012c4a:	6839      	ldr	r1, [r7, #0]
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f000 f962 	bl	8012f16 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2202      	movs	r2, #2
 8012c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012c5a:	e065      	b.n	8012d28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012c5c:	6878      	ldr	r0, [r7, #4]
 8012c5e:	f000 fa25 	bl	80130ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	2203      	movs	r2, #3
 8012c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012c6a:	e05d      	b.n	8012d28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012c6c:	6878      	ldr	r0, [r7, #4]
 8012c6e:	f000 fa1d 	bl	80130ac <USBD_CtlSendStatus>
      break;
 8012c72:	e059      	b.n	8012d28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012c74:	4b2f      	ldr	r3, [pc, #188]	; (8012d34 <USBD_SetConfig+0x150>)
 8012c76:	781b      	ldrb	r3, [r3, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d112      	bne.n	8012ca2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2202      	movs	r2, #2
 8012c80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012c84:	4b2b      	ldr	r3, [pc, #172]	; (8012d34 <USBD_SetConfig+0x150>)
 8012c86:	781b      	ldrb	r3, [r3, #0]
 8012c88:	461a      	mov	r2, r3
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012c8e:	4b29      	ldr	r3, [pc, #164]	; (8012d34 <USBD_SetConfig+0x150>)
 8012c90:	781b      	ldrb	r3, [r3, #0]
 8012c92:	4619      	mov	r1, r3
 8012c94:	6878      	ldr	r0, [r7, #4]
 8012c96:	f7fe ffa6 	bl	8011be6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f000 fa06 	bl	80130ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012ca0:	e042      	b.n	8012d28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012ca2:	4b24      	ldr	r3, [pc, #144]	; (8012d34 <USBD_SetConfig+0x150>)
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	685b      	ldr	r3, [r3, #4]
 8012cac:	429a      	cmp	r2, r3
 8012cae:	d02a      	beq.n	8012d06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	b2db      	uxtb	r3, r3
 8012cb6:	4619      	mov	r1, r3
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f7fe ff94 	bl	8011be6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012cbe:	4b1d      	ldr	r3, [pc, #116]	; (8012d34 <USBD_SetConfig+0x150>)
 8012cc0:	781b      	ldrb	r3, [r3, #0]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012cc8:	4b1a      	ldr	r3, [pc, #104]	; (8012d34 <USBD_SetConfig+0x150>)
 8012cca:	781b      	ldrb	r3, [r3, #0]
 8012ccc:	4619      	mov	r1, r3
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f7fe ff6d 	bl	8011bae <USBD_SetClassConfig>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012cd8:	7bfb      	ldrb	r3, [r7, #15]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d00f      	beq.n	8012cfe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012cde:	6839      	ldr	r1, [r7, #0]
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f000 f918 	bl	8012f16 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	b2db      	uxtb	r3, r3
 8012cec:	4619      	mov	r1, r3
 8012cee:	6878      	ldr	r0, [r7, #4]
 8012cf0:	f7fe ff79 	bl	8011be6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	2202      	movs	r2, #2
 8012cf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012cfc:	e014      	b.n	8012d28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012cfe:	6878      	ldr	r0, [r7, #4]
 8012d00:	f000 f9d4 	bl	80130ac <USBD_CtlSendStatus>
      break;
 8012d04:	e010      	b.n	8012d28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f000 f9d0 	bl	80130ac <USBD_CtlSendStatus>
      break;
 8012d0c:	e00c      	b.n	8012d28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012d0e:	6839      	ldr	r1, [r7, #0]
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f000 f900 	bl	8012f16 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012d16:	4b07      	ldr	r3, [pc, #28]	; (8012d34 <USBD_SetConfig+0x150>)
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	4619      	mov	r1, r3
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7fe ff62 	bl	8011be6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012d22:	2303      	movs	r3, #3
 8012d24:	73fb      	strb	r3, [r7, #15]
      break;
 8012d26:	bf00      	nop
  }

  return ret;
 8012d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3710      	adds	r7, #16
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}
 8012d32:	bf00      	nop
 8012d34:	24000c88 	.word	0x24000c88

08012d38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012d42:	683b      	ldr	r3, [r7, #0]
 8012d44:	88db      	ldrh	r3, [r3, #6]
 8012d46:	2b01      	cmp	r3, #1
 8012d48:	d004      	beq.n	8012d54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012d4a:	6839      	ldr	r1, [r7, #0]
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f000 f8e2 	bl	8012f16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012d52:	e023      	b.n	8012d9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012d5a:	b2db      	uxtb	r3, r3
 8012d5c:	2b02      	cmp	r3, #2
 8012d5e:	dc02      	bgt.n	8012d66 <USBD_GetConfig+0x2e>
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	dc03      	bgt.n	8012d6c <USBD_GetConfig+0x34>
 8012d64:	e015      	b.n	8012d92 <USBD_GetConfig+0x5a>
 8012d66:	2b03      	cmp	r3, #3
 8012d68:	d00b      	beq.n	8012d82 <USBD_GetConfig+0x4a>
 8012d6a:	e012      	b.n	8012d92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	2200      	movs	r2, #0
 8012d70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	3308      	adds	r3, #8
 8012d76:	2201      	movs	r2, #1
 8012d78:	4619      	mov	r1, r3
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f000 f93c 	bl	8012ff8 <USBD_CtlSendData>
        break;
 8012d80:	e00c      	b.n	8012d9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	3304      	adds	r3, #4
 8012d86:	2201      	movs	r2, #1
 8012d88:	4619      	mov	r1, r3
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 f934 	bl	8012ff8 <USBD_CtlSendData>
        break;
 8012d90:	e004      	b.n	8012d9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012d92:	6839      	ldr	r1, [r7, #0]
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 f8be 	bl	8012f16 <USBD_CtlError>
        break;
 8012d9a:	bf00      	nop
}
 8012d9c:	bf00      	nop
 8012d9e:	3708      	adds	r7, #8
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b082      	sub	sp, #8
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	3b01      	subs	r3, #1
 8012db8:	2b02      	cmp	r3, #2
 8012dba:	d81e      	bhi.n	8012dfa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	88db      	ldrh	r3, [r3, #6]
 8012dc0:	2b02      	cmp	r3, #2
 8012dc2:	d004      	beq.n	8012dce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012dc4:	6839      	ldr	r1, [r7, #0]
 8012dc6:	6878      	ldr	r0, [r7, #4]
 8012dc8:	f000 f8a5 	bl	8012f16 <USBD_CtlError>
        break;
 8012dcc:	e01a      	b.n	8012e04 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2201      	movs	r2, #1
 8012dd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d005      	beq.n	8012dea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	68db      	ldr	r3, [r3, #12]
 8012de2:	f043 0202 	orr.w	r2, r3, #2
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	330c      	adds	r3, #12
 8012dee:	2202      	movs	r2, #2
 8012df0:	4619      	mov	r1, r3
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f000 f900 	bl	8012ff8 <USBD_CtlSendData>
      break;
 8012df8:	e004      	b.n	8012e04 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012dfa:	6839      	ldr	r1, [r7, #0]
 8012dfc:	6878      	ldr	r0, [r7, #4]
 8012dfe:	f000 f88a 	bl	8012f16 <USBD_CtlError>
      break;
 8012e02:	bf00      	nop
  }
}
 8012e04:	bf00      	nop
 8012e06:	3708      	adds	r7, #8
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	885b      	ldrh	r3, [r3, #2]
 8012e1a:	2b01      	cmp	r3, #1
 8012e1c:	d107      	bne.n	8012e2e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	2201      	movs	r2, #1
 8012e22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012e26:	6878      	ldr	r0, [r7, #4]
 8012e28:	f000 f940 	bl	80130ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012e2c:	e013      	b.n	8012e56 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	885b      	ldrh	r3, [r3, #2]
 8012e32:	2b02      	cmp	r3, #2
 8012e34:	d10b      	bne.n	8012e4e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	889b      	ldrh	r3, [r3, #4]
 8012e3a:	0a1b      	lsrs	r3, r3, #8
 8012e3c:	b29b      	uxth	r3, r3
 8012e3e:	b2da      	uxtb	r2, r3
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012e46:	6878      	ldr	r0, [r7, #4]
 8012e48:	f000 f930 	bl	80130ac <USBD_CtlSendStatus>
}
 8012e4c:	e003      	b.n	8012e56 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012e4e:	6839      	ldr	r1, [r7, #0]
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f000 f860 	bl	8012f16 <USBD_CtlError>
}
 8012e56:	bf00      	nop
 8012e58:	3708      	adds	r7, #8
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}

08012e5e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e5e:	b580      	push	{r7, lr}
 8012e60:	b082      	sub	sp, #8
 8012e62:	af00      	add	r7, sp, #0
 8012e64:	6078      	str	r0, [r7, #4]
 8012e66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	3b01      	subs	r3, #1
 8012e72:	2b02      	cmp	r3, #2
 8012e74:	d80b      	bhi.n	8012e8e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	885b      	ldrh	r3, [r3, #2]
 8012e7a:	2b01      	cmp	r3, #1
 8012e7c:	d10c      	bne.n	8012e98 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2200      	movs	r2, #0
 8012e82:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f000 f910 	bl	80130ac <USBD_CtlSendStatus>
      }
      break;
 8012e8c:	e004      	b.n	8012e98 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012e8e:	6839      	ldr	r1, [r7, #0]
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f000 f840 	bl	8012f16 <USBD_CtlError>
      break;
 8012e96:	e000      	b.n	8012e9a <USBD_ClrFeature+0x3c>
      break;
 8012e98:	bf00      	nop
  }
}
 8012e9a:	bf00      	nop
 8012e9c:	3708      	adds	r7, #8
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}

08012ea2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012ea2:	b580      	push	{r7, lr}
 8012ea4:	b084      	sub	sp, #16
 8012ea6:	af00      	add	r7, sp, #0
 8012ea8:	6078      	str	r0, [r7, #4]
 8012eaa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012eac:	683b      	ldr	r3, [r7, #0]
 8012eae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	781a      	ldrb	r2, [r3, #0]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	3301      	adds	r3, #1
 8012ebc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	781a      	ldrb	r2, [r3, #0]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	3301      	adds	r3, #1
 8012eca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012ecc:	68f8      	ldr	r0, [r7, #12]
 8012ece:	f7ff fa17 	bl	8012300 <SWAPBYTE>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	461a      	mov	r2, r3
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	3301      	adds	r3, #1
 8012ede:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012ee6:	68f8      	ldr	r0, [r7, #12]
 8012ee8:	f7ff fa0a 	bl	8012300 <SWAPBYTE>
 8012eec:	4603      	mov	r3, r0
 8012eee:	461a      	mov	r2, r3
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	3301      	adds	r3, #1
 8012ef8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	3301      	adds	r3, #1
 8012efe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012f00:	68f8      	ldr	r0, [r7, #12]
 8012f02:	f7ff f9fd 	bl	8012300 <SWAPBYTE>
 8012f06:	4603      	mov	r3, r0
 8012f08:	461a      	mov	r2, r3
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	80da      	strh	r2, [r3, #6]
}
 8012f0e:	bf00      	nop
 8012f10:	3710      	adds	r7, #16
 8012f12:	46bd      	mov	sp, r7
 8012f14:	bd80      	pop	{r7, pc}

08012f16 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f16:	b580      	push	{r7, lr}
 8012f18:	b082      	sub	sp, #8
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	6078      	str	r0, [r7, #4]
 8012f1e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f20:	2180      	movs	r1, #128	; 0x80
 8012f22:	6878      	ldr	r0, [r7, #4]
 8012f24:	f000 fd34 	bl	8013990 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012f28:	2100      	movs	r1, #0
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f000 fd30 	bl	8013990 <USBD_LL_StallEP>
}
 8012f30:	bf00      	nop
 8012f32:	3708      	adds	r7, #8
 8012f34:	46bd      	mov	sp, r7
 8012f36:	bd80      	pop	{r7, pc}

08012f38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b086      	sub	sp, #24
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	60f8      	str	r0, [r7, #12]
 8012f40:	60b9      	str	r1, [r7, #8]
 8012f42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012f44:	2300      	movs	r3, #0
 8012f46:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d036      	beq.n	8012fbc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012f52:	6938      	ldr	r0, [r7, #16]
 8012f54:	f000 f836 	bl	8012fc4 <USBD_GetLen>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	b29b      	uxth	r3, r3
 8012f5e:	005b      	lsls	r3, r3, #1
 8012f60:	b29a      	uxth	r2, r3
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012f66:	7dfb      	ldrb	r3, [r7, #23]
 8012f68:	68ba      	ldr	r2, [r7, #8]
 8012f6a:	4413      	add	r3, r2
 8012f6c:	687a      	ldr	r2, [r7, #4]
 8012f6e:	7812      	ldrb	r2, [r2, #0]
 8012f70:	701a      	strb	r2, [r3, #0]
  idx++;
 8012f72:	7dfb      	ldrb	r3, [r7, #23]
 8012f74:	3301      	adds	r3, #1
 8012f76:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012f78:	7dfb      	ldrb	r3, [r7, #23]
 8012f7a:	68ba      	ldr	r2, [r7, #8]
 8012f7c:	4413      	add	r3, r2
 8012f7e:	2203      	movs	r2, #3
 8012f80:	701a      	strb	r2, [r3, #0]
  idx++;
 8012f82:	7dfb      	ldrb	r3, [r7, #23]
 8012f84:	3301      	adds	r3, #1
 8012f86:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012f88:	e013      	b.n	8012fb2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012f8a:	7dfb      	ldrb	r3, [r7, #23]
 8012f8c:	68ba      	ldr	r2, [r7, #8]
 8012f8e:	4413      	add	r3, r2
 8012f90:	693a      	ldr	r2, [r7, #16]
 8012f92:	7812      	ldrb	r2, [r2, #0]
 8012f94:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012f96:	693b      	ldr	r3, [r7, #16]
 8012f98:	3301      	adds	r3, #1
 8012f9a:	613b      	str	r3, [r7, #16]
    idx++;
 8012f9c:	7dfb      	ldrb	r3, [r7, #23]
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012fa2:	7dfb      	ldrb	r3, [r7, #23]
 8012fa4:	68ba      	ldr	r2, [r7, #8]
 8012fa6:	4413      	add	r3, r2
 8012fa8:	2200      	movs	r2, #0
 8012faa:	701a      	strb	r2, [r3, #0]
    idx++;
 8012fac:	7dfb      	ldrb	r3, [r7, #23]
 8012fae:	3301      	adds	r3, #1
 8012fb0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	781b      	ldrb	r3, [r3, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d1e7      	bne.n	8012f8a <USBD_GetString+0x52>
 8012fba:	e000      	b.n	8012fbe <USBD_GetString+0x86>
    return;
 8012fbc:	bf00      	nop
  }
}
 8012fbe:	3718      	adds	r7, #24
 8012fc0:	46bd      	mov	sp, r7
 8012fc2:	bd80      	pop	{r7, pc}

08012fc4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012fc4:	b480      	push	{r7}
 8012fc6:	b085      	sub	sp, #20
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012fd4:	e005      	b.n	8012fe2 <USBD_GetLen+0x1e>
  {
    len++;
 8012fd6:	7bfb      	ldrb	r3, [r7, #15]
 8012fd8:	3301      	adds	r3, #1
 8012fda:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	3301      	adds	r3, #1
 8012fe0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d1f5      	bne.n	8012fd6 <USBD_GetLen+0x12>
  }

  return len;
 8012fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fec:	4618      	mov	r0, r3
 8012fee:	3714      	adds	r7, #20
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff6:	4770      	bx	lr

08012ff8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b084      	sub	sp, #16
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	60f8      	str	r0, [r7, #12]
 8013000:	60b9      	str	r1, [r7, #8]
 8013002:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	2202      	movs	r2, #2
 8013008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	687a      	ldr	r2, [r7, #4]
 8013016:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	68ba      	ldr	r2, [r7, #8]
 801301c:	2100      	movs	r1, #0
 801301e:	68f8      	ldr	r0, [r7, #12]
 8013020:	f000 fd3f 	bl	8013aa2 <USBD_LL_Transmit>

  return USBD_OK;
 8013024:	2300      	movs	r3, #0
}
 8013026:	4618      	mov	r0, r3
 8013028:	3710      	adds	r7, #16
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}

0801302e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801302e:	b580      	push	{r7, lr}
 8013030:	b084      	sub	sp, #16
 8013032:	af00      	add	r7, sp, #0
 8013034:	60f8      	str	r0, [r7, #12]
 8013036:	60b9      	str	r1, [r7, #8]
 8013038:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	68ba      	ldr	r2, [r7, #8]
 801303e:	2100      	movs	r1, #0
 8013040:	68f8      	ldr	r0, [r7, #12]
 8013042:	f000 fd2e 	bl	8013aa2 <USBD_LL_Transmit>

  return USBD_OK;
 8013046:	2300      	movs	r3, #0
}
 8013048:	4618      	mov	r0, r3
 801304a:	3710      	adds	r7, #16
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}

08013050 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013050:	b580      	push	{r7, lr}
 8013052:	b084      	sub	sp, #16
 8013054:	af00      	add	r7, sp, #0
 8013056:	60f8      	str	r0, [r7, #12]
 8013058:	60b9      	str	r1, [r7, #8]
 801305a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2203      	movs	r2, #3
 8013060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	687a      	ldr	r2, [r7, #4]
 8013068:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	68ba      	ldr	r2, [r7, #8]
 8013078:	2100      	movs	r1, #0
 801307a:	68f8      	ldr	r0, [r7, #12]
 801307c:	f000 fd32 	bl	8013ae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013080:	2300      	movs	r3, #0
}
 8013082:	4618      	mov	r0, r3
 8013084:	3710      	adds	r7, #16
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}

0801308a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801308a:	b580      	push	{r7, lr}
 801308c:	b084      	sub	sp, #16
 801308e:	af00      	add	r7, sp, #0
 8013090:	60f8      	str	r0, [r7, #12]
 8013092:	60b9      	str	r1, [r7, #8]
 8013094:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	68ba      	ldr	r2, [r7, #8]
 801309a:	2100      	movs	r1, #0
 801309c:	68f8      	ldr	r0, [r7, #12]
 801309e:	f000 fd21 	bl	8013ae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80130a2:	2300      	movs	r3, #0
}
 80130a4:	4618      	mov	r0, r3
 80130a6:	3710      	adds	r7, #16
 80130a8:	46bd      	mov	sp, r7
 80130aa:	bd80      	pop	{r7, pc}

080130ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80130ac:	b580      	push	{r7, lr}
 80130ae:	b082      	sub	sp, #8
 80130b0:	af00      	add	r7, sp, #0
 80130b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	2204      	movs	r2, #4
 80130b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80130bc:	2300      	movs	r3, #0
 80130be:	2200      	movs	r2, #0
 80130c0:	2100      	movs	r1, #0
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f000 fced 	bl	8013aa2 <USBD_LL_Transmit>

  return USBD_OK;
 80130c8:	2300      	movs	r3, #0
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3708      	adds	r7, #8
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b082      	sub	sp, #8
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	2205      	movs	r2, #5
 80130de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80130e2:	2300      	movs	r3, #0
 80130e4:	2200      	movs	r2, #0
 80130e6:	2100      	movs	r1, #0
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f000 fcfb 	bl	8013ae4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80130ee:	2300      	movs	r3, #0
}
 80130f0:	4618      	mov	r0, r3
 80130f2:	3708      	adds	r7, #8
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80130f8:	b480      	push	{r7}
 80130fa:	b087      	sub	sp, #28
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	60f8      	str	r0, [r7, #12]
 8013100:	60b9      	str	r1, [r7, #8]
 8013102:	4613      	mov	r3, r2
 8013104:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013106:	2301      	movs	r3, #1
 8013108:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801310a:	2300      	movs	r3, #0
 801310c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801310e:	4b1f      	ldr	r3, [pc, #124]	; (801318c <FATFS_LinkDriverEx+0x94>)
 8013110:	7a5b      	ldrb	r3, [r3, #9]
 8013112:	b2db      	uxtb	r3, r3
 8013114:	2b00      	cmp	r3, #0
 8013116:	d131      	bne.n	801317c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013118:	4b1c      	ldr	r3, [pc, #112]	; (801318c <FATFS_LinkDriverEx+0x94>)
 801311a:	7a5b      	ldrb	r3, [r3, #9]
 801311c:	b2db      	uxtb	r3, r3
 801311e:	461a      	mov	r2, r3
 8013120:	4b1a      	ldr	r3, [pc, #104]	; (801318c <FATFS_LinkDriverEx+0x94>)
 8013122:	2100      	movs	r1, #0
 8013124:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013126:	4b19      	ldr	r3, [pc, #100]	; (801318c <FATFS_LinkDriverEx+0x94>)
 8013128:	7a5b      	ldrb	r3, [r3, #9]
 801312a:	b2db      	uxtb	r3, r3
 801312c:	4a17      	ldr	r2, [pc, #92]	; (801318c <FATFS_LinkDriverEx+0x94>)
 801312e:	009b      	lsls	r3, r3, #2
 8013130:	4413      	add	r3, r2
 8013132:	68fa      	ldr	r2, [r7, #12]
 8013134:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013136:	4b15      	ldr	r3, [pc, #84]	; (801318c <FATFS_LinkDriverEx+0x94>)
 8013138:	7a5b      	ldrb	r3, [r3, #9]
 801313a:	b2db      	uxtb	r3, r3
 801313c:	461a      	mov	r2, r3
 801313e:	4b13      	ldr	r3, [pc, #76]	; (801318c <FATFS_LinkDriverEx+0x94>)
 8013140:	4413      	add	r3, r2
 8013142:	79fa      	ldrb	r2, [r7, #7]
 8013144:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013146:	4b11      	ldr	r3, [pc, #68]	; (801318c <FATFS_LinkDriverEx+0x94>)
 8013148:	7a5b      	ldrb	r3, [r3, #9]
 801314a:	b2db      	uxtb	r3, r3
 801314c:	1c5a      	adds	r2, r3, #1
 801314e:	b2d1      	uxtb	r1, r2
 8013150:	4a0e      	ldr	r2, [pc, #56]	; (801318c <FATFS_LinkDriverEx+0x94>)
 8013152:	7251      	strb	r1, [r2, #9]
 8013154:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013156:	7dbb      	ldrb	r3, [r7, #22]
 8013158:	3330      	adds	r3, #48	; 0x30
 801315a:	b2da      	uxtb	r2, r3
 801315c:	68bb      	ldr	r3, [r7, #8]
 801315e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	3301      	adds	r3, #1
 8013164:	223a      	movs	r2, #58	; 0x3a
 8013166:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	3302      	adds	r3, #2
 801316c:	222f      	movs	r2, #47	; 0x2f
 801316e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	3303      	adds	r3, #3
 8013174:	2200      	movs	r2, #0
 8013176:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013178:	2300      	movs	r3, #0
 801317a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801317c:	7dfb      	ldrb	r3, [r7, #23]
}
 801317e:	4618      	mov	r0, r3
 8013180:	371c      	adds	r7, #28
 8013182:	46bd      	mov	sp, r7
 8013184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013188:	4770      	bx	lr
 801318a:	bf00      	nop
 801318c:	24000c8c 	.word	0x24000c8c

08013190 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801319a:	2200      	movs	r2, #0
 801319c:	6839      	ldr	r1, [r7, #0]
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7ff ffaa 	bl	80130f8 <FATFS_LinkDriverEx>
 80131a4:	4603      	mov	r3, r0
}
 80131a6:	4618      	mov	r0, r3
 80131a8:	3708      	adds	r7, #8
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
	...

080131b0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80131b4:	2201      	movs	r2, #1
 80131b6:	4912      	ldr	r1, [pc, #72]	; (8013200 <MX_USB_DEVICE_Init+0x50>)
 80131b8:	4812      	ldr	r0, [pc, #72]	; (8013204 <MX_USB_DEVICE_Init+0x54>)
 80131ba:	f7fe fc7b 	bl	8011ab4 <USBD_Init>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d001      	beq.n	80131c8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80131c4:	f7ee fee2 	bl	8001f8c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80131c8:	490f      	ldr	r1, [pc, #60]	; (8013208 <MX_USB_DEVICE_Init+0x58>)
 80131ca:	480e      	ldr	r0, [pc, #56]	; (8013204 <MX_USB_DEVICE_Init+0x54>)
 80131cc:	f7fe fca2 	bl	8011b14 <USBD_RegisterClass>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d001      	beq.n	80131da <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80131d6:	f7ee fed9 	bl	8001f8c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80131da:	490c      	ldr	r1, [pc, #48]	; (801320c <MX_USB_DEVICE_Init+0x5c>)
 80131dc:	4809      	ldr	r0, [pc, #36]	; (8013204 <MX_USB_DEVICE_Init+0x54>)
 80131de:	f7fe fb99 	bl	8011914 <USBD_CDC_RegisterInterface>
 80131e2:	4603      	mov	r3, r0
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d001      	beq.n	80131ec <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80131e8:	f7ee fed0 	bl	8001f8c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80131ec:	4805      	ldr	r0, [pc, #20]	; (8013204 <MX_USB_DEVICE_Init+0x54>)
 80131ee:	f7fe fcc7 	bl	8011b80 <USBD_Start>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d001      	beq.n	80131fc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80131f8:	f7ee fec8 	bl	8001f8c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80131fc:	bf00      	nop
 80131fe:	bd80      	pop	{r7, pc}
 8013200:	240000c4 	.word	0x240000c4
 8013204:	24000c98 	.word	0x24000c98
 8013208:	24000030 	.word	0x24000030
 801320c:	240000b0 	.word	0x240000b0

08013210 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8013210:	b580      	push	{r7, lr}
 8013212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8013214:	2200      	movs	r2, #0
 8013216:	4905      	ldr	r1, [pc, #20]	; (801322c <CDC_Init_HS+0x1c>)
 8013218:	4805      	ldr	r0, [pc, #20]	; (8013230 <CDC_Init_HS+0x20>)
 801321a:	f7fe fb95 	bl	8011948 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801321e:	4905      	ldr	r1, [pc, #20]	; (8013234 <CDC_Init_HS+0x24>)
 8013220:	4803      	ldr	r0, [pc, #12]	; (8013230 <CDC_Init_HS+0x20>)
 8013222:	f7fe fbb3 	bl	801198c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013226:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8013228:	4618      	mov	r0, r3
 801322a:	bd80      	pop	{r7, pc}
 801322c:	24001774 	.word	0x24001774
 8013230:	24000c98 	.word	0x24000c98
 8013234:	24000f74 	.word	0x24000f74

08013238 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8013238:	b480      	push	{r7}
 801323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801323c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801323e:	4618      	mov	r0, r3
 8013240:	46bd      	mov	sp, r7
 8013242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013246:	4770      	bx	lr

08013248 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013248:	b480      	push	{r7}
 801324a:	b083      	sub	sp, #12
 801324c:	af00      	add	r7, sp, #0
 801324e:	4603      	mov	r3, r0
 8013250:	6039      	str	r1, [r7, #0]
 8013252:	71fb      	strb	r3, [r7, #7]
 8013254:	4613      	mov	r3, r2
 8013256:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8013258:	79fb      	ldrb	r3, [r7, #7]
 801325a:	2b23      	cmp	r3, #35	; 0x23
 801325c:	d84a      	bhi.n	80132f4 <CDC_Control_HS+0xac>
 801325e:	a201      	add	r2, pc, #4	; (adr r2, 8013264 <CDC_Control_HS+0x1c>)
 8013260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013264:	080132f5 	.word	0x080132f5
 8013268:	080132f5 	.word	0x080132f5
 801326c:	080132f5 	.word	0x080132f5
 8013270:	080132f5 	.word	0x080132f5
 8013274:	080132f5 	.word	0x080132f5
 8013278:	080132f5 	.word	0x080132f5
 801327c:	080132f5 	.word	0x080132f5
 8013280:	080132f5 	.word	0x080132f5
 8013284:	080132f5 	.word	0x080132f5
 8013288:	080132f5 	.word	0x080132f5
 801328c:	080132f5 	.word	0x080132f5
 8013290:	080132f5 	.word	0x080132f5
 8013294:	080132f5 	.word	0x080132f5
 8013298:	080132f5 	.word	0x080132f5
 801329c:	080132f5 	.word	0x080132f5
 80132a0:	080132f5 	.word	0x080132f5
 80132a4:	080132f5 	.word	0x080132f5
 80132a8:	080132f5 	.word	0x080132f5
 80132ac:	080132f5 	.word	0x080132f5
 80132b0:	080132f5 	.word	0x080132f5
 80132b4:	080132f5 	.word	0x080132f5
 80132b8:	080132f5 	.word	0x080132f5
 80132bc:	080132f5 	.word	0x080132f5
 80132c0:	080132f5 	.word	0x080132f5
 80132c4:	080132f5 	.word	0x080132f5
 80132c8:	080132f5 	.word	0x080132f5
 80132cc:	080132f5 	.word	0x080132f5
 80132d0:	080132f5 	.word	0x080132f5
 80132d4:	080132f5 	.word	0x080132f5
 80132d8:	080132f5 	.word	0x080132f5
 80132dc:	080132f5 	.word	0x080132f5
 80132e0:	080132f5 	.word	0x080132f5
 80132e4:	080132f5 	.word	0x080132f5
 80132e8:	080132f5 	.word	0x080132f5
 80132ec:	080132f5 	.word	0x080132f5
 80132f0:	080132f5 	.word	0x080132f5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80132f4:	bf00      	nop
  }

  return (USBD_OK);
 80132f6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	370c      	adds	r7, #12
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr

08013304 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801330e:	6879      	ldr	r1, [r7, #4]
 8013310:	4805      	ldr	r0, [pc, #20]	; (8013328 <CDC_Receive_HS+0x24>)
 8013312:	f7fe fb3b 	bl	801198c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8013316:	4804      	ldr	r0, [pc, #16]	; (8013328 <CDC_Receive_HS+0x24>)
 8013318:	f7fe fb96 	bl	8011a48 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801331c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801331e:	4618      	mov	r0, r3
 8013320:	3708      	adds	r7, #8
 8013322:	46bd      	mov	sp, r7
 8013324:	bd80      	pop	{r7, pc}
 8013326:	bf00      	nop
 8013328:	24000c98 	.word	0x24000c98

0801332c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801332c:	b580      	push	{r7, lr}
 801332e:	b084      	sub	sp, #16
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	460b      	mov	r3, r1
 8013336:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013338:	2300      	movs	r3, #0
 801333a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801333c:	4b0d      	ldr	r3, [pc, #52]	; (8013374 <CDC_Transmit_HS+0x48>)
 801333e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013342:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801334a:	2b00      	cmp	r3, #0
 801334c:	d001      	beq.n	8013352 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801334e:	2301      	movs	r3, #1
 8013350:	e00b      	b.n	801336a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8013352:	887b      	ldrh	r3, [r7, #2]
 8013354:	461a      	mov	r2, r3
 8013356:	6879      	ldr	r1, [r7, #4]
 8013358:	4806      	ldr	r0, [pc, #24]	; (8013374 <CDC_Transmit_HS+0x48>)
 801335a:	f7fe faf5 	bl	8011948 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801335e:	4805      	ldr	r0, [pc, #20]	; (8013374 <CDC_Transmit_HS+0x48>)
 8013360:	f7fe fb32 	bl	80119c8 <USBD_CDC_TransmitPacket>
 8013364:	4603      	mov	r3, r0
 8013366:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8013368:	7bfb      	ldrb	r3, [r7, #15]
}
 801336a:	4618      	mov	r0, r3
 801336c:	3710      	adds	r7, #16
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
 8013372:	bf00      	nop
 8013374:	24000c98 	.word	0x24000c98

08013378 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013378:	b480      	push	{r7}
 801337a:	b087      	sub	sp, #28
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	4613      	mov	r3, r2
 8013384:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013386:	2300      	movs	r3, #0
 8013388:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801338a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801338e:	4618      	mov	r0, r3
 8013390:	371c      	adds	r7, #28
 8013392:	46bd      	mov	sp, r7
 8013394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013398:	4770      	bx	lr
	...

0801339c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	4603      	mov	r3, r0
 80133a4:	6039      	str	r1, [r7, #0]
 80133a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	2212      	movs	r2, #18
 80133ac:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80133ae:	4b03      	ldr	r3, [pc, #12]	; (80133bc <USBD_HS_DeviceDescriptor+0x20>)
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	370c      	adds	r7, #12
 80133b4:	46bd      	mov	sp, r7
 80133b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ba:	4770      	bx	lr
 80133bc:	240000e4 	.word	0x240000e4

080133c0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133c0:	b480      	push	{r7}
 80133c2:	b083      	sub	sp, #12
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	4603      	mov	r3, r0
 80133c8:	6039      	str	r1, [r7, #0]
 80133ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	2204      	movs	r2, #4
 80133d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80133d2:	4b03      	ldr	r3, [pc, #12]	; (80133e0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	370c      	adds	r7, #12
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr
 80133e0:	240000f8 	.word	0x240000f8

080133e4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133e4:	b580      	push	{r7, lr}
 80133e6:	b082      	sub	sp, #8
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	4603      	mov	r3, r0
 80133ec:	6039      	str	r1, [r7, #0]
 80133ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80133f0:	79fb      	ldrb	r3, [r7, #7]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d105      	bne.n	8013402 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80133f6:	683a      	ldr	r2, [r7, #0]
 80133f8:	4907      	ldr	r1, [pc, #28]	; (8013418 <USBD_HS_ProductStrDescriptor+0x34>)
 80133fa:	4808      	ldr	r0, [pc, #32]	; (801341c <USBD_HS_ProductStrDescriptor+0x38>)
 80133fc:	f7ff fd9c 	bl	8012f38 <USBD_GetString>
 8013400:	e004      	b.n	801340c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8013402:	683a      	ldr	r2, [r7, #0]
 8013404:	4904      	ldr	r1, [pc, #16]	; (8013418 <USBD_HS_ProductStrDescriptor+0x34>)
 8013406:	4805      	ldr	r0, [pc, #20]	; (801341c <USBD_HS_ProductStrDescriptor+0x38>)
 8013408:	f7ff fd96 	bl	8012f38 <USBD_GetString>
  }
  return USBD_StrDesc;
 801340c:	4b02      	ldr	r3, [pc, #8]	; (8013418 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801340e:	4618      	mov	r0, r3
 8013410:	3708      	adds	r7, #8
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
 8013416:	bf00      	nop
 8013418:	24001f74 	.word	0x24001f74
 801341c:	08018294 	.word	0x08018294

08013420 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013420:	b580      	push	{r7, lr}
 8013422:	b082      	sub	sp, #8
 8013424:	af00      	add	r7, sp, #0
 8013426:	4603      	mov	r3, r0
 8013428:	6039      	str	r1, [r7, #0]
 801342a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801342c:	683a      	ldr	r2, [r7, #0]
 801342e:	4904      	ldr	r1, [pc, #16]	; (8013440 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8013430:	4804      	ldr	r0, [pc, #16]	; (8013444 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8013432:	f7ff fd81 	bl	8012f38 <USBD_GetString>
  return USBD_StrDesc;
 8013436:	4b02      	ldr	r3, [pc, #8]	; (8013440 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8013438:	4618      	mov	r0, r3
 801343a:	3708      	adds	r7, #8
 801343c:	46bd      	mov	sp, r7
 801343e:	bd80      	pop	{r7, pc}
 8013440:	24001f74 	.word	0x24001f74
 8013444:	080182ac 	.word	0x080182ac

08013448 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b082      	sub	sp, #8
 801344c:	af00      	add	r7, sp, #0
 801344e:	4603      	mov	r3, r0
 8013450:	6039      	str	r1, [r7, #0]
 8013452:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013454:	683b      	ldr	r3, [r7, #0]
 8013456:	221a      	movs	r2, #26
 8013458:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801345a:	f000 f843 	bl	80134e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801345e:	4b02      	ldr	r3, [pc, #8]	; (8013468 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8013460:	4618      	mov	r0, r3
 8013462:	3708      	adds	r7, #8
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}
 8013468:	240000fc 	.word	0x240000fc

0801346c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b082      	sub	sp, #8
 8013470:	af00      	add	r7, sp, #0
 8013472:	4603      	mov	r3, r0
 8013474:	6039      	str	r1, [r7, #0]
 8013476:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013478:	79fb      	ldrb	r3, [r7, #7]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d105      	bne.n	801348a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801347e:	683a      	ldr	r2, [r7, #0]
 8013480:	4907      	ldr	r1, [pc, #28]	; (80134a0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8013482:	4808      	ldr	r0, [pc, #32]	; (80134a4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8013484:	f7ff fd58 	bl	8012f38 <USBD_GetString>
 8013488:	e004      	b.n	8013494 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801348a:	683a      	ldr	r2, [r7, #0]
 801348c:	4904      	ldr	r1, [pc, #16]	; (80134a0 <USBD_HS_ConfigStrDescriptor+0x34>)
 801348e:	4805      	ldr	r0, [pc, #20]	; (80134a4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8013490:	f7ff fd52 	bl	8012f38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013494:	4b02      	ldr	r3, [pc, #8]	; (80134a0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8013496:	4618      	mov	r0, r3
 8013498:	3708      	adds	r7, #8
 801349a:	46bd      	mov	sp, r7
 801349c:	bd80      	pop	{r7, pc}
 801349e:	bf00      	nop
 80134a0:	24001f74 	.word	0x24001f74
 80134a4:	080182c0 	.word	0x080182c0

080134a8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b082      	sub	sp, #8
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	4603      	mov	r3, r0
 80134b0:	6039      	str	r1, [r7, #0]
 80134b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80134b4:	79fb      	ldrb	r3, [r7, #7]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d105      	bne.n	80134c6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80134ba:	683a      	ldr	r2, [r7, #0]
 80134bc:	4907      	ldr	r1, [pc, #28]	; (80134dc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80134be:	4808      	ldr	r0, [pc, #32]	; (80134e0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80134c0:	f7ff fd3a 	bl	8012f38 <USBD_GetString>
 80134c4:	e004      	b.n	80134d0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80134c6:	683a      	ldr	r2, [r7, #0]
 80134c8:	4904      	ldr	r1, [pc, #16]	; (80134dc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80134ca:	4805      	ldr	r0, [pc, #20]	; (80134e0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80134cc:	f7ff fd34 	bl	8012f38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80134d0:	4b02      	ldr	r3, [pc, #8]	; (80134dc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	3708      	adds	r7, #8
 80134d6:	46bd      	mov	sp, r7
 80134d8:	bd80      	pop	{r7, pc}
 80134da:	bf00      	nop
 80134dc:	24001f74 	.word	0x24001f74
 80134e0:	080182cc 	.word	0x080182cc

080134e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80134ea:	4b0f      	ldr	r3, [pc, #60]	; (8013528 <Get_SerialNum+0x44>)
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80134f0:	4b0e      	ldr	r3, [pc, #56]	; (801352c <Get_SerialNum+0x48>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80134f6:	4b0e      	ldr	r3, [pc, #56]	; (8013530 <Get_SerialNum+0x4c>)
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80134fc:	68fa      	ldr	r2, [r7, #12]
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	4413      	add	r3, r2
 8013502:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d009      	beq.n	801351e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801350a:	2208      	movs	r2, #8
 801350c:	4909      	ldr	r1, [pc, #36]	; (8013534 <Get_SerialNum+0x50>)
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	f000 f814 	bl	801353c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013514:	2204      	movs	r2, #4
 8013516:	4908      	ldr	r1, [pc, #32]	; (8013538 <Get_SerialNum+0x54>)
 8013518:	68b8      	ldr	r0, [r7, #8]
 801351a:	f000 f80f 	bl	801353c <IntToUnicode>
  }
}
 801351e:	bf00      	nop
 8013520:	3710      	adds	r7, #16
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}
 8013526:	bf00      	nop
 8013528:	1ff1e800 	.word	0x1ff1e800
 801352c:	1ff1e804 	.word	0x1ff1e804
 8013530:	1ff1e808 	.word	0x1ff1e808
 8013534:	240000fe 	.word	0x240000fe
 8013538:	2400010e 	.word	0x2400010e

0801353c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801353c:	b480      	push	{r7}
 801353e:	b087      	sub	sp, #28
 8013540:	af00      	add	r7, sp, #0
 8013542:	60f8      	str	r0, [r7, #12]
 8013544:	60b9      	str	r1, [r7, #8]
 8013546:	4613      	mov	r3, r2
 8013548:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801354a:	2300      	movs	r3, #0
 801354c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801354e:	2300      	movs	r3, #0
 8013550:	75fb      	strb	r3, [r7, #23]
 8013552:	e027      	b.n	80135a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	0f1b      	lsrs	r3, r3, #28
 8013558:	2b09      	cmp	r3, #9
 801355a:	d80b      	bhi.n	8013574 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	0f1b      	lsrs	r3, r3, #28
 8013560:	b2da      	uxtb	r2, r3
 8013562:	7dfb      	ldrb	r3, [r7, #23]
 8013564:	005b      	lsls	r3, r3, #1
 8013566:	4619      	mov	r1, r3
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	440b      	add	r3, r1
 801356c:	3230      	adds	r2, #48	; 0x30
 801356e:	b2d2      	uxtb	r2, r2
 8013570:	701a      	strb	r2, [r3, #0]
 8013572:	e00a      	b.n	801358a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	0f1b      	lsrs	r3, r3, #28
 8013578:	b2da      	uxtb	r2, r3
 801357a:	7dfb      	ldrb	r3, [r7, #23]
 801357c:	005b      	lsls	r3, r3, #1
 801357e:	4619      	mov	r1, r3
 8013580:	68bb      	ldr	r3, [r7, #8]
 8013582:	440b      	add	r3, r1
 8013584:	3237      	adds	r2, #55	; 0x37
 8013586:	b2d2      	uxtb	r2, r2
 8013588:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	011b      	lsls	r3, r3, #4
 801358e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013590:	7dfb      	ldrb	r3, [r7, #23]
 8013592:	005b      	lsls	r3, r3, #1
 8013594:	3301      	adds	r3, #1
 8013596:	68ba      	ldr	r2, [r7, #8]
 8013598:	4413      	add	r3, r2
 801359a:	2200      	movs	r2, #0
 801359c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801359e:	7dfb      	ldrb	r3, [r7, #23]
 80135a0:	3301      	adds	r3, #1
 80135a2:	75fb      	strb	r3, [r7, #23]
 80135a4:	7dfa      	ldrb	r2, [r7, #23]
 80135a6:	79fb      	ldrb	r3, [r7, #7]
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d3d3      	bcc.n	8013554 <IntToUnicode+0x18>
  }
}
 80135ac:	bf00      	nop
 80135ae:	bf00      	nop
 80135b0:	371c      	adds	r7, #28
 80135b2:	46bd      	mov	sp, r7
 80135b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b8:	4770      	bx	lr
	...

080135bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b0b2      	sub	sp, #200	; 0xc8
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80135c4:	f107 0310 	add.w	r3, r7, #16
 80135c8:	22b8      	movs	r2, #184	; 0xb8
 80135ca:	2100      	movs	r1, #0
 80135cc:	4618      	mov	r0, r3
 80135ce:	f001 fb1a 	bl	8014c06 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80135d2:	687b      	ldr	r3, [r7, #4]
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	4a1a      	ldr	r2, [pc, #104]	; (8013640 <HAL_PCD_MspInit+0x84>)
 80135d8:	4293      	cmp	r3, r2
 80135da:	d12c      	bne.n	8013636 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80135dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80135e0:	f04f 0300 	mov.w	r3, #0
 80135e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80135e8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80135ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80135f0:	f107 0310 	add.w	r3, r7, #16
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7f7 fe61 	bl	800b2bc <HAL_RCCEx_PeriphCLKConfig>
 80135fa:	4603      	mov	r3, r0
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d001      	beq.n	8013604 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8013600:	f7ee fcc4 	bl	8001f8c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8013604:	f7f6 fee4 	bl	800a3d0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8013608:	4b0e      	ldr	r3, [pc, #56]	; (8013644 <HAL_PCD_MspInit+0x88>)
 801360a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801360e:	4a0d      	ldr	r2, [pc, #52]	; (8013644 <HAL_PCD_MspInit+0x88>)
 8013610:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013614:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8013618:	4b0a      	ldr	r3, [pc, #40]	; (8013644 <HAL_PCD_MspInit+0x88>)
 801361a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801361e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013622:	60fb      	str	r3, [r7, #12]
 8013624:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8013626:	2200      	movs	r2, #0
 8013628:	2100      	movs	r1, #0
 801362a:	204d      	movs	r0, #77	; 0x4d
 801362c:	f7f1 fad9 	bl	8004be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8013630:	204d      	movs	r0, #77	; 0x4d
 8013632:	f7f1 faf0 	bl	8004c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8013636:	bf00      	nop
 8013638:	37c8      	adds	r7, #200	; 0xc8
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	40040000 	.word	0x40040000
 8013644:	58024400 	.word	0x58024400

08013648 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013648:	b580      	push	{r7, lr}
 801364a:	b082      	sub	sp, #8
 801364c:	af00      	add	r7, sp, #0
 801364e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801365c:	4619      	mov	r1, r3
 801365e:	4610      	mov	r0, r2
 8013660:	f7fe fadb 	bl	8011c1a <USBD_LL_SetupStage>
}
 8013664:	bf00      	nop
 8013666:	3708      	adds	r7, #8
 8013668:	46bd      	mov	sp, r7
 801366a:	bd80      	pop	{r7, pc}

0801366c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801366c:	b580      	push	{r7, lr}
 801366e:	b082      	sub	sp, #8
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
 8013674:	460b      	mov	r3, r1
 8013676:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801367e:	78fa      	ldrb	r2, [r7, #3]
 8013680:	6879      	ldr	r1, [r7, #4]
 8013682:	4613      	mov	r3, r2
 8013684:	00db      	lsls	r3, r3, #3
 8013686:	4413      	add	r3, r2
 8013688:	009b      	lsls	r3, r3, #2
 801368a:	440b      	add	r3, r1
 801368c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8013690:	681a      	ldr	r2, [r3, #0]
 8013692:	78fb      	ldrb	r3, [r7, #3]
 8013694:	4619      	mov	r1, r3
 8013696:	f7fe fb15 	bl	8011cc4 <USBD_LL_DataOutStage>
}
 801369a:	bf00      	nop
 801369c:	3708      	adds	r7, #8
 801369e:	46bd      	mov	sp, r7
 80136a0:	bd80      	pop	{r7, pc}

080136a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136a2:	b580      	push	{r7, lr}
 80136a4:	b082      	sub	sp, #8
 80136a6:	af00      	add	r7, sp, #0
 80136a8:	6078      	str	r0, [r7, #4]
 80136aa:	460b      	mov	r3, r1
 80136ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80136b4:	78fa      	ldrb	r2, [r7, #3]
 80136b6:	6879      	ldr	r1, [r7, #4]
 80136b8:	4613      	mov	r3, r2
 80136ba:	00db      	lsls	r3, r3, #3
 80136bc:	4413      	add	r3, r2
 80136be:	009b      	lsls	r3, r3, #2
 80136c0:	440b      	add	r3, r1
 80136c2:	3348      	adds	r3, #72	; 0x48
 80136c4:	681a      	ldr	r2, [r3, #0]
 80136c6:	78fb      	ldrb	r3, [r7, #3]
 80136c8:	4619      	mov	r1, r3
 80136ca:	f7fe fbae 	bl	8011e2a <USBD_LL_DataInStage>
}
 80136ce:	bf00      	nop
 80136d0:	3708      	adds	r7, #8
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}

080136d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136d6:	b580      	push	{r7, lr}
 80136d8:	b082      	sub	sp, #8
 80136da:	af00      	add	r7, sp, #0
 80136dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80136e4:	4618      	mov	r0, r3
 80136e6:	f7fe fce8 	bl	80120ba <USBD_LL_SOF>
}
 80136ea:	bf00      	nop
 80136ec:	3708      	adds	r7, #8
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}

080136f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136f2:	b580      	push	{r7, lr}
 80136f4:	b084      	sub	sp, #16
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80136fa:	2301      	movs	r3, #1
 80136fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	691b      	ldr	r3, [r3, #16]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d102      	bne.n	801370c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013706:	2300      	movs	r3, #0
 8013708:	73fb      	strb	r3, [r7, #15]
 801370a:	e008      	b.n	801371e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	691b      	ldr	r3, [r3, #16]
 8013710:	2b02      	cmp	r3, #2
 8013712:	d102      	bne.n	801371a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013714:	2301      	movs	r3, #1
 8013716:	73fb      	strb	r3, [r7, #15]
 8013718:	e001      	b.n	801371e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801371a:	f7ee fc37 	bl	8001f8c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013724:	7bfa      	ldrb	r2, [r7, #15]
 8013726:	4611      	mov	r1, r2
 8013728:	4618      	mov	r0, r3
 801372a:	f7fe fc82 	bl	8012032 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801372e:	687b      	ldr	r3, [r7, #4]
 8013730:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013734:	4618      	mov	r0, r3
 8013736:	f7fe fc2a 	bl	8011f8e <USBD_LL_Reset>
}
 801373a:	bf00      	nop
 801373c:	3710      	adds	r7, #16
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}
	...

08013744 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b082      	sub	sp, #8
 8013748:	af00      	add	r7, sp, #0
 801374a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013752:	4618      	mov	r0, r3
 8013754:	f7fe fc7d 	bl	8012052 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	6812      	ldr	r2, [r2, #0]
 8013766:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801376a:	f043 0301 	orr.w	r3, r3, #1
 801376e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	6a1b      	ldr	r3, [r3, #32]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d005      	beq.n	8013784 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013778:	4b04      	ldr	r3, [pc, #16]	; (801378c <HAL_PCD_SuspendCallback+0x48>)
 801377a:	691b      	ldr	r3, [r3, #16]
 801377c:	4a03      	ldr	r2, [pc, #12]	; (801378c <HAL_PCD_SuspendCallback+0x48>)
 801377e:	f043 0306 	orr.w	r3, r3, #6
 8013782:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013784:	bf00      	nop
 8013786:	3708      	adds	r7, #8
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	e000ed00 	.word	0xe000ed00

08013790 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b082      	sub	sp, #8
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801379e:	4618      	mov	r0, r3
 80137a0:	f7fe fc73 	bl	801208a <USBD_LL_Resume>
}
 80137a4:	bf00      	nop
 80137a6:	3708      	adds	r7, #8
 80137a8:	46bd      	mov	sp, r7
 80137aa:	bd80      	pop	{r7, pc}

080137ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b082      	sub	sp, #8
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
 80137b4:	460b      	mov	r3, r1
 80137b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80137be:	78fa      	ldrb	r2, [r7, #3]
 80137c0:	4611      	mov	r1, r2
 80137c2:	4618      	mov	r0, r3
 80137c4:	f7fe fccb 	bl	801215e <USBD_LL_IsoOUTIncomplete>
}
 80137c8:	bf00      	nop
 80137ca:	3708      	adds	r7, #8
 80137cc:	46bd      	mov	sp, r7
 80137ce:	bd80      	pop	{r7, pc}

080137d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137d0:	b580      	push	{r7, lr}
 80137d2:	b082      	sub	sp, #8
 80137d4:	af00      	add	r7, sp, #0
 80137d6:	6078      	str	r0, [r7, #4]
 80137d8:	460b      	mov	r3, r1
 80137da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80137e2:	78fa      	ldrb	r2, [r7, #3]
 80137e4:	4611      	mov	r1, r2
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7fe fc87 	bl	80120fa <USBD_LL_IsoINIncomplete>
}
 80137ec:	bf00      	nop
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b082      	sub	sp, #8
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013802:	4618      	mov	r0, r3
 8013804:	f7fe fcdd 	bl	80121c2 <USBD_LL_DevConnected>
}
 8013808:	bf00      	nop
 801380a:	3708      	adds	r7, #8
 801380c:	46bd      	mov	sp, r7
 801380e:	bd80      	pop	{r7, pc}

08013810 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801381e:	4618      	mov	r0, r3
 8013820:	f7fe fcda 	bl	80121d8 <USBD_LL_DevDisconnected>
}
 8013824:	bf00      	nop
 8013826:	3708      	adds	r7, #8
 8013828:	46bd      	mov	sp, r7
 801382a:	bd80      	pop	{r7, pc}

0801382c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	2b01      	cmp	r3, #1
 801383a:	d140      	bne.n	80138be <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801383c:	4a22      	ldr	r2, [pc, #136]	; (80138c8 <USBD_LL_Init+0x9c>)
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	4a20      	ldr	r2, [pc, #128]	; (80138c8 <USBD_LL_Init+0x9c>)
 8013848:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801384c:	4b1e      	ldr	r3, [pc, #120]	; (80138c8 <USBD_LL_Init+0x9c>)
 801384e:	4a1f      	ldr	r2, [pc, #124]	; (80138cc <USBD_LL_Init+0xa0>)
 8013850:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8013852:	4b1d      	ldr	r3, [pc, #116]	; (80138c8 <USBD_LL_Init+0x9c>)
 8013854:	2209      	movs	r2, #9
 8013856:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8013858:	4b1b      	ldr	r3, [pc, #108]	; (80138c8 <USBD_LL_Init+0x9c>)
 801385a:	2202      	movs	r2, #2
 801385c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801385e:	4b1a      	ldr	r3, [pc, #104]	; (80138c8 <USBD_LL_Init+0x9c>)
 8013860:	2200      	movs	r2, #0
 8013862:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8013864:	4b18      	ldr	r3, [pc, #96]	; (80138c8 <USBD_LL_Init+0x9c>)
 8013866:	2202      	movs	r2, #2
 8013868:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801386a:	4b17      	ldr	r3, [pc, #92]	; (80138c8 <USBD_LL_Init+0x9c>)
 801386c:	2200      	movs	r2, #0
 801386e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8013870:	4b15      	ldr	r3, [pc, #84]	; (80138c8 <USBD_LL_Init+0x9c>)
 8013872:	2200      	movs	r2, #0
 8013874:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8013876:	4b14      	ldr	r3, [pc, #80]	; (80138c8 <USBD_LL_Init+0x9c>)
 8013878:	2200      	movs	r2, #0
 801387a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801387c:	4b12      	ldr	r3, [pc, #72]	; (80138c8 <USBD_LL_Init+0x9c>)
 801387e:	2200      	movs	r2, #0
 8013880:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8013882:	4b11      	ldr	r3, [pc, #68]	; (80138c8 <USBD_LL_Init+0x9c>)
 8013884:	2200      	movs	r2, #0
 8013886:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8013888:	4b0f      	ldr	r3, [pc, #60]	; (80138c8 <USBD_LL_Init+0x9c>)
 801388a:	2200      	movs	r2, #0
 801388c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801388e:	480e      	ldr	r0, [pc, #56]	; (80138c8 <USBD_LL_Init+0x9c>)
 8013890:	f7f5 faaa 	bl	8008de8 <HAL_PCD_Init>
 8013894:	4603      	mov	r3, r0
 8013896:	2b00      	cmp	r3, #0
 8013898:	d001      	beq.n	801389e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801389a:	f7ee fb77 	bl	8001f8c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801389e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80138a2:	4809      	ldr	r0, [pc, #36]	; (80138c8 <USBD_LL_Init+0x9c>)
 80138a4:	f7f6 fd19 	bl	800a2da <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80138a8:	2280      	movs	r2, #128	; 0x80
 80138aa:	2100      	movs	r1, #0
 80138ac:	4806      	ldr	r0, [pc, #24]	; (80138c8 <USBD_LL_Init+0x9c>)
 80138ae:	f7f6 fccd 	bl	800a24c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80138b2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80138b6:	2101      	movs	r1, #1
 80138b8:	4803      	ldr	r0, [pc, #12]	; (80138c8 <USBD_LL_Init+0x9c>)
 80138ba:	f7f6 fcc7 	bl	800a24c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80138be:	2300      	movs	r3, #0
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3708      	adds	r7, #8
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	24002174 	.word	0x24002174
 80138cc:	40040000 	.word	0x40040000

080138d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b084      	sub	sp, #16
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80138d8:	2300      	movs	r3, #0
 80138da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80138dc:	2300      	movs	r3, #0
 80138de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80138e6:	4618      	mov	r0, r3
 80138e8:	f7f5 fba2 	bl	8009030 <HAL_PCD_Start>
 80138ec:	4603      	mov	r3, r0
 80138ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80138f0:	7bfb      	ldrb	r3, [r7, #15]
 80138f2:	4618      	mov	r0, r3
 80138f4:	f000 f942 	bl	8013b7c <USBD_Get_USB_Status>
 80138f8:	4603      	mov	r3, r0
 80138fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80138fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80138fe:	4618      	mov	r0, r3
 8013900:	3710      	adds	r7, #16
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}

08013906 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013906:	b580      	push	{r7, lr}
 8013908:	b084      	sub	sp, #16
 801390a:	af00      	add	r7, sp, #0
 801390c:	6078      	str	r0, [r7, #4]
 801390e:	4608      	mov	r0, r1
 8013910:	4611      	mov	r1, r2
 8013912:	461a      	mov	r2, r3
 8013914:	4603      	mov	r3, r0
 8013916:	70fb      	strb	r3, [r7, #3]
 8013918:	460b      	mov	r3, r1
 801391a:	70bb      	strb	r3, [r7, #2]
 801391c:	4613      	mov	r3, r2
 801391e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013920:	2300      	movs	r3, #0
 8013922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013924:	2300      	movs	r3, #0
 8013926:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801392e:	78bb      	ldrb	r3, [r7, #2]
 8013930:	883a      	ldrh	r2, [r7, #0]
 8013932:	78f9      	ldrb	r1, [r7, #3]
 8013934:	f7f6 f8a2 	bl	8009a7c <HAL_PCD_EP_Open>
 8013938:	4603      	mov	r3, r0
 801393a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801393c:	7bfb      	ldrb	r3, [r7, #15]
 801393e:	4618      	mov	r0, r3
 8013940:	f000 f91c 	bl	8013b7c <USBD_Get_USB_Status>
 8013944:	4603      	mov	r3, r0
 8013946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013948:	7bbb      	ldrb	r3, [r7, #14]
}
 801394a:	4618      	mov	r0, r3
 801394c:	3710      	adds	r7, #16
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}

08013952 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013952:	b580      	push	{r7, lr}
 8013954:	b084      	sub	sp, #16
 8013956:	af00      	add	r7, sp, #0
 8013958:	6078      	str	r0, [r7, #4]
 801395a:	460b      	mov	r3, r1
 801395c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801395e:	2300      	movs	r3, #0
 8013960:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013962:	2300      	movs	r3, #0
 8013964:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801396c:	78fa      	ldrb	r2, [r7, #3]
 801396e:	4611      	mov	r1, r2
 8013970:	4618      	mov	r0, r3
 8013972:	f7f6 f8eb 	bl	8009b4c <HAL_PCD_EP_Close>
 8013976:	4603      	mov	r3, r0
 8013978:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801397a:	7bfb      	ldrb	r3, [r7, #15]
 801397c:	4618      	mov	r0, r3
 801397e:	f000 f8fd 	bl	8013b7c <USBD_Get_USB_Status>
 8013982:	4603      	mov	r3, r0
 8013984:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013986:	7bbb      	ldrb	r3, [r7, #14]
}
 8013988:	4618      	mov	r0, r3
 801398a:	3710      	adds	r7, #16
 801398c:	46bd      	mov	sp, r7
 801398e:	bd80      	pop	{r7, pc}

08013990 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013990:	b580      	push	{r7, lr}
 8013992:	b084      	sub	sp, #16
 8013994:	af00      	add	r7, sp, #0
 8013996:	6078      	str	r0, [r7, #4]
 8013998:	460b      	mov	r3, r1
 801399a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801399c:	2300      	movs	r3, #0
 801399e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139a0:	2300      	movs	r3, #0
 80139a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80139aa:	78fa      	ldrb	r2, [r7, #3]
 80139ac:	4611      	mov	r1, r2
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7f6 f9a5 	bl	8009cfe <HAL_PCD_EP_SetStall>
 80139b4:	4603      	mov	r3, r0
 80139b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139b8:	7bfb      	ldrb	r3, [r7, #15]
 80139ba:	4618      	mov	r0, r3
 80139bc:	f000 f8de 	bl	8013b7c <USBD_Get_USB_Status>
 80139c0:	4603      	mov	r3, r0
 80139c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80139c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3710      	adds	r7, #16
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bd80      	pop	{r7, pc}

080139ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139ce:	b580      	push	{r7, lr}
 80139d0:	b084      	sub	sp, #16
 80139d2:	af00      	add	r7, sp, #0
 80139d4:	6078      	str	r0, [r7, #4]
 80139d6:	460b      	mov	r3, r1
 80139d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139da:	2300      	movs	r3, #0
 80139dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139de:	2300      	movs	r3, #0
 80139e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80139e8:	78fa      	ldrb	r2, [r7, #3]
 80139ea:	4611      	mov	r1, r2
 80139ec:	4618      	mov	r0, r3
 80139ee:	f7f6 f9ea 	bl	8009dc6 <HAL_PCD_EP_ClrStall>
 80139f2:	4603      	mov	r3, r0
 80139f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139f6:	7bfb      	ldrb	r3, [r7, #15]
 80139f8:	4618      	mov	r0, r3
 80139fa:	f000 f8bf 	bl	8013b7c <USBD_Get_USB_Status>
 80139fe:	4603      	mov	r3, r0
 8013a00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a02:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a04:	4618      	mov	r0, r3
 8013a06:	3710      	adds	r7, #16
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd80      	pop	{r7, pc}

08013a0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b085      	sub	sp, #20
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
 8013a14:	460b      	mov	r3, r1
 8013a16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013a1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013a20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	da0b      	bge.n	8013a40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013a28:	78fb      	ldrb	r3, [r7, #3]
 8013a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013a2e:	68f9      	ldr	r1, [r7, #12]
 8013a30:	4613      	mov	r3, r2
 8013a32:	00db      	lsls	r3, r3, #3
 8013a34:	4413      	add	r3, r2
 8013a36:	009b      	lsls	r3, r3, #2
 8013a38:	440b      	add	r3, r1
 8013a3a:	333e      	adds	r3, #62	; 0x3e
 8013a3c:	781b      	ldrb	r3, [r3, #0]
 8013a3e:	e00b      	b.n	8013a58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013a40:	78fb      	ldrb	r3, [r7, #3]
 8013a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013a46:	68f9      	ldr	r1, [r7, #12]
 8013a48:	4613      	mov	r3, r2
 8013a4a:	00db      	lsls	r3, r3, #3
 8013a4c:	4413      	add	r3, r2
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	440b      	add	r3, r1
 8013a52:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013a56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013a58:	4618      	mov	r0, r3
 8013a5a:	3714      	adds	r7, #20
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a62:	4770      	bx	lr

08013a64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b084      	sub	sp, #16
 8013a68:	af00      	add	r7, sp, #0
 8013a6a:	6078      	str	r0, [r7, #4]
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a70:	2300      	movs	r3, #0
 8013a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a74:	2300      	movs	r3, #0
 8013a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013a7e:	78fa      	ldrb	r2, [r7, #3]
 8013a80:	4611      	mov	r1, r2
 8013a82:	4618      	mov	r0, r3
 8013a84:	f7f5 ffd5 	bl	8009a32 <HAL_PCD_SetAddress>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a8c:	7bfb      	ldrb	r3, [r7, #15]
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f000 f874 	bl	8013b7c <USBD_Get_USB_Status>
 8013a94:	4603      	mov	r3, r0
 8013a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a9a:	4618      	mov	r0, r3
 8013a9c:	3710      	adds	r7, #16
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}

08013aa2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013aa2:	b580      	push	{r7, lr}
 8013aa4:	b086      	sub	sp, #24
 8013aa6:	af00      	add	r7, sp, #0
 8013aa8:	60f8      	str	r0, [r7, #12]
 8013aaa:	607a      	str	r2, [r7, #4]
 8013aac:	603b      	str	r3, [r7, #0]
 8013aae:	460b      	mov	r3, r1
 8013ab0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013ac0:	7af9      	ldrb	r1, [r7, #11]
 8013ac2:	683b      	ldr	r3, [r7, #0]
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	f7f6 f8df 	bl	8009c88 <HAL_PCD_EP_Transmit>
 8013aca:	4603      	mov	r3, r0
 8013acc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ace:	7dfb      	ldrb	r3, [r7, #23]
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f000 f853 	bl	8013b7c <USBD_Get_USB_Status>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013ada:	7dbb      	ldrb	r3, [r7, #22]
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3718      	adds	r7, #24
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	bd80      	pop	{r7, pc}

08013ae4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b086      	sub	sp, #24
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	60f8      	str	r0, [r7, #12]
 8013aec:	607a      	str	r2, [r7, #4]
 8013aee:	603b      	str	r3, [r7, #0]
 8013af0:	460b      	mov	r3, r1
 8013af2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013af4:	2300      	movs	r3, #0
 8013af6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013af8:	2300      	movs	r3, #0
 8013afa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013b02:	7af9      	ldrb	r1, [r7, #11]
 8013b04:	683b      	ldr	r3, [r7, #0]
 8013b06:	687a      	ldr	r2, [r7, #4]
 8013b08:	f7f6 f86a 	bl	8009be0 <HAL_PCD_EP_Receive>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b10:	7dfb      	ldrb	r3, [r7, #23]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f000 f832 	bl	8013b7c <USBD_Get_USB_Status>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013b1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3718      	adds	r7, #24
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}

08013b26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b082      	sub	sp, #8
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
 8013b2e:	460b      	mov	r3, r1
 8013b30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013b38:	78fa      	ldrb	r2, [r7, #3]
 8013b3a:	4611      	mov	r1, r2
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7f6 f88b 	bl	8009c58 <HAL_PCD_EP_GetRxCount>
 8013b42:	4603      	mov	r3, r0
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3708      	adds	r7, #8
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}

08013b4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b083      	sub	sp, #12
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013b54:	4b03      	ldr	r3, [pc, #12]	; (8013b64 <USBD_static_malloc+0x18>)
}
 8013b56:	4618      	mov	r0, r3
 8013b58:	370c      	adds	r7, #12
 8013b5a:	46bd      	mov	sp, r7
 8013b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b60:	4770      	bx	lr
 8013b62:	bf00      	nop
 8013b64:	24002680 	.word	0x24002680

08013b68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013b68:	b480      	push	{r7}
 8013b6a:	b083      	sub	sp, #12
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013b70:	bf00      	nop
 8013b72:	370c      	adds	r7, #12
 8013b74:	46bd      	mov	sp, r7
 8013b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b7a:	4770      	bx	lr

08013b7c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013b7c:	b480      	push	{r7}
 8013b7e:	b085      	sub	sp, #20
 8013b80:	af00      	add	r7, sp, #0
 8013b82:	4603      	mov	r3, r0
 8013b84:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b86:	2300      	movs	r3, #0
 8013b88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013b8a:	79fb      	ldrb	r3, [r7, #7]
 8013b8c:	2b03      	cmp	r3, #3
 8013b8e:	d817      	bhi.n	8013bc0 <USBD_Get_USB_Status+0x44>
 8013b90:	a201      	add	r2, pc, #4	; (adr r2, 8013b98 <USBD_Get_USB_Status+0x1c>)
 8013b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b96:	bf00      	nop
 8013b98:	08013ba9 	.word	0x08013ba9
 8013b9c:	08013baf 	.word	0x08013baf
 8013ba0:	08013bb5 	.word	0x08013bb5
 8013ba4:	08013bbb 	.word	0x08013bbb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	73fb      	strb	r3, [r7, #15]
    break;
 8013bac:	e00b      	b.n	8013bc6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013bae:	2303      	movs	r3, #3
 8013bb0:	73fb      	strb	r3, [r7, #15]
    break;
 8013bb2:	e008      	b.n	8013bc6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	73fb      	strb	r3, [r7, #15]
    break;
 8013bb8:	e005      	b.n	8013bc6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013bba:	2303      	movs	r3, #3
 8013bbc:	73fb      	strb	r3, [r7, #15]
    break;
 8013bbe:	e002      	b.n	8013bc6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013bc0:	2303      	movs	r3, #3
 8013bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8013bc4:	bf00      	nop
  }
  return usb_status;
 8013bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3714      	adds	r7, #20
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bd2:	4770      	bx	lr

08013bd4 <malloc>:
 8013bd4:	4b02      	ldr	r3, [pc, #8]	; (8013be0 <malloc+0xc>)
 8013bd6:	4601      	mov	r1, r0
 8013bd8:	6818      	ldr	r0, [r3, #0]
 8013bda:	f000 b823 	b.w	8013c24 <_malloc_r>
 8013bde:	bf00      	nop
 8013be0:	24000170 	.word	0x24000170

08013be4 <sbrk_aligned>:
 8013be4:	b570      	push	{r4, r5, r6, lr}
 8013be6:	4e0e      	ldr	r6, [pc, #56]	; (8013c20 <sbrk_aligned+0x3c>)
 8013be8:	460c      	mov	r4, r1
 8013bea:	6831      	ldr	r1, [r6, #0]
 8013bec:	4605      	mov	r5, r0
 8013bee:	b911      	cbnz	r1, 8013bf6 <sbrk_aligned+0x12>
 8013bf0:	f001 f84a 	bl	8014c88 <_sbrk_r>
 8013bf4:	6030      	str	r0, [r6, #0]
 8013bf6:	4621      	mov	r1, r4
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	f001 f845 	bl	8014c88 <_sbrk_r>
 8013bfe:	1c43      	adds	r3, r0, #1
 8013c00:	d00a      	beq.n	8013c18 <sbrk_aligned+0x34>
 8013c02:	1cc4      	adds	r4, r0, #3
 8013c04:	f024 0403 	bic.w	r4, r4, #3
 8013c08:	42a0      	cmp	r0, r4
 8013c0a:	d007      	beq.n	8013c1c <sbrk_aligned+0x38>
 8013c0c:	1a21      	subs	r1, r4, r0
 8013c0e:	4628      	mov	r0, r5
 8013c10:	f001 f83a 	bl	8014c88 <_sbrk_r>
 8013c14:	3001      	adds	r0, #1
 8013c16:	d101      	bne.n	8013c1c <sbrk_aligned+0x38>
 8013c18:	f04f 34ff 	mov.w	r4, #4294967295
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	bd70      	pop	{r4, r5, r6, pc}
 8013c20:	240028a4 	.word	0x240028a4

08013c24 <_malloc_r>:
 8013c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c28:	1ccd      	adds	r5, r1, #3
 8013c2a:	f025 0503 	bic.w	r5, r5, #3
 8013c2e:	3508      	adds	r5, #8
 8013c30:	2d0c      	cmp	r5, #12
 8013c32:	bf38      	it	cc
 8013c34:	250c      	movcc	r5, #12
 8013c36:	2d00      	cmp	r5, #0
 8013c38:	4607      	mov	r7, r0
 8013c3a:	db01      	blt.n	8013c40 <_malloc_r+0x1c>
 8013c3c:	42a9      	cmp	r1, r5
 8013c3e:	d905      	bls.n	8013c4c <_malloc_r+0x28>
 8013c40:	230c      	movs	r3, #12
 8013c42:	603b      	str	r3, [r7, #0]
 8013c44:	2600      	movs	r6, #0
 8013c46:	4630      	mov	r0, r6
 8013c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013d20 <_malloc_r+0xfc>
 8013c50:	f000 f868 	bl	8013d24 <__malloc_lock>
 8013c54:	f8d8 3000 	ldr.w	r3, [r8]
 8013c58:	461c      	mov	r4, r3
 8013c5a:	bb5c      	cbnz	r4, 8013cb4 <_malloc_r+0x90>
 8013c5c:	4629      	mov	r1, r5
 8013c5e:	4638      	mov	r0, r7
 8013c60:	f7ff ffc0 	bl	8013be4 <sbrk_aligned>
 8013c64:	1c43      	adds	r3, r0, #1
 8013c66:	4604      	mov	r4, r0
 8013c68:	d155      	bne.n	8013d16 <_malloc_r+0xf2>
 8013c6a:	f8d8 4000 	ldr.w	r4, [r8]
 8013c6e:	4626      	mov	r6, r4
 8013c70:	2e00      	cmp	r6, #0
 8013c72:	d145      	bne.n	8013d00 <_malloc_r+0xdc>
 8013c74:	2c00      	cmp	r4, #0
 8013c76:	d048      	beq.n	8013d0a <_malloc_r+0xe6>
 8013c78:	6823      	ldr	r3, [r4, #0]
 8013c7a:	4631      	mov	r1, r6
 8013c7c:	4638      	mov	r0, r7
 8013c7e:	eb04 0903 	add.w	r9, r4, r3
 8013c82:	f001 f801 	bl	8014c88 <_sbrk_r>
 8013c86:	4581      	cmp	r9, r0
 8013c88:	d13f      	bne.n	8013d0a <_malloc_r+0xe6>
 8013c8a:	6821      	ldr	r1, [r4, #0]
 8013c8c:	1a6d      	subs	r5, r5, r1
 8013c8e:	4629      	mov	r1, r5
 8013c90:	4638      	mov	r0, r7
 8013c92:	f7ff ffa7 	bl	8013be4 <sbrk_aligned>
 8013c96:	3001      	adds	r0, #1
 8013c98:	d037      	beq.n	8013d0a <_malloc_r+0xe6>
 8013c9a:	6823      	ldr	r3, [r4, #0]
 8013c9c:	442b      	add	r3, r5
 8013c9e:	6023      	str	r3, [r4, #0]
 8013ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d038      	beq.n	8013d1a <_malloc_r+0xf6>
 8013ca8:	685a      	ldr	r2, [r3, #4]
 8013caa:	42a2      	cmp	r2, r4
 8013cac:	d12b      	bne.n	8013d06 <_malloc_r+0xe2>
 8013cae:	2200      	movs	r2, #0
 8013cb0:	605a      	str	r2, [r3, #4]
 8013cb2:	e00f      	b.n	8013cd4 <_malloc_r+0xb0>
 8013cb4:	6822      	ldr	r2, [r4, #0]
 8013cb6:	1b52      	subs	r2, r2, r5
 8013cb8:	d41f      	bmi.n	8013cfa <_malloc_r+0xd6>
 8013cba:	2a0b      	cmp	r2, #11
 8013cbc:	d917      	bls.n	8013cee <_malloc_r+0xca>
 8013cbe:	1961      	adds	r1, r4, r5
 8013cc0:	42a3      	cmp	r3, r4
 8013cc2:	6025      	str	r5, [r4, #0]
 8013cc4:	bf18      	it	ne
 8013cc6:	6059      	strne	r1, [r3, #4]
 8013cc8:	6863      	ldr	r3, [r4, #4]
 8013cca:	bf08      	it	eq
 8013ccc:	f8c8 1000 	streq.w	r1, [r8]
 8013cd0:	5162      	str	r2, [r4, r5]
 8013cd2:	604b      	str	r3, [r1, #4]
 8013cd4:	4638      	mov	r0, r7
 8013cd6:	f104 060b 	add.w	r6, r4, #11
 8013cda:	f000 f829 	bl	8013d30 <__malloc_unlock>
 8013cde:	f026 0607 	bic.w	r6, r6, #7
 8013ce2:	1d23      	adds	r3, r4, #4
 8013ce4:	1af2      	subs	r2, r6, r3
 8013ce6:	d0ae      	beq.n	8013c46 <_malloc_r+0x22>
 8013ce8:	1b9b      	subs	r3, r3, r6
 8013cea:	50a3      	str	r3, [r4, r2]
 8013cec:	e7ab      	b.n	8013c46 <_malloc_r+0x22>
 8013cee:	42a3      	cmp	r3, r4
 8013cf0:	6862      	ldr	r2, [r4, #4]
 8013cf2:	d1dd      	bne.n	8013cb0 <_malloc_r+0x8c>
 8013cf4:	f8c8 2000 	str.w	r2, [r8]
 8013cf8:	e7ec      	b.n	8013cd4 <_malloc_r+0xb0>
 8013cfa:	4623      	mov	r3, r4
 8013cfc:	6864      	ldr	r4, [r4, #4]
 8013cfe:	e7ac      	b.n	8013c5a <_malloc_r+0x36>
 8013d00:	4634      	mov	r4, r6
 8013d02:	6876      	ldr	r6, [r6, #4]
 8013d04:	e7b4      	b.n	8013c70 <_malloc_r+0x4c>
 8013d06:	4613      	mov	r3, r2
 8013d08:	e7cc      	b.n	8013ca4 <_malloc_r+0x80>
 8013d0a:	230c      	movs	r3, #12
 8013d0c:	603b      	str	r3, [r7, #0]
 8013d0e:	4638      	mov	r0, r7
 8013d10:	f000 f80e 	bl	8013d30 <__malloc_unlock>
 8013d14:	e797      	b.n	8013c46 <_malloc_r+0x22>
 8013d16:	6025      	str	r5, [r4, #0]
 8013d18:	e7dc      	b.n	8013cd4 <_malloc_r+0xb0>
 8013d1a:	605b      	str	r3, [r3, #4]
 8013d1c:	deff      	udf	#255	; 0xff
 8013d1e:	bf00      	nop
 8013d20:	240028a0 	.word	0x240028a0

08013d24 <__malloc_lock>:
 8013d24:	4801      	ldr	r0, [pc, #4]	; (8013d2c <__malloc_lock+0x8>)
 8013d26:	f7ef ba00 	b.w	800312a <__retarget_lock_acquire_recursive>
 8013d2a:	bf00      	nop
 8013d2c:	24000c78 	.word	0x24000c78

08013d30 <__malloc_unlock>:
 8013d30:	4801      	ldr	r0, [pc, #4]	; (8013d38 <__malloc_unlock+0x8>)
 8013d32:	f7ef ba0e 	b.w	8003152 <__retarget_lock_release_recursive>
 8013d36:	bf00      	nop
 8013d38:	24000c78 	.word	0x24000c78

08013d3c <__cvt>:
 8013d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d3e:	ed2d 8b02 	vpush	{d8}
 8013d42:	eeb0 8b40 	vmov.f64	d8, d0
 8013d46:	b085      	sub	sp, #20
 8013d48:	4617      	mov	r7, r2
 8013d4a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8013d4c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8013d4e:	ee18 2a90 	vmov	r2, s17
 8013d52:	f025 0520 	bic.w	r5, r5, #32
 8013d56:	2a00      	cmp	r2, #0
 8013d58:	bfb6      	itet	lt
 8013d5a:	222d      	movlt	r2, #45	; 0x2d
 8013d5c:	2200      	movge	r2, #0
 8013d5e:	eeb1 8b40 	vneglt.f64	d8, d0
 8013d62:	2d46      	cmp	r5, #70	; 0x46
 8013d64:	460c      	mov	r4, r1
 8013d66:	701a      	strb	r2, [r3, #0]
 8013d68:	d004      	beq.n	8013d74 <__cvt+0x38>
 8013d6a:	2d45      	cmp	r5, #69	; 0x45
 8013d6c:	d100      	bne.n	8013d70 <__cvt+0x34>
 8013d6e:	3401      	adds	r4, #1
 8013d70:	2102      	movs	r1, #2
 8013d72:	e000      	b.n	8013d76 <__cvt+0x3a>
 8013d74:	2103      	movs	r1, #3
 8013d76:	ab03      	add	r3, sp, #12
 8013d78:	9301      	str	r3, [sp, #4]
 8013d7a:	ab02      	add	r3, sp, #8
 8013d7c:	9300      	str	r3, [sp, #0]
 8013d7e:	4622      	mov	r2, r4
 8013d80:	4633      	mov	r3, r6
 8013d82:	eeb0 0b48 	vmov.f64	d0, d8
 8013d86:	f001 f85b 	bl	8014e40 <_dtoa_r>
 8013d8a:	2d47      	cmp	r5, #71	; 0x47
 8013d8c:	d101      	bne.n	8013d92 <__cvt+0x56>
 8013d8e:	07fb      	lsls	r3, r7, #31
 8013d90:	d51a      	bpl.n	8013dc8 <__cvt+0x8c>
 8013d92:	2d46      	cmp	r5, #70	; 0x46
 8013d94:	eb00 0204 	add.w	r2, r0, r4
 8013d98:	d10c      	bne.n	8013db4 <__cvt+0x78>
 8013d9a:	7803      	ldrb	r3, [r0, #0]
 8013d9c:	2b30      	cmp	r3, #48	; 0x30
 8013d9e:	d107      	bne.n	8013db0 <__cvt+0x74>
 8013da0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013da8:	bf1c      	itt	ne
 8013daa:	f1c4 0401 	rsbne	r4, r4, #1
 8013dae:	6034      	strne	r4, [r6, #0]
 8013db0:	6833      	ldr	r3, [r6, #0]
 8013db2:	441a      	add	r2, r3
 8013db4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dbc:	bf08      	it	eq
 8013dbe:	9203      	streq	r2, [sp, #12]
 8013dc0:	2130      	movs	r1, #48	; 0x30
 8013dc2:	9b03      	ldr	r3, [sp, #12]
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	d307      	bcc.n	8013dd8 <__cvt+0x9c>
 8013dc8:	9b03      	ldr	r3, [sp, #12]
 8013dca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013dcc:	1a1b      	subs	r3, r3, r0
 8013dce:	6013      	str	r3, [r2, #0]
 8013dd0:	b005      	add	sp, #20
 8013dd2:	ecbd 8b02 	vpop	{d8}
 8013dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dd8:	1c5c      	adds	r4, r3, #1
 8013dda:	9403      	str	r4, [sp, #12]
 8013ddc:	7019      	strb	r1, [r3, #0]
 8013dde:	e7f0      	b.n	8013dc2 <__cvt+0x86>

08013de0 <__exponent>:
 8013de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013de2:	4603      	mov	r3, r0
 8013de4:	2900      	cmp	r1, #0
 8013de6:	bfb8      	it	lt
 8013de8:	4249      	neglt	r1, r1
 8013dea:	f803 2b02 	strb.w	r2, [r3], #2
 8013dee:	bfb4      	ite	lt
 8013df0:	222d      	movlt	r2, #45	; 0x2d
 8013df2:	222b      	movge	r2, #43	; 0x2b
 8013df4:	2909      	cmp	r1, #9
 8013df6:	7042      	strb	r2, [r0, #1]
 8013df8:	dd2a      	ble.n	8013e50 <__exponent+0x70>
 8013dfa:	f10d 0207 	add.w	r2, sp, #7
 8013dfe:	4617      	mov	r7, r2
 8013e00:	260a      	movs	r6, #10
 8013e02:	4694      	mov	ip, r2
 8013e04:	fb91 f5f6 	sdiv	r5, r1, r6
 8013e08:	fb06 1415 	mls	r4, r6, r5, r1
 8013e0c:	3430      	adds	r4, #48	; 0x30
 8013e0e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8013e12:	460c      	mov	r4, r1
 8013e14:	2c63      	cmp	r4, #99	; 0x63
 8013e16:	f102 32ff 	add.w	r2, r2, #4294967295
 8013e1a:	4629      	mov	r1, r5
 8013e1c:	dcf1      	bgt.n	8013e02 <__exponent+0x22>
 8013e1e:	3130      	adds	r1, #48	; 0x30
 8013e20:	f1ac 0402 	sub.w	r4, ip, #2
 8013e24:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013e28:	1c41      	adds	r1, r0, #1
 8013e2a:	4622      	mov	r2, r4
 8013e2c:	42ba      	cmp	r2, r7
 8013e2e:	d30a      	bcc.n	8013e46 <__exponent+0x66>
 8013e30:	f10d 0209 	add.w	r2, sp, #9
 8013e34:	eba2 020c 	sub.w	r2, r2, ip
 8013e38:	42bc      	cmp	r4, r7
 8013e3a:	bf88      	it	hi
 8013e3c:	2200      	movhi	r2, #0
 8013e3e:	4413      	add	r3, r2
 8013e40:	1a18      	subs	r0, r3, r0
 8013e42:	b003      	add	sp, #12
 8013e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e46:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013e4a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8013e4e:	e7ed      	b.n	8013e2c <__exponent+0x4c>
 8013e50:	2330      	movs	r3, #48	; 0x30
 8013e52:	3130      	adds	r1, #48	; 0x30
 8013e54:	7083      	strb	r3, [r0, #2]
 8013e56:	70c1      	strb	r1, [r0, #3]
 8013e58:	1d03      	adds	r3, r0, #4
 8013e5a:	e7f1      	b.n	8013e40 <__exponent+0x60>
 8013e5c:	0000      	movs	r0, r0
	...

08013e60 <_printf_float>:
 8013e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e64:	b08b      	sub	sp, #44	; 0x2c
 8013e66:	460c      	mov	r4, r1
 8013e68:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8013e6c:	4616      	mov	r6, r2
 8013e6e:	461f      	mov	r7, r3
 8013e70:	4605      	mov	r5, r0
 8013e72:	f000 fed1 	bl	8014c18 <_localeconv_r>
 8013e76:	f8d0 b000 	ldr.w	fp, [r0]
 8013e7a:	4658      	mov	r0, fp
 8013e7c:	f7ec fa98 	bl	80003b0 <strlen>
 8013e80:	2300      	movs	r3, #0
 8013e82:	9308      	str	r3, [sp, #32]
 8013e84:	f8d8 3000 	ldr.w	r3, [r8]
 8013e88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8013e8c:	6822      	ldr	r2, [r4, #0]
 8013e8e:	3307      	adds	r3, #7
 8013e90:	f023 0307 	bic.w	r3, r3, #7
 8013e94:	f103 0108 	add.w	r1, r3, #8
 8013e98:	f8c8 1000 	str.w	r1, [r8]
 8013e9c:	ed93 0b00 	vldr	d0, [r3]
 8013ea0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8014100 <_printf_float+0x2a0>
 8013ea4:	eeb0 7bc0 	vabs.f64	d7, d0
 8013ea8:	eeb4 7b46 	vcmp.f64	d7, d6
 8013eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013eb0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8013eb4:	4682      	mov	sl, r0
 8013eb6:	dd24      	ble.n	8013f02 <_printf_float+0xa2>
 8013eb8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8013ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ec0:	d502      	bpl.n	8013ec8 <_printf_float+0x68>
 8013ec2:	232d      	movs	r3, #45	; 0x2d
 8013ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ec8:	498f      	ldr	r1, [pc, #572]	; (8014108 <_printf_float+0x2a8>)
 8013eca:	4b90      	ldr	r3, [pc, #576]	; (801410c <_printf_float+0x2ac>)
 8013ecc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8013ed0:	bf94      	ite	ls
 8013ed2:	4688      	movls	r8, r1
 8013ed4:	4698      	movhi	r8, r3
 8013ed6:	2303      	movs	r3, #3
 8013ed8:	6123      	str	r3, [r4, #16]
 8013eda:	f022 0204 	bic.w	r2, r2, #4
 8013ede:	2300      	movs	r3, #0
 8013ee0:	6022      	str	r2, [r4, #0]
 8013ee2:	9304      	str	r3, [sp, #16]
 8013ee4:	9700      	str	r7, [sp, #0]
 8013ee6:	4633      	mov	r3, r6
 8013ee8:	aa09      	add	r2, sp, #36	; 0x24
 8013eea:	4621      	mov	r1, r4
 8013eec:	4628      	mov	r0, r5
 8013eee:	f000 f9d1 	bl	8014294 <_printf_common>
 8013ef2:	3001      	adds	r0, #1
 8013ef4:	f040 808a 	bne.w	801400c <_printf_float+0x1ac>
 8013ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8013efc:	b00b      	add	sp, #44	; 0x2c
 8013efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f02:	eeb4 0b40 	vcmp.f64	d0, d0
 8013f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f0a:	d709      	bvc.n	8013f20 <_printf_float+0xc0>
 8013f0c:	ee10 3a90 	vmov	r3, s1
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	bfbc      	itt	lt
 8013f14:	232d      	movlt	r3, #45	; 0x2d
 8013f16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013f1a:	497d      	ldr	r1, [pc, #500]	; (8014110 <_printf_float+0x2b0>)
 8013f1c:	4b7d      	ldr	r3, [pc, #500]	; (8014114 <_printf_float+0x2b4>)
 8013f1e:	e7d5      	b.n	8013ecc <_printf_float+0x6c>
 8013f20:	6863      	ldr	r3, [r4, #4]
 8013f22:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013f26:	9104      	str	r1, [sp, #16]
 8013f28:	1c59      	adds	r1, r3, #1
 8013f2a:	d13c      	bne.n	8013fa6 <_printf_float+0x146>
 8013f2c:	2306      	movs	r3, #6
 8013f2e:	6063      	str	r3, [r4, #4]
 8013f30:	2300      	movs	r3, #0
 8013f32:	9303      	str	r3, [sp, #12]
 8013f34:	ab08      	add	r3, sp, #32
 8013f36:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8013f3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013f3e:	ab07      	add	r3, sp, #28
 8013f40:	6861      	ldr	r1, [r4, #4]
 8013f42:	9300      	str	r3, [sp, #0]
 8013f44:	6022      	str	r2, [r4, #0]
 8013f46:	f10d 031b 	add.w	r3, sp, #27
 8013f4a:	4628      	mov	r0, r5
 8013f4c:	f7ff fef6 	bl	8013d3c <__cvt>
 8013f50:	9b04      	ldr	r3, [sp, #16]
 8013f52:	9907      	ldr	r1, [sp, #28]
 8013f54:	2b47      	cmp	r3, #71	; 0x47
 8013f56:	4680      	mov	r8, r0
 8013f58:	d108      	bne.n	8013f6c <_printf_float+0x10c>
 8013f5a:	1cc8      	adds	r0, r1, #3
 8013f5c:	db02      	blt.n	8013f64 <_printf_float+0x104>
 8013f5e:	6863      	ldr	r3, [r4, #4]
 8013f60:	4299      	cmp	r1, r3
 8013f62:	dd41      	ble.n	8013fe8 <_printf_float+0x188>
 8013f64:	f1a9 0902 	sub.w	r9, r9, #2
 8013f68:	fa5f f989 	uxtb.w	r9, r9
 8013f6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013f70:	d820      	bhi.n	8013fb4 <_printf_float+0x154>
 8013f72:	3901      	subs	r1, #1
 8013f74:	464a      	mov	r2, r9
 8013f76:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013f7a:	9107      	str	r1, [sp, #28]
 8013f7c:	f7ff ff30 	bl	8013de0 <__exponent>
 8013f80:	9a08      	ldr	r2, [sp, #32]
 8013f82:	9004      	str	r0, [sp, #16]
 8013f84:	1813      	adds	r3, r2, r0
 8013f86:	2a01      	cmp	r2, #1
 8013f88:	6123      	str	r3, [r4, #16]
 8013f8a:	dc02      	bgt.n	8013f92 <_printf_float+0x132>
 8013f8c:	6822      	ldr	r2, [r4, #0]
 8013f8e:	07d2      	lsls	r2, r2, #31
 8013f90:	d501      	bpl.n	8013f96 <_printf_float+0x136>
 8013f92:	3301      	adds	r3, #1
 8013f94:	6123      	str	r3, [r4, #16]
 8013f96:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d0a2      	beq.n	8013ee4 <_printf_float+0x84>
 8013f9e:	232d      	movs	r3, #45	; 0x2d
 8013fa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013fa4:	e79e      	b.n	8013ee4 <_printf_float+0x84>
 8013fa6:	9904      	ldr	r1, [sp, #16]
 8013fa8:	2947      	cmp	r1, #71	; 0x47
 8013faa:	d1c1      	bne.n	8013f30 <_printf_float+0xd0>
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d1bf      	bne.n	8013f30 <_printf_float+0xd0>
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	e7bc      	b.n	8013f2e <_printf_float+0xce>
 8013fb4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013fb8:	d118      	bne.n	8013fec <_printf_float+0x18c>
 8013fba:	2900      	cmp	r1, #0
 8013fbc:	6863      	ldr	r3, [r4, #4]
 8013fbe:	dd0b      	ble.n	8013fd8 <_printf_float+0x178>
 8013fc0:	6121      	str	r1, [r4, #16]
 8013fc2:	b913      	cbnz	r3, 8013fca <_printf_float+0x16a>
 8013fc4:	6822      	ldr	r2, [r4, #0]
 8013fc6:	07d0      	lsls	r0, r2, #31
 8013fc8:	d502      	bpl.n	8013fd0 <_printf_float+0x170>
 8013fca:	3301      	adds	r3, #1
 8013fcc:	440b      	add	r3, r1
 8013fce:	6123      	str	r3, [r4, #16]
 8013fd0:	2300      	movs	r3, #0
 8013fd2:	65a1      	str	r1, [r4, #88]	; 0x58
 8013fd4:	9304      	str	r3, [sp, #16]
 8013fd6:	e7de      	b.n	8013f96 <_printf_float+0x136>
 8013fd8:	b913      	cbnz	r3, 8013fe0 <_printf_float+0x180>
 8013fda:	6822      	ldr	r2, [r4, #0]
 8013fdc:	07d2      	lsls	r2, r2, #31
 8013fde:	d501      	bpl.n	8013fe4 <_printf_float+0x184>
 8013fe0:	3302      	adds	r3, #2
 8013fe2:	e7f4      	b.n	8013fce <_printf_float+0x16e>
 8013fe4:	2301      	movs	r3, #1
 8013fe6:	e7f2      	b.n	8013fce <_printf_float+0x16e>
 8013fe8:	f04f 0967 	mov.w	r9, #103	; 0x67
 8013fec:	9b08      	ldr	r3, [sp, #32]
 8013fee:	4299      	cmp	r1, r3
 8013ff0:	db05      	blt.n	8013ffe <_printf_float+0x19e>
 8013ff2:	6823      	ldr	r3, [r4, #0]
 8013ff4:	6121      	str	r1, [r4, #16]
 8013ff6:	07d8      	lsls	r0, r3, #31
 8013ff8:	d5ea      	bpl.n	8013fd0 <_printf_float+0x170>
 8013ffa:	1c4b      	adds	r3, r1, #1
 8013ffc:	e7e7      	b.n	8013fce <_printf_float+0x16e>
 8013ffe:	2900      	cmp	r1, #0
 8014000:	bfd4      	ite	le
 8014002:	f1c1 0202 	rsble	r2, r1, #2
 8014006:	2201      	movgt	r2, #1
 8014008:	4413      	add	r3, r2
 801400a:	e7e0      	b.n	8013fce <_printf_float+0x16e>
 801400c:	6823      	ldr	r3, [r4, #0]
 801400e:	055a      	lsls	r2, r3, #21
 8014010:	d407      	bmi.n	8014022 <_printf_float+0x1c2>
 8014012:	6923      	ldr	r3, [r4, #16]
 8014014:	4642      	mov	r2, r8
 8014016:	4631      	mov	r1, r6
 8014018:	4628      	mov	r0, r5
 801401a:	47b8      	blx	r7
 801401c:	3001      	adds	r0, #1
 801401e:	d12a      	bne.n	8014076 <_printf_float+0x216>
 8014020:	e76a      	b.n	8013ef8 <_printf_float+0x98>
 8014022:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8014026:	f240 80e0 	bls.w	80141ea <_printf_float+0x38a>
 801402a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801402e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014036:	d133      	bne.n	80140a0 <_printf_float+0x240>
 8014038:	4a37      	ldr	r2, [pc, #220]	; (8014118 <_printf_float+0x2b8>)
 801403a:	2301      	movs	r3, #1
 801403c:	4631      	mov	r1, r6
 801403e:	4628      	mov	r0, r5
 8014040:	47b8      	blx	r7
 8014042:	3001      	adds	r0, #1
 8014044:	f43f af58 	beq.w	8013ef8 <_printf_float+0x98>
 8014048:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801404c:	429a      	cmp	r2, r3
 801404e:	db02      	blt.n	8014056 <_printf_float+0x1f6>
 8014050:	6823      	ldr	r3, [r4, #0]
 8014052:	07d8      	lsls	r0, r3, #31
 8014054:	d50f      	bpl.n	8014076 <_printf_float+0x216>
 8014056:	4653      	mov	r3, sl
 8014058:	465a      	mov	r2, fp
 801405a:	4631      	mov	r1, r6
 801405c:	4628      	mov	r0, r5
 801405e:	47b8      	blx	r7
 8014060:	3001      	adds	r0, #1
 8014062:	f43f af49 	beq.w	8013ef8 <_printf_float+0x98>
 8014066:	f04f 0800 	mov.w	r8, #0
 801406a:	f104 091a 	add.w	r9, r4, #26
 801406e:	9b08      	ldr	r3, [sp, #32]
 8014070:	3b01      	subs	r3, #1
 8014072:	4543      	cmp	r3, r8
 8014074:	dc09      	bgt.n	801408a <_printf_float+0x22a>
 8014076:	6823      	ldr	r3, [r4, #0]
 8014078:	079b      	lsls	r3, r3, #30
 801407a:	f100 8106 	bmi.w	801428a <_printf_float+0x42a>
 801407e:	68e0      	ldr	r0, [r4, #12]
 8014080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014082:	4298      	cmp	r0, r3
 8014084:	bfb8      	it	lt
 8014086:	4618      	movlt	r0, r3
 8014088:	e738      	b.n	8013efc <_printf_float+0x9c>
 801408a:	2301      	movs	r3, #1
 801408c:	464a      	mov	r2, r9
 801408e:	4631      	mov	r1, r6
 8014090:	4628      	mov	r0, r5
 8014092:	47b8      	blx	r7
 8014094:	3001      	adds	r0, #1
 8014096:	f43f af2f 	beq.w	8013ef8 <_printf_float+0x98>
 801409a:	f108 0801 	add.w	r8, r8, #1
 801409e:	e7e6      	b.n	801406e <_printf_float+0x20e>
 80140a0:	9b07      	ldr	r3, [sp, #28]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	dc3a      	bgt.n	801411c <_printf_float+0x2bc>
 80140a6:	4a1c      	ldr	r2, [pc, #112]	; (8014118 <_printf_float+0x2b8>)
 80140a8:	2301      	movs	r3, #1
 80140aa:	4631      	mov	r1, r6
 80140ac:	4628      	mov	r0, r5
 80140ae:	47b8      	blx	r7
 80140b0:	3001      	adds	r0, #1
 80140b2:	f43f af21 	beq.w	8013ef8 <_printf_float+0x98>
 80140b6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80140ba:	4313      	orrs	r3, r2
 80140bc:	d102      	bne.n	80140c4 <_printf_float+0x264>
 80140be:	6823      	ldr	r3, [r4, #0]
 80140c0:	07d9      	lsls	r1, r3, #31
 80140c2:	d5d8      	bpl.n	8014076 <_printf_float+0x216>
 80140c4:	4653      	mov	r3, sl
 80140c6:	465a      	mov	r2, fp
 80140c8:	4631      	mov	r1, r6
 80140ca:	4628      	mov	r0, r5
 80140cc:	47b8      	blx	r7
 80140ce:	3001      	adds	r0, #1
 80140d0:	f43f af12 	beq.w	8013ef8 <_printf_float+0x98>
 80140d4:	f04f 0900 	mov.w	r9, #0
 80140d8:	f104 0a1a 	add.w	sl, r4, #26
 80140dc:	9b07      	ldr	r3, [sp, #28]
 80140de:	425b      	negs	r3, r3
 80140e0:	454b      	cmp	r3, r9
 80140e2:	dc01      	bgt.n	80140e8 <_printf_float+0x288>
 80140e4:	9b08      	ldr	r3, [sp, #32]
 80140e6:	e795      	b.n	8014014 <_printf_float+0x1b4>
 80140e8:	2301      	movs	r3, #1
 80140ea:	4652      	mov	r2, sl
 80140ec:	4631      	mov	r1, r6
 80140ee:	4628      	mov	r0, r5
 80140f0:	47b8      	blx	r7
 80140f2:	3001      	adds	r0, #1
 80140f4:	f43f af00 	beq.w	8013ef8 <_printf_float+0x98>
 80140f8:	f109 0901 	add.w	r9, r9, #1
 80140fc:	e7ee      	b.n	80140dc <_printf_float+0x27c>
 80140fe:	bf00      	nop
 8014100:	ffffffff 	.word	0xffffffff
 8014104:	7fefffff 	.word	0x7fefffff
 8014108:	08018388 	.word	0x08018388
 801410c:	0801838c 	.word	0x0801838c
 8014110:	08018390 	.word	0x08018390
 8014114:	08018394 	.word	0x08018394
 8014118:	08018398 	.word	0x08018398
 801411c:	9a08      	ldr	r2, [sp, #32]
 801411e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014120:	429a      	cmp	r2, r3
 8014122:	bfa8      	it	ge
 8014124:	461a      	movge	r2, r3
 8014126:	2a00      	cmp	r2, #0
 8014128:	4691      	mov	r9, r2
 801412a:	dc38      	bgt.n	801419e <_printf_float+0x33e>
 801412c:	2300      	movs	r3, #0
 801412e:	9305      	str	r3, [sp, #20]
 8014130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014134:	f104 021a 	add.w	r2, r4, #26
 8014138:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801413a:	9905      	ldr	r1, [sp, #20]
 801413c:	9304      	str	r3, [sp, #16]
 801413e:	eba3 0309 	sub.w	r3, r3, r9
 8014142:	428b      	cmp	r3, r1
 8014144:	dc33      	bgt.n	80141ae <_printf_float+0x34e>
 8014146:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801414a:	429a      	cmp	r2, r3
 801414c:	db3c      	blt.n	80141c8 <_printf_float+0x368>
 801414e:	6823      	ldr	r3, [r4, #0]
 8014150:	07da      	lsls	r2, r3, #31
 8014152:	d439      	bmi.n	80141c8 <_printf_float+0x368>
 8014154:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8014158:	eba2 0903 	sub.w	r9, r2, r3
 801415c:	9b04      	ldr	r3, [sp, #16]
 801415e:	1ad2      	subs	r2, r2, r3
 8014160:	4591      	cmp	r9, r2
 8014162:	bfa8      	it	ge
 8014164:	4691      	movge	r9, r2
 8014166:	f1b9 0f00 	cmp.w	r9, #0
 801416a:	dc35      	bgt.n	80141d8 <_printf_float+0x378>
 801416c:	f04f 0800 	mov.w	r8, #0
 8014170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014174:	f104 0a1a 	add.w	sl, r4, #26
 8014178:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801417c:	1a9b      	subs	r3, r3, r2
 801417e:	eba3 0309 	sub.w	r3, r3, r9
 8014182:	4543      	cmp	r3, r8
 8014184:	f77f af77 	ble.w	8014076 <_printf_float+0x216>
 8014188:	2301      	movs	r3, #1
 801418a:	4652      	mov	r2, sl
 801418c:	4631      	mov	r1, r6
 801418e:	4628      	mov	r0, r5
 8014190:	47b8      	blx	r7
 8014192:	3001      	adds	r0, #1
 8014194:	f43f aeb0 	beq.w	8013ef8 <_printf_float+0x98>
 8014198:	f108 0801 	add.w	r8, r8, #1
 801419c:	e7ec      	b.n	8014178 <_printf_float+0x318>
 801419e:	4613      	mov	r3, r2
 80141a0:	4631      	mov	r1, r6
 80141a2:	4642      	mov	r2, r8
 80141a4:	4628      	mov	r0, r5
 80141a6:	47b8      	blx	r7
 80141a8:	3001      	adds	r0, #1
 80141aa:	d1bf      	bne.n	801412c <_printf_float+0x2cc>
 80141ac:	e6a4      	b.n	8013ef8 <_printf_float+0x98>
 80141ae:	2301      	movs	r3, #1
 80141b0:	4631      	mov	r1, r6
 80141b2:	4628      	mov	r0, r5
 80141b4:	9204      	str	r2, [sp, #16]
 80141b6:	47b8      	blx	r7
 80141b8:	3001      	adds	r0, #1
 80141ba:	f43f ae9d 	beq.w	8013ef8 <_printf_float+0x98>
 80141be:	9b05      	ldr	r3, [sp, #20]
 80141c0:	9a04      	ldr	r2, [sp, #16]
 80141c2:	3301      	adds	r3, #1
 80141c4:	9305      	str	r3, [sp, #20]
 80141c6:	e7b7      	b.n	8014138 <_printf_float+0x2d8>
 80141c8:	4653      	mov	r3, sl
 80141ca:	465a      	mov	r2, fp
 80141cc:	4631      	mov	r1, r6
 80141ce:	4628      	mov	r0, r5
 80141d0:	47b8      	blx	r7
 80141d2:	3001      	adds	r0, #1
 80141d4:	d1be      	bne.n	8014154 <_printf_float+0x2f4>
 80141d6:	e68f      	b.n	8013ef8 <_printf_float+0x98>
 80141d8:	9a04      	ldr	r2, [sp, #16]
 80141da:	464b      	mov	r3, r9
 80141dc:	4442      	add	r2, r8
 80141de:	4631      	mov	r1, r6
 80141e0:	4628      	mov	r0, r5
 80141e2:	47b8      	blx	r7
 80141e4:	3001      	adds	r0, #1
 80141e6:	d1c1      	bne.n	801416c <_printf_float+0x30c>
 80141e8:	e686      	b.n	8013ef8 <_printf_float+0x98>
 80141ea:	9a08      	ldr	r2, [sp, #32]
 80141ec:	2a01      	cmp	r2, #1
 80141ee:	dc01      	bgt.n	80141f4 <_printf_float+0x394>
 80141f0:	07db      	lsls	r3, r3, #31
 80141f2:	d537      	bpl.n	8014264 <_printf_float+0x404>
 80141f4:	2301      	movs	r3, #1
 80141f6:	4642      	mov	r2, r8
 80141f8:	4631      	mov	r1, r6
 80141fa:	4628      	mov	r0, r5
 80141fc:	47b8      	blx	r7
 80141fe:	3001      	adds	r0, #1
 8014200:	f43f ae7a 	beq.w	8013ef8 <_printf_float+0x98>
 8014204:	4653      	mov	r3, sl
 8014206:	465a      	mov	r2, fp
 8014208:	4631      	mov	r1, r6
 801420a:	4628      	mov	r0, r5
 801420c:	47b8      	blx	r7
 801420e:	3001      	adds	r0, #1
 8014210:	f43f ae72 	beq.w	8013ef8 <_printf_float+0x98>
 8014214:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8014218:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801421c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014220:	9b08      	ldr	r3, [sp, #32]
 8014222:	d01a      	beq.n	801425a <_printf_float+0x3fa>
 8014224:	3b01      	subs	r3, #1
 8014226:	f108 0201 	add.w	r2, r8, #1
 801422a:	4631      	mov	r1, r6
 801422c:	4628      	mov	r0, r5
 801422e:	47b8      	blx	r7
 8014230:	3001      	adds	r0, #1
 8014232:	d10e      	bne.n	8014252 <_printf_float+0x3f2>
 8014234:	e660      	b.n	8013ef8 <_printf_float+0x98>
 8014236:	2301      	movs	r3, #1
 8014238:	464a      	mov	r2, r9
 801423a:	4631      	mov	r1, r6
 801423c:	4628      	mov	r0, r5
 801423e:	47b8      	blx	r7
 8014240:	3001      	adds	r0, #1
 8014242:	f43f ae59 	beq.w	8013ef8 <_printf_float+0x98>
 8014246:	f108 0801 	add.w	r8, r8, #1
 801424a:	9b08      	ldr	r3, [sp, #32]
 801424c:	3b01      	subs	r3, #1
 801424e:	4543      	cmp	r3, r8
 8014250:	dcf1      	bgt.n	8014236 <_printf_float+0x3d6>
 8014252:	9b04      	ldr	r3, [sp, #16]
 8014254:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014258:	e6dd      	b.n	8014016 <_printf_float+0x1b6>
 801425a:	f04f 0800 	mov.w	r8, #0
 801425e:	f104 091a 	add.w	r9, r4, #26
 8014262:	e7f2      	b.n	801424a <_printf_float+0x3ea>
 8014264:	2301      	movs	r3, #1
 8014266:	4642      	mov	r2, r8
 8014268:	e7df      	b.n	801422a <_printf_float+0x3ca>
 801426a:	2301      	movs	r3, #1
 801426c:	464a      	mov	r2, r9
 801426e:	4631      	mov	r1, r6
 8014270:	4628      	mov	r0, r5
 8014272:	47b8      	blx	r7
 8014274:	3001      	adds	r0, #1
 8014276:	f43f ae3f 	beq.w	8013ef8 <_printf_float+0x98>
 801427a:	f108 0801 	add.w	r8, r8, #1
 801427e:	68e3      	ldr	r3, [r4, #12]
 8014280:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014282:	1a5b      	subs	r3, r3, r1
 8014284:	4543      	cmp	r3, r8
 8014286:	dcf0      	bgt.n	801426a <_printf_float+0x40a>
 8014288:	e6f9      	b.n	801407e <_printf_float+0x21e>
 801428a:	f04f 0800 	mov.w	r8, #0
 801428e:	f104 0919 	add.w	r9, r4, #25
 8014292:	e7f4      	b.n	801427e <_printf_float+0x41e>

08014294 <_printf_common>:
 8014294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014298:	4616      	mov	r6, r2
 801429a:	4699      	mov	r9, r3
 801429c:	688a      	ldr	r2, [r1, #8]
 801429e:	690b      	ldr	r3, [r1, #16]
 80142a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80142a4:	4293      	cmp	r3, r2
 80142a6:	bfb8      	it	lt
 80142a8:	4613      	movlt	r3, r2
 80142aa:	6033      	str	r3, [r6, #0]
 80142ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80142b0:	4607      	mov	r7, r0
 80142b2:	460c      	mov	r4, r1
 80142b4:	b10a      	cbz	r2, 80142ba <_printf_common+0x26>
 80142b6:	3301      	adds	r3, #1
 80142b8:	6033      	str	r3, [r6, #0]
 80142ba:	6823      	ldr	r3, [r4, #0]
 80142bc:	0699      	lsls	r1, r3, #26
 80142be:	bf42      	ittt	mi
 80142c0:	6833      	ldrmi	r3, [r6, #0]
 80142c2:	3302      	addmi	r3, #2
 80142c4:	6033      	strmi	r3, [r6, #0]
 80142c6:	6825      	ldr	r5, [r4, #0]
 80142c8:	f015 0506 	ands.w	r5, r5, #6
 80142cc:	d106      	bne.n	80142dc <_printf_common+0x48>
 80142ce:	f104 0a19 	add.w	sl, r4, #25
 80142d2:	68e3      	ldr	r3, [r4, #12]
 80142d4:	6832      	ldr	r2, [r6, #0]
 80142d6:	1a9b      	subs	r3, r3, r2
 80142d8:	42ab      	cmp	r3, r5
 80142da:	dc26      	bgt.n	801432a <_printf_common+0x96>
 80142dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80142e0:	1e13      	subs	r3, r2, #0
 80142e2:	6822      	ldr	r2, [r4, #0]
 80142e4:	bf18      	it	ne
 80142e6:	2301      	movne	r3, #1
 80142e8:	0692      	lsls	r2, r2, #26
 80142ea:	d42b      	bmi.n	8014344 <_printf_common+0xb0>
 80142ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80142f0:	4649      	mov	r1, r9
 80142f2:	4638      	mov	r0, r7
 80142f4:	47c0      	blx	r8
 80142f6:	3001      	adds	r0, #1
 80142f8:	d01e      	beq.n	8014338 <_printf_common+0xa4>
 80142fa:	6823      	ldr	r3, [r4, #0]
 80142fc:	6922      	ldr	r2, [r4, #16]
 80142fe:	f003 0306 	and.w	r3, r3, #6
 8014302:	2b04      	cmp	r3, #4
 8014304:	bf02      	ittt	eq
 8014306:	68e5      	ldreq	r5, [r4, #12]
 8014308:	6833      	ldreq	r3, [r6, #0]
 801430a:	1aed      	subeq	r5, r5, r3
 801430c:	68a3      	ldr	r3, [r4, #8]
 801430e:	bf0c      	ite	eq
 8014310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014314:	2500      	movne	r5, #0
 8014316:	4293      	cmp	r3, r2
 8014318:	bfc4      	itt	gt
 801431a:	1a9b      	subgt	r3, r3, r2
 801431c:	18ed      	addgt	r5, r5, r3
 801431e:	2600      	movs	r6, #0
 8014320:	341a      	adds	r4, #26
 8014322:	42b5      	cmp	r5, r6
 8014324:	d11a      	bne.n	801435c <_printf_common+0xc8>
 8014326:	2000      	movs	r0, #0
 8014328:	e008      	b.n	801433c <_printf_common+0xa8>
 801432a:	2301      	movs	r3, #1
 801432c:	4652      	mov	r2, sl
 801432e:	4649      	mov	r1, r9
 8014330:	4638      	mov	r0, r7
 8014332:	47c0      	blx	r8
 8014334:	3001      	adds	r0, #1
 8014336:	d103      	bne.n	8014340 <_printf_common+0xac>
 8014338:	f04f 30ff 	mov.w	r0, #4294967295
 801433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014340:	3501      	adds	r5, #1
 8014342:	e7c6      	b.n	80142d2 <_printf_common+0x3e>
 8014344:	18e1      	adds	r1, r4, r3
 8014346:	1c5a      	adds	r2, r3, #1
 8014348:	2030      	movs	r0, #48	; 0x30
 801434a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801434e:	4422      	add	r2, r4
 8014350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014358:	3302      	adds	r3, #2
 801435a:	e7c7      	b.n	80142ec <_printf_common+0x58>
 801435c:	2301      	movs	r3, #1
 801435e:	4622      	mov	r2, r4
 8014360:	4649      	mov	r1, r9
 8014362:	4638      	mov	r0, r7
 8014364:	47c0      	blx	r8
 8014366:	3001      	adds	r0, #1
 8014368:	d0e6      	beq.n	8014338 <_printf_common+0xa4>
 801436a:	3601      	adds	r6, #1
 801436c:	e7d9      	b.n	8014322 <_printf_common+0x8e>
	...

08014370 <_printf_i>:
 8014370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014374:	7e0f      	ldrb	r7, [r1, #24]
 8014376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014378:	2f78      	cmp	r7, #120	; 0x78
 801437a:	4691      	mov	r9, r2
 801437c:	4680      	mov	r8, r0
 801437e:	460c      	mov	r4, r1
 8014380:	469a      	mov	sl, r3
 8014382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014386:	d807      	bhi.n	8014398 <_printf_i+0x28>
 8014388:	2f62      	cmp	r7, #98	; 0x62
 801438a:	d80a      	bhi.n	80143a2 <_printf_i+0x32>
 801438c:	2f00      	cmp	r7, #0
 801438e:	f000 80d4 	beq.w	801453a <_printf_i+0x1ca>
 8014392:	2f58      	cmp	r7, #88	; 0x58
 8014394:	f000 80c0 	beq.w	8014518 <_printf_i+0x1a8>
 8014398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801439c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80143a0:	e03a      	b.n	8014418 <_printf_i+0xa8>
 80143a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80143a6:	2b15      	cmp	r3, #21
 80143a8:	d8f6      	bhi.n	8014398 <_printf_i+0x28>
 80143aa:	a101      	add	r1, pc, #4	; (adr r1, 80143b0 <_printf_i+0x40>)
 80143ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80143b0:	08014409 	.word	0x08014409
 80143b4:	0801441d 	.word	0x0801441d
 80143b8:	08014399 	.word	0x08014399
 80143bc:	08014399 	.word	0x08014399
 80143c0:	08014399 	.word	0x08014399
 80143c4:	08014399 	.word	0x08014399
 80143c8:	0801441d 	.word	0x0801441d
 80143cc:	08014399 	.word	0x08014399
 80143d0:	08014399 	.word	0x08014399
 80143d4:	08014399 	.word	0x08014399
 80143d8:	08014399 	.word	0x08014399
 80143dc:	08014521 	.word	0x08014521
 80143e0:	08014449 	.word	0x08014449
 80143e4:	080144db 	.word	0x080144db
 80143e8:	08014399 	.word	0x08014399
 80143ec:	08014399 	.word	0x08014399
 80143f0:	08014543 	.word	0x08014543
 80143f4:	08014399 	.word	0x08014399
 80143f8:	08014449 	.word	0x08014449
 80143fc:	08014399 	.word	0x08014399
 8014400:	08014399 	.word	0x08014399
 8014404:	080144e3 	.word	0x080144e3
 8014408:	682b      	ldr	r3, [r5, #0]
 801440a:	1d1a      	adds	r2, r3, #4
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	602a      	str	r2, [r5, #0]
 8014410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014418:	2301      	movs	r3, #1
 801441a:	e09f      	b.n	801455c <_printf_i+0x1ec>
 801441c:	6820      	ldr	r0, [r4, #0]
 801441e:	682b      	ldr	r3, [r5, #0]
 8014420:	0607      	lsls	r7, r0, #24
 8014422:	f103 0104 	add.w	r1, r3, #4
 8014426:	6029      	str	r1, [r5, #0]
 8014428:	d501      	bpl.n	801442e <_printf_i+0xbe>
 801442a:	681e      	ldr	r6, [r3, #0]
 801442c:	e003      	b.n	8014436 <_printf_i+0xc6>
 801442e:	0646      	lsls	r6, r0, #25
 8014430:	d5fb      	bpl.n	801442a <_printf_i+0xba>
 8014432:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014436:	2e00      	cmp	r6, #0
 8014438:	da03      	bge.n	8014442 <_printf_i+0xd2>
 801443a:	232d      	movs	r3, #45	; 0x2d
 801443c:	4276      	negs	r6, r6
 801443e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014442:	485a      	ldr	r0, [pc, #360]	; (80145ac <_printf_i+0x23c>)
 8014444:	230a      	movs	r3, #10
 8014446:	e012      	b.n	801446e <_printf_i+0xfe>
 8014448:	682b      	ldr	r3, [r5, #0]
 801444a:	6820      	ldr	r0, [r4, #0]
 801444c:	1d19      	adds	r1, r3, #4
 801444e:	6029      	str	r1, [r5, #0]
 8014450:	0605      	lsls	r5, r0, #24
 8014452:	d501      	bpl.n	8014458 <_printf_i+0xe8>
 8014454:	681e      	ldr	r6, [r3, #0]
 8014456:	e002      	b.n	801445e <_printf_i+0xee>
 8014458:	0641      	lsls	r1, r0, #25
 801445a:	d5fb      	bpl.n	8014454 <_printf_i+0xe4>
 801445c:	881e      	ldrh	r6, [r3, #0]
 801445e:	4853      	ldr	r0, [pc, #332]	; (80145ac <_printf_i+0x23c>)
 8014460:	2f6f      	cmp	r7, #111	; 0x6f
 8014462:	bf0c      	ite	eq
 8014464:	2308      	moveq	r3, #8
 8014466:	230a      	movne	r3, #10
 8014468:	2100      	movs	r1, #0
 801446a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801446e:	6865      	ldr	r5, [r4, #4]
 8014470:	60a5      	str	r5, [r4, #8]
 8014472:	2d00      	cmp	r5, #0
 8014474:	bfa2      	ittt	ge
 8014476:	6821      	ldrge	r1, [r4, #0]
 8014478:	f021 0104 	bicge.w	r1, r1, #4
 801447c:	6021      	strge	r1, [r4, #0]
 801447e:	b90e      	cbnz	r6, 8014484 <_printf_i+0x114>
 8014480:	2d00      	cmp	r5, #0
 8014482:	d04b      	beq.n	801451c <_printf_i+0x1ac>
 8014484:	4615      	mov	r5, r2
 8014486:	fbb6 f1f3 	udiv	r1, r6, r3
 801448a:	fb03 6711 	mls	r7, r3, r1, r6
 801448e:	5dc7      	ldrb	r7, [r0, r7]
 8014490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014494:	4637      	mov	r7, r6
 8014496:	42bb      	cmp	r3, r7
 8014498:	460e      	mov	r6, r1
 801449a:	d9f4      	bls.n	8014486 <_printf_i+0x116>
 801449c:	2b08      	cmp	r3, #8
 801449e:	d10b      	bne.n	80144b8 <_printf_i+0x148>
 80144a0:	6823      	ldr	r3, [r4, #0]
 80144a2:	07de      	lsls	r6, r3, #31
 80144a4:	d508      	bpl.n	80144b8 <_printf_i+0x148>
 80144a6:	6923      	ldr	r3, [r4, #16]
 80144a8:	6861      	ldr	r1, [r4, #4]
 80144aa:	4299      	cmp	r1, r3
 80144ac:	bfde      	ittt	le
 80144ae:	2330      	movle	r3, #48	; 0x30
 80144b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80144b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80144b8:	1b52      	subs	r2, r2, r5
 80144ba:	6122      	str	r2, [r4, #16]
 80144bc:	f8cd a000 	str.w	sl, [sp]
 80144c0:	464b      	mov	r3, r9
 80144c2:	aa03      	add	r2, sp, #12
 80144c4:	4621      	mov	r1, r4
 80144c6:	4640      	mov	r0, r8
 80144c8:	f7ff fee4 	bl	8014294 <_printf_common>
 80144cc:	3001      	adds	r0, #1
 80144ce:	d14a      	bne.n	8014566 <_printf_i+0x1f6>
 80144d0:	f04f 30ff 	mov.w	r0, #4294967295
 80144d4:	b004      	add	sp, #16
 80144d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144da:	6823      	ldr	r3, [r4, #0]
 80144dc:	f043 0320 	orr.w	r3, r3, #32
 80144e0:	6023      	str	r3, [r4, #0]
 80144e2:	4833      	ldr	r0, [pc, #204]	; (80145b0 <_printf_i+0x240>)
 80144e4:	2778      	movs	r7, #120	; 0x78
 80144e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80144ea:	6823      	ldr	r3, [r4, #0]
 80144ec:	6829      	ldr	r1, [r5, #0]
 80144ee:	061f      	lsls	r7, r3, #24
 80144f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80144f4:	d402      	bmi.n	80144fc <_printf_i+0x18c>
 80144f6:	065f      	lsls	r7, r3, #25
 80144f8:	bf48      	it	mi
 80144fa:	b2b6      	uxthmi	r6, r6
 80144fc:	07df      	lsls	r7, r3, #31
 80144fe:	bf48      	it	mi
 8014500:	f043 0320 	orrmi.w	r3, r3, #32
 8014504:	6029      	str	r1, [r5, #0]
 8014506:	bf48      	it	mi
 8014508:	6023      	strmi	r3, [r4, #0]
 801450a:	b91e      	cbnz	r6, 8014514 <_printf_i+0x1a4>
 801450c:	6823      	ldr	r3, [r4, #0]
 801450e:	f023 0320 	bic.w	r3, r3, #32
 8014512:	6023      	str	r3, [r4, #0]
 8014514:	2310      	movs	r3, #16
 8014516:	e7a7      	b.n	8014468 <_printf_i+0xf8>
 8014518:	4824      	ldr	r0, [pc, #144]	; (80145ac <_printf_i+0x23c>)
 801451a:	e7e4      	b.n	80144e6 <_printf_i+0x176>
 801451c:	4615      	mov	r5, r2
 801451e:	e7bd      	b.n	801449c <_printf_i+0x12c>
 8014520:	682b      	ldr	r3, [r5, #0]
 8014522:	6826      	ldr	r6, [r4, #0]
 8014524:	6961      	ldr	r1, [r4, #20]
 8014526:	1d18      	adds	r0, r3, #4
 8014528:	6028      	str	r0, [r5, #0]
 801452a:	0635      	lsls	r5, r6, #24
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	d501      	bpl.n	8014534 <_printf_i+0x1c4>
 8014530:	6019      	str	r1, [r3, #0]
 8014532:	e002      	b.n	801453a <_printf_i+0x1ca>
 8014534:	0670      	lsls	r0, r6, #25
 8014536:	d5fb      	bpl.n	8014530 <_printf_i+0x1c0>
 8014538:	8019      	strh	r1, [r3, #0]
 801453a:	2300      	movs	r3, #0
 801453c:	6123      	str	r3, [r4, #16]
 801453e:	4615      	mov	r5, r2
 8014540:	e7bc      	b.n	80144bc <_printf_i+0x14c>
 8014542:	682b      	ldr	r3, [r5, #0]
 8014544:	1d1a      	adds	r2, r3, #4
 8014546:	602a      	str	r2, [r5, #0]
 8014548:	681d      	ldr	r5, [r3, #0]
 801454a:	6862      	ldr	r2, [r4, #4]
 801454c:	2100      	movs	r1, #0
 801454e:	4628      	mov	r0, r5
 8014550:	f7eb fede 	bl	8000310 <memchr>
 8014554:	b108      	cbz	r0, 801455a <_printf_i+0x1ea>
 8014556:	1b40      	subs	r0, r0, r5
 8014558:	6060      	str	r0, [r4, #4]
 801455a:	6863      	ldr	r3, [r4, #4]
 801455c:	6123      	str	r3, [r4, #16]
 801455e:	2300      	movs	r3, #0
 8014560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014564:	e7aa      	b.n	80144bc <_printf_i+0x14c>
 8014566:	6923      	ldr	r3, [r4, #16]
 8014568:	462a      	mov	r2, r5
 801456a:	4649      	mov	r1, r9
 801456c:	4640      	mov	r0, r8
 801456e:	47d0      	blx	sl
 8014570:	3001      	adds	r0, #1
 8014572:	d0ad      	beq.n	80144d0 <_printf_i+0x160>
 8014574:	6823      	ldr	r3, [r4, #0]
 8014576:	079b      	lsls	r3, r3, #30
 8014578:	d413      	bmi.n	80145a2 <_printf_i+0x232>
 801457a:	68e0      	ldr	r0, [r4, #12]
 801457c:	9b03      	ldr	r3, [sp, #12]
 801457e:	4298      	cmp	r0, r3
 8014580:	bfb8      	it	lt
 8014582:	4618      	movlt	r0, r3
 8014584:	e7a6      	b.n	80144d4 <_printf_i+0x164>
 8014586:	2301      	movs	r3, #1
 8014588:	4632      	mov	r2, r6
 801458a:	4649      	mov	r1, r9
 801458c:	4640      	mov	r0, r8
 801458e:	47d0      	blx	sl
 8014590:	3001      	adds	r0, #1
 8014592:	d09d      	beq.n	80144d0 <_printf_i+0x160>
 8014594:	3501      	adds	r5, #1
 8014596:	68e3      	ldr	r3, [r4, #12]
 8014598:	9903      	ldr	r1, [sp, #12]
 801459a:	1a5b      	subs	r3, r3, r1
 801459c:	42ab      	cmp	r3, r5
 801459e:	dcf2      	bgt.n	8014586 <_printf_i+0x216>
 80145a0:	e7eb      	b.n	801457a <_printf_i+0x20a>
 80145a2:	2500      	movs	r5, #0
 80145a4:	f104 0619 	add.w	r6, r4, #25
 80145a8:	e7f5      	b.n	8014596 <_printf_i+0x226>
 80145aa:	bf00      	nop
 80145ac:	0801839a 	.word	0x0801839a
 80145b0:	080183ab 	.word	0x080183ab

080145b4 <_scanf_float>:
 80145b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145b8:	b087      	sub	sp, #28
 80145ba:	4617      	mov	r7, r2
 80145bc:	9303      	str	r3, [sp, #12]
 80145be:	688b      	ldr	r3, [r1, #8]
 80145c0:	1e5a      	subs	r2, r3, #1
 80145c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80145c6:	bf83      	ittte	hi
 80145c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80145cc:	195b      	addhi	r3, r3, r5
 80145ce:	9302      	strhi	r3, [sp, #8]
 80145d0:	2300      	movls	r3, #0
 80145d2:	bf86      	itte	hi
 80145d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80145d8:	608b      	strhi	r3, [r1, #8]
 80145da:	9302      	strls	r3, [sp, #8]
 80145dc:	680b      	ldr	r3, [r1, #0]
 80145de:	468b      	mov	fp, r1
 80145e0:	2500      	movs	r5, #0
 80145e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80145e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80145ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80145ee:	4680      	mov	r8, r0
 80145f0:	460c      	mov	r4, r1
 80145f2:	465e      	mov	r6, fp
 80145f4:	46aa      	mov	sl, r5
 80145f6:	46a9      	mov	r9, r5
 80145f8:	9501      	str	r5, [sp, #4]
 80145fa:	68a2      	ldr	r2, [r4, #8]
 80145fc:	b152      	cbz	r2, 8014614 <_scanf_float+0x60>
 80145fe:	683b      	ldr	r3, [r7, #0]
 8014600:	781b      	ldrb	r3, [r3, #0]
 8014602:	2b4e      	cmp	r3, #78	; 0x4e
 8014604:	d864      	bhi.n	80146d0 <_scanf_float+0x11c>
 8014606:	2b40      	cmp	r3, #64	; 0x40
 8014608:	d83c      	bhi.n	8014684 <_scanf_float+0xd0>
 801460a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801460e:	b2c8      	uxtb	r0, r1
 8014610:	280e      	cmp	r0, #14
 8014612:	d93a      	bls.n	801468a <_scanf_float+0xd6>
 8014614:	f1b9 0f00 	cmp.w	r9, #0
 8014618:	d003      	beq.n	8014622 <_scanf_float+0x6e>
 801461a:	6823      	ldr	r3, [r4, #0]
 801461c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014620:	6023      	str	r3, [r4, #0]
 8014622:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014626:	f1ba 0f01 	cmp.w	sl, #1
 801462a:	f200 8113 	bhi.w	8014854 <_scanf_float+0x2a0>
 801462e:	455e      	cmp	r6, fp
 8014630:	f200 8105 	bhi.w	801483e <_scanf_float+0x28a>
 8014634:	2501      	movs	r5, #1
 8014636:	4628      	mov	r0, r5
 8014638:	b007      	add	sp, #28
 801463a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801463e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014642:	2a0d      	cmp	r2, #13
 8014644:	d8e6      	bhi.n	8014614 <_scanf_float+0x60>
 8014646:	a101      	add	r1, pc, #4	; (adr r1, 801464c <_scanf_float+0x98>)
 8014648:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801464c:	0801478b 	.word	0x0801478b
 8014650:	08014615 	.word	0x08014615
 8014654:	08014615 	.word	0x08014615
 8014658:	08014615 	.word	0x08014615
 801465c:	080147eb 	.word	0x080147eb
 8014660:	080147c3 	.word	0x080147c3
 8014664:	08014615 	.word	0x08014615
 8014668:	08014615 	.word	0x08014615
 801466c:	08014799 	.word	0x08014799
 8014670:	08014615 	.word	0x08014615
 8014674:	08014615 	.word	0x08014615
 8014678:	08014615 	.word	0x08014615
 801467c:	08014615 	.word	0x08014615
 8014680:	08014751 	.word	0x08014751
 8014684:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014688:	e7db      	b.n	8014642 <_scanf_float+0x8e>
 801468a:	290e      	cmp	r1, #14
 801468c:	d8c2      	bhi.n	8014614 <_scanf_float+0x60>
 801468e:	a001      	add	r0, pc, #4	; (adr r0, 8014694 <_scanf_float+0xe0>)
 8014690:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014694:	08014743 	.word	0x08014743
 8014698:	08014615 	.word	0x08014615
 801469c:	08014743 	.word	0x08014743
 80146a0:	080147d7 	.word	0x080147d7
 80146a4:	08014615 	.word	0x08014615
 80146a8:	080146f1 	.word	0x080146f1
 80146ac:	0801472d 	.word	0x0801472d
 80146b0:	0801472d 	.word	0x0801472d
 80146b4:	0801472d 	.word	0x0801472d
 80146b8:	0801472d 	.word	0x0801472d
 80146bc:	0801472d 	.word	0x0801472d
 80146c0:	0801472d 	.word	0x0801472d
 80146c4:	0801472d 	.word	0x0801472d
 80146c8:	0801472d 	.word	0x0801472d
 80146cc:	0801472d 	.word	0x0801472d
 80146d0:	2b6e      	cmp	r3, #110	; 0x6e
 80146d2:	d809      	bhi.n	80146e8 <_scanf_float+0x134>
 80146d4:	2b60      	cmp	r3, #96	; 0x60
 80146d6:	d8b2      	bhi.n	801463e <_scanf_float+0x8a>
 80146d8:	2b54      	cmp	r3, #84	; 0x54
 80146da:	d077      	beq.n	80147cc <_scanf_float+0x218>
 80146dc:	2b59      	cmp	r3, #89	; 0x59
 80146de:	d199      	bne.n	8014614 <_scanf_float+0x60>
 80146e0:	2d07      	cmp	r5, #7
 80146e2:	d197      	bne.n	8014614 <_scanf_float+0x60>
 80146e4:	2508      	movs	r5, #8
 80146e6:	e029      	b.n	801473c <_scanf_float+0x188>
 80146e8:	2b74      	cmp	r3, #116	; 0x74
 80146ea:	d06f      	beq.n	80147cc <_scanf_float+0x218>
 80146ec:	2b79      	cmp	r3, #121	; 0x79
 80146ee:	e7f6      	b.n	80146de <_scanf_float+0x12a>
 80146f0:	6821      	ldr	r1, [r4, #0]
 80146f2:	05c8      	lsls	r0, r1, #23
 80146f4:	d51a      	bpl.n	801472c <_scanf_float+0x178>
 80146f6:	9b02      	ldr	r3, [sp, #8]
 80146f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80146fc:	6021      	str	r1, [r4, #0]
 80146fe:	f109 0901 	add.w	r9, r9, #1
 8014702:	b11b      	cbz	r3, 801470c <_scanf_float+0x158>
 8014704:	3b01      	subs	r3, #1
 8014706:	3201      	adds	r2, #1
 8014708:	9302      	str	r3, [sp, #8]
 801470a:	60a2      	str	r2, [r4, #8]
 801470c:	68a3      	ldr	r3, [r4, #8]
 801470e:	3b01      	subs	r3, #1
 8014710:	60a3      	str	r3, [r4, #8]
 8014712:	6923      	ldr	r3, [r4, #16]
 8014714:	3301      	adds	r3, #1
 8014716:	6123      	str	r3, [r4, #16]
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	3b01      	subs	r3, #1
 801471c:	2b00      	cmp	r3, #0
 801471e:	607b      	str	r3, [r7, #4]
 8014720:	f340 8084 	ble.w	801482c <_scanf_float+0x278>
 8014724:	683b      	ldr	r3, [r7, #0]
 8014726:	3301      	adds	r3, #1
 8014728:	603b      	str	r3, [r7, #0]
 801472a:	e766      	b.n	80145fa <_scanf_float+0x46>
 801472c:	eb1a 0f05 	cmn.w	sl, r5
 8014730:	f47f af70 	bne.w	8014614 <_scanf_float+0x60>
 8014734:	6822      	ldr	r2, [r4, #0]
 8014736:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801473a:	6022      	str	r2, [r4, #0]
 801473c:	f806 3b01 	strb.w	r3, [r6], #1
 8014740:	e7e4      	b.n	801470c <_scanf_float+0x158>
 8014742:	6822      	ldr	r2, [r4, #0]
 8014744:	0610      	lsls	r0, r2, #24
 8014746:	f57f af65 	bpl.w	8014614 <_scanf_float+0x60>
 801474a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801474e:	e7f4      	b.n	801473a <_scanf_float+0x186>
 8014750:	f1ba 0f00 	cmp.w	sl, #0
 8014754:	d10e      	bne.n	8014774 <_scanf_float+0x1c0>
 8014756:	f1b9 0f00 	cmp.w	r9, #0
 801475a:	d10e      	bne.n	801477a <_scanf_float+0x1c6>
 801475c:	6822      	ldr	r2, [r4, #0]
 801475e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014762:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014766:	d108      	bne.n	801477a <_scanf_float+0x1c6>
 8014768:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801476c:	6022      	str	r2, [r4, #0]
 801476e:	f04f 0a01 	mov.w	sl, #1
 8014772:	e7e3      	b.n	801473c <_scanf_float+0x188>
 8014774:	f1ba 0f02 	cmp.w	sl, #2
 8014778:	d055      	beq.n	8014826 <_scanf_float+0x272>
 801477a:	2d01      	cmp	r5, #1
 801477c:	d002      	beq.n	8014784 <_scanf_float+0x1d0>
 801477e:	2d04      	cmp	r5, #4
 8014780:	f47f af48 	bne.w	8014614 <_scanf_float+0x60>
 8014784:	3501      	adds	r5, #1
 8014786:	b2ed      	uxtb	r5, r5
 8014788:	e7d8      	b.n	801473c <_scanf_float+0x188>
 801478a:	f1ba 0f01 	cmp.w	sl, #1
 801478e:	f47f af41 	bne.w	8014614 <_scanf_float+0x60>
 8014792:	f04f 0a02 	mov.w	sl, #2
 8014796:	e7d1      	b.n	801473c <_scanf_float+0x188>
 8014798:	b97d      	cbnz	r5, 80147ba <_scanf_float+0x206>
 801479a:	f1b9 0f00 	cmp.w	r9, #0
 801479e:	f47f af3c 	bne.w	801461a <_scanf_float+0x66>
 80147a2:	6822      	ldr	r2, [r4, #0]
 80147a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80147a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80147ac:	f47f af39 	bne.w	8014622 <_scanf_float+0x6e>
 80147b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80147b4:	6022      	str	r2, [r4, #0]
 80147b6:	2501      	movs	r5, #1
 80147b8:	e7c0      	b.n	801473c <_scanf_float+0x188>
 80147ba:	2d03      	cmp	r5, #3
 80147bc:	d0e2      	beq.n	8014784 <_scanf_float+0x1d0>
 80147be:	2d05      	cmp	r5, #5
 80147c0:	e7de      	b.n	8014780 <_scanf_float+0x1cc>
 80147c2:	2d02      	cmp	r5, #2
 80147c4:	f47f af26 	bne.w	8014614 <_scanf_float+0x60>
 80147c8:	2503      	movs	r5, #3
 80147ca:	e7b7      	b.n	801473c <_scanf_float+0x188>
 80147cc:	2d06      	cmp	r5, #6
 80147ce:	f47f af21 	bne.w	8014614 <_scanf_float+0x60>
 80147d2:	2507      	movs	r5, #7
 80147d4:	e7b2      	b.n	801473c <_scanf_float+0x188>
 80147d6:	6822      	ldr	r2, [r4, #0]
 80147d8:	0591      	lsls	r1, r2, #22
 80147da:	f57f af1b 	bpl.w	8014614 <_scanf_float+0x60>
 80147de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80147e2:	6022      	str	r2, [r4, #0]
 80147e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80147e8:	e7a8      	b.n	801473c <_scanf_float+0x188>
 80147ea:	6822      	ldr	r2, [r4, #0]
 80147ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80147f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80147f4:	d006      	beq.n	8014804 <_scanf_float+0x250>
 80147f6:	0550      	lsls	r0, r2, #21
 80147f8:	f57f af0c 	bpl.w	8014614 <_scanf_float+0x60>
 80147fc:	f1b9 0f00 	cmp.w	r9, #0
 8014800:	f43f af0f 	beq.w	8014622 <_scanf_float+0x6e>
 8014804:	0591      	lsls	r1, r2, #22
 8014806:	bf58      	it	pl
 8014808:	9901      	ldrpl	r1, [sp, #4]
 801480a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801480e:	bf58      	it	pl
 8014810:	eba9 0101 	subpl.w	r1, r9, r1
 8014814:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8014818:	bf58      	it	pl
 801481a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801481e:	6022      	str	r2, [r4, #0]
 8014820:	f04f 0900 	mov.w	r9, #0
 8014824:	e78a      	b.n	801473c <_scanf_float+0x188>
 8014826:	f04f 0a03 	mov.w	sl, #3
 801482a:	e787      	b.n	801473c <_scanf_float+0x188>
 801482c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014830:	4639      	mov	r1, r7
 8014832:	4640      	mov	r0, r8
 8014834:	4798      	blx	r3
 8014836:	2800      	cmp	r0, #0
 8014838:	f43f aedf 	beq.w	80145fa <_scanf_float+0x46>
 801483c:	e6ea      	b.n	8014614 <_scanf_float+0x60>
 801483e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014842:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014846:	463a      	mov	r2, r7
 8014848:	4640      	mov	r0, r8
 801484a:	4798      	blx	r3
 801484c:	6923      	ldr	r3, [r4, #16]
 801484e:	3b01      	subs	r3, #1
 8014850:	6123      	str	r3, [r4, #16]
 8014852:	e6ec      	b.n	801462e <_scanf_float+0x7a>
 8014854:	1e6b      	subs	r3, r5, #1
 8014856:	2b06      	cmp	r3, #6
 8014858:	d825      	bhi.n	80148a6 <_scanf_float+0x2f2>
 801485a:	2d02      	cmp	r5, #2
 801485c:	d836      	bhi.n	80148cc <_scanf_float+0x318>
 801485e:	455e      	cmp	r6, fp
 8014860:	f67f aee8 	bls.w	8014634 <_scanf_float+0x80>
 8014864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014868:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801486c:	463a      	mov	r2, r7
 801486e:	4640      	mov	r0, r8
 8014870:	4798      	blx	r3
 8014872:	6923      	ldr	r3, [r4, #16]
 8014874:	3b01      	subs	r3, #1
 8014876:	6123      	str	r3, [r4, #16]
 8014878:	e7f1      	b.n	801485e <_scanf_float+0x2aa>
 801487a:	9802      	ldr	r0, [sp, #8]
 801487c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014880:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014884:	9002      	str	r0, [sp, #8]
 8014886:	463a      	mov	r2, r7
 8014888:	4640      	mov	r0, r8
 801488a:	4798      	blx	r3
 801488c:	6923      	ldr	r3, [r4, #16]
 801488e:	3b01      	subs	r3, #1
 8014890:	6123      	str	r3, [r4, #16]
 8014892:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014896:	fa5f fa8a 	uxtb.w	sl, sl
 801489a:	f1ba 0f02 	cmp.w	sl, #2
 801489e:	d1ec      	bne.n	801487a <_scanf_float+0x2c6>
 80148a0:	3d03      	subs	r5, #3
 80148a2:	b2ed      	uxtb	r5, r5
 80148a4:	1b76      	subs	r6, r6, r5
 80148a6:	6823      	ldr	r3, [r4, #0]
 80148a8:	05da      	lsls	r2, r3, #23
 80148aa:	d52f      	bpl.n	801490c <_scanf_float+0x358>
 80148ac:	055b      	lsls	r3, r3, #21
 80148ae:	d510      	bpl.n	80148d2 <_scanf_float+0x31e>
 80148b0:	455e      	cmp	r6, fp
 80148b2:	f67f aebf 	bls.w	8014634 <_scanf_float+0x80>
 80148b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80148ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80148be:	463a      	mov	r2, r7
 80148c0:	4640      	mov	r0, r8
 80148c2:	4798      	blx	r3
 80148c4:	6923      	ldr	r3, [r4, #16]
 80148c6:	3b01      	subs	r3, #1
 80148c8:	6123      	str	r3, [r4, #16]
 80148ca:	e7f1      	b.n	80148b0 <_scanf_float+0x2fc>
 80148cc:	46aa      	mov	sl, r5
 80148ce:	9602      	str	r6, [sp, #8]
 80148d0:	e7df      	b.n	8014892 <_scanf_float+0x2de>
 80148d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80148d6:	6923      	ldr	r3, [r4, #16]
 80148d8:	2965      	cmp	r1, #101	; 0x65
 80148da:	f103 33ff 	add.w	r3, r3, #4294967295
 80148de:	f106 35ff 	add.w	r5, r6, #4294967295
 80148e2:	6123      	str	r3, [r4, #16]
 80148e4:	d00c      	beq.n	8014900 <_scanf_float+0x34c>
 80148e6:	2945      	cmp	r1, #69	; 0x45
 80148e8:	d00a      	beq.n	8014900 <_scanf_float+0x34c>
 80148ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80148ee:	463a      	mov	r2, r7
 80148f0:	4640      	mov	r0, r8
 80148f2:	4798      	blx	r3
 80148f4:	6923      	ldr	r3, [r4, #16]
 80148f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80148fa:	3b01      	subs	r3, #1
 80148fc:	1eb5      	subs	r5, r6, #2
 80148fe:	6123      	str	r3, [r4, #16]
 8014900:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014904:	463a      	mov	r2, r7
 8014906:	4640      	mov	r0, r8
 8014908:	4798      	blx	r3
 801490a:	462e      	mov	r6, r5
 801490c:	6825      	ldr	r5, [r4, #0]
 801490e:	f015 0510 	ands.w	r5, r5, #16
 8014912:	d14d      	bne.n	80149b0 <_scanf_float+0x3fc>
 8014914:	7035      	strb	r5, [r6, #0]
 8014916:	6823      	ldr	r3, [r4, #0]
 8014918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801491c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014920:	d11a      	bne.n	8014958 <_scanf_float+0x3a4>
 8014922:	9b01      	ldr	r3, [sp, #4]
 8014924:	454b      	cmp	r3, r9
 8014926:	eba3 0209 	sub.w	r2, r3, r9
 801492a:	d122      	bne.n	8014972 <_scanf_float+0x3be>
 801492c:	2200      	movs	r2, #0
 801492e:	4659      	mov	r1, fp
 8014930:	4640      	mov	r0, r8
 8014932:	f002 fab3 	bl	8016e9c <_strtod_r>
 8014936:	9b03      	ldr	r3, [sp, #12]
 8014938:	6821      	ldr	r1, [r4, #0]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	f011 0f02 	tst.w	r1, #2
 8014940:	f103 0204 	add.w	r2, r3, #4
 8014944:	d020      	beq.n	8014988 <_scanf_float+0x3d4>
 8014946:	9903      	ldr	r1, [sp, #12]
 8014948:	600a      	str	r2, [r1, #0]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	ed83 0b00 	vstr	d0, [r3]
 8014950:	68e3      	ldr	r3, [r4, #12]
 8014952:	3301      	adds	r3, #1
 8014954:	60e3      	str	r3, [r4, #12]
 8014956:	e66e      	b.n	8014636 <_scanf_float+0x82>
 8014958:	9b04      	ldr	r3, [sp, #16]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d0e6      	beq.n	801492c <_scanf_float+0x378>
 801495e:	9905      	ldr	r1, [sp, #20]
 8014960:	230a      	movs	r3, #10
 8014962:	462a      	mov	r2, r5
 8014964:	3101      	adds	r1, #1
 8014966:	4640      	mov	r0, r8
 8014968:	f002 fb20 	bl	8016fac <_strtol_r>
 801496c:	9b04      	ldr	r3, [sp, #16]
 801496e:	9e05      	ldr	r6, [sp, #20]
 8014970:	1ac2      	subs	r2, r0, r3
 8014972:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014976:	429e      	cmp	r6, r3
 8014978:	bf28      	it	cs
 801497a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801497e:	490d      	ldr	r1, [pc, #52]	; (80149b4 <_scanf_float+0x400>)
 8014980:	4630      	mov	r0, r6
 8014982:	f000 f8dd 	bl	8014b40 <siprintf>
 8014986:	e7d1      	b.n	801492c <_scanf_float+0x378>
 8014988:	f011 0f04 	tst.w	r1, #4
 801498c:	9903      	ldr	r1, [sp, #12]
 801498e:	600a      	str	r2, [r1, #0]
 8014990:	d1db      	bne.n	801494a <_scanf_float+0x396>
 8014992:	eeb4 0b40 	vcmp.f64	d0, d0
 8014996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801499a:	681e      	ldr	r6, [r3, #0]
 801499c:	d705      	bvc.n	80149aa <_scanf_float+0x3f6>
 801499e:	4806      	ldr	r0, [pc, #24]	; (80149b8 <_scanf_float+0x404>)
 80149a0:	f000 f9be 	bl	8014d20 <nanf>
 80149a4:	ed86 0a00 	vstr	s0, [r6]
 80149a8:	e7d2      	b.n	8014950 <_scanf_float+0x39c>
 80149aa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80149ae:	e7f9      	b.n	80149a4 <_scanf_float+0x3f0>
 80149b0:	2500      	movs	r5, #0
 80149b2:	e640      	b.n	8014636 <_scanf_float+0x82>
 80149b4:	080183bc 	.word	0x080183bc
 80149b8:	0801874d 	.word	0x0801874d

080149bc <std>:
 80149bc:	2300      	movs	r3, #0
 80149be:	b510      	push	{r4, lr}
 80149c0:	4604      	mov	r4, r0
 80149c2:	e9c0 3300 	strd	r3, r3, [r0]
 80149c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80149ca:	6083      	str	r3, [r0, #8]
 80149cc:	8181      	strh	r1, [r0, #12]
 80149ce:	6643      	str	r3, [r0, #100]	; 0x64
 80149d0:	81c2      	strh	r2, [r0, #14]
 80149d2:	6183      	str	r3, [r0, #24]
 80149d4:	4619      	mov	r1, r3
 80149d6:	2208      	movs	r2, #8
 80149d8:	305c      	adds	r0, #92	; 0x5c
 80149da:	f000 f914 	bl	8014c06 <memset>
 80149de:	4b0d      	ldr	r3, [pc, #52]	; (8014a14 <std+0x58>)
 80149e0:	6263      	str	r3, [r4, #36]	; 0x24
 80149e2:	4b0d      	ldr	r3, [pc, #52]	; (8014a18 <std+0x5c>)
 80149e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80149e6:	4b0d      	ldr	r3, [pc, #52]	; (8014a1c <std+0x60>)
 80149e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80149ea:	4b0d      	ldr	r3, [pc, #52]	; (8014a20 <std+0x64>)
 80149ec:	6323      	str	r3, [r4, #48]	; 0x30
 80149ee:	4b0d      	ldr	r3, [pc, #52]	; (8014a24 <std+0x68>)
 80149f0:	6224      	str	r4, [r4, #32]
 80149f2:	429c      	cmp	r4, r3
 80149f4:	d006      	beq.n	8014a04 <std+0x48>
 80149f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80149fa:	4294      	cmp	r4, r2
 80149fc:	d002      	beq.n	8014a04 <std+0x48>
 80149fe:	33d0      	adds	r3, #208	; 0xd0
 8014a00:	429c      	cmp	r4, r3
 8014a02:	d105      	bne.n	8014a10 <std+0x54>
 8014a04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a0c:	f7ee bb67 	b.w	80030de <__retarget_lock_init_recursive>
 8014a10:	bd10      	pop	{r4, pc}
 8014a12:	bf00      	nop
 8014a14:	08014b81 	.word	0x08014b81
 8014a18:	08014ba3 	.word	0x08014ba3
 8014a1c:	08014bdb 	.word	0x08014bdb
 8014a20:	08014bff 	.word	0x08014bff
 8014a24:	240028a8 	.word	0x240028a8

08014a28 <stdio_exit_handler>:
 8014a28:	4a02      	ldr	r2, [pc, #8]	; (8014a34 <stdio_exit_handler+0xc>)
 8014a2a:	4903      	ldr	r1, [pc, #12]	; (8014a38 <stdio_exit_handler+0x10>)
 8014a2c:	4803      	ldr	r0, [pc, #12]	; (8014a3c <stdio_exit_handler+0x14>)
 8014a2e:	f000 b869 	b.w	8014b04 <_fwalk_sglue>
 8014a32:	bf00      	nop
 8014a34:	24000118 	.word	0x24000118
 8014a38:	0801736d 	.word	0x0801736d
 8014a3c:	24000124 	.word	0x24000124

08014a40 <cleanup_stdio>:
 8014a40:	6841      	ldr	r1, [r0, #4]
 8014a42:	4b0c      	ldr	r3, [pc, #48]	; (8014a74 <cleanup_stdio+0x34>)
 8014a44:	4299      	cmp	r1, r3
 8014a46:	b510      	push	{r4, lr}
 8014a48:	4604      	mov	r4, r0
 8014a4a:	d001      	beq.n	8014a50 <cleanup_stdio+0x10>
 8014a4c:	f002 fc8e 	bl	801736c <_fflush_r>
 8014a50:	68a1      	ldr	r1, [r4, #8]
 8014a52:	4b09      	ldr	r3, [pc, #36]	; (8014a78 <cleanup_stdio+0x38>)
 8014a54:	4299      	cmp	r1, r3
 8014a56:	d002      	beq.n	8014a5e <cleanup_stdio+0x1e>
 8014a58:	4620      	mov	r0, r4
 8014a5a:	f002 fc87 	bl	801736c <_fflush_r>
 8014a5e:	68e1      	ldr	r1, [r4, #12]
 8014a60:	4b06      	ldr	r3, [pc, #24]	; (8014a7c <cleanup_stdio+0x3c>)
 8014a62:	4299      	cmp	r1, r3
 8014a64:	d004      	beq.n	8014a70 <cleanup_stdio+0x30>
 8014a66:	4620      	mov	r0, r4
 8014a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014a6c:	f002 bc7e 	b.w	801736c <_fflush_r>
 8014a70:	bd10      	pop	{r4, pc}
 8014a72:	bf00      	nop
 8014a74:	240028a8 	.word	0x240028a8
 8014a78:	24002910 	.word	0x24002910
 8014a7c:	24002978 	.word	0x24002978

08014a80 <global_stdio_init.part.0>:
 8014a80:	b510      	push	{r4, lr}
 8014a82:	4b0b      	ldr	r3, [pc, #44]	; (8014ab0 <global_stdio_init.part.0+0x30>)
 8014a84:	4c0b      	ldr	r4, [pc, #44]	; (8014ab4 <global_stdio_init.part.0+0x34>)
 8014a86:	4a0c      	ldr	r2, [pc, #48]	; (8014ab8 <global_stdio_init.part.0+0x38>)
 8014a88:	601a      	str	r2, [r3, #0]
 8014a8a:	4620      	mov	r0, r4
 8014a8c:	2200      	movs	r2, #0
 8014a8e:	2104      	movs	r1, #4
 8014a90:	f7ff ff94 	bl	80149bc <std>
 8014a94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014a98:	2201      	movs	r2, #1
 8014a9a:	2109      	movs	r1, #9
 8014a9c:	f7ff ff8e 	bl	80149bc <std>
 8014aa0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014aa4:	2202      	movs	r2, #2
 8014aa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aaa:	2112      	movs	r1, #18
 8014aac:	f7ff bf86 	b.w	80149bc <std>
 8014ab0:	240029e0 	.word	0x240029e0
 8014ab4:	240028a8 	.word	0x240028a8
 8014ab8:	08014a29 	.word	0x08014a29

08014abc <__sfp_lock_acquire>:
 8014abc:	4801      	ldr	r0, [pc, #4]	; (8014ac4 <__sfp_lock_acquire+0x8>)
 8014abe:	f7ee bb34 	b.w	800312a <__retarget_lock_acquire_recursive>
 8014ac2:	bf00      	nop
 8014ac4:	24000c74 	.word	0x24000c74

08014ac8 <__sfp_lock_release>:
 8014ac8:	4801      	ldr	r0, [pc, #4]	; (8014ad0 <__sfp_lock_release+0x8>)
 8014aca:	f7ee bb42 	b.w	8003152 <__retarget_lock_release_recursive>
 8014ace:	bf00      	nop
 8014ad0:	24000c74 	.word	0x24000c74

08014ad4 <__sinit>:
 8014ad4:	b510      	push	{r4, lr}
 8014ad6:	4604      	mov	r4, r0
 8014ad8:	f7ff fff0 	bl	8014abc <__sfp_lock_acquire>
 8014adc:	6a23      	ldr	r3, [r4, #32]
 8014ade:	b11b      	cbz	r3, 8014ae8 <__sinit+0x14>
 8014ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ae4:	f7ff bff0 	b.w	8014ac8 <__sfp_lock_release>
 8014ae8:	4b04      	ldr	r3, [pc, #16]	; (8014afc <__sinit+0x28>)
 8014aea:	6223      	str	r3, [r4, #32]
 8014aec:	4b04      	ldr	r3, [pc, #16]	; (8014b00 <__sinit+0x2c>)
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d1f5      	bne.n	8014ae0 <__sinit+0xc>
 8014af4:	f7ff ffc4 	bl	8014a80 <global_stdio_init.part.0>
 8014af8:	e7f2      	b.n	8014ae0 <__sinit+0xc>
 8014afa:	bf00      	nop
 8014afc:	08014a41 	.word	0x08014a41
 8014b00:	240029e0 	.word	0x240029e0

08014b04 <_fwalk_sglue>:
 8014b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b08:	4607      	mov	r7, r0
 8014b0a:	4688      	mov	r8, r1
 8014b0c:	4614      	mov	r4, r2
 8014b0e:	2600      	movs	r6, #0
 8014b10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014b14:	f1b9 0901 	subs.w	r9, r9, #1
 8014b18:	d505      	bpl.n	8014b26 <_fwalk_sglue+0x22>
 8014b1a:	6824      	ldr	r4, [r4, #0]
 8014b1c:	2c00      	cmp	r4, #0
 8014b1e:	d1f7      	bne.n	8014b10 <_fwalk_sglue+0xc>
 8014b20:	4630      	mov	r0, r6
 8014b22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b26:	89ab      	ldrh	r3, [r5, #12]
 8014b28:	2b01      	cmp	r3, #1
 8014b2a:	d907      	bls.n	8014b3c <_fwalk_sglue+0x38>
 8014b2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014b30:	3301      	adds	r3, #1
 8014b32:	d003      	beq.n	8014b3c <_fwalk_sglue+0x38>
 8014b34:	4629      	mov	r1, r5
 8014b36:	4638      	mov	r0, r7
 8014b38:	47c0      	blx	r8
 8014b3a:	4306      	orrs	r6, r0
 8014b3c:	3568      	adds	r5, #104	; 0x68
 8014b3e:	e7e9      	b.n	8014b14 <_fwalk_sglue+0x10>

08014b40 <siprintf>:
 8014b40:	b40e      	push	{r1, r2, r3}
 8014b42:	b500      	push	{lr}
 8014b44:	b09c      	sub	sp, #112	; 0x70
 8014b46:	ab1d      	add	r3, sp, #116	; 0x74
 8014b48:	9002      	str	r0, [sp, #8]
 8014b4a:	9006      	str	r0, [sp, #24]
 8014b4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014b50:	4809      	ldr	r0, [pc, #36]	; (8014b78 <siprintf+0x38>)
 8014b52:	9107      	str	r1, [sp, #28]
 8014b54:	9104      	str	r1, [sp, #16]
 8014b56:	4909      	ldr	r1, [pc, #36]	; (8014b7c <siprintf+0x3c>)
 8014b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8014b5c:	9105      	str	r1, [sp, #20]
 8014b5e:	6800      	ldr	r0, [r0, #0]
 8014b60:	9301      	str	r3, [sp, #4]
 8014b62:	a902      	add	r1, sp, #8
 8014b64:	f002 fa7e 	bl	8017064 <_svfiprintf_r>
 8014b68:	9b02      	ldr	r3, [sp, #8]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	701a      	strb	r2, [r3, #0]
 8014b6e:	b01c      	add	sp, #112	; 0x70
 8014b70:	f85d eb04 	ldr.w	lr, [sp], #4
 8014b74:	b003      	add	sp, #12
 8014b76:	4770      	bx	lr
 8014b78:	24000170 	.word	0x24000170
 8014b7c:	ffff0208 	.word	0xffff0208

08014b80 <__sread>:
 8014b80:	b510      	push	{r4, lr}
 8014b82:	460c      	mov	r4, r1
 8014b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b88:	f000 f86c 	bl	8014c64 <_read_r>
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	bfab      	itete	ge
 8014b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014b92:	89a3      	ldrhlt	r3, [r4, #12]
 8014b94:	181b      	addge	r3, r3, r0
 8014b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014b9a:	bfac      	ite	ge
 8014b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8014b9e:	81a3      	strhlt	r3, [r4, #12]
 8014ba0:	bd10      	pop	{r4, pc}

08014ba2 <__swrite>:
 8014ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ba6:	461f      	mov	r7, r3
 8014ba8:	898b      	ldrh	r3, [r1, #12]
 8014baa:	05db      	lsls	r3, r3, #23
 8014bac:	4605      	mov	r5, r0
 8014bae:	460c      	mov	r4, r1
 8014bb0:	4616      	mov	r6, r2
 8014bb2:	d505      	bpl.n	8014bc0 <__swrite+0x1e>
 8014bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014bb8:	2302      	movs	r3, #2
 8014bba:	2200      	movs	r2, #0
 8014bbc:	f000 f840 	bl	8014c40 <_lseek_r>
 8014bc0:	89a3      	ldrh	r3, [r4, #12]
 8014bc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014bca:	81a3      	strh	r3, [r4, #12]
 8014bcc:	4632      	mov	r2, r6
 8014bce:	463b      	mov	r3, r7
 8014bd0:	4628      	mov	r0, r5
 8014bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014bd6:	f000 b867 	b.w	8014ca8 <_write_r>

08014bda <__sseek>:
 8014bda:	b510      	push	{r4, lr}
 8014bdc:	460c      	mov	r4, r1
 8014bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014be2:	f000 f82d 	bl	8014c40 <_lseek_r>
 8014be6:	1c43      	adds	r3, r0, #1
 8014be8:	89a3      	ldrh	r3, [r4, #12]
 8014bea:	bf15      	itete	ne
 8014bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8014bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014bf6:	81a3      	strheq	r3, [r4, #12]
 8014bf8:	bf18      	it	ne
 8014bfa:	81a3      	strhne	r3, [r4, #12]
 8014bfc:	bd10      	pop	{r4, pc}

08014bfe <__sclose>:
 8014bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c02:	f000 b80d 	b.w	8014c20 <_close_r>

08014c06 <memset>:
 8014c06:	4402      	add	r2, r0
 8014c08:	4603      	mov	r3, r0
 8014c0a:	4293      	cmp	r3, r2
 8014c0c:	d100      	bne.n	8014c10 <memset+0xa>
 8014c0e:	4770      	bx	lr
 8014c10:	f803 1b01 	strb.w	r1, [r3], #1
 8014c14:	e7f9      	b.n	8014c0a <memset+0x4>
	...

08014c18 <_localeconv_r>:
 8014c18:	4800      	ldr	r0, [pc, #0]	; (8014c1c <_localeconv_r+0x4>)
 8014c1a:	4770      	bx	lr
 8014c1c:	24000264 	.word	0x24000264

08014c20 <_close_r>:
 8014c20:	b538      	push	{r3, r4, r5, lr}
 8014c22:	4d06      	ldr	r5, [pc, #24]	; (8014c3c <_close_r+0x1c>)
 8014c24:	2300      	movs	r3, #0
 8014c26:	4604      	mov	r4, r0
 8014c28:	4608      	mov	r0, r1
 8014c2a:	602b      	str	r3, [r5, #0]
 8014c2c:	f7ee f8d5 	bl	8002dda <_close>
 8014c30:	1c43      	adds	r3, r0, #1
 8014c32:	d102      	bne.n	8014c3a <_close_r+0x1a>
 8014c34:	682b      	ldr	r3, [r5, #0]
 8014c36:	b103      	cbz	r3, 8014c3a <_close_r+0x1a>
 8014c38:	6023      	str	r3, [r4, #0]
 8014c3a:	bd38      	pop	{r3, r4, r5, pc}
 8014c3c:	240029e4 	.word	0x240029e4

08014c40 <_lseek_r>:
 8014c40:	b538      	push	{r3, r4, r5, lr}
 8014c42:	4d07      	ldr	r5, [pc, #28]	; (8014c60 <_lseek_r+0x20>)
 8014c44:	4604      	mov	r4, r0
 8014c46:	4608      	mov	r0, r1
 8014c48:	4611      	mov	r1, r2
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	602a      	str	r2, [r5, #0]
 8014c4e:	461a      	mov	r2, r3
 8014c50:	f7ee f8ea 	bl	8002e28 <_lseek>
 8014c54:	1c43      	adds	r3, r0, #1
 8014c56:	d102      	bne.n	8014c5e <_lseek_r+0x1e>
 8014c58:	682b      	ldr	r3, [r5, #0]
 8014c5a:	b103      	cbz	r3, 8014c5e <_lseek_r+0x1e>
 8014c5c:	6023      	str	r3, [r4, #0]
 8014c5e:	bd38      	pop	{r3, r4, r5, pc}
 8014c60:	240029e4 	.word	0x240029e4

08014c64 <_read_r>:
 8014c64:	b538      	push	{r3, r4, r5, lr}
 8014c66:	4d07      	ldr	r5, [pc, #28]	; (8014c84 <_read_r+0x20>)
 8014c68:	4604      	mov	r4, r0
 8014c6a:	4608      	mov	r0, r1
 8014c6c:	4611      	mov	r1, r2
 8014c6e:	2200      	movs	r2, #0
 8014c70:	602a      	str	r2, [r5, #0]
 8014c72:	461a      	mov	r2, r3
 8014c74:	f7ee f878 	bl	8002d68 <_read>
 8014c78:	1c43      	adds	r3, r0, #1
 8014c7a:	d102      	bne.n	8014c82 <_read_r+0x1e>
 8014c7c:	682b      	ldr	r3, [r5, #0]
 8014c7e:	b103      	cbz	r3, 8014c82 <_read_r+0x1e>
 8014c80:	6023      	str	r3, [r4, #0]
 8014c82:	bd38      	pop	{r3, r4, r5, pc}
 8014c84:	240029e4 	.word	0x240029e4

08014c88 <_sbrk_r>:
 8014c88:	b538      	push	{r3, r4, r5, lr}
 8014c8a:	4d06      	ldr	r5, [pc, #24]	; (8014ca4 <_sbrk_r+0x1c>)
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	4604      	mov	r4, r0
 8014c90:	4608      	mov	r0, r1
 8014c92:	602b      	str	r3, [r5, #0]
 8014c94:	f7ee f8d6 	bl	8002e44 <_sbrk>
 8014c98:	1c43      	adds	r3, r0, #1
 8014c9a:	d102      	bne.n	8014ca2 <_sbrk_r+0x1a>
 8014c9c:	682b      	ldr	r3, [r5, #0]
 8014c9e:	b103      	cbz	r3, 8014ca2 <_sbrk_r+0x1a>
 8014ca0:	6023      	str	r3, [r4, #0]
 8014ca2:	bd38      	pop	{r3, r4, r5, pc}
 8014ca4:	240029e4 	.word	0x240029e4

08014ca8 <_write_r>:
 8014ca8:	b538      	push	{r3, r4, r5, lr}
 8014caa:	4d07      	ldr	r5, [pc, #28]	; (8014cc8 <_write_r+0x20>)
 8014cac:	4604      	mov	r4, r0
 8014cae:	4608      	mov	r0, r1
 8014cb0:	4611      	mov	r1, r2
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	602a      	str	r2, [r5, #0]
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	f7ee f873 	bl	8002da2 <_write>
 8014cbc:	1c43      	adds	r3, r0, #1
 8014cbe:	d102      	bne.n	8014cc6 <_write_r+0x1e>
 8014cc0:	682b      	ldr	r3, [r5, #0]
 8014cc2:	b103      	cbz	r3, 8014cc6 <_write_r+0x1e>
 8014cc4:	6023      	str	r3, [r4, #0]
 8014cc6:	bd38      	pop	{r3, r4, r5, pc}
 8014cc8:	240029e4 	.word	0x240029e4

08014ccc <__errno>:
 8014ccc:	4b01      	ldr	r3, [pc, #4]	; (8014cd4 <__errno+0x8>)
 8014cce:	6818      	ldr	r0, [r3, #0]
 8014cd0:	4770      	bx	lr
 8014cd2:	bf00      	nop
 8014cd4:	24000170 	.word	0x24000170

08014cd8 <__libc_init_array>:
 8014cd8:	b570      	push	{r4, r5, r6, lr}
 8014cda:	4d0d      	ldr	r5, [pc, #52]	; (8014d10 <__libc_init_array+0x38>)
 8014cdc:	4c0d      	ldr	r4, [pc, #52]	; (8014d14 <__libc_init_array+0x3c>)
 8014cde:	1b64      	subs	r4, r4, r5
 8014ce0:	10a4      	asrs	r4, r4, #2
 8014ce2:	2600      	movs	r6, #0
 8014ce4:	42a6      	cmp	r6, r4
 8014ce6:	d109      	bne.n	8014cfc <__libc_init_array+0x24>
 8014ce8:	4d0b      	ldr	r5, [pc, #44]	; (8014d18 <__libc_init_array+0x40>)
 8014cea:	4c0c      	ldr	r4, [pc, #48]	; (8014d1c <__libc_init_array+0x44>)
 8014cec:	f003 fa44 	bl	8018178 <_init>
 8014cf0:	1b64      	subs	r4, r4, r5
 8014cf2:	10a4      	asrs	r4, r4, #2
 8014cf4:	2600      	movs	r6, #0
 8014cf6:	42a6      	cmp	r6, r4
 8014cf8:	d105      	bne.n	8014d06 <__libc_init_array+0x2e>
 8014cfa:	bd70      	pop	{r4, r5, r6, pc}
 8014cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d00:	4798      	blx	r3
 8014d02:	3601      	adds	r6, #1
 8014d04:	e7ee      	b.n	8014ce4 <__libc_init_array+0xc>
 8014d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8014d0a:	4798      	blx	r3
 8014d0c:	3601      	adds	r6, #1
 8014d0e:	e7f2      	b.n	8014cf6 <__libc_init_array+0x1e>
 8014d10:	080187b8 	.word	0x080187b8
 8014d14:	080187b8 	.word	0x080187b8
 8014d18:	080187b8 	.word	0x080187b8
 8014d1c:	080187bc 	.word	0x080187bc

08014d20 <nanf>:
 8014d20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014d28 <nanf+0x8>
 8014d24:	4770      	bx	lr
 8014d26:	bf00      	nop
 8014d28:	7fc00000 	.word	0x7fc00000

08014d2c <quorem>:
 8014d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d30:	6903      	ldr	r3, [r0, #16]
 8014d32:	690c      	ldr	r4, [r1, #16]
 8014d34:	42a3      	cmp	r3, r4
 8014d36:	4607      	mov	r7, r0
 8014d38:	db7e      	blt.n	8014e38 <quorem+0x10c>
 8014d3a:	3c01      	subs	r4, #1
 8014d3c:	f101 0814 	add.w	r8, r1, #20
 8014d40:	f100 0514 	add.w	r5, r0, #20
 8014d44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014d48:	9301      	str	r3, [sp, #4]
 8014d4a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014d4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014d52:	3301      	adds	r3, #1
 8014d54:	429a      	cmp	r2, r3
 8014d56:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014d5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014d5e:	fbb2 f6f3 	udiv	r6, r2, r3
 8014d62:	d331      	bcc.n	8014dc8 <quorem+0x9c>
 8014d64:	f04f 0e00 	mov.w	lr, #0
 8014d68:	4640      	mov	r0, r8
 8014d6a:	46ac      	mov	ip, r5
 8014d6c:	46f2      	mov	sl, lr
 8014d6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8014d72:	b293      	uxth	r3, r2
 8014d74:	fb06 e303 	mla	r3, r6, r3, lr
 8014d78:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014d7c:	0c1a      	lsrs	r2, r3, #16
 8014d7e:	b29b      	uxth	r3, r3
 8014d80:	ebaa 0303 	sub.w	r3, sl, r3
 8014d84:	f8dc a000 	ldr.w	sl, [ip]
 8014d88:	fa13 f38a 	uxtah	r3, r3, sl
 8014d8c:	fb06 220e 	mla	r2, r6, lr, r2
 8014d90:	9300      	str	r3, [sp, #0]
 8014d92:	9b00      	ldr	r3, [sp, #0]
 8014d94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014d98:	b292      	uxth	r2, r2
 8014d9a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014d9e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014da2:	f8bd 3000 	ldrh.w	r3, [sp]
 8014da6:	4581      	cmp	r9, r0
 8014da8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014dac:	f84c 3b04 	str.w	r3, [ip], #4
 8014db0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014db4:	d2db      	bcs.n	8014d6e <quorem+0x42>
 8014db6:	f855 300b 	ldr.w	r3, [r5, fp]
 8014dba:	b92b      	cbnz	r3, 8014dc8 <quorem+0x9c>
 8014dbc:	9b01      	ldr	r3, [sp, #4]
 8014dbe:	3b04      	subs	r3, #4
 8014dc0:	429d      	cmp	r5, r3
 8014dc2:	461a      	mov	r2, r3
 8014dc4:	d32c      	bcc.n	8014e20 <quorem+0xf4>
 8014dc6:	613c      	str	r4, [r7, #16]
 8014dc8:	4638      	mov	r0, r7
 8014dca:	f001 f8b7 	bl	8015f3c <__mcmp>
 8014dce:	2800      	cmp	r0, #0
 8014dd0:	db22      	blt.n	8014e18 <quorem+0xec>
 8014dd2:	3601      	adds	r6, #1
 8014dd4:	4629      	mov	r1, r5
 8014dd6:	2000      	movs	r0, #0
 8014dd8:	f858 2b04 	ldr.w	r2, [r8], #4
 8014ddc:	f8d1 c000 	ldr.w	ip, [r1]
 8014de0:	b293      	uxth	r3, r2
 8014de2:	1ac3      	subs	r3, r0, r3
 8014de4:	0c12      	lsrs	r2, r2, #16
 8014de6:	fa13 f38c 	uxtah	r3, r3, ip
 8014dea:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8014dee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014df2:	b29b      	uxth	r3, r3
 8014df4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014df8:	45c1      	cmp	r9, r8
 8014dfa:	f841 3b04 	str.w	r3, [r1], #4
 8014dfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8014e02:	d2e9      	bcs.n	8014dd8 <quorem+0xac>
 8014e04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014e08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014e0c:	b922      	cbnz	r2, 8014e18 <quorem+0xec>
 8014e0e:	3b04      	subs	r3, #4
 8014e10:	429d      	cmp	r5, r3
 8014e12:	461a      	mov	r2, r3
 8014e14:	d30a      	bcc.n	8014e2c <quorem+0x100>
 8014e16:	613c      	str	r4, [r7, #16]
 8014e18:	4630      	mov	r0, r6
 8014e1a:	b003      	add	sp, #12
 8014e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e20:	6812      	ldr	r2, [r2, #0]
 8014e22:	3b04      	subs	r3, #4
 8014e24:	2a00      	cmp	r2, #0
 8014e26:	d1ce      	bne.n	8014dc6 <quorem+0x9a>
 8014e28:	3c01      	subs	r4, #1
 8014e2a:	e7c9      	b.n	8014dc0 <quorem+0x94>
 8014e2c:	6812      	ldr	r2, [r2, #0]
 8014e2e:	3b04      	subs	r3, #4
 8014e30:	2a00      	cmp	r2, #0
 8014e32:	d1f0      	bne.n	8014e16 <quorem+0xea>
 8014e34:	3c01      	subs	r4, #1
 8014e36:	e7eb      	b.n	8014e10 <quorem+0xe4>
 8014e38:	2000      	movs	r0, #0
 8014e3a:	e7ee      	b.n	8014e1a <quorem+0xee>
 8014e3c:	0000      	movs	r0, r0
	...

08014e40 <_dtoa_r>:
 8014e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e44:	ed2d 8b02 	vpush	{d8}
 8014e48:	69c5      	ldr	r5, [r0, #28]
 8014e4a:	b091      	sub	sp, #68	; 0x44
 8014e4c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014e50:	ec59 8b10 	vmov	r8, r9, d0
 8014e54:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014e56:	9106      	str	r1, [sp, #24]
 8014e58:	4606      	mov	r6, r0
 8014e5a:	9208      	str	r2, [sp, #32]
 8014e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8014e5e:	b975      	cbnz	r5, 8014e7e <_dtoa_r+0x3e>
 8014e60:	2010      	movs	r0, #16
 8014e62:	f7fe feb7 	bl	8013bd4 <malloc>
 8014e66:	4602      	mov	r2, r0
 8014e68:	61f0      	str	r0, [r6, #28]
 8014e6a:	b920      	cbnz	r0, 8014e76 <_dtoa_r+0x36>
 8014e6c:	4ba6      	ldr	r3, [pc, #664]	; (8015108 <_dtoa_r+0x2c8>)
 8014e6e:	21ef      	movs	r1, #239	; 0xef
 8014e70:	48a6      	ldr	r0, [pc, #664]	; (801510c <_dtoa_r+0x2cc>)
 8014e72:	f002 fae5 	bl	8017440 <__assert_func>
 8014e76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014e7a:	6005      	str	r5, [r0, #0]
 8014e7c:	60c5      	str	r5, [r0, #12]
 8014e7e:	69f3      	ldr	r3, [r6, #28]
 8014e80:	6819      	ldr	r1, [r3, #0]
 8014e82:	b151      	cbz	r1, 8014e9a <_dtoa_r+0x5a>
 8014e84:	685a      	ldr	r2, [r3, #4]
 8014e86:	604a      	str	r2, [r1, #4]
 8014e88:	2301      	movs	r3, #1
 8014e8a:	4093      	lsls	r3, r2
 8014e8c:	608b      	str	r3, [r1, #8]
 8014e8e:	4630      	mov	r0, r6
 8014e90:	f000 fdce 	bl	8015a30 <_Bfree>
 8014e94:	69f3      	ldr	r3, [r6, #28]
 8014e96:	2200      	movs	r2, #0
 8014e98:	601a      	str	r2, [r3, #0]
 8014e9a:	f1b9 0300 	subs.w	r3, r9, #0
 8014e9e:	bfbb      	ittet	lt
 8014ea0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014ea4:	9303      	strlt	r3, [sp, #12]
 8014ea6:	2300      	movge	r3, #0
 8014ea8:	2201      	movlt	r2, #1
 8014eaa:	bfac      	ite	ge
 8014eac:	6023      	strge	r3, [r4, #0]
 8014eae:	6022      	strlt	r2, [r4, #0]
 8014eb0:	4b97      	ldr	r3, [pc, #604]	; (8015110 <_dtoa_r+0x2d0>)
 8014eb2:	9c03      	ldr	r4, [sp, #12]
 8014eb4:	43a3      	bics	r3, r4
 8014eb6:	d11c      	bne.n	8014ef2 <_dtoa_r+0xb2>
 8014eb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014eba:	f242 730f 	movw	r3, #9999	; 0x270f
 8014ebe:	6013      	str	r3, [r2, #0]
 8014ec0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8014ec4:	ea53 0308 	orrs.w	r3, r3, r8
 8014ec8:	f000 84fb 	beq.w	80158c2 <_dtoa_r+0xa82>
 8014ecc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014ece:	b963      	cbnz	r3, 8014eea <_dtoa_r+0xaa>
 8014ed0:	4b90      	ldr	r3, [pc, #576]	; (8015114 <_dtoa_r+0x2d4>)
 8014ed2:	e020      	b.n	8014f16 <_dtoa_r+0xd6>
 8014ed4:	4b90      	ldr	r3, [pc, #576]	; (8015118 <_dtoa_r+0x2d8>)
 8014ed6:	9301      	str	r3, [sp, #4]
 8014ed8:	3308      	adds	r3, #8
 8014eda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014edc:	6013      	str	r3, [r2, #0]
 8014ede:	9801      	ldr	r0, [sp, #4]
 8014ee0:	b011      	add	sp, #68	; 0x44
 8014ee2:	ecbd 8b02 	vpop	{d8}
 8014ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014eea:	4b8a      	ldr	r3, [pc, #552]	; (8015114 <_dtoa_r+0x2d4>)
 8014eec:	9301      	str	r3, [sp, #4]
 8014eee:	3303      	adds	r3, #3
 8014ef0:	e7f3      	b.n	8014eda <_dtoa_r+0x9a>
 8014ef2:	ed9d 8b02 	vldr	d8, [sp, #8]
 8014ef6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8014efa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014efe:	d10c      	bne.n	8014f1a <_dtoa_r+0xda>
 8014f00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014f02:	2301      	movs	r3, #1
 8014f04:	6013      	str	r3, [r2, #0]
 8014f06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	f000 84d7 	beq.w	80158bc <_dtoa_r+0xa7c>
 8014f0e:	4b83      	ldr	r3, [pc, #524]	; (801511c <_dtoa_r+0x2dc>)
 8014f10:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014f12:	6013      	str	r3, [r2, #0]
 8014f14:	3b01      	subs	r3, #1
 8014f16:	9301      	str	r3, [sp, #4]
 8014f18:	e7e1      	b.n	8014ede <_dtoa_r+0x9e>
 8014f1a:	aa0e      	add	r2, sp, #56	; 0x38
 8014f1c:	a90f      	add	r1, sp, #60	; 0x3c
 8014f1e:	4630      	mov	r0, r6
 8014f20:	eeb0 0b48 	vmov.f64	d0, d8
 8014f24:	f001 f920 	bl	8016168 <__d2b>
 8014f28:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8014f2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f2e:	4605      	mov	r5, r0
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d046      	beq.n	8014fc2 <_dtoa_r+0x182>
 8014f34:	eeb0 7b48 	vmov.f64	d7, d8
 8014f38:	ee18 1a90 	vmov	r1, s17
 8014f3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014f40:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8014f44:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014f48:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014f4c:	2000      	movs	r0, #0
 8014f4e:	ee07 1a90 	vmov	s15, r1
 8014f52:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8014f56:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80150f0 <_dtoa_r+0x2b0>
 8014f5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8014f5e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80150f8 <_dtoa_r+0x2b8>
 8014f62:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014f66:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8015100 <_dtoa_r+0x2c0>
 8014f6a:	ee07 3a90 	vmov	s15, r3
 8014f6e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014f72:	eeb0 7b46 	vmov.f64	d7, d6
 8014f76:	eea4 7b05 	vfma.f64	d7, d4, d5
 8014f7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8014f7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f86:	ee16 ba90 	vmov	fp, s13
 8014f8a:	9009      	str	r0, [sp, #36]	; 0x24
 8014f8c:	d508      	bpl.n	8014fa0 <_dtoa_r+0x160>
 8014f8e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014f92:	eeb4 6b47 	vcmp.f64	d6, d7
 8014f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f9a:	bf18      	it	ne
 8014f9c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014fa0:	f1bb 0f16 	cmp.w	fp, #22
 8014fa4:	d82b      	bhi.n	8014ffe <_dtoa_r+0x1be>
 8014fa6:	495e      	ldr	r1, [pc, #376]	; (8015120 <_dtoa_r+0x2e0>)
 8014fa8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8014fac:	ed91 7b00 	vldr	d7, [r1]
 8014fb0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014fb8:	d501      	bpl.n	8014fbe <_dtoa_r+0x17e>
 8014fba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014fbe:	2100      	movs	r1, #0
 8014fc0:	e01e      	b.n	8015000 <_dtoa_r+0x1c0>
 8014fc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fc4:	4413      	add	r3, r2
 8014fc6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8014fca:	2920      	cmp	r1, #32
 8014fcc:	bfc1      	itttt	gt
 8014fce:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8014fd2:	408c      	lslgt	r4, r1
 8014fd4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8014fd8:	fa28 f101 	lsrgt.w	r1, r8, r1
 8014fdc:	bfd6      	itet	le
 8014fde:	f1c1 0120 	rsble	r1, r1, #32
 8014fe2:	4321      	orrgt	r1, r4
 8014fe4:	fa08 f101 	lslle.w	r1, r8, r1
 8014fe8:	ee07 1a90 	vmov	s15, r1
 8014fec:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8014ff0:	3b01      	subs	r3, #1
 8014ff2:	ee17 1a90 	vmov	r1, s15
 8014ff6:	2001      	movs	r0, #1
 8014ff8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8014ffc:	e7a7      	b.n	8014f4e <_dtoa_r+0x10e>
 8014ffe:	2101      	movs	r1, #1
 8015000:	1ad2      	subs	r2, r2, r3
 8015002:	1e53      	subs	r3, r2, #1
 8015004:	9305      	str	r3, [sp, #20]
 8015006:	bf45      	ittet	mi
 8015008:	f1c2 0301 	rsbmi	r3, r2, #1
 801500c:	9304      	strmi	r3, [sp, #16]
 801500e:	2300      	movpl	r3, #0
 8015010:	2300      	movmi	r3, #0
 8015012:	bf4c      	ite	mi
 8015014:	9305      	strmi	r3, [sp, #20]
 8015016:	9304      	strpl	r3, [sp, #16]
 8015018:	f1bb 0f00 	cmp.w	fp, #0
 801501c:	910b      	str	r1, [sp, #44]	; 0x2c
 801501e:	db18      	blt.n	8015052 <_dtoa_r+0x212>
 8015020:	9b05      	ldr	r3, [sp, #20]
 8015022:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8015026:	445b      	add	r3, fp
 8015028:	9305      	str	r3, [sp, #20]
 801502a:	2300      	movs	r3, #0
 801502c:	9a06      	ldr	r2, [sp, #24]
 801502e:	2a09      	cmp	r2, #9
 8015030:	d848      	bhi.n	80150c4 <_dtoa_r+0x284>
 8015032:	2a05      	cmp	r2, #5
 8015034:	bfc4      	itt	gt
 8015036:	3a04      	subgt	r2, #4
 8015038:	9206      	strgt	r2, [sp, #24]
 801503a:	9a06      	ldr	r2, [sp, #24]
 801503c:	f1a2 0202 	sub.w	r2, r2, #2
 8015040:	bfcc      	ite	gt
 8015042:	2400      	movgt	r4, #0
 8015044:	2401      	movle	r4, #1
 8015046:	2a03      	cmp	r2, #3
 8015048:	d847      	bhi.n	80150da <_dtoa_r+0x29a>
 801504a:	e8df f002 	tbb	[pc, r2]
 801504e:	2d0b      	.short	0x2d0b
 8015050:	392b      	.short	0x392b
 8015052:	9b04      	ldr	r3, [sp, #16]
 8015054:	2200      	movs	r2, #0
 8015056:	eba3 030b 	sub.w	r3, r3, fp
 801505a:	9304      	str	r3, [sp, #16]
 801505c:	920a      	str	r2, [sp, #40]	; 0x28
 801505e:	f1cb 0300 	rsb	r3, fp, #0
 8015062:	e7e3      	b.n	801502c <_dtoa_r+0x1ec>
 8015064:	2200      	movs	r2, #0
 8015066:	9207      	str	r2, [sp, #28]
 8015068:	9a08      	ldr	r2, [sp, #32]
 801506a:	2a00      	cmp	r2, #0
 801506c:	dc38      	bgt.n	80150e0 <_dtoa_r+0x2a0>
 801506e:	f04f 0a01 	mov.w	sl, #1
 8015072:	46d1      	mov	r9, sl
 8015074:	4652      	mov	r2, sl
 8015076:	f8cd a020 	str.w	sl, [sp, #32]
 801507a:	69f7      	ldr	r7, [r6, #28]
 801507c:	2100      	movs	r1, #0
 801507e:	2004      	movs	r0, #4
 8015080:	f100 0c14 	add.w	ip, r0, #20
 8015084:	4594      	cmp	ip, r2
 8015086:	d930      	bls.n	80150ea <_dtoa_r+0x2aa>
 8015088:	6079      	str	r1, [r7, #4]
 801508a:	4630      	mov	r0, r6
 801508c:	930d      	str	r3, [sp, #52]	; 0x34
 801508e:	f000 fc8f 	bl	80159b0 <_Balloc>
 8015092:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015094:	9001      	str	r0, [sp, #4]
 8015096:	4602      	mov	r2, r0
 8015098:	2800      	cmp	r0, #0
 801509a:	d145      	bne.n	8015128 <_dtoa_r+0x2e8>
 801509c:	4b21      	ldr	r3, [pc, #132]	; (8015124 <_dtoa_r+0x2e4>)
 801509e:	f240 11af 	movw	r1, #431	; 0x1af
 80150a2:	e6e5      	b.n	8014e70 <_dtoa_r+0x30>
 80150a4:	2201      	movs	r2, #1
 80150a6:	e7de      	b.n	8015066 <_dtoa_r+0x226>
 80150a8:	2200      	movs	r2, #0
 80150aa:	9207      	str	r2, [sp, #28]
 80150ac:	9a08      	ldr	r2, [sp, #32]
 80150ae:	eb0b 0a02 	add.w	sl, fp, r2
 80150b2:	f10a 0901 	add.w	r9, sl, #1
 80150b6:	464a      	mov	r2, r9
 80150b8:	2a01      	cmp	r2, #1
 80150ba:	bfb8      	it	lt
 80150bc:	2201      	movlt	r2, #1
 80150be:	e7dc      	b.n	801507a <_dtoa_r+0x23a>
 80150c0:	2201      	movs	r2, #1
 80150c2:	e7f2      	b.n	80150aa <_dtoa_r+0x26a>
 80150c4:	2401      	movs	r4, #1
 80150c6:	2200      	movs	r2, #0
 80150c8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80150cc:	f04f 3aff 	mov.w	sl, #4294967295
 80150d0:	2100      	movs	r1, #0
 80150d2:	46d1      	mov	r9, sl
 80150d4:	2212      	movs	r2, #18
 80150d6:	9108      	str	r1, [sp, #32]
 80150d8:	e7cf      	b.n	801507a <_dtoa_r+0x23a>
 80150da:	2201      	movs	r2, #1
 80150dc:	9207      	str	r2, [sp, #28]
 80150de:	e7f5      	b.n	80150cc <_dtoa_r+0x28c>
 80150e0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80150e4:	46d1      	mov	r9, sl
 80150e6:	4652      	mov	r2, sl
 80150e8:	e7c7      	b.n	801507a <_dtoa_r+0x23a>
 80150ea:	3101      	adds	r1, #1
 80150ec:	0040      	lsls	r0, r0, #1
 80150ee:	e7c7      	b.n	8015080 <_dtoa_r+0x240>
 80150f0:	636f4361 	.word	0x636f4361
 80150f4:	3fd287a7 	.word	0x3fd287a7
 80150f8:	8b60c8b3 	.word	0x8b60c8b3
 80150fc:	3fc68a28 	.word	0x3fc68a28
 8015100:	509f79fb 	.word	0x509f79fb
 8015104:	3fd34413 	.word	0x3fd34413
 8015108:	080183ce 	.word	0x080183ce
 801510c:	080183e5 	.word	0x080183e5
 8015110:	7ff00000 	.word	0x7ff00000
 8015114:	080183ca 	.word	0x080183ca
 8015118:	080183c1 	.word	0x080183c1
 801511c:	08018399 	.word	0x08018399
 8015120:	080184d0 	.word	0x080184d0
 8015124:	0801843d 	.word	0x0801843d
 8015128:	69f2      	ldr	r2, [r6, #28]
 801512a:	9901      	ldr	r1, [sp, #4]
 801512c:	6011      	str	r1, [r2, #0]
 801512e:	f1b9 0f0e 	cmp.w	r9, #14
 8015132:	d86c      	bhi.n	801520e <_dtoa_r+0x3ce>
 8015134:	2c00      	cmp	r4, #0
 8015136:	d06a      	beq.n	801520e <_dtoa_r+0x3ce>
 8015138:	f1bb 0f00 	cmp.w	fp, #0
 801513c:	f340 80a0 	ble.w	8015280 <_dtoa_r+0x440>
 8015140:	4ac1      	ldr	r2, [pc, #772]	; (8015448 <_dtoa_r+0x608>)
 8015142:	f00b 010f 	and.w	r1, fp, #15
 8015146:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801514a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801514e:	ed92 7b00 	vldr	d7, [r2]
 8015152:	ea4f 122b 	mov.w	r2, fp, asr #4
 8015156:	f000 8087 	beq.w	8015268 <_dtoa_r+0x428>
 801515a:	49bc      	ldr	r1, [pc, #752]	; (801544c <_dtoa_r+0x60c>)
 801515c:	ed91 6b08 	vldr	d6, [r1, #32]
 8015160:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8015164:	ed8d 6b02 	vstr	d6, [sp, #8]
 8015168:	f002 020f 	and.w	r2, r2, #15
 801516c:	2103      	movs	r1, #3
 801516e:	48b7      	ldr	r0, [pc, #732]	; (801544c <_dtoa_r+0x60c>)
 8015170:	2a00      	cmp	r2, #0
 8015172:	d17b      	bne.n	801526c <_dtoa_r+0x42c>
 8015174:	ed9d 6b02 	vldr	d6, [sp, #8]
 8015178:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801517c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015182:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015186:	2a00      	cmp	r2, #0
 8015188:	f000 80a0 	beq.w	80152cc <_dtoa_r+0x48c>
 801518c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8015190:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8015194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015198:	f140 8098 	bpl.w	80152cc <_dtoa_r+0x48c>
 801519c:	f1b9 0f00 	cmp.w	r9, #0
 80151a0:	f000 8094 	beq.w	80152cc <_dtoa_r+0x48c>
 80151a4:	f1ba 0f00 	cmp.w	sl, #0
 80151a8:	dd2f      	ble.n	801520a <_dtoa_r+0x3ca>
 80151aa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80151ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80151b2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80151b6:	f10b 32ff 	add.w	r2, fp, #4294967295
 80151ba:	3101      	adds	r1, #1
 80151bc:	4654      	mov	r4, sl
 80151be:	ed9d 6b02 	vldr	d6, [sp, #8]
 80151c2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80151c6:	ee07 1a90 	vmov	s15, r1
 80151ca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80151ce:	eea7 5b06 	vfma.f64	d5, d7, d6
 80151d2:	ee15 7a90 	vmov	r7, s11
 80151d6:	ec51 0b15 	vmov	r0, r1, d5
 80151da:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80151de:	2c00      	cmp	r4, #0
 80151e0:	d177      	bne.n	80152d2 <_dtoa_r+0x492>
 80151e2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80151e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80151ea:	ec41 0b17 	vmov	d7, r0, r1
 80151ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80151f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80151f6:	f300 826a 	bgt.w	80156ce <_dtoa_r+0x88e>
 80151fa:	eeb1 7b47 	vneg.f64	d7, d7
 80151fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015206:	f100 8260 	bmi.w	80156ca <_dtoa_r+0x88a>
 801520a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801520e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015210:	2a00      	cmp	r2, #0
 8015212:	f2c0 811d 	blt.w	8015450 <_dtoa_r+0x610>
 8015216:	f1bb 0f0e 	cmp.w	fp, #14
 801521a:	f300 8119 	bgt.w	8015450 <_dtoa_r+0x610>
 801521e:	4b8a      	ldr	r3, [pc, #552]	; (8015448 <_dtoa_r+0x608>)
 8015220:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8015224:	ed93 6b00 	vldr	d6, [r3]
 8015228:	9b08      	ldr	r3, [sp, #32]
 801522a:	2b00      	cmp	r3, #0
 801522c:	f280 80b7 	bge.w	801539e <_dtoa_r+0x55e>
 8015230:	f1b9 0f00 	cmp.w	r9, #0
 8015234:	f300 80b3 	bgt.w	801539e <_dtoa_r+0x55e>
 8015238:	f040 8246 	bne.w	80156c8 <_dtoa_r+0x888>
 801523c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8015240:	ee26 6b07 	vmul.f64	d6, d6, d7
 8015244:	ed9d 7b02 	vldr	d7, [sp, #8]
 8015248:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801524c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015250:	464c      	mov	r4, r9
 8015252:	464f      	mov	r7, r9
 8015254:	f280 821c 	bge.w	8015690 <_dtoa_r+0x850>
 8015258:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801525c:	2331      	movs	r3, #49	; 0x31
 801525e:	f808 3b01 	strb.w	r3, [r8], #1
 8015262:	f10b 0b01 	add.w	fp, fp, #1
 8015266:	e218      	b.n	801569a <_dtoa_r+0x85a>
 8015268:	2102      	movs	r1, #2
 801526a:	e780      	b.n	801516e <_dtoa_r+0x32e>
 801526c:	07d4      	lsls	r4, r2, #31
 801526e:	d504      	bpl.n	801527a <_dtoa_r+0x43a>
 8015270:	ed90 6b00 	vldr	d6, [r0]
 8015274:	3101      	adds	r1, #1
 8015276:	ee27 7b06 	vmul.f64	d7, d7, d6
 801527a:	1052      	asrs	r2, r2, #1
 801527c:	3008      	adds	r0, #8
 801527e:	e777      	b.n	8015170 <_dtoa_r+0x330>
 8015280:	d022      	beq.n	80152c8 <_dtoa_r+0x488>
 8015282:	f1cb 0200 	rsb	r2, fp, #0
 8015286:	4970      	ldr	r1, [pc, #448]	; (8015448 <_dtoa_r+0x608>)
 8015288:	f002 000f 	and.w	r0, r2, #15
 801528c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8015290:	ed91 7b00 	vldr	d7, [r1]
 8015294:	ee28 7b07 	vmul.f64	d7, d8, d7
 8015298:	ed8d 7b02 	vstr	d7, [sp, #8]
 801529c:	486b      	ldr	r0, [pc, #428]	; (801544c <_dtoa_r+0x60c>)
 801529e:	1112      	asrs	r2, r2, #4
 80152a0:	2400      	movs	r4, #0
 80152a2:	2102      	movs	r1, #2
 80152a4:	b92a      	cbnz	r2, 80152b2 <_dtoa_r+0x472>
 80152a6:	2c00      	cmp	r4, #0
 80152a8:	f43f af6a 	beq.w	8015180 <_dtoa_r+0x340>
 80152ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152b0:	e766      	b.n	8015180 <_dtoa_r+0x340>
 80152b2:	07d7      	lsls	r7, r2, #31
 80152b4:	d505      	bpl.n	80152c2 <_dtoa_r+0x482>
 80152b6:	ed90 6b00 	vldr	d6, [r0]
 80152ba:	3101      	adds	r1, #1
 80152bc:	2401      	movs	r4, #1
 80152be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80152c2:	1052      	asrs	r2, r2, #1
 80152c4:	3008      	adds	r0, #8
 80152c6:	e7ed      	b.n	80152a4 <_dtoa_r+0x464>
 80152c8:	2102      	movs	r1, #2
 80152ca:	e759      	b.n	8015180 <_dtoa_r+0x340>
 80152cc:	465a      	mov	r2, fp
 80152ce:	464c      	mov	r4, r9
 80152d0:	e775      	b.n	80151be <_dtoa_r+0x37e>
 80152d2:	ec41 0b17 	vmov	d7, r0, r1
 80152d6:	495c      	ldr	r1, [pc, #368]	; (8015448 <_dtoa_r+0x608>)
 80152d8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80152dc:	ed11 4b02 	vldr	d4, [r1, #-8]
 80152e0:	9901      	ldr	r1, [sp, #4]
 80152e2:	440c      	add	r4, r1
 80152e4:	9907      	ldr	r1, [sp, #28]
 80152e6:	b351      	cbz	r1, 801533e <_dtoa_r+0x4fe>
 80152e8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80152ec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80152f0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80152f4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80152f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80152fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8015300:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015304:	ee14 1a90 	vmov	r1, s9
 8015308:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801530c:	3130      	adds	r1, #48	; 0x30
 801530e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015312:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801531a:	f808 1b01 	strb.w	r1, [r8], #1
 801531e:	d439      	bmi.n	8015394 <_dtoa_r+0x554>
 8015320:	ee32 5b46 	vsub.f64	d5, d2, d6
 8015324:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8015328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801532c:	d472      	bmi.n	8015414 <_dtoa_r+0x5d4>
 801532e:	45a0      	cmp	r8, r4
 8015330:	f43f af6b 	beq.w	801520a <_dtoa_r+0x3ca>
 8015334:	ee27 7b03 	vmul.f64	d7, d7, d3
 8015338:	ee26 6b03 	vmul.f64	d6, d6, d3
 801533c:	e7e0      	b.n	8015300 <_dtoa_r+0x4c0>
 801533e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015342:	ee27 7b04 	vmul.f64	d7, d7, d4
 8015346:	4620      	mov	r0, r4
 8015348:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801534c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8015350:	ee14 1a90 	vmov	r1, s9
 8015354:	3130      	adds	r1, #48	; 0x30
 8015356:	f808 1b01 	strb.w	r1, [r8], #1
 801535a:	45a0      	cmp	r8, r4
 801535c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8015360:	ee36 6b45 	vsub.f64	d6, d6, d5
 8015364:	d118      	bne.n	8015398 <_dtoa_r+0x558>
 8015366:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801536a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801536e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8015372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015376:	dc4d      	bgt.n	8015414 <_dtoa_r+0x5d4>
 8015378:	ee35 5b47 	vsub.f64	d5, d5, d7
 801537c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8015380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015384:	f57f af41 	bpl.w	801520a <_dtoa_r+0x3ca>
 8015388:	4680      	mov	r8, r0
 801538a:	3801      	subs	r0, #1
 801538c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8015390:	2b30      	cmp	r3, #48	; 0x30
 8015392:	d0f9      	beq.n	8015388 <_dtoa_r+0x548>
 8015394:	4693      	mov	fp, r2
 8015396:	e02a      	b.n	80153ee <_dtoa_r+0x5ae>
 8015398:	ee26 6b03 	vmul.f64	d6, d6, d3
 801539c:	e7d6      	b.n	801534c <_dtoa_r+0x50c>
 801539e:	ed9d 7b02 	vldr	d7, [sp, #8]
 80153a2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80153a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80153aa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80153ae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80153b2:	ee15 3a10 	vmov	r3, s10
 80153b6:	3330      	adds	r3, #48	; 0x30
 80153b8:	f808 3b01 	strb.w	r3, [r8], #1
 80153bc:	9b01      	ldr	r3, [sp, #4]
 80153be:	eba8 0303 	sub.w	r3, r8, r3
 80153c2:	4599      	cmp	r9, r3
 80153c4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80153c8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80153cc:	d133      	bne.n	8015436 <_dtoa_r+0x5f6>
 80153ce:	ee37 7b07 	vadd.f64	d7, d7, d7
 80153d2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80153d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153da:	dc1a      	bgt.n	8015412 <_dtoa_r+0x5d2>
 80153dc:	eeb4 7b46 	vcmp.f64	d7, d6
 80153e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153e4:	d103      	bne.n	80153ee <_dtoa_r+0x5ae>
 80153e6:	ee15 3a10 	vmov	r3, s10
 80153ea:	07d9      	lsls	r1, r3, #31
 80153ec:	d411      	bmi.n	8015412 <_dtoa_r+0x5d2>
 80153ee:	4629      	mov	r1, r5
 80153f0:	4630      	mov	r0, r6
 80153f2:	f000 fb1d 	bl	8015a30 <_Bfree>
 80153f6:	2300      	movs	r3, #0
 80153f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153fa:	f888 3000 	strb.w	r3, [r8]
 80153fe:	f10b 0301 	add.w	r3, fp, #1
 8015402:	6013      	str	r3, [r2, #0]
 8015404:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015406:	2b00      	cmp	r3, #0
 8015408:	f43f ad69 	beq.w	8014ede <_dtoa_r+0x9e>
 801540c:	f8c3 8000 	str.w	r8, [r3]
 8015410:	e565      	b.n	8014ede <_dtoa_r+0x9e>
 8015412:	465a      	mov	r2, fp
 8015414:	4643      	mov	r3, r8
 8015416:	4698      	mov	r8, r3
 8015418:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801541c:	2939      	cmp	r1, #57	; 0x39
 801541e:	d106      	bne.n	801542e <_dtoa_r+0x5ee>
 8015420:	9901      	ldr	r1, [sp, #4]
 8015422:	4299      	cmp	r1, r3
 8015424:	d1f7      	bne.n	8015416 <_dtoa_r+0x5d6>
 8015426:	9801      	ldr	r0, [sp, #4]
 8015428:	2130      	movs	r1, #48	; 0x30
 801542a:	3201      	adds	r2, #1
 801542c:	7001      	strb	r1, [r0, #0]
 801542e:	7819      	ldrb	r1, [r3, #0]
 8015430:	3101      	adds	r1, #1
 8015432:	7019      	strb	r1, [r3, #0]
 8015434:	e7ae      	b.n	8015394 <_dtoa_r+0x554>
 8015436:	ee27 7b04 	vmul.f64	d7, d7, d4
 801543a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801543e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015442:	d1b2      	bne.n	80153aa <_dtoa_r+0x56a>
 8015444:	e7d3      	b.n	80153ee <_dtoa_r+0x5ae>
 8015446:	bf00      	nop
 8015448:	080184d0 	.word	0x080184d0
 801544c:	080184a8 	.word	0x080184a8
 8015450:	9907      	ldr	r1, [sp, #28]
 8015452:	2900      	cmp	r1, #0
 8015454:	f000 80d0 	beq.w	80155f8 <_dtoa_r+0x7b8>
 8015458:	9906      	ldr	r1, [sp, #24]
 801545a:	2901      	cmp	r1, #1
 801545c:	f300 80b4 	bgt.w	80155c8 <_dtoa_r+0x788>
 8015460:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015462:	2900      	cmp	r1, #0
 8015464:	f000 80ac 	beq.w	80155c0 <_dtoa_r+0x780>
 8015468:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801546c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015470:	461c      	mov	r4, r3
 8015472:	9309      	str	r3, [sp, #36]	; 0x24
 8015474:	9b04      	ldr	r3, [sp, #16]
 8015476:	4413      	add	r3, r2
 8015478:	9304      	str	r3, [sp, #16]
 801547a:	9b05      	ldr	r3, [sp, #20]
 801547c:	2101      	movs	r1, #1
 801547e:	4413      	add	r3, r2
 8015480:	4630      	mov	r0, r6
 8015482:	9305      	str	r3, [sp, #20]
 8015484:	f000 fbd4 	bl	8015c30 <__i2b>
 8015488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801548a:	4607      	mov	r7, r0
 801548c:	f1b8 0f00 	cmp.w	r8, #0
 8015490:	d00d      	beq.n	80154ae <_dtoa_r+0x66e>
 8015492:	9a05      	ldr	r2, [sp, #20]
 8015494:	2a00      	cmp	r2, #0
 8015496:	dd0a      	ble.n	80154ae <_dtoa_r+0x66e>
 8015498:	4542      	cmp	r2, r8
 801549a:	9904      	ldr	r1, [sp, #16]
 801549c:	bfa8      	it	ge
 801549e:	4642      	movge	r2, r8
 80154a0:	1a89      	subs	r1, r1, r2
 80154a2:	9104      	str	r1, [sp, #16]
 80154a4:	9905      	ldr	r1, [sp, #20]
 80154a6:	eba8 0802 	sub.w	r8, r8, r2
 80154aa:	1a8a      	subs	r2, r1, r2
 80154ac:	9205      	str	r2, [sp, #20]
 80154ae:	b303      	cbz	r3, 80154f2 <_dtoa_r+0x6b2>
 80154b0:	9a07      	ldr	r2, [sp, #28]
 80154b2:	2a00      	cmp	r2, #0
 80154b4:	f000 80a5 	beq.w	8015602 <_dtoa_r+0x7c2>
 80154b8:	2c00      	cmp	r4, #0
 80154ba:	dd13      	ble.n	80154e4 <_dtoa_r+0x6a4>
 80154bc:	4639      	mov	r1, r7
 80154be:	4622      	mov	r2, r4
 80154c0:	4630      	mov	r0, r6
 80154c2:	930d      	str	r3, [sp, #52]	; 0x34
 80154c4:	f000 fc74 	bl	8015db0 <__pow5mult>
 80154c8:	462a      	mov	r2, r5
 80154ca:	4601      	mov	r1, r0
 80154cc:	4607      	mov	r7, r0
 80154ce:	4630      	mov	r0, r6
 80154d0:	f000 fbc4 	bl	8015c5c <__multiply>
 80154d4:	4629      	mov	r1, r5
 80154d6:	9009      	str	r0, [sp, #36]	; 0x24
 80154d8:	4630      	mov	r0, r6
 80154da:	f000 faa9 	bl	8015a30 <_Bfree>
 80154de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80154e2:	4615      	mov	r5, r2
 80154e4:	1b1a      	subs	r2, r3, r4
 80154e6:	d004      	beq.n	80154f2 <_dtoa_r+0x6b2>
 80154e8:	4629      	mov	r1, r5
 80154ea:	4630      	mov	r0, r6
 80154ec:	f000 fc60 	bl	8015db0 <__pow5mult>
 80154f0:	4605      	mov	r5, r0
 80154f2:	2101      	movs	r1, #1
 80154f4:	4630      	mov	r0, r6
 80154f6:	f000 fb9b 	bl	8015c30 <__i2b>
 80154fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	4604      	mov	r4, r0
 8015500:	f340 8081 	ble.w	8015606 <_dtoa_r+0x7c6>
 8015504:	461a      	mov	r2, r3
 8015506:	4601      	mov	r1, r0
 8015508:	4630      	mov	r0, r6
 801550a:	f000 fc51 	bl	8015db0 <__pow5mult>
 801550e:	9b06      	ldr	r3, [sp, #24]
 8015510:	2b01      	cmp	r3, #1
 8015512:	4604      	mov	r4, r0
 8015514:	dd7a      	ble.n	801560c <_dtoa_r+0x7cc>
 8015516:	2300      	movs	r3, #0
 8015518:	9309      	str	r3, [sp, #36]	; 0x24
 801551a:	6922      	ldr	r2, [r4, #16]
 801551c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015520:	6910      	ldr	r0, [r2, #16]
 8015522:	f000 fb37 	bl	8015b94 <__hi0bits>
 8015526:	f1c0 0020 	rsb	r0, r0, #32
 801552a:	9b05      	ldr	r3, [sp, #20]
 801552c:	4418      	add	r0, r3
 801552e:	f010 001f 	ands.w	r0, r0, #31
 8015532:	f000 8093 	beq.w	801565c <_dtoa_r+0x81c>
 8015536:	f1c0 0220 	rsb	r2, r0, #32
 801553a:	2a04      	cmp	r2, #4
 801553c:	f340 8085 	ble.w	801564a <_dtoa_r+0x80a>
 8015540:	9b04      	ldr	r3, [sp, #16]
 8015542:	f1c0 001c 	rsb	r0, r0, #28
 8015546:	4403      	add	r3, r0
 8015548:	9304      	str	r3, [sp, #16]
 801554a:	9b05      	ldr	r3, [sp, #20]
 801554c:	4480      	add	r8, r0
 801554e:	4403      	add	r3, r0
 8015550:	9305      	str	r3, [sp, #20]
 8015552:	9b04      	ldr	r3, [sp, #16]
 8015554:	2b00      	cmp	r3, #0
 8015556:	dd05      	ble.n	8015564 <_dtoa_r+0x724>
 8015558:	4629      	mov	r1, r5
 801555a:	461a      	mov	r2, r3
 801555c:	4630      	mov	r0, r6
 801555e:	f000 fc81 	bl	8015e64 <__lshift>
 8015562:	4605      	mov	r5, r0
 8015564:	9b05      	ldr	r3, [sp, #20]
 8015566:	2b00      	cmp	r3, #0
 8015568:	dd05      	ble.n	8015576 <_dtoa_r+0x736>
 801556a:	4621      	mov	r1, r4
 801556c:	461a      	mov	r2, r3
 801556e:	4630      	mov	r0, r6
 8015570:	f000 fc78 	bl	8015e64 <__lshift>
 8015574:	4604      	mov	r4, r0
 8015576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015578:	2b00      	cmp	r3, #0
 801557a:	d071      	beq.n	8015660 <_dtoa_r+0x820>
 801557c:	4621      	mov	r1, r4
 801557e:	4628      	mov	r0, r5
 8015580:	f000 fcdc 	bl	8015f3c <__mcmp>
 8015584:	2800      	cmp	r0, #0
 8015586:	da6b      	bge.n	8015660 <_dtoa_r+0x820>
 8015588:	2300      	movs	r3, #0
 801558a:	4629      	mov	r1, r5
 801558c:	220a      	movs	r2, #10
 801558e:	4630      	mov	r0, r6
 8015590:	f000 fa70 	bl	8015a74 <__multadd>
 8015594:	9b07      	ldr	r3, [sp, #28]
 8015596:	f10b 3bff 	add.w	fp, fp, #4294967295
 801559a:	4605      	mov	r5, r0
 801559c:	2b00      	cmp	r3, #0
 801559e:	f000 8197 	beq.w	80158d0 <_dtoa_r+0xa90>
 80155a2:	4639      	mov	r1, r7
 80155a4:	2300      	movs	r3, #0
 80155a6:	220a      	movs	r2, #10
 80155a8:	4630      	mov	r0, r6
 80155aa:	f000 fa63 	bl	8015a74 <__multadd>
 80155ae:	f1ba 0f00 	cmp.w	sl, #0
 80155b2:	4607      	mov	r7, r0
 80155b4:	f300 8093 	bgt.w	80156de <_dtoa_r+0x89e>
 80155b8:	9b06      	ldr	r3, [sp, #24]
 80155ba:	2b02      	cmp	r3, #2
 80155bc:	dc57      	bgt.n	801566e <_dtoa_r+0x82e>
 80155be:	e08e      	b.n	80156de <_dtoa_r+0x89e>
 80155c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80155c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80155c6:	e751      	b.n	801546c <_dtoa_r+0x62c>
 80155c8:	f109 34ff 	add.w	r4, r9, #4294967295
 80155cc:	42a3      	cmp	r3, r4
 80155ce:	bfbf      	itttt	lt
 80155d0:	1ae2      	sublt	r2, r4, r3
 80155d2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80155d4:	189b      	addlt	r3, r3, r2
 80155d6:	930a      	strlt	r3, [sp, #40]	; 0x28
 80155d8:	bfae      	itee	ge
 80155da:	1b1c      	subge	r4, r3, r4
 80155dc:	4623      	movlt	r3, r4
 80155de:	2400      	movlt	r4, #0
 80155e0:	f1b9 0f00 	cmp.w	r9, #0
 80155e4:	bfb5      	itete	lt
 80155e6:	9a04      	ldrlt	r2, [sp, #16]
 80155e8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80155ec:	eba2 0809 	sublt.w	r8, r2, r9
 80155f0:	464a      	movge	r2, r9
 80155f2:	bfb8      	it	lt
 80155f4:	2200      	movlt	r2, #0
 80155f6:	e73c      	b.n	8015472 <_dtoa_r+0x632>
 80155f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80155fc:	9f07      	ldr	r7, [sp, #28]
 80155fe:	461c      	mov	r4, r3
 8015600:	e744      	b.n	801548c <_dtoa_r+0x64c>
 8015602:	461a      	mov	r2, r3
 8015604:	e770      	b.n	80154e8 <_dtoa_r+0x6a8>
 8015606:	9b06      	ldr	r3, [sp, #24]
 8015608:	2b01      	cmp	r3, #1
 801560a:	dc18      	bgt.n	801563e <_dtoa_r+0x7fe>
 801560c:	9b02      	ldr	r3, [sp, #8]
 801560e:	b9b3      	cbnz	r3, 801563e <_dtoa_r+0x7fe>
 8015610:	9b03      	ldr	r3, [sp, #12]
 8015612:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8015616:	b9a2      	cbnz	r2, 8015642 <_dtoa_r+0x802>
 8015618:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801561c:	0d12      	lsrs	r2, r2, #20
 801561e:	0512      	lsls	r2, r2, #20
 8015620:	b18a      	cbz	r2, 8015646 <_dtoa_r+0x806>
 8015622:	9b04      	ldr	r3, [sp, #16]
 8015624:	3301      	adds	r3, #1
 8015626:	9304      	str	r3, [sp, #16]
 8015628:	9b05      	ldr	r3, [sp, #20]
 801562a:	3301      	adds	r3, #1
 801562c:	9305      	str	r3, [sp, #20]
 801562e:	2301      	movs	r3, #1
 8015630:	9309      	str	r3, [sp, #36]	; 0x24
 8015632:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015634:	2b00      	cmp	r3, #0
 8015636:	f47f af70 	bne.w	801551a <_dtoa_r+0x6da>
 801563a:	2001      	movs	r0, #1
 801563c:	e775      	b.n	801552a <_dtoa_r+0x6ea>
 801563e:	2300      	movs	r3, #0
 8015640:	e7f6      	b.n	8015630 <_dtoa_r+0x7f0>
 8015642:	9b02      	ldr	r3, [sp, #8]
 8015644:	e7f4      	b.n	8015630 <_dtoa_r+0x7f0>
 8015646:	9209      	str	r2, [sp, #36]	; 0x24
 8015648:	e7f3      	b.n	8015632 <_dtoa_r+0x7f2>
 801564a:	d082      	beq.n	8015552 <_dtoa_r+0x712>
 801564c:	9b04      	ldr	r3, [sp, #16]
 801564e:	321c      	adds	r2, #28
 8015650:	4413      	add	r3, r2
 8015652:	9304      	str	r3, [sp, #16]
 8015654:	9b05      	ldr	r3, [sp, #20]
 8015656:	4490      	add	r8, r2
 8015658:	4413      	add	r3, r2
 801565a:	e779      	b.n	8015550 <_dtoa_r+0x710>
 801565c:	4602      	mov	r2, r0
 801565e:	e7f5      	b.n	801564c <_dtoa_r+0x80c>
 8015660:	f1b9 0f00 	cmp.w	r9, #0
 8015664:	dc36      	bgt.n	80156d4 <_dtoa_r+0x894>
 8015666:	9b06      	ldr	r3, [sp, #24]
 8015668:	2b02      	cmp	r3, #2
 801566a:	dd33      	ble.n	80156d4 <_dtoa_r+0x894>
 801566c:	46ca      	mov	sl, r9
 801566e:	f1ba 0f00 	cmp.w	sl, #0
 8015672:	d10d      	bne.n	8015690 <_dtoa_r+0x850>
 8015674:	4621      	mov	r1, r4
 8015676:	4653      	mov	r3, sl
 8015678:	2205      	movs	r2, #5
 801567a:	4630      	mov	r0, r6
 801567c:	f000 f9fa 	bl	8015a74 <__multadd>
 8015680:	4601      	mov	r1, r0
 8015682:	4604      	mov	r4, r0
 8015684:	4628      	mov	r0, r5
 8015686:	f000 fc59 	bl	8015f3c <__mcmp>
 801568a:	2800      	cmp	r0, #0
 801568c:	f73f ade4 	bgt.w	8015258 <_dtoa_r+0x418>
 8015690:	9b08      	ldr	r3, [sp, #32]
 8015692:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015696:	ea6f 0b03 	mvn.w	fp, r3
 801569a:	f04f 0900 	mov.w	r9, #0
 801569e:	4621      	mov	r1, r4
 80156a0:	4630      	mov	r0, r6
 80156a2:	f000 f9c5 	bl	8015a30 <_Bfree>
 80156a6:	2f00      	cmp	r7, #0
 80156a8:	f43f aea1 	beq.w	80153ee <_dtoa_r+0x5ae>
 80156ac:	f1b9 0f00 	cmp.w	r9, #0
 80156b0:	d005      	beq.n	80156be <_dtoa_r+0x87e>
 80156b2:	45b9      	cmp	r9, r7
 80156b4:	d003      	beq.n	80156be <_dtoa_r+0x87e>
 80156b6:	4649      	mov	r1, r9
 80156b8:	4630      	mov	r0, r6
 80156ba:	f000 f9b9 	bl	8015a30 <_Bfree>
 80156be:	4639      	mov	r1, r7
 80156c0:	4630      	mov	r0, r6
 80156c2:	f000 f9b5 	bl	8015a30 <_Bfree>
 80156c6:	e692      	b.n	80153ee <_dtoa_r+0x5ae>
 80156c8:	2400      	movs	r4, #0
 80156ca:	4627      	mov	r7, r4
 80156cc:	e7e0      	b.n	8015690 <_dtoa_r+0x850>
 80156ce:	4693      	mov	fp, r2
 80156d0:	4627      	mov	r7, r4
 80156d2:	e5c1      	b.n	8015258 <_dtoa_r+0x418>
 80156d4:	9b07      	ldr	r3, [sp, #28]
 80156d6:	46ca      	mov	sl, r9
 80156d8:	2b00      	cmp	r3, #0
 80156da:	f000 8100 	beq.w	80158de <_dtoa_r+0xa9e>
 80156de:	f1b8 0f00 	cmp.w	r8, #0
 80156e2:	dd05      	ble.n	80156f0 <_dtoa_r+0x8b0>
 80156e4:	4639      	mov	r1, r7
 80156e6:	4642      	mov	r2, r8
 80156e8:	4630      	mov	r0, r6
 80156ea:	f000 fbbb 	bl	8015e64 <__lshift>
 80156ee:	4607      	mov	r7, r0
 80156f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d05d      	beq.n	80157b2 <_dtoa_r+0x972>
 80156f6:	6879      	ldr	r1, [r7, #4]
 80156f8:	4630      	mov	r0, r6
 80156fa:	f000 f959 	bl	80159b0 <_Balloc>
 80156fe:	4680      	mov	r8, r0
 8015700:	b928      	cbnz	r0, 801570e <_dtoa_r+0x8ce>
 8015702:	4b82      	ldr	r3, [pc, #520]	; (801590c <_dtoa_r+0xacc>)
 8015704:	4602      	mov	r2, r0
 8015706:	f240 21ef 	movw	r1, #751	; 0x2ef
 801570a:	f7ff bbb1 	b.w	8014e70 <_dtoa_r+0x30>
 801570e:	693a      	ldr	r2, [r7, #16]
 8015710:	3202      	adds	r2, #2
 8015712:	0092      	lsls	r2, r2, #2
 8015714:	f107 010c 	add.w	r1, r7, #12
 8015718:	300c      	adds	r0, #12
 801571a:	f001 fe7b 	bl	8017414 <memcpy>
 801571e:	2201      	movs	r2, #1
 8015720:	4641      	mov	r1, r8
 8015722:	4630      	mov	r0, r6
 8015724:	f000 fb9e 	bl	8015e64 <__lshift>
 8015728:	9b01      	ldr	r3, [sp, #4]
 801572a:	3301      	adds	r3, #1
 801572c:	9304      	str	r3, [sp, #16]
 801572e:	9b01      	ldr	r3, [sp, #4]
 8015730:	4453      	add	r3, sl
 8015732:	9308      	str	r3, [sp, #32]
 8015734:	9b02      	ldr	r3, [sp, #8]
 8015736:	f003 0301 	and.w	r3, r3, #1
 801573a:	46b9      	mov	r9, r7
 801573c:	9307      	str	r3, [sp, #28]
 801573e:	4607      	mov	r7, r0
 8015740:	9b04      	ldr	r3, [sp, #16]
 8015742:	4621      	mov	r1, r4
 8015744:	3b01      	subs	r3, #1
 8015746:	4628      	mov	r0, r5
 8015748:	9302      	str	r3, [sp, #8]
 801574a:	f7ff faef 	bl	8014d2c <quorem>
 801574e:	4603      	mov	r3, r0
 8015750:	3330      	adds	r3, #48	; 0x30
 8015752:	9005      	str	r0, [sp, #20]
 8015754:	4649      	mov	r1, r9
 8015756:	4628      	mov	r0, r5
 8015758:	9309      	str	r3, [sp, #36]	; 0x24
 801575a:	f000 fbef 	bl	8015f3c <__mcmp>
 801575e:	463a      	mov	r2, r7
 8015760:	4682      	mov	sl, r0
 8015762:	4621      	mov	r1, r4
 8015764:	4630      	mov	r0, r6
 8015766:	f000 fc05 	bl	8015f74 <__mdiff>
 801576a:	68c2      	ldr	r2, [r0, #12]
 801576c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801576e:	4680      	mov	r8, r0
 8015770:	bb0a      	cbnz	r2, 80157b6 <_dtoa_r+0x976>
 8015772:	4601      	mov	r1, r0
 8015774:	4628      	mov	r0, r5
 8015776:	f000 fbe1 	bl	8015f3c <__mcmp>
 801577a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801577c:	4602      	mov	r2, r0
 801577e:	4641      	mov	r1, r8
 8015780:	4630      	mov	r0, r6
 8015782:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8015786:	f000 f953 	bl	8015a30 <_Bfree>
 801578a:	9b06      	ldr	r3, [sp, #24]
 801578c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801578e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015792:	ea43 0102 	orr.w	r1, r3, r2
 8015796:	9b07      	ldr	r3, [sp, #28]
 8015798:	4319      	orrs	r1, r3
 801579a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801579c:	d10d      	bne.n	80157ba <_dtoa_r+0x97a>
 801579e:	2b39      	cmp	r3, #57	; 0x39
 80157a0:	d029      	beq.n	80157f6 <_dtoa_r+0x9b6>
 80157a2:	f1ba 0f00 	cmp.w	sl, #0
 80157a6:	dd01      	ble.n	80157ac <_dtoa_r+0x96c>
 80157a8:	9b05      	ldr	r3, [sp, #20]
 80157aa:	3331      	adds	r3, #49	; 0x31
 80157ac:	9a02      	ldr	r2, [sp, #8]
 80157ae:	7013      	strb	r3, [r2, #0]
 80157b0:	e775      	b.n	801569e <_dtoa_r+0x85e>
 80157b2:	4638      	mov	r0, r7
 80157b4:	e7b8      	b.n	8015728 <_dtoa_r+0x8e8>
 80157b6:	2201      	movs	r2, #1
 80157b8:	e7e1      	b.n	801577e <_dtoa_r+0x93e>
 80157ba:	f1ba 0f00 	cmp.w	sl, #0
 80157be:	db06      	blt.n	80157ce <_dtoa_r+0x98e>
 80157c0:	9906      	ldr	r1, [sp, #24]
 80157c2:	ea41 0a0a 	orr.w	sl, r1, sl
 80157c6:	9907      	ldr	r1, [sp, #28]
 80157c8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80157cc:	d120      	bne.n	8015810 <_dtoa_r+0x9d0>
 80157ce:	2a00      	cmp	r2, #0
 80157d0:	ddec      	ble.n	80157ac <_dtoa_r+0x96c>
 80157d2:	4629      	mov	r1, r5
 80157d4:	2201      	movs	r2, #1
 80157d6:	4630      	mov	r0, r6
 80157d8:	9304      	str	r3, [sp, #16]
 80157da:	f000 fb43 	bl	8015e64 <__lshift>
 80157de:	4621      	mov	r1, r4
 80157e0:	4605      	mov	r5, r0
 80157e2:	f000 fbab 	bl	8015f3c <__mcmp>
 80157e6:	2800      	cmp	r0, #0
 80157e8:	9b04      	ldr	r3, [sp, #16]
 80157ea:	dc02      	bgt.n	80157f2 <_dtoa_r+0x9b2>
 80157ec:	d1de      	bne.n	80157ac <_dtoa_r+0x96c>
 80157ee:	07da      	lsls	r2, r3, #31
 80157f0:	d5dc      	bpl.n	80157ac <_dtoa_r+0x96c>
 80157f2:	2b39      	cmp	r3, #57	; 0x39
 80157f4:	d1d8      	bne.n	80157a8 <_dtoa_r+0x968>
 80157f6:	9a02      	ldr	r2, [sp, #8]
 80157f8:	2339      	movs	r3, #57	; 0x39
 80157fa:	7013      	strb	r3, [r2, #0]
 80157fc:	4643      	mov	r3, r8
 80157fe:	4698      	mov	r8, r3
 8015800:	3b01      	subs	r3, #1
 8015802:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8015806:	2a39      	cmp	r2, #57	; 0x39
 8015808:	d051      	beq.n	80158ae <_dtoa_r+0xa6e>
 801580a:	3201      	adds	r2, #1
 801580c:	701a      	strb	r2, [r3, #0]
 801580e:	e746      	b.n	801569e <_dtoa_r+0x85e>
 8015810:	2a00      	cmp	r2, #0
 8015812:	dd03      	ble.n	801581c <_dtoa_r+0x9dc>
 8015814:	2b39      	cmp	r3, #57	; 0x39
 8015816:	d0ee      	beq.n	80157f6 <_dtoa_r+0x9b6>
 8015818:	3301      	adds	r3, #1
 801581a:	e7c7      	b.n	80157ac <_dtoa_r+0x96c>
 801581c:	9a04      	ldr	r2, [sp, #16]
 801581e:	9908      	ldr	r1, [sp, #32]
 8015820:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015824:	428a      	cmp	r2, r1
 8015826:	d02b      	beq.n	8015880 <_dtoa_r+0xa40>
 8015828:	4629      	mov	r1, r5
 801582a:	2300      	movs	r3, #0
 801582c:	220a      	movs	r2, #10
 801582e:	4630      	mov	r0, r6
 8015830:	f000 f920 	bl	8015a74 <__multadd>
 8015834:	45b9      	cmp	r9, r7
 8015836:	4605      	mov	r5, r0
 8015838:	f04f 0300 	mov.w	r3, #0
 801583c:	f04f 020a 	mov.w	r2, #10
 8015840:	4649      	mov	r1, r9
 8015842:	4630      	mov	r0, r6
 8015844:	d107      	bne.n	8015856 <_dtoa_r+0xa16>
 8015846:	f000 f915 	bl	8015a74 <__multadd>
 801584a:	4681      	mov	r9, r0
 801584c:	4607      	mov	r7, r0
 801584e:	9b04      	ldr	r3, [sp, #16]
 8015850:	3301      	adds	r3, #1
 8015852:	9304      	str	r3, [sp, #16]
 8015854:	e774      	b.n	8015740 <_dtoa_r+0x900>
 8015856:	f000 f90d 	bl	8015a74 <__multadd>
 801585a:	4639      	mov	r1, r7
 801585c:	4681      	mov	r9, r0
 801585e:	2300      	movs	r3, #0
 8015860:	220a      	movs	r2, #10
 8015862:	4630      	mov	r0, r6
 8015864:	f000 f906 	bl	8015a74 <__multadd>
 8015868:	4607      	mov	r7, r0
 801586a:	e7f0      	b.n	801584e <_dtoa_r+0xa0e>
 801586c:	f1ba 0f00 	cmp.w	sl, #0
 8015870:	9a01      	ldr	r2, [sp, #4]
 8015872:	bfcc      	ite	gt
 8015874:	46d0      	movgt	r8, sl
 8015876:	f04f 0801 	movle.w	r8, #1
 801587a:	4490      	add	r8, r2
 801587c:	f04f 0900 	mov.w	r9, #0
 8015880:	4629      	mov	r1, r5
 8015882:	2201      	movs	r2, #1
 8015884:	4630      	mov	r0, r6
 8015886:	9302      	str	r3, [sp, #8]
 8015888:	f000 faec 	bl	8015e64 <__lshift>
 801588c:	4621      	mov	r1, r4
 801588e:	4605      	mov	r5, r0
 8015890:	f000 fb54 	bl	8015f3c <__mcmp>
 8015894:	2800      	cmp	r0, #0
 8015896:	dcb1      	bgt.n	80157fc <_dtoa_r+0x9bc>
 8015898:	d102      	bne.n	80158a0 <_dtoa_r+0xa60>
 801589a:	9b02      	ldr	r3, [sp, #8]
 801589c:	07db      	lsls	r3, r3, #31
 801589e:	d4ad      	bmi.n	80157fc <_dtoa_r+0x9bc>
 80158a0:	4643      	mov	r3, r8
 80158a2:	4698      	mov	r8, r3
 80158a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80158a8:	2a30      	cmp	r2, #48	; 0x30
 80158aa:	d0fa      	beq.n	80158a2 <_dtoa_r+0xa62>
 80158ac:	e6f7      	b.n	801569e <_dtoa_r+0x85e>
 80158ae:	9a01      	ldr	r2, [sp, #4]
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d1a4      	bne.n	80157fe <_dtoa_r+0x9be>
 80158b4:	f10b 0b01 	add.w	fp, fp, #1
 80158b8:	2331      	movs	r3, #49	; 0x31
 80158ba:	e778      	b.n	80157ae <_dtoa_r+0x96e>
 80158bc:	4b14      	ldr	r3, [pc, #80]	; (8015910 <_dtoa_r+0xad0>)
 80158be:	f7ff bb2a 	b.w	8014f16 <_dtoa_r+0xd6>
 80158c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	f47f ab05 	bne.w	8014ed4 <_dtoa_r+0x94>
 80158ca:	4b12      	ldr	r3, [pc, #72]	; (8015914 <_dtoa_r+0xad4>)
 80158cc:	f7ff bb23 	b.w	8014f16 <_dtoa_r+0xd6>
 80158d0:	f1ba 0f00 	cmp.w	sl, #0
 80158d4:	dc03      	bgt.n	80158de <_dtoa_r+0xa9e>
 80158d6:	9b06      	ldr	r3, [sp, #24]
 80158d8:	2b02      	cmp	r3, #2
 80158da:	f73f aec8 	bgt.w	801566e <_dtoa_r+0x82e>
 80158de:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80158e2:	4621      	mov	r1, r4
 80158e4:	4628      	mov	r0, r5
 80158e6:	f7ff fa21 	bl	8014d2c <quorem>
 80158ea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80158ee:	f808 3b01 	strb.w	r3, [r8], #1
 80158f2:	9a01      	ldr	r2, [sp, #4]
 80158f4:	eba8 0202 	sub.w	r2, r8, r2
 80158f8:	4592      	cmp	sl, r2
 80158fa:	ddb7      	ble.n	801586c <_dtoa_r+0xa2c>
 80158fc:	4629      	mov	r1, r5
 80158fe:	2300      	movs	r3, #0
 8015900:	220a      	movs	r2, #10
 8015902:	4630      	mov	r0, r6
 8015904:	f000 f8b6 	bl	8015a74 <__multadd>
 8015908:	4605      	mov	r5, r0
 801590a:	e7ea      	b.n	80158e2 <_dtoa_r+0xaa2>
 801590c:	0801843d 	.word	0x0801843d
 8015910:	08018398 	.word	0x08018398
 8015914:	080183c1 	.word	0x080183c1

08015918 <_free_r>:
 8015918:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801591a:	2900      	cmp	r1, #0
 801591c:	d044      	beq.n	80159a8 <_free_r+0x90>
 801591e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015922:	9001      	str	r0, [sp, #4]
 8015924:	2b00      	cmp	r3, #0
 8015926:	f1a1 0404 	sub.w	r4, r1, #4
 801592a:	bfb8      	it	lt
 801592c:	18e4      	addlt	r4, r4, r3
 801592e:	f7fe f9f9 	bl	8013d24 <__malloc_lock>
 8015932:	4a1e      	ldr	r2, [pc, #120]	; (80159ac <_free_r+0x94>)
 8015934:	9801      	ldr	r0, [sp, #4]
 8015936:	6813      	ldr	r3, [r2, #0]
 8015938:	b933      	cbnz	r3, 8015948 <_free_r+0x30>
 801593a:	6063      	str	r3, [r4, #4]
 801593c:	6014      	str	r4, [r2, #0]
 801593e:	b003      	add	sp, #12
 8015940:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015944:	f7fe b9f4 	b.w	8013d30 <__malloc_unlock>
 8015948:	42a3      	cmp	r3, r4
 801594a:	d908      	bls.n	801595e <_free_r+0x46>
 801594c:	6825      	ldr	r5, [r4, #0]
 801594e:	1961      	adds	r1, r4, r5
 8015950:	428b      	cmp	r3, r1
 8015952:	bf01      	itttt	eq
 8015954:	6819      	ldreq	r1, [r3, #0]
 8015956:	685b      	ldreq	r3, [r3, #4]
 8015958:	1949      	addeq	r1, r1, r5
 801595a:	6021      	streq	r1, [r4, #0]
 801595c:	e7ed      	b.n	801593a <_free_r+0x22>
 801595e:	461a      	mov	r2, r3
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	b10b      	cbz	r3, 8015968 <_free_r+0x50>
 8015964:	42a3      	cmp	r3, r4
 8015966:	d9fa      	bls.n	801595e <_free_r+0x46>
 8015968:	6811      	ldr	r1, [r2, #0]
 801596a:	1855      	adds	r5, r2, r1
 801596c:	42a5      	cmp	r5, r4
 801596e:	d10b      	bne.n	8015988 <_free_r+0x70>
 8015970:	6824      	ldr	r4, [r4, #0]
 8015972:	4421      	add	r1, r4
 8015974:	1854      	adds	r4, r2, r1
 8015976:	42a3      	cmp	r3, r4
 8015978:	6011      	str	r1, [r2, #0]
 801597a:	d1e0      	bne.n	801593e <_free_r+0x26>
 801597c:	681c      	ldr	r4, [r3, #0]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	6053      	str	r3, [r2, #4]
 8015982:	440c      	add	r4, r1
 8015984:	6014      	str	r4, [r2, #0]
 8015986:	e7da      	b.n	801593e <_free_r+0x26>
 8015988:	d902      	bls.n	8015990 <_free_r+0x78>
 801598a:	230c      	movs	r3, #12
 801598c:	6003      	str	r3, [r0, #0]
 801598e:	e7d6      	b.n	801593e <_free_r+0x26>
 8015990:	6825      	ldr	r5, [r4, #0]
 8015992:	1961      	adds	r1, r4, r5
 8015994:	428b      	cmp	r3, r1
 8015996:	bf04      	itt	eq
 8015998:	6819      	ldreq	r1, [r3, #0]
 801599a:	685b      	ldreq	r3, [r3, #4]
 801599c:	6063      	str	r3, [r4, #4]
 801599e:	bf04      	itt	eq
 80159a0:	1949      	addeq	r1, r1, r5
 80159a2:	6021      	streq	r1, [r4, #0]
 80159a4:	6054      	str	r4, [r2, #4]
 80159a6:	e7ca      	b.n	801593e <_free_r+0x26>
 80159a8:	b003      	add	sp, #12
 80159aa:	bd30      	pop	{r4, r5, pc}
 80159ac:	240028a0 	.word	0x240028a0

080159b0 <_Balloc>:
 80159b0:	b570      	push	{r4, r5, r6, lr}
 80159b2:	69c6      	ldr	r6, [r0, #28]
 80159b4:	4604      	mov	r4, r0
 80159b6:	460d      	mov	r5, r1
 80159b8:	b976      	cbnz	r6, 80159d8 <_Balloc+0x28>
 80159ba:	2010      	movs	r0, #16
 80159bc:	f7fe f90a 	bl	8013bd4 <malloc>
 80159c0:	4602      	mov	r2, r0
 80159c2:	61e0      	str	r0, [r4, #28]
 80159c4:	b920      	cbnz	r0, 80159d0 <_Balloc+0x20>
 80159c6:	4b18      	ldr	r3, [pc, #96]	; (8015a28 <_Balloc+0x78>)
 80159c8:	4818      	ldr	r0, [pc, #96]	; (8015a2c <_Balloc+0x7c>)
 80159ca:	216b      	movs	r1, #107	; 0x6b
 80159cc:	f001 fd38 	bl	8017440 <__assert_func>
 80159d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80159d4:	6006      	str	r6, [r0, #0]
 80159d6:	60c6      	str	r6, [r0, #12]
 80159d8:	69e6      	ldr	r6, [r4, #28]
 80159da:	68f3      	ldr	r3, [r6, #12]
 80159dc:	b183      	cbz	r3, 8015a00 <_Balloc+0x50>
 80159de:	69e3      	ldr	r3, [r4, #28]
 80159e0:	68db      	ldr	r3, [r3, #12]
 80159e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80159e6:	b9b8      	cbnz	r0, 8015a18 <_Balloc+0x68>
 80159e8:	2101      	movs	r1, #1
 80159ea:	fa01 f605 	lsl.w	r6, r1, r5
 80159ee:	1d72      	adds	r2, r6, #5
 80159f0:	0092      	lsls	r2, r2, #2
 80159f2:	4620      	mov	r0, r4
 80159f4:	f001 fd42 	bl	801747c <_calloc_r>
 80159f8:	b160      	cbz	r0, 8015a14 <_Balloc+0x64>
 80159fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80159fe:	e00e      	b.n	8015a1e <_Balloc+0x6e>
 8015a00:	2221      	movs	r2, #33	; 0x21
 8015a02:	2104      	movs	r1, #4
 8015a04:	4620      	mov	r0, r4
 8015a06:	f001 fd39 	bl	801747c <_calloc_r>
 8015a0a:	69e3      	ldr	r3, [r4, #28]
 8015a0c:	60f0      	str	r0, [r6, #12]
 8015a0e:	68db      	ldr	r3, [r3, #12]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d1e4      	bne.n	80159de <_Balloc+0x2e>
 8015a14:	2000      	movs	r0, #0
 8015a16:	bd70      	pop	{r4, r5, r6, pc}
 8015a18:	6802      	ldr	r2, [r0, #0]
 8015a1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a1e:	2300      	movs	r3, #0
 8015a20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015a24:	e7f7      	b.n	8015a16 <_Balloc+0x66>
 8015a26:	bf00      	nop
 8015a28:	080183ce 	.word	0x080183ce
 8015a2c:	0801844e 	.word	0x0801844e

08015a30 <_Bfree>:
 8015a30:	b570      	push	{r4, r5, r6, lr}
 8015a32:	69c6      	ldr	r6, [r0, #28]
 8015a34:	4605      	mov	r5, r0
 8015a36:	460c      	mov	r4, r1
 8015a38:	b976      	cbnz	r6, 8015a58 <_Bfree+0x28>
 8015a3a:	2010      	movs	r0, #16
 8015a3c:	f7fe f8ca 	bl	8013bd4 <malloc>
 8015a40:	4602      	mov	r2, r0
 8015a42:	61e8      	str	r0, [r5, #28]
 8015a44:	b920      	cbnz	r0, 8015a50 <_Bfree+0x20>
 8015a46:	4b09      	ldr	r3, [pc, #36]	; (8015a6c <_Bfree+0x3c>)
 8015a48:	4809      	ldr	r0, [pc, #36]	; (8015a70 <_Bfree+0x40>)
 8015a4a:	218f      	movs	r1, #143	; 0x8f
 8015a4c:	f001 fcf8 	bl	8017440 <__assert_func>
 8015a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a54:	6006      	str	r6, [r0, #0]
 8015a56:	60c6      	str	r6, [r0, #12]
 8015a58:	b13c      	cbz	r4, 8015a6a <_Bfree+0x3a>
 8015a5a:	69eb      	ldr	r3, [r5, #28]
 8015a5c:	6862      	ldr	r2, [r4, #4]
 8015a5e:	68db      	ldr	r3, [r3, #12]
 8015a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015a64:	6021      	str	r1, [r4, #0]
 8015a66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015a6a:	bd70      	pop	{r4, r5, r6, pc}
 8015a6c:	080183ce 	.word	0x080183ce
 8015a70:	0801844e 	.word	0x0801844e

08015a74 <__multadd>:
 8015a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a78:	690d      	ldr	r5, [r1, #16]
 8015a7a:	4607      	mov	r7, r0
 8015a7c:	460c      	mov	r4, r1
 8015a7e:	461e      	mov	r6, r3
 8015a80:	f101 0c14 	add.w	ip, r1, #20
 8015a84:	2000      	movs	r0, #0
 8015a86:	f8dc 3000 	ldr.w	r3, [ip]
 8015a8a:	b299      	uxth	r1, r3
 8015a8c:	fb02 6101 	mla	r1, r2, r1, r6
 8015a90:	0c1e      	lsrs	r6, r3, #16
 8015a92:	0c0b      	lsrs	r3, r1, #16
 8015a94:	fb02 3306 	mla	r3, r2, r6, r3
 8015a98:	b289      	uxth	r1, r1
 8015a9a:	3001      	adds	r0, #1
 8015a9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015aa0:	4285      	cmp	r5, r0
 8015aa2:	f84c 1b04 	str.w	r1, [ip], #4
 8015aa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015aaa:	dcec      	bgt.n	8015a86 <__multadd+0x12>
 8015aac:	b30e      	cbz	r6, 8015af2 <__multadd+0x7e>
 8015aae:	68a3      	ldr	r3, [r4, #8]
 8015ab0:	42ab      	cmp	r3, r5
 8015ab2:	dc19      	bgt.n	8015ae8 <__multadd+0x74>
 8015ab4:	6861      	ldr	r1, [r4, #4]
 8015ab6:	4638      	mov	r0, r7
 8015ab8:	3101      	adds	r1, #1
 8015aba:	f7ff ff79 	bl	80159b0 <_Balloc>
 8015abe:	4680      	mov	r8, r0
 8015ac0:	b928      	cbnz	r0, 8015ace <__multadd+0x5a>
 8015ac2:	4602      	mov	r2, r0
 8015ac4:	4b0c      	ldr	r3, [pc, #48]	; (8015af8 <__multadd+0x84>)
 8015ac6:	480d      	ldr	r0, [pc, #52]	; (8015afc <__multadd+0x88>)
 8015ac8:	21ba      	movs	r1, #186	; 0xba
 8015aca:	f001 fcb9 	bl	8017440 <__assert_func>
 8015ace:	6922      	ldr	r2, [r4, #16]
 8015ad0:	3202      	adds	r2, #2
 8015ad2:	f104 010c 	add.w	r1, r4, #12
 8015ad6:	0092      	lsls	r2, r2, #2
 8015ad8:	300c      	adds	r0, #12
 8015ada:	f001 fc9b 	bl	8017414 <memcpy>
 8015ade:	4621      	mov	r1, r4
 8015ae0:	4638      	mov	r0, r7
 8015ae2:	f7ff ffa5 	bl	8015a30 <_Bfree>
 8015ae6:	4644      	mov	r4, r8
 8015ae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015aec:	3501      	adds	r5, #1
 8015aee:	615e      	str	r6, [r3, #20]
 8015af0:	6125      	str	r5, [r4, #16]
 8015af2:	4620      	mov	r0, r4
 8015af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015af8:	0801843d 	.word	0x0801843d
 8015afc:	0801844e 	.word	0x0801844e

08015b00 <__s2b>:
 8015b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b04:	460c      	mov	r4, r1
 8015b06:	4615      	mov	r5, r2
 8015b08:	461f      	mov	r7, r3
 8015b0a:	2209      	movs	r2, #9
 8015b0c:	3308      	adds	r3, #8
 8015b0e:	4606      	mov	r6, r0
 8015b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8015b14:	2100      	movs	r1, #0
 8015b16:	2201      	movs	r2, #1
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	db09      	blt.n	8015b30 <__s2b+0x30>
 8015b1c:	4630      	mov	r0, r6
 8015b1e:	f7ff ff47 	bl	80159b0 <_Balloc>
 8015b22:	b940      	cbnz	r0, 8015b36 <__s2b+0x36>
 8015b24:	4602      	mov	r2, r0
 8015b26:	4b19      	ldr	r3, [pc, #100]	; (8015b8c <__s2b+0x8c>)
 8015b28:	4819      	ldr	r0, [pc, #100]	; (8015b90 <__s2b+0x90>)
 8015b2a:	21d3      	movs	r1, #211	; 0xd3
 8015b2c:	f001 fc88 	bl	8017440 <__assert_func>
 8015b30:	0052      	lsls	r2, r2, #1
 8015b32:	3101      	adds	r1, #1
 8015b34:	e7f0      	b.n	8015b18 <__s2b+0x18>
 8015b36:	9b08      	ldr	r3, [sp, #32]
 8015b38:	6143      	str	r3, [r0, #20]
 8015b3a:	2d09      	cmp	r5, #9
 8015b3c:	f04f 0301 	mov.w	r3, #1
 8015b40:	6103      	str	r3, [r0, #16]
 8015b42:	dd16      	ble.n	8015b72 <__s2b+0x72>
 8015b44:	f104 0909 	add.w	r9, r4, #9
 8015b48:	46c8      	mov	r8, r9
 8015b4a:	442c      	add	r4, r5
 8015b4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015b50:	4601      	mov	r1, r0
 8015b52:	3b30      	subs	r3, #48	; 0x30
 8015b54:	220a      	movs	r2, #10
 8015b56:	4630      	mov	r0, r6
 8015b58:	f7ff ff8c 	bl	8015a74 <__multadd>
 8015b5c:	45a0      	cmp	r8, r4
 8015b5e:	d1f5      	bne.n	8015b4c <__s2b+0x4c>
 8015b60:	f1a5 0408 	sub.w	r4, r5, #8
 8015b64:	444c      	add	r4, r9
 8015b66:	1b2d      	subs	r5, r5, r4
 8015b68:	1963      	adds	r3, r4, r5
 8015b6a:	42bb      	cmp	r3, r7
 8015b6c:	db04      	blt.n	8015b78 <__s2b+0x78>
 8015b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b72:	340a      	adds	r4, #10
 8015b74:	2509      	movs	r5, #9
 8015b76:	e7f6      	b.n	8015b66 <__s2b+0x66>
 8015b78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015b7c:	4601      	mov	r1, r0
 8015b7e:	3b30      	subs	r3, #48	; 0x30
 8015b80:	220a      	movs	r2, #10
 8015b82:	4630      	mov	r0, r6
 8015b84:	f7ff ff76 	bl	8015a74 <__multadd>
 8015b88:	e7ee      	b.n	8015b68 <__s2b+0x68>
 8015b8a:	bf00      	nop
 8015b8c:	0801843d 	.word	0x0801843d
 8015b90:	0801844e 	.word	0x0801844e

08015b94 <__hi0bits>:
 8015b94:	0c03      	lsrs	r3, r0, #16
 8015b96:	041b      	lsls	r3, r3, #16
 8015b98:	b9d3      	cbnz	r3, 8015bd0 <__hi0bits+0x3c>
 8015b9a:	0400      	lsls	r0, r0, #16
 8015b9c:	2310      	movs	r3, #16
 8015b9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015ba2:	bf04      	itt	eq
 8015ba4:	0200      	lsleq	r0, r0, #8
 8015ba6:	3308      	addeq	r3, #8
 8015ba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015bac:	bf04      	itt	eq
 8015bae:	0100      	lsleq	r0, r0, #4
 8015bb0:	3304      	addeq	r3, #4
 8015bb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015bb6:	bf04      	itt	eq
 8015bb8:	0080      	lsleq	r0, r0, #2
 8015bba:	3302      	addeq	r3, #2
 8015bbc:	2800      	cmp	r0, #0
 8015bbe:	db05      	blt.n	8015bcc <__hi0bits+0x38>
 8015bc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015bc4:	f103 0301 	add.w	r3, r3, #1
 8015bc8:	bf08      	it	eq
 8015bca:	2320      	moveq	r3, #32
 8015bcc:	4618      	mov	r0, r3
 8015bce:	4770      	bx	lr
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	e7e4      	b.n	8015b9e <__hi0bits+0xa>

08015bd4 <__lo0bits>:
 8015bd4:	6803      	ldr	r3, [r0, #0]
 8015bd6:	f013 0207 	ands.w	r2, r3, #7
 8015bda:	d00c      	beq.n	8015bf6 <__lo0bits+0x22>
 8015bdc:	07d9      	lsls	r1, r3, #31
 8015bde:	d422      	bmi.n	8015c26 <__lo0bits+0x52>
 8015be0:	079a      	lsls	r2, r3, #30
 8015be2:	bf49      	itett	mi
 8015be4:	085b      	lsrmi	r3, r3, #1
 8015be6:	089b      	lsrpl	r3, r3, #2
 8015be8:	6003      	strmi	r3, [r0, #0]
 8015bea:	2201      	movmi	r2, #1
 8015bec:	bf5c      	itt	pl
 8015bee:	6003      	strpl	r3, [r0, #0]
 8015bf0:	2202      	movpl	r2, #2
 8015bf2:	4610      	mov	r0, r2
 8015bf4:	4770      	bx	lr
 8015bf6:	b299      	uxth	r1, r3
 8015bf8:	b909      	cbnz	r1, 8015bfe <__lo0bits+0x2a>
 8015bfa:	0c1b      	lsrs	r3, r3, #16
 8015bfc:	2210      	movs	r2, #16
 8015bfe:	b2d9      	uxtb	r1, r3
 8015c00:	b909      	cbnz	r1, 8015c06 <__lo0bits+0x32>
 8015c02:	3208      	adds	r2, #8
 8015c04:	0a1b      	lsrs	r3, r3, #8
 8015c06:	0719      	lsls	r1, r3, #28
 8015c08:	bf04      	itt	eq
 8015c0a:	091b      	lsreq	r3, r3, #4
 8015c0c:	3204      	addeq	r2, #4
 8015c0e:	0799      	lsls	r1, r3, #30
 8015c10:	bf04      	itt	eq
 8015c12:	089b      	lsreq	r3, r3, #2
 8015c14:	3202      	addeq	r2, #2
 8015c16:	07d9      	lsls	r1, r3, #31
 8015c18:	d403      	bmi.n	8015c22 <__lo0bits+0x4e>
 8015c1a:	085b      	lsrs	r3, r3, #1
 8015c1c:	f102 0201 	add.w	r2, r2, #1
 8015c20:	d003      	beq.n	8015c2a <__lo0bits+0x56>
 8015c22:	6003      	str	r3, [r0, #0]
 8015c24:	e7e5      	b.n	8015bf2 <__lo0bits+0x1e>
 8015c26:	2200      	movs	r2, #0
 8015c28:	e7e3      	b.n	8015bf2 <__lo0bits+0x1e>
 8015c2a:	2220      	movs	r2, #32
 8015c2c:	e7e1      	b.n	8015bf2 <__lo0bits+0x1e>
	...

08015c30 <__i2b>:
 8015c30:	b510      	push	{r4, lr}
 8015c32:	460c      	mov	r4, r1
 8015c34:	2101      	movs	r1, #1
 8015c36:	f7ff febb 	bl	80159b0 <_Balloc>
 8015c3a:	4602      	mov	r2, r0
 8015c3c:	b928      	cbnz	r0, 8015c4a <__i2b+0x1a>
 8015c3e:	4b05      	ldr	r3, [pc, #20]	; (8015c54 <__i2b+0x24>)
 8015c40:	4805      	ldr	r0, [pc, #20]	; (8015c58 <__i2b+0x28>)
 8015c42:	f240 1145 	movw	r1, #325	; 0x145
 8015c46:	f001 fbfb 	bl	8017440 <__assert_func>
 8015c4a:	2301      	movs	r3, #1
 8015c4c:	6144      	str	r4, [r0, #20]
 8015c4e:	6103      	str	r3, [r0, #16]
 8015c50:	bd10      	pop	{r4, pc}
 8015c52:	bf00      	nop
 8015c54:	0801843d 	.word	0x0801843d
 8015c58:	0801844e 	.word	0x0801844e

08015c5c <__multiply>:
 8015c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c60:	4691      	mov	r9, r2
 8015c62:	690a      	ldr	r2, [r1, #16]
 8015c64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	bfb8      	it	lt
 8015c6c:	460b      	movlt	r3, r1
 8015c6e:	460c      	mov	r4, r1
 8015c70:	bfbc      	itt	lt
 8015c72:	464c      	movlt	r4, r9
 8015c74:	4699      	movlt	r9, r3
 8015c76:	6927      	ldr	r7, [r4, #16]
 8015c78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015c7c:	68a3      	ldr	r3, [r4, #8]
 8015c7e:	6861      	ldr	r1, [r4, #4]
 8015c80:	eb07 060a 	add.w	r6, r7, sl
 8015c84:	42b3      	cmp	r3, r6
 8015c86:	b085      	sub	sp, #20
 8015c88:	bfb8      	it	lt
 8015c8a:	3101      	addlt	r1, #1
 8015c8c:	f7ff fe90 	bl	80159b0 <_Balloc>
 8015c90:	b930      	cbnz	r0, 8015ca0 <__multiply+0x44>
 8015c92:	4602      	mov	r2, r0
 8015c94:	4b44      	ldr	r3, [pc, #272]	; (8015da8 <__multiply+0x14c>)
 8015c96:	4845      	ldr	r0, [pc, #276]	; (8015dac <__multiply+0x150>)
 8015c98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015c9c:	f001 fbd0 	bl	8017440 <__assert_func>
 8015ca0:	f100 0514 	add.w	r5, r0, #20
 8015ca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015ca8:	462b      	mov	r3, r5
 8015caa:	2200      	movs	r2, #0
 8015cac:	4543      	cmp	r3, r8
 8015cae:	d321      	bcc.n	8015cf4 <__multiply+0x98>
 8015cb0:	f104 0314 	add.w	r3, r4, #20
 8015cb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015cb8:	f109 0314 	add.w	r3, r9, #20
 8015cbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015cc0:	9202      	str	r2, [sp, #8]
 8015cc2:	1b3a      	subs	r2, r7, r4
 8015cc4:	3a15      	subs	r2, #21
 8015cc6:	f022 0203 	bic.w	r2, r2, #3
 8015cca:	3204      	adds	r2, #4
 8015ccc:	f104 0115 	add.w	r1, r4, #21
 8015cd0:	428f      	cmp	r7, r1
 8015cd2:	bf38      	it	cc
 8015cd4:	2204      	movcc	r2, #4
 8015cd6:	9201      	str	r2, [sp, #4]
 8015cd8:	9a02      	ldr	r2, [sp, #8]
 8015cda:	9303      	str	r3, [sp, #12]
 8015cdc:	429a      	cmp	r2, r3
 8015cde:	d80c      	bhi.n	8015cfa <__multiply+0x9e>
 8015ce0:	2e00      	cmp	r6, #0
 8015ce2:	dd03      	ble.n	8015cec <__multiply+0x90>
 8015ce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d05b      	beq.n	8015da4 <__multiply+0x148>
 8015cec:	6106      	str	r6, [r0, #16]
 8015cee:	b005      	add	sp, #20
 8015cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf4:	f843 2b04 	str.w	r2, [r3], #4
 8015cf8:	e7d8      	b.n	8015cac <__multiply+0x50>
 8015cfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8015cfe:	f1ba 0f00 	cmp.w	sl, #0
 8015d02:	d024      	beq.n	8015d4e <__multiply+0xf2>
 8015d04:	f104 0e14 	add.w	lr, r4, #20
 8015d08:	46a9      	mov	r9, r5
 8015d0a:	f04f 0c00 	mov.w	ip, #0
 8015d0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015d12:	f8d9 1000 	ldr.w	r1, [r9]
 8015d16:	fa1f fb82 	uxth.w	fp, r2
 8015d1a:	b289      	uxth	r1, r1
 8015d1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8015d20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015d24:	f8d9 2000 	ldr.w	r2, [r9]
 8015d28:	4461      	add	r1, ip
 8015d2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015d2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8015d32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015d36:	b289      	uxth	r1, r1
 8015d38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015d3c:	4577      	cmp	r7, lr
 8015d3e:	f849 1b04 	str.w	r1, [r9], #4
 8015d42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015d46:	d8e2      	bhi.n	8015d0e <__multiply+0xb2>
 8015d48:	9a01      	ldr	r2, [sp, #4]
 8015d4a:	f845 c002 	str.w	ip, [r5, r2]
 8015d4e:	9a03      	ldr	r2, [sp, #12]
 8015d50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015d54:	3304      	adds	r3, #4
 8015d56:	f1b9 0f00 	cmp.w	r9, #0
 8015d5a:	d021      	beq.n	8015da0 <__multiply+0x144>
 8015d5c:	6829      	ldr	r1, [r5, #0]
 8015d5e:	f104 0c14 	add.w	ip, r4, #20
 8015d62:	46ae      	mov	lr, r5
 8015d64:	f04f 0a00 	mov.w	sl, #0
 8015d68:	f8bc b000 	ldrh.w	fp, [ip]
 8015d6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015d70:	fb09 220b 	mla	r2, r9, fp, r2
 8015d74:	4452      	add	r2, sl
 8015d76:	b289      	uxth	r1, r1
 8015d78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015d7c:	f84e 1b04 	str.w	r1, [lr], #4
 8015d80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015d84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015d88:	f8be 1000 	ldrh.w	r1, [lr]
 8015d8c:	fb09 110a 	mla	r1, r9, sl, r1
 8015d90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015d94:	4567      	cmp	r7, ip
 8015d96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015d9a:	d8e5      	bhi.n	8015d68 <__multiply+0x10c>
 8015d9c:	9a01      	ldr	r2, [sp, #4]
 8015d9e:	50a9      	str	r1, [r5, r2]
 8015da0:	3504      	adds	r5, #4
 8015da2:	e799      	b.n	8015cd8 <__multiply+0x7c>
 8015da4:	3e01      	subs	r6, #1
 8015da6:	e79b      	b.n	8015ce0 <__multiply+0x84>
 8015da8:	0801843d 	.word	0x0801843d
 8015dac:	0801844e 	.word	0x0801844e

08015db0 <__pow5mult>:
 8015db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015db4:	4615      	mov	r5, r2
 8015db6:	f012 0203 	ands.w	r2, r2, #3
 8015dba:	4606      	mov	r6, r0
 8015dbc:	460f      	mov	r7, r1
 8015dbe:	d007      	beq.n	8015dd0 <__pow5mult+0x20>
 8015dc0:	4c25      	ldr	r4, [pc, #148]	; (8015e58 <__pow5mult+0xa8>)
 8015dc2:	3a01      	subs	r2, #1
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015dca:	f7ff fe53 	bl	8015a74 <__multadd>
 8015dce:	4607      	mov	r7, r0
 8015dd0:	10ad      	asrs	r5, r5, #2
 8015dd2:	d03d      	beq.n	8015e50 <__pow5mult+0xa0>
 8015dd4:	69f4      	ldr	r4, [r6, #28]
 8015dd6:	b97c      	cbnz	r4, 8015df8 <__pow5mult+0x48>
 8015dd8:	2010      	movs	r0, #16
 8015dda:	f7fd fefb 	bl	8013bd4 <malloc>
 8015dde:	4602      	mov	r2, r0
 8015de0:	61f0      	str	r0, [r6, #28]
 8015de2:	b928      	cbnz	r0, 8015df0 <__pow5mult+0x40>
 8015de4:	4b1d      	ldr	r3, [pc, #116]	; (8015e5c <__pow5mult+0xac>)
 8015de6:	481e      	ldr	r0, [pc, #120]	; (8015e60 <__pow5mult+0xb0>)
 8015de8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8015dec:	f001 fb28 	bl	8017440 <__assert_func>
 8015df0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015df4:	6004      	str	r4, [r0, #0]
 8015df6:	60c4      	str	r4, [r0, #12]
 8015df8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8015dfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015e00:	b94c      	cbnz	r4, 8015e16 <__pow5mult+0x66>
 8015e02:	f240 2171 	movw	r1, #625	; 0x271
 8015e06:	4630      	mov	r0, r6
 8015e08:	f7ff ff12 	bl	8015c30 <__i2b>
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8015e12:	4604      	mov	r4, r0
 8015e14:	6003      	str	r3, [r0, #0]
 8015e16:	f04f 0900 	mov.w	r9, #0
 8015e1a:	07eb      	lsls	r3, r5, #31
 8015e1c:	d50a      	bpl.n	8015e34 <__pow5mult+0x84>
 8015e1e:	4639      	mov	r1, r7
 8015e20:	4622      	mov	r2, r4
 8015e22:	4630      	mov	r0, r6
 8015e24:	f7ff ff1a 	bl	8015c5c <__multiply>
 8015e28:	4639      	mov	r1, r7
 8015e2a:	4680      	mov	r8, r0
 8015e2c:	4630      	mov	r0, r6
 8015e2e:	f7ff fdff 	bl	8015a30 <_Bfree>
 8015e32:	4647      	mov	r7, r8
 8015e34:	106d      	asrs	r5, r5, #1
 8015e36:	d00b      	beq.n	8015e50 <__pow5mult+0xa0>
 8015e38:	6820      	ldr	r0, [r4, #0]
 8015e3a:	b938      	cbnz	r0, 8015e4c <__pow5mult+0x9c>
 8015e3c:	4622      	mov	r2, r4
 8015e3e:	4621      	mov	r1, r4
 8015e40:	4630      	mov	r0, r6
 8015e42:	f7ff ff0b 	bl	8015c5c <__multiply>
 8015e46:	6020      	str	r0, [r4, #0]
 8015e48:	f8c0 9000 	str.w	r9, [r0]
 8015e4c:	4604      	mov	r4, r0
 8015e4e:	e7e4      	b.n	8015e1a <__pow5mult+0x6a>
 8015e50:	4638      	mov	r0, r7
 8015e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e56:	bf00      	nop
 8015e58:	08018598 	.word	0x08018598
 8015e5c:	080183ce 	.word	0x080183ce
 8015e60:	0801844e 	.word	0x0801844e

08015e64 <__lshift>:
 8015e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015e68:	460c      	mov	r4, r1
 8015e6a:	6849      	ldr	r1, [r1, #4]
 8015e6c:	6923      	ldr	r3, [r4, #16]
 8015e6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015e72:	68a3      	ldr	r3, [r4, #8]
 8015e74:	4607      	mov	r7, r0
 8015e76:	4691      	mov	r9, r2
 8015e78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015e7c:	f108 0601 	add.w	r6, r8, #1
 8015e80:	42b3      	cmp	r3, r6
 8015e82:	db0b      	blt.n	8015e9c <__lshift+0x38>
 8015e84:	4638      	mov	r0, r7
 8015e86:	f7ff fd93 	bl	80159b0 <_Balloc>
 8015e8a:	4605      	mov	r5, r0
 8015e8c:	b948      	cbnz	r0, 8015ea2 <__lshift+0x3e>
 8015e8e:	4602      	mov	r2, r0
 8015e90:	4b28      	ldr	r3, [pc, #160]	; (8015f34 <__lshift+0xd0>)
 8015e92:	4829      	ldr	r0, [pc, #164]	; (8015f38 <__lshift+0xd4>)
 8015e94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015e98:	f001 fad2 	bl	8017440 <__assert_func>
 8015e9c:	3101      	adds	r1, #1
 8015e9e:	005b      	lsls	r3, r3, #1
 8015ea0:	e7ee      	b.n	8015e80 <__lshift+0x1c>
 8015ea2:	2300      	movs	r3, #0
 8015ea4:	f100 0114 	add.w	r1, r0, #20
 8015ea8:	f100 0210 	add.w	r2, r0, #16
 8015eac:	4618      	mov	r0, r3
 8015eae:	4553      	cmp	r3, sl
 8015eb0:	db33      	blt.n	8015f1a <__lshift+0xb6>
 8015eb2:	6920      	ldr	r0, [r4, #16]
 8015eb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015eb8:	f104 0314 	add.w	r3, r4, #20
 8015ebc:	f019 091f 	ands.w	r9, r9, #31
 8015ec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015ec4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015ec8:	d02b      	beq.n	8015f22 <__lshift+0xbe>
 8015eca:	f1c9 0e20 	rsb	lr, r9, #32
 8015ece:	468a      	mov	sl, r1
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	6818      	ldr	r0, [r3, #0]
 8015ed4:	fa00 f009 	lsl.w	r0, r0, r9
 8015ed8:	4310      	orrs	r0, r2
 8015eda:	f84a 0b04 	str.w	r0, [sl], #4
 8015ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ee2:	459c      	cmp	ip, r3
 8015ee4:	fa22 f20e 	lsr.w	r2, r2, lr
 8015ee8:	d8f3      	bhi.n	8015ed2 <__lshift+0x6e>
 8015eea:	ebac 0304 	sub.w	r3, ip, r4
 8015eee:	3b15      	subs	r3, #21
 8015ef0:	f023 0303 	bic.w	r3, r3, #3
 8015ef4:	3304      	adds	r3, #4
 8015ef6:	f104 0015 	add.w	r0, r4, #21
 8015efa:	4584      	cmp	ip, r0
 8015efc:	bf38      	it	cc
 8015efe:	2304      	movcc	r3, #4
 8015f00:	50ca      	str	r2, [r1, r3]
 8015f02:	b10a      	cbz	r2, 8015f08 <__lshift+0xa4>
 8015f04:	f108 0602 	add.w	r6, r8, #2
 8015f08:	3e01      	subs	r6, #1
 8015f0a:	4638      	mov	r0, r7
 8015f0c:	612e      	str	r6, [r5, #16]
 8015f0e:	4621      	mov	r1, r4
 8015f10:	f7ff fd8e 	bl	8015a30 <_Bfree>
 8015f14:	4628      	mov	r0, r5
 8015f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f1a:	f842 0f04 	str.w	r0, [r2, #4]!
 8015f1e:	3301      	adds	r3, #1
 8015f20:	e7c5      	b.n	8015eae <__lshift+0x4a>
 8015f22:	3904      	subs	r1, #4
 8015f24:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f28:	f841 2f04 	str.w	r2, [r1, #4]!
 8015f2c:	459c      	cmp	ip, r3
 8015f2e:	d8f9      	bhi.n	8015f24 <__lshift+0xc0>
 8015f30:	e7ea      	b.n	8015f08 <__lshift+0xa4>
 8015f32:	bf00      	nop
 8015f34:	0801843d 	.word	0x0801843d
 8015f38:	0801844e 	.word	0x0801844e

08015f3c <__mcmp>:
 8015f3c:	b530      	push	{r4, r5, lr}
 8015f3e:	6902      	ldr	r2, [r0, #16]
 8015f40:	690c      	ldr	r4, [r1, #16]
 8015f42:	1b12      	subs	r2, r2, r4
 8015f44:	d10e      	bne.n	8015f64 <__mcmp+0x28>
 8015f46:	f100 0314 	add.w	r3, r0, #20
 8015f4a:	3114      	adds	r1, #20
 8015f4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015f50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015f54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015f58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015f5c:	42a5      	cmp	r5, r4
 8015f5e:	d003      	beq.n	8015f68 <__mcmp+0x2c>
 8015f60:	d305      	bcc.n	8015f6e <__mcmp+0x32>
 8015f62:	2201      	movs	r2, #1
 8015f64:	4610      	mov	r0, r2
 8015f66:	bd30      	pop	{r4, r5, pc}
 8015f68:	4283      	cmp	r3, r0
 8015f6a:	d3f3      	bcc.n	8015f54 <__mcmp+0x18>
 8015f6c:	e7fa      	b.n	8015f64 <__mcmp+0x28>
 8015f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8015f72:	e7f7      	b.n	8015f64 <__mcmp+0x28>

08015f74 <__mdiff>:
 8015f74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f78:	460c      	mov	r4, r1
 8015f7a:	4606      	mov	r6, r0
 8015f7c:	4611      	mov	r1, r2
 8015f7e:	4620      	mov	r0, r4
 8015f80:	4690      	mov	r8, r2
 8015f82:	f7ff ffdb 	bl	8015f3c <__mcmp>
 8015f86:	1e05      	subs	r5, r0, #0
 8015f88:	d110      	bne.n	8015fac <__mdiff+0x38>
 8015f8a:	4629      	mov	r1, r5
 8015f8c:	4630      	mov	r0, r6
 8015f8e:	f7ff fd0f 	bl	80159b0 <_Balloc>
 8015f92:	b930      	cbnz	r0, 8015fa2 <__mdiff+0x2e>
 8015f94:	4b3a      	ldr	r3, [pc, #232]	; (8016080 <__mdiff+0x10c>)
 8015f96:	4602      	mov	r2, r0
 8015f98:	f240 2137 	movw	r1, #567	; 0x237
 8015f9c:	4839      	ldr	r0, [pc, #228]	; (8016084 <__mdiff+0x110>)
 8015f9e:	f001 fa4f 	bl	8017440 <__assert_func>
 8015fa2:	2301      	movs	r3, #1
 8015fa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015fa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015fac:	bfa4      	itt	ge
 8015fae:	4643      	movge	r3, r8
 8015fb0:	46a0      	movge	r8, r4
 8015fb2:	4630      	mov	r0, r6
 8015fb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015fb8:	bfa6      	itte	ge
 8015fba:	461c      	movge	r4, r3
 8015fbc:	2500      	movge	r5, #0
 8015fbe:	2501      	movlt	r5, #1
 8015fc0:	f7ff fcf6 	bl	80159b0 <_Balloc>
 8015fc4:	b920      	cbnz	r0, 8015fd0 <__mdiff+0x5c>
 8015fc6:	4b2e      	ldr	r3, [pc, #184]	; (8016080 <__mdiff+0x10c>)
 8015fc8:	4602      	mov	r2, r0
 8015fca:	f240 2145 	movw	r1, #581	; 0x245
 8015fce:	e7e5      	b.n	8015f9c <__mdiff+0x28>
 8015fd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015fd4:	6926      	ldr	r6, [r4, #16]
 8015fd6:	60c5      	str	r5, [r0, #12]
 8015fd8:	f104 0914 	add.w	r9, r4, #20
 8015fdc:	f108 0514 	add.w	r5, r8, #20
 8015fe0:	f100 0e14 	add.w	lr, r0, #20
 8015fe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015fe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015fec:	f108 0210 	add.w	r2, r8, #16
 8015ff0:	46f2      	mov	sl, lr
 8015ff2:	2100      	movs	r1, #0
 8015ff4:	f859 3b04 	ldr.w	r3, [r9], #4
 8015ff8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015ffc:	fa11 f88b 	uxtah	r8, r1, fp
 8016000:	b299      	uxth	r1, r3
 8016002:	0c1b      	lsrs	r3, r3, #16
 8016004:	eba8 0801 	sub.w	r8, r8, r1
 8016008:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801600c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016010:	fa1f f888 	uxth.w	r8, r8
 8016014:	1419      	asrs	r1, r3, #16
 8016016:	454e      	cmp	r6, r9
 8016018:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801601c:	f84a 3b04 	str.w	r3, [sl], #4
 8016020:	d8e8      	bhi.n	8015ff4 <__mdiff+0x80>
 8016022:	1b33      	subs	r3, r6, r4
 8016024:	3b15      	subs	r3, #21
 8016026:	f023 0303 	bic.w	r3, r3, #3
 801602a:	3304      	adds	r3, #4
 801602c:	3415      	adds	r4, #21
 801602e:	42a6      	cmp	r6, r4
 8016030:	bf38      	it	cc
 8016032:	2304      	movcc	r3, #4
 8016034:	441d      	add	r5, r3
 8016036:	4473      	add	r3, lr
 8016038:	469e      	mov	lr, r3
 801603a:	462e      	mov	r6, r5
 801603c:	4566      	cmp	r6, ip
 801603e:	d30e      	bcc.n	801605e <__mdiff+0xea>
 8016040:	f10c 0203 	add.w	r2, ip, #3
 8016044:	1b52      	subs	r2, r2, r5
 8016046:	f022 0203 	bic.w	r2, r2, #3
 801604a:	3d03      	subs	r5, #3
 801604c:	45ac      	cmp	ip, r5
 801604e:	bf38      	it	cc
 8016050:	2200      	movcc	r2, #0
 8016052:	4413      	add	r3, r2
 8016054:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8016058:	b17a      	cbz	r2, 801607a <__mdiff+0x106>
 801605a:	6107      	str	r7, [r0, #16]
 801605c:	e7a4      	b.n	8015fa8 <__mdiff+0x34>
 801605e:	f856 8b04 	ldr.w	r8, [r6], #4
 8016062:	fa11 f288 	uxtah	r2, r1, r8
 8016066:	1414      	asrs	r4, r2, #16
 8016068:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801606c:	b292      	uxth	r2, r2
 801606e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016072:	f84e 2b04 	str.w	r2, [lr], #4
 8016076:	1421      	asrs	r1, r4, #16
 8016078:	e7e0      	b.n	801603c <__mdiff+0xc8>
 801607a:	3f01      	subs	r7, #1
 801607c:	e7ea      	b.n	8016054 <__mdiff+0xe0>
 801607e:	bf00      	nop
 8016080:	0801843d 	.word	0x0801843d
 8016084:	0801844e 	.word	0x0801844e

08016088 <__ulp>:
 8016088:	b082      	sub	sp, #8
 801608a:	ed8d 0b00 	vstr	d0, [sp]
 801608e:	9a01      	ldr	r2, [sp, #4]
 8016090:	4b0f      	ldr	r3, [pc, #60]	; (80160d0 <__ulp+0x48>)
 8016092:	4013      	ands	r3, r2
 8016094:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8016098:	2b00      	cmp	r3, #0
 801609a:	dc08      	bgt.n	80160ae <__ulp+0x26>
 801609c:	425b      	negs	r3, r3
 801609e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80160a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80160a6:	da04      	bge.n	80160b2 <__ulp+0x2a>
 80160a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80160ac:	4113      	asrs	r3, r2
 80160ae:	2200      	movs	r2, #0
 80160b0:	e008      	b.n	80160c4 <__ulp+0x3c>
 80160b2:	f1a2 0314 	sub.w	r3, r2, #20
 80160b6:	2b1e      	cmp	r3, #30
 80160b8:	bfda      	itte	le
 80160ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80160be:	40da      	lsrle	r2, r3
 80160c0:	2201      	movgt	r2, #1
 80160c2:	2300      	movs	r3, #0
 80160c4:	4619      	mov	r1, r3
 80160c6:	4610      	mov	r0, r2
 80160c8:	ec41 0b10 	vmov	d0, r0, r1
 80160cc:	b002      	add	sp, #8
 80160ce:	4770      	bx	lr
 80160d0:	7ff00000 	.word	0x7ff00000

080160d4 <__b2d>:
 80160d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160d8:	6906      	ldr	r6, [r0, #16]
 80160da:	f100 0814 	add.w	r8, r0, #20
 80160de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80160e2:	1f37      	subs	r7, r6, #4
 80160e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80160e8:	4610      	mov	r0, r2
 80160ea:	f7ff fd53 	bl	8015b94 <__hi0bits>
 80160ee:	f1c0 0320 	rsb	r3, r0, #32
 80160f2:	280a      	cmp	r0, #10
 80160f4:	600b      	str	r3, [r1, #0]
 80160f6:	491b      	ldr	r1, [pc, #108]	; (8016164 <__b2d+0x90>)
 80160f8:	dc15      	bgt.n	8016126 <__b2d+0x52>
 80160fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80160fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8016102:	45b8      	cmp	r8, r7
 8016104:	ea43 0501 	orr.w	r5, r3, r1
 8016108:	bf34      	ite	cc
 801610a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801610e:	2300      	movcs	r3, #0
 8016110:	3015      	adds	r0, #21
 8016112:	fa02 f000 	lsl.w	r0, r2, r0
 8016116:	fa23 f30c 	lsr.w	r3, r3, ip
 801611a:	4303      	orrs	r3, r0
 801611c:	461c      	mov	r4, r3
 801611e:	ec45 4b10 	vmov	d0, r4, r5
 8016122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016126:	45b8      	cmp	r8, r7
 8016128:	bf3a      	itte	cc
 801612a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801612e:	f1a6 0708 	subcc.w	r7, r6, #8
 8016132:	2300      	movcs	r3, #0
 8016134:	380b      	subs	r0, #11
 8016136:	d012      	beq.n	801615e <__b2d+0x8a>
 8016138:	f1c0 0120 	rsb	r1, r0, #32
 801613c:	fa23 f401 	lsr.w	r4, r3, r1
 8016140:	4082      	lsls	r2, r0
 8016142:	4322      	orrs	r2, r4
 8016144:	4547      	cmp	r7, r8
 8016146:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801614a:	bf8c      	ite	hi
 801614c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8016150:	2200      	movls	r2, #0
 8016152:	4083      	lsls	r3, r0
 8016154:	40ca      	lsrs	r2, r1
 8016156:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801615a:	4313      	orrs	r3, r2
 801615c:	e7de      	b.n	801611c <__b2d+0x48>
 801615e:	ea42 0501 	orr.w	r5, r2, r1
 8016162:	e7db      	b.n	801611c <__b2d+0x48>
 8016164:	3ff00000 	.word	0x3ff00000

08016168 <__d2b>:
 8016168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801616c:	460f      	mov	r7, r1
 801616e:	2101      	movs	r1, #1
 8016170:	ec59 8b10 	vmov	r8, r9, d0
 8016174:	4616      	mov	r6, r2
 8016176:	f7ff fc1b 	bl	80159b0 <_Balloc>
 801617a:	4604      	mov	r4, r0
 801617c:	b930      	cbnz	r0, 801618c <__d2b+0x24>
 801617e:	4602      	mov	r2, r0
 8016180:	4b24      	ldr	r3, [pc, #144]	; (8016214 <__d2b+0xac>)
 8016182:	4825      	ldr	r0, [pc, #148]	; (8016218 <__d2b+0xb0>)
 8016184:	f240 310f 	movw	r1, #783	; 0x30f
 8016188:	f001 f95a 	bl	8017440 <__assert_func>
 801618c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8016190:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016194:	bb2d      	cbnz	r5, 80161e2 <__d2b+0x7a>
 8016196:	9301      	str	r3, [sp, #4]
 8016198:	f1b8 0300 	subs.w	r3, r8, #0
 801619c:	d026      	beq.n	80161ec <__d2b+0x84>
 801619e:	4668      	mov	r0, sp
 80161a0:	9300      	str	r3, [sp, #0]
 80161a2:	f7ff fd17 	bl	8015bd4 <__lo0bits>
 80161a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80161aa:	b1e8      	cbz	r0, 80161e8 <__d2b+0x80>
 80161ac:	f1c0 0320 	rsb	r3, r0, #32
 80161b0:	fa02 f303 	lsl.w	r3, r2, r3
 80161b4:	430b      	orrs	r3, r1
 80161b6:	40c2      	lsrs	r2, r0
 80161b8:	6163      	str	r3, [r4, #20]
 80161ba:	9201      	str	r2, [sp, #4]
 80161bc:	9b01      	ldr	r3, [sp, #4]
 80161be:	61a3      	str	r3, [r4, #24]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	bf14      	ite	ne
 80161c4:	2202      	movne	r2, #2
 80161c6:	2201      	moveq	r2, #1
 80161c8:	6122      	str	r2, [r4, #16]
 80161ca:	b1bd      	cbz	r5, 80161fc <__d2b+0x94>
 80161cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80161d0:	4405      	add	r5, r0
 80161d2:	603d      	str	r5, [r7, #0]
 80161d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80161d8:	6030      	str	r0, [r6, #0]
 80161da:	4620      	mov	r0, r4
 80161dc:	b003      	add	sp, #12
 80161de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80161e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80161e6:	e7d6      	b.n	8016196 <__d2b+0x2e>
 80161e8:	6161      	str	r1, [r4, #20]
 80161ea:	e7e7      	b.n	80161bc <__d2b+0x54>
 80161ec:	a801      	add	r0, sp, #4
 80161ee:	f7ff fcf1 	bl	8015bd4 <__lo0bits>
 80161f2:	9b01      	ldr	r3, [sp, #4]
 80161f4:	6163      	str	r3, [r4, #20]
 80161f6:	3020      	adds	r0, #32
 80161f8:	2201      	movs	r2, #1
 80161fa:	e7e5      	b.n	80161c8 <__d2b+0x60>
 80161fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016200:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016204:	6038      	str	r0, [r7, #0]
 8016206:	6918      	ldr	r0, [r3, #16]
 8016208:	f7ff fcc4 	bl	8015b94 <__hi0bits>
 801620c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016210:	e7e2      	b.n	80161d8 <__d2b+0x70>
 8016212:	bf00      	nop
 8016214:	0801843d 	.word	0x0801843d
 8016218:	0801844e 	.word	0x0801844e

0801621c <__ratio>:
 801621c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016220:	4688      	mov	r8, r1
 8016222:	4669      	mov	r1, sp
 8016224:	4681      	mov	r9, r0
 8016226:	f7ff ff55 	bl	80160d4 <__b2d>
 801622a:	a901      	add	r1, sp, #4
 801622c:	4640      	mov	r0, r8
 801622e:	ec55 4b10 	vmov	r4, r5, d0
 8016232:	ee10 aa10 	vmov	sl, s0
 8016236:	f7ff ff4d 	bl	80160d4 <__b2d>
 801623a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801623e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016242:	1ad2      	subs	r2, r2, r3
 8016244:	e9dd 3100 	ldrd	r3, r1, [sp]
 8016248:	1a5b      	subs	r3, r3, r1
 801624a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 801624e:	ec57 6b10 	vmov	r6, r7, d0
 8016252:	2b00      	cmp	r3, #0
 8016254:	bfd6      	itet	le
 8016256:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801625a:	462a      	movgt	r2, r5
 801625c:	463a      	movle	r2, r7
 801625e:	46ab      	mov	fp, r5
 8016260:	bfd6      	itet	le
 8016262:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8016266:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801626a:	ee00 3a90 	vmovle	s1, r3
 801626e:	ec4b ab17 	vmov	d7, sl, fp
 8016272:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8016276:	b003      	add	sp, #12
 8016278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801627c <__copybits>:
 801627c:	3901      	subs	r1, #1
 801627e:	b570      	push	{r4, r5, r6, lr}
 8016280:	1149      	asrs	r1, r1, #5
 8016282:	6914      	ldr	r4, [r2, #16]
 8016284:	3101      	adds	r1, #1
 8016286:	f102 0314 	add.w	r3, r2, #20
 801628a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801628e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016292:	1f05      	subs	r5, r0, #4
 8016294:	42a3      	cmp	r3, r4
 8016296:	d30c      	bcc.n	80162b2 <__copybits+0x36>
 8016298:	1aa3      	subs	r3, r4, r2
 801629a:	3b11      	subs	r3, #17
 801629c:	f023 0303 	bic.w	r3, r3, #3
 80162a0:	3211      	adds	r2, #17
 80162a2:	42a2      	cmp	r2, r4
 80162a4:	bf88      	it	hi
 80162a6:	2300      	movhi	r3, #0
 80162a8:	4418      	add	r0, r3
 80162aa:	2300      	movs	r3, #0
 80162ac:	4288      	cmp	r0, r1
 80162ae:	d305      	bcc.n	80162bc <__copybits+0x40>
 80162b0:	bd70      	pop	{r4, r5, r6, pc}
 80162b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80162b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80162ba:	e7eb      	b.n	8016294 <__copybits+0x18>
 80162bc:	f840 3b04 	str.w	r3, [r0], #4
 80162c0:	e7f4      	b.n	80162ac <__copybits+0x30>

080162c2 <__any_on>:
 80162c2:	f100 0214 	add.w	r2, r0, #20
 80162c6:	6900      	ldr	r0, [r0, #16]
 80162c8:	114b      	asrs	r3, r1, #5
 80162ca:	4298      	cmp	r0, r3
 80162cc:	b510      	push	{r4, lr}
 80162ce:	db11      	blt.n	80162f4 <__any_on+0x32>
 80162d0:	dd0a      	ble.n	80162e8 <__any_on+0x26>
 80162d2:	f011 011f 	ands.w	r1, r1, #31
 80162d6:	d007      	beq.n	80162e8 <__any_on+0x26>
 80162d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80162dc:	fa24 f001 	lsr.w	r0, r4, r1
 80162e0:	fa00 f101 	lsl.w	r1, r0, r1
 80162e4:	428c      	cmp	r4, r1
 80162e6:	d10b      	bne.n	8016300 <__any_on+0x3e>
 80162e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80162ec:	4293      	cmp	r3, r2
 80162ee:	d803      	bhi.n	80162f8 <__any_on+0x36>
 80162f0:	2000      	movs	r0, #0
 80162f2:	bd10      	pop	{r4, pc}
 80162f4:	4603      	mov	r3, r0
 80162f6:	e7f7      	b.n	80162e8 <__any_on+0x26>
 80162f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80162fc:	2900      	cmp	r1, #0
 80162fe:	d0f5      	beq.n	80162ec <__any_on+0x2a>
 8016300:	2001      	movs	r0, #1
 8016302:	e7f6      	b.n	80162f2 <__any_on+0x30>

08016304 <sulp>:
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	4604      	mov	r4, r0
 8016308:	460d      	mov	r5, r1
 801630a:	4616      	mov	r6, r2
 801630c:	ec45 4b10 	vmov	d0, r4, r5
 8016310:	f7ff feba 	bl	8016088 <__ulp>
 8016314:	b17e      	cbz	r6, 8016336 <sulp+0x32>
 8016316:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801631a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801631e:	2b00      	cmp	r3, #0
 8016320:	dd09      	ble.n	8016336 <sulp+0x32>
 8016322:	051b      	lsls	r3, r3, #20
 8016324:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016328:	2000      	movs	r0, #0
 801632a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801632e:	ec41 0b17 	vmov	d7, r0, r1
 8016332:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016336:	bd70      	pop	{r4, r5, r6, pc}

08016338 <_strtod_l>:
 8016338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801633c:	ed2d 8b0e 	vpush	{d8-d14}
 8016340:	b097      	sub	sp, #92	; 0x5c
 8016342:	4604      	mov	r4, r0
 8016344:	920d      	str	r2, [sp, #52]	; 0x34
 8016346:	2200      	movs	r2, #0
 8016348:	9212      	str	r2, [sp, #72]	; 0x48
 801634a:	468a      	mov	sl, r1
 801634c:	f04f 0800 	mov.w	r8, #0
 8016350:	f04f 0900 	mov.w	r9, #0
 8016354:	460a      	mov	r2, r1
 8016356:	9211      	str	r2, [sp, #68]	; 0x44
 8016358:	7811      	ldrb	r1, [r2, #0]
 801635a:	292b      	cmp	r1, #43	; 0x2b
 801635c:	d04c      	beq.n	80163f8 <_strtod_l+0xc0>
 801635e:	d839      	bhi.n	80163d4 <_strtod_l+0x9c>
 8016360:	290d      	cmp	r1, #13
 8016362:	d833      	bhi.n	80163cc <_strtod_l+0x94>
 8016364:	2908      	cmp	r1, #8
 8016366:	d833      	bhi.n	80163d0 <_strtod_l+0x98>
 8016368:	2900      	cmp	r1, #0
 801636a:	d03c      	beq.n	80163e6 <_strtod_l+0xae>
 801636c:	2200      	movs	r2, #0
 801636e:	9208      	str	r2, [sp, #32]
 8016370:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016372:	7832      	ldrb	r2, [r6, #0]
 8016374:	2a30      	cmp	r2, #48	; 0x30
 8016376:	f040 80b8 	bne.w	80164ea <_strtod_l+0x1b2>
 801637a:	7872      	ldrb	r2, [r6, #1]
 801637c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8016380:	2a58      	cmp	r2, #88	; 0x58
 8016382:	d170      	bne.n	8016466 <_strtod_l+0x12e>
 8016384:	9302      	str	r3, [sp, #8]
 8016386:	9b08      	ldr	r3, [sp, #32]
 8016388:	9301      	str	r3, [sp, #4]
 801638a:	ab12      	add	r3, sp, #72	; 0x48
 801638c:	9300      	str	r3, [sp, #0]
 801638e:	4a91      	ldr	r2, [pc, #580]	; (80165d4 <_strtod_l+0x29c>)
 8016390:	ab13      	add	r3, sp, #76	; 0x4c
 8016392:	a911      	add	r1, sp, #68	; 0x44
 8016394:	4620      	mov	r0, r4
 8016396:	f001 f8ef 	bl	8017578 <__gethex>
 801639a:	f010 070f 	ands.w	r7, r0, #15
 801639e:	4605      	mov	r5, r0
 80163a0:	d005      	beq.n	80163ae <_strtod_l+0x76>
 80163a2:	2f06      	cmp	r7, #6
 80163a4:	d12a      	bne.n	80163fc <_strtod_l+0xc4>
 80163a6:	3601      	adds	r6, #1
 80163a8:	2300      	movs	r3, #0
 80163aa:	9611      	str	r6, [sp, #68]	; 0x44
 80163ac:	9308      	str	r3, [sp, #32]
 80163ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	f040 8555 	bne.w	8016e60 <_strtod_l+0xb28>
 80163b6:	9b08      	ldr	r3, [sp, #32]
 80163b8:	ec49 8b10 	vmov	d0, r8, r9
 80163bc:	b1cb      	cbz	r3, 80163f2 <_strtod_l+0xba>
 80163be:	eeb1 0b40 	vneg.f64	d0, d0
 80163c2:	b017      	add	sp, #92	; 0x5c
 80163c4:	ecbd 8b0e 	vpop	{d8-d14}
 80163c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163cc:	2920      	cmp	r1, #32
 80163ce:	d1cd      	bne.n	801636c <_strtod_l+0x34>
 80163d0:	3201      	adds	r2, #1
 80163d2:	e7c0      	b.n	8016356 <_strtod_l+0x1e>
 80163d4:	292d      	cmp	r1, #45	; 0x2d
 80163d6:	d1c9      	bne.n	801636c <_strtod_l+0x34>
 80163d8:	2101      	movs	r1, #1
 80163da:	9108      	str	r1, [sp, #32]
 80163dc:	1c51      	adds	r1, r2, #1
 80163de:	9111      	str	r1, [sp, #68]	; 0x44
 80163e0:	7852      	ldrb	r2, [r2, #1]
 80163e2:	2a00      	cmp	r2, #0
 80163e4:	d1c4      	bne.n	8016370 <_strtod_l+0x38>
 80163e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80163e8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	f040 8535 	bne.w	8016e5c <_strtod_l+0xb24>
 80163f2:	ec49 8b10 	vmov	d0, r8, r9
 80163f6:	e7e4      	b.n	80163c2 <_strtod_l+0x8a>
 80163f8:	2100      	movs	r1, #0
 80163fa:	e7ee      	b.n	80163da <_strtod_l+0xa2>
 80163fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80163fe:	b13a      	cbz	r2, 8016410 <_strtod_l+0xd8>
 8016400:	2135      	movs	r1, #53	; 0x35
 8016402:	a814      	add	r0, sp, #80	; 0x50
 8016404:	f7ff ff3a 	bl	801627c <__copybits>
 8016408:	9912      	ldr	r1, [sp, #72]	; 0x48
 801640a:	4620      	mov	r0, r4
 801640c:	f7ff fb10 	bl	8015a30 <_Bfree>
 8016410:	1e7b      	subs	r3, r7, #1
 8016412:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016414:	2b04      	cmp	r3, #4
 8016416:	d806      	bhi.n	8016426 <_strtod_l+0xee>
 8016418:	e8df f003 	tbb	[pc, r3]
 801641c:	201d0314 	.word	0x201d0314
 8016420:	14          	.byte	0x14
 8016421:	00          	.byte	0x00
 8016422:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8016426:	05eb      	lsls	r3, r5, #23
 8016428:	bf48      	it	mi
 801642a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801642e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016432:	0d1b      	lsrs	r3, r3, #20
 8016434:	051b      	lsls	r3, r3, #20
 8016436:	2b00      	cmp	r3, #0
 8016438:	d1b9      	bne.n	80163ae <_strtod_l+0x76>
 801643a:	f7fe fc47 	bl	8014ccc <__errno>
 801643e:	2322      	movs	r3, #34	; 0x22
 8016440:	6003      	str	r3, [r0, #0]
 8016442:	e7b4      	b.n	80163ae <_strtod_l+0x76>
 8016444:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8016448:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801644c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016450:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8016454:	e7e7      	b.n	8016426 <_strtod_l+0xee>
 8016456:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80165dc <_strtod_l+0x2a4>
 801645a:	e7e4      	b.n	8016426 <_strtod_l+0xee>
 801645c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8016460:	f04f 38ff 	mov.w	r8, #4294967295
 8016464:	e7df      	b.n	8016426 <_strtod_l+0xee>
 8016466:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016468:	1c5a      	adds	r2, r3, #1
 801646a:	9211      	str	r2, [sp, #68]	; 0x44
 801646c:	785b      	ldrb	r3, [r3, #1]
 801646e:	2b30      	cmp	r3, #48	; 0x30
 8016470:	d0f9      	beq.n	8016466 <_strtod_l+0x12e>
 8016472:	2b00      	cmp	r3, #0
 8016474:	d09b      	beq.n	80163ae <_strtod_l+0x76>
 8016476:	2301      	movs	r3, #1
 8016478:	9306      	str	r3, [sp, #24]
 801647a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801647c:	9309      	str	r3, [sp, #36]	; 0x24
 801647e:	2300      	movs	r3, #0
 8016480:	9305      	str	r3, [sp, #20]
 8016482:	9307      	str	r3, [sp, #28]
 8016484:	461e      	mov	r6, r3
 8016486:	220a      	movs	r2, #10
 8016488:	9811      	ldr	r0, [sp, #68]	; 0x44
 801648a:	7805      	ldrb	r5, [r0, #0]
 801648c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8016490:	b2d9      	uxtb	r1, r3
 8016492:	2909      	cmp	r1, #9
 8016494:	d92b      	bls.n	80164ee <_strtod_l+0x1b6>
 8016496:	4950      	ldr	r1, [pc, #320]	; (80165d8 <_strtod_l+0x2a0>)
 8016498:	2201      	movs	r2, #1
 801649a:	f000 ffa9 	bl	80173f0 <strncmp>
 801649e:	2800      	cmp	r0, #0
 80164a0:	d035      	beq.n	801650e <_strtod_l+0x1d6>
 80164a2:	2000      	movs	r0, #0
 80164a4:	462a      	mov	r2, r5
 80164a6:	4633      	mov	r3, r6
 80164a8:	4683      	mov	fp, r0
 80164aa:	4601      	mov	r1, r0
 80164ac:	2a65      	cmp	r2, #101	; 0x65
 80164ae:	d001      	beq.n	80164b4 <_strtod_l+0x17c>
 80164b0:	2a45      	cmp	r2, #69	; 0x45
 80164b2:	d118      	bne.n	80164e6 <_strtod_l+0x1ae>
 80164b4:	b91b      	cbnz	r3, 80164be <_strtod_l+0x186>
 80164b6:	9b06      	ldr	r3, [sp, #24]
 80164b8:	4303      	orrs	r3, r0
 80164ba:	d094      	beq.n	80163e6 <_strtod_l+0xae>
 80164bc:	2300      	movs	r3, #0
 80164be:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 80164c2:	f10a 0201 	add.w	r2, sl, #1
 80164c6:	9211      	str	r2, [sp, #68]	; 0x44
 80164c8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80164cc:	2a2b      	cmp	r2, #43	; 0x2b
 80164ce:	d075      	beq.n	80165bc <_strtod_l+0x284>
 80164d0:	2a2d      	cmp	r2, #45	; 0x2d
 80164d2:	d07b      	beq.n	80165cc <_strtod_l+0x294>
 80164d4:	f04f 0e00 	mov.w	lr, #0
 80164d8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80164dc:	2d09      	cmp	r5, #9
 80164de:	f240 8083 	bls.w	80165e8 <_strtod_l+0x2b0>
 80164e2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 80164e6:	2500      	movs	r5, #0
 80164e8:	e09e      	b.n	8016628 <_strtod_l+0x2f0>
 80164ea:	2300      	movs	r3, #0
 80164ec:	e7c4      	b.n	8016478 <_strtod_l+0x140>
 80164ee:	2e08      	cmp	r6, #8
 80164f0:	bfd5      	itete	le
 80164f2:	9907      	ldrle	r1, [sp, #28]
 80164f4:	9905      	ldrgt	r1, [sp, #20]
 80164f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80164fa:	fb02 3301 	mlagt	r3, r2, r1, r3
 80164fe:	f100 0001 	add.w	r0, r0, #1
 8016502:	bfd4      	ite	le
 8016504:	9307      	strle	r3, [sp, #28]
 8016506:	9305      	strgt	r3, [sp, #20]
 8016508:	3601      	adds	r6, #1
 801650a:	9011      	str	r0, [sp, #68]	; 0x44
 801650c:	e7bc      	b.n	8016488 <_strtod_l+0x150>
 801650e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016510:	1c5a      	adds	r2, r3, #1
 8016512:	9211      	str	r2, [sp, #68]	; 0x44
 8016514:	785a      	ldrb	r2, [r3, #1]
 8016516:	b3ae      	cbz	r6, 8016584 <_strtod_l+0x24c>
 8016518:	4683      	mov	fp, r0
 801651a:	4633      	mov	r3, r6
 801651c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8016520:	2909      	cmp	r1, #9
 8016522:	d912      	bls.n	801654a <_strtod_l+0x212>
 8016524:	2101      	movs	r1, #1
 8016526:	e7c1      	b.n	80164ac <_strtod_l+0x174>
 8016528:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801652a:	1c5a      	adds	r2, r3, #1
 801652c:	9211      	str	r2, [sp, #68]	; 0x44
 801652e:	785a      	ldrb	r2, [r3, #1]
 8016530:	3001      	adds	r0, #1
 8016532:	2a30      	cmp	r2, #48	; 0x30
 8016534:	d0f8      	beq.n	8016528 <_strtod_l+0x1f0>
 8016536:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801653a:	2b08      	cmp	r3, #8
 801653c:	f200 8495 	bhi.w	8016e6a <_strtod_l+0xb32>
 8016540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016542:	9309      	str	r3, [sp, #36]	; 0x24
 8016544:	4683      	mov	fp, r0
 8016546:	2000      	movs	r0, #0
 8016548:	4603      	mov	r3, r0
 801654a:	3a30      	subs	r2, #48	; 0x30
 801654c:	f100 0101 	add.w	r1, r0, #1
 8016550:	d012      	beq.n	8016578 <_strtod_l+0x240>
 8016552:	448b      	add	fp, r1
 8016554:	eb00 0c03 	add.w	ip, r0, r3
 8016558:	4619      	mov	r1, r3
 801655a:	250a      	movs	r5, #10
 801655c:	4561      	cmp	r1, ip
 801655e:	d113      	bne.n	8016588 <_strtod_l+0x250>
 8016560:	1819      	adds	r1, r3, r0
 8016562:	2908      	cmp	r1, #8
 8016564:	f103 0301 	add.w	r3, r3, #1
 8016568:	4403      	add	r3, r0
 801656a:	dc1b      	bgt.n	80165a4 <_strtod_l+0x26c>
 801656c:	9807      	ldr	r0, [sp, #28]
 801656e:	210a      	movs	r1, #10
 8016570:	fb01 2200 	mla	r2, r1, r0, r2
 8016574:	9207      	str	r2, [sp, #28]
 8016576:	2100      	movs	r1, #0
 8016578:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801657a:	1c50      	adds	r0, r2, #1
 801657c:	9011      	str	r0, [sp, #68]	; 0x44
 801657e:	7852      	ldrb	r2, [r2, #1]
 8016580:	4608      	mov	r0, r1
 8016582:	e7cb      	b.n	801651c <_strtod_l+0x1e4>
 8016584:	4630      	mov	r0, r6
 8016586:	e7d4      	b.n	8016532 <_strtod_l+0x1fa>
 8016588:	2908      	cmp	r1, #8
 801658a:	f101 0101 	add.w	r1, r1, #1
 801658e:	dc03      	bgt.n	8016598 <_strtod_l+0x260>
 8016590:	9f07      	ldr	r7, [sp, #28]
 8016592:	436f      	muls	r7, r5
 8016594:	9707      	str	r7, [sp, #28]
 8016596:	e7e1      	b.n	801655c <_strtod_l+0x224>
 8016598:	2910      	cmp	r1, #16
 801659a:	bfde      	ittt	le
 801659c:	9f05      	ldrle	r7, [sp, #20]
 801659e:	436f      	mulle	r7, r5
 80165a0:	9705      	strle	r7, [sp, #20]
 80165a2:	e7db      	b.n	801655c <_strtod_l+0x224>
 80165a4:	2b10      	cmp	r3, #16
 80165a6:	bfdf      	itttt	le
 80165a8:	9805      	ldrle	r0, [sp, #20]
 80165aa:	210a      	movle	r1, #10
 80165ac:	fb01 2200 	mlale	r2, r1, r0, r2
 80165b0:	9205      	strle	r2, [sp, #20]
 80165b2:	e7e0      	b.n	8016576 <_strtod_l+0x23e>
 80165b4:	f04f 0b00 	mov.w	fp, #0
 80165b8:	2101      	movs	r1, #1
 80165ba:	e77c      	b.n	80164b6 <_strtod_l+0x17e>
 80165bc:	f04f 0e00 	mov.w	lr, #0
 80165c0:	f10a 0202 	add.w	r2, sl, #2
 80165c4:	9211      	str	r2, [sp, #68]	; 0x44
 80165c6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80165ca:	e785      	b.n	80164d8 <_strtod_l+0x1a0>
 80165cc:	f04f 0e01 	mov.w	lr, #1
 80165d0:	e7f6      	b.n	80165c0 <_strtod_l+0x288>
 80165d2:	bf00      	nop
 80165d4:	080185a8 	.word	0x080185a8
 80165d8:	080185a4 	.word	0x080185a4
 80165dc:	7ff00000 	.word	0x7ff00000
 80165e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80165e2:	1c55      	adds	r5, r2, #1
 80165e4:	9511      	str	r5, [sp, #68]	; 0x44
 80165e6:	7852      	ldrb	r2, [r2, #1]
 80165e8:	2a30      	cmp	r2, #48	; 0x30
 80165ea:	d0f9      	beq.n	80165e0 <_strtod_l+0x2a8>
 80165ec:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80165f0:	2d08      	cmp	r5, #8
 80165f2:	f63f af78 	bhi.w	80164e6 <_strtod_l+0x1ae>
 80165f6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80165fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80165fc:	920a      	str	r2, [sp, #40]	; 0x28
 80165fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016600:	1c55      	adds	r5, r2, #1
 8016602:	9511      	str	r5, [sp, #68]	; 0x44
 8016604:	7852      	ldrb	r2, [r2, #1]
 8016606:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 801660a:	2f09      	cmp	r7, #9
 801660c:	d937      	bls.n	801667e <_strtod_l+0x346>
 801660e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8016610:	1bed      	subs	r5, r5, r7
 8016612:	2d08      	cmp	r5, #8
 8016614:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8016618:	dc02      	bgt.n	8016620 <_strtod_l+0x2e8>
 801661a:	4565      	cmp	r5, ip
 801661c:	bfa8      	it	ge
 801661e:	4665      	movge	r5, ip
 8016620:	f1be 0f00 	cmp.w	lr, #0
 8016624:	d000      	beq.n	8016628 <_strtod_l+0x2f0>
 8016626:	426d      	negs	r5, r5
 8016628:	2b00      	cmp	r3, #0
 801662a:	d14d      	bne.n	80166c8 <_strtod_l+0x390>
 801662c:	9b06      	ldr	r3, [sp, #24]
 801662e:	4303      	orrs	r3, r0
 8016630:	f47f aebd 	bne.w	80163ae <_strtod_l+0x76>
 8016634:	2900      	cmp	r1, #0
 8016636:	f47f aed6 	bne.w	80163e6 <_strtod_l+0xae>
 801663a:	2a69      	cmp	r2, #105	; 0x69
 801663c:	d027      	beq.n	801668e <_strtod_l+0x356>
 801663e:	dc24      	bgt.n	801668a <_strtod_l+0x352>
 8016640:	2a49      	cmp	r2, #73	; 0x49
 8016642:	d024      	beq.n	801668e <_strtod_l+0x356>
 8016644:	2a4e      	cmp	r2, #78	; 0x4e
 8016646:	f47f aece 	bne.w	80163e6 <_strtod_l+0xae>
 801664a:	4995      	ldr	r1, [pc, #596]	; (80168a0 <_strtod_l+0x568>)
 801664c:	a811      	add	r0, sp, #68	; 0x44
 801664e:	f001 f9d3 	bl	80179f8 <__match>
 8016652:	2800      	cmp	r0, #0
 8016654:	f43f aec7 	beq.w	80163e6 <_strtod_l+0xae>
 8016658:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801665a:	781b      	ldrb	r3, [r3, #0]
 801665c:	2b28      	cmp	r3, #40	; 0x28
 801665e:	d12d      	bne.n	80166bc <_strtod_l+0x384>
 8016660:	4990      	ldr	r1, [pc, #576]	; (80168a4 <_strtod_l+0x56c>)
 8016662:	aa14      	add	r2, sp, #80	; 0x50
 8016664:	a811      	add	r0, sp, #68	; 0x44
 8016666:	f001 f9db 	bl	8017a20 <__hexnan>
 801666a:	2805      	cmp	r0, #5
 801666c:	d126      	bne.n	80166bc <_strtod_l+0x384>
 801666e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016670:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8016674:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016678:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801667c:	e697      	b.n	80163ae <_strtod_l+0x76>
 801667e:	250a      	movs	r5, #10
 8016680:	fb05 2c0c 	mla	ip, r5, ip, r2
 8016684:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8016688:	e7b9      	b.n	80165fe <_strtod_l+0x2c6>
 801668a:	2a6e      	cmp	r2, #110	; 0x6e
 801668c:	e7db      	b.n	8016646 <_strtod_l+0x30e>
 801668e:	4986      	ldr	r1, [pc, #536]	; (80168a8 <_strtod_l+0x570>)
 8016690:	a811      	add	r0, sp, #68	; 0x44
 8016692:	f001 f9b1 	bl	80179f8 <__match>
 8016696:	2800      	cmp	r0, #0
 8016698:	f43f aea5 	beq.w	80163e6 <_strtod_l+0xae>
 801669c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801669e:	4983      	ldr	r1, [pc, #524]	; (80168ac <_strtod_l+0x574>)
 80166a0:	3b01      	subs	r3, #1
 80166a2:	a811      	add	r0, sp, #68	; 0x44
 80166a4:	9311      	str	r3, [sp, #68]	; 0x44
 80166a6:	f001 f9a7 	bl	80179f8 <__match>
 80166aa:	b910      	cbnz	r0, 80166b2 <_strtod_l+0x37a>
 80166ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80166ae:	3301      	adds	r3, #1
 80166b0:	9311      	str	r3, [sp, #68]	; 0x44
 80166b2:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80168c0 <_strtod_l+0x588>
 80166b6:	f04f 0800 	mov.w	r8, #0
 80166ba:	e678      	b.n	80163ae <_strtod_l+0x76>
 80166bc:	487c      	ldr	r0, [pc, #496]	; (80168b0 <_strtod_l+0x578>)
 80166be:	f000 feb7 	bl	8017430 <nan>
 80166c2:	ec59 8b10 	vmov	r8, r9, d0
 80166c6:	e672      	b.n	80163ae <_strtod_l+0x76>
 80166c8:	eddd 7a07 	vldr	s15, [sp, #28]
 80166cc:	eba5 020b 	sub.w	r2, r5, fp
 80166d0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80166d4:	2e00      	cmp	r6, #0
 80166d6:	bf08      	it	eq
 80166d8:	461e      	moveq	r6, r3
 80166da:	2b10      	cmp	r3, #16
 80166dc:	9206      	str	r2, [sp, #24]
 80166de:	461a      	mov	r2, r3
 80166e0:	bfa8      	it	ge
 80166e2:	2210      	movge	r2, #16
 80166e4:	2b09      	cmp	r3, #9
 80166e6:	ec59 8b17 	vmov	r8, r9, d7
 80166ea:	dd0c      	ble.n	8016706 <_strtod_l+0x3ce>
 80166ec:	4971      	ldr	r1, [pc, #452]	; (80168b4 <_strtod_l+0x57c>)
 80166ee:	eddd 6a05 	vldr	s13, [sp, #20]
 80166f2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80166f6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80166fa:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80166fe:	eea7 6b05 	vfma.f64	d6, d7, d5
 8016702:	ec59 8b16 	vmov	r8, r9, d6
 8016706:	2b0f      	cmp	r3, #15
 8016708:	dc37      	bgt.n	801677a <_strtod_l+0x442>
 801670a:	9906      	ldr	r1, [sp, #24]
 801670c:	2900      	cmp	r1, #0
 801670e:	f43f ae4e 	beq.w	80163ae <_strtod_l+0x76>
 8016712:	dd23      	ble.n	801675c <_strtod_l+0x424>
 8016714:	2916      	cmp	r1, #22
 8016716:	dc0b      	bgt.n	8016730 <_strtod_l+0x3f8>
 8016718:	4b66      	ldr	r3, [pc, #408]	; (80168b4 <_strtod_l+0x57c>)
 801671a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801671e:	ed93 7b00 	vldr	d7, [r3]
 8016722:	ec49 8b16 	vmov	d6, r8, r9
 8016726:	ee27 7b06 	vmul.f64	d7, d7, d6
 801672a:	ec59 8b17 	vmov	r8, r9, d7
 801672e:	e63e      	b.n	80163ae <_strtod_l+0x76>
 8016730:	9806      	ldr	r0, [sp, #24]
 8016732:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8016736:	4281      	cmp	r1, r0
 8016738:	db1f      	blt.n	801677a <_strtod_l+0x442>
 801673a:	4a5e      	ldr	r2, [pc, #376]	; (80168b4 <_strtod_l+0x57c>)
 801673c:	f1c3 030f 	rsb	r3, r3, #15
 8016740:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016744:	ed91 7b00 	vldr	d7, [r1]
 8016748:	ec49 8b16 	vmov	d6, r8, r9
 801674c:	1ac3      	subs	r3, r0, r3
 801674e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016752:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016756:	ed92 6b00 	vldr	d6, [r2]
 801675a:	e7e4      	b.n	8016726 <_strtod_l+0x3ee>
 801675c:	9906      	ldr	r1, [sp, #24]
 801675e:	3116      	adds	r1, #22
 8016760:	db0b      	blt.n	801677a <_strtod_l+0x442>
 8016762:	4b54      	ldr	r3, [pc, #336]	; (80168b4 <_strtod_l+0x57c>)
 8016764:	ebab 0505 	sub.w	r5, fp, r5
 8016768:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801676c:	ed95 7b00 	vldr	d7, [r5]
 8016770:	ec49 8b16 	vmov	d6, r8, r9
 8016774:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016778:	e7d7      	b.n	801672a <_strtod_l+0x3f2>
 801677a:	9906      	ldr	r1, [sp, #24]
 801677c:	1a9a      	subs	r2, r3, r2
 801677e:	440a      	add	r2, r1
 8016780:	2a00      	cmp	r2, #0
 8016782:	dd6e      	ble.n	8016862 <_strtod_l+0x52a>
 8016784:	f012 000f 	ands.w	r0, r2, #15
 8016788:	d00a      	beq.n	80167a0 <_strtod_l+0x468>
 801678a:	494a      	ldr	r1, [pc, #296]	; (80168b4 <_strtod_l+0x57c>)
 801678c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016790:	ed91 7b00 	vldr	d7, [r1]
 8016794:	ec49 8b16 	vmov	d6, r8, r9
 8016798:	ee27 7b06 	vmul.f64	d7, d7, d6
 801679c:	ec59 8b17 	vmov	r8, r9, d7
 80167a0:	f032 020f 	bics.w	r2, r2, #15
 80167a4:	d04e      	beq.n	8016844 <_strtod_l+0x50c>
 80167a6:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80167aa:	dd22      	ble.n	80167f2 <_strtod_l+0x4ba>
 80167ac:	2500      	movs	r5, #0
 80167ae:	462e      	mov	r6, r5
 80167b0:	9507      	str	r5, [sp, #28]
 80167b2:	462f      	mov	r7, r5
 80167b4:	2322      	movs	r3, #34	; 0x22
 80167b6:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80168c0 <_strtod_l+0x588>
 80167ba:	6023      	str	r3, [r4, #0]
 80167bc:	f04f 0800 	mov.w	r8, #0
 80167c0:	9b07      	ldr	r3, [sp, #28]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	f43f adf3 	beq.w	80163ae <_strtod_l+0x76>
 80167c8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80167ca:	4620      	mov	r0, r4
 80167cc:	f7ff f930 	bl	8015a30 <_Bfree>
 80167d0:	4639      	mov	r1, r7
 80167d2:	4620      	mov	r0, r4
 80167d4:	f7ff f92c 	bl	8015a30 <_Bfree>
 80167d8:	4631      	mov	r1, r6
 80167da:	4620      	mov	r0, r4
 80167dc:	f7ff f928 	bl	8015a30 <_Bfree>
 80167e0:	9907      	ldr	r1, [sp, #28]
 80167e2:	4620      	mov	r0, r4
 80167e4:	f7ff f924 	bl	8015a30 <_Bfree>
 80167e8:	4629      	mov	r1, r5
 80167ea:	4620      	mov	r0, r4
 80167ec:	f7ff f920 	bl	8015a30 <_Bfree>
 80167f0:	e5dd      	b.n	80163ae <_strtod_l+0x76>
 80167f2:	2000      	movs	r0, #0
 80167f4:	ec49 8b17 	vmov	d7, r8, r9
 80167f8:	4f2f      	ldr	r7, [pc, #188]	; (80168b8 <_strtod_l+0x580>)
 80167fa:	1112      	asrs	r2, r2, #4
 80167fc:	4601      	mov	r1, r0
 80167fe:	2a01      	cmp	r2, #1
 8016800:	dc23      	bgt.n	801684a <_strtod_l+0x512>
 8016802:	b108      	cbz	r0, 8016808 <_strtod_l+0x4d0>
 8016804:	ec59 8b17 	vmov	r8, r9, d7
 8016808:	4a2b      	ldr	r2, [pc, #172]	; (80168b8 <_strtod_l+0x580>)
 801680a:	482c      	ldr	r0, [pc, #176]	; (80168bc <_strtod_l+0x584>)
 801680c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8016810:	ed92 7b00 	vldr	d7, [r2]
 8016814:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8016818:	ec49 8b16 	vmov	d6, r8, r9
 801681c:	4a28      	ldr	r2, [pc, #160]	; (80168c0 <_strtod_l+0x588>)
 801681e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016822:	ee17 1a90 	vmov	r1, s15
 8016826:	400a      	ands	r2, r1
 8016828:	4282      	cmp	r2, r0
 801682a:	ec59 8b17 	vmov	r8, r9, d7
 801682e:	d8bd      	bhi.n	80167ac <_strtod_l+0x474>
 8016830:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8016834:	4282      	cmp	r2, r0
 8016836:	bf86      	itte	hi
 8016838:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80168c4 <_strtod_l+0x58c>
 801683c:	f04f 38ff 	movhi.w	r8, #4294967295
 8016840:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8016844:	2200      	movs	r2, #0
 8016846:	9205      	str	r2, [sp, #20]
 8016848:	e076      	b.n	8016938 <_strtod_l+0x600>
 801684a:	f012 0f01 	tst.w	r2, #1
 801684e:	d004      	beq.n	801685a <_strtod_l+0x522>
 8016850:	ed97 6b00 	vldr	d6, [r7]
 8016854:	2001      	movs	r0, #1
 8016856:	ee27 7b06 	vmul.f64	d7, d7, d6
 801685a:	3101      	adds	r1, #1
 801685c:	1052      	asrs	r2, r2, #1
 801685e:	3708      	adds	r7, #8
 8016860:	e7cd      	b.n	80167fe <_strtod_l+0x4c6>
 8016862:	d0ef      	beq.n	8016844 <_strtod_l+0x50c>
 8016864:	4252      	negs	r2, r2
 8016866:	f012 000f 	ands.w	r0, r2, #15
 801686a:	d00a      	beq.n	8016882 <_strtod_l+0x54a>
 801686c:	4911      	ldr	r1, [pc, #68]	; (80168b4 <_strtod_l+0x57c>)
 801686e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016872:	ed91 7b00 	vldr	d7, [r1]
 8016876:	ec49 8b16 	vmov	d6, r8, r9
 801687a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801687e:	ec59 8b17 	vmov	r8, r9, d7
 8016882:	1112      	asrs	r2, r2, #4
 8016884:	d0de      	beq.n	8016844 <_strtod_l+0x50c>
 8016886:	2a1f      	cmp	r2, #31
 8016888:	dd1e      	ble.n	80168c8 <_strtod_l+0x590>
 801688a:	2500      	movs	r5, #0
 801688c:	462e      	mov	r6, r5
 801688e:	9507      	str	r5, [sp, #28]
 8016890:	462f      	mov	r7, r5
 8016892:	2322      	movs	r3, #34	; 0x22
 8016894:	f04f 0800 	mov.w	r8, #0
 8016898:	f04f 0900 	mov.w	r9, #0
 801689c:	6023      	str	r3, [r4, #0]
 801689e:	e78f      	b.n	80167c0 <_strtod_l+0x488>
 80168a0:	08018395 	.word	0x08018395
 80168a4:	080185bc 	.word	0x080185bc
 80168a8:	0801838d 	.word	0x0801838d
 80168ac:	080183c4 	.word	0x080183c4
 80168b0:	0801874d 	.word	0x0801874d
 80168b4:	080184d0 	.word	0x080184d0
 80168b8:	080184a8 	.word	0x080184a8
 80168bc:	7ca00000 	.word	0x7ca00000
 80168c0:	7ff00000 	.word	0x7ff00000
 80168c4:	7fefffff 	.word	0x7fefffff
 80168c8:	f012 0110 	ands.w	r1, r2, #16
 80168cc:	bf18      	it	ne
 80168ce:	216a      	movne	r1, #106	; 0x6a
 80168d0:	9105      	str	r1, [sp, #20]
 80168d2:	ec49 8b17 	vmov	d7, r8, r9
 80168d6:	49be      	ldr	r1, [pc, #760]	; (8016bd0 <_strtod_l+0x898>)
 80168d8:	2000      	movs	r0, #0
 80168da:	07d7      	lsls	r7, r2, #31
 80168dc:	d504      	bpl.n	80168e8 <_strtod_l+0x5b0>
 80168de:	ed91 6b00 	vldr	d6, [r1]
 80168e2:	2001      	movs	r0, #1
 80168e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80168e8:	1052      	asrs	r2, r2, #1
 80168ea:	f101 0108 	add.w	r1, r1, #8
 80168ee:	d1f4      	bne.n	80168da <_strtod_l+0x5a2>
 80168f0:	b108      	cbz	r0, 80168f6 <_strtod_l+0x5be>
 80168f2:	ec59 8b17 	vmov	r8, r9, d7
 80168f6:	9a05      	ldr	r2, [sp, #20]
 80168f8:	b1ba      	cbz	r2, 801692a <_strtod_l+0x5f2>
 80168fa:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80168fe:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8016902:	2a00      	cmp	r2, #0
 8016904:	4648      	mov	r0, r9
 8016906:	dd10      	ble.n	801692a <_strtod_l+0x5f2>
 8016908:	2a1f      	cmp	r2, #31
 801690a:	f340 812c 	ble.w	8016b66 <_strtod_l+0x82e>
 801690e:	2a34      	cmp	r2, #52	; 0x34
 8016910:	bfde      	ittt	le
 8016912:	f04f 32ff 	movle.w	r2, #4294967295
 8016916:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801691a:	408a      	lslle	r2, r1
 801691c:	f04f 0800 	mov.w	r8, #0
 8016920:	bfcc      	ite	gt
 8016922:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016926:	ea02 0900 	andle.w	r9, r2, r0
 801692a:	ec49 8b17 	vmov	d7, r8, r9
 801692e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016936:	d0a8      	beq.n	801688a <_strtod_l+0x552>
 8016938:	9a07      	ldr	r2, [sp, #28]
 801693a:	9200      	str	r2, [sp, #0]
 801693c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801693e:	4632      	mov	r2, r6
 8016940:	4620      	mov	r0, r4
 8016942:	f7ff f8dd 	bl	8015b00 <__s2b>
 8016946:	9007      	str	r0, [sp, #28]
 8016948:	2800      	cmp	r0, #0
 801694a:	f43f af2f 	beq.w	80167ac <_strtod_l+0x474>
 801694e:	9a06      	ldr	r2, [sp, #24]
 8016950:	2a00      	cmp	r2, #0
 8016952:	ebab 0305 	sub.w	r3, fp, r5
 8016956:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8016bb0 <_strtod_l+0x878>
 801695a:	bfa8      	it	ge
 801695c:	2300      	movge	r3, #0
 801695e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8016bb8 <_strtod_l+0x880>
 8016962:	ed9f bb97 	vldr	d11, [pc, #604]	; 8016bc0 <_strtod_l+0x888>
 8016966:	9309      	str	r3, [sp, #36]	; 0x24
 8016968:	2500      	movs	r5, #0
 801696a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801696e:	930c      	str	r3, [sp, #48]	; 0x30
 8016970:	462e      	mov	r6, r5
 8016972:	9b07      	ldr	r3, [sp, #28]
 8016974:	4620      	mov	r0, r4
 8016976:	6859      	ldr	r1, [r3, #4]
 8016978:	f7ff f81a 	bl	80159b0 <_Balloc>
 801697c:	4607      	mov	r7, r0
 801697e:	2800      	cmp	r0, #0
 8016980:	f43f af18 	beq.w	80167b4 <_strtod_l+0x47c>
 8016984:	9b07      	ldr	r3, [sp, #28]
 8016986:	691a      	ldr	r2, [r3, #16]
 8016988:	3202      	adds	r2, #2
 801698a:	f103 010c 	add.w	r1, r3, #12
 801698e:	0092      	lsls	r2, r2, #2
 8016990:	300c      	adds	r0, #12
 8016992:	f000 fd3f 	bl	8017414 <memcpy>
 8016996:	ec49 8b10 	vmov	d0, r8, r9
 801699a:	aa14      	add	r2, sp, #80	; 0x50
 801699c:	a913      	add	r1, sp, #76	; 0x4c
 801699e:	4620      	mov	r0, r4
 80169a0:	f7ff fbe2 	bl	8016168 <__d2b>
 80169a4:	ec49 8b18 	vmov	d8, r8, r9
 80169a8:	9012      	str	r0, [sp, #72]	; 0x48
 80169aa:	2800      	cmp	r0, #0
 80169ac:	f43f af02 	beq.w	80167b4 <_strtod_l+0x47c>
 80169b0:	2101      	movs	r1, #1
 80169b2:	4620      	mov	r0, r4
 80169b4:	f7ff f93c 	bl	8015c30 <__i2b>
 80169b8:	4606      	mov	r6, r0
 80169ba:	2800      	cmp	r0, #0
 80169bc:	f43f aefa 	beq.w	80167b4 <_strtod_l+0x47c>
 80169c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80169c2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	bfab      	itete	ge
 80169c8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80169ca:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80169cc:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80169d0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80169d4:	bfac      	ite	ge
 80169d6:	eb03 0b02 	addge.w	fp, r3, r2
 80169da:	eba2 0a03 	sublt.w	sl, r2, r3
 80169de:	9a05      	ldr	r2, [sp, #20]
 80169e0:	1a9b      	subs	r3, r3, r2
 80169e2:	440b      	add	r3, r1
 80169e4:	4a7b      	ldr	r2, [pc, #492]	; (8016bd4 <_strtod_l+0x89c>)
 80169e6:	3b01      	subs	r3, #1
 80169e8:	4293      	cmp	r3, r2
 80169ea:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80169ee:	f280 80cd 	bge.w	8016b8c <_strtod_l+0x854>
 80169f2:	1ad2      	subs	r2, r2, r3
 80169f4:	2a1f      	cmp	r2, #31
 80169f6:	eba1 0102 	sub.w	r1, r1, r2
 80169fa:	f04f 0001 	mov.w	r0, #1
 80169fe:	f300 80b9 	bgt.w	8016b74 <_strtod_l+0x83c>
 8016a02:	fa00 f302 	lsl.w	r3, r0, r2
 8016a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8016a08:	2300      	movs	r3, #0
 8016a0a:	930a      	str	r3, [sp, #40]	; 0x28
 8016a0c:	eb0b 0301 	add.w	r3, fp, r1
 8016a10:	9a05      	ldr	r2, [sp, #20]
 8016a12:	459b      	cmp	fp, r3
 8016a14:	448a      	add	sl, r1
 8016a16:	4492      	add	sl, r2
 8016a18:	465a      	mov	r2, fp
 8016a1a:	bfa8      	it	ge
 8016a1c:	461a      	movge	r2, r3
 8016a1e:	4552      	cmp	r2, sl
 8016a20:	bfa8      	it	ge
 8016a22:	4652      	movge	r2, sl
 8016a24:	2a00      	cmp	r2, #0
 8016a26:	bfc2      	ittt	gt
 8016a28:	1a9b      	subgt	r3, r3, r2
 8016a2a:	ebaa 0a02 	subgt.w	sl, sl, r2
 8016a2e:	ebab 0b02 	subgt.w	fp, fp, r2
 8016a32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016a34:	2a00      	cmp	r2, #0
 8016a36:	dd18      	ble.n	8016a6a <_strtod_l+0x732>
 8016a38:	4631      	mov	r1, r6
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8016a3e:	f7ff f9b7 	bl	8015db0 <__pow5mult>
 8016a42:	4606      	mov	r6, r0
 8016a44:	2800      	cmp	r0, #0
 8016a46:	f43f aeb5 	beq.w	80167b4 <_strtod_l+0x47c>
 8016a4a:	4601      	mov	r1, r0
 8016a4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016a4e:	4620      	mov	r0, r4
 8016a50:	f7ff f904 	bl	8015c5c <__multiply>
 8016a54:	900e      	str	r0, [sp, #56]	; 0x38
 8016a56:	2800      	cmp	r0, #0
 8016a58:	f43f aeac 	beq.w	80167b4 <_strtod_l+0x47c>
 8016a5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016a5e:	4620      	mov	r0, r4
 8016a60:	f7fe ffe6 	bl	8015a30 <_Bfree>
 8016a64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016a68:	9212      	str	r2, [sp, #72]	; 0x48
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	f300 8093 	bgt.w	8016b96 <_strtod_l+0x85e>
 8016a70:	9b06      	ldr	r3, [sp, #24]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	dd08      	ble.n	8016a88 <_strtod_l+0x750>
 8016a76:	4639      	mov	r1, r7
 8016a78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016a7a:	4620      	mov	r0, r4
 8016a7c:	f7ff f998 	bl	8015db0 <__pow5mult>
 8016a80:	4607      	mov	r7, r0
 8016a82:	2800      	cmp	r0, #0
 8016a84:	f43f ae96 	beq.w	80167b4 <_strtod_l+0x47c>
 8016a88:	f1ba 0f00 	cmp.w	sl, #0
 8016a8c:	dd08      	ble.n	8016aa0 <_strtod_l+0x768>
 8016a8e:	4639      	mov	r1, r7
 8016a90:	4652      	mov	r2, sl
 8016a92:	4620      	mov	r0, r4
 8016a94:	f7ff f9e6 	bl	8015e64 <__lshift>
 8016a98:	4607      	mov	r7, r0
 8016a9a:	2800      	cmp	r0, #0
 8016a9c:	f43f ae8a 	beq.w	80167b4 <_strtod_l+0x47c>
 8016aa0:	f1bb 0f00 	cmp.w	fp, #0
 8016aa4:	dd08      	ble.n	8016ab8 <_strtod_l+0x780>
 8016aa6:	4631      	mov	r1, r6
 8016aa8:	465a      	mov	r2, fp
 8016aaa:	4620      	mov	r0, r4
 8016aac:	f7ff f9da 	bl	8015e64 <__lshift>
 8016ab0:	4606      	mov	r6, r0
 8016ab2:	2800      	cmp	r0, #0
 8016ab4:	f43f ae7e 	beq.w	80167b4 <_strtod_l+0x47c>
 8016ab8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016aba:	463a      	mov	r2, r7
 8016abc:	4620      	mov	r0, r4
 8016abe:	f7ff fa59 	bl	8015f74 <__mdiff>
 8016ac2:	4605      	mov	r5, r0
 8016ac4:	2800      	cmp	r0, #0
 8016ac6:	f43f ae75 	beq.w	80167b4 <_strtod_l+0x47c>
 8016aca:	2300      	movs	r3, #0
 8016acc:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8016ad0:	60c3      	str	r3, [r0, #12]
 8016ad2:	4631      	mov	r1, r6
 8016ad4:	f7ff fa32 	bl	8015f3c <__mcmp>
 8016ad8:	2800      	cmp	r0, #0
 8016ada:	da7f      	bge.n	8016bdc <_strtod_l+0x8a4>
 8016adc:	ea5a 0a08 	orrs.w	sl, sl, r8
 8016ae0:	f040 80a5 	bne.w	8016c2e <_strtod_l+0x8f6>
 8016ae4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	f040 80a0 	bne.w	8016c2e <_strtod_l+0x8f6>
 8016aee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016af2:	0d1b      	lsrs	r3, r3, #20
 8016af4:	051b      	lsls	r3, r3, #20
 8016af6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016afa:	f240 8098 	bls.w	8016c2e <_strtod_l+0x8f6>
 8016afe:	696b      	ldr	r3, [r5, #20]
 8016b00:	b91b      	cbnz	r3, 8016b0a <_strtod_l+0x7d2>
 8016b02:	692b      	ldr	r3, [r5, #16]
 8016b04:	2b01      	cmp	r3, #1
 8016b06:	f340 8092 	ble.w	8016c2e <_strtod_l+0x8f6>
 8016b0a:	4629      	mov	r1, r5
 8016b0c:	2201      	movs	r2, #1
 8016b0e:	4620      	mov	r0, r4
 8016b10:	f7ff f9a8 	bl	8015e64 <__lshift>
 8016b14:	4631      	mov	r1, r6
 8016b16:	4605      	mov	r5, r0
 8016b18:	f7ff fa10 	bl	8015f3c <__mcmp>
 8016b1c:	2800      	cmp	r0, #0
 8016b1e:	f340 8086 	ble.w	8016c2e <_strtod_l+0x8f6>
 8016b22:	9905      	ldr	r1, [sp, #20]
 8016b24:	4a2c      	ldr	r2, [pc, #176]	; (8016bd8 <_strtod_l+0x8a0>)
 8016b26:	464b      	mov	r3, r9
 8016b28:	2900      	cmp	r1, #0
 8016b2a:	f000 809f 	beq.w	8016c6c <_strtod_l+0x934>
 8016b2e:	ea02 0109 	and.w	r1, r2, r9
 8016b32:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016b36:	f300 8099 	bgt.w	8016c6c <_strtod_l+0x934>
 8016b3a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016b3e:	f77f aea8 	ble.w	8016892 <_strtod_l+0x55a>
 8016b42:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8016bc8 <_strtod_l+0x890>
 8016b46:	ec49 8b16 	vmov	d6, r8, r9
 8016b4a:	4b23      	ldr	r3, [pc, #140]	; (8016bd8 <_strtod_l+0x8a0>)
 8016b4c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016b50:	ee17 2a90 	vmov	r2, s15
 8016b54:	4013      	ands	r3, r2
 8016b56:	ec59 8b17 	vmov	r8, r9, d7
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	f47f ae34 	bne.w	80167c8 <_strtod_l+0x490>
 8016b60:	2322      	movs	r3, #34	; 0x22
 8016b62:	6023      	str	r3, [r4, #0]
 8016b64:	e630      	b.n	80167c8 <_strtod_l+0x490>
 8016b66:	f04f 31ff 	mov.w	r1, #4294967295
 8016b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8016b6e:	ea02 0808 	and.w	r8, r2, r8
 8016b72:	e6da      	b.n	801692a <_strtod_l+0x5f2>
 8016b74:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8016b78:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8016b7c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8016b80:	33e2      	adds	r3, #226	; 0xe2
 8016b82:	fa00 f303 	lsl.w	r3, r0, r3
 8016b86:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8016b8a:	e73f      	b.n	8016a0c <_strtod_l+0x6d4>
 8016b8c:	2200      	movs	r2, #0
 8016b8e:	2301      	movs	r3, #1
 8016b90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016b94:	e73a      	b.n	8016a0c <_strtod_l+0x6d4>
 8016b96:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016b98:	461a      	mov	r2, r3
 8016b9a:	4620      	mov	r0, r4
 8016b9c:	f7ff f962 	bl	8015e64 <__lshift>
 8016ba0:	9012      	str	r0, [sp, #72]	; 0x48
 8016ba2:	2800      	cmp	r0, #0
 8016ba4:	f47f af64 	bne.w	8016a70 <_strtod_l+0x738>
 8016ba8:	e604      	b.n	80167b4 <_strtod_l+0x47c>
 8016baa:	bf00      	nop
 8016bac:	f3af 8000 	nop.w
 8016bb0:	94a03595 	.word	0x94a03595
 8016bb4:	3fcfffff 	.word	0x3fcfffff
 8016bb8:	94a03595 	.word	0x94a03595
 8016bbc:	3fdfffff 	.word	0x3fdfffff
 8016bc0:	35afe535 	.word	0x35afe535
 8016bc4:	3fe00000 	.word	0x3fe00000
 8016bc8:	00000000 	.word	0x00000000
 8016bcc:	39500000 	.word	0x39500000
 8016bd0:	080185d0 	.word	0x080185d0
 8016bd4:	fffffc02 	.word	0xfffffc02
 8016bd8:	7ff00000 	.word	0x7ff00000
 8016bdc:	46cb      	mov	fp, r9
 8016bde:	d15f      	bne.n	8016ca0 <_strtod_l+0x968>
 8016be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016be4:	f1ba 0f00 	cmp.w	sl, #0
 8016be8:	d02a      	beq.n	8016c40 <_strtod_l+0x908>
 8016bea:	4aa7      	ldr	r2, [pc, #668]	; (8016e88 <_strtod_l+0xb50>)
 8016bec:	4293      	cmp	r3, r2
 8016bee:	d12b      	bne.n	8016c48 <_strtod_l+0x910>
 8016bf0:	9b05      	ldr	r3, [sp, #20]
 8016bf2:	4642      	mov	r2, r8
 8016bf4:	b1fb      	cbz	r3, 8016c36 <_strtod_l+0x8fe>
 8016bf6:	4ba5      	ldr	r3, [pc, #660]	; (8016e8c <_strtod_l+0xb54>)
 8016bf8:	ea09 0303 	and.w	r3, r9, r3
 8016bfc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016c00:	f04f 31ff 	mov.w	r1, #4294967295
 8016c04:	d81a      	bhi.n	8016c3c <_strtod_l+0x904>
 8016c06:	0d1b      	lsrs	r3, r3, #20
 8016c08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8016c10:	429a      	cmp	r2, r3
 8016c12:	d119      	bne.n	8016c48 <_strtod_l+0x910>
 8016c14:	4b9e      	ldr	r3, [pc, #632]	; (8016e90 <_strtod_l+0xb58>)
 8016c16:	459b      	cmp	fp, r3
 8016c18:	d102      	bne.n	8016c20 <_strtod_l+0x8e8>
 8016c1a:	3201      	adds	r2, #1
 8016c1c:	f43f adca 	beq.w	80167b4 <_strtod_l+0x47c>
 8016c20:	4b9a      	ldr	r3, [pc, #616]	; (8016e8c <_strtod_l+0xb54>)
 8016c22:	ea0b 0303 	and.w	r3, fp, r3
 8016c26:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8016c2a:	f04f 0800 	mov.w	r8, #0
 8016c2e:	9b05      	ldr	r3, [sp, #20]
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d186      	bne.n	8016b42 <_strtod_l+0x80a>
 8016c34:	e5c8      	b.n	80167c8 <_strtod_l+0x490>
 8016c36:	f04f 33ff 	mov.w	r3, #4294967295
 8016c3a:	e7e9      	b.n	8016c10 <_strtod_l+0x8d8>
 8016c3c:	460b      	mov	r3, r1
 8016c3e:	e7e7      	b.n	8016c10 <_strtod_l+0x8d8>
 8016c40:	ea53 0308 	orrs.w	r3, r3, r8
 8016c44:	f43f af6d 	beq.w	8016b22 <_strtod_l+0x7ea>
 8016c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c4a:	b1cb      	cbz	r3, 8016c80 <_strtod_l+0x948>
 8016c4c:	ea13 0f0b 	tst.w	r3, fp
 8016c50:	d0ed      	beq.n	8016c2e <_strtod_l+0x8f6>
 8016c52:	9a05      	ldr	r2, [sp, #20]
 8016c54:	4640      	mov	r0, r8
 8016c56:	4649      	mov	r1, r9
 8016c58:	f1ba 0f00 	cmp.w	sl, #0
 8016c5c:	d014      	beq.n	8016c88 <_strtod_l+0x950>
 8016c5e:	f7ff fb51 	bl	8016304 <sulp>
 8016c62:	ee38 7b00 	vadd.f64	d7, d8, d0
 8016c66:	ec59 8b17 	vmov	r8, r9, d7
 8016c6a:	e7e0      	b.n	8016c2e <_strtod_l+0x8f6>
 8016c6c:	4013      	ands	r3, r2
 8016c6e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016c72:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016c76:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8016c7a:	f04f 38ff 	mov.w	r8, #4294967295
 8016c7e:	e7d6      	b.n	8016c2e <_strtod_l+0x8f6>
 8016c80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016c82:	ea13 0f08 	tst.w	r3, r8
 8016c86:	e7e3      	b.n	8016c50 <_strtod_l+0x918>
 8016c88:	f7ff fb3c 	bl	8016304 <sulp>
 8016c8c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8016c90:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c98:	ec59 8b10 	vmov	r8, r9, d0
 8016c9c:	d1c7      	bne.n	8016c2e <_strtod_l+0x8f6>
 8016c9e:	e5f8      	b.n	8016892 <_strtod_l+0x55a>
 8016ca0:	4631      	mov	r1, r6
 8016ca2:	4628      	mov	r0, r5
 8016ca4:	f7ff faba 	bl	801621c <__ratio>
 8016ca8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8016cac:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cb4:	d85f      	bhi.n	8016d76 <_strtod_l+0xa3e>
 8016cb6:	f1ba 0f00 	cmp.w	sl, #0
 8016cba:	d166      	bne.n	8016d8a <_strtod_l+0xa52>
 8016cbc:	f1b8 0f00 	cmp.w	r8, #0
 8016cc0:	d14d      	bne.n	8016d5e <_strtod_l+0xa26>
 8016cc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016cc6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d162      	bne.n	8016d94 <_strtod_l+0xa5c>
 8016cce:	eeb4 0bcd 	vcmpe.f64	d0, d13
 8016cd2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8016cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cda:	d401      	bmi.n	8016ce0 <_strtod_l+0x9a8>
 8016cdc:	ee20 db0d 	vmul.f64	d13, d0, d13
 8016ce0:	eeb1 cb4d 	vneg.f64	d12, d13
 8016ce4:	4869      	ldr	r0, [pc, #420]	; (8016e8c <_strtod_l+0xb54>)
 8016ce6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8016e98 <_strtod_l+0xb60>
 8016cea:	ea0b 0100 	and.w	r1, fp, r0
 8016cee:	4561      	cmp	r1, ip
 8016cf0:	ec53 2b1c 	vmov	r2, r3, d12
 8016cf4:	d17a      	bne.n	8016dec <_strtod_l+0xab4>
 8016cf6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8016cfa:	ec49 8b10 	vmov	d0, r8, r9
 8016cfe:	910a      	str	r1, [sp, #40]	; 0x28
 8016d00:	f7ff f9c2 	bl	8016088 <__ulp>
 8016d04:	ec49 8b1e 	vmov	d14, r8, r9
 8016d08:	4860      	ldr	r0, [pc, #384]	; (8016e8c <_strtod_l+0xb54>)
 8016d0a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 8016d0e:	ee1e 3a90 	vmov	r3, s29
 8016d12:	4a60      	ldr	r2, [pc, #384]	; (8016e94 <_strtod_l+0xb5c>)
 8016d14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016d16:	4018      	ands	r0, r3
 8016d18:	4290      	cmp	r0, r2
 8016d1a:	ec59 8b1e 	vmov	r8, r9, d14
 8016d1e:	d93c      	bls.n	8016d9a <_strtod_l+0xa62>
 8016d20:	ee18 2a90 	vmov	r2, s17
 8016d24:	4b5a      	ldr	r3, [pc, #360]	; (8016e90 <_strtod_l+0xb58>)
 8016d26:	429a      	cmp	r2, r3
 8016d28:	d104      	bne.n	8016d34 <_strtod_l+0x9fc>
 8016d2a:	ee18 3a10 	vmov	r3, s16
 8016d2e:	3301      	adds	r3, #1
 8016d30:	f43f ad40 	beq.w	80167b4 <_strtod_l+0x47c>
 8016d34:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8016e90 <_strtod_l+0xb58>
 8016d38:	f04f 38ff 	mov.w	r8, #4294967295
 8016d3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016d3e:	4620      	mov	r0, r4
 8016d40:	f7fe fe76 	bl	8015a30 <_Bfree>
 8016d44:	4639      	mov	r1, r7
 8016d46:	4620      	mov	r0, r4
 8016d48:	f7fe fe72 	bl	8015a30 <_Bfree>
 8016d4c:	4631      	mov	r1, r6
 8016d4e:	4620      	mov	r0, r4
 8016d50:	f7fe fe6e 	bl	8015a30 <_Bfree>
 8016d54:	4629      	mov	r1, r5
 8016d56:	4620      	mov	r0, r4
 8016d58:	f7fe fe6a 	bl	8015a30 <_Bfree>
 8016d5c:	e609      	b.n	8016972 <_strtod_l+0x63a>
 8016d5e:	f1b8 0f01 	cmp.w	r8, #1
 8016d62:	d103      	bne.n	8016d6c <_strtod_l+0xa34>
 8016d64:	f1b9 0f00 	cmp.w	r9, #0
 8016d68:	f43f ad93 	beq.w	8016892 <_strtod_l+0x55a>
 8016d6c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8016d70:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8016d74:	e7b6      	b.n	8016ce4 <_strtod_l+0x9ac>
 8016d76:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8016d7a:	ee20 db0d 	vmul.f64	d13, d0, d13
 8016d7e:	f1ba 0f00 	cmp.w	sl, #0
 8016d82:	d0ad      	beq.n	8016ce0 <_strtod_l+0x9a8>
 8016d84:	eeb0 cb4d 	vmov.f64	d12, d13
 8016d88:	e7ac      	b.n	8016ce4 <_strtod_l+0x9ac>
 8016d8a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 8016d8e:	eeb0 db4c 	vmov.f64	d13, d12
 8016d92:	e7a7      	b.n	8016ce4 <_strtod_l+0x9ac>
 8016d94:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8016d98:	e7a4      	b.n	8016ce4 <_strtod_l+0x9ac>
 8016d9a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8016d9e:	9b05      	ldr	r3, [sp, #20]
 8016da0:	46cb      	mov	fp, r9
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d1ca      	bne.n	8016d3c <_strtod_l+0xa04>
 8016da6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016daa:	0d1b      	lsrs	r3, r3, #20
 8016dac:	051b      	lsls	r3, r3, #20
 8016dae:	4299      	cmp	r1, r3
 8016db0:	d1c4      	bne.n	8016d3c <_strtod_l+0xa04>
 8016db2:	ec51 0b1d 	vmov	r0, r1, d13
 8016db6:	f7e9 fcd7 	bl	8000768 <__aeabi_d2lz>
 8016dba:	f7e9 fc8f 	bl	80006dc <__aeabi_l2d>
 8016dbe:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 8016dc2:	ec41 0b17 	vmov	d7, r0, r1
 8016dc6:	ea4b 0b08 	orr.w	fp, fp, r8
 8016dca:	ea5b 0b0a 	orrs.w	fp, fp, sl
 8016dce:	ee3d db47 	vsub.f64	d13, d13, d7
 8016dd2:	d03c      	beq.n	8016e4e <_strtod_l+0xb16>
 8016dd4:	eeb4 dbca 	vcmpe.f64	d13, d10
 8016dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ddc:	f53f acf4 	bmi.w	80167c8 <_strtod_l+0x490>
 8016de0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8016de4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016de8:	dda8      	ble.n	8016d3c <_strtod_l+0xa04>
 8016dea:	e4ed      	b.n	80167c8 <_strtod_l+0x490>
 8016dec:	9805      	ldr	r0, [sp, #20]
 8016dee:	b1f0      	cbz	r0, 8016e2e <_strtod_l+0xaf6>
 8016df0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8016df4:	d81b      	bhi.n	8016e2e <_strtod_l+0xaf6>
 8016df6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8016e80 <_strtod_l+0xb48>
 8016dfa:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8016dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e02:	d811      	bhi.n	8016e28 <_strtod_l+0xaf0>
 8016e04:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8016e08:	ee1d 3a10 	vmov	r3, s26
 8016e0c:	2b01      	cmp	r3, #1
 8016e0e:	bf38      	it	cc
 8016e10:	2301      	movcc	r3, #1
 8016e12:	ee0d 3a10 	vmov	s26, r3
 8016e16:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8016e1a:	f1ba 0f00 	cmp.w	sl, #0
 8016e1e:	d113      	bne.n	8016e48 <_strtod_l+0xb10>
 8016e20:	eeb1 7b4d 	vneg.f64	d7, d13
 8016e24:	ec53 2b17 	vmov	r2, r3, d7
 8016e28:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8016e2c:	1a43      	subs	r3, r0, r1
 8016e2e:	eeb0 0b48 	vmov.f64	d0, d8
 8016e32:	ec43 2b1c 	vmov	d12, r2, r3
 8016e36:	910a      	str	r1, [sp, #40]	; 0x28
 8016e38:	f7ff f926 	bl	8016088 <__ulp>
 8016e3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016e3e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8016e42:	ec59 8b18 	vmov	r8, r9, d8
 8016e46:	e7aa      	b.n	8016d9e <_strtod_l+0xa66>
 8016e48:	eeb0 7b4d 	vmov.f64	d7, d13
 8016e4c:	e7ea      	b.n	8016e24 <_strtod_l+0xaec>
 8016e4e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8016e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e56:	f57f af71 	bpl.w	8016d3c <_strtod_l+0xa04>
 8016e5a:	e4b5      	b.n	80167c8 <_strtod_l+0x490>
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	9308      	str	r3, [sp, #32]
 8016e60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016e64:	6013      	str	r3, [r2, #0]
 8016e66:	f7ff baa6 	b.w	80163b6 <_strtod_l+0x7e>
 8016e6a:	2a65      	cmp	r2, #101	; 0x65
 8016e6c:	f43f aba2 	beq.w	80165b4 <_strtod_l+0x27c>
 8016e70:	2a45      	cmp	r2, #69	; 0x45
 8016e72:	f43f ab9f 	beq.w	80165b4 <_strtod_l+0x27c>
 8016e76:	2101      	movs	r1, #1
 8016e78:	f7ff bbd8 	b.w	801662c <_strtod_l+0x2f4>
 8016e7c:	f3af 8000 	nop.w
 8016e80:	ffc00000 	.word	0xffc00000
 8016e84:	41dfffff 	.word	0x41dfffff
 8016e88:	000fffff 	.word	0x000fffff
 8016e8c:	7ff00000 	.word	0x7ff00000
 8016e90:	7fefffff 	.word	0x7fefffff
 8016e94:	7c9fffff 	.word	0x7c9fffff
 8016e98:	7fe00000 	.word	0x7fe00000

08016e9c <_strtod_r>:
 8016e9c:	4b01      	ldr	r3, [pc, #4]	; (8016ea4 <_strtod_r+0x8>)
 8016e9e:	f7ff ba4b 	b.w	8016338 <_strtod_l>
 8016ea2:	bf00      	nop
 8016ea4:	24000174 	.word	0x24000174

08016ea8 <_strtol_l.constprop.0>:
 8016ea8:	2b01      	cmp	r3, #1
 8016eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016eae:	d001      	beq.n	8016eb4 <_strtol_l.constprop.0+0xc>
 8016eb0:	2b24      	cmp	r3, #36	; 0x24
 8016eb2:	d906      	bls.n	8016ec2 <_strtol_l.constprop.0+0x1a>
 8016eb4:	f7fd ff0a 	bl	8014ccc <__errno>
 8016eb8:	2316      	movs	r3, #22
 8016eba:	6003      	str	r3, [r0, #0]
 8016ebc:	2000      	movs	r0, #0
 8016ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ec2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016fa8 <_strtol_l.constprop.0+0x100>
 8016ec6:	460d      	mov	r5, r1
 8016ec8:	462e      	mov	r6, r5
 8016eca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ece:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8016ed2:	f017 0708 	ands.w	r7, r7, #8
 8016ed6:	d1f7      	bne.n	8016ec8 <_strtol_l.constprop.0+0x20>
 8016ed8:	2c2d      	cmp	r4, #45	; 0x2d
 8016eda:	d132      	bne.n	8016f42 <_strtol_l.constprop.0+0x9a>
 8016edc:	782c      	ldrb	r4, [r5, #0]
 8016ede:	2701      	movs	r7, #1
 8016ee0:	1cb5      	adds	r5, r6, #2
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d05b      	beq.n	8016f9e <_strtol_l.constprop.0+0xf6>
 8016ee6:	2b10      	cmp	r3, #16
 8016ee8:	d109      	bne.n	8016efe <_strtol_l.constprop.0+0x56>
 8016eea:	2c30      	cmp	r4, #48	; 0x30
 8016eec:	d107      	bne.n	8016efe <_strtol_l.constprop.0+0x56>
 8016eee:	782c      	ldrb	r4, [r5, #0]
 8016ef0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016ef4:	2c58      	cmp	r4, #88	; 0x58
 8016ef6:	d14d      	bne.n	8016f94 <_strtol_l.constprop.0+0xec>
 8016ef8:	786c      	ldrb	r4, [r5, #1]
 8016efa:	2310      	movs	r3, #16
 8016efc:	3502      	adds	r5, #2
 8016efe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016f02:	f108 38ff 	add.w	r8, r8, #4294967295
 8016f06:	f04f 0e00 	mov.w	lr, #0
 8016f0a:	fbb8 f9f3 	udiv	r9, r8, r3
 8016f0e:	4676      	mov	r6, lr
 8016f10:	fb03 8a19 	mls	sl, r3, r9, r8
 8016f14:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016f18:	f1bc 0f09 	cmp.w	ip, #9
 8016f1c:	d816      	bhi.n	8016f4c <_strtol_l.constprop.0+0xa4>
 8016f1e:	4664      	mov	r4, ip
 8016f20:	42a3      	cmp	r3, r4
 8016f22:	dd24      	ble.n	8016f6e <_strtol_l.constprop.0+0xc6>
 8016f24:	f1be 3fff 	cmp.w	lr, #4294967295
 8016f28:	d008      	beq.n	8016f3c <_strtol_l.constprop.0+0x94>
 8016f2a:	45b1      	cmp	r9, r6
 8016f2c:	d31c      	bcc.n	8016f68 <_strtol_l.constprop.0+0xc0>
 8016f2e:	d101      	bne.n	8016f34 <_strtol_l.constprop.0+0x8c>
 8016f30:	45a2      	cmp	sl, r4
 8016f32:	db19      	blt.n	8016f68 <_strtol_l.constprop.0+0xc0>
 8016f34:	fb06 4603 	mla	r6, r6, r3, r4
 8016f38:	f04f 0e01 	mov.w	lr, #1
 8016f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016f40:	e7e8      	b.n	8016f14 <_strtol_l.constprop.0+0x6c>
 8016f42:	2c2b      	cmp	r4, #43	; 0x2b
 8016f44:	bf04      	itt	eq
 8016f46:	782c      	ldrbeq	r4, [r5, #0]
 8016f48:	1cb5      	addeq	r5, r6, #2
 8016f4a:	e7ca      	b.n	8016ee2 <_strtol_l.constprop.0+0x3a>
 8016f4c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016f50:	f1bc 0f19 	cmp.w	ip, #25
 8016f54:	d801      	bhi.n	8016f5a <_strtol_l.constprop.0+0xb2>
 8016f56:	3c37      	subs	r4, #55	; 0x37
 8016f58:	e7e2      	b.n	8016f20 <_strtol_l.constprop.0+0x78>
 8016f5a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016f5e:	f1bc 0f19 	cmp.w	ip, #25
 8016f62:	d804      	bhi.n	8016f6e <_strtol_l.constprop.0+0xc6>
 8016f64:	3c57      	subs	r4, #87	; 0x57
 8016f66:	e7db      	b.n	8016f20 <_strtol_l.constprop.0+0x78>
 8016f68:	f04f 3eff 	mov.w	lr, #4294967295
 8016f6c:	e7e6      	b.n	8016f3c <_strtol_l.constprop.0+0x94>
 8016f6e:	f1be 3fff 	cmp.w	lr, #4294967295
 8016f72:	d105      	bne.n	8016f80 <_strtol_l.constprop.0+0xd8>
 8016f74:	2322      	movs	r3, #34	; 0x22
 8016f76:	6003      	str	r3, [r0, #0]
 8016f78:	4646      	mov	r6, r8
 8016f7a:	b942      	cbnz	r2, 8016f8e <_strtol_l.constprop.0+0xe6>
 8016f7c:	4630      	mov	r0, r6
 8016f7e:	e79e      	b.n	8016ebe <_strtol_l.constprop.0+0x16>
 8016f80:	b107      	cbz	r7, 8016f84 <_strtol_l.constprop.0+0xdc>
 8016f82:	4276      	negs	r6, r6
 8016f84:	2a00      	cmp	r2, #0
 8016f86:	d0f9      	beq.n	8016f7c <_strtol_l.constprop.0+0xd4>
 8016f88:	f1be 0f00 	cmp.w	lr, #0
 8016f8c:	d000      	beq.n	8016f90 <_strtol_l.constprop.0+0xe8>
 8016f8e:	1e69      	subs	r1, r5, #1
 8016f90:	6011      	str	r1, [r2, #0]
 8016f92:	e7f3      	b.n	8016f7c <_strtol_l.constprop.0+0xd4>
 8016f94:	2430      	movs	r4, #48	; 0x30
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d1b1      	bne.n	8016efe <_strtol_l.constprop.0+0x56>
 8016f9a:	2308      	movs	r3, #8
 8016f9c:	e7af      	b.n	8016efe <_strtol_l.constprop.0+0x56>
 8016f9e:	2c30      	cmp	r4, #48	; 0x30
 8016fa0:	d0a5      	beq.n	8016eee <_strtol_l.constprop.0+0x46>
 8016fa2:	230a      	movs	r3, #10
 8016fa4:	e7ab      	b.n	8016efe <_strtol_l.constprop.0+0x56>
 8016fa6:	bf00      	nop
 8016fa8:	080185f9 	.word	0x080185f9

08016fac <_strtol_r>:
 8016fac:	f7ff bf7c 	b.w	8016ea8 <_strtol_l.constprop.0>

08016fb0 <__ssputs_r>:
 8016fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb4:	688e      	ldr	r6, [r1, #8]
 8016fb6:	461f      	mov	r7, r3
 8016fb8:	42be      	cmp	r6, r7
 8016fba:	680b      	ldr	r3, [r1, #0]
 8016fbc:	4682      	mov	sl, r0
 8016fbe:	460c      	mov	r4, r1
 8016fc0:	4690      	mov	r8, r2
 8016fc2:	d82c      	bhi.n	801701e <__ssputs_r+0x6e>
 8016fc4:	898a      	ldrh	r2, [r1, #12]
 8016fc6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016fca:	d026      	beq.n	801701a <__ssputs_r+0x6a>
 8016fcc:	6965      	ldr	r5, [r4, #20]
 8016fce:	6909      	ldr	r1, [r1, #16]
 8016fd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016fd4:	eba3 0901 	sub.w	r9, r3, r1
 8016fd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016fdc:	1c7b      	adds	r3, r7, #1
 8016fde:	444b      	add	r3, r9
 8016fe0:	106d      	asrs	r5, r5, #1
 8016fe2:	429d      	cmp	r5, r3
 8016fe4:	bf38      	it	cc
 8016fe6:	461d      	movcc	r5, r3
 8016fe8:	0553      	lsls	r3, r2, #21
 8016fea:	d527      	bpl.n	801703c <__ssputs_r+0x8c>
 8016fec:	4629      	mov	r1, r5
 8016fee:	f7fc fe19 	bl	8013c24 <_malloc_r>
 8016ff2:	4606      	mov	r6, r0
 8016ff4:	b360      	cbz	r0, 8017050 <__ssputs_r+0xa0>
 8016ff6:	6921      	ldr	r1, [r4, #16]
 8016ff8:	464a      	mov	r2, r9
 8016ffa:	f000 fa0b 	bl	8017414 <memcpy>
 8016ffe:	89a3      	ldrh	r3, [r4, #12]
 8017000:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017008:	81a3      	strh	r3, [r4, #12]
 801700a:	6126      	str	r6, [r4, #16]
 801700c:	6165      	str	r5, [r4, #20]
 801700e:	444e      	add	r6, r9
 8017010:	eba5 0509 	sub.w	r5, r5, r9
 8017014:	6026      	str	r6, [r4, #0]
 8017016:	60a5      	str	r5, [r4, #8]
 8017018:	463e      	mov	r6, r7
 801701a:	42be      	cmp	r6, r7
 801701c:	d900      	bls.n	8017020 <__ssputs_r+0x70>
 801701e:	463e      	mov	r6, r7
 8017020:	6820      	ldr	r0, [r4, #0]
 8017022:	4632      	mov	r2, r6
 8017024:	4641      	mov	r1, r8
 8017026:	f000 f9c9 	bl	80173bc <memmove>
 801702a:	68a3      	ldr	r3, [r4, #8]
 801702c:	1b9b      	subs	r3, r3, r6
 801702e:	60a3      	str	r3, [r4, #8]
 8017030:	6823      	ldr	r3, [r4, #0]
 8017032:	4433      	add	r3, r6
 8017034:	6023      	str	r3, [r4, #0]
 8017036:	2000      	movs	r0, #0
 8017038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801703c:	462a      	mov	r2, r5
 801703e:	f000 fd9c 	bl	8017b7a <_realloc_r>
 8017042:	4606      	mov	r6, r0
 8017044:	2800      	cmp	r0, #0
 8017046:	d1e0      	bne.n	801700a <__ssputs_r+0x5a>
 8017048:	6921      	ldr	r1, [r4, #16]
 801704a:	4650      	mov	r0, sl
 801704c:	f7fe fc64 	bl	8015918 <_free_r>
 8017050:	230c      	movs	r3, #12
 8017052:	f8ca 3000 	str.w	r3, [sl]
 8017056:	89a3      	ldrh	r3, [r4, #12]
 8017058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801705c:	81a3      	strh	r3, [r4, #12]
 801705e:	f04f 30ff 	mov.w	r0, #4294967295
 8017062:	e7e9      	b.n	8017038 <__ssputs_r+0x88>

08017064 <_svfiprintf_r>:
 8017064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017068:	4698      	mov	r8, r3
 801706a:	898b      	ldrh	r3, [r1, #12]
 801706c:	061b      	lsls	r3, r3, #24
 801706e:	b09d      	sub	sp, #116	; 0x74
 8017070:	4607      	mov	r7, r0
 8017072:	460d      	mov	r5, r1
 8017074:	4614      	mov	r4, r2
 8017076:	d50e      	bpl.n	8017096 <_svfiprintf_r+0x32>
 8017078:	690b      	ldr	r3, [r1, #16]
 801707a:	b963      	cbnz	r3, 8017096 <_svfiprintf_r+0x32>
 801707c:	2140      	movs	r1, #64	; 0x40
 801707e:	f7fc fdd1 	bl	8013c24 <_malloc_r>
 8017082:	6028      	str	r0, [r5, #0]
 8017084:	6128      	str	r0, [r5, #16]
 8017086:	b920      	cbnz	r0, 8017092 <_svfiprintf_r+0x2e>
 8017088:	230c      	movs	r3, #12
 801708a:	603b      	str	r3, [r7, #0]
 801708c:	f04f 30ff 	mov.w	r0, #4294967295
 8017090:	e0d0      	b.n	8017234 <_svfiprintf_r+0x1d0>
 8017092:	2340      	movs	r3, #64	; 0x40
 8017094:	616b      	str	r3, [r5, #20]
 8017096:	2300      	movs	r3, #0
 8017098:	9309      	str	r3, [sp, #36]	; 0x24
 801709a:	2320      	movs	r3, #32
 801709c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80170a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80170a4:	2330      	movs	r3, #48	; 0x30
 80170a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801724c <_svfiprintf_r+0x1e8>
 80170aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80170ae:	f04f 0901 	mov.w	r9, #1
 80170b2:	4623      	mov	r3, r4
 80170b4:	469a      	mov	sl, r3
 80170b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80170ba:	b10a      	cbz	r2, 80170c0 <_svfiprintf_r+0x5c>
 80170bc:	2a25      	cmp	r2, #37	; 0x25
 80170be:	d1f9      	bne.n	80170b4 <_svfiprintf_r+0x50>
 80170c0:	ebba 0b04 	subs.w	fp, sl, r4
 80170c4:	d00b      	beq.n	80170de <_svfiprintf_r+0x7a>
 80170c6:	465b      	mov	r3, fp
 80170c8:	4622      	mov	r2, r4
 80170ca:	4629      	mov	r1, r5
 80170cc:	4638      	mov	r0, r7
 80170ce:	f7ff ff6f 	bl	8016fb0 <__ssputs_r>
 80170d2:	3001      	adds	r0, #1
 80170d4:	f000 80a9 	beq.w	801722a <_svfiprintf_r+0x1c6>
 80170d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80170da:	445a      	add	r2, fp
 80170dc:	9209      	str	r2, [sp, #36]	; 0x24
 80170de:	f89a 3000 	ldrb.w	r3, [sl]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	f000 80a1 	beq.w	801722a <_svfiprintf_r+0x1c6>
 80170e8:	2300      	movs	r3, #0
 80170ea:	f04f 32ff 	mov.w	r2, #4294967295
 80170ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80170f2:	f10a 0a01 	add.w	sl, sl, #1
 80170f6:	9304      	str	r3, [sp, #16]
 80170f8:	9307      	str	r3, [sp, #28]
 80170fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80170fe:	931a      	str	r3, [sp, #104]	; 0x68
 8017100:	4654      	mov	r4, sl
 8017102:	2205      	movs	r2, #5
 8017104:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017108:	4850      	ldr	r0, [pc, #320]	; (801724c <_svfiprintf_r+0x1e8>)
 801710a:	f7e9 f901 	bl	8000310 <memchr>
 801710e:	9a04      	ldr	r2, [sp, #16]
 8017110:	b9d8      	cbnz	r0, 801714a <_svfiprintf_r+0xe6>
 8017112:	06d0      	lsls	r0, r2, #27
 8017114:	bf44      	itt	mi
 8017116:	2320      	movmi	r3, #32
 8017118:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801711c:	0711      	lsls	r1, r2, #28
 801711e:	bf44      	itt	mi
 8017120:	232b      	movmi	r3, #43	; 0x2b
 8017122:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017126:	f89a 3000 	ldrb.w	r3, [sl]
 801712a:	2b2a      	cmp	r3, #42	; 0x2a
 801712c:	d015      	beq.n	801715a <_svfiprintf_r+0xf6>
 801712e:	9a07      	ldr	r2, [sp, #28]
 8017130:	4654      	mov	r4, sl
 8017132:	2000      	movs	r0, #0
 8017134:	f04f 0c0a 	mov.w	ip, #10
 8017138:	4621      	mov	r1, r4
 801713a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801713e:	3b30      	subs	r3, #48	; 0x30
 8017140:	2b09      	cmp	r3, #9
 8017142:	d94d      	bls.n	80171e0 <_svfiprintf_r+0x17c>
 8017144:	b1b0      	cbz	r0, 8017174 <_svfiprintf_r+0x110>
 8017146:	9207      	str	r2, [sp, #28]
 8017148:	e014      	b.n	8017174 <_svfiprintf_r+0x110>
 801714a:	eba0 0308 	sub.w	r3, r0, r8
 801714e:	fa09 f303 	lsl.w	r3, r9, r3
 8017152:	4313      	orrs	r3, r2
 8017154:	9304      	str	r3, [sp, #16]
 8017156:	46a2      	mov	sl, r4
 8017158:	e7d2      	b.n	8017100 <_svfiprintf_r+0x9c>
 801715a:	9b03      	ldr	r3, [sp, #12]
 801715c:	1d19      	adds	r1, r3, #4
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	9103      	str	r1, [sp, #12]
 8017162:	2b00      	cmp	r3, #0
 8017164:	bfbb      	ittet	lt
 8017166:	425b      	neglt	r3, r3
 8017168:	f042 0202 	orrlt.w	r2, r2, #2
 801716c:	9307      	strge	r3, [sp, #28]
 801716e:	9307      	strlt	r3, [sp, #28]
 8017170:	bfb8      	it	lt
 8017172:	9204      	strlt	r2, [sp, #16]
 8017174:	7823      	ldrb	r3, [r4, #0]
 8017176:	2b2e      	cmp	r3, #46	; 0x2e
 8017178:	d10c      	bne.n	8017194 <_svfiprintf_r+0x130>
 801717a:	7863      	ldrb	r3, [r4, #1]
 801717c:	2b2a      	cmp	r3, #42	; 0x2a
 801717e:	d134      	bne.n	80171ea <_svfiprintf_r+0x186>
 8017180:	9b03      	ldr	r3, [sp, #12]
 8017182:	1d1a      	adds	r2, r3, #4
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	9203      	str	r2, [sp, #12]
 8017188:	2b00      	cmp	r3, #0
 801718a:	bfb8      	it	lt
 801718c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017190:	3402      	adds	r4, #2
 8017192:	9305      	str	r3, [sp, #20]
 8017194:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801725c <_svfiprintf_r+0x1f8>
 8017198:	7821      	ldrb	r1, [r4, #0]
 801719a:	2203      	movs	r2, #3
 801719c:	4650      	mov	r0, sl
 801719e:	f7e9 f8b7 	bl	8000310 <memchr>
 80171a2:	b138      	cbz	r0, 80171b4 <_svfiprintf_r+0x150>
 80171a4:	9b04      	ldr	r3, [sp, #16]
 80171a6:	eba0 000a 	sub.w	r0, r0, sl
 80171aa:	2240      	movs	r2, #64	; 0x40
 80171ac:	4082      	lsls	r2, r0
 80171ae:	4313      	orrs	r3, r2
 80171b0:	3401      	adds	r4, #1
 80171b2:	9304      	str	r3, [sp, #16]
 80171b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80171b8:	4825      	ldr	r0, [pc, #148]	; (8017250 <_svfiprintf_r+0x1ec>)
 80171ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80171be:	2206      	movs	r2, #6
 80171c0:	f7e9 f8a6 	bl	8000310 <memchr>
 80171c4:	2800      	cmp	r0, #0
 80171c6:	d038      	beq.n	801723a <_svfiprintf_r+0x1d6>
 80171c8:	4b22      	ldr	r3, [pc, #136]	; (8017254 <_svfiprintf_r+0x1f0>)
 80171ca:	bb1b      	cbnz	r3, 8017214 <_svfiprintf_r+0x1b0>
 80171cc:	9b03      	ldr	r3, [sp, #12]
 80171ce:	3307      	adds	r3, #7
 80171d0:	f023 0307 	bic.w	r3, r3, #7
 80171d4:	3308      	adds	r3, #8
 80171d6:	9303      	str	r3, [sp, #12]
 80171d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171da:	4433      	add	r3, r6
 80171dc:	9309      	str	r3, [sp, #36]	; 0x24
 80171de:	e768      	b.n	80170b2 <_svfiprintf_r+0x4e>
 80171e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80171e4:	460c      	mov	r4, r1
 80171e6:	2001      	movs	r0, #1
 80171e8:	e7a6      	b.n	8017138 <_svfiprintf_r+0xd4>
 80171ea:	2300      	movs	r3, #0
 80171ec:	3401      	adds	r4, #1
 80171ee:	9305      	str	r3, [sp, #20]
 80171f0:	4619      	mov	r1, r3
 80171f2:	f04f 0c0a 	mov.w	ip, #10
 80171f6:	4620      	mov	r0, r4
 80171f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80171fc:	3a30      	subs	r2, #48	; 0x30
 80171fe:	2a09      	cmp	r2, #9
 8017200:	d903      	bls.n	801720a <_svfiprintf_r+0x1a6>
 8017202:	2b00      	cmp	r3, #0
 8017204:	d0c6      	beq.n	8017194 <_svfiprintf_r+0x130>
 8017206:	9105      	str	r1, [sp, #20]
 8017208:	e7c4      	b.n	8017194 <_svfiprintf_r+0x130>
 801720a:	fb0c 2101 	mla	r1, ip, r1, r2
 801720e:	4604      	mov	r4, r0
 8017210:	2301      	movs	r3, #1
 8017212:	e7f0      	b.n	80171f6 <_svfiprintf_r+0x192>
 8017214:	ab03      	add	r3, sp, #12
 8017216:	9300      	str	r3, [sp, #0]
 8017218:	462a      	mov	r2, r5
 801721a:	4b0f      	ldr	r3, [pc, #60]	; (8017258 <_svfiprintf_r+0x1f4>)
 801721c:	a904      	add	r1, sp, #16
 801721e:	4638      	mov	r0, r7
 8017220:	f7fc fe1e 	bl	8013e60 <_printf_float>
 8017224:	1c42      	adds	r2, r0, #1
 8017226:	4606      	mov	r6, r0
 8017228:	d1d6      	bne.n	80171d8 <_svfiprintf_r+0x174>
 801722a:	89ab      	ldrh	r3, [r5, #12]
 801722c:	065b      	lsls	r3, r3, #25
 801722e:	f53f af2d 	bmi.w	801708c <_svfiprintf_r+0x28>
 8017232:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017234:	b01d      	add	sp, #116	; 0x74
 8017236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801723a:	ab03      	add	r3, sp, #12
 801723c:	9300      	str	r3, [sp, #0]
 801723e:	462a      	mov	r2, r5
 8017240:	4b05      	ldr	r3, [pc, #20]	; (8017258 <_svfiprintf_r+0x1f4>)
 8017242:	a904      	add	r1, sp, #16
 8017244:	4638      	mov	r0, r7
 8017246:	f7fd f893 	bl	8014370 <_printf_i>
 801724a:	e7eb      	b.n	8017224 <_svfiprintf_r+0x1c0>
 801724c:	080186f9 	.word	0x080186f9
 8017250:	08018703 	.word	0x08018703
 8017254:	08013e61 	.word	0x08013e61
 8017258:	08016fb1 	.word	0x08016fb1
 801725c:	080186ff 	.word	0x080186ff

08017260 <__sflush_r>:
 8017260:	898a      	ldrh	r2, [r1, #12]
 8017262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017266:	4605      	mov	r5, r0
 8017268:	0710      	lsls	r0, r2, #28
 801726a:	460c      	mov	r4, r1
 801726c:	d458      	bmi.n	8017320 <__sflush_r+0xc0>
 801726e:	684b      	ldr	r3, [r1, #4]
 8017270:	2b00      	cmp	r3, #0
 8017272:	dc05      	bgt.n	8017280 <__sflush_r+0x20>
 8017274:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017276:	2b00      	cmp	r3, #0
 8017278:	dc02      	bgt.n	8017280 <__sflush_r+0x20>
 801727a:	2000      	movs	r0, #0
 801727c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017282:	2e00      	cmp	r6, #0
 8017284:	d0f9      	beq.n	801727a <__sflush_r+0x1a>
 8017286:	2300      	movs	r3, #0
 8017288:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801728c:	682f      	ldr	r7, [r5, #0]
 801728e:	6a21      	ldr	r1, [r4, #32]
 8017290:	602b      	str	r3, [r5, #0]
 8017292:	d032      	beq.n	80172fa <__sflush_r+0x9a>
 8017294:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017296:	89a3      	ldrh	r3, [r4, #12]
 8017298:	075a      	lsls	r2, r3, #29
 801729a:	d505      	bpl.n	80172a8 <__sflush_r+0x48>
 801729c:	6863      	ldr	r3, [r4, #4]
 801729e:	1ac0      	subs	r0, r0, r3
 80172a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80172a2:	b10b      	cbz	r3, 80172a8 <__sflush_r+0x48>
 80172a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80172a6:	1ac0      	subs	r0, r0, r3
 80172a8:	2300      	movs	r3, #0
 80172aa:	4602      	mov	r2, r0
 80172ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80172ae:	6a21      	ldr	r1, [r4, #32]
 80172b0:	4628      	mov	r0, r5
 80172b2:	47b0      	blx	r6
 80172b4:	1c43      	adds	r3, r0, #1
 80172b6:	89a3      	ldrh	r3, [r4, #12]
 80172b8:	d106      	bne.n	80172c8 <__sflush_r+0x68>
 80172ba:	6829      	ldr	r1, [r5, #0]
 80172bc:	291d      	cmp	r1, #29
 80172be:	d82b      	bhi.n	8017318 <__sflush_r+0xb8>
 80172c0:	4a29      	ldr	r2, [pc, #164]	; (8017368 <__sflush_r+0x108>)
 80172c2:	410a      	asrs	r2, r1
 80172c4:	07d6      	lsls	r6, r2, #31
 80172c6:	d427      	bmi.n	8017318 <__sflush_r+0xb8>
 80172c8:	2200      	movs	r2, #0
 80172ca:	6062      	str	r2, [r4, #4]
 80172cc:	04d9      	lsls	r1, r3, #19
 80172ce:	6922      	ldr	r2, [r4, #16]
 80172d0:	6022      	str	r2, [r4, #0]
 80172d2:	d504      	bpl.n	80172de <__sflush_r+0x7e>
 80172d4:	1c42      	adds	r2, r0, #1
 80172d6:	d101      	bne.n	80172dc <__sflush_r+0x7c>
 80172d8:	682b      	ldr	r3, [r5, #0]
 80172da:	b903      	cbnz	r3, 80172de <__sflush_r+0x7e>
 80172dc:	6560      	str	r0, [r4, #84]	; 0x54
 80172de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80172e0:	602f      	str	r7, [r5, #0]
 80172e2:	2900      	cmp	r1, #0
 80172e4:	d0c9      	beq.n	801727a <__sflush_r+0x1a>
 80172e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80172ea:	4299      	cmp	r1, r3
 80172ec:	d002      	beq.n	80172f4 <__sflush_r+0x94>
 80172ee:	4628      	mov	r0, r5
 80172f0:	f7fe fb12 	bl	8015918 <_free_r>
 80172f4:	2000      	movs	r0, #0
 80172f6:	6360      	str	r0, [r4, #52]	; 0x34
 80172f8:	e7c0      	b.n	801727c <__sflush_r+0x1c>
 80172fa:	2301      	movs	r3, #1
 80172fc:	4628      	mov	r0, r5
 80172fe:	47b0      	blx	r6
 8017300:	1c41      	adds	r1, r0, #1
 8017302:	d1c8      	bne.n	8017296 <__sflush_r+0x36>
 8017304:	682b      	ldr	r3, [r5, #0]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d0c5      	beq.n	8017296 <__sflush_r+0x36>
 801730a:	2b1d      	cmp	r3, #29
 801730c:	d001      	beq.n	8017312 <__sflush_r+0xb2>
 801730e:	2b16      	cmp	r3, #22
 8017310:	d101      	bne.n	8017316 <__sflush_r+0xb6>
 8017312:	602f      	str	r7, [r5, #0]
 8017314:	e7b1      	b.n	801727a <__sflush_r+0x1a>
 8017316:	89a3      	ldrh	r3, [r4, #12]
 8017318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801731c:	81a3      	strh	r3, [r4, #12]
 801731e:	e7ad      	b.n	801727c <__sflush_r+0x1c>
 8017320:	690f      	ldr	r7, [r1, #16]
 8017322:	2f00      	cmp	r7, #0
 8017324:	d0a9      	beq.n	801727a <__sflush_r+0x1a>
 8017326:	0793      	lsls	r3, r2, #30
 8017328:	680e      	ldr	r6, [r1, #0]
 801732a:	bf08      	it	eq
 801732c:	694b      	ldreq	r3, [r1, #20]
 801732e:	600f      	str	r7, [r1, #0]
 8017330:	bf18      	it	ne
 8017332:	2300      	movne	r3, #0
 8017334:	eba6 0807 	sub.w	r8, r6, r7
 8017338:	608b      	str	r3, [r1, #8]
 801733a:	f1b8 0f00 	cmp.w	r8, #0
 801733e:	dd9c      	ble.n	801727a <__sflush_r+0x1a>
 8017340:	6a21      	ldr	r1, [r4, #32]
 8017342:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017344:	4643      	mov	r3, r8
 8017346:	463a      	mov	r2, r7
 8017348:	4628      	mov	r0, r5
 801734a:	47b0      	blx	r6
 801734c:	2800      	cmp	r0, #0
 801734e:	dc06      	bgt.n	801735e <__sflush_r+0xfe>
 8017350:	89a3      	ldrh	r3, [r4, #12]
 8017352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017356:	81a3      	strh	r3, [r4, #12]
 8017358:	f04f 30ff 	mov.w	r0, #4294967295
 801735c:	e78e      	b.n	801727c <__sflush_r+0x1c>
 801735e:	4407      	add	r7, r0
 8017360:	eba8 0800 	sub.w	r8, r8, r0
 8017364:	e7e9      	b.n	801733a <__sflush_r+0xda>
 8017366:	bf00      	nop
 8017368:	dfbffffe 	.word	0xdfbffffe

0801736c <_fflush_r>:
 801736c:	b538      	push	{r3, r4, r5, lr}
 801736e:	690b      	ldr	r3, [r1, #16]
 8017370:	4605      	mov	r5, r0
 8017372:	460c      	mov	r4, r1
 8017374:	b913      	cbnz	r3, 801737c <_fflush_r+0x10>
 8017376:	2500      	movs	r5, #0
 8017378:	4628      	mov	r0, r5
 801737a:	bd38      	pop	{r3, r4, r5, pc}
 801737c:	b118      	cbz	r0, 8017386 <_fflush_r+0x1a>
 801737e:	6a03      	ldr	r3, [r0, #32]
 8017380:	b90b      	cbnz	r3, 8017386 <_fflush_r+0x1a>
 8017382:	f7fd fba7 	bl	8014ad4 <__sinit>
 8017386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801738a:	2b00      	cmp	r3, #0
 801738c:	d0f3      	beq.n	8017376 <_fflush_r+0xa>
 801738e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017390:	07d0      	lsls	r0, r2, #31
 8017392:	d404      	bmi.n	801739e <_fflush_r+0x32>
 8017394:	0599      	lsls	r1, r3, #22
 8017396:	d402      	bmi.n	801739e <_fflush_r+0x32>
 8017398:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801739a:	f7eb fec6 	bl	800312a <__retarget_lock_acquire_recursive>
 801739e:	4628      	mov	r0, r5
 80173a0:	4621      	mov	r1, r4
 80173a2:	f7ff ff5d 	bl	8017260 <__sflush_r>
 80173a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80173a8:	07da      	lsls	r2, r3, #31
 80173aa:	4605      	mov	r5, r0
 80173ac:	d4e4      	bmi.n	8017378 <_fflush_r+0xc>
 80173ae:	89a3      	ldrh	r3, [r4, #12]
 80173b0:	059b      	lsls	r3, r3, #22
 80173b2:	d4e1      	bmi.n	8017378 <_fflush_r+0xc>
 80173b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80173b6:	f7eb fecc 	bl	8003152 <__retarget_lock_release_recursive>
 80173ba:	e7dd      	b.n	8017378 <_fflush_r+0xc>

080173bc <memmove>:
 80173bc:	4288      	cmp	r0, r1
 80173be:	b510      	push	{r4, lr}
 80173c0:	eb01 0402 	add.w	r4, r1, r2
 80173c4:	d902      	bls.n	80173cc <memmove+0x10>
 80173c6:	4284      	cmp	r4, r0
 80173c8:	4623      	mov	r3, r4
 80173ca:	d807      	bhi.n	80173dc <memmove+0x20>
 80173cc:	1e43      	subs	r3, r0, #1
 80173ce:	42a1      	cmp	r1, r4
 80173d0:	d008      	beq.n	80173e4 <memmove+0x28>
 80173d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80173d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80173da:	e7f8      	b.n	80173ce <memmove+0x12>
 80173dc:	4402      	add	r2, r0
 80173de:	4601      	mov	r1, r0
 80173e0:	428a      	cmp	r2, r1
 80173e2:	d100      	bne.n	80173e6 <memmove+0x2a>
 80173e4:	bd10      	pop	{r4, pc}
 80173e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80173ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80173ee:	e7f7      	b.n	80173e0 <memmove+0x24>

080173f0 <strncmp>:
 80173f0:	b510      	push	{r4, lr}
 80173f2:	b16a      	cbz	r2, 8017410 <strncmp+0x20>
 80173f4:	3901      	subs	r1, #1
 80173f6:	1884      	adds	r4, r0, r2
 80173f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017400:	429a      	cmp	r2, r3
 8017402:	d103      	bne.n	801740c <strncmp+0x1c>
 8017404:	42a0      	cmp	r0, r4
 8017406:	d001      	beq.n	801740c <strncmp+0x1c>
 8017408:	2a00      	cmp	r2, #0
 801740a:	d1f5      	bne.n	80173f8 <strncmp+0x8>
 801740c:	1ad0      	subs	r0, r2, r3
 801740e:	bd10      	pop	{r4, pc}
 8017410:	4610      	mov	r0, r2
 8017412:	e7fc      	b.n	801740e <strncmp+0x1e>

08017414 <memcpy>:
 8017414:	440a      	add	r2, r1
 8017416:	4291      	cmp	r1, r2
 8017418:	f100 33ff 	add.w	r3, r0, #4294967295
 801741c:	d100      	bne.n	8017420 <memcpy+0xc>
 801741e:	4770      	bx	lr
 8017420:	b510      	push	{r4, lr}
 8017422:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017426:	f803 4f01 	strb.w	r4, [r3, #1]!
 801742a:	4291      	cmp	r1, r2
 801742c:	d1f9      	bne.n	8017422 <memcpy+0xe>
 801742e:	bd10      	pop	{r4, pc}

08017430 <nan>:
 8017430:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017438 <nan+0x8>
 8017434:	4770      	bx	lr
 8017436:	bf00      	nop
 8017438:	00000000 	.word	0x00000000
 801743c:	7ff80000 	.word	0x7ff80000

08017440 <__assert_func>:
 8017440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017442:	4614      	mov	r4, r2
 8017444:	461a      	mov	r2, r3
 8017446:	4b09      	ldr	r3, [pc, #36]	; (801746c <__assert_func+0x2c>)
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	4605      	mov	r5, r0
 801744c:	68d8      	ldr	r0, [r3, #12]
 801744e:	b14c      	cbz	r4, 8017464 <__assert_func+0x24>
 8017450:	4b07      	ldr	r3, [pc, #28]	; (8017470 <__assert_func+0x30>)
 8017452:	9100      	str	r1, [sp, #0]
 8017454:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017458:	4906      	ldr	r1, [pc, #24]	; (8017474 <__assert_func+0x34>)
 801745a:	462b      	mov	r3, r5
 801745c:	f000 fbca 	bl	8017bf4 <fiprintf>
 8017460:	f000 fbda 	bl	8017c18 <abort>
 8017464:	4b04      	ldr	r3, [pc, #16]	; (8017478 <__assert_func+0x38>)
 8017466:	461c      	mov	r4, r3
 8017468:	e7f3      	b.n	8017452 <__assert_func+0x12>
 801746a:	bf00      	nop
 801746c:	24000170 	.word	0x24000170
 8017470:	08018712 	.word	0x08018712
 8017474:	0801871f 	.word	0x0801871f
 8017478:	0801874d 	.word	0x0801874d

0801747c <_calloc_r>:
 801747c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801747e:	fba1 2402 	umull	r2, r4, r1, r2
 8017482:	b94c      	cbnz	r4, 8017498 <_calloc_r+0x1c>
 8017484:	4611      	mov	r1, r2
 8017486:	9201      	str	r2, [sp, #4]
 8017488:	f7fc fbcc 	bl	8013c24 <_malloc_r>
 801748c:	9a01      	ldr	r2, [sp, #4]
 801748e:	4605      	mov	r5, r0
 8017490:	b930      	cbnz	r0, 80174a0 <_calloc_r+0x24>
 8017492:	4628      	mov	r0, r5
 8017494:	b003      	add	sp, #12
 8017496:	bd30      	pop	{r4, r5, pc}
 8017498:	220c      	movs	r2, #12
 801749a:	6002      	str	r2, [r0, #0]
 801749c:	2500      	movs	r5, #0
 801749e:	e7f8      	b.n	8017492 <_calloc_r+0x16>
 80174a0:	4621      	mov	r1, r4
 80174a2:	f7fd fbb0 	bl	8014c06 <memset>
 80174a6:	e7f4      	b.n	8017492 <_calloc_r+0x16>

080174a8 <rshift>:
 80174a8:	6903      	ldr	r3, [r0, #16]
 80174aa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80174ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80174b2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80174b6:	f100 0414 	add.w	r4, r0, #20
 80174ba:	dd45      	ble.n	8017548 <rshift+0xa0>
 80174bc:	f011 011f 	ands.w	r1, r1, #31
 80174c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80174c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80174c8:	d10c      	bne.n	80174e4 <rshift+0x3c>
 80174ca:	f100 0710 	add.w	r7, r0, #16
 80174ce:	4629      	mov	r1, r5
 80174d0:	42b1      	cmp	r1, r6
 80174d2:	d334      	bcc.n	801753e <rshift+0x96>
 80174d4:	1a9b      	subs	r3, r3, r2
 80174d6:	009b      	lsls	r3, r3, #2
 80174d8:	1eea      	subs	r2, r5, #3
 80174da:	4296      	cmp	r6, r2
 80174dc:	bf38      	it	cc
 80174de:	2300      	movcc	r3, #0
 80174e0:	4423      	add	r3, r4
 80174e2:	e015      	b.n	8017510 <rshift+0x68>
 80174e4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80174e8:	f1c1 0820 	rsb	r8, r1, #32
 80174ec:	40cf      	lsrs	r7, r1
 80174ee:	f105 0e04 	add.w	lr, r5, #4
 80174f2:	46a1      	mov	r9, r4
 80174f4:	4576      	cmp	r6, lr
 80174f6:	46f4      	mov	ip, lr
 80174f8:	d815      	bhi.n	8017526 <rshift+0x7e>
 80174fa:	1a9a      	subs	r2, r3, r2
 80174fc:	0092      	lsls	r2, r2, #2
 80174fe:	3a04      	subs	r2, #4
 8017500:	3501      	adds	r5, #1
 8017502:	42ae      	cmp	r6, r5
 8017504:	bf38      	it	cc
 8017506:	2200      	movcc	r2, #0
 8017508:	18a3      	adds	r3, r4, r2
 801750a:	50a7      	str	r7, [r4, r2]
 801750c:	b107      	cbz	r7, 8017510 <rshift+0x68>
 801750e:	3304      	adds	r3, #4
 8017510:	1b1a      	subs	r2, r3, r4
 8017512:	42a3      	cmp	r3, r4
 8017514:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017518:	bf08      	it	eq
 801751a:	2300      	moveq	r3, #0
 801751c:	6102      	str	r2, [r0, #16]
 801751e:	bf08      	it	eq
 8017520:	6143      	streq	r3, [r0, #20]
 8017522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017526:	f8dc c000 	ldr.w	ip, [ip]
 801752a:	fa0c fc08 	lsl.w	ip, ip, r8
 801752e:	ea4c 0707 	orr.w	r7, ip, r7
 8017532:	f849 7b04 	str.w	r7, [r9], #4
 8017536:	f85e 7b04 	ldr.w	r7, [lr], #4
 801753a:	40cf      	lsrs	r7, r1
 801753c:	e7da      	b.n	80174f4 <rshift+0x4c>
 801753e:	f851 cb04 	ldr.w	ip, [r1], #4
 8017542:	f847 cf04 	str.w	ip, [r7, #4]!
 8017546:	e7c3      	b.n	80174d0 <rshift+0x28>
 8017548:	4623      	mov	r3, r4
 801754a:	e7e1      	b.n	8017510 <rshift+0x68>

0801754c <__hexdig_fun>:
 801754c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017550:	2b09      	cmp	r3, #9
 8017552:	d802      	bhi.n	801755a <__hexdig_fun+0xe>
 8017554:	3820      	subs	r0, #32
 8017556:	b2c0      	uxtb	r0, r0
 8017558:	4770      	bx	lr
 801755a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801755e:	2b05      	cmp	r3, #5
 8017560:	d801      	bhi.n	8017566 <__hexdig_fun+0x1a>
 8017562:	3847      	subs	r0, #71	; 0x47
 8017564:	e7f7      	b.n	8017556 <__hexdig_fun+0xa>
 8017566:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801756a:	2b05      	cmp	r3, #5
 801756c:	d801      	bhi.n	8017572 <__hexdig_fun+0x26>
 801756e:	3827      	subs	r0, #39	; 0x27
 8017570:	e7f1      	b.n	8017556 <__hexdig_fun+0xa>
 8017572:	2000      	movs	r0, #0
 8017574:	4770      	bx	lr
	...

08017578 <__gethex>:
 8017578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801757c:	4617      	mov	r7, r2
 801757e:	680a      	ldr	r2, [r1, #0]
 8017580:	b085      	sub	sp, #20
 8017582:	f102 0b02 	add.w	fp, r2, #2
 8017586:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801758a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801758e:	4681      	mov	r9, r0
 8017590:	468a      	mov	sl, r1
 8017592:	9302      	str	r3, [sp, #8]
 8017594:	32fe      	adds	r2, #254	; 0xfe
 8017596:	eb02 030b 	add.w	r3, r2, fp
 801759a:	46d8      	mov	r8, fp
 801759c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80175a0:	9301      	str	r3, [sp, #4]
 80175a2:	2830      	cmp	r0, #48	; 0x30
 80175a4:	d0f7      	beq.n	8017596 <__gethex+0x1e>
 80175a6:	f7ff ffd1 	bl	801754c <__hexdig_fun>
 80175aa:	4604      	mov	r4, r0
 80175ac:	2800      	cmp	r0, #0
 80175ae:	d138      	bne.n	8017622 <__gethex+0xaa>
 80175b0:	49a7      	ldr	r1, [pc, #668]	; (8017850 <__gethex+0x2d8>)
 80175b2:	2201      	movs	r2, #1
 80175b4:	4640      	mov	r0, r8
 80175b6:	f7ff ff1b 	bl	80173f0 <strncmp>
 80175ba:	4606      	mov	r6, r0
 80175bc:	2800      	cmp	r0, #0
 80175be:	d169      	bne.n	8017694 <__gethex+0x11c>
 80175c0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80175c4:	465d      	mov	r5, fp
 80175c6:	f7ff ffc1 	bl	801754c <__hexdig_fun>
 80175ca:	2800      	cmp	r0, #0
 80175cc:	d064      	beq.n	8017698 <__gethex+0x120>
 80175ce:	465a      	mov	r2, fp
 80175d0:	7810      	ldrb	r0, [r2, #0]
 80175d2:	2830      	cmp	r0, #48	; 0x30
 80175d4:	4690      	mov	r8, r2
 80175d6:	f102 0201 	add.w	r2, r2, #1
 80175da:	d0f9      	beq.n	80175d0 <__gethex+0x58>
 80175dc:	f7ff ffb6 	bl	801754c <__hexdig_fun>
 80175e0:	2301      	movs	r3, #1
 80175e2:	fab0 f480 	clz	r4, r0
 80175e6:	0964      	lsrs	r4, r4, #5
 80175e8:	465e      	mov	r6, fp
 80175ea:	9301      	str	r3, [sp, #4]
 80175ec:	4642      	mov	r2, r8
 80175ee:	4615      	mov	r5, r2
 80175f0:	3201      	adds	r2, #1
 80175f2:	7828      	ldrb	r0, [r5, #0]
 80175f4:	f7ff ffaa 	bl	801754c <__hexdig_fun>
 80175f8:	2800      	cmp	r0, #0
 80175fa:	d1f8      	bne.n	80175ee <__gethex+0x76>
 80175fc:	4994      	ldr	r1, [pc, #592]	; (8017850 <__gethex+0x2d8>)
 80175fe:	2201      	movs	r2, #1
 8017600:	4628      	mov	r0, r5
 8017602:	f7ff fef5 	bl	80173f0 <strncmp>
 8017606:	b978      	cbnz	r0, 8017628 <__gethex+0xb0>
 8017608:	b946      	cbnz	r6, 801761c <__gethex+0xa4>
 801760a:	1c6e      	adds	r6, r5, #1
 801760c:	4632      	mov	r2, r6
 801760e:	4615      	mov	r5, r2
 8017610:	3201      	adds	r2, #1
 8017612:	7828      	ldrb	r0, [r5, #0]
 8017614:	f7ff ff9a 	bl	801754c <__hexdig_fun>
 8017618:	2800      	cmp	r0, #0
 801761a:	d1f8      	bne.n	801760e <__gethex+0x96>
 801761c:	1b73      	subs	r3, r6, r5
 801761e:	009e      	lsls	r6, r3, #2
 8017620:	e004      	b.n	801762c <__gethex+0xb4>
 8017622:	2400      	movs	r4, #0
 8017624:	4626      	mov	r6, r4
 8017626:	e7e1      	b.n	80175ec <__gethex+0x74>
 8017628:	2e00      	cmp	r6, #0
 801762a:	d1f7      	bne.n	801761c <__gethex+0xa4>
 801762c:	782b      	ldrb	r3, [r5, #0]
 801762e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017632:	2b50      	cmp	r3, #80	; 0x50
 8017634:	d13d      	bne.n	80176b2 <__gethex+0x13a>
 8017636:	786b      	ldrb	r3, [r5, #1]
 8017638:	2b2b      	cmp	r3, #43	; 0x2b
 801763a:	d02f      	beq.n	801769c <__gethex+0x124>
 801763c:	2b2d      	cmp	r3, #45	; 0x2d
 801763e:	d031      	beq.n	80176a4 <__gethex+0x12c>
 8017640:	1c69      	adds	r1, r5, #1
 8017642:	f04f 0b00 	mov.w	fp, #0
 8017646:	7808      	ldrb	r0, [r1, #0]
 8017648:	f7ff ff80 	bl	801754c <__hexdig_fun>
 801764c:	1e42      	subs	r2, r0, #1
 801764e:	b2d2      	uxtb	r2, r2
 8017650:	2a18      	cmp	r2, #24
 8017652:	d82e      	bhi.n	80176b2 <__gethex+0x13a>
 8017654:	f1a0 0210 	sub.w	r2, r0, #16
 8017658:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801765c:	f7ff ff76 	bl	801754c <__hexdig_fun>
 8017660:	f100 3cff 	add.w	ip, r0, #4294967295
 8017664:	fa5f fc8c 	uxtb.w	ip, ip
 8017668:	f1bc 0f18 	cmp.w	ip, #24
 801766c:	d91d      	bls.n	80176aa <__gethex+0x132>
 801766e:	f1bb 0f00 	cmp.w	fp, #0
 8017672:	d000      	beq.n	8017676 <__gethex+0xfe>
 8017674:	4252      	negs	r2, r2
 8017676:	4416      	add	r6, r2
 8017678:	f8ca 1000 	str.w	r1, [sl]
 801767c:	b1dc      	cbz	r4, 80176b6 <__gethex+0x13e>
 801767e:	9b01      	ldr	r3, [sp, #4]
 8017680:	2b00      	cmp	r3, #0
 8017682:	bf14      	ite	ne
 8017684:	f04f 0800 	movne.w	r8, #0
 8017688:	f04f 0806 	moveq.w	r8, #6
 801768c:	4640      	mov	r0, r8
 801768e:	b005      	add	sp, #20
 8017690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017694:	4645      	mov	r5, r8
 8017696:	4626      	mov	r6, r4
 8017698:	2401      	movs	r4, #1
 801769a:	e7c7      	b.n	801762c <__gethex+0xb4>
 801769c:	f04f 0b00 	mov.w	fp, #0
 80176a0:	1ca9      	adds	r1, r5, #2
 80176a2:	e7d0      	b.n	8017646 <__gethex+0xce>
 80176a4:	f04f 0b01 	mov.w	fp, #1
 80176a8:	e7fa      	b.n	80176a0 <__gethex+0x128>
 80176aa:	230a      	movs	r3, #10
 80176ac:	fb03 0002 	mla	r0, r3, r2, r0
 80176b0:	e7d0      	b.n	8017654 <__gethex+0xdc>
 80176b2:	4629      	mov	r1, r5
 80176b4:	e7e0      	b.n	8017678 <__gethex+0x100>
 80176b6:	eba5 0308 	sub.w	r3, r5, r8
 80176ba:	3b01      	subs	r3, #1
 80176bc:	4621      	mov	r1, r4
 80176be:	2b07      	cmp	r3, #7
 80176c0:	dc0a      	bgt.n	80176d8 <__gethex+0x160>
 80176c2:	4648      	mov	r0, r9
 80176c4:	f7fe f974 	bl	80159b0 <_Balloc>
 80176c8:	4604      	mov	r4, r0
 80176ca:	b940      	cbnz	r0, 80176de <__gethex+0x166>
 80176cc:	4b61      	ldr	r3, [pc, #388]	; (8017854 <__gethex+0x2dc>)
 80176ce:	4602      	mov	r2, r0
 80176d0:	21e4      	movs	r1, #228	; 0xe4
 80176d2:	4861      	ldr	r0, [pc, #388]	; (8017858 <__gethex+0x2e0>)
 80176d4:	f7ff feb4 	bl	8017440 <__assert_func>
 80176d8:	3101      	adds	r1, #1
 80176da:	105b      	asrs	r3, r3, #1
 80176dc:	e7ef      	b.n	80176be <__gethex+0x146>
 80176de:	f100 0a14 	add.w	sl, r0, #20
 80176e2:	2300      	movs	r3, #0
 80176e4:	495a      	ldr	r1, [pc, #360]	; (8017850 <__gethex+0x2d8>)
 80176e6:	f8cd a004 	str.w	sl, [sp, #4]
 80176ea:	469b      	mov	fp, r3
 80176ec:	45a8      	cmp	r8, r5
 80176ee:	d342      	bcc.n	8017776 <__gethex+0x1fe>
 80176f0:	9801      	ldr	r0, [sp, #4]
 80176f2:	f840 bb04 	str.w	fp, [r0], #4
 80176f6:	eba0 000a 	sub.w	r0, r0, sl
 80176fa:	1080      	asrs	r0, r0, #2
 80176fc:	6120      	str	r0, [r4, #16]
 80176fe:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8017702:	4658      	mov	r0, fp
 8017704:	f7fe fa46 	bl	8015b94 <__hi0bits>
 8017708:	683d      	ldr	r5, [r7, #0]
 801770a:	eba8 0000 	sub.w	r0, r8, r0
 801770e:	42a8      	cmp	r0, r5
 8017710:	dd59      	ble.n	80177c6 <__gethex+0x24e>
 8017712:	eba0 0805 	sub.w	r8, r0, r5
 8017716:	4641      	mov	r1, r8
 8017718:	4620      	mov	r0, r4
 801771a:	f7fe fdd2 	bl	80162c2 <__any_on>
 801771e:	4683      	mov	fp, r0
 8017720:	b1b8      	cbz	r0, 8017752 <__gethex+0x1da>
 8017722:	f108 33ff 	add.w	r3, r8, #4294967295
 8017726:	1159      	asrs	r1, r3, #5
 8017728:	f003 021f 	and.w	r2, r3, #31
 801772c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017730:	f04f 0b01 	mov.w	fp, #1
 8017734:	fa0b f202 	lsl.w	r2, fp, r2
 8017738:	420a      	tst	r2, r1
 801773a:	d00a      	beq.n	8017752 <__gethex+0x1da>
 801773c:	455b      	cmp	r3, fp
 801773e:	dd06      	ble.n	801774e <__gethex+0x1d6>
 8017740:	f1a8 0102 	sub.w	r1, r8, #2
 8017744:	4620      	mov	r0, r4
 8017746:	f7fe fdbc 	bl	80162c2 <__any_on>
 801774a:	2800      	cmp	r0, #0
 801774c:	d138      	bne.n	80177c0 <__gethex+0x248>
 801774e:	f04f 0b02 	mov.w	fp, #2
 8017752:	4641      	mov	r1, r8
 8017754:	4620      	mov	r0, r4
 8017756:	f7ff fea7 	bl	80174a8 <rshift>
 801775a:	4446      	add	r6, r8
 801775c:	68bb      	ldr	r3, [r7, #8]
 801775e:	42b3      	cmp	r3, r6
 8017760:	da41      	bge.n	80177e6 <__gethex+0x26e>
 8017762:	4621      	mov	r1, r4
 8017764:	4648      	mov	r0, r9
 8017766:	f7fe f963 	bl	8015a30 <_Bfree>
 801776a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801776c:	2300      	movs	r3, #0
 801776e:	6013      	str	r3, [r2, #0]
 8017770:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017774:	e78a      	b.n	801768c <__gethex+0x114>
 8017776:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801777a:	2a2e      	cmp	r2, #46	; 0x2e
 801777c:	d014      	beq.n	80177a8 <__gethex+0x230>
 801777e:	2b20      	cmp	r3, #32
 8017780:	d106      	bne.n	8017790 <__gethex+0x218>
 8017782:	9b01      	ldr	r3, [sp, #4]
 8017784:	f843 bb04 	str.w	fp, [r3], #4
 8017788:	f04f 0b00 	mov.w	fp, #0
 801778c:	9301      	str	r3, [sp, #4]
 801778e:	465b      	mov	r3, fp
 8017790:	7828      	ldrb	r0, [r5, #0]
 8017792:	9303      	str	r3, [sp, #12]
 8017794:	f7ff feda 	bl	801754c <__hexdig_fun>
 8017798:	9b03      	ldr	r3, [sp, #12]
 801779a:	f000 000f 	and.w	r0, r0, #15
 801779e:	4098      	lsls	r0, r3
 80177a0:	ea4b 0b00 	orr.w	fp, fp, r0
 80177a4:	3304      	adds	r3, #4
 80177a6:	e7a1      	b.n	80176ec <__gethex+0x174>
 80177a8:	45a8      	cmp	r8, r5
 80177aa:	d8e8      	bhi.n	801777e <__gethex+0x206>
 80177ac:	2201      	movs	r2, #1
 80177ae:	4628      	mov	r0, r5
 80177b0:	9303      	str	r3, [sp, #12]
 80177b2:	f7ff fe1d 	bl	80173f0 <strncmp>
 80177b6:	4926      	ldr	r1, [pc, #152]	; (8017850 <__gethex+0x2d8>)
 80177b8:	9b03      	ldr	r3, [sp, #12]
 80177ba:	2800      	cmp	r0, #0
 80177bc:	d1df      	bne.n	801777e <__gethex+0x206>
 80177be:	e795      	b.n	80176ec <__gethex+0x174>
 80177c0:	f04f 0b03 	mov.w	fp, #3
 80177c4:	e7c5      	b.n	8017752 <__gethex+0x1da>
 80177c6:	da0b      	bge.n	80177e0 <__gethex+0x268>
 80177c8:	eba5 0800 	sub.w	r8, r5, r0
 80177cc:	4621      	mov	r1, r4
 80177ce:	4642      	mov	r2, r8
 80177d0:	4648      	mov	r0, r9
 80177d2:	f7fe fb47 	bl	8015e64 <__lshift>
 80177d6:	eba6 0608 	sub.w	r6, r6, r8
 80177da:	4604      	mov	r4, r0
 80177dc:	f100 0a14 	add.w	sl, r0, #20
 80177e0:	f04f 0b00 	mov.w	fp, #0
 80177e4:	e7ba      	b.n	801775c <__gethex+0x1e4>
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	42b3      	cmp	r3, r6
 80177ea:	dd73      	ble.n	80178d4 <__gethex+0x35c>
 80177ec:	1b9e      	subs	r6, r3, r6
 80177ee:	42b5      	cmp	r5, r6
 80177f0:	dc34      	bgt.n	801785c <__gethex+0x2e4>
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	2b02      	cmp	r3, #2
 80177f6:	d023      	beq.n	8017840 <__gethex+0x2c8>
 80177f8:	2b03      	cmp	r3, #3
 80177fa:	d025      	beq.n	8017848 <__gethex+0x2d0>
 80177fc:	2b01      	cmp	r3, #1
 80177fe:	d115      	bne.n	801782c <__gethex+0x2b4>
 8017800:	42b5      	cmp	r5, r6
 8017802:	d113      	bne.n	801782c <__gethex+0x2b4>
 8017804:	2d01      	cmp	r5, #1
 8017806:	d10b      	bne.n	8017820 <__gethex+0x2a8>
 8017808:	9a02      	ldr	r2, [sp, #8]
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	6013      	str	r3, [r2, #0]
 801780e:	2301      	movs	r3, #1
 8017810:	6123      	str	r3, [r4, #16]
 8017812:	f8ca 3000 	str.w	r3, [sl]
 8017816:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017818:	f04f 0862 	mov.w	r8, #98	; 0x62
 801781c:	601c      	str	r4, [r3, #0]
 801781e:	e735      	b.n	801768c <__gethex+0x114>
 8017820:	1e69      	subs	r1, r5, #1
 8017822:	4620      	mov	r0, r4
 8017824:	f7fe fd4d 	bl	80162c2 <__any_on>
 8017828:	2800      	cmp	r0, #0
 801782a:	d1ed      	bne.n	8017808 <__gethex+0x290>
 801782c:	4621      	mov	r1, r4
 801782e:	4648      	mov	r0, r9
 8017830:	f7fe f8fe 	bl	8015a30 <_Bfree>
 8017834:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017836:	2300      	movs	r3, #0
 8017838:	6013      	str	r3, [r2, #0]
 801783a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801783e:	e725      	b.n	801768c <__gethex+0x114>
 8017840:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017842:	2b00      	cmp	r3, #0
 8017844:	d1f2      	bne.n	801782c <__gethex+0x2b4>
 8017846:	e7df      	b.n	8017808 <__gethex+0x290>
 8017848:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801784a:	2b00      	cmp	r3, #0
 801784c:	d1dc      	bne.n	8017808 <__gethex+0x290>
 801784e:	e7ed      	b.n	801782c <__gethex+0x2b4>
 8017850:	080185a4 	.word	0x080185a4
 8017854:	0801843d 	.word	0x0801843d
 8017858:	0801874e 	.word	0x0801874e
 801785c:	f106 38ff 	add.w	r8, r6, #4294967295
 8017860:	f1bb 0f00 	cmp.w	fp, #0
 8017864:	d133      	bne.n	80178ce <__gethex+0x356>
 8017866:	f1b8 0f00 	cmp.w	r8, #0
 801786a:	d004      	beq.n	8017876 <__gethex+0x2fe>
 801786c:	4641      	mov	r1, r8
 801786e:	4620      	mov	r0, r4
 8017870:	f7fe fd27 	bl	80162c2 <__any_on>
 8017874:	4683      	mov	fp, r0
 8017876:	ea4f 1268 	mov.w	r2, r8, asr #5
 801787a:	2301      	movs	r3, #1
 801787c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017880:	f008 081f 	and.w	r8, r8, #31
 8017884:	fa03 f308 	lsl.w	r3, r3, r8
 8017888:	4213      	tst	r3, r2
 801788a:	4631      	mov	r1, r6
 801788c:	4620      	mov	r0, r4
 801788e:	bf18      	it	ne
 8017890:	f04b 0b02 	orrne.w	fp, fp, #2
 8017894:	1bad      	subs	r5, r5, r6
 8017896:	f7ff fe07 	bl	80174a8 <rshift>
 801789a:	687e      	ldr	r6, [r7, #4]
 801789c:	f04f 0802 	mov.w	r8, #2
 80178a0:	f1bb 0f00 	cmp.w	fp, #0
 80178a4:	d04a      	beq.n	801793c <__gethex+0x3c4>
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	2b02      	cmp	r3, #2
 80178aa:	d016      	beq.n	80178da <__gethex+0x362>
 80178ac:	2b03      	cmp	r3, #3
 80178ae:	d018      	beq.n	80178e2 <__gethex+0x36a>
 80178b0:	2b01      	cmp	r3, #1
 80178b2:	d109      	bne.n	80178c8 <__gethex+0x350>
 80178b4:	f01b 0f02 	tst.w	fp, #2
 80178b8:	d006      	beq.n	80178c8 <__gethex+0x350>
 80178ba:	f8da 3000 	ldr.w	r3, [sl]
 80178be:	ea4b 0b03 	orr.w	fp, fp, r3
 80178c2:	f01b 0f01 	tst.w	fp, #1
 80178c6:	d10f      	bne.n	80178e8 <__gethex+0x370>
 80178c8:	f048 0810 	orr.w	r8, r8, #16
 80178cc:	e036      	b.n	801793c <__gethex+0x3c4>
 80178ce:	f04f 0b01 	mov.w	fp, #1
 80178d2:	e7d0      	b.n	8017876 <__gethex+0x2fe>
 80178d4:	f04f 0801 	mov.w	r8, #1
 80178d8:	e7e2      	b.n	80178a0 <__gethex+0x328>
 80178da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178dc:	f1c3 0301 	rsb	r3, r3, #1
 80178e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80178e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d0ef      	beq.n	80178c8 <__gethex+0x350>
 80178e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80178ec:	f104 0214 	add.w	r2, r4, #20
 80178f0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80178f4:	9301      	str	r3, [sp, #4]
 80178f6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80178fa:	2300      	movs	r3, #0
 80178fc:	4694      	mov	ip, r2
 80178fe:	f852 1b04 	ldr.w	r1, [r2], #4
 8017902:	f1b1 3fff 	cmp.w	r1, #4294967295
 8017906:	d01e      	beq.n	8017946 <__gethex+0x3ce>
 8017908:	3101      	adds	r1, #1
 801790a:	f8cc 1000 	str.w	r1, [ip]
 801790e:	f1b8 0f02 	cmp.w	r8, #2
 8017912:	f104 0214 	add.w	r2, r4, #20
 8017916:	d13d      	bne.n	8017994 <__gethex+0x41c>
 8017918:	683b      	ldr	r3, [r7, #0]
 801791a:	3b01      	subs	r3, #1
 801791c:	42ab      	cmp	r3, r5
 801791e:	d10b      	bne.n	8017938 <__gethex+0x3c0>
 8017920:	1169      	asrs	r1, r5, #5
 8017922:	2301      	movs	r3, #1
 8017924:	f005 051f 	and.w	r5, r5, #31
 8017928:	fa03 f505 	lsl.w	r5, r3, r5
 801792c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017930:	421d      	tst	r5, r3
 8017932:	bf18      	it	ne
 8017934:	f04f 0801 	movne.w	r8, #1
 8017938:	f048 0820 	orr.w	r8, r8, #32
 801793c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801793e:	601c      	str	r4, [r3, #0]
 8017940:	9b02      	ldr	r3, [sp, #8]
 8017942:	601e      	str	r6, [r3, #0]
 8017944:	e6a2      	b.n	801768c <__gethex+0x114>
 8017946:	4290      	cmp	r0, r2
 8017948:	f842 3c04 	str.w	r3, [r2, #-4]
 801794c:	d8d6      	bhi.n	80178fc <__gethex+0x384>
 801794e:	68a2      	ldr	r2, [r4, #8]
 8017950:	4593      	cmp	fp, r2
 8017952:	db17      	blt.n	8017984 <__gethex+0x40c>
 8017954:	6861      	ldr	r1, [r4, #4]
 8017956:	4648      	mov	r0, r9
 8017958:	3101      	adds	r1, #1
 801795a:	f7fe f829 	bl	80159b0 <_Balloc>
 801795e:	4682      	mov	sl, r0
 8017960:	b918      	cbnz	r0, 801796a <__gethex+0x3f2>
 8017962:	4b1b      	ldr	r3, [pc, #108]	; (80179d0 <__gethex+0x458>)
 8017964:	4602      	mov	r2, r0
 8017966:	2184      	movs	r1, #132	; 0x84
 8017968:	e6b3      	b.n	80176d2 <__gethex+0x15a>
 801796a:	6922      	ldr	r2, [r4, #16]
 801796c:	3202      	adds	r2, #2
 801796e:	f104 010c 	add.w	r1, r4, #12
 8017972:	0092      	lsls	r2, r2, #2
 8017974:	300c      	adds	r0, #12
 8017976:	f7ff fd4d 	bl	8017414 <memcpy>
 801797a:	4621      	mov	r1, r4
 801797c:	4648      	mov	r0, r9
 801797e:	f7fe f857 	bl	8015a30 <_Bfree>
 8017982:	4654      	mov	r4, sl
 8017984:	6922      	ldr	r2, [r4, #16]
 8017986:	1c51      	adds	r1, r2, #1
 8017988:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801798c:	6121      	str	r1, [r4, #16]
 801798e:	2101      	movs	r1, #1
 8017990:	6151      	str	r1, [r2, #20]
 8017992:	e7bc      	b.n	801790e <__gethex+0x396>
 8017994:	6921      	ldr	r1, [r4, #16]
 8017996:	4559      	cmp	r1, fp
 8017998:	dd0b      	ble.n	80179b2 <__gethex+0x43a>
 801799a:	2101      	movs	r1, #1
 801799c:	4620      	mov	r0, r4
 801799e:	f7ff fd83 	bl	80174a8 <rshift>
 80179a2:	68bb      	ldr	r3, [r7, #8]
 80179a4:	3601      	adds	r6, #1
 80179a6:	42b3      	cmp	r3, r6
 80179a8:	f6ff aedb 	blt.w	8017762 <__gethex+0x1ea>
 80179ac:	f04f 0801 	mov.w	r8, #1
 80179b0:	e7c2      	b.n	8017938 <__gethex+0x3c0>
 80179b2:	f015 051f 	ands.w	r5, r5, #31
 80179b6:	d0f9      	beq.n	80179ac <__gethex+0x434>
 80179b8:	9b01      	ldr	r3, [sp, #4]
 80179ba:	441a      	add	r2, r3
 80179bc:	f1c5 0520 	rsb	r5, r5, #32
 80179c0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80179c4:	f7fe f8e6 	bl	8015b94 <__hi0bits>
 80179c8:	42a8      	cmp	r0, r5
 80179ca:	dbe6      	blt.n	801799a <__gethex+0x422>
 80179cc:	e7ee      	b.n	80179ac <__gethex+0x434>
 80179ce:	bf00      	nop
 80179d0:	0801843d 	.word	0x0801843d

080179d4 <L_shift>:
 80179d4:	f1c2 0208 	rsb	r2, r2, #8
 80179d8:	0092      	lsls	r2, r2, #2
 80179da:	b570      	push	{r4, r5, r6, lr}
 80179dc:	f1c2 0620 	rsb	r6, r2, #32
 80179e0:	6843      	ldr	r3, [r0, #4]
 80179e2:	6804      	ldr	r4, [r0, #0]
 80179e4:	fa03 f506 	lsl.w	r5, r3, r6
 80179e8:	432c      	orrs	r4, r5
 80179ea:	40d3      	lsrs	r3, r2
 80179ec:	6004      	str	r4, [r0, #0]
 80179ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80179f2:	4288      	cmp	r0, r1
 80179f4:	d3f4      	bcc.n	80179e0 <L_shift+0xc>
 80179f6:	bd70      	pop	{r4, r5, r6, pc}

080179f8 <__match>:
 80179f8:	b530      	push	{r4, r5, lr}
 80179fa:	6803      	ldr	r3, [r0, #0]
 80179fc:	3301      	adds	r3, #1
 80179fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017a02:	b914      	cbnz	r4, 8017a0a <__match+0x12>
 8017a04:	6003      	str	r3, [r0, #0]
 8017a06:	2001      	movs	r0, #1
 8017a08:	bd30      	pop	{r4, r5, pc}
 8017a0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017a0e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017a12:	2d19      	cmp	r5, #25
 8017a14:	bf98      	it	ls
 8017a16:	3220      	addls	r2, #32
 8017a18:	42a2      	cmp	r2, r4
 8017a1a:	d0f0      	beq.n	80179fe <__match+0x6>
 8017a1c:	2000      	movs	r0, #0
 8017a1e:	e7f3      	b.n	8017a08 <__match+0x10>

08017a20 <__hexnan>:
 8017a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a24:	680b      	ldr	r3, [r1, #0]
 8017a26:	6801      	ldr	r1, [r0, #0]
 8017a28:	115e      	asrs	r6, r3, #5
 8017a2a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017a2e:	f013 031f 	ands.w	r3, r3, #31
 8017a32:	b087      	sub	sp, #28
 8017a34:	bf18      	it	ne
 8017a36:	3604      	addne	r6, #4
 8017a38:	2500      	movs	r5, #0
 8017a3a:	1f37      	subs	r7, r6, #4
 8017a3c:	4682      	mov	sl, r0
 8017a3e:	4690      	mov	r8, r2
 8017a40:	9301      	str	r3, [sp, #4]
 8017a42:	f846 5c04 	str.w	r5, [r6, #-4]
 8017a46:	46b9      	mov	r9, r7
 8017a48:	463c      	mov	r4, r7
 8017a4a:	9502      	str	r5, [sp, #8]
 8017a4c:	46ab      	mov	fp, r5
 8017a4e:	784a      	ldrb	r2, [r1, #1]
 8017a50:	1c4b      	adds	r3, r1, #1
 8017a52:	9303      	str	r3, [sp, #12]
 8017a54:	b342      	cbz	r2, 8017aa8 <__hexnan+0x88>
 8017a56:	4610      	mov	r0, r2
 8017a58:	9105      	str	r1, [sp, #20]
 8017a5a:	9204      	str	r2, [sp, #16]
 8017a5c:	f7ff fd76 	bl	801754c <__hexdig_fun>
 8017a60:	2800      	cmp	r0, #0
 8017a62:	d14f      	bne.n	8017b04 <__hexnan+0xe4>
 8017a64:	9a04      	ldr	r2, [sp, #16]
 8017a66:	9905      	ldr	r1, [sp, #20]
 8017a68:	2a20      	cmp	r2, #32
 8017a6a:	d818      	bhi.n	8017a9e <__hexnan+0x7e>
 8017a6c:	9b02      	ldr	r3, [sp, #8]
 8017a6e:	459b      	cmp	fp, r3
 8017a70:	dd13      	ble.n	8017a9a <__hexnan+0x7a>
 8017a72:	454c      	cmp	r4, r9
 8017a74:	d206      	bcs.n	8017a84 <__hexnan+0x64>
 8017a76:	2d07      	cmp	r5, #7
 8017a78:	dc04      	bgt.n	8017a84 <__hexnan+0x64>
 8017a7a:	462a      	mov	r2, r5
 8017a7c:	4649      	mov	r1, r9
 8017a7e:	4620      	mov	r0, r4
 8017a80:	f7ff ffa8 	bl	80179d4 <L_shift>
 8017a84:	4544      	cmp	r4, r8
 8017a86:	d950      	bls.n	8017b2a <__hexnan+0x10a>
 8017a88:	2300      	movs	r3, #0
 8017a8a:	f1a4 0904 	sub.w	r9, r4, #4
 8017a8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017a92:	f8cd b008 	str.w	fp, [sp, #8]
 8017a96:	464c      	mov	r4, r9
 8017a98:	461d      	mov	r5, r3
 8017a9a:	9903      	ldr	r1, [sp, #12]
 8017a9c:	e7d7      	b.n	8017a4e <__hexnan+0x2e>
 8017a9e:	2a29      	cmp	r2, #41	; 0x29
 8017aa0:	d155      	bne.n	8017b4e <__hexnan+0x12e>
 8017aa2:	3102      	adds	r1, #2
 8017aa4:	f8ca 1000 	str.w	r1, [sl]
 8017aa8:	f1bb 0f00 	cmp.w	fp, #0
 8017aac:	d04f      	beq.n	8017b4e <__hexnan+0x12e>
 8017aae:	454c      	cmp	r4, r9
 8017ab0:	d206      	bcs.n	8017ac0 <__hexnan+0xa0>
 8017ab2:	2d07      	cmp	r5, #7
 8017ab4:	dc04      	bgt.n	8017ac0 <__hexnan+0xa0>
 8017ab6:	462a      	mov	r2, r5
 8017ab8:	4649      	mov	r1, r9
 8017aba:	4620      	mov	r0, r4
 8017abc:	f7ff ff8a 	bl	80179d4 <L_shift>
 8017ac0:	4544      	cmp	r4, r8
 8017ac2:	d934      	bls.n	8017b2e <__hexnan+0x10e>
 8017ac4:	f1a8 0204 	sub.w	r2, r8, #4
 8017ac8:	4623      	mov	r3, r4
 8017aca:	f853 1b04 	ldr.w	r1, [r3], #4
 8017ace:	f842 1f04 	str.w	r1, [r2, #4]!
 8017ad2:	429f      	cmp	r7, r3
 8017ad4:	d2f9      	bcs.n	8017aca <__hexnan+0xaa>
 8017ad6:	1b3b      	subs	r3, r7, r4
 8017ad8:	f023 0303 	bic.w	r3, r3, #3
 8017adc:	3304      	adds	r3, #4
 8017ade:	3e03      	subs	r6, #3
 8017ae0:	3401      	adds	r4, #1
 8017ae2:	42a6      	cmp	r6, r4
 8017ae4:	bf38      	it	cc
 8017ae6:	2304      	movcc	r3, #4
 8017ae8:	4443      	add	r3, r8
 8017aea:	2200      	movs	r2, #0
 8017aec:	f843 2b04 	str.w	r2, [r3], #4
 8017af0:	429f      	cmp	r7, r3
 8017af2:	d2fb      	bcs.n	8017aec <__hexnan+0xcc>
 8017af4:	683b      	ldr	r3, [r7, #0]
 8017af6:	b91b      	cbnz	r3, 8017b00 <__hexnan+0xe0>
 8017af8:	4547      	cmp	r7, r8
 8017afa:	d126      	bne.n	8017b4a <__hexnan+0x12a>
 8017afc:	2301      	movs	r3, #1
 8017afe:	603b      	str	r3, [r7, #0]
 8017b00:	2005      	movs	r0, #5
 8017b02:	e025      	b.n	8017b50 <__hexnan+0x130>
 8017b04:	3501      	adds	r5, #1
 8017b06:	2d08      	cmp	r5, #8
 8017b08:	f10b 0b01 	add.w	fp, fp, #1
 8017b0c:	dd06      	ble.n	8017b1c <__hexnan+0xfc>
 8017b0e:	4544      	cmp	r4, r8
 8017b10:	d9c3      	bls.n	8017a9a <__hexnan+0x7a>
 8017b12:	2300      	movs	r3, #0
 8017b14:	f844 3c04 	str.w	r3, [r4, #-4]
 8017b18:	2501      	movs	r5, #1
 8017b1a:	3c04      	subs	r4, #4
 8017b1c:	6822      	ldr	r2, [r4, #0]
 8017b1e:	f000 000f 	and.w	r0, r0, #15
 8017b22:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017b26:	6020      	str	r0, [r4, #0]
 8017b28:	e7b7      	b.n	8017a9a <__hexnan+0x7a>
 8017b2a:	2508      	movs	r5, #8
 8017b2c:	e7b5      	b.n	8017a9a <__hexnan+0x7a>
 8017b2e:	9b01      	ldr	r3, [sp, #4]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d0df      	beq.n	8017af4 <__hexnan+0xd4>
 8017b34:	f1c3 0320 	rsb	r3, r3, #32
 8017b38:	f04f 32ff 	mov.w	r2, #4294967295
 8017b3c:	40da      	lsrs	r2, r3
 8017b3e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017b42:	4013      	ands	r3, r2
 8017b44:	f846 3c04 	str.w	r3, [r6, #-4]
 8017b48:	e7d4      	b.n	8017af4 <__hexnan+0xd4>
 8017b4a:	3f04      	subs	r7, #4
 8017b4c:	e7d2      	b.n	8017af4 <__hexnan+0xd4>
 8017b4e:	2004      	movs	r0, #4
 8017b50:	b007      	add	sp, #28
 8017b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017b56 <__ascii_mbtowc>:
 8017b56:	b082      	sub	sp, #8
 8017b58:	b901      	cbnz	r1, 8017b5c <__ascii_mbtowc+0x6>
 8017b5a:	a901      	add	r1, sp, #4
 8017b5c:	b142      	cbz	r2, 8017b70 <__ascii_mbtowc+0x1a>
 8017b5e:	b14b      	cbz	r3, 8017b74 <__ascii_mbtowc+0x1e>
 8017b60:	7813      	ldrb	r3, [r2, #0]
 8017b62:	600b      	str	r3, [r1, #0]
 8017b64:	7812      	ldrb	r2, [r2, #0]
 8017b66:	1e10      	subs	r0, r2, #0
 8017b68:	bf18      	it	ne
 8017b6a:	2001      	movne	r0, #1
 8017b6c:	b002      	add	sp, #8
 8017b6e:	4770      	bx	lr
 8017b70:	4610      	mov	r0, r2
 8017b72:	e7fb      	b.n	8017b6c <__ascii_mbtowc+0x16>
 8017b74:	f06f 0001 	mvn.w	r0, #1
 8017b78:	e7f8      	b.n	8017b6c <__ascii_mbtowc+0x16>

08017b7a <_realloc_r>:
 8017b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b7e:	4680      	mov	r8, r0
 8017b80:	4614      	mov	r4, r2
 8017b82:	460e      	mov	r6, r1
 8017b84:	b921      	cbnz	r1, 8017b90 <_realloc_r+0x16>
 8017b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017b8a:	4611      	mov	r1, r2
 8017b8c:	f7fc b84a 	b.w	8013c24 <_malloc_r>
 8017b90:	b92a      	cbnz	r2, 8017b9e <_realloc_r+0x24>
 8017b92:	f7fd fec1 	bl	8015918 <_free_r>
 8017b96:	4625      	mov	r5, r4
 8017b98:	4628      	mov	r0, r5
 8017b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b9e:	f000 f842 	bl	8017c26 <_malloc_usable_size_r>
 8017ba2:	4284      	cmp	r4, r0
 8017ba4:	4607      	mov	r7, r0
 8017ba6:	d802      	bhi.n	8017bae <_realloc_r+0x34>
 8017ba8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017bac:	d812      	bhi.n	8017bd4 <_realloc_r+0x5a>
 8017bae:	4621      	mov	r1, r4
 8017bb0:	4640      	mov	r0, r8
 8017bb2:	f7fc f837 	bl	8013c24 <_malloc_r>
 8017bb6:	4605      	mov	r5, r0
 8017bb8:	2800      	cmp	r0, #0
 8017bba:	d0ed      	beq.n	8017b98 <_realloc_r+0x1e>
 8017bbc:	42bc      	cmp	r4, r7
 8017bbe:	4622      	mov	r2, r4
 8017bc0:	4631      	mov	r1, r6
 8017bc2:	bf28      	it	cs
 8017bc4:	463a      	movcs	r2, r7
 8017bc6:	f7ff fc25 	bl	8017414 <memcpy>
 8017bca:	4631      	mov	r1, r6
 8017bcc:	4640      	mov	r0, r8
 8017bce:	f7fd fea3 	bl	8015918 <_free_r>
 8017bd2:	e7e1      	b.n	8017b98 <_realloc_r+0x1e>
 8017bd4:	4635      	mov	r5, r6
 8017bd6:	e7df      	b.n	8017b98 <_realloc_r+0x1e>

08017bd8 <__ascii_wctomb>:
 8017bd8:	b149      	cbz	r1, 8017bee <__ascii_wctomb+0x16>
 8017bda:	2aff      	cmp	r2, #255	; 0xff
 8017bdc:	bf85      	ittet	hi
 8017bde:	238a      	movhi	r3, #138	; 0x8a
 8017be0:	6003      	strhi	r3, [r0, #0]
 8017be2:	700a      	strbls	r2, [r1, #0]
 8017be4:	f04f 30ff 	movhi.w	r0, #4294967295
 8017be8:	bf98      	it	ls
 8017bea:	2001      	movls	r0, #1
 8017bec:	4770      	bx	lr
 8017bee:	4608      	mov	r0, r1
 8017bf0:	4770      	bx	lr
	...

08017bf4 <fiprintf>:
 8017bf4:	b40e      	push	{r1, r2, r3}
 8017bf6:	b503      	push	{r0, r1, lr}
 8017bf8:	4601      	mov	r1, r0
 8017bfa:	ab03      	add	r3, sp, #12
 8017bfc:	4805      	ldr	r0, [pc, #20]	; (8017c14 <fiprintf+0x20>)
 8017bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c02:	6800      	ldr	r0, [r0, #0]
 8017c04:	9301      	str	r3, [sp, #4]
 8017c06:	f000 f83f 	bl	8017c88 <_vfiprintf_r>
 8017c0a:	b002      	add	sp, #8
 8017c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c10:	b003      	add	sp, #12
 8017c12:	4770      	bx	lr
 8017c14:	24000170 	.word	0x24000170

08017c18 <abort>:
 8017c18:	b508      	push	{r3, lr}
 8017c1a:	2006      	movs	r0, #6
 8017c1c:	f000 fa0c 	bl	8018038 <raise>
 8017c20:	2001      	movs	r0, #1
 8017c22:	f7eb f897 	bl	8002d54 <_exit>

08017c26 <_malloc_usable_size_r>:
 8017c26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c2a:	1f18      	subs	r0, r3, #4
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	bfbc      	itt	lt
 8017c30:	580b      	ldrlt	r3, [r1, r0]
 8017c32:	18c0      	addlt	r0, r0, r3
 8017c34:	4770      	bx	lr

08017c36 <__sfputc_r>:
 8017c36:	6893      	ldr	r3, [r2, #8]
 8017c38:	3b01      	subs	r3, #1
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	b410      	push	{r4}
 8017c3e:	6093      	str	r3, [r2, #8]
 8017c40:	da08      	bge.n	8017c54 <__sfputc_r+0x1e>
 8017c42:	6994      	ldr	r4, [r2, #24]
 8017c44:	42a3      	cmp	r3, r4
 8017c46:	db01      	blt.n	8017c4c <__sfputc_r+0x16>
 8017c48:	290a      	cmp	r1, #10
 8017c4a:	d103      	bne.n	8017c54 <__sfputc_r+0x1e>
 8017c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c50:	f000 b934 	b.w	8017ebc <__swbuf_r>
 8017c54:	6813      	ldr	r3, [r2, #0]
 8017c56:	1c58      	adds	r0, r3, #1
 8017c58:	6010      	str	r0, [r2, #0]
 8017c5a:	7019      	strb	r1, [r3, #0]
 8017c5c:	4608      	mov	r0, r1
 8017c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017c62:	4770      	bx	lr

08017c64 <__sfputs_r>:
 8017c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c66:	4606      	mov	r6, r0
 8017c68:	460f      	mov	r7, r1
 8017c6a:	4614      	mov	r4, r2
 8017c6c:	18d5      	adds	r5, r2, r3
 8017c6e:	42ac      	cmp	r4, r5
 8017c70:	d101      	bne.n	8017c76 <__sfputs_r+0x12>
 8017c72:	2000      	movs	r0, #0
 8017c74:	e007      	b.n	8017c86 <__sfputs_r+0x22>
 8017c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c7a:	463a      	mov	r2, r7
 8017c7c:	4630      	mov	r0, r6
 8017c7e:	f7ff ffda 	bl	8017c36 <__sfputc_r>
 8017c82:	1c43      	adds	r3, r0, #1
 8017c84:	d1f3      	bne.n	8017c6e <__sfputs_r+0xa>
 8017c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017c88 <_vfiprintf_r>:
 8017c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c8c:	460d      	mov	r5, r1
 8017c8e:	b09d      	sub	sp, #116	; 0x74
 8017c90:	4614      	mov	r4, r2
 8017c92:	4698      	mov	r8, r3
 8017c94:	4606      	mov	r6, r0
 8017c96:	b118      	cbz	r0, 8017ca0 <_vfiprintf_r+0x18>
 8017c98:	6a03      	ldr	r3, [r0, #32]
 8017c9a:	b90b      	cbnz	r3, 8017ca0 <_vfiprintf_r+0x18>
 8017c9c:	f7fc ff1a 	bl	8014ad4 <__sinit>
 8017ca0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ca2:	07d9      	lsls	r1, r3, #31
 8017ca4:	d405      	bmi.n	8017cb2 <_vfiprintf_r+0x2a>
 8017ca6:	89ab      	ldrh	r3, [r5, #12]
 8017ca8:	059a      	lsls	r2, r3, #22
 8017caa:	d402      	bmi.n	8017cb2 <_vfiprintf_r+0x2a>
 8017cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cae:	f7eb fa3c 	bl	800312a <__retarget_lock_acquire_recursive>
 8017cb2:	89ab      	ldrh	r3, [r5, #12]
 8017cb4:	071b      	lsls	r3, r3, #28
 8017cb6:	d501      	bpl.n	8017cbc <_vfiprintf_r+0x34>
 8017cb8:	692b      	ldr	r3, [r5, #16]
 8017cba:	b99b      	cbnz	r3, 8017ce4 <_vfiprintf_r+0x5c>
 8017cbc:	4629      	mov	r1, r5
 8017cbe:	4630      	mov	r0, r6
 8017cc0:	f000 f93a 	bl	8017f38 <__swsetup_r>
 8017cc4:	b170      	cbz	r0, 8017ce4 <_vfiprintf_r+0x5c>
 8017cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017cc8:	07dc      	lsls	r4, r3, #31
 8017cca:	d504      	bpl.n	8017cd6 <_vfiprintf_r+0x4e>
 8017ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8017cd0:	b01d      	add	sp, #116	; 0x74
 8017cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cd6:	89ab      	ldrh	r3, [r5, #12]
 8017cd8:	0598      	lsls	r0, r3, #22
 8017cda:	d4f7      	bmi.n	8017ccc <_vfiprintf_r+0x44>
 8017cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cde:	f7eb fa38 	bl	8003152 <__retarget_lock_release_recursive>
 8017ce2:	e7f3      	b.n	8017ccc <_vfiprintf_r+0x44>
 8017ce4:	2300      	movs	r3, #0
 8017ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8017ce8:	2320      	movs	r3, #32
 8017cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017cee:	f8cd 800c 	str.w	r8, [sp, #12]
 8017cf2:	2330      	movs	r3, #48	; 0x30
 8017cf4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017ea8 <_vfiprintf_r+0x220>
 8017cf8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017cfc:	f04f 0901 	mov.w	r9, #1
 8017d00:	4623      	mov	r3, r4
 8017d02:	469a      	mov	sl, r3
 8017d04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017d08:	b10a      	cbz	r2, 8017d0e <_vfiprintf_r+0x86>
 8017d0a:	2a25      	cmp	r2, #37	; 0x25
 8017d0c:	d1f9      	bne.n	8017d02 <_vfiprintf_r+0x7a>
 8017d0e:	ebba 0b04 	subs.w	fp, sl, r4
 8017d12:	d00b      	beq.n	8017d2c <_vfiprintf_r+0xa4>
 8017d14:	465b      	mov	r3, fp
 8017d16:	4622      	mov	r2, r4
 8017d18:	4629      	mov	r1, r5
 8017d1a:	4630      	mov	r0, r6
 8017d1c:	f7ff ffa2 	bl	8017c64 <__sfputs_r>
 8017d20:	3001      	adds	r0, #1
 8017d22:	f000 80a9 	beq.w	8017e78 <_vfiprintf_r+0x1f0>
 8017d26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017d28:	445a      	add	r2, fp
 8017d2a:	9209      	str	r2, [sp, #36]	; 0x24
 8017d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	f000 80a1 	beq.w	8017e78 <_vfiprintf_r+0x1f0>
 8017d36:	2300      	movs	r3, #0
 8017d38:	f04f 32ff 	mov.w	r2, #4294967295
 8017d3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017d40:	f10a 0a01 	add.w	sl, sl, #1
 8017d44:	9304      	str	r3, [sp, #16]
 8017d46:	9307      	str	r3, [sp, #28]
 8017d48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017d4c:	931a      	str	r3, [sp, #104]	; 0x68
 8017d4e:	4654      	mov	r4, sl
 8017d50:	2205      	movs	r2, #5
 8017d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017d56:	4854      	ldr	r0, [pc, #336]	; (8017ea8 <_vfiprintf_r+0x220>)
 8017d58:	f7e8 fada 	bl	8000310 <memchr>
 8017d5c:	9a04      	ldr	r2, [sp, #16]
 8017d5e:	b9d8      	cbnz	r0, 8017d98 <_vfiprintf_r+0x110>
 8017d60:	06d1      	lsls	r1, r2, #27
 8017d62:	bf44      	itt	mi
 8017d64:	2320      	movmi	r3, #32
 8017d66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d6a:	0713      	lsls	r3, r2, #28
 8017d6c:	bf44      	itt	mi
 8017d6e:	232b      	movmi	r3, #43	; 0x2b
 8017d70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017d74:	f89a 3000 	ldrb.w	r3, [sl]
 8017d78:	2b2a      	cmp	r3, #42	; 0x2a
 8017d7a:	d015      	beq.n	8017da8 <_vfiprintf_r+0x120>
 8017d7c:	9a07      	ldr	r2, [sp, #28]
 8017d7e:	4654      	mov	r4, sl
 8017d80:	2000      	movs	r0, #0
 8017d82:	f04f 0c0a 	mov.w	ip, #10
 8017d86:	4621      	mov	r1, r4
 8017d88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017d8c:	3b30      	subs	r3, #48	; 0x30
 8017d8e:	2b09      	cmp	r3, #9
 8017d90:	d94d      	bls.n	8017e2e <_vfiprintf_r+0x1a6>
 8017d92:	b1b0      	cbz	r0, 8017dc2 <_vfiprintf_r+0x13a>
 8017d94:	9207      	str	r2, [sp, #28]
 8017d96:	e014      	b.n	8017dc2 <_vfiprintf_r+0x13a>
 8017d98:	eba0 0308 	sub.w	r3, r0, r8
 8017d9c:	fa09 f303 	lsl.w	r3, r9, r3
 8017da0:	4313      	orrs	r3, r2
 8017da2:	9304      	str	r3, [sp, #16]
 8017da4:	46a2      	mov	sl, r4
 8017da6:	e7d2      	b.n	8017d4e <_vfiprintf_r+0xc6>
 8017da8:	9b03      	ldr	r3, [sp, #12]
 8017daa:	1d19      	adds	r1, r3, #4
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	9103      	str	r1, [sp, #12]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	bfbb      	ittet	lt
 8017db4:	425b      	neglt	r3, r3
 8017db6:	f042 0202 	orrlt.w	r2, r2, #2
 8017dba:	9307      	strge	r3, [sp, #28]
 8017dbc:	9307      	strlt	r3, [sp, #28]
 8017dbe:	bfb8      	it	lt
 8017dc0:	9204      	strlt	r2, [sp, #16]
 8017dc2:	7823      	ldrb	r3, [r4, #0]
 8017dc4:	2b2e      	cmp	r3, #46	; 0x2e
 8017dc6:	d10c      	bne.n	8017de2 <_vfiprintf_r+0x15a>
 8017dc8:	7863      	ldrb	r3, [r4, #1]
 8017dca:	2b2a      	cmp	r3, #42	; 0x2a
 8017dcc:	d134      	bne.n	8017e38 <_vfiprintf_r+0x1b0>
 8017dce:	9b03      	ldr	r3, [sp, #12]
 8017dd0:	1d1a      	adds	r2, r3, #4
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	9203      	str	r2, [sp, #12]
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	bfb8      	it	lt
 8017dda:	f04f 33ff 	movlt.w	r3, #4294967295
 8017dde:	3402      	adds	r4, #2
 8017de0:	9305      	str	r3, [sp, #20]
 8017de2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017eb8 <_vfiprintf_r+0x230>
 8017de6:	7821      	ldrb	r1, [r4, #0]
 8017de8:	2203      	movs	r2, #3
 8017dea:	4650      	mov	r0, sl
 8017dec:	f7e8 fa90 	bl	8000310 <memchr>
 8017df0:	b138      	cbz	r0, 8017e02 <_vfiprintf_r+0x17a>
 8017df2:	9b04      	ldr	r3, [sp, #16]
 8017df4:	eba0 000a 	sub.w	r0, r0, sl
 8017df8:	2240      	movs	r2, #64	; 0x40
 8017dfa:	4082      	lsls	r2, r0
 8017dfc:	4313      	orrs	r3, r2
 8017dfe:	3401      	adds	r4, #1
 8017e00:	9304      	str	r3, [sp, #16]
 8017e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017e06:	4829      	ldr	r0, [pc, #164]	; (8017eac <_vfiprintf_r+0x224>)
 8017e08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017e0c:	2206      	movs	r2, #6
 8017e0e:	f7e8 fa7f 	bl	8000310 <memchr>
 8017e12:	2800      	cmp	r0, #0
 8017e14:	d03f      	beq.n	8017e96 <_vfiprintf_r+0x20e>
 8017e16:	4b26      	ldr	r3, [pc, #152]	; (8017eb0 <_vfiprintf_r+0x228>)
 8017e18:	bb1b      	cbnz	r3, 8017e62 <_vfiprintf_r+0x1da>
 8017e1a:	9b03      	ldr	r3, [sp, #12]
 8017e1c:	3307      	adds	r3, #7
 8017e1e:	f023 0307 	bic.w	r3, r3, #7
 8017e22:	3308      	adds	r3, #8
 8017e24:	9303      	str	r3, [sp, #12]
 8017e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e28:	443b      	add	r3, r7
 8017e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8017e2c:	e768      	b.n	8017d00 <_vfiprintf_r+0x78>
 8017e2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017e32:	460c      	mov	r4, r1
 8017e34:	2001      	movs	r0, #1
 8017e36:	e7a6      	b.n	8017d86 <_vfiprintf_r+0xfe>
 8017e38:	2300      	movs	r3, #0
 8017e3a:	3401      	adds	r4, #1
 8017e3c:	9305      	str	r3, [sp, #20]
 8017e3e:	4619      	mov	r1, r3
 8017e40:	f04f 0c0a 	mov.w	ip, #10
 8017e44:	4620      	mov	r0, r4
 8017e46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e4a:	3a30      	subs	r2, #48	; 0x30
 8017e4c:	2a09      	cmp	r2, #9
 8017e4e:	d903      	bls.n	8017e58 <_vfiprintf_r+0x1d0>
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d0c6      	beq.n	8017de2 <_vfiprintf_r+0x15a>
 8017e54:	9105      	str	r1, [sp, #20]
 8017e56:	e7c4      	b.n	8017de2 <_vfiprintf_r+0x15a>
 8017e58:	fb0c 2101 	mla	r1, ip, r1, r2
 8017e5c:	4604      	mov	r4, r0
 8017e5e:	2301      	movs	r3, #1
 8017e60:	e7f0      	b.n	8017e44 <_vfiprintf_r+0x1bc>
 8017e62:	ab03      	add	r3, sp, #12
 8017e64:	9300      	str	r3, [sp, #0]
 8017e66:	462a      	mov	r2, r5
 8017e68:	4b12      	ldr	r3, [pc, #72]	; (8017eb4 <_vfiprintf_r+0x22c>)
 8017e6a:	a904      	add	r1, sp, #16
 8017e6c:	4630      	mov	r0, r6
 8017e6e:	f7fb fff7 	bl	8013e60 <_printf_float>
 8017e72:	4607      	mov	r7, r0
 8017e74:	1c78      	adds	r0, r7, #1
 8017e76:	d1d6      	bne.n	8017e26 <_vfiprintf_r+0x19e>
 8017e78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017e7a:	07d9      	lsls	r1, r3, #31
 8017e7c:	d405      	bmi.n	8017e8a <_vfiprintf_r+0x202>
 8017e7e:	89ab      	ldrh	r3, [r5, #12]
 8017e80:	059a      	lsls	r2, r3, #22
 8017e82:	d402      	bmi.n	8017e8a <_vfiprintf_r+0x202>
 8017e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017e86:	f7eb f964 	bl	8003152 <__retarget_lock_release_recursive>
 8017e8a:	89ab      	ldrh	r3, [r5, #12]
 8017e8c:	065b      	lsls	r3, r3, #25
 8017e8e:	f53f af1d 	bmi.w	8017ccc <_vfiprintf_r+0x44>
 8017e92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017e94:	e71c      	b.n	8017cd0 <_vfiprintf_r+0x48>
 8017e96:	ab03      	add	r3, sp, #12
 8017e98:	9300      	str	r3, [sp, #0]
 8017e9a:	462a      	mov	r2, r5
 8017e9c:	4b05      	ldr	r3, [pc, #20]	; (8017eb4 <_vfiprintf_r+0x22c>)
 8017e9e:	a904      	add	r1, sp, #16
 8017ea0:	4630      	mov	r0, r6
 8017ea2:	f7fc fa65 	bl	8014370 <_printf_i>
 8017ea6:	e7e4      	b.n	8017e72 <_vfiprintf_r+0x1ea>
 8017ea8:	080186f9 	.word	0x080186f9
 8017eac:	08018703 	.word	0x08018703
 8017eb0:	08013e61 	.word	0x08013e61
 8017eb4:	08017c65 	.word	0x08017c65
 8017eb8:	080186ff 	.word	0x080186ff

08017ebc <__swbuf_r>:
 8017ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ebe:	460e      	mov	r6, r1
 8017ec0:	4614      	mov	r4, r2
 8017ec2:	4605      	mov	r5, r0
 8017ec4:	b118      	cbz	r0, 8017ece <__swbuf_r+0x12>
 8017ec6:	6a03      	ldr	r3, [r0, #32]
 8017ec8:	b90b      	cbnz	r3, 8017ece <__swbuf_r+0x12>
 8017eca:	f7fc fe03 	bl	8014ad4 <__sinit>
 8017ece:	69a3      	ldr	r3, [r4, #24]
 8017ed0:	60a3      	str	r3, [r4, #8]
 8017ed2:	89a3      	ldrh	r3, [r4, #12]
 8017ed4:	071a      	lsls	r2, r3, #28
 8017ed6:	d525      	bpl.n	8017f24 <__swbuf_r+0x68>
 8017ed8:	6923      	ldr	r3, [r4, #16]
 8017eda:	b31b      	cbz	r3, 8017f24 <__swbuf_r+0x68>
 8017edc:	6823      	ldr	r3, [r4, #0]
 8017ede:	6922      	ldr	r2, [r4, #16]
 8017ee0:	1a98      	subs	r0, r3, r2
 8017ee2:	6963      	ldr	r3, [r4, #20]
 8017ee4:	b2f6      	uxtb	r6, r6
 8017ee6:	4283      	cmp	r3, r0
 8017ee8:	4637      	mov	r7, r6
 8017eea:	dc04      	bgt.n	8017ef6 <__swbuf_r+0x3a>
 8017eec:	4621      	mov	r1, r4
 8017eee:	4628      	mov	r0, r5
 8017ef0:	f7ff fa3c 	bl	801736c <_fflush_r>
 8017ef4:	b9e0      	cbnz	r0, 8017f30 <__swbuf_r+0x74>
 8017ef6:	68a3      	ldr	r3, [r4, #8]
 8017ef8:	3b01      	subs	r3, #1
 8017efa:	60a3      	str	r3, [r4, #8]
 8017efc:	6823      	ldr	r3, [r4, #0]
 8017efe:	1c5a      	adds	r2, r3, #1
 8017f00:	6022      	str	r2, [r4, #0]
 8017f02:	701e      	strb	r6, [r3, #0]
 8017f04:	6962      	ldr	r2, [r4, #20]
 8017f06:	1c43      	adds	r3, r0, #1
 8017f08:	429a      	cmp	r2, r3
 8017f0a:	d004      	beq.n	8017f16 <__swbuf_r+0x5a>
 8017f0c:	89a3      	ldrh	r3, [r4, #12]
 8017f0e:	07db      	lsls	r3, r3, #31
 8017f10:	d506      	bpl.n	8017f20 <__swbuf_r+0x64>
 8017f12:	2e0a      	cmp	r6, #10
 8017f14:	d104      	bne.n	8017f20 <__swbuf_r+0x64>
 8017f16:	4621      	mov	r1, r4
 8017f18:	4628      	mov	r0, r5
 8017f1a:	f7ff fa27 	bl	801736c <_fflush_r>
 8017f1e:	b938      	cbnz	r0, 8017f30 <__swbuf_r+0x74>
 8017f20:	4638      	mov	r0, r7
 8017f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017f24:	4621      	mov	r1, r4
 8017f26:	4628      	mov	r0, r5
 8017f28:	f000 f806 	bl	8017f38 <__swsetup_r>
 8017f2c:	2800      	cmp	r0, #0
 8017f2e:	d0d5      	beq.n	8017edc <__swbuf_r+0x20>
 8017f30:	f04f 37ff 	mov.w	r7, #4294967295
 8017f34:	e7f4      	b.n	8017f20 <__swbuf_r+0x64>
	...

08017f38 <__swsetup_r>:
 8017f38:	b538      	push	{r3, r4, r5, lr}
 8017f3a:	4b2a      	ldr	r3, [pc, #168]	; (8017fe4 <__swsetup_r+0xac>)
 8017f3c:	4605      	mov	r5, r0
 8017f3e:	6818      	ldr	r0, [r3, #0]
 8017f40:	460c      	mov	r4, r1
 8017f42:	b118      	cbz	r0, 8017f4c <__swsetup_r+0x14>
 8017f44:	6a03      	ldr	r3, [r0, #32]
 8017f46:	b90b      	cbnz	r3, 8017f4c <__swsetup_r+0x14>
 8017f48:	f7fc fdc4 	bl	8014ad4 <__sinit>
 8017f4c:	89a3      	ldrh	r3, [r4, #12]
 8017f4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017f52:	0718      	lsls	r0, r3, #28
 8017f54:	d422      	bmi.n	8017f9c <__swsetup_r+0x64>
 8017f56:	06d9      	lsls	r1, r3, #27
 8017f58:	d407      	bmi.n	8017f6a <__swsetup_r+0x32>
 8017f5a:	2309      	movs	r3, #9
 8017f5c:	602b      	str	r3, [r5, #0]
 8017f5e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017f62:	81a3      	strh	r3, [r4, #12]
 8017f64:	f04f 30ff 	mov.w	r0, #4294967295
 8017f68:	e034      	b.n	8017fd4 <__swsetup_r+0x9c>
 8017f6a:	0758      	lsls	r0, r3, #29
 8017f6c:	d512      	bpl.n	8017f94 <__swsetup_r+0x5c>
 8017f6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f70:	b141      	cbz	r1, 8017f84 <__swsetup_r+0x4c>
 8017f72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f76:	4299      	cmp	r1, r3
 8017f78:	d002      	beq.n	8017f80 <__swsetup_r+0x48>
 8017f7a:	4628      	mov	r0, r5
 8017f7c:	f7fd fccc 	bl	8015918 <_free_r>
 8017f80:	2300      	movs	r3, #0
 8017f82:	6363      	str	r3, [r4, #52]	; 0x34
 8017f84:	89a3      	ldrh	r3, [r4, #12]
 8017f86:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017f8a:	81a3      	strh	r3, [r4, #12]
 8017f8c:	2300      	movs	r3, #0
 8017f8e:	6063      	str	r3, [r4, #4]
 8017f90:	6923      	ldr	r3, [r4, #16]
 8017f92:	6023      	str	r3, [r4, #0]
 8017f94:	89a3      	ldrh	r3, [r4, #12]
 8017f96:	f043 0308 	orr.w	r3, r3, #8
 8017f9a:	81a3      	strh	r3, [r4, #12]
 8017f9c:	6923      	ldr	r3, [r4, #16]
 8017f9e:	b94b      	cbnz	r3, 8017fb4 <__swsetup_r+0x7c>
 8017fa0:	89a3      	ldrh	r3, [r4, #12]
 8017fa2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017faa:	d003      	beq.n	8017fb4 <__swsetup_r+0x7c>
 8017fac:	4621      	mov	r1, r4
 8017fae:	4628      	mov	r0, r5
 8017fb0:	f000 f884 	bl	80180bc <__smakebuf_r>
 8017fb4:	89a0      	ldrh	r0, [r4, #12]
 8017fb6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017fba:	f010 0301 	ands.w	r3, r0, #1
 8017fbe:	d00a      	beq.n	8017fd6 <__swsetup_r+0x9e>
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	60a3      	str	r3, [r4, #8]
 8017fc4:	6963      	ldr	r3, [r4, #20]
 8017fc6:	425b      	negs	r3, r3
 8017fc8:	61a3      	str	r3, [r4, #24]
 8017fca:	6923      	ldr	r3, [r4, #16]
 8017fcc:	b943      	cbnz	r3, 8017fe0 <__swsetup_r+0xa8>
 8017fce:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017fd2:	d1c4      	bne.n	8017f5e <__swsetup_r+0x26>
 8017fd4:	bd38      	pop	{r3, r4, r5, pc}
 8017fd6:	0781      	lsls	r1, r0, #30
 8017fd8:	bf58      	it	pl
 8017fda:	6963      	ldrpl	r3, [r4, #20]
 8017fdc:	60a3      	str	r3, [r4, #8]
 8017fde:	e7f4      	b.n	8017fca <__swsetup_r+0x92>
 8017fe0:	2000      	movs	r0, #0
 8017fe2:	e7f7      	b.n	8017fd4 <__swsetup_r+0x9c>
 8017fe4:	24000170 	.word	0x24000170

08017fe8 <_raise_r>:
 8017fe8:	291f      	cmp	r1, #31
 8017fea:	b538      	push	{r3, r4, r5, lr}
 8017fec:	4604      	mov	r4, r0
 8017fee:	460d      	mov	r5, r1
 8017ff0:	d904      	bls.n	8017ffc <_raise_r+0x14>
 8017ff2:	2316      	movs	r3, #22
 8017ff4:	6003      	str	r3, [r0, #0]
 8017ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8017ffa:	bd38      	pop	{r3, r4, r5, pc}
 8017ffc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017ffe:	b112      	cbz	r2, 8018006 <_raise_r+0x1e>
 8018000:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018004:	b94b      	cbnz	r3, 801801a <_raise_r+0x32>
 8018006:	4620      	mov	r0, r4
 8018008:	f000 f830 	bl	801806c <_getpid_r>
 801800c:	462a      	mov	r2, r5
 801800e:	4601      	mov	r1, r0
 8018010:	4620      	mov	r0, r4
 8018012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018016:	f000 b817 	b.w	8018048 <_kill_r>
 801801a:	2b01      	cmp	r3, #1
 801801c:	d00a      	beq.n	8018034 <_raise_r+0x4c>
 801801e:	1c59      	adds	r1, r3, #1
 8018020:	d103      	bne.n	801802a <_raise_r+0x42>
 8018022:	2316      	movs	r3, #22
 8018024:	6003      	str	r3, [r0, #0]
 8018026:	2001      	movs	r0, #1
 8018028:	e7e7      	b.n	8017ffa <_raise_r+0x12>
 801802a:	2400      	movs	r4, #0
 801802c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018030:	4628      	mov	r0, r5
 8018032:	4798      	blx	r3
 8018034:	2000      	movs	r0, #0
 8018036:	e7e0      	b.n	8017ffa <_raise_r+0x12>

08018038 <raise>:
 8018038:	4b02      	ldr	r3, [pc, #8]	; (8018044 <raise+0xc>)
 801803a:	4601      	mov	r1, r0
 801803c:	6818      	ldr	r0, [r3, #0]
 801803e:	f7ff bfd3 	b.w	8017fe8 <_raise_r>
 8018042:	bf00      	nop
 8018044:	24000170 	.word	0x24000170

08018048 <_kill_r>:
 8018048:	b538      	push	{r3, r4, r5, lr}
 801804a:	4d07      	ldr	r5, [pc, #28]	; (8018068 <_kill_r+0x20>)
 801804c:	2300      	movs	r3, #0
 801804e:	4604      	mov	r4, r0
 8018050:	4608      	mov	r0, r1
 8018052:	4611      	mov	r1, r2
 8018054:	602b      	str	r3, [r5, #0]
 8018056:	f7ea fe6d 	bl	8002d34 <_kill>
 801805a:	1c43      	adds	r3, r0, #1
 801805c:	d102      	bne.n	8018064 <_kill_r+0x1c>
 801805e:	682b      	ldr	r3, [r5, #0]
 8018060:	b103      	cbz	r3, 8018064 <_kill_r+0x1c>
 8018062:	6023      	str	r3, [r4, #0]
 8018064:	bd38      	pop	{r3, r4, r5, pc}
 8018066:	bf00      	nop
 8018068:	240029e4 	.word	0x240029e4

0801806c <_getpid_r>:
 801806c:	f7ea be5a 	b.w	8002d24 <_getpid>

08018070 <__swhatbuf_r>:
 8018070:	b570      	push	{r4, r5, r6, lr}
 8018072:	460c      	mov	r4, r1
 8018074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018078:	2900      	cmp	r1, #0
 801807a:	b096      	sub	sp, #88	; 0x58
 801807c:	4615      	mov	r5, r2
 801807e:	461e      	mov	r6, r3
 8018080:	da0d      	bge.n	801809e <__swhatbuf_r+0x2e>
 8018082:	89a3      	ldrh	r3, [r4, #12]
 8018084:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018088:	f04f 0100 	mov.w	r1, #0
 801808c:	bf0c      	ite	eq
 801808e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018092:	2340      	movne	r3, #64	; 0x40
 8018094:	2000      	movs	r0, #0
 8018096:	6031      	str	r1, [r6, #0]
 8018098:	602b      	str	r3, [r5, #0]
 801809a:	b016      	add	sp, #88	; 0x58
 801809c:	bd70      	pop	{r4, r5, r6, pc}
 801809e:	466a      	mov	r2, sp
 80180a0:	f000 f848 	bl	8018134 <_fstat_r>
 80180a4:	2800      	cmp	r0, #0
 80180a6:	dbec      	blt.n	8018082 <__swhatbuf_r+0x12>
 80180a8:	9901      	ldr	r1, [sp, #4]
 80180aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80180ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80180b2:	4259      	negs	r1, r3
 80180b4:	4159      	adcs	r1, r3
 80180b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80180ba:	e7eb      	b.n	8018094 <__swhatbuf_r+0x24>

080180bc <__smakebuf_r>:
 80180bc:	898b      	ldrh	r3, [r1, #12]
 80180be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80180c0:	079d      	lsls	r5, r3, #30
 80180c2:	4606      	mov	r6, r0
 80180c4:	460c      	mov	r4, r1
 80180c6:	d507      	bpl.n	80180d8 <__smakebuf_r+0x1c>
 80180c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80180cc:	6023      	str	r3, [r4, #0]
 80180ce:	6123      	str	r3, [r4, #16]
 80180d0:	2301      	movs	r3, #1
 80180d2:	6163      	str	r3, [r4, #20]
 80180d4:	b002      	add	sp, #8
 80180d6:	bd70      	pop	{r4, r5, r6, pc}
 80180d8:	ab01      	add	r3, sp, #4
 80180da:	466a      	mov	r2, sp
 80180dc:	f7ff ffc8 	bl	8018070 <__swhatbuf_r>
 80180e0:	9900      	ldr	r1, [sp, #0]
 80180e2:	4605      	mov	r5, r0
 80180e4:	4630      	mov	r0, r6
 80180e6:	f7fb fd9d 	bl	8013c24 <_malloc_r>
 80180ea:	b948      	cbnz	r0, 8018100 <__smakebuf_r+0x44>
 80180ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180f0:	059a      	lsls	r2, r3, #22
 80180f2:	d4ef      	bmi.n	80180d4 <__smakebuf_r+0x18>
 80180f4:	f023 0303 	bic.w	r3, r3, #3
 80180f8:	f043 0302 	orr.w	r3, r3, #2
 80180fc:	81a3      	strh	r3, [r4, #12]
 80180fe:	e7e3      	b.n	80180c8 <__smakebuf_r+0xc>
 8018100:	89a3      	ldrh	r3, [r4, #12]
 8018102:	6020      	str	r0, [r4, #0]
 8018104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018108:	81a3      	strh	r3, [r4, #12]
 801810a:	9b00      	ldr	r3, [sp, #0]
 801810c:	6163      	str	r3, [r4, #20]
 801810e:	9b01      	ldr	r3, [sp, #4]
 8018110:	6120      	str	r0, [r4, #16]
 8018112:	b15b      	cbz	r3, 801812c <__smakebuf_r+0x70>
 8018114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018118:	4630      	mov	r0, r6
 801811a:	f000 f81d 	bl	8018158 <_isatty_r>
 801811e:	b128      	cbz	r0, 801812c <__smakebuf_r+0x70>
 8018120:	89a3      	ldrh	r3, [r4, #12]
 8018122:	f023 0303 	bic.w	r3, r3, #3
 8018126:	f043 0301 	orr.w	r3, r3, #1
 801812a:	81a3      	strh	r3, [r4, #12]
 801812c:	89a3      	ldrh	r3, [r4, #12]
 801812e:	431d      	orrs	r5, r3
 8018130:	81a5      	strh	r5, [r4, #12]
 8018132:	e7cf      	b.n	80180d4 <__smakebuf_r+0x18>

08018134 <_fstat_r>:
 8018134:	b538      	push	{r3, r4, r5, lr}
 8018136:	4d07      	ldr	r5, [pc, #28]	; (8018154 <_fstat_r+0x20>)
 8018138:	2300      	movs	r3, #0
 801813a:	4604      	mov	r4, r0
 801813c:	4608      	mov	r0, r1
 801813e:	4611      	mov	r1, r2
 8018140:	602b      	str	r3, [r5, #0]
 8018142:	f7ea fe56 	bl	8002df2 <_fstat>
 8018146:	1c43      	adds	r3, r0, #1
 8018148:	d102      	bne.n	8018150 <_fstat_r+0x1c>
 801814a:	682b      	ldr	r3, [r5, #0]
 801814c:	b103      	cbz	r3, 8018150 <_fstat_r+0x1c>
 801814e:	6023      	str	r3, [r4, #0]
 8018150:	bd38      	pop	{r3, r4, r5, pc}
 8018152:	bf00      	nop
 8018154:	240029e4 	.word	0x240029e4

08018158 <_isatty_r>:
 8018158:	b538      	push	{r3, r4, r5, lr}
 801815a:	4d06      	ldr	r5, [pc, #24]	; (8018174 <_isatty_r+0x1c>)
 801815c:	2300      	movs	r3, #0
 801815e:	4604      	mov	r4, r0
 8018160:	4608      	mov	r0, r1
 8018162:	602b      	str	r3, [r5, #0]
 8018164:	f7ea fe55 	bl	8002e12 <_isatty>
 8018168:	1c43      	adds	r3, r0, #1
 801816a:	d102      	bne.n	8018172 <_isatty_r+0x1a>
 801816c:	682b      	ldr	r3, [r5, #0]
 801816e:	b103      	cbz	r3, 8018172 <_isatty_r+0x1a>
 8018170:	6023      	str	r3, [r4, #0]
 8018172:	bd38      	pop	{r3, r4, r5, pc}
 8018174:	240029e4 	.word	0x240029e4

08018178 <_init>:
 8018178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801817a:	bf00      	nop
 801817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801817e:	bc08      	pop	{r3}
 8018180:	469e      	mov	lr, r3
 8018182:	4770      	bx	lr

08018184 <_fini>:
 8018184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018186:	bf00      	nop
 8018188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801818a:	bc08      	pop	{r3}
 801818c:	469e      	mov	lr, r3
 801818e:	4770      	bx	lr
