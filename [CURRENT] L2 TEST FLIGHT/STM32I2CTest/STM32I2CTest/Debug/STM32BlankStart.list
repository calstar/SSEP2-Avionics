
STM32BlankStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000178a0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08017b70  08017b70  00027b70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018118  08018118  00028118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018120  08018120  00028120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018124  08018124  00028124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002e0  24000000  08018128  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000264c  240002e0  08018408  000302e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400292c  08018408  0003292c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003030e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002ea57  00000000  00000000  00030351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000629d  00000000  00000000  0005eda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002520  00000000  00000000  00065048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001c75  00000000  00000000  00067568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003dbe2  00000000  00000000  000691dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000369d4  00000000  00000000  000a6dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016e590  00000000  00000000  000dd793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000b09c  00000000  00000000  0024bd24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  00256dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002e0 	.word	0x240002e0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017b58 	.word	0x08017b58

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002e4 	.word	0x240002e4
 800030c:	08017b58 	.word	0x08017b58

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9a8 	b.w	8000aa0 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9e08      	ldr	r6, [sp, #32]
 80007de:	460d      	mov	r5, r1
 80007e0:	4604      	mov	r4, r0
 80007e2:	460f      	mov	r7, r1
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d14a      	bne.n	800087e <__udivmoddi4+0xa6>
 80007e8:	428a      	cmp	r2, r1
 80007ea:	4694      	mov	ip, r2
 80007ec:	d965      	bls.n	80008ba <__udivmoddi4+0xe2>
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	b143      	cbz	r3, 8000806 <__udivmoddi4+0x2e>
 80007f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80007f8:	f1c3 0220 	rsb	r2, r3, #32
 80007fc:	409f      	lsls	r7, r3
 80007fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000802:	4317      	orrs	r7, r2
 8000804:	409c      	lsls	r4, r3
 8000806:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800080a:	fa1f f58c 	uxth.w	r5, ip
 800080e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000812:	0c22      	lsrs	r2, r4, #16
 8000814:	fb0e 7711 	mls	r7, lr, r1, r7
 8000818:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800081c:	fb01 f005 	mul.w	r0, r1, r5
 8000820:	4290      	cmp	r0, r2
 8000822:	d90a      	bls.n	800083a <__udivmoddi4+0x62>
 8000824:	eb1c 0202 	adds.w	r2, ip, r2
 8000828:	f101 37ff 	add.w	r7, r1, #4294967295
 800082c:	f080 811c 	bcs.w	8000a68 <__udivmoddi4+0x290>
 8000830:	4290      	cmp	r0, r2
 8000832:	f240 8119 	bls.w	8000a68 <__udivmoddi4+0x290>
 8000836:	3902      	subs	r1, #2
 8000838:	4462      	add	r2, ip
 800083a:	1a12      	subs	r2, r2, r0
 800083c:	b2a4      	uxth	r4, r4
 800083e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000842:	fb0e 2210 	mls	r2, lr, r0, r2
 8000846:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800084a:	fb00 f505 	mul.w	r5, r0, r5
 800084e:	42a5      	cmp	r5, r4
 8000850:	d90a      	bls.n	8000868 <__udivmoddi4+0x90>
 8000852:	eb1c 0404 	adds.w	r4, ip, r4
 8000856:	f100 32ff 	add.w	r2, r0, #4294967295
 800085a:	f080 8107 	bcs.w	8000a6c <__udivmoddi4+0x294>
 800085e:	42a5      	cmp	r5, r4
 8000860:	f240 8104 	bls.w	8000a6c <__udivmoddi4+0x294>
 8000864:	4464      	add	r4, ip
 8000866:	3802      	subs	r0, #2
 8000868:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800086c:	1b64      	subs	r4, r4, r5
 800086e:	2100      	movs	r1, #0
 8000870:	b11e      	cbz	r6, 800087a <__udivmoddi4+0xa2>
 8000872:	40dc      	lsrs	r4, r3
 8000874:	2300      	movs	r3, #0
 8000876:	e9c6 4300 	strd	r4, r3, [r6]
 800087a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800087e:	428b      	cmp	r3, r1
 8000880:	d908      	bls.n	8000894 <__udivmoddi4+0xbc>
 8000882:	2e00      	cmp	r6, #0
 8000884:	f000 80ed 	beq.w	8000a62 <__udivmoddi4+0x28a>
 8000888:	2100      	movs	r1, #0
 800088a:	e9c6 0500 	strd	r0, r5, [r6]
 800088e:	4608      	mov	r0, r1
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	fab3 f183 	clz	r1, r3
 8000898:	2900      	cmp	r1, #0
 800089a:	d149      	bne.n	8000930 <__udivmoddi4+0x158>
 800089c:	42ab      	cmp	r3, r5
 800089e:	d302      	bcc.n	80008a6 <__udivmoddi4+0xce>
 80008a0:	4282      	cmp	r2, r0
 80008a2:	f200 80f8 	bhi.w	8000a96 <__udivmoddi4+0x2be>
 80008a6:	1a84      	subs	r4, r0, r2
 80008a8:	eb65 0203 	sbc.w	r2, r5, r3
 80008ac:	2001      	movs	r0, #1
 80008ae:	4617      	mov	r7, r2
 80008b0:	2e00      	cmp	r6, #0
 80008b2:	d0e2      	beq.n	800087a <__udivmoddi4+0xa2>
 80008b4:	e9c6 4700 	strd	r4, r7, [r6]
 80008b8:	e7df      	b.n	800087a <__udivmoddi4+0xa2>
 80008ba:	b902      	cbnz	r2, 80008be <__udivmoddi4+0xe6>
 80008bc:	deff      	udf	#255	; 0xff
 80008be:	fab2 f382 	clz	r3, r2
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f040 8090 	bne.w	80009e8 <__udivmoddi4+0x210>
 80008c8:	1a8a      	subs	r2, r1, r2
 80008ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ce:	fa1f fe8c 	uxth.w	lr, ip
 80008d2:	2101      	movs	r1, #1
 80008d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80008d8:	fb07 2015 	mls	r0, r7, r5, r2
 80008dc:	0c22      	lsrs	r2, r4, #16
 80008de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80008e2:	fb0e f005 	mul.w	r0, lr, r5
 80008e6:	4290      	cmp	r0, r2
 80008e8:	d908      	bls.n	80008fc <__udivmoddi4+0x124>
 80008ea:	eb1c 0202 	adds.w	r2, ip, r2
 80008ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80008f2:	d202      	bcs.n	80008fa <__udivmoddi4+0x122>
 80008f4:	4290      	cmp	r0, r2
 80008f6:	f200 80cb 	bhi.w	8000a90 <__udivmoddi4+0x2b8>
 80008fa:	4645      	mov	r5, r8
 80008fc:	1a12      	subs	r2, r2, r0
 80008fe:	b2a4      	uxth	r4, r4
 8000900:	fbb2 f0f7 	udiv	r0, r2, r7
 8000904:	fb07 2210 	mls	r2, r7, r0, r2
 8000908:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090c:	fb0e fe00 	mul.w	lr, lr, r0
 8000910:	45a6      	cmp	lr, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x14e>
 8000914:	eb1c 0404 	adds.w	r4, ip, r4
 8000918:	f100 32ff 	add.w	r2, r0, #4294967295
 800091c:	d202      	bcs.n	8000924 <__udivmoddi4+0x14c>
 800091e:	45a6      	cmp	lr, r4
 8000920:	f200 80bb 	bhi.w	8000a9a <__udivmoddi4+0x2c2>
 8000924:	4610      	mov	r0, r2
 8000926:	eba4 040e 	sub.w	r4, r4, lr
 800092a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800092e:	e79f      	b.n	8000870 <__udivmoddi4+0x98>
 8000930:	f1c1 0720 	rsb	r7, r1, #32
 8000934:	408b      	lsls	r3, r1
 8000936:	fa22 fc07 	lsr.w	ip, r2, r7
 800093a:	ea4c 0c03 	orr.w	ip, ip, r3
 800093e:	fa05 f401 	lsl.w	r4, r5, r1
 8000942:	fa20 f307 	lsr.w	r3, r0, r7
 8000946:	40fd      	lsrs	r5, r7
 8000948:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800094c:	4323      	orrs	r3, r4
 800094e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	fb09 5518 	mls	r5, r9, r8, r5
 800095a:	0c1c      	lsrs	r4, r3, #16
 800095c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000960:	fb08 f50e 	mul.w	r5, r8, lr
 8000964:	42a5      	cmp	r5, r4
 8000966:	fa02 f201 	lsl.w	r2, r2, r1
 800096a:	fa00 f001 	lsl.w	r0, r0, r1
 800096e:	d90b      	bls.n	8000988 <__udivmoddi4+0x1b0>
 8000970:	eb1c 0404 	adds.w	r4, ip, r4
 8000974:	f108 3aff 	add.w	sl, r8, #4294967295
 8000978:	f080 8088 	bcs.w	8000a8c <__udivmoddi4+0x2b4>
 800097c:	42a5      	cmp	r5, r4
 800097e:	f240 8085 	bls.w	8000a8c <__udivmoddi4+0x2b4>
 8000982:	f1a8 0802 	sub.w	r8, r8, #2
 8000986:	4464      	add	r4, ip
 8000988:	1b64      	subs	r4, r4, r5
 800098a:	b29d      	uxth	r5, r3
 800098c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000990:	fb09 4413 	mls	r4, r9, r3, r4
 8000994:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000998:	fb03 fe0e 	mul.w	lr, r3, lr
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x1da>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80009a8:	d26c      	bcs.n	8000a84 <__udivmoddi4+0x2ac>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	d96a      	bls.n	8000a84 <__udivmoddi4+0x2ac>
 80009ae:	3b02      	subs	r3, #2
 80009b0:	4464      	add	r4, ip
 80009b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80009b6:	fba3 9502 	umull	r9, r5, r3, r2
 80009ba:	eba4 040e 	sub.w	r4, r4, lr
 80009be:	42ac      	cmp	r4, r5
 80009c0:	46c8      	mov	r8, r9
 80009c2:	46ae      	mov	lr, r5
 80009c4:	d356      	bcc.n	8000a74 <__udivmoddi4+0x29c>
 80009c6:	d053      	beq.n	8000a70 <__udivmoddi4+0x298>
 80009c8:	b156      	cbz	r6, 80009e0 <__udivmoddi4+0x208>
 80009ca:	ebb0 0208 	subs.w	r2, r0, r8
 80009ce:	eb64 040e 	sbc.w	r4, r4, lr
 80009d2:	fa04 f707 	lsl.w	r7, r4, r7
 80009d6:	40ca      	lsrs	r2, r1
 80009d8:	40cc      	lsrs	r4, r1
 80009da:	4317      	orrs	r7, r2
 80009dc:	e9c6 7400 	strd	r7, r4, [r6]
 80009e0:	4618      	mov	r0, r3
 80009e2:	2100      	movs	r1, #0
 80009e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e8:	f1c3 0120 	rsb	r1, r3, #32
 80009ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80009f0:	fa20 f201 	lsr.w	r2, r0, r1
 80009f4:	fa25 f101 	lsr.w	r1, r5, r1
 80009f8:	409d      	lsls	r5, r3
 80009fa:	432a      	orrs	r2, r5
 80009fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a00:	fa1f fe8c 	uxth.w	lr, ip
 8000a04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a08:	fb07 1510 	mls	r5, r7, r0, r1
 8000a0c:	0c11      	lsrs	r1, r2, #16
 8000a0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a12:	fb00 f50e 	mul.w	r5, r0, lr
 8000a16:	428d      	cmp	r5, r1
 8000a18:	fa04 f403 	lsl.w	r4, r4, r3
 8000a1c:	d908      	bls.n	8000a30 <__udivmoddi4+0x258>
 8000a1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000a22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a26:	d22f      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a28:	428d      	cmp	r5, r1
 8000a2a:	d92d      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	4461      	add	r1, ip
 8000a30:	1b49      	subs	r1, r1, r5
 8000a32:	b292      	uxth	r2, r2
 8000a34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a38:	fb07 1115 	mls	r1, r7, r5, r1
 8000a3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a40:	fb05 f10e 	mul.w	r1, r5, lr
 8000a44:	4291      	cmp	r1, r2
 8000a46:	d908      	bls.n	8000a5a <__udivmoddi4+0x282>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a50:	d216      	bcs.n	8000a80 <__udivmoddi4+0x2a8>
 8000a52:	4291      	cmp	r1, r2
 8000a54:	d914      	bls.n	8000a80 <__udivmoddi4+0x2a8>
 8000a56:	3d02      	subs	r5, #2
 8000a58:	4462      	add	r2, ip
 8000a5a:	1a52      	subs	r2, r2, r1
 8000a5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000a60:	e738      	b.n	80008d4 <__udivmoddi4+0xfc>
 8000a62:	4631      	mov	r1, r6
 8000a64:	4630      	mov	r0, r6
 8000a66:	e708      	b.n	800087a <__udivmoddi4+0xa2>
 8000a68:	4639      	mov	r1, r7
 8000a6a:	e6e6      	b.n	800083a <__udivmoddi4+0x62>
 8000a6c:	4610      	mov	r0, r2
 8000a6e:	e6fb      	b.n	8000868 <__udivmoddi4+0x90>
 8000a70:	4548      	cmp	r0, r9
 8000a72:	d2a9      	bcs.n	80009c8 <__udivmoddi4+0x1f0>
 8000a74:	ebb9 0802 	subs.w	r8, r9, r2
 8000a78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	e7a3      	b.n	80009c8 <__udivmoddi4+0x1f0>
 8000a80:	4645      	mov	r5, r8
 8000a82:	e7ea      	b.n	8000a5a <__udivmoddi4+0x282>
 8000a84:	462b      	mov	r3, r5
 8000a86:	e794      	b.n	80009b2 <__udivmoddi4+0x1da>
 8000a88:	4640      	mov	r0, r8
 8000a8a:	e7d1      	b.n	8000a30 <__udivmoddi4+0x258>
 8000a8c:	46d0      	mov	r8, sl
 8000a8e:	e77b      	b.n	8000988 <__udivmoddi4+0x1b0>
 8000a90:	3d02      	subs	r5, #2
 8000a92:	4462      	add	r2, ip
 8000a94:	e732      	b.n	80008fc <__udivmoddi4+0x124>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e70a      	b.n	80008b0 <__udivmoddi4+0xd8>
 8000a9a:	4464      	add	r4, ip
 8000a9c:	3802      	subs	r0, #2
 8000a9e:	e742      	b.n	8000926 <__udivmoddi4+0x14e>

08000aa0 <__aeabi_idiv0>:
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param hi2c4 Pointer to i2c handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, I2C_HandleTypeDef *hi2c4) {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
	GNSS->hi2c4 = hi2c4;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	683a      	ldr	r2, [r7, #0]
 8000ab2:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = 0;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = 0;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = 0;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = 0;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = 0;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	GNSS->lon = 0;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->lat = 0;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->height = 0;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	GNSS->hMSL = 0;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	GNSS->hAcc = 0;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	GNSS->vAcc = 0;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GNSS->gSpeed = 0;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	GNSS->headMot = 0; // microseconds??
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, configUBX,
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6818      	ldr	r0, [r3, #0]
 8000b44:	231c      	movs	r3, #28
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <GNSS_LoadConfig+0x4c>)
 8000b48:	2142      	movs	r1, #66	; 0x42
 8000b4a:	f004 feed 	bl	8005928 <HAL_I2C_Master_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 8000b4e:	20fa      	movs	r0, #250	; 0xfa
 8000b50:	f001 ffae 	bl	8002ab0 <HAL_Delay>
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, setNMEA410,
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	231c      	movs	r3, #28
 8000b5a:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <GNSS_LoadConfig+0x50>)
 8000b5c:	2142      	movs	r1, #66	; 0x42
 8000b5e:	f004 fee3 	bl	8005928 <HAL_I2C_Master_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 8000b62:	20fa      	movs	r0, #250	; 0xfa
 8000b64:	f001 ffa4 	bl	8002ab0 <HAL_Delay>
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, setGNSS,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6818      	ldr	r0, [r3, #0]
 8000b6c:	232c      	movs	r3, #44	; 0x2c
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <GNSS_LoadConfig+0x54>)
 8000b70:	2142      	movs	r1, #66	; 0x42
 8000b72:	f004 fed9 	bl	8005928 <HAL_I2C_Master_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 8000b76:	20fa      	movs	r0, #250	; 0xfa
 8000b78:	f001 ff9a 	bl	8002ab0 <HAL_Delay>
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	08017c50 	.word	0x08017c50
 8000b88:	08017c6c 	.word	0x08017c6c
 8000b8c:	08017c88 	.word	0x08017c88

08000b90 <CDC_Transmit_String>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void CDC_Transmit_String(char *str) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    uint8_t *buf = (uint8_t *)str;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
    uint16_t len = strlen(str);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fc07 	bl	80003b0 <strlen>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	817b      	strh	r3, [r7, #10]
    CDC_Transmit_HS(buf, len);
 8000ba6:	897b      	ldrh	r3, [r7, #10]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	68f8      	ldr	r0, [r7, #12]
 8000bac:	f012 f8ae 	bl	8012d0c <CDC_Transmit_HS>
}
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <I2C4_ScanBus>:

    CDC_Transmit_HS(buffer, offset);
}


void I2C4_ScanBus(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b092      	sub	sp, #72	; 0x48
 8000bbc:	af00      	add	r7, sp, #0
    uint8_t buffer[64];
    uint8_t address;
    uint8_t result;

    CDC_Transmit_String("Scanning I2C4 bus...\r\n");
 8000bbe:	481a      	ldr	r0, [pc, #104]	; (8000c28 <I2C4_ScanBus+0x70>)
 8000bc0:	f7ff ffe6 	bl	8000b90 <CDC_Transmit_String>

    for (address = 1; address < 128; address++) {
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000bca:	e021      	b.n	8000c10 <I2C4_ScanBus+0x58>
        result = HAL_I2C_IsDeviceReady(&hi2c4, address << 1, 2, HAL_MAX_DELAY);
 8000bcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	005b      	lsls	r3, r3, #1
 8000bd4:	b299      	uxth	r1, r3
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	2202      	movs	r2, #2
 8000bdc:	4813      	ldr	r0, [pc, #76]	; (8000c2c <I2C4_ScanBus+0x74>)
 8000bde:	f004 ff93 	bl	8005b08 <HAL_I2C_IsDeviceReady>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        if (result == HAL_OK) {
 8000be8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d10a      	bne.n	8000c06 <I2C4_ScanBus+0x4e>
            sprintf((char *)buffer, "Device found at address: 0x%02X\r\n", address);
 8000bf0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8000bf4:	1d3b      	adds	r3, r7, #4
 8000bf6:	490e      	ldr	r1, [pc, #56]	; (8000c30 <I2C4_ScanBus+0x78>)
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f013 fc91 	bl	8014520 <siprintf>
            CDC_Transmit_String((char *)buffer);
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ffc5 	bl	8000b90 <CDC_Transmit_String>
    for (address = 1; address < 128; address++) {
 8000c06:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000c10:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	dad9      	bge.n	8000bcc <I2C4_ScanBus+0x14>
        }
    }

    CDC_Transmit_String("I2C4 bus scan complete.\r\n");
 8000c18:	4806      	ldr	r0, [pc, #24]	; (8000c34 <I2C4_ScanBus+0x7c>)
 8000c1a:	f7ff ffb9 	bl	8000b90 <CDC_Transmit_String>
}
 8000c1e:	bf00      	nop
 8000c20:	3748      	adds	r7, #72	; 0x48
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08017ba8 	.word	0x08017ba8
 8000c2c:	2400059c 	.word	0x2400059c
 8000c30:	08017bc0 	.word	0x08017bc0
 8000c34:	08017be4 	.word	0x08017be4

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i = 0, ret;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c42:	f001 fea3 	bl	800298c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c46:	f000 f847 	bl	8000cd8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000c4a:	f000 f8b7 	bl	8000dbc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c4e:	f000 fcdf 	bl	8001610 <MX_GPIO_Init>
  MX_CORDIC_Init();
 8000c52:	f000 f961 	bl	8000f18 <MX_CORDIC_Init>
  MX_CRC_Init();
 8000c56:	f000 f973 	bl	8000f40 <MX_CRC_Init>
  MX_FMAC_Init();
 8000c5a:	f000 f993 	bl	8000f84 <MX_FMAC_Init>
  MX_I2C1_Init();
 8000c5e:	f000 f9a5 	bl	8000fac <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c62:	f000 f9e3 	bl	800102c <MX_I2C2_Init>
  MX_I2C3_Init();
 8000c66:	f000 fa21 	bl	80010ac <MX_I2C3_Init>
  MX_I2C4_Init();
 8000c6a:	f000 fa5f 	bl	800112c <MX_I2C4_Init>
  MX_RNG_Init();
 8000c6e:	f000 fa9d 	bl	80011ac <MX_RNG_Init>
  MX_SDMMC1_MMC_Init();
 8000c72:	f000 fab1 	bl	80011d8 <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 8000c76:	f000 fad1 	bl	800121c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000c7a:	f000 fb25 	bl	80012c8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000c7e:	f000 fb79 	bl	8001374 <MX_SPI3_Init>
  MX_SPI4_Init();
 8000c82:	f000 fbcd 	bl	8001420 <MX_SPI4_Init>
  MX_SPI6_Init();
 8000c86:	f000 fc21 	bl	80014cc <MX_SPI6_Init>
  MX_ADC1_Init();
 8000c8a:	f000 f8cd 	bl	8000e28 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000c8e:	f000 fc73 	bl	8001578 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000c92:	f00f fec5 	bl	8010a20 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8000c96:	f011 ff7b 	bl	8012b90 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
 GNSS_Init(&GNSS_Handle, &hi2c4);
 8000c9a:	490c      	ldr	r1, [pc, #48]	; (8000ccc <main+0x94>)
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <main+0x98>)
 8000c9e:	f7ff ff01 	bl	8000aa4 <GNSS_Init>
 HAL_Delay(1000);
 8000ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca6:	f001 ff03 	bl	8002ab0 <HAL_Delay>
 GNSS_LoadConfig(&GNSS_Handle);
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <main+0x98>)
 8000cac:	f7ff ff44 	bl	8000b38 <GNSS_LoadConfig>
 uint32_t Timer = HAL_GetTick();
 8000cb0:	f001 fef2 	bl	8002a98 <HAL_GetTick>
 8000cb4:	6038      	str	r0, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CDC_Transmit_String("Test \r\n");
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <main+0x9c>)
 8000cb8:	f7ff ff6a 	bl	8000b90 <CDC_Transmit_String>

	  HAL_Delay(500);
 8000cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc0:	f001 fef6 	bl	8002ab0 <HAL_Delay>
	    I2C4_ScanBus();
 8000cc4:	f7ff ff78 	bl	8000bb8 <I2C4_ScanBus>
	  CDC_Transmit_String("Test \r\n");
 8000cc8:	e7f5      	b.n	8000cb6 <main+0x7e>
 8000cca:	bf00      	nop
 8000ccc:	2400059c 	.word	0x2400059c
 8000cd0:	240002fc 	.word	0x240002fc
 8000cd4:	08017c00 	.word	0x08017c00

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b09c      	sub	sp, #112	; 0x70
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce2:	224c      	movs	r2, #76	; 0x4c
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f013 fc7d 	bl	80145e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2220      	movs	r2, #32
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f013 fc77 	bl	80145e6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cf8:	2002      	movs	r0, #2
 8000cfa:	f009 f81f 	bl	8009d3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cfe:	2300      	movs	r3, #0
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	4b2d      	ldr	r3, [pc, #180]	; (8000db8 <SystemClock_Config+0xe0>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d0a:	4a2b      	ldr	r2, [pc, #172]	; (8000db8 <SystemClock_Config+0xe0>)
 8000d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <SystemClock_Config+0xe0>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d1e:	bf00      	nop
 8000d20:	4b25      	ldr	r3, [pc, #148]	; (8000db8 <SystemClock_Config+0xe0>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d2c:	d1f8      	bne.n	8000d20 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000d2e:	2322      	movs	r3, #34	; 0x22
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000d36:	2340      	movs	r3, #64	; 0x40
 8000d38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d42:	2300      	movs	r3, #0
 8000d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d46:	2304      	movs	r3, #4
 8000d48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000d4a:	230c      	movs	r3, #12
 8000d4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 3;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d56:	2302      	movs	r3, #2
 8000d58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d5a:	230c      	movs	r3, #12
 8000d5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f009 f830 	bl	8009dd0 <HAL_RCC_OscConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d76:	f000 fd11 	bl	800179c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d7a:	233f      	movs	r3, #63	; 0x3f
 8000d7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d8a:	2340      	movs	r3, #64	; 0x40
 8000d8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d8e:	2340      	movs	r3, #64	; 0x40
 8000d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d98:	2340      	movs	r3, #64	; 0x40
 8000d9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2101      	movs	r1, #1
 8000da0:	4618      	mov	r0, r3
 8000da2:	f009 fbef 	bl	800a584 <HAL_RCC_ClockConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000dac:	f000 fcf6 	bl	800179c <Error_Handler>
  }
}
 8000db0:	bf00      	nop
 8000db2:	3770      	adds	r7, #112	; 0x70
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	58024800 	.word	0x58024800

08000dbc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b0ae      	sub	sp, #184	; 0xb8
 8000dc0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	22b8      	movs	r2, #184	; 0xb8
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f013 fc0c 	bl	80145e6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <PeriphCommonClock_Config+0x68>)
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000ddc:	230c      	movs	r3, #12
 8000dde:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 8000de0:	2305      	movs	r3, #5
 8000de2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000de4:	2302      	movs	r3, #2
 8000de6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000dec:	23c0      	movs	r3, #192	; 0xc0
 8000dee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000df8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dfc:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f009 ff46 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8000e16:	f000 fcc1 	bl	800179c <Error_Handler>
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	37b8      	adds	r7, #184	; 0xb8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	80090000 	.word	0x80090000

08000e28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08c      	sub	sp, #48	; 0x30
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2224      	movs	r2, #36	; 0x24
 8000e3e:	2100      	movs	r1, #0
 8000e40:	4618      	mov	r0, r3
 8000e42:	f013 fbd0 	bl	80145e6 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e46:	4b31      	ldr	r3, [pc, #196]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e48:	4a31      	ldr	r2, [pc, #196]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000e52:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e58:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e5e:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e60:	2204      	movs	r2, #4
 8000e62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e64:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e6a:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e84:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea4:	4819      	ldr	r0, [pc, #100]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000ea6:	f002 f86d 	bl	8002f84 <HAL_ADC_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000eb0:	f000 fc74 	bl	800179c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4813      	ldr	r0, [pc, #76]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000ec0:	f003 f8a8 	bl	8004014 <HAL_ADCEx_MultiModeConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000eca:	f000 fc67 	bl	800179c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ede:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <MX_ADC1_Init+0xe4>)
 8000ef4:	f002 fa4e 	bl	8003394 <HAL_ADC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000efe:	f000 fc4d 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3730      	adds	r7, #48	; 0x30
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	240003ac 	.word	0x240003ac
 8000f10:	40022000 	.word	0x40022000
 8000f14:	10c00010 	.word	0x10c00010

08000f18 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_CORDIC_Init+0x20>)
 8000f1e:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <MX_CORDIC_Init+0x24>)
 8000f20:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_CORDIC_Init+0x20>)
 8000f24:	f003 f958 	bl	80041d8 <HAL_CORDIC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000f2e:	f000 fc35 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2400041c 	.word	0x2400041c
 8000f3c:	48024400 	.word	0x48024400

08000f40 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <MX_CRC_Init+0x3c>)
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <MX_CRC_Init+0x40>)
 8000f48:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <MX_CRC_Init+0x3c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <MX_CRC_Init+0x3c>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <MX_CRC_Init+0x3c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <MX_CRC_Init+0x3c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <MX_CRC_Init+0x3c>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f68:	4804      	ldr	r0, [pc, #16]	; (8000f7c <MX_CRC_Init+0x3c>)
 8000f6a:	f003 fa77 	bl	800445c <HAL_CRC_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000f74:	f000 fc12 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	24000444 	.word	0x24000444
 8000f80:	58024c00 	.word	0x58024c00

08000f84 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_FMAC_Init+0x20>)
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <MX_FMAC_Init+0x24>)
 8000f8c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_FMAC_Init+0x20>)
 8000f90:	f004 f9cc 	bl	800532c <HAL_FMAC_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8000f9a:	f000 fbff 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	24000468 	.word	0x24000468
 8000fa8:	48024000 	.word	0x48024000

08000fac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fb2:	4a1c      	ldr	r2, [pc, #112]	; (8001024 <MX_I2C1_Init+0x78>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fb8:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <MX_I2C1_Init+0x7c>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 238;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fbe:	22ee      	movs	r2, #238	; 0xee
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fce:	4b14      	ldr	r3, [pc, #80]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fe6:	480e      	ldr	r0, [pc, #56]	; (8001020 <MX_I2C1_Init+0x74>)
 8000fe8:	f004 fc0e 	bl	8005808 <HAL_I2C_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ff2:	f000 fbd3 	bl	800179c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4809      	ldr	r0, [pc, #36]	; (8001020 <MX_I2C1_Init+0x74>)
 8000ffa:	f006 fc25 	bl	8007848 <HAL_I2CEx_ConfigAnalogFilter>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001004:	f000 fbca 	bl	800179c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001008:	2100      	movs	r1, #0
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_I2C1_Init+0x74>)
 800100c:	f006 fc67 	bl	80078de <HAL_I2CEx_ConfigDigitalFilter>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001016:	f000 fbc1 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	240004a0 	.word	0x240004a0
 8001024:	40005400 	.word	0x40005400
 8001028:	00707cbb 	.word	0x00707cbb

0800102c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001030:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <MX_I2C2_Init+0x78>)
 8001034:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8001036:	4b1a      	ldr	r3, [pc, #104]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001038:	4a1b      	ldr	r2, [pc, #108]	; (80010a8 <MX_I2C2_Init+0x7c>)
 800103a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 238;
 800103c:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <MX_I2C2_Init+0x74>)
 800103e:	22ee      	movs	r2, #238	; 0xee
 8001040:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001042:	4b17      	ldr	r3, [pc, #92]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001044:	2201      	movs	r2, #1
 8001046:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001048:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <MX_I2C2_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800104e:	4b14      	ldr	r3, [pc, #80]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <MX_I2C2_Init+0x74>)
 800105c:	2200      	movs	r2, #0
 800105e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001062:	2200      	movs	r2, #0
 8001064:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001066:	480e      	ldr	r0, [pc, #56]	; (80010a0 <MX_I2C2_Init+0x74>)
 8001068:	f004 fbce 	bl	8005808 <HAL_I2C_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001072:	f000 fb93 	bl	800179c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001076:	2100      	movs	r1, #0
 8001078:	4809      	ldr	r0, [pc, #36]	; (80010a0 <MX_I2C2_Init+0x74>)
 800107a:	f006 fbe5 	bl	8007848 <HAL_I2CEx_ConfigAnalogFilter>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001084:	f000 fb8a 	bl	800179c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001088:	2100      	movs	r1, #0
 800108a:	4805      	ldr	r0, [pc, #20]	; (80010a0 <MX_I2C2_Init+0x74>)
 800108c:	f006 fc27 	bl	80078de <HAL_I2CEx_ConfigDigitalFilter>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001096:	f000 fb81 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	240004f4 	.word	0x240004f4
 80010a4:	40005800 	.word	0x40005800
 80010a8:	00707cbb 	.word	0x00707cbb

080010ac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010b0:	4b1b      	ldr	r3, [pc, #108]	; (8001120 <MX_I2C3_Init+0x74>)
 80010b2:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <MX_I2C3_Init+0x78>)
 80010b4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_I2C3_Init+0x74>)
 80010b8:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <MX_I2C3_Init+0x7c>)
 80010ba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 238;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <MX_I2C3_Init+0x74>)
 80010be:	22ee      	movs	r2, #238	; 0xee
 80010c0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <MX_I2C3_Init+0x74>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <MX_I2C3_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <MX_I2C3_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <MX_I2C3_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <MX_I2C3_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e0:	4b0f      	ldr	r3, [pc, #60]	; (8001120 <MX_I2C3_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <MX_I2C3_Init+0x74>)
 80010e8:	f004 fb8e 	bl	8005808 <HAL_I2C_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80010f2:	f000 fb53 	bl	800179c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010f6:	2100      	movs	r1, #0
 80010f8:	4809      	ldr	r0, [pc, #36]	; (8001120 <MX_I2C3_Init+0x74>)
 80010fa:	f006 fba5 	bl	8007848 <HAL_I2CEx_ConfigAnalogFilter>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001104:	f000 fb4a 	bl	800179c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001108:	2100      	movs	r1, #0
 800110a:	4805      	ldr	r0, [pc, #20]	; (8001120 <MX_I2C3_Init+0x74>)
 800110c:	f006 fbe7 	bl	80078de <HAL_I2CEx_ConfigDigitalFilter>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001116:	f000 fb41 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	24000548 	.word	0x24000548
 8001124:	40005c00 	.word	0x40005c00
 8001128:	00707cbb 	.word	0x00707cbb

0800112c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001130:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <MX_I2C4_Init+0x74>)
 8001132:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <MX_I2C4_Init+0x78>)
 8001134:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00707CBB;
 8001136:	4b1a      	ldr	r3, [pc, #104]	; (80011a0 <MX_I2C4_Init+0x74>)
 8001138:	4a1b      	ldr	r2, [pc, #108]	; (80011a8 <MX_I2C4_Init+0x7c>)
 800113a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800113c:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <MX_I2C4_Init+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <MX_I2C4_Init+0x74>)
 8001144:	2201      	movs	r2, #1
 8001146:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <MX_I2C4_Init+0x74>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <MX_I2C4_Init+0x74>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001154:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <MX_I2C4_Init+0x74>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <MX_I2C4_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001160:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <MX_I2C4_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001166:	480e      	ldr	r0, [pc, #56]	; (80011a0 <MX_I2C4_Init+0x74>)
 8001168:	f004 fb4e 	bl	8005808 <HAL_I2C_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001172:	f000 fb13 	bl	800179c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001176:	2100      	movs	r1, #0
 8001178:	4809      	ldr	r0, [pc, #36]	; (80011a0 <MX_I2C4_Init+0x74>)
 800117a:	f006 fb65 	bl	8007848 <HAL_I2CEx_ConfigAnalogFilter>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001184:	f000 fb0a 	bl	800179c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001188:	2100      	movs	r1, #0
 800118a:	4805      	ldr	r0, [pc, #20]	; (80011a0 <MX_I2C4_Init+0x74>)
 800118c:	f006 fba7 	bl	80078de <HAL_I2CEx_ConfigDigitalFilter>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001196:	f000 fb01 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2400059c 	.word	0x2400059c
 80011a4:	58001c00 	.word	0x58001c00
 80011a8:	00707cbb 	.word	0x00707cbb

080011ac <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <MX_RNG_Init+0x24>)
 80011b2:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <MX_RNG_Init+0x28>)
 80011b4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_RNG_Init+0x24>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80011bc:	4804      	ldr	r0, [pc, #16]	; (80011d0 <MX_RNG_Init+0x24>)
 80011be:	f00c f953 	bl	800d468 <HAL_RNG_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80011c8:	f000 fae8 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	240005f0 	.word	0x240005f0
 80011d4:	48021800 	.word	0x48021800

080011d8 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <MX_SDMMC1_MMC_Init+0x3c>)
 80011de:	4a0e      	ldr	r2, [pc, #56]	; (8001218 <MX_SDMMC1_MMC_Init+0x40>)
 80011e0:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_SDMMC1_MMC_Init+0x3c>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_SDMMC1_MMC_Init+0x3c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_SDMMC1_MMC_Init+0x3c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_SDMMC1_MMC_Init+0x3c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_SDMMC1_MMC_Init+0x3c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_SDMMC1_MMC_Init+0x3c>)
 8001202:	f006 fbb8 	bl	8007976 <HAL_MMC_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_SDMMC1_MMC_Init+0x38>
  {
    Error_Handler();
 800120c:	f000 fac6 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	24000604 	.word	0x24000604
 8001218:	52007000 	.word	0x52007000

0800121c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001222:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <MX_SPI1_Init+0xa8>)
 8001224:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001226:	4b26      	ldr	r3, [pc, #152]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001228:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800122c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001236:	2203      	movs	r2, #3
 8001238:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_SPI1_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001248:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800124c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_SPI1_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001262:	2200      	movs	r2, #0
 8001264:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001268:	2200      	movs	r2, #0
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800126c:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <MX_SPI1_Init+0xa4>)
 800126e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001272:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001276:	2200      	movs	r2, #0
 8001278:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_SPI1_Init+0xa4>)
 800127c:	2200      	movs	r2, #0
 800127e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_SPI1_Init+0xa4>)
 800128e:	2200      	movs	r2, #0
 8001290:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <MX_SPI1_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001298:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_SPI1_Init+0xa4>)
 800129a:	2200      	movs	r2, #0
 800129c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <MX_SPI1_Init+0xa4>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_SPI1_Init+0xa4>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_SPI1_Init+0xa4>)
 80012ac:	f00c f980 	bl	800d5b0 <HAL_SPI_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80012b6:	f000 fa71 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	24000878 	.word	0x24000878
 80012c4:	40013000 	.word	0x40013000

080012c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012cc:	4b27      	ldr	r3, [pc, #156]	; (800136c <MX_SPI2_Init+0xa4>)
 80012ce:	4a28      	ldr	r2, [pc, #160]	; (8001370 <MX_SPI2_Init+0xa8>)
 80012d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4b26      	ldr	r3, [pc, #152]	; (800136c <MX_SPI2_Init+0xa4>)
 80012d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80012d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <MX_SPI2_Init+0xa4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <MX_SPI2_Init+0xa4>)
 80012e2:	2203      	movs	r2, #3
 80012e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e6:	4b21      	ldr	r3, [pc, #132]	; (800136c <MX_SPI2_Init+0xa4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_SPI2_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <MX_SPI2_Init+0xa4>)
 80012f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80012f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_SPI2_Init+0xa4>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_SPI2_Init+0xa4>)
 8001302:	2200      	movs	r2, #0
 8001304:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_SPI2_Init+0xa4>)
 8001308:	2200      	movs	r2, #0
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800130c:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_SPI2_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_SPI2_Init+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_SPI2_Init+0xa4>)
 800131a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_SPI2_Init+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_SPI2_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_SPI2_Init+0xa4>)
 800132e:	2200      	movs	r2, #0
 8001330:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001332:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_SPI2_Init+0xa4>)
 8001334:	2200      	movs	r2, #0
 8001336:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <MX_SPI2_Init+0xa4>)
 800133a:	2200      	movs	r2, #0
 800133c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <MX_SPI2_Init+0xa4>)
 8001340:	2200      	movs	r2, #0
 8001342:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <MX_SPI2_Init+0xa4>)
 8001346:	2200      	movs	r2, #0
 8001348:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <MX_SPI2_Init+0xa4>)
 800134c:	2200      	movs	r2, #0
 800134e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_SPI2_Init+0xa4>)
 8001352:	2200      	movs	r2, #0
 8001354:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_SPI2_Init+0xa4>)
 8001358:	f00c f92a 	bl	800d5b0 <HAL_SPI_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8001362:	f000 fa1b 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	24000900 	.word	0x24000900
 8001370:	40003800 	.word	0x40003800

08001374 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001378:	4b27      	ldr	r3, [pc, #156]	; (8001418 <MX_SPI3_Init+0xa4>)
 800137a:	4a28      	ldr	r2, [pc, #160]	; (800141c <MX_SPI3_Init+0xa8>)
 800137c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800137e:	4b26      	ldr	r3, [pc, #152]	; (8001418 <MX_SPI3_Init+0xa4>)
 8001380:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001384:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001386:	4b24      	ldr	r3, [pc, #144]	; (8001418 <MX_SPI3_Init+0xa4>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_SPI3_Init+0xa4>)
 800138e:	2203      	movs	r2, #3
 8001390:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_SPI3_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_SPI3_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013c4:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_SPI3_Init+0xa4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_SPI3_Init+0xa4>)
 8001404:	f00c f8d4 	bl	800d5b0 <HAL_SPI_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800140e:	f000 f9c5 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	24000988 	.word	0x24000988
 800141c:	40003c00 	.word	0x40003c00

08001420 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001426:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <MX_SPI4_Init+0xa8>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_SPI4_Init+0xa4>)
 800142c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001430:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <MX_SPI4_Init+0xa4>)
 800143a:	2203      	movs	r2, #3
 800143c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800143e:	4b21      	ldr	r3, [pc, #132]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001444:	4b1f      	ldr	r3, [pc, #124]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800144a:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <MX_SPI4_Init+0xa4>)
 800144c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001450:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001452:	4b1c      	ldr	r3, [pc, #112]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001454:	2200      	movs	r2, #0
 8001456:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_SPI4_Init+0xa4>)
 800145a:	2200      	movs	r2, #0
 800145c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800145e:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001460:	2200      	movs	r2, #0
 8001462:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001464:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800146a:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <MX_SPI4_Init+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001472:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001476:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_SPI4_Init+0xa4>)
 800147a:	2200      	movs	r2, #0
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001480:	2200      	movs	r2, #0
 8001482:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001486:	2200      	movs	r2, #0
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_SPI4_Init+0xa4>)
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001492:	2200      	movs	r2, #0
 8001494:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_SPI4_Init+0xa4>)
 8001498:	2200      	movs	r2, #0
 800149a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SPI4_Init+0xa4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_SPI4_Init+0xa4>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SPI4_Init+0xa4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_SPI4_Init+0xa4>)
 80014b0:	f00c f87e 	bl	800d5b0 <HAL_SPI_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80014ba:	f000 f96f 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	24000a10 	.word	0x24000a10
 80014c8:	40013400 	.word	0x40013400

080014cc <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 80014d0:	4b27      	ldr	r3, [pc, #156]	; (8001570 <MX_SPI6_Init+0xa4>)
 80014d2:	4a28      	ldr	r2, [pc, #160]	; (8001574 <MX_SPI6_Init+0xa8>)
 80014d4:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_SPI6_Init+0xa4>)
 80014d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80014dc:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80014de:	4b24      	ldr	r3, [pc, #144]	; (8001570 <MX_SPI6_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_SPI6_Init+0xa4>)
 80014e6:	2203      	movs	r2, #3
 80014e8:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_SPI6_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014f0:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_SPI6_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014f6:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <MX_SPI6_Init+0xa4>)
 80014f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80014fc:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_SPI6_Init+0xa4>)
 8001500:	2200      	movs	r2, #0
 8001502:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_SPI6_Init+0xa4>)
 8001506:	2200      	movs	r2, #0
 8001508:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_SPI6_Init+0xa4>)
 800150c:	2200      	movs	r2, #0
 800150e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_SPI6_Init+0xa4>)
 8001512:	2200      	movs	r2, #0
 8001514:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_SPI6_Init+0xa4>)
 8001518:	2200      	movs	r2, #0
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_SPI6_Init+0xa4>)
 800151e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001522:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <MX_SPI6_Init+0xa4>)
 8001526:	2200      	movs	r2, #0
 8001528:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_SPI6_Init+0xa4>)
 800152c:	2200      	movs	r2, #0
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001530:	4b0f      	ldr	r3, [pc, #60]	; (8001570 <MX_SPI6_Init+0xa4>)
 8001532:	2200      	movs	r2, #0
 8001534:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_SPI6_Init+0xa4>)
 8001538:	2200      	movs	r2, #0
 800153a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_SPI6_Init+0xa4>)
 800153e:	2200      	movs	r2, #0
 8001540:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_SPI6_Init+0xa4>)
 8001544:	2200      	movs	r2, #0
 8001546:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_SPI6_Init+0xa4>)
 800154a:	2200      	movs	r2, #0
 800154c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_SPI6_Init+0xa4>)
 8001550:	2200      	movs	r2, #0
 8001552:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_SPI6_Init+0xa4>)
 8001556:	2200      	movs	r2, #0
 8001558:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_SPI6_Init+0xa4>)
 800155c:	f00c f828 	bl	800d5b0 <HAL_SPI_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8001566:	f000 f919 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	24000a98 	.word	0x24000a98
 8001574:	58001400 	.word	0x58001400

08001578 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <MX_USART2_UART_Init+0x90>)
 800157e:	4a23      	ldr	r2, [pc, #140]	; (800160c <MX_USART2_UART_Init+0x94>)
 8001580:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001582:	4b21      	ldr	r3, [pc, #132]	; (8001608 <MX_USART2_UART_Init+0x90>)
 8001584:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001588:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <MX_USART2_UART_Init+0x90>)
 800158c:	2200      	movs	r2, #0
 800158e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <MX_USART2_UART_Init+0x90>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <MX_USART2_UART_Init+0x90>)
 8001598:	2200      	movs	r2, #0
 800159a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800159c:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <MX_USART2_UART_Init+0x90>)
 800159e:	220c      	movs	r2, #12
 80015a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a2:	4b19      	ldr	r3, [pc, #100]	; (8001608 <MX_USART2_UART_Init+0x90>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a8:	4b17      	ldr	r3, [pc, #92]	; (8001608 <MX_USART2_UART_Init+0x90>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <MX_USART2_UART_Init+0x90>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015b4:	4b14      	ldr	r3, [pc, #80]	; (8001608 <MX_USART2_UART_Init+0x90>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ba:	4b13      	ldr	r3, [pc, #76]	; (8001608 <MX_USART2_UART_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c0:	4811      	ldr	r0, [pc, #68]	; (8001608 <MX_USART2_UART_Init+0x90>)
 80015c2:	f00c f934 	bl	800d82e <HAL_UART_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80015cc:	f000 f8e6 	bl	800179c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015d0:	2100      	movs	r1, #0
 80015d2:	480d      	ldr	r0, [pc, #52]	; (8001608 <MX_USART2_UART_Init+0x90>)
 80015d4:	f00d fa3b 	bl	800ea4e <HAL_UARTEx_SetTxFifoThreshold>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80015de:	f000 f8dd 	bl	800179c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e2:	2100      	movs	r1, #0
 80015e4:	4808      	ldr	r0, [pc, #32]	; (8001608 <MX_USART2_UART_Init+0x90>)
 80015e6:	f00d fa70 	bl	800eaca <HAL_UARTEx_SetRxFifoThreshold>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f000 f8d4 	bl	800179c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <MX_USART2_UART_Init+0x90>)
 80015f6:	f00d f9f1 	bl	800e9dc <HAL_UARTEx_DisableFifoMode>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001600:	f000 f8cc 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}
 8001608:	24000b20 	.word	0x24000b20
 800160c:	40004400 	.word	0x40004400

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 031c 	add.w	r3, r7, #28
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	4b57      	ldr	r3, [pc, #348]	; (8001784 <MX_GPIO_Init+0x174>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	4a55      	ldr	r2, [pc, #340]	; (8001784 <MX_GPIO_Init+0x174>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001636:	4b53      	ldr	r3, [pc, #332]	; (8001784 <MX_GPIO_Init+0x174>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
 8001642:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001644:	4b4f      	ldr	r3, [pc, #316]	; (8001784 <MX_GPIO_Init+0x174>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	4a4e      	ldr	r2, [pc, #312]	; (8001784 <MX_GPIO_Init+0x174>)
 800164c:	f043 0310 	orr.w	r3, r3, #16
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001654:	4b4b      	ldr	r3, [pc, #300]	; (8001784 <MX_GPIO_Init+0x174>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	4b48      	ldr	r3, [pc, #288]	; (8001784 <MX_GPIO_Init+0x174>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	4a46      	ldr	r2, [pc, #280]	; (8001784 <MX_GPIO_Init+0x174>)
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001672:	4b44      	ldr	r3, [pc, #272]	; (8001784 <MX_GPIO_Init+0x174>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001680:	4b40      	ldr	r3, [pc, #256]	; (8001784 <MX_GPIO_Init+0x174>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	4a3f      	ldr	r2, [pc, #252]	; (8001784 <MX_GPIO_Init+0x174>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001690:	4b3c      	ldr	r3, [pc, #240]	; (8001784 <MX_GPIO_Init+0x174>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	4b39      	ldr	r3, [pc, #228]	; (8001784 <MX_GPIO_Init+0x174>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	4a37      	ldr	r2, [pc, #220]	; (8001784 <MX_GPIO_Init+0x174>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ae:	4b35      	ldr	r3, [pc, #212]	; (8001784 <MX_GPIO_Init+0x174>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	60bb      	str	r3, [r7, #8]
 80016ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016bc:	4b31      	ldr	r3, [pc, #196]	; (8001784 <MX_GPIO_Init+0x174>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	4a30      	ldr	r2, [pc, #192]	; (8001784 <MX_GPIO_Init+0x174>)
 80016c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016cc:	4b2d      	ldr	r3, [pc, #180]	; (8001784 <MX_GPIO_Init+0x174>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	607b      	str	r3, [r7, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e0:	4829      	ldr	r0, [pc, #164]	; (8001788 <MX_GPIO_Init+0x178>)
 80016e2:	f004 f877 	bl	80057d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_10
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 415f 	mov.w	r1, #57088	; 0xdf00
 80016ec:	4827      	ldr	r0, [pc, #156]	; (800178c <MX_GPIO_Init+0x17c>)
 80016ee:	f004 f871 	bl	80057d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f8:	2301      	movs	r3, #1
 80016fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001704:	f107 031c 	add.w	r3, r7, #28
 8001708:	4619      	mov	r1, r3
 800170a:	481f      	ldr	r0, [pc, #124]	; (8001788 <MX_GPIO_Init+0x178>)
 800170c:	f003 feba 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_7;
 8001710:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8001714:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001716:	2300      	movs	r3, #0
 8001718:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	481a      	ldr	r0, [pc, #104]	; (8001790 <MX_GPIO_Init+0x180>)
 8001726:	f003 fead 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD11 PD14 PD10
                           PD9 PD8 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_10
 800172a:	f44f 435f 	mov.w	r3, #57088	; 0xdf00
 800172e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001730:	2301      	movs	r3, #1
 8001732:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	4812      	ldr	r0, [pc, #72]	; (800178c <MX_GPIO_Init+0x17c>)
 8001744:	f003 fe9e 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_12;
 8001748:	f243 0303 	movw	r3, #12291	; 0x3003
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	4619      	mov	r1, r3
 800175c:	480d      	ldr	r0, [pc, #52]	; (8001794 <MX_GPIO_Init+0x184>)
 800175e:	f003 fe91 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE12 PE9 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_13;
 8001762:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	4808      	ldr	r0, [pc, #32]	; (8001798 <MX_GPIO_Init+0x188>)
 8001778:	f003 fe84 	bl	8005484 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800177c:	bf00      	nop
 800177e:	3730      	adds	r7, #48	; 0x30
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	58024400 	.word	0x58024400
 8001788:	58020800 	.word	0x58020800
 800178c:	58020c00 	.word	0x58020c00
 8001790:	58020000 	.word	0x58020000
 8001794:	58020400 	.word	0x58020400
 8001798:	58021000 	.word	0x58021000

0800179c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a0:	b672      	cpsid	i
}
 80017a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <Error_Handler+0x8>
	...

080017a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_MspInit+0x30>)
 80017b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017b4:	4a08      	ldr	r2, [pc, #32]	; (80017d8 <HAL_MspInit+0x30>)
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <HAL_MspInit+0x30>)
 80017c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	58024400 	.word	0x58024400

080017dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e4:	f107 0314 	add.w	r3, r7, #20
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]
 80017ec:	605a      	str	r2, [r3, #4]
 80017ee:	609a      	str	r2, [r3, #8]
 80017f0:	60da      	str	r2, [r3, #12]
 80017f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a18      	ldr	r2, [pc, #96]	; (800185c <HAL_ADC_MspInit+0x80>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d129      	bne.n	8001852 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_ADC_MspInit+0x84>)
 8001800:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001804:	4a16      	ldr	r2, [pc, #88]	; (8001860 <HAL_ADC_MspInit+0x84>)
 8001806:	f043 0320 	orr.w	r3, r3, #32
 800180a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800180e:	4b14      	ldr	r3, [pc, #80]	; (8001860 <HAL_ADC_MspInit+0x84>)
 8001810:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001814:	f003 0320 	and.w	r3, r3, #32
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800181c:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_ADC_MspInit+0x84>)
 800181e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_ADC_MspInit+0x84>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800182c:	4b0c      	ldr	r3, [pc, #48]	; (8001860 <HAL_ADC_MspInit+0x84>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|BATADC1_Pin;
 800183a:	2311      	movs	r3, #17
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183e:	2303      	movs	r3, #3
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_ADC_MspInit+0x88>)
 800184e:	f003 fe19 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001852:	bf00      	nop
 8001854:	3728      	adds	r7, #40	; 0x28
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40022000 	.word	0x40022000
 8001860:	58024400 	.word	0x58024400
 8001864:	58020800 	.word	0x58020800

08001868 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0b      	ldr	r2, [pc, #44]	; (80018a4 <HAL_CORDIC_MspInit+0x3c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d10e      	bne.n	8001898 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_CORDIC_MspInit+0x40>)
 800187c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001880:	4a09      	ldr	r2, [pc, #36]	; (80018a8 <HAL_CORDIC_MspInit+0x40>)
 8001882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001886:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_CORDIC_MspInit+0x40>)
 800188c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	48024400 	.word	0x48024400
 80018a8:	58024400 	.word	0x58024400

080018ac <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <HAL_CRC_MspInit+0x3c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d10e      	bne.n	80018dc <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_CRC_MspInit+0x40>)
 80018c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c4:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_CRC_MspInit+0x40>)
 80018c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_CRC_MspInit+0x40>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	58024c00 	.word	0x58024c00
 80018ec:	58024400 	.word	0x58024400

080018f0 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_FMAC_MspInit+0x3c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10e      	bne.n	8001920 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_FMAC_MspInit+0x40>)
 8001904:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001908:	4a09      	ldr	r2, [pc, #36]	; (8001930 <HAL_FMAC_MspInit+0x40>)
 800190a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <HAL_FMAC_MspInit+0x40>)
 8001914:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191c:	60fb      	str	r3, [r7, #12]
 800191e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8001920:	bf00      	nop
 8001922:	3714      	adds	r7, #20
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	48024000 	.word	0x48024000
 8001930:	58024400 	.word	0x58024400

08001934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0c0      	sub	sp, #256	; 0x100
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001950:	22b8      	movs	r2, #184	; 0xb8
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f012 fe46 	bl	80145e6 <memset>
  if(hi2c->Instance==I2C1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4abf      	ldr	r2, [pc, #764]	; (8001c5c <HAL_I2C_MspInit+0x328>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d147      	bne.n	80019f4 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001964:	f04f 0208 	mov.w	r2, #8
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001970:	2300      	movs	r3, #0
 8001972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800197a:	4618      	mov	r0, r3
 800197c:	f009 f98e 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d001      	beq.n	800198a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001986:	f7ff ff09 	bl	800179c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	4bb5      	ldr	r3, [pc, #724]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 800198c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001990:	4ab3      	ldr	r2, [pc, #716]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001992:	f043 0302 	orr.w	r3, r3, #2
 8001996:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800199a:	4bb1      	ldr	r3, [pc, #708]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 800199c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80019a8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b0:	2312      	movs	r3, #18
 80019b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019c2:	2304      	movs	r3, #4
 80019c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019cc:	4619      	mov	r1, r3
 80019ce:	48a5      	ldr	r0, [pc, #660]	; (8001c64 <HAL_I2C_MspInit+0x330>)
 80019d0:	f003 fd58 	bl	8005484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019d4:	4ba2      	ldr	r3, [pc, #648]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 80019d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019da:	4aa1      	ldr	r2, [pc, #644]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 80019dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019e4:	4b9e      	ldr	r3, [pc, #632]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 80019e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80019f2:	e12e      	b.n	8001c52 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C2)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a9b      	ldr	r2, [pc, #620]	; (8001c68 <HAL_I2C_MspInit+0x334>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d147      	bne.n	8001a8e <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019fe:	f04f 0208 	mov.w	r2, #8
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a14:	4618      	mov	r0, r3
 8001a16:	f009 f941 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001a20:	f7ff febc 	bl	800179c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a24:	4b8e      	ldr	r3, [pc, #568]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2a:	4a8d      	ldr	r2, [pc, #564]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a34:	4b8a      	ldr	r3, [pc, #552]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a46:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4a:	2312      	movs	r3, #18
 8001a4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a62:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a66:	4619      	mov	r1, r3
 8001a68:	487e      	ldr	r0, [pc, #504]	; (8001c64 <HAL_I2C_MspInit+0x330>)
 8001a6a:	f003 fd0b 	bl	8005484 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a6e:	4b7c      	ldr	r3, [pc, #496]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a74:	4a7a      	ldr	r2, [pc, #488]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001a76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a7e:	4b78      	ldr	r3, [pc, #480]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a88:	623b      	str	r3, [r7, #32]
 8001a8a:	6a3b      	ldr	r3, [r7, #32]
}
 8001a8c:	e0e1      	b.n	8001c52 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C3)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a76      	ldr	r2, [pc, #472]	; (8001c6c <HAL_I2C_MspInit+0x338>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d16c      	bne.n	8001b72 <HAL_I2C_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001a98:	f04f 0208 	mov.w	r2, #8
 8001a9c:	f04f 0300 	mov.w	r3, #0
 8001aa0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aaa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f009 f8f4 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8001aba:	f7ff fe6f 	bl	800179c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	4b68      	ldr	r3, [pc, #416]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ac4:	4a66      	ldr	r2, [pc, #408]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001ac6:	f043 0301 	orr.w	r3, r3, #1
 8001aca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ace:	4b64      	ldr	r3, [pc, #400]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001ad0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	61fb      	str	r3, [r7, #28]
 8001ada:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001adc:	4b60      	ldr	r3, [pc, #384]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae2:	4a5f      	ldr	r2, [pc, #380]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aec:	4b5c      	ldr	r3, [pc, #368]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	61bb      	str	r3, [r7, #24]
 8001af8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b02:	2312      	movs	r3, #18
 8001b04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b14:	2304      	movs	r3, #4
 8001b16:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4853      	ldr	r0, [pc, #332]	; (8001c70 <HAL_I2C_MspInit+0x33c>)
 8001b22:	f003 fcaf 	bl	8005484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2e:	2312      	movs	r3, #18
 8001b30:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b40:	2304      	movs	r3, #4
 8001b42:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b46:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4849      	ldr	r0, [pc, #292]	; (8001c74 <HAL_I2C_MspInit+0x340>)
 8001b4e:	f003 fc99 	bl	8005484 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b52:	4b43      	ldr	r3, [pc, #268]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b58:	4a41      	ldr	r2, [pc, #260]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001b5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b62:	4b3f      	ldr	r3, [pc, #252]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697b      	ldr	r3, [r7, #20]
}
 8001b70:	e06f      	b.n	8001c52 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C4)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a40      	ldr	r2, [pc, #256]	; (8001c78 <HAL_I2C_MspInit+0x344>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d16a      	bne.n	8001c52 <HAL_I2C_MspInit+0x31e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001b7c:	f04f 0210 	mov.w	r2, #16
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b92:	4618      	mov	r0, r3
 8001b94:	f009 f882 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <HAL_I2C_MspInit+0x26e>
      Error_Handler();
 8001b9e:	f7ff fdfd 	bl	800179c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b2b      	ldr	r3, [pc, #172]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc6:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd0:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd6:	f003 0308 	and.w	r3, r3, #8
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bde:	2340      	movs	r3, #64	; 0x40
 8001be0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001be4:	2312      	movs	r3, #18
 8001be6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001bf6:	2306      	movs	r3, #6
 8001bf8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c00:	4619      	mov	r1, r3
 8001c02:	4818      	ldr	r0, [pc, #96]	; (8001c64 <HAL_I2C_MspInit+0x330>)
 8001c04:	f003 fc3e 	bl	8005484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c10:	2312      	movs	r3, #18
 8001c12:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001c22:	2304      	movs	r3, #4
 8001c24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c28:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4813      	ldr	r0, [pc, #76]	; (8001c7c <HAL_I2C_MspInit+0x348>)
 8001c30:	f003 fc28 	bl	8005484 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c3a:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_I2C_MspInit+0x32c>)
 8001c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
}
 8001c52:	bf00      	nop
 8001c54:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	40005400 	.word	0x40005400
 8001c60:	58024400 	.word	0x58024400
 8001c64:	58020400 	.word	0x58020400
 8001c68:	40005800 	.word	0x40005800
 8001c6c:	40005c00 	.word	0x40005c00
 8001c70:	58020000 	.word	0x58020000
 8001c74:	58020800 	.word	0x58020800
 8001c78:	58001c00 	.word	0x58001c00
 8001c7c:	58020c00 	.word	0x58020c00

08001c80 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0b2      	sub	sp, #200	; 0xc8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	22b8      	movs	r2, #184	; 0xb8
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4618      	mov	r0, r3
 8001c92:	f012 fca8 	bl	80145e6 <memset>
  if(hrng->Instance==RNG)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_RNG_MspInit+0x6c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d121      	bne.n	8001ce4 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001ca0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca4:	f04f 0300 	mov.w	r3, #0
 8001ca8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb2:	f107 0310 	add.w	r3, r7, #16
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f008 fff0 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8001cc2:	f7ff fd6b 	bl	800179c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_RNG_MspInit+0x70>)
 8001cc8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001ccc:	4a08      	ldr	r2, [pc, #32]	; (8001cf0 <HAL_RNG_MspInit+0x70>)
 8001cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cd2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RNG_MspInit+0x70>)
 8001cd8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001ce4:	bf00      	nop
 8001ce6:	37c8      	adds	r7, #200	; 0xc8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	48021800 	.word	0x48021800
 8001cf0:	58024400 	.word	0x58024400

08001cf4 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a2a      	ldr	r2, [pc, #168]	; (8001dbc <HAL_MMC_MspInit+0xc8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d14d      	bne.n	8001db2 <HAL_MMC_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001d16:	4b2a      	ldr	r3, [pc, #168]	; (8001dc0 <HAL_MMC_MspInit+0xcc>)
 8001d18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001d1c:	4a28      	ldr	r2, [pc, #160]	; (8001dc0 <HAL_MMC_MspInit+0xcc>)
 8001d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d22:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_MMC_MspInit+0xcc>)
 8001d28:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d34:	4b22      	ldr	r3, [pc, #136]	; (8001dc0 <HAL_MMC_MspInit+0xcc>)
 8001d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d3a:	4a21      	ldr	r2, [pc, #132]	; (8001dc0 <HAL_MMC_MspInit+0xcc>)
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_MMC_MspInit+0xcc>)
 8001d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	60fb      	str	r3, [r7, #12]
 8001d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <HAL_MMC_MspInit+0xcc>)
 8001d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d58:	4a19      	ldr	r2, [pc, #100]	; (8001dc0 <HAL_MMC_MspInit+0xcc>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_MMC_MspInit+0xcc>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PD2     ------> SDMMC1_CMD
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d70:	2304      	movs	r3, #4
 8001d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001d80:	230c      	movs	r3, #12
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	480e      	ldr	r0, [pc, #56]	; (8001dc4 <HAL_MMC_MspInit+0xd0>)
 8001d8c:	f003 fb7a 	bl	8005484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001d90:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001da2:	230c      	movs	r3, #12
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da6:	f107 0314 	add.w	r3, r7, #20
 8001daa:	4619      	mov	r1, r3
 8001dac:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <HAL_MMC_MspInit+0xd4>)
 8001dae:	f003 fb69 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001db2:	bf00      	nop
 8001db4:	3728      	adds	r7, #40	; 0x28
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	52007000 	.word	0x52007000
 8001dc0:	58024400 	.word	0x58024400
 8001dc4:	58020c00 	.word	0x58020c00
 8001dc8:	58020800 	.word	0x58020800

08001dcc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b0c8      	sub	sp, #288	; 0x120
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001dd6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001dda:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001df0:	22b8      	movs	r2, #184	; 0xb8
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f012 fbf6 	bl	80145e6 <memset>
  if(hspi->Instance==SPI1)
 8001dfa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001dfe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a98      	ldr	r2, [pc, #608]	; (8002068 <HAL_SPI_MspInit+0x29c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	f040 8091 	bne.w	8001f30 <HAL_SPI_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001e1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e22:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e26:	4618      	mov	r0, r3
 8001e28:	f008 ff38 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <HAL_SPI_MspInit+0x6a>
    {
      Error_Handler();
 8001e32:	f7ff fcb3 	bl	800179c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e36:	4b8d      	ldr	r3, [pc, #564]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e3c:	4a8b      	ldr	r2, [pc, #556]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e3e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e46:	4b89      	ldr	r3, [pc, #548]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e54:	4b85      	ldr	r3, [pc, #532]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5a:	4a84      	ldr	r2, [pc, #528]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e5c:	f043 0302 	orr.w	r3, r3, #2
 8001e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e64:	4b81      	ldr	r3, [pc, #516]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b7e      	ldr	r3, [pc, #504]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e78:	4a7c      	ldr	r2, [pc, #496]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e82:	4b7a      	ldr	r3, [pc, #488]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	647b      	str	r3, [r7, #68]	; 0x44
 8001e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e90:	4b76      	ldr	r3, [pc, #472]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e96:	4a75      	ldr	r2, [pc, #468]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001e98:	f043 0308 	orr.w	r3, r3, #8
 8001e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea0:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8001eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    PB4(NJTRST)     ------> SPI1_MISO
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8001eae:	2318      	movs	r3, #24
 8001eb0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ec6:	2305      	movs	r3, #5
 8001ec8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ecc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4867      	ldr	r0, [pc, #412]	; (8002070 <HAL_SPI_MspInit+0x2a4>)
 8001ed4:	f003 fad6 	bl	8005484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ed8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001edc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ef2:	2305      	movs	r3, #5
 8001ef4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001efc:	4619      	mov	r1, r3
 8001efe:	485d      	ldr	r0, [pc, #372]	; (8002074 <HAL_SPI_MspInit+0x2a8>)
 8001f00:	f003 fac0 	bl	8005484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f04:	2380      	movs	r3, #128	; 0x80
 8001f06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f22:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001f26:	4619      	mov	r1, r3
 8001f28:	4853      	ldr	r0, [pc, #332]	; (8002078 <HAL_SPI_MspInit+0x2ac>)
 8001f2a:	f003 faab 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8001f2e:	e24d      	b.n	80023cc <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI2)
 8001f30:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001f34:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a4f      	ldr	r2, [pc, #316]	; (800207c <HAL_SPI_MspInit+0x2b0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	f040 80a0 	bne.w	8002084 <HAL_SPI_MspInit+0x2b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001f44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001f50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f58:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f008 fe9d 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_SPI_MspInit+0x1a0>
      Error_Handler();
 8001f68:	f7ff fc18 	bl	800179c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f6c:	4b3f      	ldr	r3, [pc, #252]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f72:	4a3e      	ldr	r2, [pc, #248]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8a:	4b38      	ldr	r3, [pc, #224]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f90:	4a36      	ldr	r2, [pc, #216]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001f92:	f043 0302 	orr.w	r3, r3, #2
 8001f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f9a:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fa8:	4b30      	ldr	r3, [pc, #192]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fae:	4a2f      	ldr	r2, [pc, #188]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fb8:	4b2c      	ldr	r3, [pc, #176]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc6:	4b29      	ldr	r3, [pc, #164]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fcc:	4a27      	ldr	r2, [pc, #156]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fd6:	4b25      	ldr	r3, [pc, #148]	; (800206c <HAL_SPI_MspInit+0x2a0>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	633b      	str	r3, [r7, #48]	; 0x30
 8001fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fe8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ffe:	2305      	movs	r3, #5
 8002000:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002008:	4619      	mov	r1, r3
 800200a:	4819      	ldr	r0, [pc, #100]	; (8002070 <HAL_SPI_MspInit+0x2a4>)
 800200c:	f003 fa3a 	bl	8005484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002010:	2308      	movs	r3, #8
 8002012:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002028:	2305      	movs	r3, #5
 800202a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800202e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002032:	4619      	mov	r1, r3
 8002034:	4810      	ldr	r0, [pc, #64]	; (8002078 <HAL_SPI_MspInit+0x2ac>)
 8002036:	f003 fa25 	bl	8005484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800203a:	230c      	movs	r3, #12
 800203c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002040:	2302      	movs	r3, #2
 8002042:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002052:	2305      	movs	r3, #5
 8002054:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002058:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800205c:	4619      	mov	r1, r3
 800205e:	4808      	ldr	r0, [pc, #32]	; (8002080 <HAL_SPI_MspInit+0x2b4>)
 8002060:	f003 fa10 	bl	8005484 <HAL_GPIO_Init>
}
 8002064:	e1b2      	b.n	80023cc <HAL_SPI_MspInit+0x600>
 8002066:	bf00      	nop
 8002068:	40013000 	.word	0x40013000
 800206c:	58024400 	.word	0x58024400
 8002070:	58020400 	.word	0x58020400
 8002074:	58020000 	.word	0x58020000
 8002078:	58020c00 	.word	0x58020c00
 800207c:	40003800 	.word	0x40003800
 8002080:	58020800 	.word	0x58020800
  else if(hspi->Instance==SPI3)
 8002084:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002088:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4ad1      	ldr	r2, [pc, #836]	; (80023d8 <HAL_SPI_MspInit+0x60c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	f040 8099 	bne.w	80021ca <HAL_SPI_MspInit+0x3fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80020a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020ac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020b0:	4618      	mov	r0, r3
 80020b2:	f008 fdf3 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_SPI_MspInit+0x2f4>
      Error_Handler();
 80020bc:	f7ff fb6e 	bl	800179c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020c0:	4bc6      	ldr	r3, [pc, #792]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80020c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020c6:	4ac5      	ldr	r2, [pc, #788]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80020c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020d0:	4bc2      	ldr	r3, [pc, #776]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80020d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	4bbf      	ldr	r3, [pc, #764]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e4:	4abd      	ldr	r2, [pc, #756]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80020e6:	f043 0304 	orr.w	r3, r3, #4
 80020ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020ee:	4bbb      	ldr	r3, [pc, #748]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80020f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fc:	4bb7      	ldr	r3, [pc, #732]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80020fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002102:	4ab6      	ldr	r2, [pc, #728]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800210c:	4bb3      	ldr	r3, [pc, #716]	; (80023dc <HAL_SPI_MspInit+0x610>)
 800210e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
 8002118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4bb0      	ldr	r3, [pc, #704]	; (80023dc <HAL_SPI_MspInit+0x610>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002120:	4aae      	ldr	r2, [pc, #696]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800212a:	4bac      	ldr	r3, [pc, #688]	; (80023dc <HAL_SPI_MspInit+0x610>)
 800212c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002130:	f003 0201 	and.w	r2, r3, #1
 8002134:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002138:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002142:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002146:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002148:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800214c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002162:	2306      	movs	r3, #6
 8002164:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002168:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800216c:	4619      	mov	r1, r3
 800216e:	489c      	ldr	r0, [pc, #624]	; (80023e0 <HAL_SPI_MspInit+0x614>)
 8002170:	f003 f988 	bl	8005484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002174:	2340      	movs	r3, #64	; 0x40
 8002176:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2302      	movs	r3, #2
 800217c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002186:	2300      	movs	r3, #0
 8002188:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 800218c:	2305      	movs	r3, #5
 800218e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002192:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002196:	4619      	mov	r1, r3
 8002198:	4892      	ldr	r0, [pc, #584]	; (80023e4 <HAL_SPI_MspInit+0x618>)
 800219a:	f003 f973 	bl	8005484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800219e:	2310      	movs	r3, #16
 80021a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	2302      	movs	r3, #2
 80021a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021b6:	2306      	movs	r3, #6
 80021b8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80021c0:	4619      	mov	r1, r3
 80021c2:	4889      	ldr	r0, [pc, #548]	; (80023e8 <HAL_SPI_MspInit+0x61c>)
 80021c4:	f003 f95e 	bl	8005484 <HAL_GPIO_Init>
}
 80021c8:	e100      	b.n	80023cc <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI4)
 80021ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80021ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a85      	ldr	r2, [pc, #532]	; (80023ec <HAL_SPI_MspInit+0x620>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d156      	bne.n	800228a <HAL_SPI_MspInit+0x4be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80021dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021f2:	4618      	mov	r0, r3
 80021f4:	f008 fd52 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_SPI_MspInit+0x436>
      Error_Handler();
 80021fe:	f7ff facd 	bl	800179c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002202:	4b76      	ldr	r3, [pc, #472]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002208:	4a74      	ldr	r2, [pc, #464]	; (80023dc <HAL_SPI_MspInit+0x610>)
 800220a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800220e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002212:	4b72      	ldr	r3, [pc, #456]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002214:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002218:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800221c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800222a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800222e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002230:	4b6a      	ldr	r3, [pc, #424]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002236:	4a69      	ldr	r2, [pc, #420]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002238:	f043 0310 	orr.w	r3, r3, #16
 800223c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002240:	4b66      	ldr	r3, [pc, #408]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002246:	f003 0210 	and.w	r2, r3, #16
 800224a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800224e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002258:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800225c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800225e:	2374      	movs	r3, #116	; 0x74
 8002260:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002276:	2305      	movs	r3, #5
 8002278:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800227c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002280:	4619      	mov	r1, r3
 8002282:	485b      	ldr	r0, [pc, #364]	; (80023f0 <HAL_SPI_MspInit+0x624>)
 8002284:	f003 f8fe 	bl	8005484 <HAL_GPIO_Init>
}
 8002288:	e0a0      	b.n	80023cc <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI6)
 800228a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800228e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a57      	ldr	r2, [pc, #348]	; (80023f4 <HAL_SPI_MspInit+0x628>)
 8002298:	4293      	cmp	r3, r2
 800229a:	f040 8097 	bne.w	80023cc <HAL_SPI_MspInit+0x600>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 800229e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022b4:	4618      	mov	r0, r3
 80022b6:	f008 fcf1 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_SPI_MspInit+0x4f8>
      Error_Handler();
 80022c0:	f7ff fa6c 	bl	800179c <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 80022c4:	4b45      	ldr	r3, [pc, #276]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80022c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022ca:	4a44      	ldr	r2, [pc, #272]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80022cc:	f043 0320 	orr.w	r3, r3, #32
 80022d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80022d4:	4b41      	ldr	r3, [pc, #260]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80022d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80022da:	f003 0220 	and.w	r2, r3, #32
 80022de:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80022e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80022ec:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80022f0:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	4b3a      	ldr	r3, [pc, #232]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f8:	4a38      	ldr	r2, [pc, #224]	; (80023dc <HAL_SPI_MspInit+0x610>)
 80022fa:	f043 0302 	orr.w	r3, r3, #2
 80022fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002308:	f003 0202 	and.w	r2, r3, #2
 800230c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002310:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800231a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800231e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002320:	4b2e      	ldr	r3, [pc, #184]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002326:	4a2d      	ldr	r2, [pc, #180]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002330:	4b2a      	ldr	r3, [pc, #168]	; (80023dc <HAL_SPI_MspInit+0x610>)
 8002332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002336:	f003 0201 	and.w	r2, r3, #1
 800233a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800233e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002348:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800234c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800234e:	2320      	movs	r3, #32
 8002350:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8002366:	2308      	movs	r3, #8
 8002368:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002370:	4619      	mov	r1, r3
 8002372:	4821      	ldr	r0, [pc, #132]	; (80023f8 <HAL_SPI_MspInit+0x62c>)
 8002374:	f003 f886 	bl	8005484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002378:	2301      	movs	r3, #1
 800237a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8002390:	2305      	movs	r3, #5
 8002392:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800239a:	4619      	mov	r1, r3
 800239c:	4812      	ldr	r0, [pc, #72]	; (80023e8 <HAL_SPI_MspInit+0x61c>)
 800239e:	f003 f871 	bl	8005484 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80023a2:	2360      	movs	r3, #96	; 0x60
 80023a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80023ba:	2308      	movs	r3, #8
 80023bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80023c4:	4619      	mov	r1, r3
 80023c6:	4808      	ldr	r0, [pc, #32]	; (80023e8 <HAL_SPI_MspInit+0x61c>)
 80023c8:	f003 f85c 	bl	8005484 <HAL_GPIO_Init>
}
 80023cc:	bf00      	nop
 80023ce:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40003c00 	.word	0x40003c00
 80023dc:	58024400 	.word	0x58024400
 80023e0:	58020800 	.word	0x58020800
 80023e4:	58020c00 	.word	0x58020c00
 80023e8:	58020000 	.word	0x58020000
 80023ec:	40013400 	.word	0x40013400
 80023f0:	58021000 	.word	0x58021000
 80023f4:	58001400 	.word	0x58001400
 80023f8:	58020400 	.word	0x58020400

080023fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0b8      	sub	sp, #224	; 0xe0
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	22b8      	movs	r2, #184	; 0xb8
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f012 f8e2 	bl	80145e6 <memset>
  if(huart->Instance==USART2)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a26      	ldr	r2, [pc, #152]	; (80024c0 <HAL_UART_MspInit+0xc4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d145      	bne.n	80024b8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800242c:	f04f 0202 	mov.w	r2, #2
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002438:	2300      	movs	r3, #0
 800243a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f008 fc2a 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800244e:	f7ff f9a5 	bl	800179c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002452:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_UART_MspInit+0xc8>)
 8002454:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002458:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_UART_MspInit+0xc8>)
 800245a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002462:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HAL_UART_MspInit+0xc8>)
 8002464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	4b14      	ldr	r3, [pc, #80]	; (80024c4 <HAL_UART_MspInit+0xc8>)
 8002472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002476:	4a13      	ldr	r2, [pc, #76]	; (80024c4 <HAL_UART_MspInit+0xc8>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002480:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_UART_MspInit+0xc8>)
 8002482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800248e:	230c      	movs	r3, #12
 8002490:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024a6:	2307      	movs	r3, #7
 80024a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024b0:	4619      	mov	r1, r3
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <HAL_UART_MspInit+0xcc>)
 80024b4:	f002 ffe6 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024b8:	bf00      	nop
 80024ba:	37e0      	adds	r7, #224	; 0xe0
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40004400 	.word	0x40004400
 80024c4:	58024400 	.word	0x58024400
 80024c8:	58020000 	.word	0x58020000

080024cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024d0:	e7fe      	b.n	80024d0 <NMI_Handler+0x4>

080024d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024d2:	b480      	push	{r7}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024d6:	e7fe      	b.n	80024d6 <HardFault_Handler+0x4>

080024d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024dc:	e7fe      	b.n	80024dc <MemManage_Handler+0x4>

080024de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024de:	b480      	push	{r7}
 80024e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024e2:	e7fe      	b.n	80024e2 <BusFault_Handler+0x4>

080024e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <UsageFault_Handler+0x4>

080024ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002518:	f000 faaa 	bl	8002a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}

08002520 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002524:	4802      	ldr	r0, [pc, #8]	; (8002530 <OTG_HS_IRQHandler+0x10>)
 8002526:	f006 faa8 	bl	8008a7a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	240020b8 	.word	0x240020b8

08002534 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return 1;
 8002538:	2301      	movs	r3, #1
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <_kill>:

int _kill(int pid, int sig)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800254e:	f012 f8ad 	bl	80146ac <__errno>
 8002552:	4603      	mov	r3, r0
 8002554:	2216      	movs	r2, #22
 8002556:	601a      	str	r2, [r3, #0]
  return -1;
 8002558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <_exit>:

void _exit (int status)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ffe7 	bl	8002544 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002576:	e7fe      	b.n	8002576 <_exit+0x12>

08002578 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
 8002588:	e00a      	b.n	80025a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800258a:	f3af 8000 	nop.w
 800258e:	4601      	mov	r1, r0
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	60ba      	str	r2, [r7, #8]
 8002596:	b2ca      	uxtb	r2, r1
 8002598:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	3301      	adds	r3, #1
 800259e:	617b      	str	r3, [r7, #20]
 80025a0:	697a      	ldr	r2, [r7, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	dbf0      	blt.n	800258a <_read+0x12>
  }

  return len;
 80025a8:	687b      	ldr	r3, [r7, #4]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b086      	sub	sp, #24
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	60f8      	str	r0, [r7, #12]
 80025ba:	60b9      	str	r1, [r7, #8]
 80025bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	e009      	b.n	80025d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	60ba      	str	r2, [r7, #8]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	3301      	adds	r3, #1
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	429a      	cmp	r2, r3
 80025de:	dbf1      	blt.n	80025c4 <_write+0x12>
  }
  return len;
 80025e0:	687b      	ldr	r3, [r7, #4]
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <_close>:

int _close(int file)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002612:	605a      	str	r2, [r3, #4]
  return 0;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <_isatty>:

int _isatty(int file)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800262a:	2301      	movs	r3, #1
}
 800262c:	4618      	mov	r0, r3
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002638:	b480      	push	{r7}
 800263a:	b085      	sub	sp, #20
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <_sbrk+0x5c>)
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <_sbrk+0x60>)
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <_sbrk+0x64>)
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <_sbrk+0x68>)
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d207      	bcs.n	8002694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002684:	f012 f812 	bl	80146ac <__errno>
 8002688:	4603      	mov	r3, r0
 800268a:	220c      	movs	r2, #12
 800268c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	e009      	b.n	80026a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <_sbrk+0x64>)
 80026a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	24050000 	.word	0x24050000
 80026b4:	00000400 	.word	0x00000400
 80026b8:	24000bb4 	.word	0x24000bb4
 80026bc:	24002930 	.word	0x24002930

080026c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026c4:	4b32      	ldr	r3, [pc, #200]	; (8002790 <SystemInit+0xd0>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	4a31      	ldr	r2, [pc, #196]	; (8002790 <SystemInit+0xd0>)
 80026cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80026d4:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <SystemInit+0xd4>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 030f 	and.w	r3, r3, #15
 80026dc:	2b06      	cmp	r3, #6
 80026de:	d807      	bhi.n	80026f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80026e0:	4b2c      	ldr	r3, [pc, #176]	; (8002794 <SystemInit+0xd4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 030f 	bic.w	r3, r3, #15
 80026e8:	4a2a      	ldr	r2, [pc, #168]	; (8002794 <SystemInit+0xd4>)
 80026ea:	f043 0307 	orr.w	r3, r3, #7
 80026ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80026f0:	4b29      	ldr	r3, [pc, #164]	; (8002798 <SystemInit+0xd8>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a28      	ldr	r2, [pc, #160]	; (8002798 <SystemInit+0xd8>)
 80026f6:	f043 0301 	orr.w	r3, r3, #1
 80026fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026fc:	4b26      	ldr	r3, [pc, #152]	; (8002798 <SystemInit+0xd8>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002702:	4b25      	ldr	r3, [pc, #148]	; (8002798 <SystemInit+0xd8>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4924      	ldr	r1, [pc, #144]	; (8002798 <SystemInit+0xd8>)
 8002708:	4b24      	ldr	r3, [pc, #144]	; (800279c <SystemInit+0xdc>)
 800270a:	4013      	ands	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800270e:	4b21      	ldr	r3, [pc, #132]	; (8002794 <SystemInit+0xd4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800271a:	4b1e      	ldr	r3, [pc, #120]	; (8002794 <SystemInit+0xd4>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 030f 	bic.w	r3, r3, #15
 8002722:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <SystemInit+0xd4>)
 8002724:	f043 0307 	orr.w	r3, r3, #7
 8002728:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <SystemInit+0xd8>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <SystemInit+0xd8>)
 8002732:	2200      	movs	r2, #0
 8002734:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002736:	4b18      	ldr	r3, [pc, #96]	; (8002798 <SystemInit+0xd8>)
 8002738:	2200      	movs	r2, #0
 800273a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <SystemInit+0xd8>)
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <SystemInit+0xe0>)
 8002740:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <SystemInit+0xd8>)
 8002744:	4a17      	ldr	r2, [pc, #92]	; (80027a4 <SystemInit+0xe4>)
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <SystemInit+0xd8>)
 800274a:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <SystemInit+0xe8>)
 800274c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <SystemInit+0xd8>)
 8002750:	2200      	movs	r2, #0
 8002752:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <SystemInit+0xd8>)
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <SystemInit+0xe8>)
 8002758:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <SystemInit+0xd8>)
 800275c:	2200      	movs	r2, #0
 800275e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <SystemInit+0xd8>)
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <SystemInit+0xe8>)
 8002764:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <SystemInit+0xd8>)
 8002768:	2200      	movs	r2, #0
 800276a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <SystemInit+0xd8>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a09      	ldr	r2, [pc, #36]	; (8002798 <SystemInit+0xd8>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002776:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002778:	4b07      	ldr	r3, [pc, #28]	; (8002798 <SystemInit+0xd8>)
 800277a:	2200      	movs	r2, #0
 800277c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <SystemInit+0xec>)
 8002780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002784:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	e000ed00 	.word	0xe000ed00
 8002794:	52002000 	.word	0x52002000
 8002798:	58024400 	.word	0x58024400
 800279c:	eaf6ed7f 	.word	0xeaf6ed7f
 80027a0:	02020200 	.word	0x02020200
 80027a4:	01ff0000 	.word	0x01ff0000
 80027a8:	01010280 	.word	0x01010280
 80027ac:	52004000 	.word	0x52004000

080027b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027b4:	f7ff ff84 	bl	80026c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027b8:	480c      	ldr	r0, [pc, #48]	; (80027ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027ba:	490d      	ldr	r1, [pc, #52]	; (80027f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027bc:	4a0d      	ldr	r2, [pc, #52]	; (80027f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c0:	e002      	b.n	80027c8 <LoopCopyDataInit>

080027c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027c6:	3304      	adds	r3, #4

080027c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027cc:	d3f9      	bcc.n	80027c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ce:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d0:	4c0a      	ldr	r4, [pc, #40]	; (80027fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80027d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d4:	e001      	b.n	80027da <LoopFillZerobss>

080027d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027d8:	3204      	adds	r2, #4

080027da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027dc:	d3fb      	bcc.n	80027d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027de:	f011 ff6b 	bl	80146b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027e2:	f7fe fa29 	bl	8000c38 <main>
  bx  lr
 80027e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80027e8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80027ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80027f0:	240002e0 	.word	0x240002e0
  ldr r2, =_sidata
 80027f4:	08018128 	.word	0x08018128
  ldr r2, =_sbss
 80027f8:	240002e0 	.word	0x240002e0
  ldr r4, =_ebss
 80027fc:	2400292c 	.word	0x2400292c

08002800 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002800:	e7fe      	b.n	8002800 <ADC3_IRQHandler>

08002802 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8002802:	b580      	push	{r7, lr}
 8002804:	b082      	sub	sp, #8
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
}
 8002812:	bf00      	nop
 8002814:	f7fe ffc2 	bl	800179c <Error_Handler>
 8002818:	e7fe      	b.n	8002818 <stm32_lock_init+0x16>
  lock->flag = 0;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	705a      	strb	r2, [r3, #1]
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b084      	sub	sp, #16
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002836:	f3ef 8310 	mrs	r3, PRIMASK
 800283a:	60bb      	str	r3, [r7, #8]
  return(result);
 800283c:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8002846:	b672      	cpsid	i
}
 8002848:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800284a:	f3bf 8f4f 	dsb	sy
}
 800284e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002850:	f3bf 8f6f 	isb	sy
}
 8002854:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d104      	bne.n	8002866 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 800285c:	b672      	cpsid	i
}
 800285e:	bf00      	nop
 8002860:	f7fe ff9c 	bl	800179c <Error_Handler>
 8002864:	e7fe      	b.n	8002864 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	785b      	ldrb	r3, [r3, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d103      	bne.n	8002876 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	701a      	strb	r2, [r3, #0]
 8002874:	e008      	b.n	8002888 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	785b      	ldrb	r3, [r3, #1]
 800287a:	2bff      	cmp	r3, #255	; 0xff
 800287c:	d104      	bne.n	8002888 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800287e:	b672      	cpsid	i
}
 8002880:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8002882:	f7fe ff8b 	bl	800179c <Error_Handler>
 8002886:	e7fe      	b.n	8002886 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	3301      	adds	r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	705a      	strb	r2, [r3, #1]
}
 8002894:	bf00      	nop
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d104      	bne.n	80028b4 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80028aa:	b672      	cpsid	i
}
 80028ac:	bf00      	nop
 80028ae:	f7fe ff75 	bl	800179c <Error_Handler>
 80028b2:	e7fe      	b.n	80028b2 <stm32_lock_release+0x16>
  if (lock->counter == 0)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	785b      	ldrb	r3, [r3, #1]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 80028bc:	b672      	cpsid	i
}
 80028be:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80028c0:	f7fe ff6c 	bl	800179c <Error_Handler>
 80028c4:	e7fe      	b.n	80028c4 <stm32_lock_release+0x28>
  }
  lock->counter--;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	785b      	ldrb	r3, [r3, #1]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <stm32_lock_release+0x4a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 80028e2:	b662      	cpsie	i
}
 80028e4:	bf00      	nop
  {
    __enable_irq();
  }
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d105      	bne.n	8002908 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80028fc:	f011 fed6 	bl	80146ac <__errno>
 8002900:	4603      	mov	r3, r0
 8002902:	2216      	movs	r2, #22
 8002904:	601a      	str	r2, [r3, #0]
    return;
 8002906:	e015      	b.n	8002934 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8002908:	2002      	movs	r0, #2
 800290a:	f010 fe53 	bl	80135b4 <malloc>
 800290e:	4603      	mov	r3, r0
 8002910:	461a      	mov	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff6d 	bl	8002802 <stm32_lock_init>
    return;
 8002928:	e004      	b.n	8002934 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 800292a:	b672      	cpsid	i
}
 800292c:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800292e:	f7fe ff35 	bl	800179c <Error_Handler>
 8002932:	e7fe      	b.n	8002932 <__retarget_lock_init_recursive+0x44>
}
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d104      	bne.n	8002952 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002948:	b672      	cpsid	i
}
 800294a:	bf00      	nop
 800294c:	f7fe ff26 	bl	800179c <Error_Handler>
 8002950:	e7fe      	b.n	8002950 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff6a 	bl	800282e <stm32_lock_acquire>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d104      	bne.n	800297a <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
}
 8002972:	bf00      	nop
 8002974:	f7fe ff12 	bl	800179c <Error_Handler>
 8002978:	e7fe      	b.n	8002978 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff8d 	bl	800289c <stm32_lock_release>
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002992:	2003      	movs	r0, #3
 8002994:	f001 fd22 	bl	80043dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002998:	f007 ffaa 	bl	800a8f0 <HAL_RCC_GetSysClockFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b15      	ldr	r3, [pc, #84]	; (80029f4 <HAL_Init+0x68>)
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	4913      	ldr	r1, [pc, #76]	; (80029f8 <HAL_Init+0x6c>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	fa22 f303 	lsr.w	r3, r2, r3
 80029b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <HAL_Init+0x68>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <HAL_Init+0x6c>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	f003 031f 	and.w	r3, r3, #31
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	4a0b      	ldr	r2, [pc, #44]	; (80029fc <HAL_Init+0x70>)
 80029ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029d0:	4a0b      	ldr	r2, [pc, #44]	; (8002a00 <HAL_Init+0x74>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029d6:	200f      	movs	r0, #15
 80029d8:	f000 f814 	bl	8002a04 <HAL_InitTick>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e002      	b.n	80029ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029e6:	f7fe fedf 	bl	80017a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3708      	adds	r7, #8
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	58024400 	.word	0x58024400
 80029f8:	08017cb4 	.word	0x08017cb4
 80029fc:	24000004 	.word	0x24000004
 8002a00:	24000000 	.word	0x24000000

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <HAL_InitTick+0x60>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d101      	bne.n	8002a18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e021      	b.n	8002a5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a18:	4b13      	ldr	r3, [pc, #76]	; (8002a68 <HAL_InitTick+0x64>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_InitTick+0x60>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	4619      	mov	r1, r3
 8002a22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 fd07 	bl	8004442 <HAL_SYSTICK_Config>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e00e      	b.n	8002a5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b0f      	cmp	r3, #15
 8002a42:	d80a      	bhi.n	8002a5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a44:	2200      	movs	r2, #0
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4c:	f001 fcd1 	bl	80043f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a50:	4a06      	ldr	r2, [pc, #24]	; (8002a6c <HAL_InitTick+0x68>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e000      	b.n	8002a5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2400000c 	.word	0x2400000c
 8002a68:	24000000 	.word	0x24000000
 8002a6c:	24000008 	.word	0x24000008

08002a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_IncTick+0x20>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_IncTick+0x24>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4413      	add	r3, r2
 8002a80:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <HAL_IncTick+0x24>)
 8002a82:	6013      	str	r3, [r2, #0]
}
 8002a84:	bf00      	nop
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	2400000c 	.word	0x2400000c
 8002a94:	24000bc0 	.word	0x24000bc0

08002a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a9c:	4b03      	ldr	r3, [pc, #12]	; (8002aac <HAL_GetTick+0x14>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	24000bc0 	.word	0x24000bc0

08002ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ab8:	f7ff ffee 	bl	8002a98 <HAL_GetTick>
 8002abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac8:	d005      	beq.n	8002ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_Delay+0x44>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ad6:	bf00      	nop
 8002ad8:	f7ff ffde 	bl	8002a98 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	68fa      	ldr	r2, [r7, #12]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d8f7      	bhi.n	8002ad8 <HAL_Delay+0x28>
  {
  }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2400000c 	.word	0x2400000c

08002af8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	609a      	str	r2, [r3, #8]
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
 8002b26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b087      	sub	sp, #28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
 8002b6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3360      	adds	r3, #96	; 0x60
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4413      	add	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a10      	ldr	r2, [pc, #64]	; (8002bc0 <LL_ADC_SetOffset+0x60>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d10b      	bne.n	8002b9c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b9a:	e00b      	b.n	8002bb4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	601a      	str	r2, [r3, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	371c      	adds	r7, #28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	58026000 	.word	0x58026000

08002bc4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3360      	adds	r3, #96	; 0x60
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3714      	adds	r7, #20
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 031f 	and.w	r3, r3, #31
 8002c0a:	6879      	ldr	r1, [r7, #4]
 8002c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	611a      	str	r2, [r3, #16]
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a0c      	ldr	r2, [pc, #48]	; (8002c64 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00e      	beq.n	8002c56 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3360      	adds	r3, #96	; 0x60
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	601a      	str	r2, [r3, #0]
  }
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	58026000 	.word	0x58026000

08002c68 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b087      	sub	sp, #28
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <LL_ADC_SetOffsetSaturation+0x40>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d10e      	bne.n	8002c9a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	3360      	adds	r3, #96	; 0x60
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	371c      	adds	r7, #28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	58026000 	.word	0x58026000

08002cac <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b087      	sub	sp, #28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <LL_ADC_SetOffsetSign+0x40>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d10e      	bne.n	8002cde <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3360      	adds	r3, #96	; 0x60
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8002cde:	bf00      	nop
 8002ce0:	371c      	adds	r7, #28
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	58026000 	.word	0x58026000

08002cf0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b087      	sub	sp, #28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	3360      	adds	r3, #96	; 0x60
 8002d00:	461a      	mov	r2, r3
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4413      	add	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4a0c      	ldr	r2, [pc, #48]	; (8002d40 <LL_ADC_SetOffsetState+0x50>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d108      	bne.n	8002d24 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002d22:	e007      	b.n	8002d34 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	601a      	str	r2, [r3, #0]
}
 8002d34:	bf00      	nop
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	58026000 	.word	0x58026000

08002d44 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	3330      	adds	r3, #48	; 0x30
 8002d54:	461a      	mov	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	0a1b      	lsrs	r3, r3, #8
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	4413      	add	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f003 031f 	and.w	r3, r3, #31
 8002d6e:	211f      	movs	r1, #31
 8002d70:	fa01 f303 	lsl.w	r3, r1, r3
 8002d74:	43db      	mvns	r3, r3
 8002d76:	401a      	ands	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	0e9b      	lsrs	r3, r3, #26
 8002d7c:	f003 011f 	and.w	r1, r3, #31
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	fa01 f303 	lsl.w	r3, r1, r3
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d90:	bf00      	nop
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3314      	adds	r3, #20
 8002dac:	461a      	mov	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	0e5b      	lsrs	r3, r3, #25
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	4413      	add	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	0d1b      	lsrs	r3, r3, #20
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2107      	movs	r1, #7
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	0d1b      	lsrs	r3, r3, #20
 8002dd6:	f003 031f 	and.w	r3, r3, #31
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8002de0:	431a      	orrs	r2, r3
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4a1a      	ldr	r2, [pc, #104]	; (8002e6c <LL_ADC_SetChannelSingleDiff+0x78>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d115      	bne.n	8002e34 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e14:	43db      	mvns	r3, r3
 8002e16:	401a      	ands	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0318 	and.w	r3, r3, #24
 8002e1e:	4914      	ldr	r1, [pc, #80]	; (8002e70 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e20:	40d9      	lsrs	r1, r3
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	400b      	ands	r3, r1
 8002e26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002e32:	e014      	b.n	8002e5e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e40:	43db      	mvns	r3, r3
 8002e42:	401a      	ands	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f003 0318 	and.w	r3, r3, #24
 8002e4a:	4909      	ldr	r1, [pc, #36]	; (8002e70 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002e4c:	40d9      	lsrs	r1, r3
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	400b      	ands	r3, r1
 8002e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e56:	431a      	orrs	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	58026000 	.word	0x58026000
 8002e70:	000fffff 	.word	0x000fffff

08002e74 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002e82:	4013      	ands	r3, r2
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6093      	str	r3, [r2, #8]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	5fffffc0 	.word	0x5fffffc0

08002e98 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eac:	d101      	bne.n	8002eb2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e000      	b.n	8002eb4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <LL_ADC_EnableInternalRegulator+0x24>)
 8002ece:	4013      	ands	r3, r2
 8002ed0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr
 8002ee4:	6fffffc0 	.word	0x6fffffc0

08002ee8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002efc:	d101      	bne.n	8002f02 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <LL_ADC_IsEnabled+0x18>
 8002f24:	2301      	movs	r3, #1
 8002f26:	e000      	b.n	8002f2a <LL_ADC_IsEnabled+0x1a>
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d101      	bne.n	8002f4e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d101      	bne.n	8002f74 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f84:	b590      	push	{r4, r7, lr}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f90:	2300      	movs	r3, #0
 8002f92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e1ee      	b.n	800337c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fe fc15 	bl	80017dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff67 	bl	8002e98 <LL_ADC_IsDeepPowerDownEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff4d 	bl	8002e74 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff ff82 	bl	8002ee8 <LL_ADC_IsInternalRegulatorEnabled>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d114      	bne.n	8003014 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ff66 	bl	8002ec0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ff4:	4b8e      	ldr	r3, [pc, #568]	; (8003230 <HAL_ADC_Init+0x2ac>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	099b      	lsrs	r3, r3, #6
 8002ffa:	4a8e      	ldr	r2, [pc, #568]	; (8003234 <HAL_ADC_Init+0x2b0>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	099b      	lsrs	r3, r3, #6
 8003002:	3301      	adds	r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003006:	e002      	b.n	800300e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	3b01      	subs	r3, #1
 800300c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f9      	bne.n	8003008 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff65 	bl	8002ee8 <LL_ADC_IsInternalRegulatorEnabled>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d10d      	bne.n	8003040 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003028:	f043 0210 	orr.w	r2, r3, #16
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003034:	f043 0201 	orr.w	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff ff76 	bl	8002f36 <LL_ADC_REG_IsConversionOngoing>
 800304a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003050:	f003 0310 	and.w	r3, r3, #16
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 8188 	bne.w	800336a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f040 8184 	bne.w	800336a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003066:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800306a:	f043 0202 	orr.w	r2, r3, #2
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ff4a 	bl	8002f10 <LL_ADC_IsEnabled>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d136      	bne.n	80030f0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6c      	ldr	r2, [pc, #432]	; (8003238 <HAL_ADC_Init+0x2b4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d004      	beq.n	8003096 <HAL_ADC_Init+0x112>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6a      	ldr	r2, [pc, #424]	; (800323c <HAL_ADC_Init+0x2b8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10e      	bne.n	80030b4 <HAL_ADC_Init+0x130>
 8003096:	4868      	ldr	r0, [pc, #416]	; (8003238 <HAL_ADC_Init+0x2b4>)
 8003098:	f7ff ff3a 	bl	8002f10 <LL_ADC_IsEnabled>
 800309c:	4604      	mov	r4, r0
 800309e:	4867      	ldr	r0, [pc, #412]	; (800323c <HAL_ADC_Init+0x2b8>)
 80030a0:	f7ff ff36 	bl	8002f10 <LL_ADC_IsEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4323      	orrs	r3, r4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bf0c      	ite	eq
 80030ac:	2301      	moveq	r3, #1
 80030ae:	2300      	movne	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e008      	b.n	80030c6 <HAL_ADC_Init+0x142>
 80030b4:	4862      	ldr	r0, [pc, #392]	; (8003240 <HAL_ADC_Init+0x2bc>)
 80030b6:	f7ff ff2b 	bl	8002f10 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d012      	beq.n	80030f0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a5a      	ldr	r2, [pc, #360]	; (8003238 <HAL_ADC_Init+0x2b4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d004      	beq.n	80030de <HAL_ADC_Init+0x15a>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a58      	ldr	r2, [pc, #352]	; (800323c <HAL_ADC_Init+0x2b8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d101      	bne.n	80030e2 <HAL_ADC_Init+0x15e>
 80030de:	4a59      	ldr	r2, [pc, #356]	; (8003244 <HAL_ADC_Init+0x2c0>)
 80030e0:	e000      	b.n	80030e4 <HAL_ADC_Init+0x160>
 80030e2:	4a59      	ldr	r2, [pc, #356]	; (8003248 <HAL_ADC_Init+0x2c4>)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4619      	mov	r1, r3
 80030ea:	4610      	mov	r0, r2
 80030ec:	f7ff fd04 	bl	8002af8 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a52      	ldr	r2, [pc, #328]	; (8003240 <HAL_ADC_Init+0x2bc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d129      	bne.n	800314e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	7e5b      	ldrb	r3, [r3, #25]
 80030fe:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003104:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800310a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d013      	beq.n	800313c <HAL_ADC_Init+0x1b8>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d00d      	beq.n	8003138 <HAL_ADC_Init+0x1b4>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b1c      	cmp	r3, #28
 8003122:	d007      	beq.n	8003134 <HAL_ADC_Init+0x1b0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	2b18      	cmp	r3, #24
 800312a:	d101      	bne.n	8003130 <HAL_ADC_Init+0x1ac>
 800312c:	2318      	movs	r3, #24
 800312e:	e006      	b.n	800313e <HAL_ADC_Init+0x1ba>
 8003130:	2300      	movs	r3, #0
 8003132:	e004      	b.n	800313e <HAL_ADC_Init+0x1ba>
 8003134:	2310      	movs	r3, #16
 8003136:	e002      	b.n	800313e <HAL_ADC_Init+0x1ba>
 8003138:	2308      	movs	r3, #8
 800313a:	e000      	b.n	800313e <HAL_ADC_Init+0x1ba>
 800313c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800313e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003146:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
 800314c:	e00e      	b.n	800316c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	7e5b      	ldrb	r3, [r3, #25]
 8003152:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003158:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800315e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003166:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d106      	bne.n	8003184 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	3b01      	subs	r3, #1
 800317c:	045b      	lsls	r3, r3, #17
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4313      	orrs	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d009      	beq.n	80031a0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003190:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a26      	ldr	r2, [pc, #152]	; (8003240 <HAL_ADC_Init+0x2bc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d115      	bne.n	80031d6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_ADC_Init+0x2c8>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6812      	ldr	r2, [r2, #0]
 80031b8:	69b9      	ldr	r1, [r7, #24]
 80031ba:	430b      	orrs	r3, r1
 80031bc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	611a      	str	r2, [r3, #16]
 80031d4:	e009      	b.n	80031ea <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	4b1c      	ldr	r3, [pc, #112]	; (8003250 <HAL_ADC_Init+0x2cc>)
 80031de:	4013      	ands	r3, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	69b9      	ldr	r1, [r7, #24]
 80031e6:	430b      	orrs	r3, r1
 80031e8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fea1 	bl	8002f36 <LL_ADC_REG_IsConversionOngoing>
 80031f4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff feae 	bl	8002f5c <LL_ADC_INJ_IsConversionOngoing>
 8003200:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b00      	cmp	r3, #0
 8003206:	f040 808e 	bne.w	8003326 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f040 808a 	bne.w	8003326 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <HAL_ADC_Init+0x2bc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d11b      	bne.n	8003254 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7e1b      	ldrb	r3, [r3, #24]
 8003220:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003228:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	e018      	b.n	8003262 <HAL_ADC_Init+0x2de>
 8003230:	24000000 	.word	0x24000000
 8003234:	053e2d63 	.word	0x053e2d63
 8003238:	40022000 	.word	0x40022000
 800323c:	40022100 	.word	0x40022100
 8003240:	58026000 	.word	0x58026000
 8003244:	40022300 	.word	0x40022300
 8003248:	58026300 	.word	0x58026300
 800324c:	fff04007 	.word	0xfff04007
 8003250:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7e1b      	ldrb	r3, [r3, #24]
 8003258:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68da      	ldr	r2, [r3, #12]
 8003268:	4b46      	ldr	r3, [pc, #280]	; (8003384 <HAL_ADC_Init+0x400>)
 800326a:	4013      	ands	r3, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	69b9      	ldr	r1, [r7, #24]
 8003272:	430b      	orrs	r3, r1
 8003274:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800327c:	2b01      	cmp	r3, #1
 800327e:	d137      	bne.n	80032f0 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a3f      	ldr	r2, [pc, #252]	; (8003388 <HAL_ADC_Init+0x404>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d116      	bne.n	80032be <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	691a      	ldr	r2, [r3, #16]
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_ADC_Init+0x408>)
 8003298:	4013      	ands	r3, r2
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032a2:	4311      	orrs	r1, r2
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032a8:	4311      	orrs	r1, r2
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032ae:	430a      	orrs	r2, r1
 80032b0:	431a      	orrs	r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	611a      	str	r2, [r3, #16]
 80032bc:	e020      	b.n	8003300 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	4b32      	ldr	r3, [pc, #200]	; (8003390 <HAL_ADC_Init+0x40c>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032cc:	3a01      	subs	r2, #1
 80032ce:	0411      	lsls	r1, r2, #16
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032da:	4311      	orrs	r1, r2
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032e0:	430a      	orrs	r2, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	611a      	str	r2, [r3, #16]
 80032ee:	e007      	b.n	8003300 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_ADC_Init+0x404>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d002      	beq.n	8003326 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 fd63 	bl	8003dec <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d10c      	bne.n	8003348 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f023 010f 	bic.w	r1, r3, #15
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	1e5a      	subs	r2, r3, #1
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	631a      	str	r2, [r3, #48]	; 0x30
 8003346:	e007      	b.n	8003358 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 020f 	bic.w	r2, r2, #15
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335c:	f023 0303 	bic.w	r3, r3, #3
 8003360:	f043 0201 	orr.w	r2, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	661a      	str	r2, [r3, #96]	; 0x60
 8003368:	e007      	b.n	800337a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800336e:	f043 0210 	orr.w	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800337a:	7ffb      	ldrb	r3, [r7, #31]
}
 800337c:	4618      	mov	r0, r3
 800337e:	3724      	adds	r7, #36	; 0x24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd90      	pop	{r4, r7, pc}
 8003384:	ffffbffc 	.word	0xffffbffc
 8003388:	58026000 	.word	0x58026000
 800338c:	fc00f81f 	.word	0xfc00f81f
 8003390:	fc00f81e 	.word	0xfc00f81e

08003394 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003394:	b590      	push	{r4, r7, lr}
 8003396:	b0b9      	sub	sp, #228	; 0xe4
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033ae:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4aa9      	ldr	r2, [pc, #676]	; (800365c <HAL_ADC_ConfigChannel+0x2c8>)
 80033b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d102      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x34>
 80033c2:	2302      	movs	r3, #2
 80033c4:	f000 bcfa 	b.w	8003dbc <HAL_ADC_ConfigChannel+0xa28>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff fdae 	bl	8002f36 <LL_ADC_REG_IsConversionOngoing>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 84de 	bne.w	8003d9e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a9e      	ldr	r2, [pc, #632]	; (8003660 <HAL_ADC_ConfigChannel+0x2cc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d033      	beq.n	8003454 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d108      	bne.n	800340a <HAL_ADC_ConfigChannel+0x76>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	0e9b      	lsrs	r3, r3, #26
 80033fe:	f003 031f 	and.w	r3, r3, #31
 8003402:	2201      	movs	r2, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	e01d      	b.n	8003446 <HAL_ADC_ConfigChannel+0xb2>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800341e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003422:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003426:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 800342e:	2320      	movs	r3, #32
 8003430:	e004      	b.n	800343c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003432:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	2201      	movs	r2, #1
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	69d1      	ldr	r1, [r2, #28]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	430b      	orrs	r3, r1
 8003452:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6818      	ldr	r0, [r3, #0]
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	6859      	ldr	r1, [r3, #4]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	f7ff fc6f 	bl	8002d44 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff fd63 	bl	8002f36 <LL_ADC_REG_IsConversionOngoing>
 8003470:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff fd6f 	bl	8002f5c <LL_ADC_INJ_IsConversionOngoing>
 800347e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 8270 	bne.w	800396c <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800348c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003490:	2b00      	cmp	r3, #0
 8003492:	f040 826b 	bne.w	800396c <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6819      	ldr	r1, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f7ff fc7a 	bl	8002d9c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a6c      	ldr	r2, [pc, #432]	; (8003660 <HAL_ADC_ConfigChannel+0x2cc>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d10d      	bne.n	80034ce <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	08db      	lsrs	r3, r3, #3
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80034cc:	e032      	b.n	8003534 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80034ce:	4b65      	ldr	r3, [pc, #404]	; (8003664 <HAL_ADC_ConfigChannel+0x2d0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80034d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034da:	d10b      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x160>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	089b      	lsrs	r3, r3, #2
 80034e8:	f003 0307 	and.w	r3, r3, #7
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	e01d      	b.n	8003530 <HAL_ADC_ConfigChannel+0x19c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <HAL_ADC_ConfigChannel+0x186>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695a      	ldr	r2, [r3, #20]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	e00a      	b.n	8003530 <HAL_ADC_ConfigChannel+0x19c>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d048      	beq.n	80035ce <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6818      	ldr	r0, [r3, #0]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6919      	ldr	r1, [r3, #16]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800354c:	f7ff fb08 	bl	8002b60 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a42      	ldr	r2, [pc, #264]	; (8003660 <HAL_ADC_ConfigChannel+0x2cc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d119      	bne.n	800358e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	6919      	ldr	r1, [r3, #16]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	461a      	mov	r2, r3
 8003568:	f7ff fba0 	bl	8002cac <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6818      	ldr	r0, [r3, #0]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	6919      	ldr	r1, [r3, #16]
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	f893 3020 	ldrb.w	r3, [r3, #32]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d102      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x1f0>
 800357e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003582:	e000      	b.n	8003586 <HAL_ADC_ConfigChannel+0x1f2>
 8003584:	2300      	movs	r3, #0
 8003586:	461a      	mov	r2, r3
 8003588:	f7ff fb6e 	bl	8002c68 <LL_ADC_SetOffsetSaturation>
 800358c:	e1ee      	b.n	800396c <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6919      	ldr	r1, [r3, #16]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800359c:	2b01      	cmp	r3, #1
 800359e:	d102      	bne.n	80035a6 <HAL_ADC_ConfigChannel+0x212>
 80035a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035a4:	e000      	b.n	80035a8 <HAL_ADC_ConfigChannel+0x214>
 80035a6:	2300      	movs	r3, #0
 80035a8:	461a      	mov	r2, r3
 80035aa:	f7ff fb3b 	bl	8002c24 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6919      	ldr	r1, [r3, #16]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	7e1b      	ldrb	r3, [r3, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d102      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x230>
 80035be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035c2:	e000      	b.n	80035c6 <HAL_ADC_ConfigChannel+0x232>
 80035c4:	2300      	movs	r3, #0
 80035c6:	461a      	mov	r2, r3
 80035c8:	f7ff fb12 	bl	8002bf0 <LL_ADC_SetDataRightShift>
 80035cc:	e1ce      	b.n	800396c <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a23      	ldr	r2, [pc, #140]	; (8003660 <HAL_ADC_ConfigChannel+0x2cc>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	f040 8181 	bne.w	80038dc <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2100      	movs	r1, #0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff faef 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 80035e6:	4603      	mov	r3, r0
 80035e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10a      	bne.n	8003606 <HAL_ADC_ConfigChannel+0x272>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7ff fae4 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 80035fc:	4603      	mov	r3, r0
 80035fe:	0e9b      	lsrs	r3, r3, #26
 8003600:	f003 021f 	and.w	r2, r3, #31
 8003604:	e01e      	b.n	8003644 <HAL_ADC_ConfigChannel+0x2b0>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fad9 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 8003612:	4603      	mov	r3, r0
 8003614:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003618:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003624:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 800362c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e004      	b.n	8003642 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003638:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800363c:	fab3 f383 	clz	r3, r3
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x2d4>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0e9b      	lsrs	r3, r3, #26
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	e01e      	b.n	800369a <HAL_ADC_ConfigChannel+0x306>
 800365c:	47ff0000 	.word	0x47ff0000
 8003660:	58026000 	.word	0x58026000
 8003664:	5c001000 	.word	0x5c001000
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003670:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800367c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003684:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800368c:	2320      	movs	r3, #32
 800368e:	e004      	b.n	800369a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003694:	fab3 f383 	clz	r3, r3
 8003698:	b2db      	uxtb	r3, r3
 800369a:	429a      	cmp	r2, r3
 800369c:	d106      	bne.n	80036ac <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2200      	movs	r2, #0
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fb22 	bl	8002cf0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2101      	movs	r1, #1
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff fa86 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10a      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x344>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2101      	movs	r1, #1
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fa7b 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 80036ce:	4603      	mov	r3, r0
 80036d0:	0e9b      	lsrs	r3, r3, #26
 80036d2:	f003 021f 	and.w	r2, r3, #31
 80036d6:	e01e      	b.n	8003716 <HAL_ADC_ConfigChannel+0x382>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2101      	movs	r1, #1
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fa70 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80036f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80036fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003702:	2b00      	cmp	r3, #0
 8003704:	d101      	bne.n	800370a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003706:	2320      	movs	r3, #32
 8003708:	e004      	b.n	8003714 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800370a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	461a      	mov	r2, r3
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <HAL_ADC_ConfigChannel+0x39a>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	0e9b      	lsrs	r3, r3, #26
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	e018      	b.n	8003760 <HAL_ADC_ConfigChannel+0x3cc>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003742:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003746:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800374a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003752:	2320      	movs	r3, #32
 8003754:	e004      	b.n	8003760 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003756:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800375a:	fab3 f383 	clz	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	429a      	cmp	r2, r3
 8003762:	d106      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2200      	movs	r2, #0
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fabf 	bl	8002cf0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2102      	movs	r1, #2
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff fa23 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 800377e:	4603      	mov	r3, r0
 8003780:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <HAL_ADC_ConfigChannel+0x40a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2102      	movs	r1, #2
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fa18 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 8003794:	4603      	mov	r3, r0
 8003796:	0e9b      	lsrs	r3, r3, #26
 8003798:	f003 021f 	and.w	r2, r3, #31
 800379c:	e01e      	b.n	80037dc <HAL_ADC_ConfigChannel+0x448>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2102      	movs	r1, #2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fa0d 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 80037aa:	4603      	mov	r3, r0
 80037ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037b4:	fa93 f3a3 	rbit	r3, r3
 80037b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80037bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80037c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80037cc:	2320      	movs	r3, #32
 80037ce:	e004      	b.n	80037da <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80037d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037d4:	fab3 f383 	clz	r3, r3
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x460>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0e9b      	lsrs	r3, r3, #26
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	e014      	b.n	800381e <HAL_ADC_ConfigChannel+0x48a>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037fc:	fa93 f3a3 	rbit	r3, r3
 8003800:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003810:	2320      	movs	r3, #32
 8003812:	e004      	b.n	800381e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003818:	fab3 f383 	clz	r3, r3
 800381c:	b2db      	uxtb	r3, r3
 800381e:	429a      	cmp	r2, r3
 8003820:	d106      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2200      	movs	r2, #0
 8003828:	2102      	movs	r1, #2
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff fa60 	bl	8002cf0 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2103      	movs	r1, #3
 8003836:	4618      	mov	r0, r3
 8003838:	f7ff f9c4 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 800383c:	4603      	mov	r3, r0
 800383e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10a      	bne.n	800385c <HAL_ADC_ConfigChannel+0x4c8>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2103      	movs	r1, #3
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff f9b9 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 8003852:	4603      	mov	r3, r0
 8003854:	0e9b      	lsrs	r3, r3, #26
 8003856:	f003 021f 	and.w	r2, r3, #31
 800385a:	e017      	b.n	800388c <HAL_ADC_ConfigChannel+0x4f8>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2103      	movs	r1, #3
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff f9ae 	bl	8002bc4 <LL_ADC_GetOffsetChannel>
 8003868:	4603      	mov	r3, r0
 800386a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003876:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800387e:	2320      	movs	r3, #32
 8003880:	e003      	b.n	800388a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003884:	fab3 f383 	clz	r3, r3
 8003888:	b2db      	uxtb	r3, r3
 800388a:	461a      	mov	r2, r3
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003894:	2b00      	cmp	r3, #0
 8003896:	d105      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x510>
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	0e9b      	lsrs	r3, r3, #26
 800389e:	f003 031f 	and.w	r3, r3, #31
 80038a2:	e011      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x534>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ac:	fa93 f3a3 	rbit	r3, r3
 80038b0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80038b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038b4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80038b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80038bc:	2320      	movs	r3, #32
 80038be:	e003      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80038c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038c2:	fab3 f383 	clz	r3, r3
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d14f      	bne.n	800396c <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2200      	movs	r2, #0
 80038d2:	2103      	movs	r1, #3
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fa0b 	bl	8002cf0 <LL_ADC_SetOffsetState>
 80038da:	e047      	b.n	800396c <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	069b      	lsls	r3, r3, #26
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d107      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	069b      	lsls	r3, r3, #26
 8003910:	429a      	cmp	r2, r3
 8003912:	d107      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003922:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800392a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	069b      	lsls	r3, r3, #26
 8003934:	429a      	cmp	r2, r3
 8003936:	d107      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003946:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800394e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	069b      	lsls	r3, r3, #26
 8003958:	429a      	cmp	r2, r3
 800395a:	d107      	bne.n	800396c <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800396a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff facd 	bl	8002f10 <LL_ADC_IsEnabled>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	f040 8219 	bne.w	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6819      	ldr	r1, [r3, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	461a      	mov	r2, r3
 800398c:	f7ff fa32 	bl	8002df4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	4aa1      	ldr	r2, [pc, #644]	; (8003c1c <HAL_ADC_ConfigChannel+0x888>)
 8003996:	4293      	cmp	r3, r2
 8003998:	f040 812e 	bne.w	8003bf8 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10b      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x630>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	0e9b      	lsrs	r3, r3, #26
 80039b2:	3301      	adds	r3, #1
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2b09      	cmp	r3, #9
 80039ba:	bf94      	ite	ls
 80039bc:	2301      	movls	r3, #1
 80039be:	2300      	movhi	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	e019      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x664>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039cc:	fa93 f3a3 	rbit	r3, r3
 80039d0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80039d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80039d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80039dc:	2320      	movs	r3, #32
 80039de:	e003      	b.n	80039e8 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80039e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	3301      	adds	r3, #1
 80039ea:	f003 031f 	and.w	r3, r3, #31
 80039ee:	2b09      	cmp	r3, #9
 80039f0:	bf94      	ite	ls
 80039f2:	2301      	movls	r3, #1
 80039f4:	2300      	movhi	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d079      	beq.n	8003af0 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d107      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x684>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	0e9b      	lsrs	r3, r3, #26
 8003a0e:	3301      	adds	r3, #1
 8003a10:	069b      	lsls	r3, r3, #26
 8003a12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a16:	e015      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x6b0>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a28:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003a30:	2320      	movs	r3, #32
 8003a32:	e003      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	069b      	lsls	r3, r3, #26
 8003a40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d109      	bne.n	8003a64 <HAL_ADC_ConfigChannel+0x6d0>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0e9b      	lsrs	r3, r3, #26
 8003a56:	3301      	adds	r3, #1
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	e017      	b.n	8003a94 <HAL_ADC_ConfigChannel+0x700>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a6c:	fa93 f3a3 	rbit	r3, r3
 8003a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a74:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	e003      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a82:	fab3 f383 	clz	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	f003 031f 	and.w	r3, r3, #31
 8003a8e:	2101      	movs	r1, #1
 8003a90:	fa01 f303 	lsl.w	r3, r1, r3
 8003a94:	ea42 0103 	orr.w	r1, r2, r3
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <HAL_ADC_ConfigChannel+0x726>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0e9b      	lsrs	r3, r3, #26
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f003 021f 	and.w	r2, r3, #31
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	4413      	add	r3, r2
 8003ab6:	051b      	lsls	r3, r3, #20
 8003ab8:	e018      	b.n	8003aec <HAL_ADC_ConfigChannel+0x758>
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac2:	fa93 f3a3 	rbit	r3, r3
 8003ac6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	e003      	b.n	8003ade <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	fab3 f383 	clz	r3, r3
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f003 021f 	and.w	r2, r3, #31
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	4413      	add	r3, r2
 8003aea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aec:	430b      	orrs	r3, r1
 8003aee:	e07e      	b.n	8003bee <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d107      	bne.n	8003b0c <HAL_ADC_ConfigChannel+0x778>
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	0e9b      	lsrs	r3, r3, #26
 8003b02:	3301      	adds	r3, #1
 8003b04:	069b      	lsls	r3, r3, #26
 8003b06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b0a:	e015      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x7a4>
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b14:	fa93 f3a3 	rbit	r3, r3
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003b24:	2320      	movs	r3, #32
 8003b26:	e003      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2a:	fab3 f383 	clz	r3, r3
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	3301      	adds	r3, #1
 8003b32:	069b      	lsls	r3, r3, #26
 8003b34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <HAL_ADC_ConfigChannel+0x7c4>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	0e9b      	lsrs	r3, r3, #26
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	f003 031f 	and.w	r3, r3, #31
 8003b50:	2101      	movs	r1, #1
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	e017      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x7f4>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa93 f3a3 	rbit	r3, r3
 8003b64:	61bb      	str	r3, [r7, #24]
  return result;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d101      	bne.n	8003b74 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003b70:	2320      	movs	r3, #32
 8003b72:	e003      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2101      	movs	r1, #1
 8003b84:	fa01 f303 	lsl.w	r3, r1, r3
 8003b88:	ea42 0103 	orr.w	r1, r2, r3
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d10d      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x820>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	0e9b      	lsrs	r3, r3, #26
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4413      	add	r3, r2
 8003baa:	3b1e      	subs	r3, #30
 8003bac:	051b      	lsls	r3, r3, #20
 8003bae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	e01b      	b.n	8003bec <HAL_ADC_ConfigChannel+0x858>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	fa93 f3a3 	rbit	r3, r3
 8003bc0:	60fb      	str	r3, [r7, #12]
  return result;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003bcc:	2320      	movs	r3, #32
 8003bce:	e003      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	f003 021f 	and.w	r2, r3, #31
 8003bde:	4613      	mov	r3, r2
 8003be0:	005b      	lsls	r3, r3, #1
 8003be2:	4413      	add	r3, r2
 8003be4:	3b1e      	subs	r3, #30
 8003be6:	051b      	lsls	r3, r3, #20
 8003be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bec:	430b      	orrs	r3, r1
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	6892      	ldr	r2, [r2, #8]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f7ff f8d2 	bl	8002d9c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f280 80d7 	bge.w	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a06      	ldr	r2, [pc, #24]	; (8003c20 <HAL_ADC_ConfigChannel+0x88c>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d004      	beq.n	8003c16 <HAL_ADC_ConfigChannel+0x882>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a04      	ldr	r2, [pc, #16]	; (8003c24 <HAL_ADC_ConfigChannel+0x890>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d10a      	bne.n	8003c2c <HAL_ADC_ConfigChannel+0x898>
 8003c16:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <HAL_ADC_ConfigChannel+0x894>)
 8003c18:	e009      	b.n	8003c2e <HAL_ADC_ConfigChannel+0x89a>
 8003c1a:	bf00      	nop
 8003c1c:	47ff0000 	.word	0x47ff0000
 8003c20:	40022000 	.word	0x40022000
 8003c24:	40022100 	.word	0x40022100
 8003c28:	40022300 	.word	0x40022300
 8003c2c:	4b65      	ldr	r3, [pc, #404]	; (8003dc4 <HAL_ADC_ConfigChannel+0xa30>)
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe ff88 	bl	8002b44 <LL_ADC_GetCommonPathInternalCh>
 8003c34:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a62      	ldr	r2, [pc, #392]	; (8003dc8 <HAL_ADC_ConfigChannel+0xa34>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_ADC_ConfigChannel+0x8b8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a61      	ldr	r2, [pc, #388]	; (8003dcc <HAL_ADC_ConfigChannel+0xa38>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d10e      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x8d6>
 8003c4c:	485e      	ldr	r0, [pc, #376]	; (8003dc8 <HAL_ADC_ConfigChannel+0xa34>)
 8003c4e:	f7ff f95f 	bl	8002f10 <LL_ADC_IsEnabled>
 8003c52:	4604      	mov	r4, r0
 8003c54:	485d      	ldr	r0, [pc, #372]	; (8003dcc <HAL_ADC_ConfigChannel+0xa38>)
 8003c56:	f7ff f95b 	bl	8002f10 <LL_ADC_IsEnabled>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4323      	orrs	r3, r4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	e008      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x8e8>
 8003c6a:	4859      	ldr	r0, [pc, #356]	; (8003dd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8003c6c:	f7ff f950 	bl	8002f10 <LL_ADC_IsEnabled>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf0c      	ite	eq
 8003c76:	2301      	moveq	r3, #1
 8003c78:	2300      	movne	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 8084 	beq.w	8003d8a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a53      	ldr	r2, [pc, #332]	; (8003dd4 <HAL_ADC_ConfigChannel+0xa40>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d132      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x95e>
 8003c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d12c      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a4c      	ldr	r2, [pc, #304]	; (8003dd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	f040 8086 	bne.w	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a47      	ldr	r2, [pc, #284]	; (8003dc8 <HAL_ADC_ConfigChannel+0xa34>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d004      	beq.n	8003cb8 <HAL_ADC_ConfigChannel+0x924>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a46      	ldr	r2, [pc, #280]	; (8003dcc <HAL_ADC_ConfigChannel+0xa38>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d101      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x928>
 8003cb8:	4a47      	ldr	r2, [pc, #284]	; (8003dd8 <HAL_ADC_ConfigChannel+0xa44>)
 8003cba:	e000      	b.n	8003cbe <HAL_ADC_ConfigChannel+0x92a>
 8003cbc:	4a41      	ldr	r2, [pc, #260]	; (8003dc4 <HAL_ADC_ConfigChannel+0xa30>)
 8003cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4610      	mov	r0, r2
 8003cca:	f7fe ff28 	bl	8002b1e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cce:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <HAL_ADC_ConfigChannel+0xa48>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	4a42      	ldr	r2, [pc, #264]	; (8003de0 <HAL_ADC_ConfigChannel+0xa4c>)
 8003cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cda:	099b      	lsrs	r3, r3, #6
 8003cdc:	3301      	adds	r3, #1
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003ce2:	e002      	b.n	8003cea <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f9      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cf0:	e05e      	b.n	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a3b      	ldr	r2, [pc, #236]	; (8003de4 <HAL_ADC_ConfigChannel+0xa50>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d120      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x9aa>
 8003cfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11a      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a30      	ldr	r2, [pc, #192]	; (8003dd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d14e      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <HAL_ADC_ConfigChannel+0xa34>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_ADC_ConfigChannel+0x992>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <HAL_ADC_ConfigChannel+0xa38>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d101      	bne.n	8003d2a <HAL_ADC_ConfigChannel+0x996>
 8003d26:	4a2c      	ldr	r2, [pc, #176]	; (8003dd8 <HAL_ADC_ConfigChannel+0xa44>)
 8003d28:	e000      	b.n	8003d2c <HAL_ADC_ConfigChannel+0x998>
 8003d2a:	4a26      	ldr	r2, [pc, #152]	; (8003dc4 <HAL_ADC_ConfigChannel+0xa30>)
 8003d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f7fe fef1 	bl	8002b1e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d3c:	e038      	b.n	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a29      	ldr	r2, [pc, #164]	; (8003de8 <HAL_ADC_ConfigChannel+0xa54>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d133      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
 8003d48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d12d      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1d      	ldr	r2, [pc, #116]	; (8003dd0 <HAL_ADC_ConfigChannel+0xa3c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d128      	bne.n	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a19      	ldr	r2, [pc, #100]	; (8003dc8 <HAL_ADC_ConfigChannel+0xa34>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_ADC_ConfigChannel+0x9de>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a17      	ldr	r2, [pc, #92]	; (8003dcc <HAL_ADC_ConfigChannel+0xa38>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x9e2>
 8003d72:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_ADC_ConfigChannel+0xa44>)
 8003d74:	e000      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x9e4>
 8003d76:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <HAL_ADC_ConfigChannel+0xa30>)
 8003d78:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f7fe fecb 	bl	8002b1e <LL_ADC_SetCommonPathInternalCh>
 8003d88:	e012      	b.n	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d8e:	f043 0220 	orr.w	r2, r3, #32
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003d9c:	e008      	b.n	8003db0 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da2:	f043 0220 	orr.w	r2, r3, #32
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003db8:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	37e4      	adds	r7, #228	; 0xe4
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd90      	pop	{r4, r7, pc}
 8003dc4:	58026300 	.word	0x58026300
 8003dc8:	40022000 	.word	0x40022000
 8003dcc:	40022100 	.word	0x40022100
 8003dd0:	58026000 	.word	0x58026000
 8003dd4:	c7520000 	.word	0xc7520000
 8003dd8:	40022300 	.word	0x40022300
 8003ddc:	24000000 	.word	0x24000000
 8003de0:	053e2d63 	.word	0x053e2d63
 8003de4:	c3210000 	.word	0xc3210000
 8003de8:	cb840000 	.word	0xcb840000

08003dec <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6c      	ldr	r2, [pc, #432]	; (8003fac <ADC_ConfigureBoostMode+0x1c0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <ADC_ConfigureBoostMode+0x1c>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a6b      	ldr	r2, [pc, #428]	; (8003fb0 <ADC_ConfigureBoostMode+0x1c4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d109      	bne.n	8003e1c <ADC_ConfigureBoostMode+0x30>
 8003e08:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <ADC_ConfigureBoostMode+0x1c8>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	bf14      	ite	ne
 8003e14:	2301      	movne	r3, #1
 8003e16:	2300      	moveq	r3, #0
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	e008      	b.n	8003e2e <ADC_ConfigureBoostMode+0x42>
 8003e1c:	4b66      	ldr	r3, [pc, #408]	; (8003fb8 <ADC_ConfigureBoostMode+0x1cc>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d01c      	beq.n	8003e6c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003e32:	f006 fed7 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 8003e36:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e40:	d010      	beq.n	8003e64 <ADC_ConfigureBoostMode+0x78>
 8003e42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e46:	d873      	bhi.n	8003f30 <ADC_ConfigureBoostMode+0x144>
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4c:	d002      	beq.n	8003e54 <ADC_ConfigureBoostMode+0x68>
 8003e4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e52:	d16d      	bne.n	8003f30 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	0c1b      	lsrs	r3, r3, #16
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	60fb      	str	r3, [r7, #12]
        break;
 8003e62:	e068      	b.n	8003f36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	089b      	lsrs	r3, r3, #2
 8003e68:	60fb      	str	r3, [r7, #12]
        break;
 8003e6a:	e064      	b.n	8003f36 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003e6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003e70:	f04f 0100 	mov.w	r1, #0
 8003e74:	f008 f8b2 	bl	800bfdc <HAL_RCCEx_GetPeriphCLKFreq>
 8003e78:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e82:	d051      	beq.n	8003f28 <ADC_ConfigureBoostMode+0x13c>
 8003e84:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003e88:	d854      	bhi.n	8003f34 <ADC_ConfigureBoostMode+0x148>
 8003e8a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e8e:	d047      	beq.n	8003f20 <ADC_ConfigureBoostMode+0x134>
 8003e90:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003e94:	d84e      	bhi.n	8003f34 <ADC_ConfigureBoostMode+0x148>
 8003e96:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003e9a:	d03d      	beq.n	8003f18 <ADC_ConfigureBoostMode+0x12c>
 8003e9c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003ea0:	d848      	bhi.n	8003f34 <ADC_ConfigureBoostMode+0x148>
 8003ea2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ea6:	d033      	beq.n	8003f10 <ADC_ConfigureBoostMode+0x124>
 8003ea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eac:	d842      	bhi.n	8003f34 <ADC_ConfigureBoostMode+0x148>
 8003eae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003eb2:	d029      	beq.n	8003f08 <ADC_ConfigureBoostMode+0x11c>
 8003eb4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003eb8:	d83c      	bhi.n	8003f34 <ADC_ConfigureBoostMode+0x148>
 8003eba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ebe:	d01a      	beq.n	8003ef6 <ADC_ConfigureBoostMode+0x10a>
 8003ec0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003ec4:	d836      	bhi.n	8003f34 <ADC_ConfigureBoostMode+0x148>
 8003ec6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003eca:	d014      	beq.n	8003ef6 <ADC_ConfigureBoostMode+0x10a>
 8003ecc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ed0:	d830      	bhi.n	8003f34 <ADC_ConfigureBoostMode+0x148>
 8003ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed6:	d00e      	beq.n	8003ef6 <ADC_ConfigureBoostMode+0x10a>
 8003ed8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003edc:	d82a      	bhi.n	8003f34 <ADC_ConfigureBoostMode+0x148>
 8003ede:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ee2:	d008      	beq.n	8003ef6 <ADC_ConfigureBoostMode+0x10a>
 8003ee4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ee8:	d824      	bhi.n	8003f34 <ADC_ConfigureBoostMode+0x148>
 8003eea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003eee:	d002      	beq.n	8003ef6 <ADC_ConfigureBoostMode+0x10a>
 8003ef0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ef4:	d11e      	bne.n	8003f34 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	0c9b      	lsrs	r3, r3, #18
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f04:	60fb      	str	r3, [r7, #12]
        break;
 8003f06:	e016      	b.n	8003f36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	091b      	lsrs	r3, r3, #4
 8003f0c:	60fb      	str	r3, [r7, #12]
        break;
 8003f0e:	e012      	b.n	8003f36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	095b      	lsrs	r3, r3, #5
 8003f14:	60fb      	str	r3, [r7, #12]
        break;
 8003f16:	e00e      	b.n	8003f36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	099b      	lsrs	r3, r3, #6
 8003f1c:	60fb      	str	r3, [r7, #12]
        break;
 8003f1e:	e00a      	b.n	8003f36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	09db      	lsrs	r3, r3, #7
 8003f24:	60fb      	str	r3, [r7, #12]
        break;
 8003f26:	e006      	b.n	8003f36 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	0a1b      	lsrs	r3, r3, #8
 8003f2c:	60fb      	str	r3, [r7, #12]
        break;
 8003f2e:	e002      	b.n	8003f36 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003f34:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a1f      	ldr	r2, [pc, #124]	; (8003fbc <ADC_ConfigureBoostMode+0x1d0>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d808      	bhi.n	8003f56 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003f52:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003f54:	e025      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <ADC_ConfigureBoostMode+0x1d4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d80a      	bhi.n	8003f74 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f70:	609a      	str	r2, [r3, #8]
}
 8003f72:	e016      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4a13      	ldr	r2, [pc, #76]	; (8003fc4 <ADC_ConfigureBoostMode+0x1d8>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d80a      	bhi.n	8003f92 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f8e:	609a      	str	r2, [r3, #8]
}
 8003f90:	e007      	b.n	8003fa2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003fa0:	609a      	str	r2, [r3, #8]
}
 8003fa2:	bf00      	nop
 8003fa4:	3710      	adds	r7, #16
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40022000 	.word	0x40022000
 8003fb0:	40022100 	.word	0x40022100
 8003fb4:	40022300 	.word	0x40022300
 8003fb8:	58026300 	.word	0x58026300
 8003fbc:	005f5e10 	.word	0x005f5e10
 8003fc0:	00bebc20 	.word	0x00bebc20
 8003fc4:	017d7840 	.word	0x017d7840

08003fc8 <LL_ADC_IsEnabled>:
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d101      	bne.n	8003fe0 <LL_ADC_IsEnabled+0x18>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e000      	b.n	8003fe2 <LL_ADC_IsEnabled+0x1a>
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <LL_ADC_REG_IsConversionOngoing>:
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0304 	and.w	r3, r3, #4
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d101      	bne.n	8004006 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b0a3      	sub	sp, #140	; 0x8c
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800401e:	2300      	movs	r3, #0
 8004020:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800402e:	2302      	movs	r3, #2
 8004030:	e0c1      	b.n	80041b6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800403a:	2300      	movs	r3, #0
 800403c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800403e:	2300      	movs	r3, #0
 8004040:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a5e      	ldr	r2, [pc, #376]	; (80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d102      	bne.n	8004052 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800404c:	4b5d      	ldr	r3, [pc, #372]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e001      	b.n	8004056 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10b      	bne.n	8004074 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004060:	f043 0220 	orr.w	r2, r3, #32
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e0a0      	b.n	80041b6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4618      	mov	r0, r3
 8004078:	f7ff ffb9 	bl	8003fee <LL_ADC_REG_IsConversionOngoing>
 800407c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff ffb2 	bl	8003fee <LL_ADC_REG_IsConversionOngoing>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	f040 8081 	bne.w	8004194 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004092:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004096:	2b00      	cmp	r3, #0
 8004098:	d17c      	bne.n	8004194 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a48      	ldr	r2, [pc, #288]	; (80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d004      	beq.n	80040ae <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a46      	ldr	r2, [pc, #280]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d101      	bne.n	80040b2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80040ae:	4b46      	ldr	r3, [pc, #280]	; (80041c8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040b0:	e000      	b.n	80040b4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80040b2:	4b46      	ldr	r3, [pc, #280]	; (80041cc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040b4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d039      	beq.n	8004132 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80040be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	431a      	orrs	r2, r3
 80040cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040ce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a3a      	ldr	r2, [pc, #232]	; (80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a39      	ldr	r2, [pc, #228]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d10e      	bne.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80040e4:	4836      	ldr	r0, [pc, #216]	; (80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80040e6:	f7ff ff6f 	bl	8003fc8 <LL_ADC_IsEnabled>
 80040ea:	4604      	mov	r4, r0
 80040ec:	4835      	ldr	r0, [pc, #212]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80040ee:	f7ff ff6b 	bl	8003fc8 <LL_ADC_IsEnabled>
 80040f2:	4603      	mov	r3, r0
 80040f4:	4323      	orrs	r3, r4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	bf0c      	ite	eq
 80040fa:	2301      	moveq	r3, #1
 80040fc:	2300      	movne	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	e008      	b.n	8004114 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004102:	4833      	ldr	r0, [pc, #204]	; (80041d0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004104:	f7ff ff60 	bl	8003fc8 <LL_ADC_IsEnabled>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf0c      	ite	eq
 800410e:	2301      	moveq	r3, #1
 8004110:	2300      	movne	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d047      	beq.n	80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004118:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	4b2d      	ldr	r3, [pc, #180]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800411e:	4013      	ands	r3, r2
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	6811      	ldr	r1, [r2, #0]
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	6892      	ldr	r2, [r2, #8]
 8004128:	430a      	orrs	r2, r1
 800412a:	431a      	orrs	r2, r3
 800412c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800412e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004130:	e03a      	b.n	80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8004132:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800413a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800413c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d004      	beq.n	8004152 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1d      	ldr	r2, [pc, #116]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d10e      	bne.n	8004170 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8004152:	481b      	ldr	r0, [pc, #108]	; (80041c0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004154:	f7ff ff38 	bl	8003fc8 <LL_ADC_IsEnabled>
 8004158:	4604      	mov	r4, r0
 800415a:	481a      	ldr	r0, [pc, #104]	; (80041c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800415c:	f7ff ff34 	bl	8003fc8 <LL_ADC_IsEnabled>
 8004160:	4603      	mov	r3, r0
 8004162:	4323      	orrs	r3, r4
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e008      	b.n	8004182 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004170:	4817      	ldr	r0, [pc, #92]	; (80041d0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004172:	f7ff ff29 	bl	8003fc8 <LL_ADC_IsEnabled>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d010      	beq.n	80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004188:	689a      	ldr	r2, [r3, #8]
 800418a:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800418c:	4013      	ands	r3, r2
 800418e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004190:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004192:	e009      	b.n	80041a8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004198:	f043 0220 	orr.w	r2, r3, #32
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80041a6:	e000      	b.n	80041aa <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80041b2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	378c      	adds	r7, #140	; 0x8c
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd90      	pop	{r4, r7, pc}
 80041be:	bf00      	nop
 80041c0:	40022000 	.word	0x40022000
 80041c4:	40022100 	.word	0x40022100
 80041c8:	40022300 	.word	0x40022300
 80041cc:	58026300 	.word	0x58026300
 80041d0:	58026000 	.word	0x58026000
 80041d4:	fffff0e0 	.word	0xfffff0e0

080041d8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e023      	b.n	8004232 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fd fb32 	bl	8001868 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800424c:	4b0b      	ldr	r3, [pc, #44]	; (800427c <__NVIC_SetPriorityGrouping+0x40>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004258:	4013      	ands	r3, r2
 800425a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <__NVIC_SetPriorityGrouping+0x44>)
 8004266:	4313      	orrs	r3, r2
 8004268:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800426a:	4a04      	ldr	r2, [pc, #16]	; (800427c <__NVIC_SetPriorityGrouping+0x40>)
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	60d3      	str	r3, [r2, #12]
}
 8004270:	bf00      	nop
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	e000ed00 	.word	0xe000ed00
 8004280:	05fa0000 	.word	0x05fa0000

08004284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <__NVIC_GetPriorityGrouping+0x18>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f003 0307 	and.w	r3, r3, #7
}
 8004292:	4618      	mov	r0, r3
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	e000ed00 	.word	0xe000ed00

080042a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	4603      	mov	r3, r0
 80042a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	db0b      	blt.n	80042ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	f003 021f 	and.w	r2, r3, #31
 80042b8:	4907      	ldr	r1, [pc, #28]	; (80042d8 <__NVIC_EnableIRQ+0x38>)
 80042ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	2001      	movs	r0, #1
 80042c2:	fa00 f202 	lsl.w	r2, r0, r2
 80042c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ca:	bf00      	nop
 80042cc:	370c      	adds	r7, #12
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	e000e100 	.word	0xe000e100

080042dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	4603      	mov	r3, r0
 80042e4:	6039      	str	r1, [r7, #0]
 80042e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	db0a      	blt.n	8004306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	b2da      	uxtb	r2, r3
 80042f4:	490c      	ldr	r1, [pc, #48]	; (8004328 <__NVIC_SetPriority+0x4c>)
 80042f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042fa:	0112      	lsls	r2, r2, #4
 80042fc:	b2d2      	uxtb	r2, r2
 80042fe:	440b      	add	r3, r1
 8004300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004304:	e00a      	b.n	800431c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4908      	ldr	r1, [pc, #32]	; (800432c <__NVIC_SetPriority+0x50>)
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	f003 030f 	and.w	r3, r3, #15
 8004312:	3b04      	subs	r3, #4
 8004314:	0112      	lsls	r2, r2, #4
 8004316:	b2d2      	uxtb	r2, r2
 8004318:	440b      	add	r3, r1
 800431a:	761a      	strb	r2, [r3, #24]
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000e100 	.word	0xe000e100
 800432c:	e000ed00 	.word	0xe000ed00

08004330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004330:	b480      	push	{r7}
 8004332:	b089      	sub	sp, #36	; 0x24
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 0307 	and.w	r3, r3, #7
 8004342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f1c3 0307 	rsb	r3, r3, #7
 800434a:	2b04      	cmp	r3, #4
 800434c:	bf28      	it	cs
 800434e:	2304      	movcs	r3, #4
 8004350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	3304      	adds	r3, #4
 8004356:	2b06      	cmp	r3, #6
 8004358:	d902      	bls.n	8004360 <NVIC_EncodePriority+0x30>
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3b03      	subs	r3, #3
 800435e:	e000      	b.n	8004362 <NVIC_EncodePriority+0x32>
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004364:	f04f 32ff 	mov.w	r2, #4294967295
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43da      	mvns	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	401a      	ands	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004378:	f04f 31ff 	mov.w	r1, #4294967295
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	fa01 f303 	lsl.w	r3, r1, r3
 8004382:	43d9      	mvns	r1, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004388:	4313      	orrs	r3, r2
         );
}
 800438a:	4618      	mov	r0, r3
 800438c:	3724      	adds	r7, #36	; 0x24
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3b01      	subs	r3, #1
 80043a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043a8:	d301      	bcc.n	80043ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043aa:	2301      	movs	r3, #1
 80043ac:	e00f      	b.n	80043ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043ae:	4a0a      	ldr	r2, [pc, #40]	; (80043d8 <SysTick_Config+0x40>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043b6:	210f      	movs	r1, #15
 80043b8:	f04f 30ff 	mov.w	r0, #4294967295
 80043bc:	f7ff ff8e 	bl	80042dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c0:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <SysTick_Config+0x40>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043c6:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <SysTick_Config+0x40>)
 80043c8:	2207      	movs	r2, #7
 80043ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	e000e010 	.word	0xe000e010

080043dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff ff29 	bl	800423c <__NVIC_SetPriorityGrouping>
}
 80043ea:	bf00      	nop
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b086      	sub	sp, #24
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	4603      	mov	r3, r0
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004400:	f7ff ff40 	bl	8004284 <__NVIC_GetPriorityGrouping>
 8004404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68b9      	ldr	r1, [r7, #8]
 800440a:	6978      	ldr	r0, [r7, #20]
 800440c:	f7ff ff90 	bl	8004330 <NVIC_EncodePriority>
 8004410:	4602      	mov	r2, r0
 8004412:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f7ff ff5f 	bl	80042dc <__NVIC_SetPriority>
}
 800441e:	bf00      	nop
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b082      	sub	sp, #8
 800442a:	af00      	add	r7, sp, #0
 800442c:	4603      	mov	r3, r0
 800442e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004430:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff ff33 	bl	80042a0 <__NVIC_EnableIRQ>
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7ff ffa4 	bl	8004398 <SysTick_Config>
 8004450:	4603      	mov	r3, r0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e054      	b.n	8004518 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7f5b      	ldrb	r3, [r3, #29]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d105      	bne.n	8004484 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd fa14 	bl	80018ac <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	791b      	ldrb	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10c      	bne.n	80044ac <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a22      	ldr	r2, [pc, #136]	; (8004520 <HAL_CRC_Init+0xc4>)
 8004498:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0218 	bic.w	r2, r2, #24
 80044a8:	609a      	str	r2, [r3, #8]
 80044aa:	e00c      	b.n	80044c6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6899      	ldr	r1, [r3, #8]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	461a      	mov	r2, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f834 	bl	8004524 <HAL_CRCEx_Polynomial_Set>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e028      	b.n	8004518 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	795b      	ldrb	r3, [r3, #5]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d105      	bne.n	80044da <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f04f 32ff 	mov.w	r2, #4294967295
 80044d6:	611a      	str	r2, [r3, #16]
 80044d8:	e004      	b.n	80044e4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6912      	ldr	r2, [r2, #16]
 80044e2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	04c11db7 	.word	0x04c11db7

08004524 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004524:	b480      	push	{r7}
 8004526:	b087      	sub	sp, #28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004534:	231f      	movs	r3, #31
 8004536:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d102      	bne.n	8004548 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	75fb      	strb	r3, [r7, #23]
 8004546:	e063      	b.n	8004610 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004548:	bf00      	nop
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1e5a      	subs	r2, r3, #1
 800454e:	613a      	str	r2, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d009      	beq.n	8004568 <HAL_CRCEx_Polynomial_Set+0x44>
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0f0      	beq.n	800454a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b18      	cmp	r3, #24
 800456c:	d846      	bhi.n	80045fc <HAL_CRCEx_Polynomial_Set+0xd8>
 800456e:	a201      	add	r2, pc, #4	; (adr r2, 8004574 <HAL_CRCEx_Polynomial_Set+0x50>)
 8004570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004574:	08004603 	.word	0x08004603
 8004578:	080045fd 	.word	0x080045fd
 800457c:	080045fd 	.word	0x080045fd
 8004580:	080045fd 	.word	0x080045fd
 8004584:	080045fd 	.word	0x080045fd
 8004588:	080045fd 	.word	0x080045fd
 800458c:	080045fd 	.word	0x080045fd
 8004590:	080045fd 	.word	0x080045fd
 8004594:	080045f1 	.word	0x080045f1
 8004598:	080045fd 	.word	0x080045fd
 800459c:	080045fd 	.word	0x080045fd
 80045a0:	080045fd 	.word	0x080045fd
 80045a4:	080045fd 	.word	0x080045fd
 80045a8:	080045fd 	.word	0x080045fd
 80045ac:	080045fd 	.word	0x080045fd
 80045b0:	080045fd 	.word	0x080045fd
 80045b4:	080045e5 	.word	0x080045e5
 80045b8:	080045fd 	.word	0x080045fd
 80045bc:	080045fd 	.word	0x080045fd
 80045c0:	080045fd 	.word	0x080045fd
 80045c4:	080045fd 	.word	0x080045fd
 80045c8:	080045fd 	.word	0x080045fd
 80045cc:	080045fd 	.word	0x080045fd
 80045d0:	080045fd 	.word	0x080045fd
 80045d4:	080045d9 	.word	0x080045d9
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b06      	cmp	r3, #6
 80045dc:	d913      	bls.n	8004606 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80045e2:	e010      	b.n	8004606 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	2b07      	cmp	r3, #7
 80045e8:	d90f      	bls.n	800460a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80045ee:	e00c      	b.n	800460a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	2b0f      	cmp	r3, #15
 80045f4:	d90b      	bls.n	800460e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80045fa:	e008      	b.n	800460e <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	75fb      	strb	r3, [r7, #23]
        break;
 8004600:	e006      	b.n	8004610 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004602:	bf00      	nop
 8004604:	e004      	b.n	8004610 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004606:	bf00      	nop
 8004608:	e002      	b.n	8004610 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800460a:	bf00      	nop
 800460c:	e000      	b.n	8004610 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800460e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10d      	bne.n	8004632 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f023 0118 	bic.w	r1, r3, #24
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	430a      	orrs	r2, r1
 8004630:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004632:	7dfb      	ldrb	r3, [r7, #23]
}
 8004634:	4618      	mov	r0, r3
 8004636:	371c      	adds	r7, #28
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e226      	b.n	8004aaa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004662:	2b01      	cmp	r3, #1
 8004664:	d101      	bne.n	800466a <HAL_DMA_Start_IT+0x2a>
 8004666:	2302      	movs	r3, #2
 8004668:	e21f      	b.n	8004aaa <HAL_DMA_Start_IT+0x46a>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	f040 820a 	bne.w	8004a94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2202      	movs	r2, #2
 8004684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a68      	ldr	r2, [pc, #416]	; (8004834 <HAL_DMA_Start_IT+0x1f4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d04a      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a66      	ldr	r2, [pc, #408]	; (8004838 <HAL_DMA_Start_IT+0x1f8>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d045      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a65      	ldr	r2, [pc, #404]	; (800483c <HAL_DMA_Start_IT+0x1fc>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d040      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a63      	ldr	r2, [pc, #396]	; (8004840 <HAL_DMA_Start_IT+0x200>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d03b      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a62      	ldr	r2, [pc, #392]	; (8004844 <HAL_DMA_Start_IT+0x204>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d036      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a60      	ldr	r2, [pc, #384]	; (8004848 <HAL_DMA_Start_IT+0x208>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d031      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a5f      	ldr	r2, [pc, #380]	; (800484c <HAL_DMA_Start_IT+0x20c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d02c      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a5d      	ldr	r2, [pc, #372]	; (8004850 <HAL_DMA_Start_IT+0x210>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d027      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a5c      	ldr	r2, [pc, #368]	; (8004854 <HAL_DMA_Start_IT+0x214>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d022      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a5a      	ldr	r2, [pc, #360]	; (8004858 <HAL_DMA_Start_IT+0x218>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d01d      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a59      	ldr	r2, [pc, #356]	; (800485c <HAL_DMA_Start_IT+0x21c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d018      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a57      	ldr	r2, [pc, #348]	; (8004860 <HAL_DMA_Start_IT+0x220>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a56      	ldr	r2, [pc, #344]	; (8004864 <HAL_DMA_Start_IT+0x224>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d00e      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a54      	ldr	r2, [pc, #336]	; (8004868 <HAL_DMA_Start_IT+0x228>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d009      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a53      	ldr	r2, [pc, #332]	; (800486c <HAL_DMA_Start_IT+0x22c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d004      	beq.n	800472e <HAL_DMA_Start_IT+0xee>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a51      	ldr	r2, [pc, #324]	; (8004870 <HAL_DMA_Start_IT+0x230>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d108      	bne.n	8004740 <HAL_DMA_Start_IT+0x100>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0201 	bic.w	r2, r2, #1
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	e007      	b.n	8004750 <HAL_DMA_Start_IT+0x110>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f022 0201 	bic.w	r2, r2, #1
 800474e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	68b9      	ldr	r1, [r7, #8]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	f000 fc3c 	bl	8004fd4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a34      	ldr	r2, [pc, #208]	; (8004834 <HAL_DMA_Start_IT+0x1f4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d04a      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a33      	ldr	r2, [pc, #204]	; (8004838 <HAL_DMA_Start_IT+0x1f8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d045      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a31      	ldr	r2, [pc, #196]	; (800483c <HAL_DMA_Start_IT+0x1fc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d040      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a30      	ldr	r2, [pc, #192]	; (8004840 <HAL_DMA_Start_IT+0x200>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d03b      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a2e      	ldr	r2, [pc, #184]	; (8004844 <HAL_DMA_Start_IT+0x204>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d036      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a2d      	ldr	r2, [pc, #180]	; (8004848 <HAL_DMA_Start_IT+0x208>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d031      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a2b      	ldr	r2, [pc, #172]	; (800484c <HAL_DMA_Start_IT+0x20c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02c      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2a      	ldr	r2, [pc, #168]	; (8004850 <HAL_DMA_Start_IT+0x210>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d027      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a28      	ldr	r2, [pc, #160]	; (8004854 <HAL_DMA_Start_IT+0x214>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d022      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a27      	ldr	r2, [pc, #156]	; (8004858 <HAL_DMA_Start_IT+0x218>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d01d      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a25      	ldr	r2, [pc, #148]	; (800485c <HAL_DMA_Start_IT+0x21c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d018      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a24      	ldr	r2, [pc, #144]	; (8004860 <HAL_DMA_Start_IT+0x220>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a22      	ldr	r2, [pc, #136]	; (8004864 <HAL_DMA_Start_IT+0x224>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00e      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a21      	ldr	r2, [pc, #132]	; (8004868 <HAL_DMA_Start_IT+0x228>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a1f      	ldr	r2, [pc, #124]	; (800486c <HAL_DMA_Start_IT+0x22c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <HAL_DMA_Start_IT+0x1bc>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1e      	ldr	r2, [pc, #120]	; (8004870 <HAL_DMA_Start_IT+0x230>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d101      	bne.n	8004800 <HAL_DMA_Start_IT+0x1c0>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <HAL_DMA_Start_IT+0x1c2>
 8004800:	2300      	movs	r3, #0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d036      	beq.n	8004874 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f023 021e 	bic.w	r2, r3, #30
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0216 	orr.w	r2, r2, #22
 8004818:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	2b00      	cmp	r3, #0
 8004820:	d03e      	beq.n	80048a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f042 0208 	orr.w	r2, r2, #8
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e035      	b.n	80048a0 <HAL_DMA_Start_IT+0x260>
 8004834:	40020010 	.word	0x40020010
 8004838:	40020028 	.word	0x40020028
 800483c:	40020040 	.word	0x40020040
 8004840:	40020058 	.word	0x40020058
 8004844:	40020070 	.word	0x40020070
 8004848:	40020088 	.word	0x40020088
 800484c:	400200a0 	.word	0x400200a0
 8004850:	400200b8 	.word	0x400200b8
 8004854:	40020410 	.word	0x40020410
 8004858:	40020428 	.word	0x40020428
 800485c:	40020440 	.word	0x40020440
 8004860:	40020458 	.word	0x40020458
 8004864:	40020470 	.word	0x40020470
 8004868:	40020488 	.word	0x40020488
 800486c:	400204a0 	.word	0x400204a0
 8004870:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f023 020e 	bic.w	r2, r3, #14
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 020a 	orr.w	r2, r2, #10
 8004886:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d007      	beq.n	80048a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0204 	orr.w	r2, r2, #4
 800489e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a83      	ldr	r2, [pc, #524]	; (8004ab4 <HAL_DMA_Start_IT+0x474>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d072      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a82      	ldr	r2, [pc, #520]	; (8004ab8 <HAL_DMA_Start_IT+0x478>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d06d      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a80      	ldr	r2, [pc, #512]	; (8004abc <HAL_DMA_Start_IT+0x47c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d068      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a7f      	ldr	r2, [pc, #508]	; (8004ac0 <HAL_DMA_Start_IT+0x480>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d063      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a7d      	ldr	r2, [pc, #500]	; (8004ac4 <HAL_DMA_Start_IT+0x484>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d05e      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a7c      	ldr	r2, [pc, #496]	; (8004ac8 <HAL_DMA_Start_IT+0x488>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d059      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a7a      	ldr	r2, [pc, #488]	; (8004acc <HAL_DMA_Start_IT+0x48c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d054      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a79      	ldr	r2, [pc, #484]	; (8004ad0 <HAL_DMA_Start_IT+0x490>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d04f      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a77      	ldr	r2, [pc, #476]	; (8004ad4 <HAL_DMA_Start_IT+0x494>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d04a      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a76      	ldr	r2, [pc, #472]	; (8004ad8 <HAL_DMA_Start_IT+0x498>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d045      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a74      	ldr	r2, [pc, #464]	; (8004adc <HAL_DMA_Start_IT+0x49c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d040      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a73      	ldr	r2, [pc, #460]	; (8004ae0 <HAL_DMA_Start_IT+0x4a0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d03b      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a71      	ldr	r2, [pc, #452]	; (8004ae4 <HAL_DMA_Start_IT+0x4a4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d036      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a70      	ldr	r2, [pc, #448]	; (8004ae8 <HAL_DMA_Start_IT+0x4a8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d031      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a6e      	ldr	r2, [pc, #440]	; (8004aec <HAL_DMA_Start_IT+0x4ac>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d02c      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a6d      	ldr	r2, [pc, #436]	; (8004af0 <HAL_DMA_Start_IT+0x4b0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d027      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a6b      	ldr	r2, [pc, #428]	; (8004af4 <HAL_DMA_Start_IT+0x4b4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d022      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a6a      	ldr	r2, [pc, #424]	; (8004af8 <HAL_DMA_Start_IT+0x4b8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d01d      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a68      	ldr	r2, [pc, #416]	; (8004afc <HAL_DMA_Start_IT+0x4bc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d018      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a67      	ldr	r2, [pc, #412]	; (8004b00 <HAL_DMA_Start_IT+0x4c0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d013      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a65      	ldr	r2, [pc, #404]	; (8004b04 <HAL_DMA_Start_IT+0x4c4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d00e      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a64      	ldr	r2, [pc, #400]	; (8004b08 <HAL_DMA_Start_IT+0x4c8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d009      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a62      	ldr	r2, [pc, #392]	; (8004b0c <HAL_DMA_Start_IT+0x4cc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d004      	beq.n	8004990 <HAL_DMA_Start_IT+0x350>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a61      	ldr	r2, [pc, #388]	; (8004b10 <HAL_DMA_Start_IT+0x4d0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d101      	bne.n	8004994 <HAL_DMA_Start_IT+0x354>
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <HAL_DMA_Start_IT+0x356>
 8004994:	2300      	movs	r3, #0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d01a      	beq.n	80049d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a37      	ldr	r2, [pc, #220]	; (8004ab4 <HAL_DMA_Start_IT+0x474>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d04a      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a36      	ldr	r2, [pc, #216]	; (8004ab8 <HAL_DMA_Start_IT+0x478>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d045      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a34      	ldr	r2, [pc, #208]	; (8004abc <HAL_DMA_Start_IT+0x47c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d040      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a33      	ldr	r2, [pc, #204]	; (8004ac0 <HAL_DMA_Start_IT+0x480>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d03b      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a31      	ldr	r2, [pc, #196]	; (8004ac4 <HAL_DMA_Start_IT+0x484>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d036      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a30      	ldr	r2, [pc, #192]	; (8004ac8 <HAL_DMA_Start_IT+0x488>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d031      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a2e      	ldr	r2, [pc, #184]	; (8004acc <HAL_DMA_Start_IT+0x48c>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d02c      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2d      	ldr	r2, [pc, #180]	; (8004ad0 <HAL_DMA_Start_IT+0x490>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d027      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a2b      	ldr	r2, [pc, #172]	; (8004ad4 <HAL_DMA_Start_IT+0x494>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d022      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a2a      	ldr	r2, [pc, #168]	; (8004ad8 <HAL_DMA_Start_IT+0x498>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d01d      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a28      	ldr	r2, [pc, #160]	; (8004adc <HAL_DMA_Start_IT+0x49c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d018      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <HAL_DMA_Start_IT+0x4a0>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d013      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a25      	ldr	r2, [pc, #148]	; (8004ae4 <HAL_DMA_Start_IT+0x4a4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d00e      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a24      	ldr	r2, [pc, #144]	; (8004ae8 <HAL_DMA_Start_IT+0x4a8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a22      	ldr	r2, [pc, #136]	; (8004aec <HAL_DMA_Start_IT+0x4ac>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <HAL_DMA_Start_IT+0x430>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a21      	ldr	r2, [pc, #132]	; (8004af0 <HAL_DMA_Start_IT+0x4b0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d108      	bne.n	8004a82 <HAL_DMA_Start_IT+0x442>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e012      	b.n	8004aa8 <HAL_DMA_Start_IT+0x468>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f042 0201 	orr.w	r2, r2, #1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	e009      	b.n	8004aa8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a9a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3718      	adds	r7, #24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	40020010 	.word	0x40020010
 8004ab8:	40020028 	.word	0x40020028
 8004abc:	40020040 	.word	0x40020040
 8004ac0:	40020058 	.word	0x40020058
 8004ac4:	40020070 	.word	0x40020070
 8004ac8:	40020088 	.word	0x40020088
 8004acc:	400200a0 	.word	0x400200a0
 8004ad0:	400200b8 	.word	0x400200b8
 8004ad4:	40020410 	.word	0x40020410
 8004ad8:	40020428 	.word	0x40020428
 8004adc:	40020440 	.word	0x40020440
 8004ae0:	40020458 	.word	0x40020458
 8004ae4:	40020470 	.word	0x40020470
 8004ae8:	40020488 	.word	0x40020488
 8004aec:	400204a0 	.word	0x400204a0
 8004af0:	400204b8 	.word	0x400204b8
 8004af4:	58025408 	.word	0x58025408
 8004af8:	5802541c 	.word	0x5802541c
 8004afc:	58025430 	.word	0x58025430
 8004b00:	58025444 	.word	0x58025444
 8004b04:	58025458 	.word	0x58025458
 8004b08:	5802546c 	.word	0x5802546c
 8004b0c:	58025480 	.word	0x58025480
 8004b10:	58025494 	.word	0x58025494

08004b14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e237      	b.n	8004f96 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d004      	beq.n	8004b3c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2280      	movs	r2, #128	; 0x80
 8004b36:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e22c      	b.n	8004f96 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a5c      	ldr	r2, [pc, #368]	; (8004cb4 <HAL_DMA_Abort_IT+0x1a0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d04a      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a5b      	ldr	r2, [pc, #364]	; (8004cb8 <HAL_DMA_Abort_IT+0x1a4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d045      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a59      	ldr	r2, [pc, #356]	; (8004cbc <HAL_DMA_Abort_IT+0x1a8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d040      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a58      	ldr	r2, [pc, #352]	; (8004cc0 <HAL_DMA_Abort_IT+0x1ac>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d03b      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a56      	ldr	r2, [pc, #344]	; (8004cc4 <HAL_DMA_Abort_IT+0x1b0>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d036      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a55      	ldr	r2, [pc, #340]	; (8004cc8 <HAL_DMA_Abort_IT+0x1b4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d031      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a53      	ldr	r2, [pc, #332]	; (8004ccc <HAL_DMA_Abort_IT+0x1b8>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02c      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a52      	ldr	r2, [pc, #328]	; (8004cd0 <HAL_DMA_Abort_IT+0x1bc>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d027      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a50      	ldr	r2, [pc, #320]	; (8004cd4 <HAL_DMA_Abort_IT+0x1c0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d022      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a4f      	ldr	r2, [pc, #316]	; (8004cd8 <HAL_DMA_Abort_IT+0x1c4>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d01d      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a4d      	ldr	r2, [pc, #308]	; (8004cdc <HAL_DMA_Abort_IT+0x1c8>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d018      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a4c      	ldr	r2, [pc, #304]	; (8004ce0 <HAL_DMA_Abort_IT+0x1cc>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d013      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a4a      	ldr	r2, [pc, #296]	; (8004ce4 <HAL_DMA_Abort_IT+0x1d0>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00e      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a49      	ldr	r2, [pc, #292]	; (8004ce8 <HAL_DMA_Abort_IT+0x1d4>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d009      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a47      	ldr	r2, [pc, #284]	; (8004cec <HAL_DMA_Abort_IT+0x1d8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d004      	beq.n	8004bdc <HAL_DMA_Abort_IT+0xc8>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a46      	ldr	r2, [pc, #280]	; (8004cf0 <HAL_DMA_Abort_IT+0x1dc>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d101      	bne.n	8004be0 <HAL_DMA_Abort_IT+0xcc>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <HAL_DMA_Abort_IT+0xce>
 8004be0:	2300      	movs	r3, #0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8086 	beq.w	8004cf4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2204      	movs	r2, #4
 8004bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a2f      	ldr	r2, [pc, #188]	; (8004cb4 <HAL_DMA_Abort_IT+0x1a0>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d04a      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a2e      	ldr	r2, [pc, #184]	; (8004cb8 <HAL_DMA_Abort_IT+0x1a4>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d045      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a2c      	ldr	r2, [pc, #176]	; (8004cbc <HAL_DMA_Abort_IT+0x1a8>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d040      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a2b      	ldr	r2, [pc, #172]	; (8004cc0 <HAL_DMA_Abort_IT+0x1ac>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d03b      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a29      	ldr	r2, [pc, #164]	; (8004cc4 <HAL_DMA_Abort_IT+0x1b0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d036      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a28      	ldr	r2, [pc, #160]	; (8004cc8 <HAL_DMA_Abort_IT+0x1b4>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d031      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a26      	ldr	r2, [pc, #152]	; (8004ccc <HAL_DMA_Abort_IT+0x1b8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d02c      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a25      	ldr	r2, [pc, #148]	; (8004cd0 <HAL_DMA_Abort_IT+0x1bc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d027      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a23      	ldr	r2, [pc, #140]	; (8004cd4 <HAL_DMA_Abort_IT+0x1c0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d022      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a22      	ldr	r2, [pc, #136]	; (8004cd8 <HAL_DMA_Abort_IT+0x1c4>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d01d      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a20      	ldr	r2, [pc, #128]	; (8004cdc <HAL_DMA_Abort_IT+0x1c8>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d018      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1f      	ldr	r2, [pc, #124]	; (8004ce0 <HAL_DMA_Abort_IT+0x1cc>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d013      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a1d      	ldr	r2, [pc, #116]	; (8004ce4 <HAL_DMA_Abort_IT+0x1d0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00e      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a1c      	ldr	r2, [pc, #112]	; (8004ce8 <HAL_DMA_Abort_IT+0x1d4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d009      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a1a      	ldr	r2, [pc, #104]	; (8004cec <HAL_DMA_Abort_IT+0x1d8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_DMA_Abort_IT+0x17c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a19      	ldr	r2, [pc, #100]	; (8004cf0 <HAL_DMA_Abort_IT+0x1dc>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d108      	bne.n	8004ca2 <HAL_DMA_Abort_IT+0x18e>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e178      	b.n	8004f94 <HAL_DMA_Abort_IT+0x480>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e16f      	b.n	8004f94 <HAL_DMA_Abort_IT+0x480>
 8004cb4:	40020010 	.word	0x40020010
 8004cb8:	40020028 	.word	0x40020028
 8004cbc:	40020040 	.word	0x40020040
 8004cc0:	40020058 	.word	0x40020058
 8004cc4:	40020070 	.word	0x40020070
 8004cc8:	40020088 	.word	0x40020088
 8004ccc:	400200a0 	.word	0x400200a0
 8004cd0:	400200b8 	.word	0x400200b8
 8004cd4:	40020410 	.word	0x40020410
 8004cd8:	40020428 	.word	0x40020428
 8004cdc:	40020440 	.word	0x40020440
 8004ce0:	40020458 	.word	0x40020458
 8004ce4:	40020470 	.word	0x40020470
 8004ce8:	40020488 	.word	0x40020488
 8004cec:	400204a0 	.word	0x400204a0
 8004cf0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f022 020e 	bic.w	r2, r2, #14
 8004d02:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a6c      	ldr	r2, [pc, #432]	; (8004ebc <HAL_DMA_Abort_IT+0x3a8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d04a      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a6b      	ldr	r2, [pc, #428]	; (8004ec0 <HAL_DMA_Abort_IT+0x3ac>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d045      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a69      	ldr	r2, [pc, #420]	; (8004ec4 <HAL_DMA_Abort_IT+0x3b0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d040      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a68      	ldr	r2, [pc, #416]	; (8004ec8 <HAL_DMA_Abort_IT+0x3b4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d03b      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a66      	ldr	r2, [pc, #408]	; (8004ecc <HAL_DMA_Abort_IT+0x3b8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d036      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a65      	ldr	r2, [pc, #404]	; (8004ed0 <HAL_DMA_Abort_IT+0x3bc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d031      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a63      	ldr	r2, [pc, #396]	; (8004ed4 <HAL_DMA_Abort_IT+0x3c0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d02c      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a62      	ldr	r2, [pc, #392]	; (8004ed8 <HAL_DMA_Abort_IT+0x3c4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d027      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a60      	ldr	r2, [pc, #384]	; (8004edc <HAL_DMA_Abort_IT+0x3c8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a5f      	ldr	r2, [pc, #380]	; (8004ee0 <HAL_DMA_Abort_IT+0x3cc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01d      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a5d      	ldr	r2, [pc, #372]	; (8004ee4 <HAL_DMA_Abort_IT+0x3d0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a5c      	ldr	r2, [pc, #368]	; (8004ee8 <HAL_DMA_Abort_IT+0x3d4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a5a      	ldr	r2, [pc, #360]	; (8004eec <HAL_DMA_Abort_IT+0x3d8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a59      	ldr	r2, [pc, #356]	; (8004ef0 <HAL_DMA_Abort_IT+0x3dc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a57      	ldr	r2, [pc, #348]	; (8004ef4 <HAL_DMA_Abort_IT+0x3e0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_DMA_Abort_IT+0x290>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a56      	ldr	r2, [pc, #344]	; (8004ef8 <HAL_DMA_Abort_IT+0x3e4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d108      	bne.n	8004db6 <HAL_DMA_Abort_IT+0x2a2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e007      	b.n	8004dc6 <HAL_DMA_Abort_IT+0x2b2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a3c      	ldr	r2, [pc, #240]	; (8004ebc <HAL_DMA_Abort_IT+0x3a8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d072      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3a      	ldr	r2, [pc, #232]	; (8004ec0 <HAL_DMA_Abort_IT+0x3ac>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d06d      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a39      	ldr	r2, [pc, #228]	; (8004ec4 <HAL_DMA_Abort_IT+0x3b0>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d068      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a37      	ldr	r2, [pc, #220]	; (8004ec8 <HAL_DMA_Abort_IT+0x3b4>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d063      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a36      	ldr	r2, [pc, #216]	; (8004ecc <HAL_DMA_Abort_IT+0x3b8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d05e      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a34      	ldr	r2, [pc, #208]	; (8004ed0 <HAL_DMA_Abort_IT+0x3bc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d059      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a33      	ldr	r2, [pc, #204]	; (8004ed4 <HAL_DMA_Abort_IT+0x3c0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d054      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a31      	ldr	r2, [pc, #196]	; (8004ed8 <HAL_DMA_Abort_IT+0x3c4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d04f      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a30      	ldr	r2, [pc, #192]	; (8004edc <HAL_DMA_Abort_IT+0x3c8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d04a      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a2e      	ldr	r2, [pc, #184]	; (8004ee0 <HAL_DMA_Abort_IT+0x3cc>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d045      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a2d      	ldr	r2, [pc, #180]	; (8004ee4 <HAL_DMA_Abort_IT+0x3d0>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d040      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a2b      	ldr	r2, [pc, #172]	; (8004ee8 <HAL_DMA_Abort_IT+0x3d4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d03b      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a2a      	ldr	r2, [pc, #168]	; (8004eec <HAL_DMA_Abort_IT+0x3d8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d036      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a28      	ldr	r2, [pc, #160]	; (8004ef0 <HAL_DMA_Abort_IT+0x3dc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d031      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a27      	ldr	r2, [pc, #156]	; (8004ef4 <HAL_DMA_Abort_IT+0x3e0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d02c      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a25      	ldr	r2, [pc, #148]	; (8004ef8 <HAL_DMA_Abort_IT+0x3e4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d027      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a24      	ldr	r2, [pc, #144]	; (8004efc <HAL_DMA_Abort_IT+0x3e8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d022      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <HAL_DMA_Abort_IT+0x3ec>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d01d      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a21      	ldr	r2, [pc, #132]	; (8004f04 <HAL_DMA_Abort_IT+0x3f0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d018      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <HAL_DMA_Abort_IT+0x3f4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <HAL_DMA_Abort_IT+0x3f8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d00e      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a1c      	ldr	r2, [pc, #112]	; (8004f10 <HAL_DMA_Abort_IT+0x3fc>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d009      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a1b      	ldr	r2, [pc, #108]	; (8004f14 <HAL_DMA_Abort_IT+0x400>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d004      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x3a2>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a19      	ldr	r2, [pc, #100]	; (8004f18 <HAL_DMA_Abort_IT+0x404>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d132      	bne.n	8004f1c <HAL_DMA_Abort_IT+0x408>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e031      	b.n	8004f1e <HAL_DMA_Abort_IT+0x40a>
 8004eba:	bf00      	nop
 8004ebc:	40020010 	.word	0x40020010
 8004ec0:	40020028 	.word	0x40020028
 8004ec4:	40020040 	.word	0x40020040
 8004ec8:	40020058 	.word	0x40020058
 8004ecc:	40020070 	.word	0x40020070
 8004ed0:	40020088 	.word	0x40020088
 8004ed4:	400200a0 	.word	0x400200a0
 8004ed8:	400200b8 	.word	0x400200b8
 8004edc:	40020410 	.word	0x40020410
 8004ee0:	40020428 	.word	0x40020428
 8004ee4:	40020440 	.word	0x40020440
 8004ee8:	40020458 	.word	0x40020458
 8004eec:	40020470 	.word	0x40020470
 8004ef0:	40020488 	.word	0x40020488
 8004ef4:	400204a0 	.word	0x400204a0
 8004ef8:	400204b8 	.word	0x400204b8
 8004efc:	58025408 	.word	0x58025408
 8004f00:	5802541c 	.word	0x5802541c
 8004f04:	58025430 	.word	0x58025430
 8004f08:	58025444 	.word	0x58025444
 8004f0c:	58025458 	.word	0x58025458
 8004f10:	5802546c 	.word	0x5802546c
 8004f14:	58025480 	.word	0x58025480
 8004f18:	58025494 	.word	0x58025494
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d028      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f30:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f36:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3c:	f003 031f 	and.w	r3, r3, #31
 8004f40:	2201      	movs	r2, #1
 8004f42:	409a      	lsls	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004f50:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00c      	beq.n	8004f74 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f68:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004f72:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop

08004fa0 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fae:	b2db      	uxtb	r3, r3
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
 8004fe0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a7f      	ldr	r2, [pc, #508]	; (80051f0 <DMA_SetConfig+0x21c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d072      	beq.n	80050de <DMA_SetConfig+0x10a>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a7d      	ldr	r2, [pc, #500]	; (80051f4 <DMA_SetConfig+0x220>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d06d      	beq.n	80050de <DMA_SetConfig+0x10a>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a7c      	ldr	r2, [pc, #496]	; (80051f8 <DMA_SetConfig+0x224>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d068      	beq.n	80050de <DMA_SetConfig+0x10a>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a7a      	ldr	r2, [pc, #488]	; (80051fc <DMA_SetConfig+0x228>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d063      	beq.n	80050de <DMA_SetConfig+0x10a>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a79      	ldr	r2, [pc, #484]	; (8005200 <DMA_SetConfig+0x22c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d05e      	beq.n	80050de <DMA_SetConfig+0x10a>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a77      	ldr	r2, [pc, #476]	; (8005204 <DMA_SetConfig+0x230>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d059      	beq.n	80050de <DMA_SetConfig+0x10a>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a76      	ldr	r2, [pc, #472]	; (8005208 <DMA_SetConfig+0x234>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d054      	beq.n	80050de <DMA_SetConfig+0x10a>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a74      	ldr	r2, [pc, #464]	; (800520c <DMA_SetConfig+0x238>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d04f      	beq.n	80050de <DMA_SetConfig+0x10a>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a73      	ldr	r2, [pc, #460]	; (8005210 <DMA_SetConfig+0x23c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d04a      	beq.n	80050de <DMA_SetConfig+0x10a>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a71      	ldr	r2, [pc, #452]	; (8005214 <DMA_SetConfig+0x240>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d045      	beq.n	80050de <DMA_SetConfig+0x10a>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a70      	ldr	r2, [pc, #448]	; (8005218 <DMA_SetConfig+0x244>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d040      	beq.n	80050de <DMA_SetConfig+0x10a>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a6e      	ldr	r2, [pc, #440]	; (800521c <DMA_SetConfig+0x248>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d03b      	beq.n	80050de <DMA_SetConfig+0x10a>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a6d      	ldr	r2, [pc, #436]	; (8005220 <DMA_SetConfig+0x24c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d036      	beq.n	80050de <DMA_SetConfig+0x10a>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a6b      	ldr	r2, [pc, #428]	; (8005224 <DMA_SetConfig+0x250>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d031      	beq.n	80050de <DMA_SetConfig+0x10a>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6a      	ldr	r2, [pc, #424]	; (8005228 <DMA_SetConfig+0x254>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d02c      	beq.n	80050de <DMA_SetConfig+0x10a>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a68      	ldr	r2, [pc, #416]	; (800522c <DMA_SetConfig+0x258>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d027      	beq.n	80050de <DMA_SetConfig+0x10a>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a67      	ldr	r2, [pc, #412]	; (8005230 <DMA_SetConfig+0x25c>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d022      	beq.n	80050de <DMA_SetConfig+0x10a>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a65      	ldr	r2, [pc, #404]	; (8005234 <DMA_SetConfig+0x260>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01d      	beq.n	80050de <DMA_SetConfig+0x10a>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a64      	ldr	r2, [pc, #400]	; (8005238 <DMA_SetConfig+0x264>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d018      	beq.n	80050de <DMA_SetConfig+0x10a>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a62      	ldr	r2, [pc, #392]	; (800523c <DMA_SetConfig+0x268>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <DMA_SetConfig+0x10a>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a61      	ldr	r2, [pc, #388]	; (8005240 <DMA_SetConfig+0x26c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <DMA_SetConfig+0x10a>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a5f      	ldr	r2, [pc, #380]	; (8005244 <DMA_SetConfig+0x270>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <DMA_SetConfig+0x10a>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a5e      	ldr	r2, [pc, #376]	; (8005248 <DMA_SetConfig+0x274>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <DMA_SetConfig+0x10a>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a5c      	ldr	r2, [pc, #368]	; (800524c <DMA_SetConfig+0x278>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d101      	bne.n	80050e2 <DMA_SetConfig+0x10e>
 80050de:	2301      	movs	r3, #1
 80050e0:	e000      	b.n	80050e4 <DMA_SetConfig+0x110>
 80050e2:	2300      	movs	r3, #0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00d      	beq.n	8005104 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80050f0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d004      	beq.n	8005104 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005102:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a39      	ldr	r2, [pc, #228]	; (80051f0 <DMA_SetConfig+0x21c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d04a      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a38      	ldr	r2, [pc, #224]	; (80051f4 <DMA_SetConfig+0x220>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d045      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a36      	ldr	r2, [pc, #216]	; (80051f8 <DMA_SetConfig+0x224>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d040      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a35      	ldr	r2, [pc, #212]	; (80051fc <DMA_SetConfig+0x228>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d03b      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a33      	ldr	r2, [pc, #204]	; (8005200 <DMA_SetConfig+0x22c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d036      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a32      	ldr	r2, [pc, #200]	; (8005204 <DMA_SetConfig+0x230>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d031      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a30      	ldr	r2, [pc, #192]	; (8005208 <DMA_SetConfig+0x234>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d02c      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2f      	ldr	r2, [pc, #188]	; (800520c <DMA_SetConfig+0x238>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d027      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2d      	ldr	r2, [pc, #180]	; (8005210 <DMA_SetConfig+0x23c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d022      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <DMA_SetConfig+0x240>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d01d      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a2a      	ldr	r2, [pc, #168]	; (8005218 <DMA_SetConfig+0x244>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d018      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a29      	ldr	r2, [pc, #164]	; (800521c <DMA_SetConfig+0x248>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d013      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a27      	ldr	r2, [pc, #156]	; (8005220 <DMA_SetConfig+0x24c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d00e      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a26      	ldr	r2, [pc, #152]	; (8005224 <DMA_SetConfig+0x250>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d009      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a24      	ldr	r2, [pc, #144]	; (8005228 <DMA_SetConfig+0x254>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d004      	beq.n	80051a4 <DMA_SetConfig+0x1d0>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a23      	ldr	r2, [pc, #140]	; (800522c <DMA_SetConfig+0x258>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d101      	bne.n	80051a8 <DMA_SetConfig+0x1d4>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <DMA_SetConfig+0x1d6>
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d059      	beq.n	8005262 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b2:	f003 031f 	and.w	r3, r3, #31
 80051b6:	223f      	movs	r2, #63	; 0x3f
 80051b8:	409a      	lsls	r2, r3
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051cc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	2b40      	cmp	r3, #64	; 0x40
 80051dc:	d138      	bne.n	8005250 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051ee:	e086      	b.n	80052fe <DMA_SetConfig+0x32a>
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
 8005230:	58025408 	.word	0x58025408
 8005234:	5802541c 	.word	0x5802541c
 8005238:	58025430 	.word	0x58025430
 800523c:	58025444 	.word	0x58025444
 8005240:	58025458 	.word	0x58025458
 8005244:	5802546c 	.word	0x5802546c
 8005248:	58025480 	.word	0x58025480
 800524c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	60da      	str	r2, [r3, #12]
}
 8005260:	e04d      	b.n	80052fe <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a29      	ldr	r2, [pc, #164]	; (800530c <DMA_SetConfig+0x338>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d022      	beq.n	80052b2 <DMA_SetConfig+0x2de>
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a27      	ldr	r2, [pc, #156]	; (8005310 <DMA_SetConfig+0x33c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01d      	beq.n	80052b2 <DMA_SetConfig+0x2de>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a26      	ldr	r2, [pc, #152]	; (8005314 <DMA_SetConfig+0x340>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d018      	beq.n	80052b2 <DMA_SetConfig+0x2de>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a24      	ldr	r2, [pc, #144]	; (8005318 <DMA_SetConfig+0x344>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <DMA_SetConfig+0x2de>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a23      	ldr	r2, [pc, #140]	; (800531c <DMA_SetConfig+0x348>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <DMA_SetConfig+0x2de>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a21      	ldr	r2, [pc, #132]	; (8005320 <DMA_SetConfig+0x34c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <DMA_SetConfig+0x2de>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a20      	ldr	r2, [pc, #128]	; (8005324 <DMA_SetConfig+0x350>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <DMA_SetConfig+0x2de>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a1e      	ldr	r2, [pc, #120]	; (8005328 <DMA_SetConfig+0x354>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d101      	bne.n	80052b6 <DMA_SetConfig+0x2e2>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e000      	b.n	80052b8 <DMA_SetConfig+0x2e4>
 80052b6:	2300      	movs	r3, #0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d020      	beq.n	80052fe <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	2201      	movs	r2, #1
 80052c6:	409a      	lsls	r2, r3
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	683a      	ldr	r2, [r7, #0]
 80052d2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b40      	cmp	r3, #64	; 0x40
 80052da:	d108      	bne.n	80052ee <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	60da      	str	r2, [r3, #12]
}
 80052ec:	e007      	b.n	80052fe <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	60da      	str	r2, [r3, #12]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	58025408 	.word	0x58025408
 8005310:	5802541c 	.word	0x5802541c
 8005314:	58025430 	.word	0x58025430
 8005318:	58025444 	.word	0x58025444
 800531c:	58025458 	.word	0x58025458
 8005320:	5802546c 	.word	0x5802546c
 8005324:	58025480 	.word	0x58025480
 8005328:	58025494 	.word	0x58025494

0800532c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e033      	b.n	80053a6 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7fc facc 	bl	80018f0 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f854 	bl	800540c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f822 	bl	80053ae <FMAC_Reset>
 800536a:	4603      	mov	r3, r0
 800536c:	2b01      	cmp	r3, #1
 800536e:	d10c      	bne.n	800538a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005374:	f043 0210 	orr.w	r2, r3, #16
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	22a0      	movs	r2, #160	; 0xa0
 8005380:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	73fb      	strb	r3, [r7, #15]
 8005388:	e008      	b.n	800539c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b084      	sub	sp, #16
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053b6:	f7fd fb6f 	bl	8002a98 <HAL_GetTick>
 80053ba:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80053ca:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80053cc:	e00f      	b.n	80053ee <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80053ce:	f7fd fb63 	bl	8002a98 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053dc:	d907      	bls.n	80053ee <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e00a      	b.n	8005404 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1e8      	bne.n	80053ce <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f807 	bl	8005428 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f81b 	bl	8005456 <FMAC_ResetOutputStateAndDataPointers>
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005484:	b480      	push	{r7}
 8005486:	b089      	sub	sp, #36	; 0x24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005492:	4b86      	ldr	r3, [pc, #536]	; (80056ac <HAL_GPIO_Init+0x228>)
 8005494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005496:	e18c      	b.n	80057b2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	2101      	movs	r1, #1
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	fa01 f303 	lsl.w	r3, r1, r3
 80054a4:	4013      	ands	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 817e 	beq.w	80057ac <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f003 0303 	and.w	r3, r3, #3
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d005      	beq.n	80054c8 <HAL_GPIO_Init+0x44>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f003 0303 	and.w	r3, r3, #3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d130      	bne.n	800552a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	2203      	movs	r2, #3
 80054d4:	fa02 f303 	lsl.w	r3, r2, r3
 80054d8:	43db      	mvns	r3, r3
 80054da:	69ba      	ldr	r2, [r7, #24]
 80054dc:	4013      	ands	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	fa02 f303 	lsl.w	r3, r2, r3
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80054fe:	2201      	movs	r2, #1
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	fa02 f303 	lsl.w	r3, r2, r3
 8005506:	43db      	mvns	r3, r3
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	4013      	ands	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	f003 0201 	and.w	r2, r3, #1
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	fa02 f303 	lsl.w	r3, r2, r3
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	4313      	orrs	r3, r2
 8005522:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	2b03      	cmp	r3, #3
 8005534:	d017      	beq.n	8005566 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	2203      	movs	r2, #3
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	43db      	mvns	r3, r3
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	4013      	ands	r3, r2
 800554c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	fa02 f303 	lsl.w	r3, r2, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	4313      	orrs	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f003 0303 	and.w	r3, r3, #3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d123      	bne.n	80055ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	08da      	lsrs	r2, r3, #3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3208      	adds	r2, #8
 800557a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	220f      	movs	r2, #15
 800558a:	fa02 f303 	lsl.w	r3, r2, r3
 800558e:	43db      	mvns	r3, r3
 8005590:	69ba      	ldr	r2, [r7, #24]
 8005592:	4013      	ands	r3, r2
 8005594:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	691a      	ldr	r2, [r3, #16]
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f003 0307 	and.w	r3, r3, #7
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	69ba      	ldr	r2, [r7, #24]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	08da      	lsrs	r2, r3, #3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3208      	adds	r2, #8
 80055b4:	69b9      	ldr	r1, [r7, #24]
 80055b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	005b      	lsls	r3, r3, #1
 80055c4:	2203      	movs	r2, #3
 80055c6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ca:	43db      	mvns	r3, r3
 80055cc:	69ba      	ldr	r2, [r7, #24]
 80055ce:	4013      	ands	r3, r2
 80055d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f003 0203 	and.w	r2, r3, #3
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	69ba      	ldr	r2, [r7, #24]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69ba      	ldr	r2, [r7, #24]
 80055ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f000 80d8 	beq.w	80057ac <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055fc:	4b2c      	ldr	r3, [pc, #176]	; (80056b0 <HAL_GPIO_Init+0x22c>)
 80055fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005602:	4a2b      	ldr	r2, [pc, #172]	; (80056b0 <HAL_GPIO_Init+0x22c>)
 8005604:	f043 0302 	orr.w	r3, r3, #2
 8005608:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800560c:	4b28      	ldr	r3, [pc, #160]	; (80056b0 <HAL_GPIO_Init+0x22c>)
 800560e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800561a:	4a26      	ldr	r2, [pc, #152]	; (80056b4 <HAL_GPIO_Init+0x230>)
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	089b      	lsrs	r3, r3, #2
 8005620:	3302      	adds	r3, #2
 8005622:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	220f      	movs	r2, #15
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <HAL_GPIO_Init+0x234>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d04a      	beq.n	80056dc <HAL_GPIO_Init+0x258>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a1c      	ldr	r2, [pc, #112]	; (80056bc <HAL_GPIO_Init+0x238>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d02b      	beq.n	80056a6 <HAL_GPIO_Init+0x222>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a1b      	ldr	r2, [pc, #108]	; (80056c0 <HAL_GPIO_Init+0x23c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d025      	beq.n	80056a2 <HAL_GPIO_Init+0x21e>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a1a      	ldr	r2, [pc, #104]	; (80056c4 <HAL_GPIO_Init+0x240>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d01f      	beq.n	800569e <HAL_GPIO_Init+0x21a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a19      	ldr	r2, [pc, #100]	; (80056c8 <HAL_GPIO_Init+0x244>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d019      	beq.n	800569a <HAL_GPIO_Init+0x216>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a18      	ldr	r2, [pc, #96]	; (80056cc <HAL_GPIO_Init+0x248>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <HAL_GPIO_Init+0x212>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a17      	ldr	r2, [pc, #92]	; (80056d0 <HAL_GPIO_Init+0x24c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00d      	beq.n	8005692 <HAL_GPIO_Init+0x20e>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <HAL_GPIO_Init+0x250>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d007      	beq.n	800568e <HAL_GPIO_Init+0x20a>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <HAL_GPIO_Init+0x254>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d101      	bne.n	800568a <HAL_GPIO_Init+0x206>
 8005686:	2309      	movs	r3, #9
 8005688:	e029      	b.n	80056de <HAL_GPIO_Init+0x25a>
 800568a:	230a      	movs	r3, #10
 800568c:	e027      	b.n	80056de <HAL_GPIO_Init+0x25a>
 800568e:	2307      	movs	r3, #7
 8005690:	e025      	b.n	80056de <HAL_GPIO_Init+0x25a>
 8005692:	2306      	movs	r3, #6
 8005694:	e023      	b.n	80056de <HAL_GPIO_Init+0x25a>
 8005696:	2305      	movs	r3, #5
 8005698:	e021      	b.n	80056de <HAL_GPIO_Init+0x25a>
 800569a:	2304      	movs	r3, #4
 800569c:	e01f      	b.n	80056de <HAL_GPIO_Init+0x25a>
 800569e:	2303      	movs	r3, #3
 80056a0:	e01d      	b.n	80056de <HAL_GPIO_Init+0x25a>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e01b      	b.n	80056de <HAL_GPIO_Init+0x25a>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e019      	b.n	80056de <HAL_GPIO_Init+0x25a>
 80056aa:	bf00      	nop
 80056ac:	58000080 	.word	0x58000080
 80056b0:	58024400 	.word	0x58024400
 80056b4:	58000400 	.word	0x58000400
 80056b8:	58020000 	.word	0x58020000
 80056bc:	58020400 	.word	0x58020400
 80056c0:	58020800 	.word	0x58020800
 80056c4:	58020c00 	.word	0x58020c00
 80056c8:	58021000 	.word	0x58021000
 80056cc:	58021400 	.word	0x58021400
 80056d0:	58021800 	.word	0x58021800
 80056d4:	58021c00 	.word	0x58021c00
 80056d8:	58022400 	.word	0x58022400
 80056dc:	2300      	movs	r3, #0
 80056de:	69fa      	ldr	r2, [r7, #28]
 80056e0:	f002 0203 	and.w	r2, r2, #3
 80056e4:	0092      	lsls	r2, r2, #2
 80056e6:	4093      	lsls	r3, r2
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056ee:	4938      	ldr	r1, [pc, #224]	; (80057d0 <HAL_GPIO_Init+0x34c>)
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	089b      	lsrs	r3, r3, #2
 80056f4:	3302      	adds	r3, #2
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80056fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	43db      	mvns	r3, r3
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	4013      	ands	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d003      	beq.n	8005722 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800571a:	69ba      	ldr	r2, [r7, #24]
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4313      	orrs	r3, r2
 8005720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800572a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	43db      	mvns	r3, r3
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	4013      	ands	r3, r2
 800573a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d003      	beq.n	8005750 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005754:	69bb      	ldr	r3, [r7, #24]
 8005756:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	43db      	mvns	r3, r3
 8005762:	69ba      	ldr	r2, [r7, #24]
 8005764:	4013      	ands	r3, r2
 8005766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d003      	beq.n	800577c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	4313      	orrs	r3, r2
 800577a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	43db      	mvns	r3, r3
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	4013      	ands	r3, r2
 8005790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	3301      	adds	r3, #1
 80057b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	fa22 f303 	lsr.w	r3, r2, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f47f ae6b 	bne.w	8005498 <HAL_GPIO_Init+0x14>
  }
}
 80057c2:	bf00      	nop
 80057c4:	bf00      	nop
 80057c6:	3724      	adds	r7, #36	; 0x24
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	58000400 	.word	0x58000400

080057d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	807b      	strh	r3, [r7, #2]
 80057e0:	4613      	mov	r3, r2
 80057e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80057e4:	787b      	ldrb	r3, [r7, #1]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80057ea:	887a      	ldrh	r2, [r7, #2]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80057f0:	e003      	b.n	80057fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80057f2:	887b      	ldrh	r3, [r7, #2]
 80057f4:	041a      	lsls	r2, r3, #16
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	619a      	str	r2, [r3, #24]
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
	...

08005808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e07f      	b.n	800591a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fc f880 	bl	8001934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2224      	movs	r2, #36	; 0x24
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f022 0201 	bic.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005858:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005868:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d107      	bne.n	8005882 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800587e:	609a      	str	r2, [r3, #8]
 8005880:	e006      	b.n	8005890 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800588e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b02      	cmp	r3, #2
 8005896:	d104      	bne.n	80058a2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6859      	ldr	r1, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	4b1d      	ldr	r3, [pc, #116]	; (8005924 <HAL_I2C_Init+0x11c>)
 80058ae:	430b      	orrs	r3, r1
 80058b0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68da      	ldr	r2, [r3, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058c0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691a      	ldr	r2, [r3, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	69d9      	ldr	r1, [r3, #28]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1a      	ldr	r2, [r3, #32]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
 8005922:	bf00      	nop
 8005924:	02008000 	.word	0x02008000

08005928 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	461a      	mov	r2, r3
 8005934:	460b      	mov	r3, r1
 8005936:	817b      	strh	r3, [r7, #10]
 8005938:	4613      	mov	r3, r2
 800593a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b20      	cmp	r3, #32
 8005946:	f040 80cd 	bne.w	8005ae4 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005958:	d101      	bne.n	800595e <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
 800595c:	e0c3      	b.n	8005ae6 <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005964:	2b01      	cmp	r3, #1
 8005966:	d101      	bne.n	800596c <HAL_I2C_Master_Transmit_DMA+0x44>
 8005968:	2302      	movs	r3, #2
 800596a:	e0bc      	b.n	8005ae6 <HAL_I2C_Master_Transmit_DMA+0x1be>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2221      	movs	r2, #33	; 0x21
 8005978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2210      	movs	r2, #16
 8005980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	893a      	ldrh	r2, [r7, #8]
 8005994:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a55      	ldr	r2, [pc, #340]	; (8005af0 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 800599a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4a55      	ldr	r2, [pc, #340]	; (8005af4 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 80059a0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2bff      	cmp	r3, #255	; 0xff
 80059aa:	d906      	bls.n	80059ba <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	22ff      	movs	r2, #255	; 0xff
 80059b0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80059b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e007      	b.n	80059ca <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80059c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059c8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d070      	beq.n	8005ab4 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d020      	beq.n	8005a1c <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059de:	4a46      	ldr	r2, [pc, #280]	; (8005af8 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 80059e0:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	4a45      	ldr	r2, [pc, #276]	; (8005afc <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 80059e8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	2200      	movs	r2, #0
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	2200      	movs	r2, #0
 80059f8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3328      	adds	r3, #40	; 0x28
 8005a06:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8005a0c:	f7fe fe18 	bl	8004640 <HAL_DMA_Start_IT>
 8005a10:	4603      	mov	r3, r0
 8005a12:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a14:	7cfb      	ldrb	r3, [r7, #19]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d138      	bne.n	8005a8c <HAL_I2C_Master_Transmit_DMA+0x164>
 8005a1a:	e013      	b.n	8005a44 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a30:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e050      	b.n	8005ae6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	8979      	ldrh	r1, [r7, #10]
 8005a4c:	4b2c      	ldr	r3, [pc, #176]	; (8005b00 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f001 fdfe 	bl	8007654 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005a72:	2110      	movs	r1, #16
 8005a74:	68f8      	ldr	r0, [r7, #12]
 8005a76:	f001 fe1f 	bl	80076b8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	e029      	b.n	8005ae0 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aa0:	f043 0210 	orr.w	r2, r3, #16
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e018      	b.n	8005ae6 <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8005ab8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	8979      	ldrh	r1, [r7, #10]
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f001 fdc2 	bl	8007654 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ad8:	2101      	movs	r1, #1
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f001 fdec 	bl	80076b8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e000      	b.n	8005ae6 <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	ffff0000 	.word	0xffff0000
 8005af4:	08006211 	.word	0x08006211
 8005af8:	0800726f 	.word	0x0800726f
 8005afc:	08007305 	.word	0x08007305
 8005b00:	80002000 	.word	0x80002000
 8005b04:	08005de9 	.word	0x08005de9

08005b08 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	; 0x28
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	607a      	str	r2, [r7, #4]
 8005b12:	603b      	str	r3, [r7, #0]
 8005b14:	460b      	mov	r3, r1
 8005b16:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	2b20      	cmp	r3, #32
 8005b26:	f040 80ef 	bne.w	8005d08 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b38:	d101      	bne.n	8005b3e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	e0e5      	b.n	8005d0a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d101      	bne.n	8005b4c <HAL_I2C_IsDeviceReady+0x44>
 8005b48:	2302      	movs	r3, #2
 8005b4a:	e0de      	b.n	8005d0a <HAL_I2C_IsDeviceReady+0x202>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2224      	movs	r2, #36	; 0x24
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d105      	bne.n	8005b76 <HAL_I2C_IsDeviceReady+0x6e>
 8005b6a:	897b      	ldrh	r3, [r7, #10]
 8005b6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005b70:	4b68      	ldr	r3, [pc, #416]	; (8005d14 <HAL_I2C_IsDeviceReady+0x20c>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	e004      	b.n	8005b80 <HAL_I2C_IsDeviceReady+0x78>
 8005b76:	897b      	ldrh	r3, [r7, #10]
 8005b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b7c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	6812      	ldr	r2, [r2, #0]
 8005b84:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8005b86:	f7fc ff87 	bl	8002a98 <HAL_GetTick>
 8005b8a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	bf0c      	ite	eq
 8005b9a:	2301      	moveq	r3, #1
 8005b9c:	2300      	movne	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	bf0c      	ite	eq
 8005bb0:	2301      	moveq	r3, #1
 8005bb2:	2300      	movne	r3, #0
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005bb8:	e034      	b.n	8005c24 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d01a      	beq.n	8005bf8 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bc2:	f7fc ff69 	bl	8002a98 <HAL_GetTick>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	1ad3      	subs	r3, r2, r3
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d302      	bcc.n	8005bd8 <HAL_I2C_IsDeviceReady+0xd0>
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10f      	bne.n	8005bf8 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005be4:	f043 0220 	orr.w	r2, r3, #32
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e088      	b.n	8005d0a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	bf0c      	ite	eq
 8005c06:	2301      	moveq	r3, #1
 8005c08:	2300      	movne	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	bf0c      	ite	eq
 8005c1c:	2301      	moveq	r3, #1
 8005c1e:	2300      	movne	r3, #0
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005c24:	7ffb      	ldrb	r3, [r7, #31]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <HAL_I2C_IsDeviceReady+0x128>
 8005c2a:	7fbb      	ldrb	r3, [r7, #30]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0c4      	beq.n	8005bba <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	f003 0310 	and.w	r3, r3, #16
 8005c3a:	2b10      	cmp	r3, #16
 8005c3c:	d01a      	beq.n	8005c74 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c3e:	69bb      	ldr	r3, [r7, #24]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2200      	movs	r2, #0
 8005c46:	2120      	movs	r1, #32
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f001 fcb3 	bl	80075b4 <I2C_WaitOnFlagUntilTimeout>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e058      	b.n	8005d0a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	e04a      	b.n	8005d0a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	9300      	str	r3, [sp, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2120      	movs	r1, #32
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f001 fc98 	bl	80075b4 <I2C_WaitOnFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e03d      	b.n	8005d0a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2210      	movs	r2, #16
 8005c94:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d118      	bne.n	8005cd8 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cb4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005cb6:	69bb      	ldr	r3, [r7, #24]
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	2120      	movs	r1, #32
 8005cc0:	68f8      	ldr	r0, [r7, #12]
 8005cc2:	f001 fc77 	bl	80075b4 <I2C_WaitOnFlagUntilTimeout>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d001      	beq.n	8005cd0 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e01c      	b.n	8005d0a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	f63f af3d 	bhi.w	8005b62 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf4:	f043 0220 	orr.w	r2, r3, #32
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	e000      	b.n	8005d0a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3720      	adds	r7, #32
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	02002000 	.word	0x02002000

08005d18 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005d48:	bf00      	nop
 8005d4a:	370c      	adds	r7, #12
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
 8005d74:	4613      	mov	r3, r2
 8005d76:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <I2C_Master_ISR_IT+0x1e>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e108      	b.n	8006018 <I2C_Master_ISR_IT+0x230>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f003 0310 	and.w	r3, r3, #16
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d012      	beq.n	8005e3e <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00d      	beq.n	8005e3e <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2210      	movs	r2, #16
 8005e28:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	f043 0204 	orr.w	r2, r3, #4
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f001 f9f5 	bl	8007226 <I2C_Flush_TXDR>
 8005e3c:	e0d9      	b.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d022      	beq.n	8005e8e <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d01d      	beq.n	8005e8e <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	f023 0304 	bic.w	r3, r3, #4
 8005e58:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e76:	3b01      	subs	r3, #1
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	3b01      	subs	r3, #1
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e8c:	e0b1      	b.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01d      	beq.n	8005ed4 <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d018      	beq.n	8005ed4 <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	781a      	ldrb	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ed2:	e08e      	b.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d05c      	beq.n	8005f98 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d057      	beq.n	8005f98 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d040      	beq.n	8005f74 <I2C_Master_ISR_IT+0x18c>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d13c      	bne.n	8005f74 <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f06:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2bff      	cmp	r3, #255	; 0xff
 8005f10:	d90e      	bls.n	8005f30 <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	22ff      	movs	r2, #255	; 0xff
 8005f16:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	8a79      	ldrh	r1, [r7, #18]
 8005f20:	2300      	movs	r3, #0
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f001 fb93 	bl	8007654 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f2e:	e032      	b.n	8005f96 <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f42:	d00b      	beq.n	8005f5c <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f48:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f4e:	8a79      	ldrh	r1, [r7, #18]
 8005f50:	2000      	movs	r0, #0
 8005f52:	9000      	str	r0, [sp, #0]
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f001 fb7d 	bl	8007654 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f5a:	e01c      	b.n	8005f96 <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	8a79      	ldrh	r1, [r7, #18]
 8005f64:	2300      	movs	r3, #0
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f001 fb71 	bl	8007654 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f72:	e010      	b.n	8005f96 <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f82:	d003      	beq.n	8005f8c <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 fc8b 	bl	80068a0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f8a:	e032      	b.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005f8c:	2140      	movs	r1, #64	; 0x40
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f001 f832 	bl	8006ff8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f94:	e02d      	b.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
 8005f96:	e02c      	b.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d027      	beq.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d022      	beq.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d119      	bne.n	8005fea <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fc4:	d015      	beq.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fce:	d108      	bne.n	8005fe2 <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fde:	605a      	str	r2, [r3, #4]
 8005fe0:	e007      	b.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 fc5c 	bl	80068a0 <I2C_ITMasterSeqCplt>
 8005fe8:	e003      	b.n	8005ff2 <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fea:	2140      	movs	r1, #64	; 0x40
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f001 f803 	bl	8006ff8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f003 0320 	and.w	r3, r3, #32
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d008      	beq.n	800600e <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006006:	6979      	ldr	r1, [r7, #20]
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 fce3 	bl	80069d4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3718      	adds	r7, #24
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800603c:	2b01      	cmp	r3, #1
 800603e:	d101      	bne.n	8006044 <I2C_Slave_ISR_IT+0x24>
 8006040:	2302      	movs	r3, #2
 8006042:	e0e1      	b.n	8006208 <I2C_Slave_ISR_IT+0x1e8>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f003 0320 	and.w	r3, r3, #32
 8006052:	2b00      	cmp	r3, #0
 8006054:	d008      	beq.n	8006068 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006060:	6939      	ldr	r1, [r7, #16]
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 fd7e 	bl	8006b64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b00      	cmp	r3, #0
 8006070:	d04b      	beq.n	800610a <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006078:	2b00      	cmp	r3, #0
 800607a:	d046      	beq.n	800610a <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d128      	bne.n	80060d8 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b28      	cmp	r3, #40	; 0x28
 8006090:	d108      	bne.n	80060a4 <I2C_Slave_ISR_IT+0x84>
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006098:	d104      	bne.n	80060a4 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800609a:	6939      	ldr	r1, [r7, #16]
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f000 ff57 	bl	8006f50 <I2C_ITListenCplt>
 80060a2:	e031      	b.n	8006108 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b29      	cmp	r3, #41	; 0x29
 80060ae:	d10e      	bne.n	80060ce <I2C_Slave_ISR_IT+0xae>
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060b6:	d00a      	beq.n	80060ce <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2210      	movs	r2, #16
 80060be:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f001 f8b0 	bl	8007226 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fc27 	bl	800691a <I2C_ITSlaveSeqCplt>
 80060cc:	e01c      	b.n	8006108 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2210      	movs	r2, #16
 80060d4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80060d6:	e08f      	b.n	80061f8 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2210      	movs	r2, #16
 80060de:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e4:	f043 0204 	orr.w	r2, r3, #4
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <I2C_Slave_ISR_IT+0xda>
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060f8:	d17e      	bne.n	80061f8 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060fe:	4619      	mov	r1, r3
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 ff79 	bl	8006ff8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006106:	e077      	b.n	80061f8 <I2C_Slave_ISR_IT+0x1d8>
 8006108:	e076      	b.n	80061f8 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f003 0304 	and.w	r3, r3, #4
 8006110:	2b00      	cmp	r3, #0
 8006112:	d02f      	beq.n	8006174 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800611a:	2b00      	cmp	r3, #0
 800611c:	d02a      	beq.n	8006174 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006122:	b29b      	uxth	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d018      	beq.n	800615a <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006132:	b2d2      	uxtb	r2, r2
 8006134:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006144:	3b01      	subs	r3, #1
 8006146:	b29a      	uxth	r2, r3
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800615e:	b29b      	uxth	r3, r3
 8006160:	2b00      	cmp	r3, #0
 8006162:	d14b      	bne.n	80061fc <I2C_Slave_ISR_IT+0x1dc>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800616a:	d047      	beq.n	80061fc <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fbd4 	bl	800691a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006172:	e043      	b.n	80061fc <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006188:	6939      	ldr	r1, [r7, #16]
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fb04 	bl	8006798 <I2C_ITAddrCplt>
 8006190:	e035      	b.n	80061fe <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f003 0302 	and.w	r3, r3, #2
 8006198:	2b00      	cmp	r3, #0
 800619a:	d030      	beq.n	80061fe <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d02b      	beq.n	80061fe <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d018      	beq.n	80061e2 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	781a      	ldrb	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	1c5a      	adds	r2, r3, #1
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d8:	3b01      	subs	r3, #1
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	851a      	strh	r2, [r3, #40]	; 0x28
 80061e0:	e00d      	b.n	80061fe <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061e8:	d002      	beq.n	80061f0 <I2C_Slave_ISR_IT+0x1d0>
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 fb92 	bl	800691a <I2C_ITSlaveSeqCplt>
 80061f6:	e002      	b.n	80061fe <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80061f8:	bf00      	nop
 80061fa:	e000      	b.n	80061fe <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80061fc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af02      	add	r7, sp, #8
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <I2C_Master_ISR_DMA+0x1a>
 8006226:	2302      	movs	r3, #2
 8006228:	e0d9      	b.n	80063de <I2C_Master_ISR_DMA+0x1ce>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	d016      	beq.n	800626a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006242:	2b00      	cmp	r3, #0
 8006244:	d011      	beq.n	800626a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2210      	movs	r2, #16
 800624c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006252:	f043 0204 	orr.w	r2, r3, #4
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800625a:	2120      	movs	r1, #32
 800625c:	68f8      	ldr	r0, [r7, #12]
 800625e:	f001 fa2b 	bl	80076b8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 ffdf 	bl	8007226 <I2C_Flush_TXDR>
 8006268:	e0b4      	b.n	80063d4 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006270:	2b00      	cmp	r3, #0
 8006272:	d071      	beq.n	8006358 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800627a:	2b00      	cmp	r3, #0
 800627c:	d06c      	beq.n	8006358 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800628c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006292:	b29b      	uxth	r3, r3
 8006294:	2b00      	cmp	r3, #0
 8006296:	d04e      	beq.n	8006336 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b29b      	uxth	r3, r3
 80062a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062a4:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2bff      	cmp	r3, #255	; 0xff
 80062ae:	d906      	bls.n	80062be <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	22ff      	movs	r2, #255	; 0xff
 80062b4:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80062b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80062ba:	617b      	str	r3, [r7, #20]
 80062bc:	e010      	b.n	80062e0 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80062d0:	d003      	beq.n	80062da <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d6:	617b      	str	r3, [r7, #20]
 80062d8:	e002      	b.n	80062e0 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80062da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80062de:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	8a79      	ldrh	r1, [r7, #18]
 80062e8:	2300      	movs	r3, #0
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f001 f9b0 	bl	8007654 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b22      	cmp	r3, #34	; 0x22
 8006310:	d108      	bne.n	8006324 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006320:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006322:	e057      	b.n	80063d4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006332:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006334:	e04e      	b.n	80063d4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006344:	d003      	beq.n	800634e <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006346:	68f8      	ldr	r0, [r7, #12]
 8006348:	f000 faaa 	bl	80068a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800634c:	e042      	b.n	80063d4 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800634e:	2140      	movs	r1, #64	; 0x40
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fe51 	bl	8006ff8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006356:	e03d      	b.n	80063d4 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800635e:	2b00      	cmp	r3, #0
 8006360:	d028      	beq.n	80063b4 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006368:	2b00      	cmp	r3, #0
 800636a:	d023      	beq.n	80063b4 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d119      	bne.n	80063aa <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006380:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006384:	d025      	beq.n	80063d2 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800638e:	d108      	bne.n	80063a2 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800639e:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80063a0:	e017      	b.n	80063d2 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80063a2:	68f8      	ldr	r0, [r7, #12]
 80063a4:	f000 fa7c 	bl	80068a0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80063a8:	e013      	b.n	80063d2 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063aa:	2140      	movs	r1, #64	; 0x40
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 fe23 	bl	8006ff8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80063b2:	e00e      	b.n	80063d2 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00a      	beq.n	80063d4 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d005      	beq.n	80063d4 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 fb02 	bl	80069d4 <I2C_ITMasterCplt>
 80063d0:	e000      	b.n	80063d4 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80063d2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2200      	movs	r2, #0
 80063d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80063fa:	2300      	movs	r3, #0
 80063fc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <I2C_Slave_ISR_DMA+0x24>
 8006408:	2302      	movs	r3, #2
 800640a:	e1c0      	b.n	800678e <I2C_Slave_ISR_DMA+0x3a6>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f003 0320 	and.w	r3, r3, #32
 800641a:	2b00      	cmp	r3, #0
 800641c:	d008      	beq.n	8006430 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fb9a 	bl	8006b64 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f003 0310 	and.w	r3, r3, #16
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 8196 	beq.w	8006768 <I2C_Slave_ISR_DMA+0x380>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 8190 	beq.w	8006768 <I2C_Slave_ISR_DMA+0x380>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d105      	bne.n	800645e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006458:	2b00      	cmp	r3, #0
 800645a:	f000 817e 	beq.w	800675a <I2C_Slave_ISR_DMA+0x372>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d07b      	beq.n	800655e <I2C_Slave_ISR_DMA+0x176>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d076      	beq.n	800655e <I2C_Slave_ISR_DMA+0x176>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a74      	ldr	r2, [pc, #464]	; (8006648 <I2C_Slave_ISR_DMA+0x260>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d059      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a72      	ldr	r2, [pc, #456]	; (800664c <I2C_Slave_ISR_DMA+0x264>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d053      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a70      	ldr	r2, [pc, #448]	; (8006650 <I2C_Slave_ISR_DMA+0x268>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d04d      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a6e      	ldr	r2, [pc, #440]	; (8006654 <I2C_Slave_ISR_DMA+0x26c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d047      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a6c      	ldr	r2, [pc, #432]	; (8006658 <I2C_Slave_ISR_DMA+0x270>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d041      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a6a      	ldr	r2, [pc, #424]	; (800665c <I2C_Slave_ISR_DMA+0x274>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d03b      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a68      	ldr	r2, [pc, #416]	; (8006660 <I2C_Slave_ISR_DMA+0x278>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d035      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a66      	ldr	r2, [pc, #408]	; (8006664 <I2C_Slave_ISR_DMA+0x27c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d02f      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a64      	ldr	r2, [pc, #400]	; (8006668 <I2C_Slave_ISR_DMA+0x280>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d029      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a62      	ldr	r2, [pc, #392]	; (800666c <I2C_Slave_ISR_DMA+0x284>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d023      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a60      	ldr	r2, [pc, #384]	; (8006670 <I2C_Slave_ISR_DMA+0x288>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d01d      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a5e      	ldr	r2, [pc, #376]	; (8006674 <I2C_Slave_ISR_DMA+0x28c>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d017      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a5c      	ldr	r2, [pc, #368]	; (8006678 <I2C_Slave_ISR_DMA+0x290>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d011      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a5a      	ldr	r2, [pc, #360]	; (800667c <I2C_Slave_ISR_DMA+0x294>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00b      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a58      	ldr	r2, [pc, #352]	; (8006680 <I2C_Slave_ISR_DMA+0x298>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d005      	beq.n	8006530 <I2C_Slave_ISR_DMA+0x148>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a56      	ldr	r2, [pc, #344]	; (8006684 <I2C_Slave_ISR_DMA+0x29c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d109      	bne.n	8006544 <I2C_Slave_ISR_DMA+0x15c>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	bf0c      	ite	eq
 800653c:	2301      	moveq	r3, #1
 800653e:	2300      	movne	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	e008      	b.n	8006556 <I2C_Slave_ISR_DMA+0x16e>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	bf0c      	ite	eq
 8006550:	2301      	moveq	r3, #1
 8006552:	2300      	movne	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <I2C_Slave_ISR_DMA+0x176>
          {
            treatdmanack = 1U;
 800655a:	2301      	movs	r3, #1
 800655c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 809d 	beq.w	80066a2 <I2C_Slave_ISR_DMA+0x2ba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8097 	beq.w	80066a2 <I2C_Slave_ISR_DMA+0x2ba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a33      	ldr	r2, [pc, #204]	; (8006648 <I2C_Slave_ISR_DMA+0x260>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d059      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a31      	ldr	r2, [pc, #196]	; (800664c <I2C_Slave_ISR_DMA+0x264>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d053      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a2f      	ldr	r2, [pc, #188]	; (8006650 <I2C_Slave_ISR_DMA+0x268>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d04d      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a2d      	ldr	r2, [pc, #180]	; (8006654 <I2C_Slave_ISR_DMA+0x26c>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d047      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a2b      	ldr	r2, [pc, #172]	; (8006658 <I2C_Slave_ISR_DMA+0x270>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d041      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a29      	ldr	r2, [pc, #164]	; (800665c <I2C_Slave_ISR_DMA+0x274>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d03b      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a27      	ldr	r2, [pc, #156]	; (8006660 <I2C_Slave_ISR_DMA+0x278>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d035      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a25      	ldr	r2, [pc, #148]	; (8006664 <I2C_Slave_ISR_DMA+0x27c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d02f      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a23      	ldr	r2, [pc, #140]	; (8006668 <I2C_Slave_ISR_DMA+0x280>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d029      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a21      	ldr	r2, [pc, #132]	; (800666c <I2C_Slave_ISR_DMA+0x284>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d023      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1f      	ldr	r2, [pc, #124]	; (8006670 <I2C_Slave_ISR_DMA+0x288>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d01d      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a1d      	ldr	r2, [pc, #116]	; (8006674 <I2C_Slave_ISR_DMA+0x28c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d017      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <I2C_Slave_ISR_DMA+0x290>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d011      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a19      	ldr	r2, [pc, #100]	; (800667c <I2C_Slave_ISR_DMA+0x294>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00b      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a17      	ldr	r2, [pc, #92]	; (8006680 <I2C_Slave_ISR_DMA+0x298>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d005      	beq.n	8006634 <I2C_Slave_ISR_DMA+0x24c>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a15      	ldr	r2, [pc, #84]	; (8006684 <I2C_Slave_ISR_DMA+0x29c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d129      	bne.n	8006688 <I2C_Slave_ISR_DMA+0x2a0>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	bf0c      	ite	eq
 8006640:	2301      	moveq	r3, #1
 8006642:	2300      	movne	r3, #0
 8006644:	b2db      	uxtb	r3, r3
 8006646:	e028      	b.n	800669a <I2C_Slave_ISR_DMA+0x2b2>
 8006648:	40020010 	.word	0x40020010
 800664c:	40020028 	.word	0x40020028
 8006650:	40020040 	.word	0x40020040
 8006654:	40020058 	.word	0x40020058
 8006658:	40020070 	.word	0x40020070
 800665c:	40020088 	.word	0x40020088
 8006660:	400200a0 	.word	0x400200a0
 8006664:	400200b8 	.word	0x400200b8
 8006668:	40020410 	.word	0x40020410
 800666c:	40020428 	.word	0x40020428
 8006670:	40020440 	.word	0x40020440
 8006674:	40020458 	.word	0x40020458
 8006678:	40020470 	.word	0x40020470
 800667c:	40020488 	.word	0x40020488
 8006680:	400204a0 	.word	0x400204a0
 8006684:	400204b8 	.word	0x400204b8
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf0c      	ite	eq
 8006694:	2301      	moveq	r3, #1
 8006696:	2300      	movne	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <I2C_Slave_ISR_DMA+0x2ba>
          {
            treatdmanack = 1U;
 800669e:	2301      	movs	r3, #1
 80066a0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d128      	bne.n	80066fa <I2C_Slave_ISR_DMA+0x312>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b28      	cmp	r3, #40	; 0x28
 80066b2:	d108      	bne.n	80066c6 <I2C_Slave_ISR_DMA+0x2de>
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066ba:	d104      	bne.n	80066c6 <I2C_Slave_ISR_DMA+0x2de>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fc46 	bl	8006f50 <I2C_ITListenCplt>
 80066c4:	e048      	b.n	8006758 <I2C_Slave_ISR_DMA+0x370>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b29      	cmp	r3, #41	; 0x29
 80066d0:	d10e      	bne.n	80066f0 <I2C_Slave_ISR_DMA+0x308>
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80066d8:	d00a      	beq.n	80066f0 <I2C_Slave_ISR_DMA+0x308>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2210      	movs	r2, #16
 80066e0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 fd9f 	bl	8007226 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f916 	bl	800691a <I2C_ITSlaveSeqCplt>
 80066ee:	e033      	b.n	8006758 <I2C_Slave_ISR_DMA+0x370>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2210      	movs	r2, #16
 80066f6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80066f8:	e034      	b.n	8006764 <I2C_Slave_ISR_DMA+0x37c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2210      	movs	r2, #16
 8006700:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	f043 0204 	orr.w	r2, r3, #4
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006714:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <I2C_Slave_ISR_DMA+0x33c>
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006722:	d11f      	bne.n	8006764 <I2C_Slave_ISR_DMA+0x37c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006724:	7dfb      	ldrb	r3, [r7, #23]
 8006726:	2b21      	cmp	r3, #33	; 0x21
 8006728:	d002      	beq.n	8006730 <I2C_Slave_ISR_DMA+0x348>
 800672a:	7dfb      	ldrb	r3, [r7, #23]
 800672c:	2b29      	cmp	r3, #41	; 0x29
 800672e:	d103      	bne.n	8006738 <I2C_Slave_ISR_DMA+0x350>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2221      	movs	r2, #33	; 0x21
 8006734:	631a      	str	r2, [r3, #48]	; 0x30
 8006736:	e008      	b.n	800674a <I2C_Slave_ISR_DMA+0x362>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b22      	cmp	r3, #34	; 0x22
 800673c:	d002      	beq.n	8006744 <I2C_Slave_ISR_DMA+0x35c>
 800673e:	7dfb      	ldrb	r3, [r7, #23]
 8006740:	2b2a      	cmp	r3, #42	; 0x2a
 8006742:	d102      	bne.n	800674a <I2C_Slave_ISR_DMA+0x362>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2222      	movs	r2, #34	; 0x22
 8006748:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800674e:	4619      	mov	r1, r3
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f000 fc51 	bl	8006ff8 <I2C_ITError>
      if (treatdmanack == 1U)
 8006756:	e005      	b.n	8006764 <I2C_Slave_ISR_DMA+0x37c>
 8006758:	e004      	b.n	8006764 <I2C_Slave_ISR_DMA+0x37c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2210      	movs	r2, #16
 8006760:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006762:	e00f      	b.n	8006784 <I2C_Slave_ISR_DMA+0x39c>
      if (treatdmanack == 1U)
 8006764:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006766:	e00d      	b.n	8006784 <I2C_Slave_ISR_DMA+0x39c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	f003 0308 	and.w	r3, r3, #8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d008      	beq.n	8006784 <I2C_Slave_ISR_DMA+0x39c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <I2C_Slave_ISR_DMA+0x39c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f80a 	bl	8006798 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3720      	adds	r7, #32
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
 8006796:	bf00      	nop

08006798 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067ae:	2b28      	cmp	r3, #40	; 0x28
 80067b0:	d16a      	bne.n	8006888 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	0c1b      	lsrs	r3, r3, #16
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80067d0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	b29b      	uxth	r3, r3
 80067da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067de:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80067ec:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d138      	bne.n	8006868 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80067f6:	897b      	ldrh	r3, [r7, #10]
 80067f8:	09db      	lsrs	r3, r3, #7
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	89bb      	ldrh	r3, [r7, #12]
 80067fe:	4053      	eors	r3, r2
 8006800:	b29b      	uxth	r3, r3
 8006802:	f003 0306 	and.w	r3, r3, #6
 8006806:	2b00      	cmp	r3, #0
 8006808:	d11c      	bne.n	8006844 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800680a:	897b      	ldrh	r3, [r7, #10]
 800680c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800681c:	2b02      	cmp	r3, #2
 800681e:	d13b      	bne.n	8006898 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2208      	movs	r2, #8
 800682c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006836:	89ba      	ldrh	r2, [r7, #12]
 8006838:	7bfb      	ldrb	r3, [r7, #15]
 800683a:	4619      	mov	r1, r3
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff fa93 	bl	8005d68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006842:	e029      	b.n	8006898 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006844:	893b      	ldrh	r3, [r7, #8]
 8006846:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 ff9d 	bl	800778c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800685a:	89ba      	ldrh	r2, [r7, #12]
 800685c:	7bfb      	ldrb	r3, [r7, #15]
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f7ff fa81 	bl	8005d68 <HAL_I2C_AddrCallback>
}
 8006866:	e017      	b.n	8006898 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 ff8d 	bl	800778c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800687a:	89ba      	ldrh	r2, [r7, #12]
 800687c:	7bfb      	ldrb	r3, [r7, #15]
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff fa71 	bl	8005d68 <HAL_I2C_AddrCallback>
}
 8006886:	e007      	b.n	8006898 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	2208      	movs	r2, #8
 800688e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b21      	cmp	r3, #33	; 0x21
 80068ba:	d115      	bne.n	80068e8 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2211      	movs	r2, #17
 80068c8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80068d0:	2101      	movs	r1, #1
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 ff5a 	bl	800778c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f7ff fa19 	bl	8005d18 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80068e6:	e014      	b.n	8006912 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2212      	movs	r2, #18
 80068f4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80068fc:	2102      	movs	r1, #2
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 ff44 	bl	800778c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff fa0d 	bl	8005d2c <HAL_I2C_MasterRxCpltCallback>
}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b084      	sub	sp, #16
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d008      	beq.n	800694e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800694a:	601a      	str	r2, [r3, #0]
 800694c:	e00c      	b.n	8006968 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006954:	2b00      	cmp	r3, #0
 8006956:	d007      	beq.n	8006968 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006966:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800696e:	b2db      	uxtb	r3, r3
 8006970:	2b29      	cmp	r3, #41	; 0x29
 8006972:	d112      	bne.n	800699a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2228      	movs	r2, #40	; 0x28
 8006978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2221      	movs	r2, #33	; 0x21
 8006980:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006982:	2101      	movs	r1, #1
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f000 ff01 	bl	800778c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f7ff f9d4 	bl	8005d40 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006998:	e017      	b.n	80069ca <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b2a      	cmp	r3, #42	; 0x2a
 80069a4:	d111      	bne.n	80069ca <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2228      	movs	r2, #40	; 0x28
 80069aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2222      	movs	r2, #34	; 0x22
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80069b4:	2102      	movs	r1, #2
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fee8 	bl	800778c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff f9c5 	bl	8005d54 <HAL_I2C_SlaveRxCpltCallback>
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
	...

080069d4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2220      	movs	r2, #32
 80069e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b21      	cmp	r3, #33	; 0x21
 80069f4:	d107      	bne.n	8006a06 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80069f6:	2101      	movs	r1, #1
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fec7 	bl	800778c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2211      	movs	r2, #17
 8006a02:	631a      	str	r2, [r3, #48]	; 0x30
 8006a04:	e00c      	b.n	8006a20 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b22      	cmp	r3, #34	; 0x22
 8006a10:	d106      	bne.n	8006a20 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a12:	2102      	movs	r1, #2
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f000 feb9 	bl	800778c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2212      	movs	r2, #18
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6859      	ldr	r1, [r3, #4]
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b4c      	ldr	r3, [pc, #304]	; (8006b5c <I2C_ITMasterCplt+0x188>)
 8006a2c:	400b      	ands	r3, r1
 8006a2e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a49      	ldr	r2, [pc, #292]	; (8006b60 <I2C_ITMasterCplt+0x18c>)
 8006a3a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f003 0310 	and.w	r3, r3, #16
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d009      	beq.n	8006a5a <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2210      	movs	r2, #16
 8006a4c:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a52:	f043 0204 	orr.w	r2, r3, #4
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b60      	cmp	r3, #96	; 0x60
 8006a64:	d10a      	bne.n	8006a7c <I2C_ITMasterCplt+0xa8>
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f003 0304 	and.w	r3, r3, #4
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d005      	beq.n	8006a7c <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fbd2 	bl	8007226 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a86:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b60      	cmp	r3, #96	; 0x60
 8006a92:	d002      	beq.n	8006a9a <I2C_ITMasterCplt+0xc6>
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d006      	beq.n	8006aa8 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f000 faa9 	bl	8006ff8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006aa6:	e054      	b.n	8006b52 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006aae:	b2db      	uxtb	r3, r3
 8006ab0:	2b21      	cmp	r3, #33	; 0x21
 8006ab2:	d124      	bne.n	8006afe <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ac8:	b2db      	uxtb	r3, r3
 8006aca:	2b40      	cmp	r3, #64	; 0x40
 8006acc:	d10b      	bne.n	8006ae6 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff f95a 	bl	8005d98 <HAL_I2C_MemTxCpltCallback>
}
 8006ae4:	e035      	b.n	8006b52 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7ff f90e 	bl	8005d18 <HAL_I2C_MasterTxCpltCallback>
}
 8006afc:	e029      	b.n	8006b52 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b22      	cmp	r3, #34	; 0x22
 8006b08:	d123      	bne.n	8006b52 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	d10b      	bne.n	8006b3c <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7ff f939 	bl	8005dac <HAL_I2C_MemRxCpltCallback>
}
 8006b3a:	e00a      	b.n	8006b52 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f7ff f8ed 	bl	8005d2c <HAL_I2C_MasterRxCpltCallback>
}
 8006b52:	bf00      	nop
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	fe00e800 	.word	0xfe00e800
 8006b60:	ffff0000 	.word	0xffff0000

08006b64 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b80:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	2220      	movs	r2, #32
 8006b88:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b21      	cmp	r3, #33	; 0x21
 8006b8e:	d002      	beq.n	8006b96 <I2C_ITSlaveCplt+0x32>
 8006b90:	7bfb      	ldrb	r3, [r7, #15]
 8006b92:	2b29      	cmp	r3, #41	; 0x29
 8006b94:	d108      	bne.n	8006ba8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006b96:	f248 0101 	movw	r1, #32769	; 0x8001
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 fdf6 	bl	800778c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2221      	movs	r2, #33	; 0x21
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ba6:	e00d      	b.n	8006bc4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	2b22      	cmp	r3, #34	; 0x22
 8006bac:	d002      	beq.n	8006bb4 <I2C_ITSlaveCplt+0x50>
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bb2:	d107      	bne.n	8006bc4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006bb4:	f248 0102 	movw	r1, #32770	; 0x8002
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fde7 	bl	800778c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2222      	movs	r2, #34	; 0x22
 8006bc2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685a      	ldr	r2, [r3, #4]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006bd2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6859      	ldr	r1, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4b7f      	ldr	r3, [pc, #508]	; (8006ddc <I2C_ITSlaveCplt+0x278>)
 8006be0:	400b      	ands	r3, r1
 8006be2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fb1e 	bl	8007226 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d07a      	beq.n	8006cea <I2C_ITSlaveCplt+0x186>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c02:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8110 	beq.w	8006e2e <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a72      	ldr	r2, [pc, #456]	; (8006de0 <I2C_ITSlaveCplt+0x27c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d059      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a70      	ldr	r2, [pc, #448]	; (8006de4 <I2C_ITSlaveCplt+0x280>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d053      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a6e      	ldr	r2, [pc, #440]	; (8006de8 <I2C_ITSlaveCplt+0x284>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d04d      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a6c      	ldr	r2, [pc, #432]	; (8006dec <I2C_ITSlaveCplt+0x288>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d047      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a6a      	ldr	r2, [pc, #424]	; (8006df0 <I2C_ITSlaveCplt+0x28c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d041      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a68      	ldr	r2, [pc, #416]	; (8006df4 <I2C_ITSlaveCplt+0x290>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d03b      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a66      	ldr	r2, [pc, #408]	; (8006df8 <I2C_ITSlaveCplt+0x294>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d035      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a64      	ldr	r2, [pc, #400]	; (8006dfc <I2C_ITSlaveCplt+0x298>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d02f      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a62      	ldr	r2, [pc, #392]	; (8006e00 <I2C_ITSlaveCplt+0x29c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d029      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a60      	ldr	r2, [pc, #384]	; (8006e04 <I2C_ITSlaveCplt+0x2a0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d023      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a5e      	ldr	r2, [pc, #376]	; (8006e08 <I2C_ITSlaveCplt+0x2a4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d01d      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a5c      	ldr	r2, [pc, #368]	; (8006e0c <I2C_ITSlaveCplt+0x2a8>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d017      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a5a      	ldr	r2, [pc, #360]	; (8006e10 <I2C_ITSlaveCplt+0x2ac>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d011      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a58      	ldr	r2, [pc, #352]	; (8006e14 <I2C_ITSlaveCplt+0x2b0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00b      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a56      	ldr	r2, [pc, #344]	; (8006e18 <I2C_ITSlaveCplt+0x2b4>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d005      	beq.n	8006cce <I2C_ITSlaveCplt+0x16a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a54      	ldr	r2, [pc, #336]	; (8006e1c <I2C_ITSlaveCplt+0x2b8>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d105      	bne.n	8006cda <I2C_ITSlaveCplt+0x176>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	e004      	b.n	8006ce4 <I2C_ITSlaveCplt+0x180>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	8553      	strh	r3, [r2, #42]	; 0x2a
 8006ce8:	e0a1      	b.n	8006e2e <I2C_ITSlaveCplt+0x2ca>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 809c 	beq.w	8006e2e <I2C_ITSlaveCplt+0x2ca>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681a      	ldr	r2, [r3, #0]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d04:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 808f 	beq.w	8006e2e <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a32      	ldr	r2, [pc, #200]	; (8006de0 <I2C_ITSlaveCplt+0x27c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d059      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a30      	ldr	r2, [pc, #192]	; (8006de4 <I2C_ITSlaveCplt+0x280>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d053      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2e      	ldr	r2, [pc, #184]	; (8006de8 <I2C_ITSlaveCplt+0x284>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d04d      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a2c      	ldr	r2, [pc, #176]	; (8006dec <I2C_ITSlaveCplt+0x288>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d047      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a2a      	ldr	r2, [pc, #168]	; (8006df0 <I2C_ITSlaveCplt+0x28c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d041      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a28      	ldr	r2, [pc, #160]	; (8006df4 <I2C_ITSlaveCplt+0x290>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d03b      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a26      	ldr	r2, [pc, #152]	; (8006df8 <I2C_ITSlaveCplt+0x294>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d035      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a24      	ldr	r2, [pc, #144]	; (8006dfc <I2C_ITSlaveCplt+0x298>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d02f      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a22      	ldr	r2, [pc, #136]	; (8006e00 <I2C_ITSlaveCplt+0x29c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d029      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a20      	ldr	r2, [pc, #128]	; (8006e04 <I2C_ITSlaveCplt+0x2a0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d023      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a1e      	ldr	r2, [pc, #120]	; (8006e08 <I2C_ITSlaveCplt+0x2a4>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d01d      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a1c      	ldr	r2, [pc, #112]	; (8006e0c <I2C_ITSlaveCplt+0x2a8>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d017      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <I2C_ITSlaveCplt+0x2ac>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d011      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <I2C_ITSlaveCplt+0x2b0>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00b      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a16      	ldr	r2, [pc, #88]	; (8006e18 <I2C_ITSlaveCplt+0x2b4>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d005      	beq.n	8006dd0 <I2C_ITSlaveCplt+0x26c>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a14      	ldr	r2, [pc, #80]	; (8006e1c <I2C_ITSlaveCplt+0x2b8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d127      	bne.n	8006e20 <I2C_ITSlaveCplt+0x2bc>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	e026      	b.n	8006e2a <I2C_ITSlaveCplt+0x2c6>
 8006ddc:	fe00e800 	.word	0xfe00e800
 8006de0:	40020010 	.word	0x40020010
 8006de4:	40020028 	.word	0x40020028
 8006de8:	40020040 	.word	0x40020040
 8006dec:	40020058 	.word	0x40020058
 8006df0:	40020070 	.word	0x40020070
 8006df4:	40020088 	.word	0x40020088
 8006df8:	400200a0 	.word	0x400200a0
 8006dfc:	400200b8 	.word	0x400200b8
 8006e00:	40020410 	.word	0x40020410
 8006e04:	40020428 	.word	0x40020428
 8006e08:	40020440 	.word	0x40020440
 8006e0c:	40020458 	.word	0x40020458
 8006e10:	40020470 	.word	0x40020470
 8006e14:	40020488 	.word	0x40020488
 8006e18:	400204a0 	.word	0x400204a0
 8006e1c:	400204b8 	.word	0x400204b8
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d020      	beq.n	8006e7a <I2C_ITSlaveCplt+0x316>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f023 0304 	bic.w	r3, r3, #4
 8006e3e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00c      	beq.n	8006e7a <I2C_ITSlaveCplt+0x316>
    {
      hi2c->XferSize--;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e64:	3b01      	subs	r3, #1
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <I2C_ITSlaveCplt+0x32c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e88:	f043 0204 	orr.w	r2, r3, #4
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d010      	beq.n	8006ec8 <I2C_ITSlaveCplt+0x364>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 f8a3 	bl	8006ff8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b28      	cmp	r3, #40	; 0x28
 8006ebc:	d141      	bne.n	8006f42 <I2C_ITSlaveCplt+0x3de>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ebe:	6979      	ldr	r1, [r7, #20]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f845 	bl	8006f50 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ec6:	e03c      	b.n	8006f42 <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ecc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ed0:	d014      	beq.n	8006efc <I2C_ITSlaveCplt+0x398>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7ff fd21 	bl	800691a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a1c      	ldr	r2, [pc, #112]	; (8006f4c <I2C_ITSlaveCplt+0x3e8>)
 8006edc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f7fe ff45 	bl	8005d84 <HAL_I2C_ListenCpltCallback>
}
 8006efa:	e022      	b.n	8006f42 <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b22      	cmp	r3, #34	; 0x22
 8006f06:	d10e      	bne.n	8006f26 <I2C_ITSlaveCplt+0x3c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fe ff18 	bl	8005d54 <HAL_I2C_SlaveRxCpltCallback>
}
 8006f24:	e00d      	b.n	8006f42 <I2C_ITSlaveCplt+0x3de>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2220      	movs	r2, #32
 8006f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f7fe feff 	bl	8005d40 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f42:	bf00      	nop
 8006f44:	3718      	adds	r7, #24
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	ffff0000 	.word	0xffff0000

08006f50 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a25      	ldr	r2, [pc, #148]	; (8006ff4 <I2C_ITListenCplt+0xa4>)
 8006f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d022      	beq.n	8006fcc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f90:	b2d2      	uxtb	r2, r2
 8006f92:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d012      	beq.n	8006fcc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006faa:	3b01      	subs	r3, #1
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fb6:	b29b      	uxth	r3, r3
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc4:	f043 0204 	orr.w	r2, r3, #4
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fcc:	f248 0103 	movw	r1, #32771	; 0x8003
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fbdb 	bl	800778c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2210      	movs	r2, #16
 8006fdc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f7fe fecc 	bl	8005d84 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006fec:	bf00      	nop
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	ffff0000 	.word	0xffff0000

08006ff8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a6d      	ldr	r2, [pc, #436]	; (80071cc <I2C_ITError+0x1d4>)
 8007016:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800702a:	7bfb      	ldrb	r3, [r7, #15]
 800702c:	2b28      	cmp	r3, #40	; 0x28
 800702e:	d005      	beq.n	800703c <I2C_ITError+0x44>
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b29      	cmp	r3, #41	; 0x29
 8007034:	d002      	beq.n	800703c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007036:	7bfb      	ldrb	r3, [r7, #15]
 8007038:	2b2a      	cmp	r3, #42	; 0x2a
 800703a:	d10b      	bne.n	8007054 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800703c:	2103      	movs	r1, #3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fba4 	bl	800778c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2228      	movs	r2, #40	; 0x28
 8007048:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a60      	ldr	r2, [pc, #384]	; (80071d0 <I2C_ITError+0x1d8>)
 8007050:	635a      	str	r2, [r3, #52]	; 0x34
 8007052:	e030      	b.n	80070b6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007054:	f248 0103 	movw	r1, #32771	; 0x8003
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fb97 	bl	800778c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f8e1 	bl	8007226 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b60      	cmp	r3, #96	; 0x60
 800706e:	d01f      	beq.n	80070b0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2220      	movs	r2, #32
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	699b      	ldr	r3, [r3, #24]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b20      	cmp	r3, #32
 8007084:	d114      	bne.n	80070b0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	699b      	ldr	r3, [r3, #24]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b10      	cmp	r3, #16
 8007092:	d109      	bne.n	80070a8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2210      	movs	r2, #16
 800709a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a0:	f043 0204 	orr.w	r2, r3, #4
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2220      	movs	r2, #32
 80070ae:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d039      	beq.n	8007138 <I2C_ITError+0x140>
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	2b11      	cmp	r3, #17
 80070c8:	d002      	beq.n	80070d0 <I2C_ITError+0xd8>
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2b21      	cmp	r3, #33	; 0x21
 80070ce:	d133      	bne.n	8007138 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070de:	d107      	bne.n	80070f0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070ee:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7fd ff53 	bl	8004fa0 <HAL_DMA_GetState>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d017      	beq.n	8007130 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	4a33      	ldr	r2, [pc, #204]	; (80071d4 <I2C_ITError+0x1dc>)
 8007106:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	4618      	mov	r0, r3
 8007116:	f7fd fcfd 	bl	8004b14 <HAL_DMA_Abort_IT>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d04d      	beq.n	80071bc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800712a:	4610      	mov	r0, r2
 800712c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800712e:	e045      	b.n	80071bc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007130:	6878      	ldr	r0, [r7, #4]
 8007132:	f000 f851 	bl	80071d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007136:	e041      	b.n	80071bc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800713c:	2b00      	cmp	r3, #0
 800713e:	d039      	beq.n	80071b4 <I2C_ITError+0x1bc>
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b12      	cmp	r3, #18
 8007144:	d002      	beq.n	800714c <I2C_ITError+0x154>
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	2b22      	cmp	r3, #34	; 0x22
 800714a:	d133      	bne.n	80071b4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800715a:	d107      	bne.n	800716c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800716a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007170:	4618      	mov	r0, r3
 8007172:	f7fd ff15 	bl	8004fa0 <HAL_DMA_GetState>
 8007176:	4603      	mov	r3, r0
 8007178:	2b01      	cmp	r3, #1
 800717a:	d017      	beq.n	80071ac <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007180:	4a14      	ldr	r2, [pc, #80]	; (80071d4 <I2C_ITError+0x1dc>)
 8007182:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007190:	4618      	mov	r0, r3
 8007192:	f7fd fcbf 	bl	8004b14 <HAL_DMA_Abort_IT>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d011      	beq.n	80071c0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80071a6:	4610      	mov	r0, r2
 80071a8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071aa:	e009      	b.n	80071c0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f813 	bl	80071d8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071b2:	e005      	b.n	80071c0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f80f 	bl	80071d8 <I2C_TreatErrorCallback>
  }
}
 80071ba:	e002      	b.n	80071c2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071bc:	bf00      	nop
 80071be:	e000      	b.n	80071c2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071c0:	bf00      	nop
}
 80071c2:	bf00      	nop
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	ffff0000 	.word	0xffff0000
 80071d0:	08006021 	.word	0x08006021
 80071d4:	08007579 	.word	0x08007579

080071d8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b082      	sub	sp, #8
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b60      	cmp	r3, #96	; 0x60
 80071ea:	d10e      	bne.n	800720a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2220      	movs	r2, #32
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f7fe fde6 	bl	8005dd4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007208:	e009      	b.n	800721e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7fe fdd1 	bl	8005dc0 <HAL_I2C_ErrorCallback>
}
 800721e:	bf00      	nop
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	f003 0302 	and.w	r3, r3, #2
 8007238:	2b02      	cmp	r3, #2
 800723a:	d103      	bne.n	8007244 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2200      	movs	r2, #0
 8007242:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b01      	cmp	r3, #1
 8007250:	d007      	beq.n	8007262 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	699a      	ldr	r2, [r3, #24]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f042 0201 	orr.w	r2, r2, #1
 8007260:	619a      	str	r2, [r3, #24]
  }
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b084      	sub	sp, #16
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727a:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800728a:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007290:	b29b      	uxth	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d104      	bne.n	80072a0 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007296:	2120      	movs	r1, #32
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f000 fa0d 	bl	80076b8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800729e:	e02d      	b.n	80072fc <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80072a8:	441a      	add	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	2bff      	cmp	r3, #255	; 0xff
 80072b6:	d903      	bls.n	80072c0 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	22ff      	movs	r2, #255	; 0xff
 80072bc:	851a      	strh	r2, [r3, #40]	; 0x28
 80072be:	e004      	b.n	80072ca <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	4619      	mov	r1, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	3328      	adds	r3, #40	; 0x28
 80072da:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072e0:	f7fd f9ae 	bl	8004640 <HAL_DMA_Start_IT>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80072ea:	2110      	movs	r1, #16
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f7ff fe83 	bl	8006ff8 <I2C_ITError>
}
 80072f2:	e003      	b.n	80072fc <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80072f4:	2140      	movs	r1, #64	; 0x40
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 f9de 	bl	80076b8 <I2C_Enable_IRQ>
}
 80072fc:	bf00      	nop
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007314:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	2b00      	cmp	r3, #0
 800731c:	d076      	beq.n	800740c <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a71      	ldr	r2, [pc, #452]	; (80074ec <I2C_DMAError+0x1e8>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d059      	beq.n	80073de <I2C_DMAError+0xda>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a6f      	ldr	r2, [pc, #444]	; (80074f0 <I2C_DMAError+0x1ec>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d053      	beq.n	80073de <I2C_DMAError+0xda>
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a6d      	ldr	r2, [pc, #436]	; (80074f4 <I2C_DMAError+0x1f0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d04d      	beq.n	80073de <I2C_DMAError+0xda>
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a6b      	ldr	r2, [pc, #428]	; (80074f8 <I2C_DMAError+0x1f4>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d047      	beq.n	80073de <I2C_DMAError+0xda>
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a69      	ldr	r2, [pc, #420]	; (80074fc <I2C_DMAError+0x1f8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d041      	beq.n	80073de <I2C_DMAError+0xda>
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a67      	ldr	r2, [pc, #412]	; (8007500 <I2C_DMAError+0x1fc>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d03b      	beq.n	80073de <I2C_DMAError+0xda>
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a65      	ldr	r2, [pc, #404]	; (8007504 <I2C_DMAError+0x200>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d035      	beq.n	80073de <I2C_DMAError+0xda>
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a63      	ldr	r2, [pc, #396]	; (8007508 <I2C_DMAError+0x204>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d02f      	beq.n	80073de <I2C_DMAError+0xda>
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a61      	ldr	r2, [pc, #388]	; (800750c <I2C_DMAError+0x208>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d029      	beq.n	80073de <I2C_DMAError+0xda>
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a5f      	ldr	r2, [pc, #380]	; (8007510 <I2C_DMAError+0x20c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d023      	beq.n	80073de <I2C_DMAError+0xda>
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a5d      	ldr	r2, [pc, #372]	; (8007514 <I2C_DMAError+0x210>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d01d      	beq.n	80073de <I2C_DMAError+0xda>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a5b      	ldr	r2, [pc, #364]	; (8007518 <I2C_DMAError+0x214>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d017      	beq.n	80073de <I2C_DMAError+0xda>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a59      	ldr	r2, [pc, #356]	; (800751c <I2C_DMAError+0x218>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d011      	beq.n	80073de <I2C_DMAError+0xda>
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a57      	ldr	r2, [pc, #348]	; (8007520 <I2C_DMAError+0x21c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d00b      	beq.n	80073de <I2C_DMAError+0xda>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a55      	ldr	r2, [pc, #340]	; (8007524 <I2C_DMAError+0x220>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d005      	beq.n	80073de <I2C_DMAError+0xda>
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a53      	ldr	r2, [pc, #332]	; (8007528 <I2C_DMAError+0x224>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d109      	bne.n	80073f2 <I2C_DMAError+0xee>
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	bf0c      	ite	eq
 80073ea:	2301      	moveq	r3, #1
 80073ec:	2300      	movne	r3, #0
 80073ee:	b2db      	uxtb	r3, r3
 80073f0:	e008      	b.n	8007404 <I2C_DMAError+0x100>
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bf0c      	ite	eq
 80073fe:	2301      	moveq	r3, #1
 8007400:	2300      	movne	r3, #0
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d001      	beq.n	800740c <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8007408:	2301      	movs	r3, #1
 800740a:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007410:	2b00      	cmp	r3, #0
 8007412:	f000 8098 	beq.w	8007546 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a33      	ldr	r2, [pc, #204]	; (80074ec <I2C_DMAError+0x1e8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d059      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a31      	ldr	r2, [pc, #196]	; (80074f0 <I2C_DMAError+0x1ec>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d053      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a2f      	ldr	r2, [pc, #188]	; (80074f4 <I2C_DMAError+0x1f0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d04d      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a2d      	ldr	r2, [pc, #180]	; (80074f8 <I2C_DMAError+0x1f4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d047      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a2b      	ldr	r2, [pc, #172]	; (80074fc <I2C_DMAError+0x1f8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d041      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a29      	ldr	r2, [pc, #164]	; (8007500 <I2C_DMAError+0x1fc>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d03b      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a27      	ldr	r2, [pc, #156]	; (8007504 <I2C_DMAError+0x200>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d035      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a25      	ldr	r2, [pc, #148]	; (8007508 <I2C_DMAError+0x204>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d02f      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a23      	ldr	r2, [pc, #140]	; (800750c <I2C_DMAError+0x208>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d029      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a21      	ldr	r2, [pc, #132]	; (8007510 <I2C_DMAError+0x20c>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d023      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1f      	ldr	r2, [pc, #124]	; (8007514 <I2C_DMAError+0x210>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d01d      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a1d      	ldr	r2, [pc, #116]	; (8007518 <I2C_DMAError+0x214>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d017      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a1b      	ldr	r2, [pc, #108]	; (800751c <I2C_DMAError+0x218>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d011      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a19      	ldr	r2, [pc, #100]	; (8007520 <I2C_DMAError+0x21c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a17      	ldr	r2, [pc, #92]	; (8007524 <I2C_DMAError+0x220>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d005      	beq.n	80074d6 <I2C_DMAError+0x1d2>
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a15      	ldr	r2, [pc, #84]	; (8007528 <I2C_DMAError+0x224>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d12a      	bne.n	800752c <I2C_DMAError+0x228>
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bf0c      	ite	eq
 80074e2:	2301      	moveq	r3, #1
 80074e4:	2300      	movne	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	e029      	b.n	800753e <I2C_DMAError+0x23a>
 80074ea:	bf00      	nop
 80074ec:	40020010 	.word	0x40020010
 80074f0:	40020028 	.word	0x40020028
 80074f4:	40020040 	.word	0x40020040
 80074f8:	40020058 	.word	0x40020058
 80074fc:	40020070 	.word	0x40020070
 8007500:	40020088 	.word	0x40020088
 8007504:	400200a0 	.word	0x400200a0
 8007508:	400200b8 	.word	0x400200b8
 800750c:	40020410 	.word	0x40020410
 8007510:	40020428 	.word	0x40020428
 8007514:	40020440 	.word	0x40020440
 8007518:	40020458 	.word	0x40020458
 800751c:	40020470 	.word	0x40020470
 8007520:	40020488 	.word	0x40020488
 8007524:	400204a0 	.word	0x400204a0
 8007528:	400204b8 	.word	0x400204b8
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	2b00      	cmp	r3, #0
 8007536:	bf0c      	ite	eq
 8007538:	2301      	moveq	r3, #1
 800753a:	2300      	movne	r3, #0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 8007542:	2301      	movs	r3, #1
 8007544:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fd fd38 	bl	8004fbc <HAL_DMA_GetError>
 800754c:	4603      	mov	r3, r0
 800754e:	2b02      	cmp	r3, #2
 8007550:	d00e      	beq.n	8007570 <I2C_DMAError+0x26c>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007566:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007568:	2110      	movs	r1, #16
 800756a:	68b8      	ldr	r0, [r7, #8]
 800756c:	f7ff fd44 	bl	8006ff8 <I2C_ITError>
  }
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007584:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	2b00      	cmp	r3, #0
 800758c:	d003      	beq.n	8007596 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007592:	2200      	movs	r2, #0
 8007594:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a2:	2200      	movs	r2, #0
 80075a4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f7ff fe16 	bl	80071d8 <I2C_TreatErrorCallback>
}
 80075ac:	bf00      	nop
 80075ae:	3710      	adds	r7, #16
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	603b      	str	r3, [r7, #0]
 80075c0:	4613      	mov	r3, r2
 80075c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075c4:	e031      	b.n	800762a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d02d      	beq.n	800762a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ce:	f7fb fa63 	bl	8002a98 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d302      	bcc.n	80075e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d122      	bne.n	800762a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	699a      	ldr	r2, [r3, #24]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	4013      	ands	r3, r2
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	bf0c      	ite	eq
 80075f4:	2301      	moveq	r3, #1
 80075f6:	2300      	movne	r3, #0
 80075f8:	b2db      	uxtb	r3, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	79fb      	ldrb	r3, [r7, #7]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d113      	bne.n	800762a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007606:	f043 0220 	orr.w	r2, r3, #32
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2220      	movs	r2, #32
 8007612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	e00f      	b.n	800764a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	4013      	ands	r3, r2
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	429a      	cmp	r2, r3
 8007638:	bf0c      	ite	eq
 800763a:	2301      	moveq	r3, #1
 800763c:	2300      	movne	r3, #0
 800763e:	b2db      	uxtb	r3, r3
 8007640:	461a      	mov	r2, r3
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	429a      	cmp	r2, r3
 8007646:	d0be      	beq.n	80075c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
	...

08007654 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007654:	b480      	push	{r7}
 8007656:	b087      	sub	sp, #28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	460b      	mov	r3, r1
 8007660:	817b      	strh	r3, [r7, #10]
 8007662:	4613      	mov	r3, r2
 8007664:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007666:	897b      	ldrh	r3, [r7, #10]
 8007668:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800766c:	7a7b      	ldrb	r3, [r7, #9]
 800766e:	041b      	lsls	r3, r3, #16
 8007670:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007674:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	4313      	orrs	r3, r2
 800767e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007682:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	0d5b      	lsrs	r3, r3, #21
 800768e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007692:	4b08      	ldr	r3, [pc, #32]	; (80076b4 <I2C_TransferConfig+0x60>)
 8007694:	430b      	orrs	r3, r1
 8007696:	43db      	mvns	r3, r3
 8007698:	ea02 0103 	and.w	r1, r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	430a      	orrs	r2, r1
 80076a4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	03ff63ff 	.word	0x03ff63ff

080076b8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b085      	sub	sp, #20
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076cc:	4a2d      	ldr	r2, [pc, #180]	; (8007784 <I2C_Enable_IRQ+0xcc>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d004      	beq.n	80076dc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80076d6:	4a2c      	ldr	r2, [pc, #176]	; (8007788 <I2C_Enable_IRQ+0xd0>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d11d      	bne.n	8007718 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	da03      	bge.n	80076ec <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80076ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076ec:	887b      	ldrh	r3, [r7, #2]
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d103      	bne.n	80076fa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80076f8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076fa:	887b      	ldrh	r3, [r7, #2]
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d103      	bne.n	8007708 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007706:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007708:	887b      	ldrh	r3, [r7, #2]
 800770a:	2b40      	cmp	r3, #64	; 0x40
 800770c:	d12c      	bne.n	8007768 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007714:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007716:	e027      	b.n	8007768 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800771c:	2b00      	cmp	r3, #0
 800771e:	da03      	bge.n	8007728 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8007726:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007728:	887b      	ldrh	r3, [r7, #2]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8007738:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800773a:	887b      	ldrh	r3, [r7, #2]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d003      	beq.n	800774c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800774a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800774c:	887b      	ldrh	r3, [r7, #2]
 800774e:	2b10      	cmp	r3, #16
 8007750:	d103      	bne.n	800775a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007758:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800775a:	887b      	ldrh	r3, [r7, #2]
 800775c:	2b20      	cmp	r3, #32
 800775e:	d103      	bne.n	8007768 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f043 0320 	orr.w	r3, r3, #32
 8007766:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6819      	ldr	r1, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	430a      	orrs	r2, r1
 8007776:	601a      	str	r2, [r3, #0]
}
 8007778:	bf00      	nop
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	08006211 	.word	0x08006211
 8007788:	080063e9 	.word	0x080063e9

0800778c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800779c:	887b      	ldrh	r3, [r7, #2]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00f      	beq.n	80077c6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80077ac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077ba:	2b28      	cmp	r3, #40	; 0x28
 80077bc:	d003      	beq.n	80077c6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80077c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80077c6:	887b      	ldrh	r3, [r7, #2]
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00f      	beq.n	80077f0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80077d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80077e4:	2b28      	cmp	r3, #40	; 0x28
 80077e6:	d003      	beq.n	80077f0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80077ee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80077f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da03      	bge.n	8007800 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80077fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007800:	887b      	ldrh	r3, [r7, #2]
 8007802:	2b10      	cmp	r3, #16
 8007804:	d103      	bne.n	800780e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800780c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800780e:	887b      	ldrh	r3, [r7, #2]
 8007810:	2b20      	cmp	r3, #32
 8007812:	d103      	bne.n	800781c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f043 0320 	orr.w	r3, r3, #32
 800781a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800781c:	887b      	ldrh	r3, [r7, #2]
 800781e:	2b40      	cmp	r3, #64	; 0x40
 8007820:	d103      	bne.n	800782a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007828:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	6819      	ldr	r1, [r3, #0]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	43da      	mvns	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	400a      	ands	r2, r1
 800783a:	601a      	str	r2, [r3, #0]
}
 800783c:	bf00      	nop
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007858:	b2db      	uxtb	r3, r3
 800785a:	2b20      	cmp	r3, #32
 800785c:	d138      	bne.n	80078d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007864:	2b01      	cmp	r3, #1
 8007866:	d101      	bne.n	800786c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007868:	2302      	movs	r3, #2
 800786a:	e032      	b.n	80078d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2224      	movs	r2, #36	; 0x24
 8007878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f022 0201 	bic.w	r2, r2, #1
 800788a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800789a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6819      	ldr	r1, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	683a      	ldr	r2, [r7, #0]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2220      	movs	r2, #32
 80078c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e000      	b.n	80078d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078d0:	2302      	movs	r3, #2
  }
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80078de:	b480      	push	{r7}
 80078e0:	b085      	sub	sp, #20
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b20      	cmp	r3, #32
 80078f2:	d139      	bne.n	8007968 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d101      	bne.n	8007902 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80078fe:	2302      	movs	r3, #2
 8007900:	e033      	b.n	800796a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2224      	movs	r2, #36	; 0x24
 800790e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f022 0201 	bic.w	r2, r2, #1
 8007920:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007930:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	4313      	orrs	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0201 	orr.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007964:	2300      	movs	r3, #0
 8007966:	e000      	b.n	800796a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007968:	2302      	movs	r3, #2
  }
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr

08007976 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e031      	b.n	80079ec <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d105      	bne.n	80079a0 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7fa f9aa 	bl	8001cf4 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2203      	movs	r2, #3
 80079a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f823 	bl	80079f4 <HAL_MMC_InitCard>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	e019      	b.n	80079ec <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00a      	beq.n	80079ea <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fb46 	bl	800806c <HAL_MMC_ConfigWideBusOperation>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e000      	b.n	80079ec <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 80079ea:	2300      	movs	r3, #0
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b08d      	sub	sp, #52	; 0x34
 80079f8:	af02      	add	r7, sp, #8
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007a0c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007a10:	f04f 0100 	mov.w	r1, #0
 8007a14:	f004 fae2 	bl	800bfdc <HAL_RCCEx_GetPeriphCLKFreq>
 8007a18:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d109      	bne.n	8007a34 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007a2e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	e070      	b.n	8007b16 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a36:	0a1b      	lsrs	r3, r3, #8
 8007a38:	4a39      	ldr	r2, [pc, #228]	; (8007b20 <HAL_MMC_InitCard+0x12c>)
 8007a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3e:	091b      	lsrs	r3, r3, #4
 8007a40:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681c      	ldr	r4, [r3, #0]
 8007a46:	466a      	mov	r2, sp
 8007a48:	f107 0318 	add.w	r3, r7, #24
 8007a4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a50:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a54:	f107 030c 	add.w	r3, r7, #12
 8007a58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	f007 f8c2 	bl	800ebe4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f007 f8f4 	bl	800ec52 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d007      	beq.n	8007a92 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8007a82:	4a28      	ldr	r2, [pc, #160]	; (8007b24 <HAL_MMC_InitCard+0x130>)
 8007a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fb f80f 	bl	8002ab0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fcb4 	bl	8008400 <MMC_PowerON>
 8007a98:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00b      	beq.n	8007ab8 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	431a      	orrs	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e02e      	b.n	8007b16 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fba3 	bl	8008204 <MMC_InitCard>
 8007abe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e01b      	b.n	8007b16 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f007 f948 	bl	800ed7c <SDMMC_CmdBlockLength>
 8007aec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00f      	beq.n	8007b14 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a0b      	ldr	r2, [pc, #44]	; (8007b28 <HAL_MMC_InitCard+0x134>)
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e000      	b.n	8007b16 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	372c      	adds	r7, #44	; 0x2c
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd90      	pop	{r4, r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	014f8b59 	.word	0x014f8b59
 8007b24:	00012110 	.word	0x00012110
 8007b28:	1fe00fff 	.word	0x1fe00fff

08007b2c <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3e:	0f9b      	lsrs	r3, r3, #30
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4a:	0e9b      	lsrs	r3, r3, #26
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	f003 030f 	and.w	r3, r3, #15
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b5c:	0e1b      	lsrs	r3, r3, #24
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	f003 0303 	and.w	r3, r3, #3
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6e:	0c1b      	lsrs	r3, r3, #16
 8007b70:	b2da      	uxtb	r2, r3
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b7a:	0a1b      	lsrs	r3, r3, #8
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b90:	0d1b      	lsrs	r3, r3, #20
 8007b92:	b29a      	uxth	r2, r3
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b9c:	0c1b      	lsrs	r3, r3, #16
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bae:	0bdb      	lsrs	r3, r3, #15
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bc0:	0b9b      	lsrs	r3, r3, #14
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd2:	0b5b      	lsrs	r3, r3, #13
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be4:	0b1b      	lsrs	r3, r3, #12
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	b2da      	uxtb	r2, r3
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8007bf8:	f107 010c 	add.w	r1, r7, #12
 8007bfc:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8007c00:	22d4      	movs	r2, #212	; 0xd4
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fc4c 	bl	80084a0 <MMC_ReadExtCSD>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e129      	b.n	8007e66 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d163      	bne.n	8007ce2 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c1e:	009a      	lsls	r2, r3, #2
 8007c20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007c24:	4013      	ands	r3, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c2a:	0f92      	lsrs	r2, r2, #30
 8007c2c:	431a      	orrs	r2, r3
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c36:	0edb      	lsrs	r3, r3, #27
 8007c38:	b2db      	uxtb	r3, r3
 8007c3a:	f003 0307 	and.w	r3, r3, #7
 8007c3e:	b2da      	uxtb	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c48:	0e1b      	lsrs	r3, r3, #24
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 0307 	and.w	r3, r3, #7
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c5a:	0d5b      	lsrs	r3, r3, #21
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f003 0307 	and.w	r3, r3, #7
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6c:	0c9b      	lsrs	r3, r3, #18
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	f003 0307 	and.w	r3, r3, #7
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c7e:	0bdb      	lsrs	r3, r3, #15
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	7e1b      	ldrb	r3, [r3, #24]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	3302      	adds	r3, #2
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007cac:	fb03 f202 	mul.w	r2, r3, r2
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	7a1b      	ldrb	r3, [r3, #8]
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	f003 030f 	and.w	r3, r3, #15
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	409a      	lsls	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	649a      	str	r2, [r3, #72]	; 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007cce:	0a52      	lsrs	r2, r2, #9
 8007cd0:	fb03 f202 	mul.w	r2, r3, r2
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cde:	651a      	str	r2, [r3, #80]	; 0x50
 8007ce0:	e023      	b.n	8007d2a <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d10f      	bne.n	8007d0a <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8007cea:	68fa      	ldr	r2, [r7, #12]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cfe:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	651a      	str	r2, [r3, #80]	; 0x50
 8007d08:	e00f      	b.n	8007d2a <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a58      	ldr	r2, [pc, #352]	; (8007e70 <HAL_MMC_GetCardCSD+0x344>)
 8007d10:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d16:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e09d      	b.n	8007e66 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2e:	0b9b      	lsrs	r3, r3, #14
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d40:	09db      	lsrs	r3, r3, #7
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d58:	b2da      	uxtb	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d62:	0fdb      	lsrs	r3, r3, #31
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d6e:	0f5b      	lsrs	r3, r3, #29
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	f003 0303 	and.w	r3, r3, #3
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d80:	0e9b      	lsrs	r3, r3, #26
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	f003 0307 	and.w	r3, r3, #7
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d92:	0d9b      	lsrs	r3, r3, #22
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	f003 030f 	and.w	r3, r3, #15
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007da4:	0d5b      	lsrs	r3, r3, #21
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	b2da      	uxtb	r2, r3
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2200      	movs	r2, #0
 8007db8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc0:	0c1b      	lsrs	r3, r3, #16
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 0301 	and.w	r3, r3, #1
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd4:	0bdb      	lsrs	r3, r3, #15
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	f003 0301 	and.w	r3, r3, #1
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de8:	0b9b      	lsrs	r3, r3, #14
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfc:	0b5b      	lsrs	r3, r3, #13
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	b2da      	uxtb	r2, r3
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e10:	0b1b      	lsrs	r3, r3, #12
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e24:	0a9b      	lsrs	r3, r3, #10
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	f003 0303 	and.w	r3, r3, #3
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e38:	0a1b      	lsrs	r3, r3, #8
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e4c:	085b      	lsrs	r3, r3, #1
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	1fe00fff 	.word	0x1fe00fff

08007e74 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b08e      	sub	sp, #56	; 0x38
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007e80:	f7fa fe0a 	bl	8002a98 <HAL_GetTick>
 8007e84:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d107      	bne.n	8007e9c <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e90:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e0de      	b.n	800805a <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	f040 80d7 	bne.w	8008058 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2200      	movs	r2, #0
 8007eae:	635a      	str	r2, [r3, #52]	; 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec8:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 8007eca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ece:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007ed0:	2390      	movs	r3, #144	; 0x90
 8007ed2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8007edc:	2300      	movs	r3, #0
 8007ede:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f107 0210 	add.w	r2, r7, #16
 8007ee8:	4611      	mov	r1, r2
 8007eea:	4618      	mov	r0, r3
 8007eec:	f006 ff1a 	bl	800ed24 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007efe:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f007 f866 	bl	800efd8 <SDMMC_CmdSendEXTCSD>
 8007f0c:	62b8      	str	r0, [r7, #40]	; 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8007f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d045      	beq.n	8007fa0 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a52      	ldr	r2, [pc, #328]	; (8008064 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f22:	431a      	orrs	r2, r3
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f30:	2301      	movs	r3, #1
 8007f32:	e092      	b.n	800805a <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d013      	beq.n	8007f6a <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8007f42:	2300      	movs	r3, #0
 8007f44:	637b      	str	r3, [r7, #52]	; 0x34
 8007f46:	e00d      	b.n	8007f64 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f006 fe73 	bl	800ec38 <SDMMC_ReadFIFO>
 8007f52:	4602      	mov	r2, r0
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8007f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f5a:	3304      	adds	r3, #4
 8007f5c:	633b      	str	r3, [r7, #48]	; 0x30
        for (count = 0U; count < 8U; count++)
 8007f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f60:	3301      	adds	r3, #1
 8007f62:	637b      	str	r3, [r7, #52]	; 0x34
 8007f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f66:	2b07      	cmp	r3, #7
 8007f68:	d9ee      	bls.n	8007f48 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8007f6a:	f7fa fd95 	bl	8002a98 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d902      	bls.n	8007f80 <HAL_MMC_GetCardExtCSD+0x10c>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10f      	bne.n	8007fa0 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a37      	ldr	r2, [pc, #220]	; (8008064 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	635a      	str	r2, [r3, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e05c      	b.n	800805a <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0c2      	beq.n	8007f34 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fbc:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc4:	f003 0308 	and.w	r3, r3, #8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00f      	beq.n	8007fec <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a24      	ldr	r2, [pc, #144]	; (8008064 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8007fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd8:	f043 0208 	orr.w	r2, r3, #8
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e036      	b.n	800805a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d00f      	beq.n	800801a <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a19      	ldr	r2, [pc, #100]	; (8008064 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8008000:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008006:	f043 0202 	orr.w	r2, r3, #2
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e01f      	b.n	800805a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008020:	f003 0320 	and.w	r3, r3, #32
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00f      	beq.n	8008048 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a0d      	ldr	r2, [pc, #52]	; (8008064 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800802e:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008034:	f043 0220 	orr.w	r2, r3, #32
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e008      	b.n	800805a <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a06      	ldr	r2, [pc, #24]	; (8008068 <HAL_MMC_GetCardExtCSD+0x1f4>)
 800804e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3738      	adds	r7, #56	; 0x38
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	1fe00fff 	.word	0x1fe00fff
 8008068:	18000f3a 	.word	0x18000f3a

0800806c <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 800806c:	b5b0      	push	{r4, r5, r7, lr}
 800806e:	b08c      	sub	sp, #48	; 0x30
 8008070:	af02      	add	r7, sp, #8
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2203      	movs	r2, #3
 800807e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d014      	beq.n	80080ba <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d006      	beq.n	80080ac <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 800809e:	2204      	movs	r2, #4
 80080a0:	6839      	ldr	r1, [r7, #0]
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 faf0 	bl	8008688 <MMC_PwrClassUpdate>
 80080a8:	6238      	str	r0, [r7, #32]
 80080aa:	e00c      	b.n	80080c6 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 80080ac:	2202      	movs	r2, #2
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fae9 	bl	8008688 <MMC_PwrClassUpdate>
 80080b6:	6238      	str	r0, [r7, #32]
 80080b8:	e005      	b.n	80080c6 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 80080ba:	2201      	movs	r2, #1
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f000 fae2 	bl	8008688 <MMC_PwrClassUpdate>
 80080c4:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d17b      	bne.n	80081c4 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d2:	d107      	bne.n	80080e4 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4946      	ldr	r1, [pc, #280]	; (80081f4 <HAL_MMC_ConfigWideBusOperation+0x188>)
 80080da:	4618      	mov	r0, r3
 80080dc:	f006 ff59 	bl	800ef92 <SDMMC_CmdSwitch>
 80080e0:	6238      	str	r0, [r7, #32]
 80080e2:	e019      	b.n	8008118 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ea:	d107      	bne.n	80080fc <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4941      	ldr	r1, [pc, #260]	; (80081f8 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 80080f2:	4618      	mov	r0, r3
 80080f4:	f006 ff4d 	bl	800ef92 <SDMMC_CmdSwitch>
 80080f8:	6238      	str	r0, [r7, #32]
 80080fa:	e00d      	b.n	8008118 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d107      	bne.n	8008112 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	493d      	ldr	r1, [pc, #244]	; (80081fc <HAL_MMC_ConfigWideBusOperation+0x190>)
 8008108:	4618      	mov	r0, r3
 800810a:	f006 ff42 	bl	800ef92 <SDMMC_CmdSwitch>
 800810e:	6238      	str	r0, [r7, #32]
 8008110:	e002      	b.n	8008118 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8008112:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008116:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d152      	bne.n	80081c4 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 800811e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008122:	627b      	str	r3, [r7, #36]	; 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812c:	041b      	lsls	r3, r3, #16
 800812e:	4619      	mov	r1, r3
 8008130:	4610      	mov	r0, r2
 8008132:	f006 feeb 	bl	800ef0c <SDMMC_CmdSendStatus>
 8008136:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8008138:	6a3b      	ldr	r3, [r7, #32]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d112      	bne.n	8008164 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2100      	movs	r1, #0
 8008144:	4618      	mov	r0, r3
 8008146:	f006 fdda 	bl	800ecfe <SDMMC_GetResponse>
 800814a:	61f8      	str	r0, [r7, #28]
        count--;
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	3b01      	subs	r3, #1
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008158:	2b00      	cmp	r3, #0
 800815a:	d104      	bne.n	8008166 <HAL_MMC_ConfigWideBusOperation+0xfa>
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1e0      	bne.n	8008124 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8008162:	e000      	b.n	8008166 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8008164:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	2b00      	cmp	r3, #0
 800816a:	d025      	beq.n	80081b8 <HAL_MMC_ConfigWideBusOperation+0x14c>
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d122      	bne.n	80081b8 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800817c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008180:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8008182:	e01f      	b.n	80081c4 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f107 0408 	add.w	r4, r7, #8
 800818a:	1d1d      	adds	r5, r3, #4
 800818c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800818e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681c      	ldr	r4, [r3, #0]
 800819c:	466a      	mov	r2, sp
 800819e:	f107 0314 	add.w	r3, r7, #20
 80081a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80081a6:	e882 0003 	stmia.w	r2, {r0, r1}
 80081aa:	f107 0308 	add.w	r3, r7, #8
 80081ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081b0:	4620      	mov	r0, r4
 80081b2:	f006 fd17 	bl	800ebe4 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 80081b6:	e005      	b.n	80081c4 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d102      	bne.n	80081c4 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 80081be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081c2:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d00b      	beq.n	80081ea <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a0a      	ldr	r2, [pc, #40]	; (8008200 <HAL_MMC_ConfigWideBusOperation+0x194>)
 80081d8:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	431a      	orrs	r2, r3
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e000      	b.n	80081ec <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3728      	adds	r7, #40	; 0x28
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bdb0      	pop	{r4, r5, r7, pc}
 80081f4:	03b70200 	.word	0x03b70200
 80081f8:	03b70100 	.word	0x03b70100
 80081fc:	03b70000 	.word	0x03b70000
 8008200:	1fe00fff 	.word	0x1fe00fff

08008204 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8008204:	b5b0      	push	{r4, r5, r7, lr}
 8008206:	b096      	sub	sp, #88	; 0x58
 8008208:	af02      	add	r7, sp, #8
 800820a:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 800820c:	2302      	movs	r3, #2
 800820e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f006 fd2c 	bl	800ec74 <SDMMC_GetPowerState>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d102      	bne.n	8008228 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8008222:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008226:	e0e6      	b.n	80083f6 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4618      	mov	r0, r3
 800822e:	f006 fe09 	bl	800ee44 <SDMMC_CmdSendCID>
 8008232:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <MMC_InitCard+0x3a>
  {
    return errorstate;
 800823a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800823c:	e0db      	b.n	80083f6 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2100      	movs	r1, #0
 8008244:	4618      	mov	r0, r3
 8008246:	f006 fd5a 	bl	800ecfe <SDMMC_GetResponse>
 800824a:	4602      	mov	r2, r0
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	2104      	movs	r1, #4
 8008256:	4618      	mov	r0, r3
 8008258:	f006 fd51 	bl	800ecfe <SDMMC_GetResponse>
 800825c:	4602      	mov	r2, r0
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2108      	movs	r1, #8
 8008268:	4618      	mov	r0, r3
 800826a:	f006 fd48 	bl	800ecfe <SDMMC_GetResponse>
 800826e:	4602      	mov	r2, r0
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	210c      	movs	r1, #12
 800827a:	4618      	mov	r0, r3
 800827c:	f006 fd3f 	bl	800ecfe <SDMMC_GetResponse>
 8008280:	4602      	mov	r2, r0
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800828e:	4611      	mov	r1, r2
 8008290:	4618      	mov	r0, r3
 8008292:	f006 fe16 	bl	800eec2 <SDMMC_CmdSetRelAddMmc>
 8008296:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <MMC_InitCard+0x9e>
  {
    return errorstate;
 800829e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082a0:	e0a9      	b.n	80083f6 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 80082a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	041b      	lsls	r3, r3, #16
 80082b4:	4619      	mov	r1, r3
 80082b6:	4610      	mov	r0, r2
 80082b8:	f006 fde3 	bl	800ee82 <SDMMC_CmdSendCSD>
 80082bc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80082be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <MMC_InitCard+0xc4>
  {
    return errorstate;
 80082c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c6:	e096      	b.n	80083f6 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2100      	movs	r1, #0
 80082ce:	4618      	mov	r0, r3
 80082d0:	f006 fd15 	bl	800ecfe <SDMMC_GetResponse>
 80082d4:	4602      	mov	r2, r0
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2104      	movs	r1, #4
 80082e0:	4618      	mov	r0, r3
 80082e2:	f006 fd0c 	bl	800ecfe <SDMMC_GetResponse>
 80082e6:	4602      	mov	r2, r0
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	2108      	movs	r1, #8
 80082f2:	4618      	mov	r0, r3
 80082f4:	f006 fd03 	bl	800ecfe <SDMMC_GetResponse>
 80082f8:	4602      	mov	r2, r0
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	210c      	movs	r1, #12
 8008304:	4618      	mov	r0, r3
 8008306:	f006 fcfa 	bl	800ecfe <SDMMC_GetResponse>
 800830a:	4602      	mov	r2, r0
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	2104      	movs	r1, #4
 8008316:	4618      	mov	r0, r3
 8008318:	f006 fcf1 	bl	800ecfe <SDMMC_GetResponse>
 800831c:	4603      	mov	r3, r0
 800831e:	0d1a      	lsrs	r2, r3, #20
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832c:	041b      	lsls	r3, r3, #16
 800832e:	4619      	mov	r1, r3
 8008330:	4610      	mov	r0, r2
 8008332:	f006 fd46 	bl	800edc2 <SDMMC_CmdSelDesel>
 8008336:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800833a:	2b00      	cmp	r3, #0
 800833c:	d001      	beq.n	8008342 <MMC_InitCard+0x13e>
  {
    return errorstate;
 800833e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008340:	e059      	b.n	80083f6 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8008342:	f107 031c 	add.w	r3, r7, #28
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff fbef 	bl	8007b2c <HAL_MMC_GetCardCSD>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008358:	e04d      	b.n	80083f6 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008362:	041b      	lsls	r3, r3, #16
 8008364:	4619      	mov	r1, r3
 8008366:	4610      	mov	r0, r2
 8008368:	f006 fdd0 	bl	800ef0c <SDMMC_CmdSendStatus>
 800836c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 800836e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008370:	2b00      	cmp	r3, #0
 8008372:	d005      	beq.n	8008380 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800837a:	431a      	orrs	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	635a      	str	r2, [r3, #52]	; 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3374      	adds	r3, #116	; 0x74
 8008384:	f04f 32ff 	mov.w	r2, #4294967295
 8008388:	4619      	mov	r1, r3
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7ff fd72 	bl	8007e74 <HAL_MMC_GetCardExtCSD>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d002      	beq.n	800839c <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839a:	e02c      	b.n	80083f6 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083a4:	041b      	lsls	r3, r3, #16
 80083a6:	4619      	mov	r1, r3
 80083a8:	4610      	mov	r0, r2
 80083aa:	f006 fdaf 	bl	800ef0c <SDMMC_CmdSendStatus>
 80083ae:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80083b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083bc:	431a      	orrs	r2, r3
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f107 0408 	add.w	r4, r7, #8
 80083c8:	1d1d      	adds	r5, r3, #4
 80083ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083ce:	682b      	ldr	r3, [r5, #0]
 80083d0:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 80083d2:	2300      	movs	r3, #0
 80083d4:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681c      	ldr	r4, [r3, #0]
 80083da:	466a      	mov	r2, sp
 80083dc:	f107 0314 	add.w	r3, r7, #20
 80083e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80083e4:	e882 0003 	stmia.w	r2, {r0, r1}
 80083e8:	f107 0308 	add.w	r3, r7, #8
 80083ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083ee:	4620      	mov	r0, r4
 80083f0:	f006 fbf8 	bl	800ebe4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3750      	adds	r7, #80	; 0x50
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008400 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800840c:	2300      	movs	r3, #0
 800840e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008410:	2300      	movs	r3, #0
 8008412:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4618      	mov	r0, r3
 800841a:	f006 fcf5 	bl	800ee08 <SDMMC_CmdGoIdleState>
 800841e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d027      	beq.n	8008476 <MMC_PowerON+0x76>
  {
    return errorstate;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	e034      	b.n	8008494 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	1c5a      	adds	r2, r3, #1
 800842e:	60ba      	str	r2, [r7, #8]
 8008430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008434:	4293      	cmp	r3, r2
 8008436:	d102      	bne.n	800843e <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8008438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800843c:	e02a      	b.n	8008494 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4916      	ldr	r1, [pc, #88]	; (800849c <MMC_PowerON+0x9c>)
 8008444:	4618      	mov	r0, r3
 8008446:	f006 fd84 	bl	800ef52 <SDMMC_CmdOpCondition>
 800844a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8008452:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008456:	e01d      	b.n	8008494 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f006 fc4d 	bl	800ecfe <SDMMC_GetResponse>
 8008464:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	0fdb      	lsrs	r3, r3, #31
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <MMC_PowerON+0x72>
 800846e:	2301      	movs	r3, #1
 8008470:	e000      	b.n	8008474 <MMC_PowerON+0x74>
 8008472:	2300      	movs	r3, #0
 8008474:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d0d6      	beq.n	800842a <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	0e1b      	lsrs	r3, r3, #24
 8008480:	2bc0      	cmp	r3, #192	; 0xc0
 8008482:	d103      	bne.n	800848c <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	639a      	str	r2, [r3, #56]	; 0x38
 800848a:	e002      	b.n	8008492 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_MMC_ERROR_NONE;
 8008492:	2300      	movs	r3, #0
}
 8008494:	4618      	mov	r0, r3
 8008496:	3718      	adds	r7, #24
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	c0ff8000 	.word	0xc0ff8000

080084a0 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b090      	sub	sp, #64	; 0x40
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	4613      	mov	r3, r2
 80084ae:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80084b0:	f7fa faf2 	bl	8002a98 <HAL_GetTick>
 80084b4:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2200      	movs	r2, #0
 80084c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084c8:	f04f 33ff 	mov.w	r3, #4294967295
 80084cc:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 80084ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084d2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80084d4:	2390      	movs	r3, #144	; 0x90
 80084d6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084d8:	2302      	movs	r3, #2
 80084da:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084dc:	2300      	movs	r3, #0
 80084de:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80084e0:	2301      	movs	r3, #1
 80084e2:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f107 0214 	add.w	r2, r7, #20
 80084ec:	4611      	mov	r1, r2
 80084ee:	4618      	mov	r0, r3
 80084f0:	f006 fc18 	bl	800ed24 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2100      	movs	r1, #0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f006 fd6c 	bl	800efd8 <SDMMC_CmdSendEXTCSD>
 8008500:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	2b00      	cmp	r3, #0
 8008506:	d04e      	beq.n	80085a6 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a5c      	ldr	r2, [pc, #368]	; (8008680 <MMC_ReadExtCSD+0x1e0>)
 800850e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	431a      	orrs	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e0a6      	b.n	8008676 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d01c      	beq.n	8008570 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 8008536:	2300      	movs	r3, #0
 8008538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800853a:	e013      	b.n	8008564 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4618      	mov	r0, r3
 8008542:	f006 fb79 	bl	800ec38 <SDMMC_ReadFIFO>
 8008546:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8008548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854c:	4413      	add	r3, r2
 800854e:	88fa      	ldrh	r2, [r7, #6]
 8008550:	0892      	lsrs	r2, r2, #2
 8008552:	b292      	uxth	r2, r2
 8008554:	4293      	cmp	r3, r2
 8008556:	d102      	bne.n	800855e <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800855c:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 800855e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008560:	3301      	adds	r3, #1
 8008562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008566:	2b07      	cmp	r3, #7
 8008568:	d9e8      	bls.n	800853c <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 800856a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800856c:	3308      	adds	r3, #8
 800856e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8008570:	f7fa fa92 	bl	8002a98 <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d902      	bls.n	8008586 <MMC_ReadExtCSD+0xe6>
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d10f      	bne.n	80085a6 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a3d      	ldr	r2, [pc, #244]	; (8008680 <MMC_ReadExtCSD+0x1e0>)
 800858c:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008592:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e067      	b.n	8008676 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ac:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d0b9      	beq.n	8008528 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ba:	f003 0308 	and.w	r3, r3, #8
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00f      	beq.n	80085e2 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a2e      	ldr	r2, [pc, #184]	; (8008680 <MMC_ReadExtCSD+0x1e0>)
 80085c8:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ce:	f043 0208 	orr.w	r2, r3, #8
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e049      	b.n	8008676 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e8:	f003 0302 	and.w	r3, r3, #2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00f      	beq.n	8008610 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a22      	ldr	r2, [pc, #136]	; (8008680 <MMC_ReadExtCSD+0x1e0>)
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fc:	f043 0202 	orr.w	r2, r3, #2
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2201      	movs	r2, #1
 8008608:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e032      	b.n	8008676 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008616:	f003 0320 	and.w	r3, r3, #32
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00f      	beq.n	800863e <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a17      	ldr	r2, [pc, #92]	; (8008680 <MMC_ReadExtCSD+0x1e0>)
 8008624:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862a:	f043 0220 	orr.w	r2, r3, #32
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e01b      	b.n	8008676 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008646:	041b      	lsls	r3, r3, #16
 8008648:	4619      	mov	r1, r3
 800864a:	4610      	mov	r0, r2
 800864c:	f006 fc5e 	bl	800ef0c <SDMMC_CmdSendStatus>
 8008650:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	2b00      	cmp	r3, #0
 8008656:	d005      	beq.n	8008664 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800865c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865e:	431a      	orrs	r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a06      	ldr	r2, [pc, #24]	; (8008684 <MMC_ReadExtCSD+0x1e4>)
 800866a:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3740      	adds	r7, #64	; 0x40
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	1fe00fff 	.word	0x1fe00fff
 8008684:	18000f3a 	.word	0x18000f3a

08008688 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b08a      	sub	sp, #40	; 0x28
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8008694:	2300      	movs	r3, #0
 8008696:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8008698:	2300      	movs	r3, #0
 800869a:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086a2:	d004      	beq.n	80086ae <MMC_PwrClassUpdate+0x26>
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086aa:	f040 8085 	bne.w	80087b8 <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 80086ae:	2300      	movs	r3, #0
 80086b0:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 80086b2:	f107 0114 	add.w	r1, r7, #20
 80086b6:	f04f 33ff 	mov.w	r3, #4294967295
 80086ba:	22bb      	movs	r2, #187	; 0xbb
 80086bc:	68f8      	ldr	r0, [r7, #12]
 80086be:	f7ff feef 	bl	80084a0 <MMC_ReadExtCSD>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d003      	beq.n	80086d0 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80086c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086cc:	61fb      	str	r3, [r7, #28]
 80086ce:	e002      	b.n	80086d6 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	0e1b      	lsrs	r3, r3, #24
 80086d4:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b04      	cmp	r3, #4
 80086da:	d105      	bne.n	80086e8 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80086e2:	0e1b      	lsrs	r3, r3, #24
 80086e4:	61bb      	str	r3, [r7, #24]
 80086e6:	e00e      	b.n	8008706 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d106      	bne.n	80086fc <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80086f4:	0c1b      	lsrs	r3, r3, #16
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	61bb      	str	r3, [r7, #24]
 80086fa:	e004      	b.n	8008706 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8008702:	0e1b      	lsrs	r3, r3, #24
 8008704:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d155      	bne.n	80087b8 <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008712:	d102      	bne.n	800871a <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	091b      	lsrs	r3, r3, #4
 8008718:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	4053      	eors	r3, r2
 8008720:	f003 030f 	and.w	r3, r3, #15
 8008724:	2b00      	cmp	r3, #0
 8008726:	d047      	beq.n	80087b8 <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6818      	ldr	r0, [r3, #0]
 800872c:	69bb      	ldr	r3, [r7, #24]
 800872e:	021b      	lsls	r3, r3, #8
 8008730:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8008734:	4b23      	ldr	r3, [pc, #140]	; (80087c4 <MMC_PwrClassUpdate+0x13c>)
 8008736:	4313      	orrs	r3, r2
 8008738:	4619      	mov	r1, r3
 800873a:	f006 fc2a 	bl	800ef92 <SDMMC_CmdSwitch>
 800873e:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d138      	bne.n	80087b8 <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8008746:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800874a:	627b      	str	r3, [r7, #36]	; 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008754:	041b      	lsls	r3, r3, #16
 8008756:	4619      	mov	r1, r3
 8008758:	4610      	mov	r0, r2
 800875a:	f006 fbd7 	bl	800ef0c <SDMMC_CmdSendStatus>
 800875e:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d112      	bne.n	800878c <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f006 fac6 	bl	800ecfe <SDMMC_GetResponse>
 8008772:	6238      	str	r0, [r7, #32]
            count--;
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	3b01      	subs	r3, #1
 8008778:	627b      	str	r3, [r7, #36]	; 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 800877a:	6a3b      	ldr	r3, [r7, #32]
 800877c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008780:	2b00      	cmp	r3, #0
 8008782:	d104      	bne.n	800878e <MMC_PwrClassUpdate+0x106>
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	2b00      	cmp	r3, #0
 8008788:	d1e0      	bne.n	800874c <MMC_PwrClassUpdate+0xc4>
 800878a:	e000      	b.n	800878e <MMC_PwrClassUpdate+0x106>
              break;
 800878c:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00b      	beq.n	80087ac <MMC_PwrClassUpdate+0x124>
 8008794:	69fb      	ldr	r3, [r7, #28]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d108      	bne.n	80087ac <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 800879a:	6a3b      	ldr	r3, [r7, #32]
 800879c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d009      	beq.n	80087b8 <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80087a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087a8:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 80087aa:	e005      	b.n	80087b8 <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 80087ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d102      	bne.n	80087b8 <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 80087b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80087b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 80087b8:	69fb      	ldr	r3, [r7, #28]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3728      	adds	r7, #40	; 0x28
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	03bb0000 	.word	0x03bb0000

080087c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80087c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ca:	b08f      	sub	sp, #60	; 0x3c
 80087cc:	af0a      	add	r7, sp, #40	; 0x28
 80087ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d101      	bne.n	80087da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80087d6:	2301      	movs	r3, #1
 80087d8:	e116      	b.n	8008a08 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d106      	bne.n	80087fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f00a fbd1 	bl	8012f9c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2203      	movs	r2, #3
 80087fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880a:	2b00      	cmp	r3, #0
 800880c:	d102      	bne.n	8008814 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4618      	mov	r0, r3
 800881a:	f006 fecc 	bl	800f5b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	687e      	ldr	r6, [r7, #4]
 8008826:	466d      	mov	r5, sp
 8008828:	f106 0410 	add.w	r4, r6, #16
 800882c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800882e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008834:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008838:	e885 0003 	stmia.w	r5, {r0, r1}
 800883c:	1d33      	adds	r3, r6, #4
 800883e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008840:	6838      	ldr	r0, [r7, #0]
 8008842:	f006 fd97 	bl	800f374 <USB_CoreInit>
 8008846:	4603      	mov	r3, r0
 8008848:	2b00      	cmp	r3, #0
 800884a:	d005      	beq.n	8008858 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e0d7      	b.n	8008a08 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2100      	movs	r1, #0
 800885e:	4618      	mov	r0, r3
 8008860:	f006 feba 	bl	800f5d8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008864:	2300      	movs	r3, #0
 8008866:	73fb      	strb	r3, [r7, #15]
 8008868:	e04a      	b.n	8008900 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800886a:	7bfa      	ldrb	r2, [r7, #15]
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	4613      	mov	r3, r2
 8008870:	00db      	lsls	r3, r3, #3
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	333d      	adds	r3, #61	; 0x3d
 800887a:	2201      	movs	r2, #1
 800887c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800887e:	7bfa      	ldrb	r2, [r7, #15]
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	00db      	lsls	r3, r3, #3
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	333c      	adds	r3, #60	; 0x3c
 800888e:	7bfa      	ldrb	r2, [r7, #15]
 8008890:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008892:	7bfa      	ldrb	r2, [r7, #15]
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	b298      	uxth	r0, r3
 8008898:	6879      	ldr	r1, [r7, #4]
 800889a:	4613      	mov	r3, r2
 800889c:	00db      	lsls	r3, r3, #3
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	440b      	add	r3, r1
 80088a4:	3356      	adds	r3, #86	; 0x56
 80088a6:	4602      	mov	r2, r0
 80088a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80088aa:	7bfa      	ldrb	r2, [r7, #15]
 80088ac:	6879      	ldr	r1, [r7, #4]
 80088ae:	4613      	mov	r3, r2
 80088b0:	00db      	lsls	r3, r3, #3
 80088b2:	4413      	add	r3, r2
 80088b4:	009b      	lsls	r3, r3, #2
 80088b6:	440b      	add	r3, r1
 80088b8:	3340      	adds	r3, #64	; 0x40
 80088ba:	2200      	movs	r2, #0
 80088bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80088be:	7bfa      	ldrb	r2, [r7, #15]
 80088c0:	6879      	ldr	r1, [r7, #4]
 80088c2:	4613      	mov	r3, r2
 80088c4:	00db      	lsls	r3, r3, #3
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	440b      	add	r3, r1
 80088cc:	3344      	adds	r3, #68	; 0x44
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80088d2:	7bfa      	ldrb	r2, [r7, #15]
 80088d4:	6879      	ldr	r1, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	00db      	lsls	r3, r3, #3
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	440b      	add	r3, r1
 80088e0:	3348      	adds	r3, #72	; 0x48
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80088e6:	7bfa      	ldrb	r2, [r7, #15]
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	4613      	mov	r3, r2
 80088ec:	00db      	lsls	r3, r3, #3
 80088ee:	4413      	add	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	440b      	add	r3, r1
 80088f4:	334c      	adds	r3, #76	; 0x4c
 80088f6:	2200      	movs	r2, #0
 80088f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
 80088fc:	3301      	adds	r3, #1
 80088fe:	73fb      	strb	r3, [r7, #15]
 8008900:	7bfa      	ldrb	r2, [r7, #15]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	429a      	cmp	r2, r3
 8008908:	d3af      	bcc.n	800886a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800890a:	2300      	movs	r3, #0
 800890c:	73fb      	strb	r3, [r7, #15]
 800890e:	e044      	b.n	800899a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008910:	7bfa      	ldrb	r2, [r7, #15]
 8008912:	6879      	ldr	r1, [r7, #4]
 8008914:	4613      	mov	r3, r2
 8008916:	00db      	lsls	r3, r3, #3
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	440b      	add	r3, r1
 800891e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008926:	7bfa      	ldrb	r2, [r7, #15]
 8008928:	6879      	ldr	r1, [r7, #4]
 800892a:	4613      	mov	r3, r2
 800892c:	00db      	lsls	r3, r3, #3
 800892e:	4413      	add	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	440b      	add	r3, r1
 8008934:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008938:	7bfa      	ldrb	r2, [r7, #15]
 800893a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800893c:	7bfa      	ldrb	r2, [r7, #15]
 800893e:	6879      	ldr	r1, [r7, #4]
 8008940:	4613      	mov	r3, r2
 8008942:	00db      	lsls	r3, r3, #3
 8008944:	4413      	add	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	440b      	add	r3, r1
 800894a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800894e:	2200      	movs	r2, #0
 8008950:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008952:	7bfa      	ldrb	r2, [r7, #15]
 8008954:	6879      	ldr	r1, [r7, #4]
 8008956:	4613      	mov	r3, r2
 8008958:	00db      	lsls	r3, r3, #3
 800895a:	4413      	add	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	440b      	add	r3, r1
 8008960:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008964:	2200      	movs	r2, #0
 8008966:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008968:	7bfa      	ldrb	r2, [r7, #15]
 800896a:	6879      	ldr	r1, [r7, #4]
 800896c:	4613      	mov	r3, r2
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800897e:	7bfa      	ldrb	r2, [r7, #15]
 8008980:	6879      	ldr	r1, [r7, #4]
 8008982:	4613      	mov	r3, r2
 8008984:	00db      	lsls	r3, r3, #3
 8008986:	4413      	add	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	440b      	add	r3, r1
 800898c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	3301      	adds	r3, #1
 8008998:	73fb      	strb	r3, [r7, #15]
 800899a:	7bfa      	ldrb	r2, [r7, #15]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d3b5      	bcc.n	8008910 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	603b      	str	r3, [r7, #0]
 80089aa:	687e      	ldr	r6, [r7, #4]
 80089ac:	466d      	mov	r5, sp
 80089ae:	f106 0410 	add.w	r4, r6, #16
 80089b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80089b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80089b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80089ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80089be:	e885 0003 	stmia.w	r5, {r0, r1}
 80089c2:	1d33      	adds	r3, r6, #4
 80089c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089c6:	6838      	ldr	r0, [r7, #0]
 80089c8:	f006 fe52 	bl	800f670 <USB_DevInit>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d005      	beq.n	80089de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2202      	movs	r2, #2
 80089d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e014      	b.n	8008a08 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2201      	movs	r2, #1
 80089ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d102      	bne.n	80089fc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f001 f970 	bl	8009cdc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f007 fe94 	bl	801072e <USB_DevDisconnect>

  return HAL_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3714      	adds	r7, #20
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008a10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008a24:	2b01      	cmp	r3, #1
 8008a26:	d101      	bne.n	8008a2c <HAL_PCD_Start+0x1c>
 8008a28:	2302      	movs	r3, #2
 8008a2a:	e022      	b.n	8008a72 <HAL_PCD_Start+0x62>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d109      	bne.n	8008a54 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d105      	bne.n	8008a54 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f006 fd9b 	bl	800f594 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4618      	mov	r0, r3
 8008a64:	f007 fe42 	bl	80106ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a7a:	b590      	push	{r4, r7, lr}
 8008a7c:	b08d      	sub	sp, #52	; 0x34
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f007 ff00 	bl	8010896 <USB_GetMode>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f040 84b7 	bne.w	800940c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f007 fe64 	bl	8010770 <USB_ReadInterrupts>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 84ad 	beq.w	800940a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	0a1b      	lsrs	r3, r3, #8
 8008aba:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f007 fe51 	bl	8010770 <USB_ReadInterrupts>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f003 0302 	and.w	r3, r3, #2
 8008ad4:	2b02      	cmp	r3, #2
 8008ad6:	d107      	bne.n	8008ae8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	695a      	ldr	r2, [r3, #20]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f002 0202 	and.w	r2, r2, #2
 8008ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4618      	mov	r0, r3
 8008aee:	f007 fe3f 	bl	8010770 <USB_ReadInterrupts>
 8008af2:	4603      	mov	r3, r0
 8008af4:	f003 0310 	and.w	r3, r3, #16
 8008af8:	2b10      	cmp	r3, #16
 8008afa:	d161      	bne.n	8008bc0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	699a      	ldr	r2, [r3, #24]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 0210 	bic.w	r2, r2, #16
 8008b0a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	6a1b      	ldr	r3, [r3, #32]
 8008b10:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	f003 020f 	and.w	r2, r3, #15
 8008b18:	4613      	mov	r3, r2
 8008b1a:	00db      	lsls	r3, r3, #3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	4413      	add	r3, r2
 8008b28:	3304      	adds	r3, #4
 8008b2a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008b2c:	69bb      	ldr	r3, [r7, #24]
 8008b2e:	0c5b      	lsrs	r3, r3, #17
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d124      	bne.n	8008b82 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008b38:	69ba      	ldr	r2, [r7, #24]
 8008b3a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008b3e:	4013      	ands	r3, r2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d035      	beq.n	8008bb0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	091b      	lsrs	r3, r3, #4
 8008b4c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008b4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	6a38      	ldr	r0, [r7, #32]
 8008b58:	f007 fc76 	bl	8010448 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	091b      	lsrs	r3, r3, #4
 8008b64:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b68:	441a      	add	r2, r3
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	695a      	ldr	r2, [r3, #20]
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	091b      	lsrs	r3, r3, #4
 8008b76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b7a:	441a      	add	r2, r3
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	615a      	str	r2, [r3, #20]
 8008b80:	e016      	b.n	8008bb0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	0c5b      	lsrs	r3, r3, #17
 8008b86:	f003 030f 	and.w	r3, r3, #15
 8008b8a:	2b06      	cmp	r3, #6
 8008b8c:	d110      	bne.n	8008bb0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b94:	2208      	movs	r2, #8
 8008b96:	4619      	mov	r1, r3
 8008b98:	6a38      	ldr	r0, [r7, #32]
 8008b9a:	f007 fc55 	bl	8010448 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	695a      	ldr	r2, [r3, #20]
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	091b      	lsrs	r3, r3, #4
 8008ba6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008baa:	441a      	add	r2, r3
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	699a      	ldr	r2, [r3, #24]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f042 0210 	orr.w	r2, r2, #16
 8008bbe:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f007 fdd3 	bl	8010770 <USB_ReadInterrupts>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008bd0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008bd4:	f040 80a7 	bne.w	8008d26 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4618      	mov	r0, r3
 8008be2:	f007 fdd8 	bl	8010796 <USB_ReadDevAllOutEpInterrupt>
 8008be6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008be8:	e099      	b.n	8008d1e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 808e 	beq.w	8008d12 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfc:	b2d2      	uxtb	r2, r2
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f007 fdfc 	bl	80107fe <USB_ReadDevOutEPInterrupt>
 8008c06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00c      	beq.n	8008c2c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c1e:	461a      	mov	r2, r3
 8008c20:	2301      	movs	r3, #1
 8008c22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008c24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fed2 	bl	80099d0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	f003 0308 	and.w	r3, r3, #8
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00c      	beq.n	8008c50 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c42:	461a      	mov	r2, r3
 8008c44:	2308      	movs	r3, #8
 8008c46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008c48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 ffa8 	bl	8009ba0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d008      	beq.n	8008c6c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c66:	461a      	mov	r2, r3
 8008c68:	2310      	movs	r3, #16
 8008c6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f003 0302 	and.w	r3, r3, #2
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d030      	beq.n	8008cd8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008c76:	6a3b      	ldr	r3, [r7, #32]
 8008c78:	695b      	ldr	r3, [r3, #20]
 8008c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7e:	2b80      	cmp	r3, #128	; 0x80
 8008c80:	d109      	bne.n	8008c96 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008c82:	69fb      	ldr	r3, [r7, #28]
 8008c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	69fa      	ldr	r2, [r7, #28]
 8008c8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c94:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c98:	4613      	mov	r3, r2
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	3304      	adds	r3, #4
 8008caa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	78db      	ldrb	r3, [r3, #3]
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d108      	bne.n	8008cc6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f00a fa63 	bl	801318c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cd2:	461a      	mov	r2, r3
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f003 0320 	and.w	r3, r3, #32
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d008      	beq.n	8008cf4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	69fb      	ldr	r3, [r7, #28]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cee:	461a      	mov	r2, r3
 8008cf0:	2320      	movs	r3, #32
 8008cf2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d009      	beq.n	8008d12 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d10:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d14:	3301      	adds	r3, #1
 8008d16:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	085b      	lsrs	r3, r3, #1
 8008d1c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f47f af62 	bne.w	8008bea <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f007 fd20 	bl	8010770 <USB_ReadInterrupts>
 8008d30:	4603      	mov	r3, r0
 8008d32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d3a:	f040 80db 	bne.w	8008ef4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f007 fd41 	bl	80107ca <USB_ReadDevAllInEpInterrupt>
 8008d48:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008d4e:	e0cd      	b.n	8008eec <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	f000 80c2 	beq.w	8008ee0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d62:	b2d2      	uxtb	r2, r2
 8008d64:	4611      	mov	r1, r2
 8008d66:	4618      	mov	r0, r3
 8008d68:	f007 fd67 	bl	801083a <USB_ReadDevInEPInterrupt>
 8008d6c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d057      	beq.n	8008e28 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	f003 030f 	and.w	r3, r3, #15
 8008d7e:	2201      	movs	r2, #1
 8008d80:	fa02 f303 	lsl.w	r3, r2, r3
 8008d84:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	43db      	mvns	r3, r3
 8008d92:	69f9      	ldr	r1, [r7, #28]
 8008d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d98:	4013      	ands	r3, r2
 8008d9a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da8:	461a      	mov	r2, r3
 8008daa:	2301      	movs	r3, #1
 8008dac:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d132      	bne.n	8008e1c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dba:	4613      	mov	r3, r2
 8008dbc:	00db      	lsls	r3, r3, #3
 8008dbe:	4413      	add	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	440b      	add	r3, r1
 8008dc4:	3348      	adds	r3, #72	; 0x48
 8008dc6:	6819      	ldr	r1, [r3, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dcc:	4613      	mov	r3, r2
 8008dce:	00db      	lsls	r3, r3, #3
 8008dd0:	4413      	add	r3, r2
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	4403      	add	r3, r0
 8008dd6:	3344      	adds	r3, #68	; 0x44
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4419      	add	r1, r3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de0:	4613      	mov	r3, r2
 8008de2:	00db      	lsls	r3, r3, #3
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4403      	add	r3, r0
 8008dea:	3348      	adds	r3, #72	; 0x48
 8008dec:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d113      	bne.n	8008e1c <HAL_PCD_IRQHandler+0x3a2>
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df8:	4613      	mov	r3, r2
 8008dfa:	00db      	lsls	r3, r3, #3
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	440b      	add	r3, r1
 8008e02:	334c      	adds	r3, #76	; 0x4c
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d108      	bne.n	8008e1c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6818      	ldr	r0, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008e14:	461a      	mov	r2, r3
 8008e16:	2101      	movs	r1, #1
 8008e18:	f007 fd70 	bl	80108fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	4619      	mov	r1, r3
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f00a f92d 	bl	8013082 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f003 0308 	and.w	r3, r3, #8
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d008      	beq.n	8008e44 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3e:	461a      	mov	r2, r3
 8008e40:	2308      	movs	r3, #8
 8008e42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f003 0310 	and.w	r3, r3, #16
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d008      	beq.n	8008e60 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5a:	461a      	mov	r2, r3
 8008e5c:	2310      	movs	r3, #16
 8008e5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d008      	beq.n	8008e7c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e76:	461a      	mov	r2, r3
 8008e78:	2340      	movs	r3, #64	; 0x40
 8008e7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d023      	beq.n	8008ece <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e88:	6a38      	ldr	r0, [r7, #32]
 8008e8a:	f006 fd4f 	bl	800f92c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e90:	4613      	mov	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	3338      	adds	r3, #56	; 0x38
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	78db      	ldrb	r3, [r3, #3]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d108      	bne.n	8008ebc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	2200      	movs	r2, #0
 8008eae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f00a f97a 	bl	80131b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebe:	015a      	lsls	r2, r3, #5
 8008ec0:	69fb      	ldr	r3, [r7, #28]
 8008ec2:	4413      	add	r3, r2
 8008ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec8:	461a      	mov	r2, r3
 8008eca:	2302      	movs	r3, #2
 8008ecc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d003      	beq.n	8008ee0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008ed8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 fcea 	bl	80098b4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee8:	085b      	lsrs	r3, r3, #1
 8008eea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f47f af2e 	bne.w	8008d50 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f007 fc39 	bl	8010770 <USB_ReadInterrupts>
 8008efe:	4603      	mov	r3, r0
 8008f00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f08:	d122      	bne.n	8008f50 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	69fa      	ldr	r2, [r7, #28]
 8008f14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f18:	f023 0301 	bic.w	r3, r3, #1
 8008f1c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d108      	bne.n	8008f3a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008f30:	2100      	movs	r1, #0
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fef6 	bl	8009d24 <HAL_PCDEx_LPM_Callback>
 8008f38:	e002      	b.n	8008f40 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f00a f918 	bl	8013170 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	695a      	ldr	r2, [r3, #20]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008f4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f007 fc0b 	bl	8010770 <USB_ReadInterrupts>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f64:	d112      	bne.n	8008f8c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6c:	689b      	ldr	r3, [r3, #8]
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b01      	cmp	r3, #1
 8008f74:	d102      	bne.n	8008f7c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f00a f8d4 	bl	8013124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	695a      	ldr	r2, [r3, #20]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f007 fbed 	bl	8010770 <USB_ReadInterrupts>
 8008f96:	4603      	mov	r3, r0
 8008f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fa0:	d121      	bne.n	8008fe6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	695a      	ldr	r2, [r3, #20]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008fb0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d111      	bne.n	8008fe0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fca:	089b      	lsrs	r3, r3, #2
 8008fcc:	f003 020f 	and.w	r2, r3, #15
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fea3 	bl	8009d24 <HAL_PCDEx_LPM_Callback>
 8008fde:	e002      	b.n	8008fe6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f00a f89f 	bl	8013124 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4618      	mov	r0, r3
 8008fec:	f007 fbc0 	bl	8010770 <USB_ReadInterrupts>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ffa:	f040 80b7 	bne.w	800916c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	69fa      	ldr	r2, [r7, #28]
 8009008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800900c:	f023 0301 	bic.w	r3, r3, #1
 8009010:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	2110      	movs	r1, #16
 8009018:	4618      	mov	r0, r3
 800901a:	f006 fc87 	bl	800f92c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800901e:	2300      	movs	r3, #0
 8009020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009022:	e046      	b.n	80090b2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009030:	461a      	mov	r2, r3
 8009032:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009036:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	69fb      	ldr	r3, [r7, #28]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009048:	0151      	lsls	r1, r2, #5
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	440a      	add	r2, r1
 800904e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009052:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009056:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905a:	015a      	lsls	r2, r3, #5
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	4413      	add	r3, r2
 8009060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009064:	461a      	mov	r2, r3
 8009066:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800906a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800906c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906e:	015a      	lsls	r2, r3, #5
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	4413      	add	r3, r2
 8009074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800907c:	0151      	lsls	r1, r2, #5
 800907e:	69fa      	ldr	r2, [r7, #28]
 8009080:	440a      	add	r2, r1
 8009082:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009086:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800908a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800908c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800909c:	0151      	lsls	r1, r2, #5
 800909e:	69fa      	ldr	r2, [r7, #28]
 80090a0:	440a      	add	r2, r1
 80090a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80090aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ae:	3301      	adds	r3, #1
 80090b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d3b3      	bcc.n	8009024 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c2:	69db      	ldr	r3, [r3, #28]
 80090c4:	69fa      	ldr	r2, [r7, #28]
 80090c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80090ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d016      	beq.n	8009106 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090e2:	69fa      	ldr	r2, [r7, #28]
 80090e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090e8:	f043 030b 	orr.w	r3, r3, #11
 80090ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090fe:	f043 030b 	orr.w	r3, r3, #11
 8009102:	6453      	str	r3, [r2, #68]	; 0x44
 8009104:	e015      	b.n	8009132 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009106:	69fb      	ldr	r3, [r7, #28]
 8009108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910c:	695a      	ldr	r2, [r3, #20]
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009114:	4619      	mov	r1, r3
 8009116:	f242 032b 	movw	r3, #8235	; 0x202b
 800911a:	4313      	orrs	r3, r2
 800911c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	69fa      	ldr	r2, [r7, #28]
 8009128:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800912c:	f043 030b 	orr.w	r3, r3, #11
 8009130:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69fa      	ldr	r2, [r7, #28]
 800913c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009140:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009144:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009156:	461a      	mov	r2, r3
 8009158:	f007 fbd0 	bl	80108fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	695a      	ldr	r2, [r3, #20]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800916a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4618      	mov	r0, r3
 8009172:	f007 fafd 	bl	8010770 <USB_ReadInterrupts>
 8009176:	4603      	mov	r3, r0
 8009178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800917c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009180:	d124      	bne.n	80091cc <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f007 fb94 	bl	80108b4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4618      	mov	r0, r3
 8009192:	f006 fc48 	bl	800fa26 <USB_GetDevSpeed>
 8009196:	4603      	mov	r3, r0
 8009198:	461a      	mov	r2, r3
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681c      	ldr	r4, [r3, #0]
 80091a2:	f001 fd1f 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 80091a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	461a      	mov	r2, r3
 80091b0:	4620      	mov	r0, r4
 80091b2:	f006 f94d 	bl	800f450 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f009 ff8b 	bl	80130d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	695a      	ldr	r2, [r3, #20]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80091ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4618      	mov	r0, r3
 80091d2:	f007 facd 	bl	8010770 <USB_ReadInterrupts>
 80091d6:	4603      	mov	r3, r0
 80091d8:	f003 0308 	and.w	r3, r3, #8
 80091dc:	2b08      	cmp	r3, #8
 80091de:	d10a      	bne.n	80091f6 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f009 ff68 	bl	80130b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	695a      	ldr	r2, [r3, #20]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f002 0208 	and.w	r2, r2, #8
 80091f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f007 fab8 	bl	8010770 <USB_ReadInterrupts>
 8009200:	4603      	mov	r3, r0
 8009202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009206:	2b80      	cmp	r3, #128	; 0x80
 8009208:	d122      	bne.n	8009250 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	699b      	ldr	r3, [r3, #24]
 800920e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009216:	2301      	movs	r3, #1
 8009218:	627b      	str	r3, [r7, #36]	; 0x24
 800921a:	e014      	b.n	8009246 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800921c:	6879      	ldr	r1, [r7, #4]
 800921e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009220:	4613      	mov	r3, r2
 8009222:	00db      	lsls	r3, r3, #3
 8009224:	4413      	add	r3, r2
 8009226:	009b      	lsls	r3, r3, #2
 8009228:	440b      	add	r3, r1
 800922a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d105      	bne.n	8009240 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	b2db      	uxtb	r3, r3
 8009238:	4619      	mov	r1, r3
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f000 fb09 	bl	8009852 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009242:	3301      	adds	r3, #1
 8009244:	627b      	str	r3, [r7, #36]	; 0x24
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800924c:	429a      	cmp	r2, r3
 800924e:	d3e5      	bcc.n	800921c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4618      	mov	r0, r3
 8009256:	f007 fa8b 	bl	8010770 <USB_ReadInterrupts>
 800925a:	4603      	mov	r3, r0
 800925c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009260:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009264:	d13b      	bne.n	80092de <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009266:	2301      	movs	r3, #1
 8009268:	627b      	str	r3, [r7, #36]	; 0x24
 800926a:	e02b      	b.n	80092c4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800927c:	6879      	ldr	r1, [r7, #4]
 800927e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009280:	4613      	mov	r3, r2
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	4413      	add	r3, r2
 8009286:	009b      	lsls	r3, r3, #2
 8009288:	440b      	add	r3, r1
 800928a:	3340      	adds	r3, #64	; 0x40
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	2b01      	cmp	r3, #1
 8009290:	d115      	bne.n	80092be <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009292:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009294:	2b00      	cmp	r3, #0
 8009296:	da12      	bge.n	80092be <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009298:	6879      	ldr	r1, [r7, #4]
 800929a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800929c:	4613      	mov	r3, r2
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	333f      	adds	r3, #63	; 0x3f
 80092a8:	2201      	movs	r2, #1
 80092aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 faca 	bl	8009852 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c0:	3301      	adds	r3, #1
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d3ce      	bcc.n	800926c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	695a      	ldr	r2, [r3, #20]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80092dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4618      	mov	r0, r3
 80092e4:	f007 fa44 	bl	8010770 <USB_ReadInterrupts>
 80092e8:	4603      	mov	r3, r0
 80092ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80092f2:	d155      	bne.n	80093a0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80092f4:	2301      	movs	r3, #1
 80092f6:	627b      	str	r3, [r7, #36]	; 0x24
 80092f8:	e045      	b.n	8009386 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	015a      	lsls	r2, r3, #5
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	4413      	add	r3, r2
 8009302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800930e:	4613      	mov	r3, r2
 8009310:	00db      	lsls	r3, r3, #3
 8009312:	4413      	add	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	440b      	add	r3, r1
 8009318:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d12e      	bne.n	8009380 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009322:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009324:	2b00      	cmp	r3, #0
 8009326:	da2b      	bge.n	8009380 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009328:	69bb      	ldr	r3, [r7, #24]
 800932a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009334:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009338:	429a      	cmp	r2, r3
 800933a:	d121      	bne.n	8009380 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800933c:	6879      	ldr	r1, [r7, #4]
 800933e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009340:	4613      	mov	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	440b      	add	r3, r1
 800934a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800934e:	2201      	movs	r2, #1
 8009350:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009352:	6a3b      	ldr	r3, [r7, #32]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800935a:	6a3b      	ldr	r3, [r7, #32]
 800935c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10a      	bne.n	8009380 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800936a:	69fb      	ldr	r3, [r7, #28]
 800936c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	69fa      	ldr	r2, [r7, #28]
 8009374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009378:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800937c:	6053      	str	r3, [r2, #4]
            break;
 800937e:	e007      	b.n	8009390 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	3301      	adds	r3, #1
 8009384:	627b      	str	r3, [r7, #36]	; 0x24
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938c:	429a      	cmp	r2, r3
 800938e:	d3b4      	bcc.n	80092fa <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	695a      	ldr	r2, [r3, #20]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800939e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4618      	mov	r0, r3
 80093a6:	f007 f9e3 	bl	8010770 <USB_ReadInterrupts>
 80093aa:	4603      	mov	r3, r0
 80093ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093b4:	d10a      	bne.n	80093cc <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f009 ff0c 	bl	80131d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	695a      	ldr	r2, [r3, #20]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80093ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4618      	mov	r0, r3
 80093d2:	f007 f9cd 	bl	8010770 <USB_ReadInterrupts>
 80093d6:	4603      	mov	r3, r0
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b04      	cmp	r3, #4
 80093de:	d115      	bne.n	800940c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80093e8:	69bb      	ldr	r3, [r7, #24]
 80093ea:	f003 0304 	and.w	r3, r3, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d002      	beq.n	80093f8 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f009 fefc 	bl	80131f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6859      	ldr	r1, [r3, #4]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	430a      	orrs	r2, r1
 8009406:	605a      	str	r2, [r3, #4]
 8009408:	e000      	b.n	800940c <HAL_PCD_IRQHandler+0x992>
      return;
 800940a:	bf00      	nop
    }
  }
}
 800940c:	3734      	adds	r7, #52	; 0x34
 800940e:	46bd      	mov	sp, r7
 8009410:	bd90      	pop	{r4, r7, pc}

08009412 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
 800941a:	460b      	mov	r3, r1
 800941c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009424:	2b01      	cmp	r3, #1
 8009426:	d101      	bne.n	800942c <HAL_PCD_SetAddress+0x1a>
 8009428:	2302      	movs	r3, #2
 800942a:	e013      	b.n	8009454 <HAL_PCD_SetAddress+0x42>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	78fa      	ldrb	r2, [r7, #3]
 8009438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	78fa      	ldrb	r2, [r7, #3]
 8009442:	4611      	mov	r1, r2
 8009444:	4618      	mov	r0, r3
 8009446:	f007 f92b 	bl	80106a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	3708      	adds	r7, #8
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	4608      	mov	r0, r1
 8009466:	4611      	mov	r1, r2
 8009468:	461a      	mov	r2, r3
 800946a:	4603      	mov	r3, r0
 800946c:	70fb      	strb	r3, [r7, #3]
 800946e:	460b      	mov	r3, r1
 8009470:	803b      	strh	r3, [r7, #0]
 8009472:	4613      	mov	r3, r2
 8009474:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009476:	2300      	movs	r3, #0
 8009478:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800947a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800947e:	2b00      	cmp	r3, #0
 8009480:	da0f      	bge.n	80094a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	f003 020f 	and.w	r2, r3, #15
 8009488:	4613      	mov	r3, r2
 800948a:	00db      	lsls	r3, r3, #3
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	3338      	adds	r3, #56	; 0x38
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	4413      	add	r3, r2
 8009496:	3304      	adds	r3, #4
 8009498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2201      	movs	r2, #1
 800949e:	705a      	strb	r2, [r3, #1]
 80094a0:	e00f      	b.n	80094c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094a2:	78fb      	ldrb	r3, [r7, #3]
 80094a4:	f003 020f 	and.w	r2, r3, #15
 80094a8:	4613      	mov	r3, r2
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	4413      	add	r3, r2
 80094ae:	009b      	lsls	r3, r3, #2
 80094b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	4413      	add	r3, r2
 80094b8:	3304      	adds	r3, #4
 80094ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80094c2:	78fb      	ldrb	r3, [r7, #3]
 80094c4:	f003 030f 	and.w	r3, r3, #15
 80094c8:	b2da      	uxtb	r2, r3
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80094ce:	883a      	ldrh	r2, [r7, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	78ba      	ldrb	r2, [r7, #2]
 80094d8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	785b      	ldrb	r3, [r3, #1]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d004      	beq.n	80094ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	b29a      	uxth	r2, r3
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80094ec:	78bb      	ldrb	r3, [r7, #2]
 80094ee:	2b02      	cmp	r3, #2
 80094f0:	d102      	bne.n	80094f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d101      	bne.n	8009506 <HAL_PCD_EP_Open+0xaa>
 8009502:	2302      	movs	r3, #2
 8009504:	e00e      	b.n	8009524 <HAL_PCD_EP_Open+0xc8>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68f9      	ldr	r1, [r7, #12]
 8009514:	4618      	mov	r0, r3
 8009516:	f006 faab 	bl	800fa70 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2200      	movs	r2, #0
 800951e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009522:	7afb      	ldrb	r3, [r7, #11]
}
 8009524:	4618      	mov	r0, r3
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800953c:	2b00      	cmp	r3, #0
 800953e:	da0f      	bge.n	8009560 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	f003 020f 	and.w	r2, r3, #15
 8009546:	4613      	mov	r3, r2
 8009548:	00db      	lsls	r3, r3, #3
 800954a:	4413      	add	r3, r2
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	3338      	adds	r3, #56	; 0x38
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	4413      	add	r3, r2
 8009554:	3304      	adds	r3, #4
 8009556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	705a      	strb	r2, [r3, #1]
 800955e:	e00f      	b.n	8009580 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009560:	78fb      	ldrb	r3, [r7, #3]
 8009562:	f003 020f 	and.w	r2, r3, #15
 8009566:	4613      	mov	r3, r2
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009572:	687a      	ldr	r2, [r7, #4]
 8009574:	4413      	add	r3, r2
 8009576:	3304      	adds	r3, #4
 8009578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009580:	78fb      	ldrb	r3, [r7, #3]
 8009582:	f003 030f 	and.w	r3, r3, #15
 8009586:	b2da      	uxtb	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009592:	2b01      	cmp	r3, #1
 8009594:	d101      	bne.n	800959a <HAL_PCD_EP_Close+0x6e>
 8009596:	2302      	movs	r3, #2
 8009598:	e00e      	b.n	80095b8 <HAL_PCD_EP_Close+0x8c>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2201      	movs	r2, #1
 800959e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68f9      	ldr	r1, [r7, #12]
 80095a8:	4618      	mov	r0, r3
 80095aa:	f006 fae9 	bl	800fb80 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80095b6:	2300      	movs	r3, #0
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3710      	adds	r7, #16
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b086      	sub	sp, #24
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	607a      	str	r2, [r7, #4]
 80095ca:	603b      	str	r3, [r7, #0]
 80095cc:	460b      	mov	r3, r1
 80095ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095d0:	7afb      	ldrb	r3, [r7, #11]
 80095d2:	f003 020f 	and.w	r2, r3, #15
 80095d6:	4613      	mov	r3, r2
 80095d8:	00db      	lsls	r3, r3, #3
 80095da:	4413      	add	r3, r2
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	4413      	add	r3, r2
 80095e6:	3304      	adds	r3, #4
 80095e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2200      	movs	r2, #0
 80095fa:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2200      	movs	r2, #0
 8009600:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009602:	7afb      	ldrb	r3, [r7, #11]
 8009604:	f003 030f 	and.w	r3, r3, #15
 8009608:	b2da      	uxtb	r2, r3
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	2b01      	cmp	r3, #1
 8009614:	d102      	bne.n	800961c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009616:	687a      	ldr	r2, [r7, #4]
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6818      	ldr	r0, [r3, #0]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	b2db      	uxtb	r3, r3
 8009626:	461a      	mov	r2, r3
 8009628:	6979      	ldr	r1, [r7, #20]
 800962a:	f006 fb85 	bl	800fd38 <USB_EPStartXfer>

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3718      	adds	r7, #24
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	460b      	mov	r3, r1
 8009642:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	f003 020f 	and.w	r2, r3, #15
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	4613      	mov	r3, r2
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	4413      	add	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	440b      	add	r3, r1
 8009656:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800965a:	681b      	ldr	r3, [r3, #0]
}
 800965c:	4618      	mov	r0, r3
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	607a      	str	r2, [r7, #4]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	460b      	mov	r3, r1
 8009676:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009678:	7afb      	ldrb	r3, [r7, #11]
 800967a:	f003 020f 	and.w	r2, r3, #15
 800967e:	4613      	mov	r3, r2
 8009680:	00db      	lsls	r3, r3, #3
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	3338      	adds	r3, #56	; 0x38
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	4413      	add	r3, r2
 800968c:	3304      	adds	r3, #4
 800968e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	2200      	movs	r2, #0
 80096a0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2201      	movs	r2, #1
 80096a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80096a8:	7afb      	ldrb	r3, [r7, #11]
 80096aa:	f003 030f 	and.w	r3, r3, #15
 80096ae:	b2da      	uxtb	r2, r3
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d102      	bne.n	80096c2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80096bc:	687a      	ldr	r2, [r7, #4]
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	461a      	mov	r2, r3
 80096ce:	6979      	ldr	r1, [r7, #20]
 80096d0:	f006 fb32 	bl	800fd38 <USB_EPStartXfer>

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	460b      	mov	r3, r1
 80096e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80096ea:	78fb      	ldrb	r3, [r7, #3]
 80096ec:	f003 020f 	and.w	r2, r3, #15
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d901      	bls.n	80096fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e050      	b.n	800979e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009700:	2b00      	cmp	r3, #0
 8009702:	da0f      	bge.n	8009724 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	f003 020f 	and.w	r2, r3, #15
 800970a:	4613      	mov	r3, r2
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	3338      	adds	r3, #56	; 0x38
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	4413      	add	r3, r2
 8009718:	3304      	adds	r3, #4
 800971a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2201      	movs	r2, #1
 8009720:	705a      	strb	r2, [r3, #1]
 8009722:	e00d      	b.n	8009740 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009724:	78fa      	ldrb	r2, [r7, #3]
 8009726:	4613      	mov	r3, r2
 8009728:	00db      	lsls	r3, r3, #3
 800972a:	4413      	add	r3, r2
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	4413      	add	r3, r2
 8009736:	3304      	adds	r3, #4
 8009738:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2201      	movs	r2, #1
 8009744:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009746:	78fb      	ldrb	r3, [r7, #3]
 8009748:	f003 030f 	and.w	r3, r3, #15
 800974c:	b2da      	uxtb	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009758:	2b01      	cmp	r3, #1
 800975a:	d101      	bne.n	8009760 <HAL_PCD_EP_SetStall+0x82>
 800975c:	2302      	movs	r3, #2
 800975e:	e01e      	b.n	800979e <HAL_PCD_EP_SetStall+0xc0>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68f9      	ldr	r1, [r7, #12]
 800976e:	4618      	mov	r0, r3
 8009770:	f006 fec2 	bl	80104f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	f003 030f 	and.w	r3, r3, #15
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10a      	bne.n	8009794 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6818      	ldr	r0, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	b2d9      	uxtb	r1, r3
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800978e:	461a      	mov	r2, r3
 8009790:	f007 f8b4 	bl	80108fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	460b      	mov	r3, r1
 80097b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80097b2:	78fb      	ldrb	r3, [r7, #3]
 80097b4:	f003 020f 	and.w	r2, r3, #15
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	429a      	cmp	r2, r3
 80097be:	d901      	bls.n	80097c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
 80097c2:	e042      	b.n	800984a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80097c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	da0f      	bge.n	80097ec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097cc:	78fb      	ldrb	r3, [r7, #3]
 80097ce:	f003 020f 	and.w	r2, r3, #15
 80097d2:	4613      	mov	r3, r2
 80097d4:	00db      	lsls	r3, r3, #3
 80097d6:	4413      	add	r3, r2
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	3338      	adds	r3, #56	; 0x38
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	4413      	add	r3, r2
 80097e0:	3304      	adds	r3, #4
 80097e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2201      	movs	r2, #1
 80097e8:	705a      	strb	r2, [r3, #1]
 80097ea:	e00f      	b.n	800980c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097ec:	78fb      	ldrb	r3, [r7, #3]
 80097ee:	f003 020f 	and.w	r2, r3, #15
 80097f2:	4613      	mov	r3, r2
 80097f4:	00db      	lsls	r3, r3, #3
 80097f6:	4413      	add	r3, r2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	4413      	add	r3, r2
 8009802:	3304      	adds	r3, #4
 8009804:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009812:	78fb      	ldrb	r3, [r7, #3]
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	b2da      	uxtb	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009824:	2b01      	cmp	r3, #1
 8009826:	d101      	bne.n	800982c <HAL_PCD_EP_ClrStall+0x86>
 8009828:	2302      	movs	r3, #2
 800982a:	e00e      	b.n	800984a <HAL_PCD_EP_ClrStall+0xa4>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68f9      	ldr	r1, [r7, #12]
 800983a:	4618      	mov	r0, r3
 800983c:	f006 feca 	bl	80105d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b084      	sub	sp, #16
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	460b      	mov	r3, r1
 800985c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800985e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009862:	2b00      	cmp	r3, #0
 8009864:	da0c      	bge.n	8009880 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009866:	78fb      	ldrb	r3, [r7, #3]
 8009868:	f003 020f 	and.w	r2, r3, #15
 800986c:	4613      	mov	r3, r2
 800986e:	00db      	lsls	r3, r3, #3
 8009870:	4413      	add	r3, r2
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	3338      	adds	r3, #56	; 0x38
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	4413      	add	r3, r2
 800987a:	3304      	adds	r3, #4
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	e00c      	b.n	800989a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009880:	78fb      	ldrb	r3, [r7, #3]
 8009882:	f003 020f 	and.w	r2, r3, #15
 8009886:	4613      	mov	r3, r2
 8009888:	00db      	lsls	r3, r3, #3
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	4413      	add	r3, r2
 8009896:	3304      	adds	r3, #4
 8009898:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68f9      	ldr	r1, [r7, #12]
 80098a0:	4618      	mov	r0, r3
 80098a2:	f006 fce9 	bl	8010278 <USB_EPStopXfer>
 80098a6:	4603      	mov	r3, r0
 80098a8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80098aa:	7afb      	ldrb	r3, [r7, #11]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3710      	adds	r7, #16
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b08a      	sub	sp, #40	; 0x28
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	4613      	mov	r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	3338      	adds	r3, #56	; 0x38
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	4413      	add	r3, r2
 80098d8:	3304      	adds	r3, #4
 80098da:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	695a      	ldr	r2, [r3, #20]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d901      	bls.n	80098ec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	e06c      	b.n	80099c6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	691a      	ldr	r2, [r3, #16]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	695b      	ldr	r3, [r3, #20]
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	69fa      	ldr	r2, [r7, #28]
 80098fe:	429a      	cmp	r2, r3
 8009900:	d902      	bls.n	8009908 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	3303      	adds	r3, #3
 800990c:	089b      	lsrs	r3, r3, #2
 800990e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009910:	e02b      	b.n	800996a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	691a      	ldr	r2, [r3, #16]
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	69fa      	ldr	r2, [r7, #28]
 8009924:	429a      	cmp	r2, r3
 8009926:	d902      	bls.n	800992e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	3303      	adds	r3, #3
 8009932:	089b      	lsrs	r3, r3, #2
 8009934:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	68d9      	ldr	r1, [r3, #12]
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	b2da      	uxtb	r2, r3
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009946:	b2db      	uxtb	r3, r3
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	4603      	mov	r3, r0
 800994c:	6978      	ldr	r0, [r7, #20]
 800994e:	f006 fd3d 	bl	80103cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	68da      	ldr	r2, [r3, #12]
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	441a      	add	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	695a      	ldr	r2, [r3, #20]
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	441a      	add	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800997a:	69ba      	ldr	r2, [r7, #24]
 800997c:	429a      	cmp	r2, r3
 800997e:	d809      	bhi.n	8009994 <PCD_WriteEmptyTxFifo+0xe0>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	695a      	ldr	r2, [r3, #20]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009988:	429a      	cmp	r2, r3
 800998a:	d203      	bcs.n	8009994 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	691b      	ldr	r3, [r3, #16]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1be      	bne.n	8009912 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	691a      	ldr	r2, [r3, #16]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	695b      	ldr	r3, [r3, #20]
 800999c:	429a      	cmp	r2, r3
 800999e:	d811      	bhi.n	80099c4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	f003 030f 	and.w	r3, r3, #15
 80099a6:	2201      	movs	r2, #1
 80099a8:	fa02 f303 	lsl.w	r3, r2, r3
 80099ac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	43db      	mvns	r3, r3
 80099ba:	6939      	ldr	r1, [r7, #16]
 80099bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099c0:	4013      	ands	r3, r2
 80099c2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b088      	sub	sp, #32
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	333c      	adds	r3, #60	; 0x3c
 80099e8:	3304      	adds	r3, #4
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	015a      	lsls	r2, r3, #5
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	68db      	ldr	r3, [r3, #12]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d17b      	bne.n	8009afe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	f003 0308 	and.w	r3, r3, #8
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d015      	beq.n	8009a3c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	4a61      	ldr	r2, [pc, #388]	; (8009b98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	f240 80b9 	bls.w	8009b8c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	f000 80b3 	beq.w	8009b8c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	69bb      	ldr	r3, [r7, #24]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a32:	461a      	mov	r2, r3
 8009a34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a38:	6093      	str	r3, [r2, #8]
 8009a3a:	e0a7      	b.n	8009b8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009a3c:	693b      	ldr	r3, [r7, #16]
 8009a3e:	f003 0320 	and.w	r3, r3, #32
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d009      	beq.n	8009a5a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	69bb      	ldr	r3, [r7, #24]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a52:	461a      	mov	r2, r3
 8009a54:	2320      	movs	r3, #32
 8009a56:	6093      	str	r3, [r2, #8]
 8009a58:	e098      	b.n	8009b8c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	f040 8093 	bne.w	8009b8c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	4a4b      	ldr	r2, [pc, #300]	; (8009b98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d90f      	bls.n	8009a8e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00a      	beq.n	8009a8e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	015a      	lsls	r2, r3, #5
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	4413      	add	r3, r2
 8009a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a84:	461a      	mov	r2, r3
 8009a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a8a:	6093      	str	r3, [r2, #8]
 8009a8c:	e07e      	b.n	8009b8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009a8e:	683a      	ldr	r2, [r7, #0]
 8009a90:	4613      	mov	r3, r2
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	4413      	add	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6a1a      	ldr	r2, [r3, #32]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	0159      	lsls	r1, r3, #5
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	440b      	add	r3, r1
 8009ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aba:	1ad2      	subs	r2, r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d114      	bne.n	8009af0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d109      	bne.n	8009ae2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6818      	ldr	r0, [r3, #0]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009ad8:	461a      	mov	r2, r3
 8009ada:	2101      	movs	r1, #1
 8009adc:	f006 ff0e 	bl	80108fc <USB_EP0_OutStart>
 8009ae0:	e006      	b.n	8009af0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	68da      	ldr	r2, [r3, #12]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	441a      	add	r2, r3
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f009 faa8 	bl	801304c <HAL_PCD_DataOutStageCallback>
 8009afc:	e046      	b.n	8009b8c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	4a26      	ldr	r2, [pc, #152]	; (8009b9c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d124      	bne.n	8009b50 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00a      	beq.n	8009b26 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	015a      	lsls	r2, r3, #5
 8009b14:	69bb      	ldr	r3, [r7, #24]
 8009b16:	4413      	add	r3, r2
 8009b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b22:	6093      	str	r3, [r2, #8]
 8009b24:	e032      	b.n	8009b8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	f003 0320 	and.w	r3, r3, #32
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d008      	beq.n	8009b42 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	015a      	lsls	r2, r3, #5
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	4413      	add	r3, r2
 8009b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	2320      	movs	r3, #32
 8009b40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f009 fa7f 	bl	801304c <HAL_PCD_DataOutStageCallback>
 8009b4e:	e01d      	b.n	8009b8c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d114      	bne.n	8009b80 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	683a      	ldr	r2, [r7, #0]
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	00db      	lsls	r3, r3, #3
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d108      	bne.n	8009b80 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009b78:	461a      	mov	r2, r3
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	f006 febe 	bl	80108fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	4619      	mov	r1, r3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f009 fa60 	bl	801304c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3720      	adds	r7, #32
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	4f54300a 	.word	0x4f54300a
 8009b9c:	4f54310a 	.word	0x4f54310a

08009ba0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	333c      	adds	r3, #60	; 0x3c
 8009bb8:	3304      	adds	r3, #4
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	015a      	lsls	r2, r3, #5
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	4a15      	ldr	r2, [pc, #84]	; (8009c28 <PCD_EP_OutSetupPacket_int+0x88>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d90e      	bls.n	8009bf4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d009      	beq.n	8009bf4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	693b      	ldr	r3, [r7, #16]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bec:	461a      	mov	r2, r3
 8009bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bf2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f009 fa17 	bl	8013028 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	4a0a      	ldr	r2, [pc, #40]	; (8009c28 <PCD_EP_OutSetupPacket_int+0x88>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d90c      	bls.n	8009c1c <PCD_EP_OutSetupPacket_int+0x7c>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d108      	bne.n	8009c1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6818      	ldr	r0, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009c14:	461a      	mov	r2, r3
 8009c16:	2101      	movs	r1, #1
 8009c18:	f006 fe70 	bl	80108fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3718      	adds	r7, #24
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	4f54300a 	.word	0x4f54300a

08009c2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
 8009c34:	460b      	mov	r3, r1
 8009c36:	70fb      	strb	r3, [r7, #3]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009c44:	78fb      	ldrb	r3, [r7, #3]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d107      	bne.n	8009c5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009c4a:	883b      	ldrh	r3, [r7, #0]
 8009c4c:	0419      	lsls	r1, r3, #16
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68ba      	ldr	r2, [r7, #8]
 8009c54:	430a      	orrs	r2, r1
 8009c56:	629a      	str	r2, [r3, #40]	; 0x28
 8009c58:	e028      	b.n	8009cac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c60:	0c1b      	lsrs	r3, r3, #16
 8009c62:	68ba      	ldr	r2, [r7, #8]
 8009c64:	4413      	add	r3, r2
 8009c66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c68:	2300      	movs	r3, #0
 8009c6a:	73fb      	strb	r3, [r7, #15]
 8009c6c:	e00d      	b.n	8009c8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	7bfb      	ldrb	r3, [r7, #15]
 8009c74:	3340      	adds	r3, #64	; 0x40
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	0c1b      	lsrs	r3, r3, #16
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	4413      	add	r3, r2
 8009c82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c84:	7bfb      	ldrb	r3, [r7, #15]
 8009c86:	3301      	adds	r3, #1
 8009c88:	73fb      	strb	r3, [r7, #15]
 8009c8a:	7bfa      	ldrb	r2, [r7, #15]
 8009c8c:	78fb      	ldrb	r3, [r7, #3]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d3ec      	bcc.n	8009c6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009c94:	883b      	ldrh	r3, [r7, #0]
 8009c96:	0418      	lsls	r0, r3, #16
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	6819      	ldr	r1, [r3, #0]
 8009c9c:	78fb      	ldrb	r3, [r7, #3]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	4302      	orrs	r2, r0
 8009ca4:	3340      	adds	r3, #64	; 0x40
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	440b      	add	r3, r1
 8009caa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009cac:	2300      	movs	r3, #0
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b083      	sub	sp, #12
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	887a      	ldrh	r2, [r7, #2]
 8009ccc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b085      	sub	sp, #20
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d0a:	4b05      	ldr	r3, [pc, #20]	; (8009d20 <HAL_PCDEx_ActivateLPM+0x44>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	10000003 	.word	0x10000003

08009d24 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009d44:	4b19      	ldr	r3, [pc, #100]	; (8009dac <HAL_PWREx_ConfigSupply+0x70>)
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	f003 0304 	and.w	r3, r3, #4
 8009d4c:	2b04      	cmp	r3, #4
 8009d4e:	d00a      	beq.n	8009d66 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009d50:	4b16      	ldr	r3, [pc, #88]	; (8009dac <HAL_PWREx_ConfigSupply+0x70>)
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	f003 0307 	and.w	r3, r3, #7
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d001      	beq.n	8009d62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e01f      	b.n	8009da2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	e01d      	b.n	8009da2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009d66:	4b11      	ldr	r3, [pc, #68]	; (8009dac <HAL_PWREx_ConfigSupply+0x70>)
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	f023 0207 	bic.w	r2, r3, #7
 8009d6e:	490f      	ldr	r1, [pc, #60]	; (8009dac <HAL_PWREx_ConfigSupply+0x70>)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009d76:	f7f8 fe8f 	bl	8002a98 <HAL_GetTick>
 8009d7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d7c:	e009      	b.n	8009d92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009d7e:	f7f8 fe8b 	bl	8002a98 <HAL_GetTick>
 8009d82:	4602      	mov	r2, r0
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d8c:	d901      	bls.n	8009d92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e007      	b.n	8009da2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009d92:	4b06      	ldr	r3, [pc, #24]	; (8009dac <HAL_PWREx_ConfigSupply+0x70>)
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d9e:	d1ee      	bne.n	8009d7e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	58024800 	.word	0x58024800

08009db0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009db0:	b480      	push	{r7}
 8009db2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009db4:	4b05      	ldr	r3, [pc, #20]	; (8009dcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	4a04      	ldr	r2, [pc, #16]	; (8009dcc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dbe:	60d3      	str	r3, [r2, #12]
}
 8009dc0:	bf00      	nop
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
 8009dca:	bf00      	nop
 8009dcc:	58024800 	.word	0x58024800

08009dd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b08c      	sub	sp, #48	; 0x30
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d101      	bne.n	8009de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	e3c8      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f003 0301 	and.w	r3, r3, #1
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f000 8087 	beq.w	8009efe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009df0:	4b88      	ldr	r3, [pc, #544]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009dfa:	4b86      	ldr	r3, [pc, #536]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e02:	2b10      	cmp	r3, #16
 8009e04:	d007      	beq.n	8009e16 <HAL_RCC_OscConfig+0x46>
 8009e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e08:	2b18      	cmp	r3, #24
 8009e0a:	d110      	bne.n	8009e2e <HAL_RCC_OscConfig+0x5e>
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	f003 0303 	and.w	r3, r3, #3
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d10b      	bne.n	8009e2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e16:	4b7f      	ldr	r3, [pc, #508]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d06c      	beq.n	8009efc <HAL_RCC_OscConfig+0x12c>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	685b      	ldr	r3, [r3, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d168      	bne.n	8009efc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e3a2      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e36:	d106      	bne.n	8009e46 <HAL_RCC_OscConfig+0x76>
 8009e38:	4b76      	ldr	r3, [pc, #472]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a75      	ldr	r2, [pc, #468]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	e02e      	b.n	8009ea4 <HAL_RCC_OscConfig+0xd4>
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10c      	bne.n	8009e68 <HAL_RCC_OscConfig+0x98>
 8009e4e:	4b71      	ldr	r3, [pc, #452]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a70      	ldr	r2, [pc, #448]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e58:	6013      	str	r3, [r2, #0]
 8009e5a:	4b6e      	ldr	r3, [pc, #440]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4a6d      	ldr	r2, [pc, #436]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e64:	6013      	str	r3, [r2, #0]
 8009e66:	e01d      	b.n	8009ea4 <HAL_RCC_OscConfig+0xd4>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e70:	d10c      	bne.n	8009e8c <HAL_RCC_OscConfig+0xbc>
 8009e72:	4b68      	ldr	r3, [pc, #416]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a67      	ldr	r2, [pc, #412]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	4b65      	ldr	r3, [pc, #404]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a64      	ldr	r2, [pc, #400]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e88:	6013      	str	r3, [r2, #0]
 8009e8a:	e00b      	b.n	8009ea4 <HAL_RCC_OscConfig+0xd4>
 8009e8c:	4b61      	ldr	r3, [pc, #388]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a60      	ldr	r2, [pc, #384]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e96:	6013      	str	r3, [r2, #0]
 8009e98:	4b5e      	ldr	r3, [pc, #376]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a5d      	ldr	r2, [pc, #372]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009e9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	685b      	ldr	r3, [r3, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d013      	beq.n	8009ed4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eac:	f7f8 fdf4 	bl	8002a98 <HAL_GetTick>
 8009eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009eb2:	e008      	b.n	8009ec6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009eb4:	f7f8 fdf0 	bl	8002a98 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	2b64      	cmp	r3, #100	; 0x64
 8009ec0:	d901      	bls.n	8009ec6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e356      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009ec6:	4b53      	ldr	r3, [pc, #332]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0f0      	beq.n	8009eb4 <HAL_RCC_OscConfig+0xe4>
 8009ed2:	e014      	b.n	8009efe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed4:	f7f8 fde0 	bl	8002a98 <HAL_GetTick>
 8009ed8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009eda:	e008      	b.n	8009eee <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009edc:	f7f8 fddc 	bl	8002a98 <HAL_GetTick>
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee4:	1ad3      	subs	r3, r2, r3
 8009ee6:	2b64      	cmp	r3, #100	; 0x64
 8009ee8:	d901      	bls.n	8009eee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e342      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009eee:	4b49      	ldr	r3, [pc, #292]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1f0      	bne.n	8009edc <HAL_RCC_OscConfig+0x10c>
 8009efa:	e000      	b.n	8009efe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f003 0302 	and.w	r3, r3, #2
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 808c 	beq.w	800a024 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f0c:	4b41      	ldr	r3, [pc, #260]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f0e:	691b      	ldr	r3, [r3, #16]
 8009f10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f14:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f16:	4b3f      	ldr	r3, [pc, #252]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f1a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f1c:	6a3b      	ldr	r3, [r7, #32]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d007      	beq.n	8009f32 <HAL_RCC_OscConfig+0x162>
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	2b18      	cmp	r3, #24
 8009f26:	d137      	bne.n	8009f98 <HAL_RCC_OscConfig+0x1c8>
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	f003 0303 	and.w	r3, r3, #3
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d132      	bne.n	8009f98 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f32:	4b38      	ldr	r3, [pc, #224]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0304 	and.w	r3, r3, #4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d005      	beq.n	8009f4a <HAL_RCC_OscConfig+0x17a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	68db      	ldr	r3, [r3, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d101      	bne.n	8009f4a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e314      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f4a:	4b32      	ldr	r3, [pc, #200]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f023 0219 	bic.w	r2, r3, #25
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	492f      	ldr	r1, [pc, #188]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f5c:	f7f8 fd9c 	bl	8002a98 <HAL_GetTick>
 8009f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f62:	e008      	b.n	8009f76 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f64:	f7f8 fd98 	bl	8002a98 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d901      	bls.n	8009f76 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e2fe      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f76:	4b27      	ldr	r3, [pc, #156]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 0304 	and.w	r3, r3, #4
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d0f0      	beq.n	8009f64 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f82:	4b24      	ldr	r3, [pc, #144]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	061b      	lsls	r3, r3, #24
 8009f90:	4920      	ldr	r1, [pc, #128]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009f92:	4313      	orrs	r3, r2
 8009f94:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f96:	e045      	b.n	800a024 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d026      	beq.n	8009fee <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009fa0:	4b1c      	ldr	r3, [pc, #112]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f023 0219 	bic.w	r2, r3, #25
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	4919      	ldr	r1, [pc, #100]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb2:	f7f8 fd71 	bl	8002a98 <HAL_GetTick>
 8009fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fb8:	e008      	b.n	8009fcc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fba:	f7f8 fd6d 	bl	8002a98 <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	2b02      	cmp	r3, #2
 8009fc6:	d901      	bls.n	8009fcc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e2d3      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fcc:	4b11      	ldr	r3, [pc, #68]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f003 0304 	and.w	r3, r3, #4
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d0f0      	beq.n	8009fba <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fd8:	4b0e      	ldr	r3, [pc, #56]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	061b      	lsls	r3, r3, #24
 8009fe6:	490b      	ldr	r1, [pc, #44]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	604b      	str	r3, [r1, #4]
 8009fec:	e01a      	b.n	800a024 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fee:	4b09      	ldr	r3, [pc, #36]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a08      	ldr	r2, [pc, #32]	; (800a014 <HAL_RCC_OscConfig+0x244>)
 8009ff4:	f023 0301 	bic.w	r3, r3, #1
 8009ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ffa:	f7f8 fd4d 	bl	8002a98 <HAL_GetTick>
 8009ffe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a000:	e00a      	b.n	800a018 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a002:	f7f8 fd49 	bl	8002a98 <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d903      	bls.n	800a018 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e2af      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
 800a014:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a018:	4b96      	ldr	r3, [pc, #600]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1ee      	bne.n	800a002 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0310 	and.w	r3, r3, #16
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d06a      	beq.n	800a106 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a030:	4b90      	ldr	r3, [pc, #576]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a038:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a03a:	4b8e      	ldr	r3, [pc, #568]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a03c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	2b08      	cmp	r3, #8
 800a044:	d007      	beq.n	800a056 <HAL_RCC_OscConfig+0x286>
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	2b18      	cmp	r3, #24
 800a04a:	d11b      	bne.n	800a084 <HAL_RCC_OscConfig+0x2b4>
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	f003 0303 	and.w	r3, r3, #3
 800a052:	2b01      	cmp	r3, #1
 800a054:	d116      	bne.n	800a084 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a056:	4b87      	ldr	r3, [pc, #540]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d005      	beq.n	800a06e <HAL_RCC_OscConfig+0x29e>
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	2b80      	cmp	r3, #128	; 0x80
 800a068:	d001      	beq.n	800a06e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e282      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a06e:	4b81      	ldr	r3, [pc, #516]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	061b      	lsls	r3, r3, #24
 800a07c:	497d      	ldr	r1, [pc, #500]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a082:	e040      	b.n	800a106 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d023      	beq.n	800a0d4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a08c:	4b79      	ldr	r3, [pc, #484]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	4a78      	ldr	r2, [pc, #480]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a096:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a098:	f7f8 fcfe 	bl	8002a98 <HAL_GetTick>
 800a09c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a09e:	e008      	b.n	800a0b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0a0:	f7f8 fcfa 	bl	8002a98 <HAL_GetTick>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	2b02      	cmp	r3, #2
 800a0ac:	d901      	bls.n	800a0b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a0ae:	2303      	movs	r3, #3
 800a0b0:	e260      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0b2:	4b70      	ldr	r3, [pc, #448]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d0f0      	beq.n	800a0a0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a0be:	4b6d      	ldr	r3, [pc, #436]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0c0:	68db      	ldr	r3, [r3, #12]
 800a0c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a1b      	ldr	r3, [r3, #32]
 800a0ca:	061b      	lsls	r3, r3, #24
 800a0cc:	4969      	ldr	r1, [pc, #420]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	60cb      	str	r3, [r1, #12]
 800a0d2:	e018      	b.n	800a106 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a0d4:	4b67      	ldr	r3, [pc, #412]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a66      	ldr	r2, [pc, #408]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e0:	f7f8 fcda 	bl	8002a98 <HAL_GetTick>
 800a0e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0e8:	f7f8 fcd6 	bl	8002a98 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e23c      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0fa:	4b5e      	ldr	r3, [pc, #376]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f0      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 0308 	and.w	r3, r3, #8
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d036      	beq.n	800a180 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d019      	beq.n	800a14e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a11a:	4b56      	ldr	r3, [pc, #344]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a11c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a11e:	4a55      	ldr	r2, [pc, #340]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a120:	f043 0301 	orr.w	r3, r3, #1
 800a124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a126:	f7f8 fcb7 	bl	8002a98 <HAL_GetTick>
 800a12a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a12c:	e008      	b.n	800a140 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a12e:	f7f8 fcb3 	bl	8002a98 <HAL_GetTick>
 800a132:	4602      	mov	r2, r0
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	1ad3      	subs	r3, r2, r3
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d901      	bls.n	800a140 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a13c:	2303      	movs	r3, #3
 800a13e:	e219      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a140:	4b4c      	ldr	r3, [pc, #304]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a142:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a144:	f003 0302 	and.w	r3, r3, #2
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d0f0      	beq.n	800a12e <HAL_RCC_OscConfig+0x35e>
 800a14c:	e018      	b.n	800a180 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a14e:	4b49      	ldr	r3, [pc, #292]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a150:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a152:	4a48      	ldr	r2, [pc, #288]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a154:	f023 0301 	bic.w	r3, r3, #1
 800a158:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a15a:	f7f8 fc9d 	bl	8002a98 <HAL_GetTick>
 800a15e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a160:	e008      	b.n	800a174 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a162:	f7f8 fc99 	bl	8002a98 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d901      	bls.n	800a174 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e1ff      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a174:	4b3f      	ldr	r3, [pc, #252]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a178:	f003 0302 	and.w	r3, r3, #2
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f0      	bne.n	800a162 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0320 	and.w	r3, r3, #32
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d036      	beq.n	800a1fa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d019      	beq.n	800a1c8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a194:	4b37      	ldr	r3, [pc, #220]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4a36      	ldr	r2, [pc, #216]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a19a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a19e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1a0:	f7f8 fc7a 	bl	8002a98 <HAL_GetTick>
 800a1a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1a6:	e008      	b.n	800a1ba <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1a8:	f7f8 fc76 	bl	8002a98 <HAL_GetTick>
 800a1ac:	4602      	mov	r2, r0
 800a1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b0:	1ad3      	subs	r3, r2, r3
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d901      	bls.n	800a1ba <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a1b6:	2303      	movs	r3, #3
 800a1b8:	e1dc      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1ba:	4b2e      	ldr	r3, [pc, #184]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0f0      	beq.n	800a1a8 <HAL_RCC_OscConfig+0x3d8>
 800a1c6:	e018      	b.n	800a1fa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a1c8:	4b2a      	ldr	r3, [pc, #168]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a29      	ldr	r2, [pc, #164]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a1ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1d2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1d4:	f7f8 fc60 	bl	8002a98 <HAL_GetTick>
 800a1d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1da:	e008      	b.n	800a1ee <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1dc:	f7f8 fc5c 	bl	8002a98 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d901      	bls.n	800a1ee <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e1c2      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1ee:	4b21      	ldr	r3, [pc, #132]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1f0      	bne.n	800a1dc <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 0304 	and.w	r3, r3, #4
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 8086 	beq.w	800a314 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a208:	4b1b      	ldr	r3, [pc, #108]	; (800a278 <HAL_RCC_OscConfig+0x4a8>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4a1a      	ldr	r2, [pc, #104]	; (800a278 <HAL_RCC_OscConfig+0x4a8>)
 800a20e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a212:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a214:	f7f8 fc40 	bl	8002a98 <HAL_GetTick>
 800a218:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a21a:	e008      	b.n	800a22e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a21c:	f7f8 fc3c 	bl	8002a98 <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	2b64      	cmp	r3, #100	; 0x64
 800a228:	d901      	bls.n	800a22e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e1a2      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a22e:	4b12      	ldr	r3, [pc, #72]	; (800a278 <HAL_RCC_OscConfig+0x4a8>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a236:	2b00      	cmp	r3, #0
 800a238:	d0f0      	beq.n	800a21c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
 800a23e:	2b01      	cmp	r3, #1
 800a240:	d106      	bne.n	800a250 <HAL_RCC_OscConfig+0x480>
 800a242:	4b0c      	ldr	r3, [pc, #48]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a246:	4a0b      	ldr	r2, [pc, #44]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a248:	f043 0301 	orr.w	r3, r3, #1
 800a24c:	6713      	str	r3, [r2, #112]	; 0x70
 800a24e:	e032      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e6>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d111      	bne.n	800a27c <HAL_RCC_OscConfig+0x4ac>
 800a258:	4b06      	ldr	r3, [pc, #24]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a25a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25c:	4a05      	ldr	r2, [pc, #20]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a25e:	f023 0301 	bic.w	r3, r3, #1
 800a262:	6713      	str	r3, [r2, #112]	; 0x70
 800a264:	4b03      	ldr	r3, [pc, #12]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a268:	4a02      	ldr	r2, [pc, #8]	; (800a274 <HAL_RCC_OscConfig+0x4a4>)
 800a26a:	f023 0304 	bic.w	r3, r3, #4
 800a26e:	6713      	str	r3, [r2, #112]	; 0x70
 800a270:	e021      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e6>
 800a272:	bf00      	nop
 800a274:	58024400 	.word	0x58024400
 800a278:	58024800 	.word	0x58024800
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	689b      	ldr	r3, [r3, #8]
 800a280:	2b05      	cmp	r3, #5
 800a282:	d10c      	bne.n	800a29e <HAL_RCC_OscConfig+0x4ce>
 800a284:	4b83      	ldr	r3, [pc, #524]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a288:	4a82      	ldr	r2, [pc, #520]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a28a:	f043 0304 	orr.w	r3, r3, #4
 800a28e:	6713      	str	r3, [r2, #112]	; 0x70
 800a290:	4b80      	ldr	r3, [pc, #512]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a294:	4a7f      	ldr	r2, [pc, #508]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a296:	f043 0301 	orr.w	r3, r3, #1
 800a29a:	6713      	str	r3, [r2, #112]	; 0x70
 800a29c:	e00b      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e6>
 800a29e:	4b7d      	ldr	r3, [pc, #500]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a2:	4a7c      	ldr	r2, [pc, #496]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a2a4:	f023 0301 	bic.w	r3, r3, #1
 800a2a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a2aa:	4b7a      	ldr	r3, [pc, #488]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a2ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ae:	4a79      	ldr	r2, [pc, #484]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a2b0:	f023 0304 	bic.w	r3, r3, #4
 800a2b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	689b      	ldr	r3, [r3, #8]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d015      	beq.n	800a2ea <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2be:	f7f8 fbeb 	bl	8002a98 <HAL_GetTick>
 800a2c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2c4:	e00a      	b.n	800a2dc <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2c6:	f7f8 fbe7 	bl	8002a98 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d901      	bls.n	800a2dc <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e14b      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2dc:	4b6d      	ldr	r3, [pc, #436]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a2de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e0:	f003 0302 	and.w	r3, r3, #2
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d0ee      	beq.n	800a2c6 <HAL_RCC_OscConfig+0x4f6>
 800a2e8:	e014      	b.n	800a314 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2ea:	f7f8 fbd5 	bl	8002a98 <HAL_GetTick>
 800a2ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2f0:	e00a      	b.n	800a308 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2f2:	f7f8 fbd1 	bl	8002a98 <HAL_GetTick>
 800a2f6:	4602      	mov	r2, r0
 800a2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2fa:	1ad3      	subs	r3, r2, r3
 800a2fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a300:	4293      	cmp	r3, r2
 800a302:	d901      	bls.n	800a308 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a304:	2303      	movs	r3, #3
 800a306:	e135      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a308:	4b62      	ldr	r3, [pc, #392]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a30a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30c:	f003 0302 	and.w	r3, r3, #2
 800a310:	2b00      	cmp	r3, #0
 800a312:	d1ee      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 812a 	beq.w	800a572 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a31e:	4b5d      	ldr	r3, [pc, #372]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a326:	2b18      	cmp	r3, #24
 800a328:	f000 80ba 	beq.w	800a4a0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	2b02      	cmp	r3, #2
 800a332:	f040 8095 	bne.w	800a460 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a336:	4b57      	ldr	r3, [pc, #348]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4a56      	ldr	r2, [pc, #344]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a33c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a342:	f7f8 fba9 	bl	8002a98 <HAL_GetTick>
 800a346:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a348:	e008      	b.n	800a35c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a34a:	f7f8 fba5 	bl	8002a98 <HAL_GetTick>
 800a34e:	4602      	mov	r2, r0
 800a350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a352:	1ad3      	subs	r3, r2, r3
 800a354:	2b02      	cmp	r3, #2
 800a356:	d901      	bls.n	800a35c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a358:	2303      	movs	r3, #3
 800a35a:	e10b      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a35c:	4b4d      	ldr	r3, [pc, #308]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a364:	2b00      	cmp	r3, #0
 800a366:	d1f0      	bne.n	800a34a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a368:	4b4a      	ldr	r3, [pc, #296]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a36a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a36c:	4b4a      	ldr	r3, [pc, #296]	; (800a498 <HAL_RCC_OscConfig+0x6c8>)
 800a36e:	4013      	ands	r3, r2
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a378:	0112      	lsls	r2, r2, #4
 800a37a:	430a      	orrs	r2, r1
 800a37c:	4945      	ldr	r1, [pc, #276]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a37e:	4313      	orrs	r3, r2
 800a380:	628b      	str	r3, [r1, #40]	; 0x28
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a386:	3b01      	subs	r3, #1
 800a388:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a390:	3b01      	subs	r3, #1
 800a392:	025b      	lsls	r3, r3, #9
 800a394:	b29b      	uxth	r3, r3
 800a396:	431a      	orrs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a39c:	3b01      	subs	r3, #1
 800a39e:	041b      	lsls	r3, r3, #16
 800a3a0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	061b      	lsls	r3, r3, #24
 800a3ae:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3b2:	4938      	ldr	r1, [pc, #224]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a3b8:	4b36      	ldr	r3, [pc, #216]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3bc:	4a35      	ldr	r2, [pc, #212]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3be:	f023 0301 	bic.w	r3, r3, #1
 800a3c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a3c4:	4b33      	ldr	r3, [pc, #204]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3c8:	4b34      	ldr	r3, [pc, #208]	; (800a49c <HAL_RCC_OscConfig+0x6cc>)
 800a3ca:	4013      	ands	r3, r2
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a3d0:	00d2      	lsls	r2, r2, #3
 800a3d2:	4930      	ldr	r1, [pc, #192]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a3d8:	4b2e      	ldr	r3, [pc, #184]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	f023 020c 	bic.w	r2, r3, #12
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e4:	492b      	ldr	r1, [pc, #172]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a3ea:	4b2a      	ldr	r3, [pc, #168]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ee:	f023 0202 	bic.w	r2, r3, #2
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3f6:	4927      	ldr	r1, [pc, #156]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a3fc:	4b25      	ldr	r3, [pc, #148]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	4a24      	ldr	r2, [pc, #144]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a406:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a408:	4b22      	ldr	r3, [pc, #136]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	4a21      	ldr	r2, [pc, #132]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a40e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a414:	4b1f      	ldr	r3, [pc, #124]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a418:	4a1e      	ldr	r2, [pc, #120]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a41a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a41e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a420:	4b1c      	ldr	r3, [pc, #112]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	4a1b      	ldr	r2, [pc, #108]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a426:	f043 0301 	orr.w	r3, r3, #1
 800a42a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a42c:	4b19      	ldr	r3, [pc, #100]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a18      	ldr	r2, [pc, #96]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a438:	f7f8 fb2e 	bl	8002a98 <HAL_GetTick>
 800a43c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a43e:	e008      	b.n	800a452 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a440:	f7f8 fb2a 	bl	8002a98 <HAL_GetTick>
 800a444:	4602      	mov	r2, r0
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	1ad3      	subs	r3, r2, r3
 800a44a:	2b02      	cmp	r3, #2
 800a44c:	d901      	bls.n	800a452 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a44e:	2303      	movs	r3, #3
 800a450:	e090      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a452:	4b10      	ldr	r3, [pc, #64]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d0f0      	beq.n	800a440 <HAL_RCC_OscConfig+0x670>
 800a45e:	e088      	b.n	800a572 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a460:	4b0c      	ldr	r3, [pc, #48]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a0b      	ldr	r2, [pc, #44]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a466:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a46a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a46c:	f7f8 fb14 	bl	8002a98 <HAL_GetTick>
 800a470:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a472:	e008      	b.n	800a486 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a474:	f7f8 fb10 	bl	8002a98 <HAL_GetTick>
 800a478:	4602      	mov	r2, r0
 800a47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d901      	bls.n	800a486 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a482:	2303      	movs	r3, #3
 800a484:	e076      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a486:	4b03      	ldr	r3, [pc, #12]	; (800a494 <HAL_RCC_OscConfig+0x6c4>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d1f0      	bne.n	800a474 <HAL_RCC_OscConfig+0x6a4>
 800a492:	e06e      	b.n	800a572 <HAL_RCC_OscConfig+0x7a2>
 800a494:	58024400 	.word	0x58024400
 800a498:	fffffc0c 	.word	0xfffffc0c
 800a49c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a4a0:	4b36      	ldr	r3, [pc, #216]	; (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a4a6:	4b35      	ldr	r3, [pc, #212]	; (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4aa:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d031      	beq.n	800a518 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	f003 0203 	and.w	r2, r3, #3
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d12a      	bne.n	800a518 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	091b      	lsrs	r3, r3, #4
 800a4c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4ce:	429a      	cmp	r2, r3
 800a4d0:	d122      	bne.n	800a518 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4dc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d11a      	bne.n	800a518 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	0a5b      	lsrs	r3, r3, #9
 800a4e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ee:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d111      	bne.n	800a518 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	0c1b      	lsrs	r3, r3, #16
 800a4f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a500:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a502:	429a      	cmp	r2, r3
 800a504:	d108      	bne.n	800a518 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	0e1b      	lsrs	r3, r3, #24
 800a50a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a512:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a514:	429a      	cmp	r2, r3
 800a516:	d001      	beq.n	800a51c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e02b      	b.n	800a574 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a51c:	4b17      	ldr	r3, [pc, #92]	; (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a51e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a520:	08db      	lsrs	r3, r3, #3
 800a522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a526:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a52c:	693a      	ldr	r2, [r7, #16]
 800a52e:	429a      	cmp	r2, r3
 800a530:	d01f      	beq.n	800a572 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a532:	4b12      	ldr	r3, [pc, #72]	; (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a536:	4a11      	ldr	r2, [pc, #68]	; (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a538:	f023 0301 	bic.w	r3, r3, #1
 800a53c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a53e:	f7f8 faab 	bl	8002a98 <HAL_GetTick>
 800a542:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a544:	bf00      	nop
 800a546:	f7f8 faa7 	bl	8002a98 <HAL_GetTick>
 800a54a:	4602      	mov	r2, r0
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	4293      	cmp	r3, r2
 800a550:	d0f9      	beq.n	800a546 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a552:	4b0a      	ldr	r3, [pc, #40]	; (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a554:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a556:	4b0a      	ldr	r3, [pc, #40]	; (800a580 <HAL_RCC_OscConfig+0x7b0>)
 800a558:	4013      	ands	r3, r2
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a55e:	00d2      	lsls	r2, r2, #3
 800a560:	4906      	ldr	r1, [pc, #24]	; (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a562:	4313      	orrs	r3, r2
 800a564:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a566:	4b05      	ldr	r3, [pc, #20]	; (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56a:	4a04      	ldr	r2, [pc, #16]	; (800a57c <HAL_RCC_OscConfig+0x7ac>)
 800a56c:	f043 0301 	orr.w	r3, r3, #1
 800a570:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3730      	adds	r7, #48	; 0x30
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}
 800a57c:	58024400 	.word	0x58024400
 800a580:	ffff0007 	.word	0xffff0007

0800a584 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b086      	sub	sp, #24
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e19c      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a598:	4b8a      	ldr	r3, [pc, #552]	; (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f003 030f 	and.w	r3, r3, #15
 800a5a0:	683a      	ldr	r2, [r7, #0]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d910      	bls.n	800a5c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5a6:	4b87      	ldr	r3, [pc, #540]	; (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f023 020f 	bic.w	r2, r3, #15
 800a5ae:	4985      	ldr	r1, [pc, #532]	; (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5b6:	4b83      	ldr	r3, [pc, #524]	; (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 030f 	and.w	r3, r3, #15
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d001      	beq.n	800a5c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e184      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d010      	beq.n	800a5f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	691a      	ldr	r2, [r3, #16]
 800a5d8:	4b7b      	ldr	r3, [pc, #492]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a5da:	699b      	ldr	r3, [r3, #24]
 800a5dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d908      	bls.n	800a5f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5e4:	4b78      	ldr	r3, [pc, #480]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a5e6:	699b      	ldr	r3, [r3, #24]
 800a5e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	691b      	ldr	r3, [r3, #16]
 800a5f0:	4975      	ldr	r1, [pc, #468]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 0308 	and.w	r3, r3, #8
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d010      	beq.n	800a624 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	695a      	ldr	r2, [r3, #20]
 800a606:	4b70      	ldr	r3, [pc, #448]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a608:	69db      	ldr	r3, [r3, #28]
 800a60a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a60e:	429a      	cmp	r2, r3
 800a610:	d908      	bls.n	800a624 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a612:	4b6d      	ldr	r3, [pc, #436]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a614:	69db      	ldr	r3, [r3, #28]
 800a616:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	496a      	ldr	r1, [pc, #424]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a620:	4313      	orrs	r3, r2
 800a622:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f003 0310 	and.w	r3, r3, #16
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d010      	beq.n	800a652 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	699a      	ldr	r2, [r3, #24]
 800a634:	4b64      	ldr	r3, [pc, #400]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a63c:	429a      	cmp	r2, r3
 800a63e:	d908      	bls.n	800a652 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a640:	4b61      	ldr	r3, [pc, #388]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a642:	69db      	ldr	r3, [r3, #28]
 800a644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	495e      	ldr	r1, [pc, #376]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f003 0320 	and.w	r3, r3, #32
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d010      	beq.n	800a680 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	69da      	ldr	r2, [r3, #28]
 800a662:	4b59      	ldr	r3, [pc, #356]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a664:	6a1b      	ldr	r3, [r3, #32]
 800a666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d908      	bls.n	800a680 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a66e:	4b56      	ldr	r3, [pc, #344]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	4953      	ldr	r1, [pc, #332]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a67c:	4313      	orrs	r3, r2
 800a67e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f003 0302 	and.w	r3, r3, #2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d010      	beq.n	800a6ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	68da      	ldr	r2, [r3, #12]
 800a690:	4b4d      	ldr	r3, [pc, #308]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	f003 030f 	and.w	r3, r3, #15
 800a698:	429a      	cmp	r2, r3
 800a69a:	d908      	bls.n	800a6ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a69c:	4b4a      	ldr	r3, [pc, #296]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a69e:	699b      	ldr	r3, [r3, #24]
 800a6a0:	f023 020f 	bic.w	r2, r3, #15
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	4947      	ldr	r1, [pc, #284]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f003 0301 	and.w	r3, r3, #1
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d055      	beq.n	800a766 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a6ba:	4b43      	ldr	r3, [pc, #268]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	4940      	ldr	r1, [pc, #256]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	2b02      	cmp	r3, #2
 800a6d2:	d107      	bne.n	800a6e4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6d4:	4b3c      	ldr	r3, [pc, #240]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d121      	bne.n	800a724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e0f6      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	2b03      	cmp	r3, #3
 800a6ea:	d107      	bne.n	800a6fc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6ec:	4b36      	ldr	r3, [pc, #216]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d115      	bne.n	800a724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e0ea      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	685b      	ldr	r3, [r3, #4]
 800a700:	2b01      	cmp	r3, #1
 800a702:	d107      	bne.n	800a714 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a704:	4b30      	ldr	r3, [pc, #192]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d109      	bne.n	800a724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a710:	2301      	movs	r3, #1
 800a712:	e0de      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a714:	4b2c      	ldr	r3, [pc, #176]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0304 	and.w	r3, r3, #4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d101      	bne.n	800a724 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	e0d6      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a724:	4b28      	ldr	r3, [pc, #160]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a726:	691b      	ldr	r3, [r3, #16]
 800a728:	f023 0207 	bic.w	r2, r3, #7
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	4925      	ldr	r1, [pc, #148]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a732:	4313      	orrs	r3, r2
 800a734:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a736:	f7f8 f9af 	bl	8002a98 <HAL_GetTick>
 800a73a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a73c:	e00a      	b.n	800a754 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a73e:	f7f8 f9ab 	bl	8002a98 <HAL_GetTick>
 800a742:	4602      	mov	r2, r0
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	1ad3      	subs	r3, r2, r3
 800a748:	f241 3288 	movw	r2, #5000	; 0x1388
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d901      	bls.n	800a754 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a750:	2303      	movs	r3, #3
 800a752:	e0be      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a754:	4b1c      	ldr	r3, [pc, #112]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	00db      	lsls	r3, r3, #3
 800a762:	429a      	cmp	r2, r3
 800a764:	d1eb      	bne.n	800a73e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d010      	beq.n	800a794 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	68da      	ldr	r2, [r3, #12]
 800a776:	4b14      	ldr	r3, [pc, #80]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a778:	699b      	ldr	r3, [r3, #24]
 800a77a:	f003 030f 	and.w	r3, r3, #15
 800a77e:	429a      	cmp	r2, r3
 800a780:	d208      	bcs.n	800a794 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a782:	4b11      	ldr	r3, [pc, #68]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a784:	699b      	ldr	r3, [r3, #24]
 800a786:	f023 020f 	bic.w	r2, r3, #15
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	490e      	ldr	r1, [pc, #56]	; (800a7c8 <HAL_RCC_ClockConfig+0x244>)
 800a790:	4313      	orrs	r3, r2
 800a792:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a794:	4b0b      	ldr	r3, [pc, #44]	; (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 030f 	and.w	r3, r3, #15
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d214      	bcs.n	800a7cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7a2:	4b08      	ldr	r3, [pc, #32]	; (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f023 020f 	bic.w	r2, r3, #15
 800a7aa:	4906      	ldr	r1, [pc, #24]	; (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7b2:	4b04      	ldr	r3, [pc, #16]	; (800a7c4 <HAL_RCC_ClockConfig+0x240>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 030f 	and.w	r3, r3, #15
 800a7ba:	683a      	ldr	r2, [r7, #0]
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d005      	beq.n	800a7cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e086      	b.n	800a8d2 <HAL_RCC_ClockConfig+0x34e>
 800a7c4:	52002000 	.word	0x52002000
 800a7c8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0304 	and.w	r3, r3, #4
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d010      	beq.n	800a7fa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	691a      	ldr	r2, [r3, #16]
 800a7dc:	4b3f      	ldr	r3, [pc, #252]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d208      	bcs.n	800a7fa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7e8:	4b3c      	ldr	r3, [pc, #240]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691b      	ldr	r3, [r3, #16]
 800a7f4:	4939      	ldr	r1, [pc, #228]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0308 	and.w	r3, r3, #8
 800a802:	2b00      	cmp	r3, #0
 800a804:	d010      	beq.n	800a828 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	695a      	ldr	r2, [r3, #20]
 800a80a:	4b34      	ldr	r3, [pc, #208]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a812:	429a      	cmp	r2, r3
 800a814:	d208      	bcs.n	800a828 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a816:	4b31      	ldr	r3, [pc, #196]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a818:	69db      	ldr	r3, [r3, #28]
 800a81a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	492e      	ldr	r1, [pc, #184]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a824:	4313      	orrs	r3, r2
 800a826:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 0310 	and.w	r3, r3, #16
 800a830:	2b00      	cmp	r3, #0
 800a832:	d010      	beq.n	800a856 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	699a      	ldr	r2, [r3, #24]
 800a838:	4b28      	ldr	r3, [pc, #160]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a840:	429a      	cmp	r2, r3
 800a842:	d208      	bcs.n	800a856 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a844:	4b25      	ldr	r3, [pc, #148]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a846:	69db      	ldr	r3, [r3, #28]
 800a848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	4922      	ldr	r1, [pc, #136]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a852:	4313      	orrs	r3, r2
 800a854:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0320 	and.w	r3, r3, #32
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d010      	beq.n	800a884 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	69da      	ldr	r2, [r3, #28]
 800a866:	4b1d      	ldr	r3, [pc, #116]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a86e:	429a      	cmp	r2, r3
 800a870:	d208      	bcs.n	800a884 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a872:	4b1a      	ldr	r3, [pc, #104]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a874:	6a1b      	ldr	r3, [r3, #32]
 800a876:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	69db      	ldr	r3, [r3, #28]
 800a87e:	4917      	ldr	r1, [pc, #92]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a880:	4313      	orrs	r3, r2
 800a882:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a884:	f000 f834 	bl	800a8f0 <HAL_RCC_GetSysClockFreq>
 800a888:	4602      	mov	r2, r0
 800a88a:	4b14      	ldr	r3, [pc, #80]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	0a1b      	lsrs	r3, r3, #8
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	4912      	ldr	r1, [pc, #72]	; (800a8e0 <HAL_RCC_ClockConfig+0x35c>)
 800a896:	5ccb      	ldrb	r3, [r1, r3]
 800a898:	f003 031f 	and.w	r3, r3, #31
 800a89c:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a8a2:	4b0e      	ldr	r3, [pc, #56]	; (800a8dc <HAL_RCC_ClockConfig+0x358>)
 800a8a4:	699b      	ldr	r3, [r3, #24]
 800a8a6:	f003 030f 	and.w	r3, r3, #15
 800a8aa:	4a0d      	ldr	r2, [pc, #52]	; (800a8e0 <HAL_RCC_ClockConfig+0x35c>)
 800a8ac:	5cd3      	ldrb	r3, [r2, r3]
 800a8ae:	f003 031f 	and.w	r3, r3, #31
 800a8b2:	693a      	ldr	r2, [r7, #16]
 800a8b4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b8:	4a0a      	ldr	r2, [pc, #40]	; (800a8e4 <HAL_RCC_ClockConfig+0x360>)
 800a8ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8bc:	4a0a      	ldr	r2, [pc, #40]	; (800a8e8 <HAL_RCC_ClockConfig+0x364>)
 800a8be:	693b      	ldr	r3, [r7, #16]
 800a8c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a8c2:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <HAL_RCC_ClockConfig+0x368>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f7f8 f89c 	bl	8002a04 <HAL_InitTick>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3718      	adds	r7, #24
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	58024400 	.word	0x58024400
 800a8e0:	08017cb4 	.word	0x08017cb4
 800a8e4:	24000004 	.word	0x24000004
 800a8e8:	24000000 	.word	0x24000000
 800a8ec:	24000008 	.word	0x24000008

0800a8f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b089      	sub	sp, #36	; 0x24
 800a8f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a8f6:	4bb3      	ldr	r3, [pc, #716]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8f8:	691b      	ldr	r3, [r3, #16]
 800a8fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8fe:	2b18      	cmp	r3, #24
 800a900:	f200 8155 	bhi.w	800abae <HAL_RCC_GetSysClockFreq+0x2be>
 800a904:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <HAL_RCC_GetSysClockFreq+0x1c>)
 800a906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90a:	bf00      	nop
 800a90c:	0800a971 	.word	0x0800a971
 800a910:	0800abaf 	.word	0x0800abaf
 800a914:	0800abaf 	.word	0x0800abaf
 800a918:	0800abaf 	.word	0x0800abaf
 800a91c:	0800abaf 	.word	0x0800abaf
 800a920:	0800abaf 	.word	0x0800abaf
 800a924:	0800abaf 	.word	0x0800abaf
 800a928:	0800abaf 	.word	0x0800abaf
 800a92c:	0800a997 	.word	0x0800a997
 800a930:	0800abaf 	.word	0x0800abaf
 800a934:	0800abaf 	.word	0x0800abaf
 800a938:	0800abaf 	.word	0x0800abaf
 800a93c:	0800abaf 	.word	0x0800abaf
 800a940:	0800abaf 	.word	0x0800abaf
 800a944:	0800abaf 	.word	0x0800abaf
 800a948:	0800abaf 	.word	0x0800abaf
 800a94c:	0800a99d 	.word	0x0800a99d
 800a950:	0800abaf 	.word	0x0800abaf
 800a954:	0800abaf 	.word	0x0800abaf
 800a958:	0800abaf 	.word	0x0800abaf
 800a95c:	0800abaf 	.word	0x0800abaf
 800a960:	0800abaf 	.word	0x0800abaf
 800a964:	0800abaf 	.word	0x0800abaf
 800a968:	0800abaf 	.word	0x0800abaf
 800a96c:	0800a9a3 	.word	0x0800a9a3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a970:	4b94      	ldr	r3, [pc, #592]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 0320 	and.w	r3, r3, #32
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d009      	beq.n	800a990 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a97c:	4b91      	ldr	r3, [pc, #580]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	08db      	lsrs	r3, r3, #3
 800a982:	f003 0303 	and.w	r3, r3, #3
 800a986:	4a90      	ldr	r2, [pc, #576]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a988:	fa22 f303 	lsr.w	r3, r2, r3
 800a98c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a98e:	e111      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a990:	4b8d      	ldr	r3, [pc, #564]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a992:	61bb      	str	r3, [r7, #24]
      break;
 800a994:	e10e      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a996:	4b8d      	ldr	r3, [pc, #564]	; (800abcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a998:	61bb      	str	r3, [r7, #24]
      break;
 800a99a:	e10b      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a99c:	4b8c      	ldr	r3, [pc, #560]	; (800abd0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a99e:	61bb      	str	r3, [r7, #24]
      break;
 800a9a0:	e108      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9a2:	4b88      	ldr	r3, [pc, #544]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9a6:	f003 0303 	and.w	r3, r3, #3
 800a9aa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a9ac:	4b85      	ldr	r3, [pc, #532]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b0:	091b      	lsrs	r3, r3, #4
 800a9b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9b6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a9b8:	4b82      	ldr	r3, [pc, #520]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9bc:	f003 0301 	and.w	r3, r3, #1
 800a9c0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a9c2:	4b80      	ldr	r3, [pc, #512]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c6:	08db      	lsrs	r3, r3, #3
 800a9c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	fb02 f303 	mul.w	r3, r2, r3
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9da:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	f000 80e1 	beq.w	800aba8 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	f000 8083 	beq.w	800aaf4 <HAL_RCC_GetSysClockFreq+0x204>
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	2b02      	cmp	r3, #2
 800a9f2:	f200 80a1 	bhi.w	800ab38 <HAL_RCC_GetSysClockFreq+0x248>
 800a9f6:	697b      	ldr	r3, [r7, #20]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d003      	beq.n	800aa04 <HAL_RCC_GetSysClockFreq+0x114>
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d056      	beq.n	800aab0 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aa02:	e099      	b.n	800ab38 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa04:	4b6f      	ldr	r3, [pc, #444]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0320 	and.w	r3, r3, #32
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d02d      	beq.n	800aa6c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa10:	4b6c      	ldr	r3, [pc, #432]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	08db      	lsrs	r3, r3, #3
 800aa16:	f003 0303 	and.w	r3, r3, #3
 800aa1a:	4a6b      	ldr	r2, [pc, #428]	; (800abc8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa1c:	fa22 f303 	lsr.w	r3, r2, r3
 800aa20:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	ee07 3a90 	vmov	s15, r3
 800aa28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	ee07 3a90 	vmov	s15, r3
 800aa32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa3a:	4b62      	ldr	r3, [pc, #392]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa4e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800abd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa66:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa6a:	e087      	b.n	800ab7c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa76:	eddf 6a58 	vldr	s13, [pc, #352]	; 800abd8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800aa7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa7e:	4b51      	ldr	r3, [pc, #324]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa92:	eddf 5a50 	vldr	s11, [pc, #320]	; 800abd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaae:	e065      	b.n	800ab7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaba:	eddf 6a48 	vldr	s13, [pc, #288]	; 800abdc <HAL_RCC_GetSysClockFreq+0x2ec>
 800aabe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aac2:	4b40      	ldr	r3, [pc, #256]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aad2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aad6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800abd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aaf2:	e043      	b.n	800ab7c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aafe:	eddf 6a38 	vldr	s13, [pc, #224]	; 800abe0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ab02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab06:	4b2f      	ldr	r3, [pc, #188]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab0e:	ee07 3a90 	vmov	s15, r3
 800ab12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab16:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab1a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800abd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab36:	e021      	b.n	800ab7c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab42:	eddf 6a26 	vldr	s13, [pc, #152]	; 800abdc <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab4a:	4b1e      	ldr	r3, [pc, #120]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab5e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800abd4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab7a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ab7c:	4b11      	ldr	r3, [pc, #68]	; (800abc4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab80:	0a5b      	lsrs	r3, r3, #9
 800ab82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab86:	3301      	adds	r3, #1
 800ab88:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	ee07 3a90 	vmov	s15, r3
 800ab90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ab94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba0:	ee17 3a90 	vmov	r3, s15
 800aba4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aba6:	e005      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aba8:	2300      	movs	r3, #0
 800abaa:	61bb      	str	r3, [r7, #24]
      break;
 800abac:	e002      	b.n	800abb4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800abae:	4b07      	ldr	r3, [pc, #28]	; (800abcc <HAL_RCC_GetSysClockFreq+0x2dc>)
 800abb0:	61bb      	str	r3, [r7, #24]
      break;
 800abb2:	bf00      	nop
  }

  return sysclockfreq;
 800abb4:	69bb      	ldr	r3, [r7, #24]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3724      	adds	r7, #36	; 0x24
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	58024400 	.word	0x58024400
 800abc8:	03d09000 	.word	0x03d09000
 800abcc:	003d0900 	.word	0x003d0900
 800abd0:	017d7840 	.word	0x017d7840
 800abd4:	46000000 	.word	0x46000000
 800abd8:	4c742400 	.word	0x4c742400
 800abdc:	4a742400 	.word	0x4a742400
 800abe0:	4bbebc20 	.word	0x4bbebc20

0800abe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b082      	sub	sp, #8
 800abe8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800abea:	f7ff fe81 	bl	800a8f0 <HAL_RCC_GetSysClockFreq>
 800abee:	4602      	mov	r2, r0
 800abf0:	4b10      	ldr	r3, [pc, #64]	; (800ac34 <HAL_RCC_GetHCLKFreq+0x50>)
 800abf2:	699b      	ldr	r3, [r3, #24]
 800abf4:	0a1b      	lsrs	r3, r3, #8
 800abf6:	f003 030f 	and.w	r3, r3, #15
 800abfa:	490f      	ldr	r1, [pc, #60]	; (800ac38 <HAL_RCC_GetHCLKFreq+0x54>)
 800abfc:	5ccb      	ldrb	r3, [r1, r3]
 800abfe:	f003 031f 	and.w	r3, r3, #31
 800ac02:	fa22 f303 	lsr.w	r3, r2, r3
 800ac06:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac08:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac0a:	699b      	ldr	r3, [r3, #24]
 800ac0c:	f003 030f 	and.w	r3, r3, #15
 800ac10:	4a09      	ldr	r2, [pc, #36]	; (800ac38 <HAL_RCC_GetHCLKFreq+0x54>)
 800ac12:	5cd3      	ldrb	r3, [r2, r3]
 800ac14:	f003 031f 	and.w	r3, r3, #31
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac1e:	4a07      	ldr	r2, [pc, #28]	; (800ac3c <HAL_RCC_GetHCLKFreq+0x58>)
 800ac20:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac22:	4a07      	ldr	r2, [pc, #28]	; (800ac40 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ac28:	4b04      	ldr	r3, [pc, #16]	; (800ac3c <HAL_RCC_GetHCLKFreq+0x58>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	58024400 	.word	0x58024400
 800ac38:	08017cb4 	.word	0x08017cb4
 800ac3c:	24000004 	.word	0x24000004
 800ac40:	24000000 	.word	0x24000000

0800ac44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac48:	f7ff ffcc 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	4b06      	ldr	r3, [pc, #24]	; (800ac68 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	091b      	lsrs	r3, r3, #4
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	4904      	ldr	r1, [pc, #16]	; (800ac6c <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac5a:	5ccb      	ldrb	r3, [r1, r3]
 800ac5c:	f003 031f 	and.w	r3, r3, #31
 800ac60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac64:	4618      	mov	r0, r3
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	58024400 	.word	0x58024400
 800ac6c:	08017cb4 	.word	0x08017cb4

0800ac70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ac74:	f7ff ffb6 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	4b06      	ldr	r3, [pc, #24]	; (800ac94 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac7c:	69db      	ldr	r3, [r3, #28]
 800ac7e:	0a1b      	lsrs	r3, r3, #8
 800ac80:	f003 0307 	and.w	r3, r3, #7
 800ac84:	4904      	ldr	r1, [pc, #16]	; (800ac98 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ac86:	5ccb      	ldrb	r3, [r1, r3]
 800ac88:	f003 031f 	and.w	r3, r3, #31
 800ac8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	58024400 	.word	0x58024400
 800ac98:	08017cb4 	.word	0x08017cb4

0800ac9c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aca0:	b0c6      	sub	sp, #280	; 0x118
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aca8:	2300      	movs	r3, #0
 800acaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800acae:	2300      	movs	r3, #0
 800acb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800acb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800acc0:	2500      	movs	r5, #0
 800acc2:	ea54 0305 	orrs.w	r3, r4, r5
 800acc6:	d049      	beq.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800acc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800accc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acd2:	d02f      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800acd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acd8:	d828      	bhi.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800acda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acde:	d01a      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ace0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ace4:	d822      	bhi.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800acea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acee:	d007      	beq.n	800ad00 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800acf0:	e01c      	b.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acf2:	4bab      	ldr	r3, [pc, #684]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf6:	4aaa      	ldr	r2, [pc, #680]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800acfe:	e01a      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad04:	3308      	adds	r3, #8
 800ad06:	2102      	movs	r1, #2
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f002 fa49 	bl	800d1a0 <RCCEx_PLL2_Config>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad14:	e00f      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad1a:	3328      	adds	r3, #40	; 0x28
 800ad1c:	2102      	movs	r1, #2
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f002 faf0 	bl	800d304 <RCCEx_PLL3_Config>
 800ad24:	4603      	mov	r3, r0
 800ad26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad2a:	e004      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad32:	e000      	b.n	800ad36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ad34:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d10a      	bne.n	800ad54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ad3e:	4b98      	ldr	r3, [pc, #608]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad42:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ad46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad4c:	4a94      	ldr	r2, [pc, #592]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad4e:	430b      	orrs	r3, r1
 800ad50:	6513      	str	r3, [r2, #80]	; 0x50
 800ad52:	e003      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800ad5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad64:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800ad68:	f04f 0900 	mov.w	r9, #0
 800ad6c:	ea58 0309 	orrs.w	r3, r8, r9
 800ad70:	d047      	beq.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ad72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad78:	2b04      	cmp	r3, #4
 800ad7a:	d82a      	bhi.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ad7c:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800ad7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad82:	bf00      	nop
 800ad84:	0800ad99 	.word	0x0800ad99
 800ad88:	0800ada7 	.word	0x0800ada7
 800ad8c:	0800adbd 	.word	0x0800adbd
 800ad90:	0800addb 	.word	0x0800addb
 800ad94:	0800addb 	.word	0x0800addb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad98:	4b81      	ldr	r3, [pc, #516]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad9c:	4a80      	ldr	r2, [pc, #512]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ada2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ada4:	e01a      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ada6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adaa:	3308      	adds	r3, #8
 800adac:	2100      	movs	r1, #0
 800adae:	4618      	mov	r0, r3
 800adb0:	f002 f9f6 	bl	800d1a0 <RCCEx_PLL2_Config>
 800adb4:	4603      	mov	r3, r0
 800adb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adba:	e00f      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc0:	3328      	adds	r3, #40	; 0x28
 800adc2:	2100      	movs	r1, #0
 800adc4:	4618      	mov	r0, r3
 800adc6:	f002 fa9d 	bl	800d304 <RCCEx_PLL3_Config>
 800adca:	4603      	mov	r3, r0
 800adcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800add0:	e004      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800add8:	e000      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800adda:	bf00      	nop
    }

    if (ret == HAL_OK)
 800addc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ade4:	4b6e      	ldr	r3, [pc, #440]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ade6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ade8:	f023 0107 	bic.w	r1, r3, #7
 800adec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adf2:	4a6b      	ldr	r2, [pc, #428]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800adf4:	430b      	orrs	r3, r1
 800adf6:	6513      	str	r3, [r2, #80]	; 0x50
 800adf8:	e003      	b.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adfe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ae02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800ae0e:	f04f 0b00 	mov.w	fp, #0
 800ae12:	ea5a 030b 	orrs.w	r3, sl, fp
 800ae16:	d05b      	beq.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ae18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ae20:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ae24:	d03b      	beq.n	800ae9e <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ae26:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ae2a:	d834      	bhi.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae30:	d037      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ae32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae36:	d82e      	bhi.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae38:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae3c:	d033      	beq.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ae3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ae42:	d828      	bhi.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae48:	d01a      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ae4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae4e:	d822      	bhi.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d003      	beq.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800ae54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ae58:	d007      	beq.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800ae5a:	e01c      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae5c:	4b50      	ldr	r3, [pc, #320]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae60:	4a4f      	ldr	r2, [pc, #316]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ae62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae68:	e01e      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6e:	3308      	adds	r3, #8
 800ae70:	2100      	movs	r1, #0
 800ae72:	4618      	mov	r0, r3
 800ae74:	f002 f994 	bl	800d1a0 <RCCEx_PLL2_Config>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae7e:	e013      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae84:	3328      	adds	r3, #40	; 0x28
 800ae86:	2100      	movs	r1, #0
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f002 fa3b 	bl	800d304 <RCCEx_PLL3_Config>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae94:	e008      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae9c:	e004      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ae9e:	bf00      	nop
 800aea0:	e002      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aea2:	bf00      	nop
 800aea4:	e000      	b.n	800aea8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aea6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aea8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10b      	bne.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aeb0:	4b3b      	ldr	r3, [pc, #236]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aeb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aeb4:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aeb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aebc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aec0:	4a37      	ldr	r2, [pc, #220]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aec2:	430b      	orrs	r3, r1
 800aec4:	6593      	str	r3, [r2, #88]	; 0x58
 800aec6:	e003      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aec8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aecc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aedc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aee0:	2300      	movs	r3, #0
 800aee2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aee6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aeea:	460b      	mov	r3, r1
 800aeec:	4313      	orrs	r3, r2
 800aeee:	d05d      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aef8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aefc:	d03b      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aefe:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800af02:	d834      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af08:	d037      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800af0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800af0e:	d82e      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af14:	d033      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800af16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800af1a:	d828      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af20:	d01a      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800af22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af26:	d822      	bhi.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d003      	beq.n	800af34 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800af2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af30:	d007      	beq.n	800af42 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800af32:	e01c      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af34:	4b1a      	ldr	r3, [pc, #104]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af38:	4a19      	ldr	r2, [pc, #100]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af40:	e01e      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af46:	3308      	adds	r3, #8
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f002 f928 	bl	800d1a0 <RCCEx_PLL2_Config>
 800af50:	4603      	mov	r3, r0
 800af52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af56:	e013      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af5c:	3328      	adds	r3, #40	; 0x28
 800af5e:	2100      	movs	r1, #0
 800af60:	4618      	mov	r0, r3
 800af62:	f002 f9cf 	bl	800d304 <RCCEx_PLL3_Config>
 800af66:	4603      	mov	r3, r0
 800af68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af6c:	e008      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af74:	e004      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af76:	bf00      	nop
 800af78:	e002      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af7a:	bf00      	nop
 800af7c:	e000      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800af7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10d      	bne.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800af88:	4b05      	ldr	r3, [pc, #20]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af8c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800af90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af98:	4a01      	ldr	r2, [pc, #4]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800af9a:	430b      	orrs	r3, r1
 800af9c:	6593      	str	r3, [r2, #88]	; 0x58
 800af9e:	e005      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x310>
 800afa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afa8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800afb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800afbc:	2300      	movs	r3, #0
 800afbe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800afc2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4313      	orrs	r3, r2
 800afca:	d03a      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800afcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afd2:	2b30      	cmp	r3, #48	; 0x30
 800afd4:	d01f      	beq.n	800b016 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800afd6:	2b30      	cmp	r3, #48	; 0x30
 800afd8:	d819      	bhi.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d00c      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800afde:	2b20      	cmp	r3, #32
 800afe0:	d815      	bhi.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d019      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800afe6:	2b10      	cmp	r3, #16
 800afe8:	d111      	bne.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afea:	4baa      	ldr	r3, [pc, #680]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800afec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afee:	4aa9      	ldr	r2, [pc, #676]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aff4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aff6:	e011      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affc:	3308      	adds	r3, #8
 800affe:	2102      	movs	r1, #2
 800b000:	4618      	mov	r0, r3
 800b002:	f002 f8cd 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b006:	4603      	mov	r3, r0
 800b008:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b00c:	e006      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b014:	e002      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b016:	bf00      	nop
 800b018:	e000      	b.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b01a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b01c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10a      	bne.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b024:	4b9b      	ldr	r3, [pc, #620]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b028:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b032:	4a98      	ldr	r2, [pc, #608]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b034:	430b      	orrs	r3, r1
 800b036:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b038:	e003      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b03a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b03e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b04e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b052:	2300      	movs	r3, #0
 800b054:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b058:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b05c:	460b      	mov	r3, r1
 800b05e:	4313      	orrs	r3, r2
 800b060:	d051      	beq.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b06c:	d035      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b06e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b072:	d82e      	bhi.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b074:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b078:	d031      	beq.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b07a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b07e:	d828      	bhi.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b084:	d01a      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b086:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b08a:	d822      	bhi.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d003      	beq.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b094:	d007      	beq.n	800b0a6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b096:	e01c      	b.n	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b098:	4b7e      	ldr	r3, [pc, #504]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09c:	4a7d      	ldr	r2, [pc, #500]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b09e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0a4:	e01c      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0aa:	3308      	adds	r3, #8
 800b0ac:	2100      	movs	r1, #0
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	f002 f876 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0ba:	e011      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c0:	3328      	adds	r3, #40	; 0x28
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f002 f91d 	bl	800d304 <RCCEx_PLL3_Config>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b0d0:	e006      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0d8:	e002      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b0da:	bf00      	nop
 800b0dc:	e000      	b.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b0de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d10a      	bne.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b0e8:	4b6a      	ldr	r3, [pc, #424]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ec:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b0f6:	4a67      	ldr	r2, [pc, #412]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0f8:	430b      	orrs	r3, r1
 800b0fa:	6513      	str	r3, [r2, #80]	; 0x50
 800b0fc:	e003      	b.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b102:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b112:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b116:	2300      	movs	r3, #0
 800b118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b11c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b120:	460b      	mov	r3, r1
 800b122:	4313      	orrs	r3, r2
 800b124:	d053      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b12c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b130:	d033      	beq.n	800b19a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b132:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b136:	d82c      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b138:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b13c:	d02f      	beq.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b13e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b142:	d826      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b144:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b148:	d02b      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b14a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b14e:	d820      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b150:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b154:	d012      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b156:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b15a:	d81a      	bhi.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d022      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b164:	d115      	bne.n	800b192 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16a:	3308      	adds	r3, #8
 800b16c:	2101      	movs	r1, #1
 800b16e:	4618      	mov	r0, r3
 800b170:	f002 f816 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b174:	4603      	mov	r3, r0
 800b176:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b17a:	e015      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b180:	3328      	adds	r3, #40	; 0x28
 800b182:	2101      	movs	r1, #1
 800b184:	4618      	mov	r0, r3
 800b186:	f002 f8bd 	bl	800d304 <RCCEx_PLL3_Config>
 800b18a:	4603      	mov	r3, r0
 800b18c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b190:	e00a      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b198:	e006      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b19a:	bf00      	nop
 800b19c:	e004      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b19e:	bf00      	nop
 800b1a0:	e002      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b1a2:	bf00      	nop
 800b1a4:	e000      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b1a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d10a      	bne.n	800b1c6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b1b0:	4b38      	ldr	r3, [pc, #224]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1b4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b1b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1be:	4a35      	ldr	r2, [pc, #212]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b1c0:	430b      	orrs	r3, r1
 800b1c2:	6513      	str	r3, [r2, #80]	; 0x50
 800b1c4:	e003      	b.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b1da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b1de:	2300      	movs	r3, #0
 800b1e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b1e4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	d058      	beq.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b1f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1fa:	d033      	beq.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b1fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b200:	d82c      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b206:	d02f      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b20c:	d826      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b20e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b212:	d02b      	beq.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b214:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b218:	d820      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b21a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b21e:	d012      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b224:	d81a      	bhi.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b226:	2b00      	cmp	r3, #0
 800b228:	d022      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b22a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b22e:	d115      	bne.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b234:	3308      	adds	r3, #8
 800b236:	2101      	movs	r1, #1
 800b238:	4618      	mov	r0, r3
 800b23a:	f001 ffb1 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b23e:	4603      	mov	r3, r0
 800b240:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b244:	e015      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b24a:	3328      	adds	r3, #40	; 0x28
 800b24c:	2101      	movs	r1, #1
 800b24e:	4618      	mov	r0, r3
 800b250:	f002 f858 	bl	800d304 <RCCEx_PLL3_Config>
 800b254:	4603      	mov	r3, r0
 800b256:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b25a:	e00a      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b262:	e006      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b264:	bf00      	nop
 800b266:	e004      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b268:	bf00      	nop
 800b26a:	e002      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b26c:	bf00      	nop
 800b26e:	e000      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b270:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b272:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10e      	bne.n	800b298 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b27a:	4b06      	ldr	r3, [pc, #24]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b27e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b282:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b286:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b28a:	4a02      	ldr	r2, [pc, #8]	; (800b294 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b28c:	430b      	orrs	r3, r1
 800b28e:	6593      	str	r3, [r2, #88]	; 0x58
 800b290:	e006      	b.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b292:	bf00      	nop
 800b294:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b298:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b29c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b2ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b2b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	d037      	beq.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ca:	d00e      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b2cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2d0:	d816      	bhi.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d018      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b2d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2da:	d111      	bne.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2dc:	4bc4      	ldr	r3, [pc, #784]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2e0:	4ac3      	ldr	r2, [pc, #780]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2e8:	e00f      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ee:	3308      	adds	r3, #8
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f001 ff54 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b2fe:	e004      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b306:	e000      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b30a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b312:	4bb7      	ldr	r3, [pc, #732]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b316:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b31e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b320:	4ab3      	ldr	r2, [pc, #716]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b322:	430b      	orrs	r3, r1
 800b324:	6513      	str	r3, [r2, #80]	; 0x50
 800b326:	e003      	b.n	800b330 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b328:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b32c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b33c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b340:	2300      	movs	r3, #0
 800b342:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b346:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b34a:	460b      	mov	r3, r1
 800b34c:	4313      	orrs	r3, r2
 800b34e:	d039      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b356:	2b03      	cmp	r3, #3
 800b358:	d81c      	bhi.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b35a:	a201      	add	r2, pc, #4	; (adr r2, 800b360 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b35c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b360:	0800b39d 	.word	0x0800b39d
 800b364:	0800b371 	.word	0x0800b371
 800b368:	0800b37f 	.word	0x0800b37f
 800b36c:	0800b39d 	.word	0x0800b39d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b370:	4b9f      	ldr	r3, [pc, #636]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b374:	4a9e      	ldr	r2, [pc, #632]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b37a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b37c:	e00f      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b382:	3308      	adds	r3, #8
 800b384:	2102      	movs	r1, #2
 800b386:	4618      	mov	r0, r3
 800b388:	f001 ff0a 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b38c:	4603      	mov	r3, r0
 800b38e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b392:	e004      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b394:	2301      	movs	r3, #1
 800b396:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b39a:	e000      	b.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b39c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b39e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d10a      	bne.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b3a6:	4b92      	ldr	r3, [pc, #584]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3aa:	f023 0103 	bic.w	r1, r3, #3
 800b3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3b4:	4a8e      	ldr	r2, [pc, #568]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b3b6:	430b      	orrs	r3, r1
 800b3b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3ba:	e003      	b.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3cc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b3d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3da:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	f000 8099 	beq.w	800b518 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b3e6:	4b83      	ldr	r3, [pc, #524]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a82      	ldr	r2, [pc, #520]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b3ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3f2:	f7f7 fb51 	bl	8002a98 <HAL_GetTick>
 800b3f6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3fa:	e00b      	b.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3fc:	f7f7 fb4c 	bl	8002a98 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	2b64      	cmp	r3, #100	; 0x64
 800b40a:	d903      	bls.n	800b414 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b40c:	2303      	movs	r3, #3
 800b40e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b412:	e005      	b.n	800b420 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b414:	4b77      	ldr	r3, [pc, #476]	; (800b5f4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d0ed      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b420:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b424:	2b00      	cmp	r3, #0
 800b426:	d173      	bne.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b428:	4b71      	ldr	r3, [pc, #452]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b42a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b434:	4053      	eors	r3, r2
 800b436:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d015      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b43e:	4b6c      	ldr	r3, [pc, #432]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b446:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b44a:	4b69      	ldr	r3, [pc, #420]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b44c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b44e:	4a68      	ldr	r2, [pc, #416]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b454:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b456:	4b66      	ldr	r3, [pc, #408]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b45a:	4a65      	ldr	r2, [pc, #404]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b45c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b460:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b462:	4a63      	ldr	r2, [pc, #396]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b468:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b46e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b476:	d118      	bne.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b478:	f7f7 fb0e 	bl	8002a98 <HAL_GetTick>
 800b47c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b480:	e00d      	b.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b482:	f7f7 fb09 	bl	8002a98 <HAL_GetTick>
 800b486:	4602      	mov	r2, r0
 800b488:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b48c:	1ad2      	subs	r2, r2, r3
 800b48e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b492:	429a      	cmp	r2, r3
 800b494:	d903      	bls.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b496:	2303      	movs	r3, #3
 800b498:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b49c:	e005      	b.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b49e:	4b54      	ldr	r3, [pc, #336]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4a2:	f003 0302 	and.w	r3, r3, #2
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d0eb      	beq.n	800b482 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b4aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d129      	bne.n	800b506 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4c2:	d10e      	bne.n	800b4e2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b4c4:	4b4a      	ldr	r3, [pc, #296]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4d4:	091a      	lsrs	r2, r3, #4
 800b4d6:	4b48      	ldr	r3, [pc, #288]	; (800b5f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b4d8:	4013      	ands	r3, r2
 800b4da:	4a45      	ldr	r2, [pc, #276]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4dc:	430b      	orrs	r3, r1
 800b4de:	6113      	str	r3, [r2, #16]
 800b4e0:	e005      	b.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b4e2:	4b43      	ldr	r3, [pc, #268]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	4a42      	ldr	r2, [pc, #264]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b4ec:	6113      	str	r3, [r2, #16]
 800b4ee:	4b40      	ldr	r3, [pc, #256]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b4f0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b4fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b4fe:	4a3c      	ldr	r2, [pc, #240]	; (800b5f0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b500:	430b      	orrs	r3, r1
 800b502:	6713      	str	r3, [r2, #112]	; 0x70
 800b504:	e008      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b506:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b50a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b50e:	e003      	b.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b510:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b514:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b520:	f002 0301 	and.w	r3, r2, #1
 800b524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b528:	2300      	movs	r3, #0
 800b52a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b52e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b532:	460b      	mov	r3, r1
 800b534:	4313      	orrs	r3, r2
 800b536:	f000 808f 	beq.w	800b658 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b540:	2b28      	cmp	r3, #40	; 0x28
 800b542:	d871      	bhi.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b544:	a201      	add	r2, pc, #4	; (adr r2, 800b54c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54a:	bf00      	nop
 800b54c:	0800b631 	.word	0x0800b631
 800b550:	0800b629 	.word	0x0800b629
 800b554:	0800b629 	.word	0x0800b629
 800b558:	0800b629 	.word	0x0800b629
 800b55c:	0800b629 	.word	0x0800b629
 800b560:	0800b629 	.word	0x0800b629
 800b564:	0800b629 	.word	0x0800b629
 800b568:	0800b629 	.word	0x0800b629
 800b56c:	0800b5fd 	.word	0x0800b5fd
 800b570:	0800b629 	.word	0x0800b629
 800b574:	0800b629 	.word	0x0800b629
 800b578:	0800b629 	.word	0x0800b629
 800b57c:	0800b629 	.word	0x0800b629
 800b580:	0800b629 	.word	0x0800b629
 800b584:	0800b629 	.word	0x0800b629
 800b588:	0800b629 	.word	0x0800b629
 800b58c:	0800b613 	.word	0x0800b613
 800b590:	0800b629 	.word	0x0800b629
 800b594:	0800b629 	.word	0x0800b629
 800b598:	0800b629 	.word	0x0800b629
 800b59c:	0800b629 	.word	0x0800b629
 800b5a0:	0800b629 	.word	0x0800b629
 800b5a4:	0800b629 	.word	0x0800b629
 800b5a8:	0800b629 	.word	0x0800b629
 800b5ac:	0800b631 	.word	0x0800b631
 800b5b0:	0800b629 	.word	0x0800b629
 800b5b4:	0800b629 	.word	0x0800b629
 800b5b8:	0800b629 	.word	0x0800b629
 800b5bc:	0800b629 	.word	0x0800b629
 800b5c0:	0800b629 	.word	0x0800b629
 800b5c4:	0800b629 	.word	0x0800b629
 800b5c8:	0800b629 	.word	0x0800b629
 800b5cc:	0800b631 	.word	0x0800b631
 800b5d0:	0800b629 	.word	0x0800b629
 800b5d4:	0800b629 	.word	0x0800b629
 800b5d8:	0800b629 	.word	0x0800b629
 800b5dc:	0800b629 	.word	0x0800b629
 800b5e0:	0800b629 	.word	0x0800b629
 800b5e4:	0800b629 	.word	0x0800b629
 800b5e8:	0800b629 	.word	0x0800b629
 800b5ec:	0800b631 	.word	0x0800b631
 800b5f0:	58024400 	.word	0x58024400
 800b5f4:	58024800 	.word	0x58024800
 800b5f8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b600:	3308      	adds	r3, #8
 800b602:	2101      	movs	r1, #1
 800b604:	4618      	mov	r0, r3
 800b606:	f001 fdcb 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b60a:	4603      	mov	r3, r0
 800b60c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b610:	e00f      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	3328      	adds	r3, #40	; 0x28
 800b618:	2101      	movs	r1, #1
 800b61a:	4618      	mov	r0, r3
 800b61c:	f001 fe72 	bl	800d304 <RCCEx_PLL3_Config>
 800b620:	4603      	mov	r3, r0
 800b622:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b626:	e004      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b628:	2301      	movs	r3, #1
 800b62a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b62e:	e000      	b.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b630:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b632:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10a      	bne.n	800b650 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b63a:	4bbf      	ldr	r3, [pc, #764]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b63e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b646:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b648:	4abb      	ldr	r2, [pc, #748]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b64a:	430b      	orrs	r3, r1
 800b64c:	6553      	str	r3, [r2, #84]	; 0x54
 800b64e:	e003      	b.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b650:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b654:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f002 0302 	and.w	r3, r2, #2
 800b664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b668:	2300      	movs	r3, #0
 800b66a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b66e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b672:	460b      	mov	r3, r1
 800b674:	4313      	orrs	r3, r2
 800b676:	d041      	beq.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b67e:	2b05      	cmp	r3, #5
 800b680:	d824      	bhi.n	800b6cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b682:	a201      	add	r2, pc, #4	; (adr r2, 800b688 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b688:	0800b6d5 	.word	0x0800b6d5
 800b68c:	0800b6a1 	.word	0x0800b6a1
 800b690:	0800b6b7 	.word	0x0800b6b7
 800b694:	0800b6d5 	.word	0x0800b6d5
 800b698:	0800b6d5 	.word	0x0800b6d5
 800b69c:	0800b6d5 	.word	0x0800b6d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a4:	3308      	adds	r3, #8
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 fd79 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b6b4:	e00f      	b.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ba:	3328      	adds	r3, #40	; 0x28
 800b6bc:	2101      	movs	r1, #1
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f001 fe20 	bl	800d304 <RCCEx_PLL3_Config>
 800b6c4:	4603      	mov	r3, r0
 800b6c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b6ca:	e004      	b.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6d2:	e000      	b.n	800b6d6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b6d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10a      	bne.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b6de:	4b96      	ldr	r3, [pc, #600]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e2:	f023 0107 	bic.w	r1, r3, #7
 800b6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ec:	4a92      	ldr	r2, [pc, #584]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6ee:	430b      	orrs	r3, r1
 800b6f0:	6553      	str	r3, [r2, #84]	; 0x54
 800b6f2:	e003      	b.n	800b6fc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b6fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b704:	f002 0304 	and.w	r3, r2, #4
 800b708:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b70c:	2300      	movs	r3, #0
 800b70e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b712:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b716:	460b      	mov	r3, r1
 800b718:	4313      	orrs	r3, r2
 800b71a:	d044      	beq.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b71c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b724:	2b05      	cmp	r3, #5
 800b726:	d825      	bhi.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b728:	a201      	add	r2, pc, #4	; (adr r2, 800b730 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72e:	bf00      	nop
 800b730:	0800b77d 	.word	0x0800b77d
 800b734:	0800b749 	.word	0x0800b749
 800b738:	0800b75f 	.word	0x0800b75f
 800b73c:	0800b77d 	.word	0x0800b77d
 800b740:	0800b77d 	.word	0x0800b77d
 800b744:	0800b77d 	.word	0x0800b77d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74c:	3308      	adds	r3, #8
 800b74e:	2101      	movs	r1, #1
 800b750:	4618      	mov	r0, r3
 800b752:	f001 fd25 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b756:	4603      	mov	r3, r0
 800b758:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b75c:	e00f      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b762:	3328      	adds	r3, #40	; 0x28
 800b764:	2101      	movs	r1, #1
 800b766:	4618      	mov	r0, r3
 800b768:	f001 fdcc 	bl	800d304 <RCCEx_PLL3_Config>
 800b76c:	4603      	mov	r3, r0
 800b76e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b772:	e004      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b774:	2301      	movs	r3, #1
 800b776:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b77a:	e000      	b.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b77c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b77e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b782:	2b00      	cmp	r3, #0
 800b784:	d10b      	bne.n	800b79e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b786:	4b6c      	ldr	r3, [pc, #432]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b78a:	f023 0107 	bic.w	r1, r3, #7
 800b78e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b796:	4a68      	ldr	r2, [pc, #416]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b798:	430b      	orrs	r3, r1
 800b79a:	6593      	str	r3, [r2, #88]	; 0x58
 800b79c:	e003      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	f002 0320 	and.w	r3, r2, #32
 800b7b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b7bc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	4313      	orrs	r3, r2
 800b7c4:	d055      	beq.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7d2:	d033      	beq.n	800b83c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b7d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7d8:	d82c      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7de:	d02f      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b7e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7e4:	d826      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7ea:	d02b      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b7ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b7f0:	d820      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7f6:	d012      	beq.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b7f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7fc:	d81a      	bhi.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d022      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b806:	d115      	bne.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80c:	3308      	adds	r3, #8
 800b80e:	2100      	movs	r1, #0
 800b810:	4618      	mov	r0, r3
 800b812:	f001 fcc5 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b816:	4603      	mov	r3, r0
 800b818:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b81c:	e015      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b822:	3328      	adds	r3, #40	; 0x28
 800b824:	2102      	movs	r1, #2
 800b826:	4618      	mov	r0, r3
 800b828:	f001 fd6c 	bl	800d304 <RCCEx_PLL3_Config>
 800b82c:	4603      	mov	r3, r0
 800b82e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b832:	e00a      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b834:	2301      	movs	r3, #1
 800b836:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b83a:	e006      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b83c:	bf00      	nop
 800b83e:	e004      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b840:	bf00      	nop
 800b842:	e002      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b844:	bf00      	nop
 800b846:	e000      	b.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b84a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d10b      	bne.n	800b86a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b852:	4b39      	ldr	r3, [pc, #228]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b856:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b862:	4a35      	ldr	r2, [pc, #212]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b864:	430b      	orrs	r3, r1
 800b866:	6553      	str	r3, [r2, #84]	; 0x54
 800b868:	e003      	b.n	800b872 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b86a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b86e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b87e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b882:	2300      	movs	r3, #0
 800b884:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b888:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b88c:	460b      	mov	r3, r1
 800b88e:	4313      	orrs	r3, r2
 800b890:	d058      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b89a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b89e:	d033      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b8a0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b8a4:	d82c      	bhi.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8aa:	d02f      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b8ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8b0:	d826      	bhi.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8b6:	d02b      	beq.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b8b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8bc:	d820      	bhi.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8c2:	d012      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b8c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8c8:	d81a      	bhi.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d022      	beq.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b8ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d2:	d115      	bne.n	800b900 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d8:	3308      	adds	r3, #8
 800b8da:	2100      	movs	r1, #0
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f001 fc5f 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8e8:	e015      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ee:	3328      	adds	r3, #40	; 0x28
 800b8f0:	2102      	movs	r1, #2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f001 fd06 	bl	800d304 <RCCEx_PLL3_Config>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b8fe:	e00a      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b900:	2301      	movs	r3, #1
 800b902:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b906:	e006      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b908:	bf00      	nop
 800b90a:	e004      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b90c:	bf00      	nop
 800b90e:	e002      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b910:	bf00      	nop
 800b912:	e000      	b.n	800b916 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b914:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b916:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d10e      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b91e:	4b06      	ldr	r3, [pc, #24]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b922:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b92a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b92e:	4a02      	ldr	r2, [pc, #8]	; (800b938 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b930:	430b      	orrs	r3, r1
 800b932:	6593      	str	r3, [r2, #88]	; 0x58
 800b934:	e006      	b.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b936:	bf00      	nop
 800b938:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b940:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b950:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b954:	2300      	movs	r3, #0
 800b956:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b95a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b95e:	460b      	mov	r3, r1
 800b960:	4313      	orrs	r3, r2
 800b962:	d055      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b968:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b96c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b970:	d033      	beq.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b972:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b976:	d82c      	bhi.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b97c:	d02f      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b97e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b982:	d826      	bhi.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b984:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b988:	d02b      	beq.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b98a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b98e:	d820      	bhi.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b990:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b994:	d012      	beq.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b996:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b99a:	d81a      	bhi.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d022      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b9a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b9a4:	d115      	bne.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9aa:	3308      	adds	r3, #8
 800b9ac:	2100      	movs	r1, #0
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f001 fbf6 	bl	800d1a0 <RCCEx_PLL2_Config>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9ba:	e015      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c0:	3328      	adds	r3, #40	; 0x28
 800b9c2:	2102      	movs	r1, #2
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f001 fc9d 	bl	800d304 <RCCEx_PLL3_Config>
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b9d0:	e00a      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9d8:	e006      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9da:	bf00      	nop
 800b9dc:	e004      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9de:	bf00      	nop
 800b9e0:	e002      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9e2:	bf00      	nop
 800b9e4:	e000      	b.n	800b9e8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b9e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d10b      	bne.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b9f0:	4ba0      	ldr	r3, [pc, #640]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9f4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba00:	4a9c      	ldr	r2, [pc, #624]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba02:	430b      	orrs	r3, r1
 800ba04:	6593      	str	r3, [r2, #88]	; 0x58
 800ba06:	e003      	b.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ba10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f002 0308 	and.w	r3, r2, #8
 800ba1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ba20:	2300      	movs	r3, #0
 800ba22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ba26:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	d01e      	beq.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ba30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba3c:	d10c      	bne.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba42:	3328      	adds	r3, #40	; 0x28
 800ba44:	2102      	movs	r1, #2
 800ba46:	4618      	mov	r0, r3
 800ba48:	f001 fc5c 	bl	800d304 <RCCEx_PLL3_Config>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d002      	beq.n	800ba58 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ba58:	4b86      	ldr	r3, [pc, #536]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba5c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba68:	4a82      	ldr	r2, [pc, #520]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba6a:	430b      	orrs	r3, r1
 800ba6c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba76:	f002 0310 	and.w	r3, r2, #16
 800ba7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ba7e:	2300      	movs	r3, #0
 800ba80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ba84:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800ba88:	460b      	mov	r3, r1
 800ba8a:	4313      	orrs	r3, r2
 800ba8c:	d01e      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ba8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba9a:	d10c      	bne.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa0:	3328      	adds	r3, #40	; 0x28
 800baa2:	2102      	movs	r1, #2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f001 fc2d 	bl	800d304 <RCCEx_PLL3_Config>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bab6:	4b6f      	ldr	r3, [pc, #444]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800babe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bac6:	4a6b      	ldr	r2, [pc, #428]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bac8:	430b      	orrs	r3, r1
 800baca:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bad8:	67bb      	str	r3, [r7, #120]	; 0x78
 800bada:	2300      	movs	r3, #0
 800badc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bade:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bae2:	460b      	mov	r3, r1
 800bae4:	4313      	orrs	r3, r2
 800bae6:	d03e      	beq.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800baf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baf4:	d022      	beq.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800baf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bafa:	d81b      	bhi.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800bb00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb04:	d00b      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800bb06:	e015      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb0c:	3308      	adds	r3, #8
 800bb0e:	2100      	movs	r1, #0
 800bb10:	4618      	mov	r0, r3
 800bb12:	f001 fb45 	bl	800d1a0 <RCCEx_PLL2_Config>
 800bb16:	4603      	mov	r3, r0
 800bb18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb1c:	e00f      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb22:	3328      	adds	r3, #40	; 0x28
 800bb24:	2102      	movs	r1, #2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f001 fbec 	bl	800d304 <RCCEx_PLL3_Config>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bb32:	e004      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb3a:	e000      	b.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800bb3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d10b      	bne.n	800bb5e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bb46:	4b4b      	ldr	r3, [pc, #300]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bb4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb56:	4a47      	ldr	r2, [pc, #284]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bb58:	430b      	orrs	r3, r1
 800bb5a:	6593      	str	r3, [r2, #88]	; 0x58
 800bb5c:	e003      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb62:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb6e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bb72:	673b      	str	r3, [r7, #112]	; 0x70
 800bb74:	2300      	movs	r3, #0
 800bb76:	677b      	str	r3, [r7, #116]	; 0x74
 800bb78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	d03b      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bb82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb8a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb8e:	d01f      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800bb90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bb94:	d818      	bhi.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bb96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb9a:	d003      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bb9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bba0:	d007      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800bba2:	e011      	b.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bba4:	4b33      	ldr	r3, [pc, #204]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba8:	4a32      	ldr	r2, [pc, #200]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bbb0:	e00f      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb6:	3328      	adds	r3, #40	; 0x28
 800bbb8:	2101      	movs	r1, #1
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f001 fba2 	bl	800d304 <RCCEx_PLL3_Config>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bbc6:	e004      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bbce:	e000      	b.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bbd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10b      	bne.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bbda:	4b26      	ldr	r3, [pc, #152]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbde:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbea:	4a22      	ldr	r2, [pc, #136]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bbec:	430b      	orrs	r3, r1
 800bbee:	6553      	str	r3, [r2, #84]	; 0x54
 800bbf0:	e003      	b.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbf6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bbfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc02:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bc06:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc08:	2300      	movs	r3, #0
 800bc0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bc0c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bc10:	460b      	mov	r3, r1
 800bc12:	4313      	orrs	r3, r2
 800bc14:	d034      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bc16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d003      	beq.n	800bc28 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bc20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc24:	d007      	beq.n	800bc36 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bc26:	e011      	b.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc28:	4b12      	ldr	r3, [pc, #72]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2c:	4a11      	ldr	r2, [pc, #68]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc34:	e00e      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	2102      	movs	r1, #2
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f001 faae 	bl	800d1a0 <RCCEx_PLL2_Config>
 800bc44:	4603      	mov	r3, r0
 800bc46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bc4a:	e003      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc52:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d10d      	bne.n	800bc78 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bc5c:	4b05      	ldr	r3, [pc, #20]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc6a:	4a02      	ldr	r2, [pc, #8]	; (800bc74 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bc6c:	430b      	orrs	r3, r1
 800bc6e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc70:	e006      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bc72:	bf00      	nop
 800bc74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bc80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc88:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bc8c:	663b      	str	r3, [r7, #96]	; 0x60
 800bc8e:	2300      	movs	r3, #0
 800bc90:	667b      	str	r3, [r7, #100]	; 0x64
 800bc92:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bc96:	460b      	mov	r3, r1
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	d00c      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bc9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bca0:	3328      	adds	r3, #40	; 0x28
 800bca2:	2102      	movs	r1, #2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f001 fb2d 	bl	800d304 <RCCEx_PLL3_Config>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d002      	beq.n	800bcb6 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bcb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcbe:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bcc2:	65bb      	str	r3, [r7, #88]	; 0x58
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcc8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bccc:	460b      	mov	r3, r1
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	d036      	beq.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bcd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcdc:	d018      	beq.n	800bd10 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bcde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bce2:	d811      	bhi.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bce8:	d014      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bcea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcee:	d80b      	bhi.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d011      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bcf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcf8:	d106      	bne.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcfa:	4bb7      	ldr	r3, [pc, #732]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bcfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfe:	4ab6      	ldr	r2, [pc, #728]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bd06:	e008      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd08:	2301      	movs	r3, #1
 800bd0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd0e:	e004      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd10:	bf00      	nop
 800bd12:	e002      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd14:	bf00      	nop
 800bd16:	e000      	b.n	800bd1a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bd18:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd1a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d10a      	bne.n	800bd38 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bd22:	4bad      	ldr	r3, [pc, #692]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bd2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bd30:	4aa9      	ldr	r2, [pc, #676]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd32:	430b      	orrs	r3, r1
 800bd34:	6553      	str	r3, [r2, #84]	; 0x54
 800bd36:	e003      	b.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bd40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd48:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bd4c:	653b      	str	r3, [r7, #80]	; 0x50
 800bd4e:	2300      	movs	r3, #0
 800bd50:	657b      	str	r3, [r7, #84]	; 0x54
 800bd52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bd56:	460b      	mov	r3, r1
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	d009      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bd5c:	4b9e      	ldr	r3, [pc, #632]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd6a:	4a9b      	ldr	r2, [pc, #620]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd6c:	430b      	orrs	r3, r1
 800bd6e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bd7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd7e:	2300      	movs	r3, #0
 800bd80:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd82:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bd86:	460b      	mov	r3, r1
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	d009      	beq.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bd8c:	4b92      	ldr	r3, [pc, #584]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd90:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bd94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd9a:	4a8f      	ldr	r2, [pc, #572]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bd9c:	430b      	orrs	r3, r1
 800bd9e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bdac:	643b      	str	r3, [r7, #64]	; 0x40
 800bdae:	2300      	movs	r3, #0
 800bdb0:	647b      	str	r3, [r7, #68]	; 0x44
 800bdb2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	d00e      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bdbc:	4b86      	ldr	r3, [pc, #536]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	4a85      	ldr	r2, [pc, #532]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bdc6:	6113      	str	r3, [r2, #16]
 800bdc8:	4b83      	ldr	r3, [pc, #524]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdca:	6919      	ldr	r1, [r3, #16]
 800bdcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bdd4:	4a80      	ldr	r2, [pc, #512]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdd6:	430b      	orrs	r3, r1
 800bdd8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bdda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bde6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bde8:	2300      	movs	r3, #0
 800bdea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	d009      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bdf6:	4b78      	ldr	r3, [pc, #480]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bdf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdfa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bdfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be04:	4a74      	ldr	r2, [pc, #464]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be06:	430b      	orrs	r3, r1
 800be08:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800be0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800be16:	633b      	str	r3, [r7, #48]	; 0x30
 800be18:	2300      	movs	r3, #0
 800be1a:	637b      	str	r3, [r7, #52]	; 0x34
 800be1c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800be20:	460b      	mov	r3, r1
 800be22:	4313      	orrs	r3, r2
 800be24:	d00a      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800be26:	4b6c      	ldr	r3, [pc, #432]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be2a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800be2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be36:	4a68      	ldr	r2, [pc, #416]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800be38:	430b      	orrs	r3, r1
 800be3a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800be3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	2100      	movs	r1, #0
 800be46:	62b9      	str	r1, [r7, #40]	; 0x28
 800be48:	f003 0301 	and.w	r3, r3, #1
 800be4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be4e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800be52:	460b      	mov	r3, r1
 800be54:	4313      	orrs	r3, r2
 800be56:	d011      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be5c:	3308      	adds	r3, #8
 800be5e:	2100      	movs	r1, #0
 800be60:	4618      	mov	r0, r3
 800be62:	f001 f99d 	bl	800d1a0 <RCCEx_PLL2_Config>
 800be66:	4603      	mov	r3, r0
 800be68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800be6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be70:	2b00      	cmp	r3, #0
 800be72:	d003      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800be7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be84:	2100      	movs	r1, #0
 800be86:	6239      	str	r1, [r7, #32]
 800be88:	f003 0302 	and.w	r3, r3, #2
 800be8c:	627b      	str	r3, [r7, #36]	; 0x24
 800be8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800be92:	460b      	mov	r3, r1
 800be94:	4313      	orrs	r3, r2
 800be96:	d011      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be9c:	3308      	adds	r3, #8
 800be9e:	2101      	movs	r1, #1
 800bea0:	4618      	mov	r0, r3
 800bea2:	f001 f97d 	bl	800d1a0 <RCCEx_PLL2_Config>
 800bea6:	4603      	mov	r3, r0
 800bea8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800beac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d003      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800beb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	2100      	movs	r1, #0
 800bec6:	61b9      	str	r1, [r7, #24]
 800bec8:	f003 0304 	and.w	r3, r3, #4
 800becc:	61fb      	str	r3, [r7, #28]
 800bece:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bed2:	460b      	mov	r3, r1
 800bed4:	4313      	orrs	r3, r2
 800bed6:	d011      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bedc:	3308      	adds	r3, #8
 800bede:	2102      	movs	r1, #2
 800bee0:	4618      	mov	r0, r3
 800bee2:	f001 f95d 	bl	800d1a0 <RCCEx_PLL2_Config>
 800bee6:	4603      	mov	r3, r0
 800bee8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800beec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d003      	beq.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bef8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800befc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf04:	2100      	movs	r1, #0
 800bf06:	6139      	str	r1, [r7, #16]
 800bf08:	f003 0308 	and.w	r3, r3, #8
 800bf0c:	617b      	str	r3, [r7, #20]
 800bf0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bf12:	460b      	mov	r3, r1
 800bf14:	4313      	orrs	r3, r2
 800bf16:	d011      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bf18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf1c:	3328      	adds	r3, #40	; 0x28
 800bf1e:	2100      	movs	r1, #0
 800bf20:	4618      	mov	r0, r3
 800bf22:	f001 f9ef 	bl	800d304 <RCCEx_PLL3_Config>
 800bf26:	4603      	mov	r3, r0
 800bf28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bf2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bf3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf44:	2100      	movs	r1, #0
 800bf46:	60b9      	str	r1, [r7, #8]
 800bf48:	f003 0310 	and.w	r3, r3, #16
 800bf4c:	60fb      	str	r3, [r7, #12]
 800bf4e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bf52:	460b      	mov	r3, r1
 800bf54:	4313      	orrs	r3, r2
 800bf56:	d011      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf5c:	3328      	adds	r3, #40	; 0x28
 800bf5e:	2101      	movs	r1, #1
 800bf60:	4618      	mov	r0, r3
 800bf62:	f001 f9cf 	bl	800d304 <RCCEx_PLL3_Config>
 800bf66:	4603      	mov	r3, r0
 800bf68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bf6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d003      	beq.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf78:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bf7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	2100      	movs	r1, #0
 800bf86:	6039      	str	r1, [r7, #0]
 800bf88:	f003 0320 	and.w	r3, r3, #32
 800bf8c:	607b      	str	r3, [r7, #4]
 800bf8e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bf92:	460b      	mov	r3, r1
 800bf94:	4313      	orrs	r3, r2
 800bf96:	d011      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bf98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf9c:	3328      	adds	r3, #40	; 0x28
 800bf9e:	2102      	movs	r1, #2
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f001 f9af 	bl	800d304 <RCCEx_PLL3_Config>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bfac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d003      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bfb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bfbc:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	e000      	b.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bfc8:	2301      	movs	r3, #1
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bfd6:	bf00      	nop
 800bfd8:	58024400 	.word	0x58024400

0800bfdc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b090      	sub	sp, #64	; 0x40
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bfe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfea:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bfee:	430b      	orrs	r3, r1
 800bff0:	f040 8094 	bne.w	800c11c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bff4:	4b9b      	ldr	r3, [pc, #620]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff8:	f003 0307 	and.w	r3, r3, #7
 800bffc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c000:	2b04      	cmp	r3, #4
 800c002:	f200 8087 	bhi.w	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c006:	a201      	add	r2, pc, #4	; (adr r2, 800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00c:	0800c021 	.word	0x0800c021
 800c010:	0800c049 	.word	0x0800c049
 800c014:	0800c071 	.word	0x0800c071
 800c018:	0800c10d 	.word	0x0800c10d
 800c01c:	0800c099 	.word	0x0800c099
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c020:	4b90      	ldr	r3, [pc, #576]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c028:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c02c:	d108      	bne.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c02e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c032:	4618      	mov	r0, r3
 800c034:	f000 ff62 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c03c:	f000 bc93 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c044:	f000 bc8f 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c048:	4b86      	ldr	r3, [pc, #536]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c050:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c054:	d108      	bne.n	800c068 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c056:	f107 0318 	add.w	r3, r7, #24
 800c05a:	4618      	mov	r0, r3
 800c05c:	f000 fca6 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c064:	f000 bc7f 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c068:	2300      	movs	r3, #0
 800c06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c06c:	f000 bc7b 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c070:	4b7c      	ldr	r3, [pc, #496]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c07c:	d108      	bne.n	800c090 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c07e:	f107 030c 	add.w	r3, r7, #12
 800c082:	4618      	mov	r0, r3
 800c084:	f000 fde6 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c08c:	f000 bc6b 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c090:	2300      	movs	r3, #0
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c094:	f000 bc67 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c098:	4b72      	ldr	r3, [pc, #456]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c09a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c09c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c0a2:	4b70      	ldr	r3, [pc, #448]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 0304 	and.w	r3, r3, #4
 800c0aa:	2b04      	cmp	r3, #4
 800c0ac:	d10c      	bne.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c0ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d109      	bne.n	800c0c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0b4:	4b6b      	ldr	r3, [pc, #428]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	08db      	lsrs	r3, r3, #3
 800c0ba:	f003 0303 	and.w	r3, r3, #3
 800c0be:	4a6a      	ldr	r2, [pc, #424]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c0c0:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0c6:	e01f      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c0c8:	4b66      	ldr	r3, [pc, #408]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0d4:	d106      	bne.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0dc:	d102      	bne.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c0de:	4b63      	ldr	r3, [pc, #396]	; (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0e2:	e011      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c0e4:	4b5f      	ldr	r3, [pc, #380]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0f0:	d106      	bne.n	800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c0f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0f8:	d102      	bne.n	800c100 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c0fa:	4b5d      	ldr	r3, [pc, #372]	; (800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0fe:	e003      	b.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c104:	f000 bc2f 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c108:	f000 bc2d 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c10c:	4b59      	ldr	r3, [pc, #356]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c110:	f000 bc29 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c118:	f000 bc25 	b.w	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c11c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c120:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c124:	430b      	orrs	r3, r1
 800c126:	f040 80a7 	bne.w	800c278 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c12a:	4b4e      	ldr	r3, [pc, #312]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c12c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c12e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c132:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c136:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c13a:	d054      	beq.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c142:	f200 808b 	bhi.w	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c14c:	f000 8083 	beq.w	800c256 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c152:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c156:	f200 8081 	bhi.w	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c160:	d02f      	beq.n	800c1c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c164:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c168:	d878      	bhi.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d004      	beq.n	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c176:	d012      	beq.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c178:	e070      	b.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c17a:	4b3a      	ldr	r3, [pc, #232]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c186:	d107      	bne.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 feb5 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c196:	e3e6      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c19c:	e3e3      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c19e:	4b31      	ldr	r3, [pc, #196]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c1aa:	d107      	bne.n	800c1bc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1ac:	f107 0318 	add.w	r3, r7, #24
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f000 fbfb 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1b6:	69bb      	ldr	r3, [r7, #24]
 800c1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1ba:	e3d4      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1c0:	e3d1      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1c2:	4b28      	ldr	r3, [pc, #160]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1ce:	d107      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1d0:	f107 030c 	add.w	r3, r7, #12
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 fd3d 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1de:	e3c2      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1e4:	e3bf      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1e6:	4b1f      	ldr	r3, [pc, #124]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1ee:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1f0:	4b1c      	ldr	r3, [pc, #112]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	f003 0304 	and.w	r3, r3, #4
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	d10c      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d109      	bne.n	800c216 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c202:	4b18      	ldr	r3, [pc, #96]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	08db      	lsrs	r3, r3, #3
 800c208:	f003 0303 	and.w	r3, r3, #3
 800c20c:	4a16      	ldr	r2, [pc, #88]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c20e:	fa22 f303 	lsr.w	r3, r2, r3
 800c212:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c214:	e01e      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c216:	4b13      	ldr	r3, [pc, #76]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c21e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c222:	d106      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c226:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c22a:	d102      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c22c:	4b0f      	ldr	r3, [pc, #60]	; (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c230:	e010      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c232:	4b0c      	ldr	r3, [pc, #48]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c23a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c23e:	d106      	bne.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c242:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c246:	d102      	bne.n	800c24e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c248:	4b09      	ldr	r3, [pc, #36]	; (800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c24a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c24c:	e002      	b.n	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c24e:	2300      	movs	r3, #0
 800c250:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c252:	e388      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c254:	e387      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c256:	4b07      	ldr	r3, [pc, #28]	; (800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c25a:	e384      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c260:	e381      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c262:	bf00      	nop
 800c264:	58024400 	.word	0x58024400
 800c268:	03d09000 	.word	0x03d09000
 800c26c:	003d0900 	.word	0x003d0900
 800c270:	017d7840 	.word	0x017d7840
 800c274:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c27c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c280:	430b      	orrs	r3, r1
 800c282:	f040 809c 	bne.w	800c3be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c286:	4b9e      	ldr	r3, [pc, #632]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c28a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c28e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c296:	d054      	beq.n	800c342 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c29e:	f200 808b 	bhi.w	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c2a8:	f000 8083 	beq.w	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c2b2:	f200 8081 	bhi.w	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2bc:	d02f      	beq.n	800c31e <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2c4:	d878      	bhi.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d004      	beq.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c2d2:	d012      	beq.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c2d4:	e070      	b.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2d6:	4b8a      	ldr	r3, [pc, #552]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2e2:	d107      	bne.n	800c2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fe07 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f2:	e338      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2f8:	e335      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2fa:	4b81      	ldr	r3, [pc, #516]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c306:	d107      	bne.n	800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c308:	f107 0318 	add.w	r3, r7, #24
 800c30c:	4618      	mov	r0, r3
 800c30e:	f000 fb4d 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c312:	69bb      	ldr	r3, [r7, #24]
 800c314:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c316:	e326      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c31c:	e323      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c31e:	4b78      	ldr	r3, [pc, #480]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c326:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c32a:	d107      	bne.n	800c33c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c32c:	f107 030c 	add.w	r3, r7, #12
 800c330:	4618      	mov	r0, r3
 800c332:	f000 fc8f 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c33a:	e314      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c340:	e311      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c342:	4b6f      	ldr	r3, [pc, #444]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c34a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c34c:	4b6c      	ldr	r3, [pc, #432]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0304 	and.w	r3, r3, #4
 800c354:	2b04      	cmp	r3, #4
 800c356:	d10c      	bne.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d109      	bne.n	800c372 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c35e:	4b68      	ldr	r3, [pc, #416]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	08db      	lsrs	r3, r3, #3
 800c364:	f003 0303 	and.w	r3, r3, #3
 800c368:	4a66      	ldr	r2, [pc, #408]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c36a:	fa22 f303 	lsr.w	r3, r2, r3
 800c36e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c370:	e01e      	b.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c372:	4b63      	ldr	r3, [pc, #396]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c37e:	d106      	bne.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c386:	d102      	bne.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c388:	4b5f      	ldr	r3, [pc, #380]	; (800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c38a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c38c:	e010      	b.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c38e:	4b5c      	ldr	r3, [pc, #368]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c396:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c39a:	d106      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3a2:	d102      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c3a4:	4b59      	ldr	r3, [pc, #356]	; (800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3a8:	e002      	b.n	800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3ae:	e2da      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c3b0:	e2d9      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c3b2:	4b57      	ldr	r3, [pc, #348]	; (800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3b6:	e2d6      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3bc:	e2d3      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c3be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3c2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c3c6:	430b      	orrs	r3, r1
 800c3c8:	f040 80a7 	bne.w	800c51a <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c3cc:	4b4c      	ldr	r3, [pc, #304]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c3ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3d0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c3d4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3dc:	d055      	beq.n	800c48a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c3e4:	f200 8096 	bhi.w	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3ee:	f000 8084 	beq.w	800c4fa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c3f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c3f8:	f200 808c 	bhi.w	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c402:	d030      	beq.n	800c466 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c40a:	f200 8083 	bhi.w	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c41a:	d012      	beq.n	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c41c:	e07a      	b.n	800c514 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c41e:	4b38      	ldr	r3, [pc, #224]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c42a:	d107      	bne.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c42c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c430:	4618      	mov	r0, r3
 800c432:	f000 fd63 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c43a:	e294      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c440:	e291      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c442:	4b2f      	ldr	r3, [pc, #188]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c44a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c44e:	d107      	bne.n	800c460 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c450:	f107 0318 	add.w	r3, r7, #24
 800c454:	4618      	mov	r0, r3
 800c456:	f000 faa9 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c45a:	69bb      	ldr	r3, [r7, #24]
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c45e:	e282      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c460:	2300      	movs	r3, #0
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c464:	e27f      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c466:	4b26      	ldr	r3, [pc, #152]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c46e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c472:	d107      	bne.n	800c484 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c474:	f107 030c 	add.w	r3, r7, #12
 800c478:	4618      	mov	r0, r3
 800c47a:	f000 fbeb 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c482:	e270      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c488:	e26d      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c48a:	4b1d      	ldr	r3, [pc, #116]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c48c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c48e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c492:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c494:	4b1a      	ldr	r3, [pc, #104]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 0304 	and.w	r3, r3, #4
 800c49c:	2b04      	cmp	r3, #4
 800c49e:	d10c      	bne.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d109      	bne.n	800c4ba <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4a6:	4b16      	ldr	r3, [pc, #88]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	08db      	lsrs	r3, r3, #3
 800c4ac:	f003 0303 	and.w	r3, r3, #3
 800c4b0:	4a14      	ldr	r2, [pc, #80]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4b8:	e01e      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4ba:	4b11      	ldr	r3, [pc, #68]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4c6:	d106      	bne.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4ce:	d102      	bne.n	800c4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4d0:	4b0d      	ldr	r3, [pc, #52]	; (800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4d4:	e010      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4d6:	4b0a      	ldr	r3, [pc, #40]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4e2:	d106      	bne.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c4e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4ea:	d102      	bne.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4ec:	4b07      	ldr	r3, [pc, #28]	; (800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4f0:	e002      	b.n	800c4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4f6:	e236      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c4f8:	e235      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4fa:	4b05      	ldr	r3, [pc, #20]	; (800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fe:	e232      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c500:	58024400 	.word	0x58024400
 800c504:	03d09000 	.word	0x03d09000
 800c508:	003d0900 	.word	0x003d0900
 800c50c:	017d7840 	.word	0x017d7840
 800c510:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c514:	2300      	movs	r3, #0
 800c516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c518:	e225      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c51a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c51e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c522:	430b      	orrs	r3, r1
 800c524:	f040 8085 	bne.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c528:	4b9c      	ldr	r3, [pc, #624]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c52a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c52c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c530:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c538:	d06b      	beq.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c540:	d874      	bhi.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c544:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c548:	d056      	beq.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c54c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c550:	d86c      	bhi.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c554:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c558:	d03b      	beq.n	800c5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c560:	d864      	bhi.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c568:	d021      	beq.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c56c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c570:	d85c      	bhi.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c574:	2b00      	cmp	r3, #0
 800c576:	d004      	beq.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c57e:	d004      	beq.n	800c58a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c580:	e054      	b.n	800c62c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c582:	f7fe fb5f 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800c586:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c588:	e1ed      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c58a:	4b84      	ldr	r3, [pc, #528]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c596:	d107      	bne.n	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c598:	f107 0318 	add.w	r3, r7, #24
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 fa05 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5a6:	e1de      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ac:	e1db      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5ae:	4b7b      	ldr	r3, [pc, #492]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5ba:	d107      	bne.n	800c5cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5bc:	f107 030c 	add.w	r3, r7, #12
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f000 fb47 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ca:	e1cc      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d0:	e1c9      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c5d2:	4b72      	ldr	r3, [pc, #456]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 0304 	and.w	r3, r3, #4
 800c5da:	2b04      	cmp	r3, #4
 800c5dc:	d109      	bne.n	800c5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5de:	4b6f      	ldr	r3, [pc, #444]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	08db      	lsrs	r3, r3, #3
 800c5e4:	f003 0303 	and.w	r3, r3, #3
 800c5e8:	4a6d      	ldr	r2, [pc, #436]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5f0:	e1b9      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5f6:	e1b6      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c5f8:	4b68      	ldr	r3, [pc, #416]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c604:	d102      	bne.n	800c60c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c606:	4b67      	ldr	r3, [pc, #412]	; (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c608:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c60a:	e1ac      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c60c:	2300      	movs	r3, #0
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c610:	e1a9      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c612:	4b62      	ldr	r3, [pc, #392]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c61a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c61e:	d102      	bne.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c620:	4b61      	ldr	r3, [pc, #388]	; (800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c622:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c624:	e19f      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c626:	2300      	movs	r3, #0
 800c628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c62a:	e19c      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c62c:	2300      	movs	r3, #0
 800c62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c630:	e199      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c632:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c636:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c63a:	430b      	orrs	r3, r1
 800c63c:	d173      	bne.n	800c726 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c63e:	4b57      	ldr	r3, [pc, #348]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c642:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c646:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c64e:	d02f      	beq.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c656:	d863      	bhi.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d004      	beq.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c664:	d012      	beq.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c666:	e05b      	b.n	800c720 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c668:	4b4c      	ldr	r3, [pc, #304]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c674:	d107      	bne.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c676:	f107 0318 	add.w	r3, r7, #24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 f996 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c684:	e16f      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c68a:	e16c      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c68c:	4b43      	ldr	r3, [pc, #268]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c698:	d107      	bne.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c69a:	f107 030c 	add.w	r3, r7, #12
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 fad8 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c6a4:	697b      	ldr	r3, [r7, #20]
 800c6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6a8:	e15d      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ae:	e15a      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c6b0:	4b3a      	ldr	r3, [pc, #232]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c6b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c6ba:	4b38      	ldr	r3, [pc, #224]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f003 0304 	and.w	r3, r3, #4
 800c6c2:	2b04      	cmp	r3, #4
 800c6c4:	d10c      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d109      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6cc:	4b33      	ldr	r3, [pc, #204]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	08db      	lsrs	r3, r3, #3
 800c6d2:	f003 0303 	and.w	r3, r3, #3
 800c6d6:	4a32      	ldr	r2, [pc, #200]	; (800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c6d8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6de:	e01e      	b.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c6e0:	4b2e      	ldr	r3, [pc, #184]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6ec:	d106      	bne.n	800c6fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6f4:	d102      	bne.n	800c6fc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c6f6:	4b2b      	ldr	r3, [pc, #172]	; (800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c6f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6fa:	e010      	b.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c6fc:	4b27      	ldr	r3, [pc, #156]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c708:	d106      	bne.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c70a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c70c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c710:	d102      	bne.n	800c718 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c712:	4b25      	ldr	r3, [pc, #148]	; (800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c714:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c716:	e002      	b.n	800c71e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c718:	2300      	movs	r3, #0
 800c71a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c71c:	e123      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c71e:	e122      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c720:	2300      	movs	r3, #0
 800c722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c724:	e11f      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c72a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c72e:	430b      	orrs	r3, r1
 800c730:	d13c      	bne.n	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c732:	4b1a      	ldr	r3, [pc, #104]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c73a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d004      	beq.n	800c74c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c748:	d012      	beq.n	800c770 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c74a:	e023      	b.n	800c794 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c74c:	4b13      	ldr	r3, [pc, #76]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c758:	d107      	bne.n	800c76a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c75a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fbcc 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c766:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c768:	e0fd      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c76e:	e0fa      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c770:	4b0a      	ldr	r3, [pc, #40]	; (800c79c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c77c:	d107      	bne.n	800c78e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c77e:	f107 0318 	add.w	r3, r7, #24
 800c782:	4618      	mov	r0, r3
 800c784:	f000 f912 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c788:	6a3b      	ldr	r3, [r7, #32]
 800c78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c78c:	e0eb      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c78e:	2300      	movs	r3, #0
 800c790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c792:	e0e8      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c794:	2300      	movs	r3, #0
 800c796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c798:	e0e5      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c79a:	bf00      	nop
 800c79c:	58024400 	.word	0x58024400
 800c7a0:	03d09000 	.word	0x03d09000
 800c7a4:	003d0900 	.word	0x003d0900
 800c7a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c7ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7b0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c7b4:	430b      	orrs	r3, r1
 800c7b6:	f040 8085 	bne.w	800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c7ba:	4b6d      	ldr	r3, [pc, #436]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c7bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7be:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c7c2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7ca:	d06b      	beq.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c7d2:	d874      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7da:	d056      	beq.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7e2:	d86c      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7ea:	d03b      	beq.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c7f2:	d864      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7fa:	d021      	beq.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c802:	d85c      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	2b00      	cmp	r3, #0
 800c808:	d004      	beq.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c810:	d004      	beq.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c812:	e054      	b.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c814:	f000 f8b4 	bl	800c980 <HAL_RCCEx_GetD3PCLK1Freq>
 800c818:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c81a:	e0a4      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c81c:	4b54      	ldr	r3, [pc, #336]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c828:	d107      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c82a:	f107 0318 	add.w	r3, r7, #24
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 f8bc 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c838:	e095      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83e:	e092      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c840:	4b4b      	ldr	r3, [pc, #300]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c84c:	d107      	bne.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c84e:	f107 030c 	add.w	r3, r7, #12
 800c852:	4618      	mov	r0, r3
 800c854:	f000 f9fe 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c85c:	e083      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c862:	e080      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c864:	4b42      	ldr	r3, [pc, #264]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 0304 	and.w	r3, r3, #4
 800c86c:	2b04      	cmp	r3, #4
 800c86e:	d109      	bne.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c870:	4b3f      	ldr	r3, [pc, #252]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	08db      	lsrs	r3, r3, #3
 800c876:	f003 0303 	and.w	r3, r3, #3
 800c87a:	4a3e      	ldr	r2, [pc, #248]	; (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c87c:	fa22 f303 	lsr.w	r3, r2, r3
 800c880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c882:	e070      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c888:	e06d      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c88a:	4b39      	ldr	r3, [pc, #228]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c896:	d102      	bne.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c898:	4b37      	ldr	r3, [pc, #220]	; (800c978 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c89c:	e063      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a2:	e060      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8a4:	4b32      	ldr	r3, [pc, #200]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8b0:	d102      	bne.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c8b2:	4b32      	ldr	r3, [pc, #200]	; (800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8b6:	e056      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8bc:	e053      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c2:	e050      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c8c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8c8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c8cc:	430b      	orrs	r3, r1
 800c8ce:	d148      	bne.n	800c962 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c8d0:	4b27      	ldr	r3, [pc, #156]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c8d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e0:	d02a      	beq.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8e8:	d838      	bhi.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d004      	beq.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c8f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8f6:	d00d      	beq.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c8f8:	e030      	b.n	800c95c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8fa:	4b1d      	ldr	r3, [pc, #116]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c902:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c906:	d102      	bne.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c908:	4b1c      	ldr	r3, [pc, #112]	; (800c97c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c90c:	e02b      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c912:	e028      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c914:	4b16      	ldr	r3, [pc, #88]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c91c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c920:	d107      	bne.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c926:	4618      	mov	r0, r3
 800c928:	f000 fae8 	bl	800cefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c930:	e019      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c936:	e016      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c938:	4b0d      	ldr	r3, [pc, #52]	; (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c940:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c944:	d107      	bne.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c946:	f107 0318 	add.w	r3, r7, #24
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 f82e 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c950:	69fb      	ldr	r3, [r7, #28]
 800c952:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c954:	e007      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c956:	2300      	movs	r3, #0
 800c958:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c95a:	e004      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c95c:	2300      	movs	r3, #0
 800c95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c960:	e001      	b.n	800c966 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3740      	adds	r7, #64	; 0x40
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	58024400 	.word	0x58024400
 800c974:	03d09000 	.word	0x03d09000
 800c978:	003d0900 	.word	0x003d0900
 800c97c:	017d7840 	.word	0x017d7840

0800c980 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c984:	f7fe f92e 	bl	800abe4 <HAL_RCC_GetHCLKFreq>
 800c988:	4602      	mov	r2, r0
 800c98a:	4b06      	ldr	r3, [pc, #24]	; (800c9a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	091b      	lsrs	r3, r3, #4
 800c990:	f003 0307 	and.w	r3, r3, #7
 800c994:	4904      	ldr	r1, [pc, #16]	; (800c9a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c996:	5ccb      	ldrb	r3, [r1, r3]
 800c998:	f003 031f 	and.w	r3, r3, #31
 800c99c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	58024400 	.word	0x58024400
 800c9a8:	08017cb4 	.word	0x08017cb4

0800c9ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b089      	sub	sp, #36	; 0x24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9b4:	4ba1      	ldr	r3, [pc, #644]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b8:	f003 0303 	and.w	r3, r3, #3
 800c9bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c9be:	4b9f      	ldr	r3, [pc, #636]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c2:	0b1b      	lsrs	r3, r3, #12
 800c9c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c9ca:	4b9c      	ldr	r3, [pc, #624]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9ce:	091b      	lsrs	r3, r3, #4
 800c9d0:	f003 0301 	and.w	r3, r3, #1
 800c9d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c9d6:	4b99      	ldr	r3, [pc, #612]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9da:	08db      	lsrs	r3, r3, #3
 800c9dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	fb02 f303 	mul.w	r3, r2, r3
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	f000 8111 	beq.w	800cc1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	f000 8083 	beq.w	800cb08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	f200 80a1 	bhi.w	800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	2b01      	cmp	r3, #1
 800ca14:	d056      	beq.n	800cac4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ca16:	e099      	b.n	800cb4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca18:	4b88      	ldr	r3, [pc, #544]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	f003 0320 	and.w	r3, r3, #32
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d02d      	beq.n	800ca80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca24:	4b85      	ldr	r3, [pc, #532]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	08db      	lsrs	r3, r3, #3
 800ca2a:	f003 0303 	and.w	r3, r3, #3
 800ca2e:	4a84      	ldr	r2, [pc, #528]	; (800cc40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ca30:	fa22 f303 	lsr.w	r3, r2, r3
 800ca34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	ee07 3a90 	vmov	s15, r3
 800ca3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca4e:	4b7b      	ldr	r3, [pc, #492]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca56:	ee07 3a90 	vmov	s15, r3
 800ca5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca62:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca7e:	e087      	b.n	800cb90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	ee07 3a90 	vmov	s15, r3
 800ca86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cc48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ca8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca92:	4b6a      	ldr	r3, [pc, #424]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca9a:	ee07 3a90 	vmov	s15, r3
 800ca9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800caa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800caa6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cabe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cac2:	e065      	b.n	800cb90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	ee07 3a90 	vmov	s15, r3
 800caca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cace:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cad6:	4b59      	ldr	r3, [pc, #356]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cade:	ee07 3a90 	vmov	s15, r3
 800cae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800caea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800caee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb06:	e043      	b.n	800cb90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	ee07 3a90 	vmov	s15, r3
 800cb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cc50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cb16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb1a:	4b48      	ldr	r3, [pc, #288]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb4a:	e021      	b.n	800cb90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	ee07 3a90 	vmov	s15, r3
 800cb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cc4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb5e:	4b37      	ldr	r3, [pc, #220]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb66:	ee07 3a90 	vmov	s15, r3
 800cb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb72:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cc44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cb90:	4b2a      	ldr	r3, [pc, #168]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb94:	0a5b      	lsrs	r3, r3, #9
 800cb96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb9a:	ee07 3a90 	vmov	s15, r3
 800cb9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbb6:	ee17 2a90 	vmov	r2, s15
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cbbe:	4b1f      	ldr	r3, [pc, #124]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbc2:	0c1b      	lsrs	r3, r3, #16
 800cbc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbc8:	ee07 3a90 	vmov	s15, r3
 800cbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbe4:	ee17 2a90 	vmov	r2, s15
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cbec:	4b13      	ldr	r3, [pc, #76]	; (800cc3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf0:	0e1b      	lsrs	r3, r3, #24
 800cbf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbf6:	ee07 3a90 	vmov	s15, r3
 800cbfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc06:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc12:	ee17 2a90 	vmov	r2, s15
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cc1a:	e008      	b.n	800cc2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2200      	movs	r2, #0
 800cc26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	609a      	str	r2, [r3, #8]
}
 800cc2e:	bf00      	nop
 800cc30:	3724      	adds	r7, #36	; 0x24
 800cc32:	46bd      	mov	sp, r7
 800cc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc38:	4770      	bx	lr
 800cc3a:	bf00      	nop
 800cc3c:	58024400 	.word	0x58024400
 800cc40:	03d09000 	.word	0x03d09000
 800cc44:	46000000 	.word	0x46000000
 800cc48:	4c742400 	.word	0x4c742400
 800cc4c:	4a742400 	.word	0x4a742400
 800cc50:	4bbebc20 	.word	0x4bbebc20

0800cc54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b089      	sub	sp, #36	; 0x24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc5c:	4ba1      	ldr	r3, [pc, #644]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc60:	f003 0303 	and.w	r3, r3, #3
 800cc64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cc66:	4b9f      	ldr	r3, [pc, #636]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc6a:	0d1b      	lsrs	r3, r3, #20
 800cc6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cc72:	4b9c      	ldr	r3, [pc, #624]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc76:	0a1b      	lsrs	r3, r3, #8
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cc7e:	4b99      	ldr	r3, [pc, #612]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc82:	08db      	lsrs	r3, r3, #3
 800cc84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc88:	693a      	ldr	r2, [r7, #16]
 800cc8a:	fb02 f303 	mul.w	r3, r2, r3
 800cc8e:	ee07 3a90 	vmov	s15, r3
 800cc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 8111 	beq.w	800cec4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cca2:	69bb      	ldr	r3, [r7, #24]
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	f000 8083 	beq.w	800cdb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	f200 80a1 	bhi.w	800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ccb2:	69bb      	ldr	r3, [r7, #24]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d003      	beq.n	800ccc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ccb8:	69bb      	ldr	r3, [r7, #24]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d056      	beq.n	800cd6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ccbe:	e099      	b.n	800cdf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccc0:	4b88      	ldr	r3, [pc, #544]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	f003 0320 	and.w	r3, r3, #32
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d02d      	beq.n	800cd28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cccc:	4b85      	ldr	r3, [pc, #532]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	08db      	lsrs	r3, r3, #3
 800ccd2:	f003 0303 	and.w	r3, r3, #3
 800ccd6:	4a84      	ldr	r2, [pc, #528]	; (800cee8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ccd8:	fa22 f303 	lsr.w	r3, r2, r3
 800ccdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	ee07 3a90 	vmov	s15, r3
 800cce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	ee07 3a90 	vmov	s15, r3
 800ccee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccf6:	4b7b      	ldr	r3, [pc, #492]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccfe:	ee07 3a90 	vmov	s15, r3
 800cd02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd06:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd26:	e087      	b.n	800ce38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	ee07 3a90 	vmov	s15, r3
 800cd2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cef0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cd36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd3a:	4b6a      	ldr	r3, [pc, #424]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd42:	ee07 3a90 	vmov	s15, r3
 800cd46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd6a:	e065      	b.n	800ce38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	ee07 3a90 	vmov	s15, r3
 800cd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd7e:	4b59      	ldr	r3, [pc, #356]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd86:	ee07 3a90 	vmov	s15, r3
 800cd8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd92:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cda2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cda6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdae:	e043      	b.n	800ce38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	ee07 3a90 	vmov	s15, r3
 800cdb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cdbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdc2:	4b48      	ldr	r3, [pc, #288]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdca:	ee07 3a90 	vmov	s15, r3
 800cdce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cde2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cde6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdf2:	e021      	b.n	800ce38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	ee07 3a90 	vmov	s15, r3
 800cdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce06:	4b37      	ldr	r3, [pc, #220]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce0e:	ee07 3a90 	vmov	s15, r3
 800ce12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ceec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ce38:	4b2a      	ldr	r3, [pc, #168]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce3c:	0a5b      	lsrs	r3, r3, #9
 800ce3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce42:	ee07 3a90 	vmov	s15, r3
 800ce46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce5e:	ee17 2a90 	vmov	r2, s15
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ce66:	4b1f      	ldr	r3, [pc, #124]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce6a:	0c1b      	lsrs	r3, r3, #16
 800ce6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce70:	ee07 3a90 	vmov	s15, r3
 800ce74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce80:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce8c:	ee17 2a90 	vmov	r2, s15
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce94:	4b13      	ldr	r3, [pc, #76]	; (800cee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce98:	0e1b      	lsrs	r3, r3, #24
 800ce9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce9e:	ee07 3a90 	vmov	s15, r3
 800cea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ceaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceae:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceba:	ee17 2a90 	vmov	r2, s15
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cec2:	e008      	b.n	800ced6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2200      	movs	r2, #0
 800ced4:	609a      	str	r2, [r3, #8]
}
 800ced6:	bf00      	nop
 800ced8:	3724      	adds	r7, #36	; 0x24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr
 800cee2:	bf00      	nop
 800cee4:	58024400 	.word	0x58024400
 800cee8:	03d09000 	.word	0x03d09000
 800ceec:	46000000 	.word	0x46000000
 800cef0:	4c742400 	.word	0x4c742400
 800cef4:	4a742400 	.word	0x4a742400
 800cef8:	4bbebc20 	.word	0x4bbebc20

0800cefc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b089      	sub	sp, #36	; 0x24
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf04:	4ba0      	ldr	r3, [pc, #640]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf08:	f003 0303 	and.w	r3, r3, #3
 800cf0c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cf0e:	4b9e      	ldr	r3, [pc, #632]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf12:	091b      	lsrs	r3, r3, #4
 800cf14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf18:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cf1a:	4b9b      	ldr	r3, [pc, #620]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf1e:	f003 0301 	and.w	r3, r3, #1
 800cf22:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cf24:	4b98      	ldr	r3, [pc, #608]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf28:	08db      	lsrs	r3, r3, #3
 800cf2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf2e:	693a      	ldr	r2, [r7, #16]
 800cf30:	fb02 f303 	mul.w	r3, r2, r3
 800cf34:	ee07 3a90 	vmov	s15, r3
 800cf38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f000 8111 	beq.w	800d16a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cf48:	69bb      	ldr	r3, [r7, #24]
 800cf4a:	2b02      	cmp	r3, #2
 800cf4c:	f000 8083 	beq.w	800d056 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cf50:	69bb      	ldr	r3, [r7, #24]
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	f200 80a1 	bhi.w	800d09a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cf58:	69bb      	ldr	r3, [r7, #24]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d003      	beq.n	800cf66 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d056      	beq.n	800d012 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cf64:	e099      	b.n	800d09a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf66:	4b88      	ldr	r3, [pc, #544]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	f003 0320 	and.w	r3, r3, #32
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d02d      	beq.n	800cfce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf72:	4b85      	ldr	r3, [pc, #532]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	08db      	lsrs	r3, r3, #3
 800cf78:	f003 0303 	and.w	r3, r3, #3
 800cf7c:	4a83      	ldr	r2, [pc, #524]	; (800d18c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cf7e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf82:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	ee07 3a90 	vmov	s15, r3
 800cf8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	ee07 3a90 	vmov	s15, r3
 800cf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf9c:	4b7a      	ldr	r3, [pc, #488]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfa4:	ee07 3a90 	vmov	s15, r3
 800cfa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfac:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfb0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfc8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfcc:	e087      	b.n	800d0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfce:	697b      	ldr	r3, [r7, #20]
 800cfd0:	ee07 3a90 	vmov	s15, r3
 800cfd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfd8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d194 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfe0:	4b69      	ldr	r3, [pc, #420]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfe8:	ee07 3a90 	vmov	s15, r3
 800cfec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cff0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cff4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cff8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cffc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d000:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d00c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d010:	e065      	b.n	800d0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	ee07 3a90 	vmov	s15, r3
 800d018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d01c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d198 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d024:	4b58      	ldr	r3, [pc, #352]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d02c:	ee07 3a90 	vmov	s15, r3
 800d030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d034:	ed97 6a03 	vldr	s12, [r7, #12]
 800d038:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d03c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d04c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d050:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d054:	e043      	b.n	800d0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	ee07 3a90 	vmov	s15, r3
 800d05c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d060:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d19c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d068:	4b47      	ldr	r3, [pc, #284]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d06c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d070:	ee07 3a90 	vmov	s15, r3
 800d074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d078:	ed97 6a03 	vldr	s12, [r7, #12]
 800d07c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d08c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d090:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d094:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d098:	e021      	b.n	800d0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	ee07 3a90 	vmov	s15, r3
 800d0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d194 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d0a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ac:	4b36      	ldr	r3, [pc, #216]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0b4:	ee07 3a90 	vmov	s15, r3
 800d0b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d0de:	4b2a      	ldr	r3, [pc, #168]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e2:	0a5b      	lsrs	r3, r3, #9
 800d0e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0e8:	ee07 3a90 	vmov	s15, r3
 800d0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d104:	ee17 2a90 	vmov	r2, s15
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d10c:	4b1e      	ldr	r3, [pc, #120]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d110:	0c1b      	lsrs	r3, r3, #16
 800d112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d116:	ee07 3a90 	vmov	s15, r3
 800d11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d11e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d122:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d126:	edd7 6a07 	vldr	s13, [r7, #28]
 800d12a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d12e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d132:	ee17 2a90 	vmov	r2, s15
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d13a:	4b13      	ldr	r3, [pc, #76]	; (800d188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d13e:	0e1b      	lsrs	r3, r3, #24
 800d140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d144:	ee07 3a90 	vmov	s15, r3
 800d148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d14c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d150:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d154:	edd7 6a07 	vldr	s13, [r7, #28]
 800d158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d15c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d160:	ee17 2a90 	vmov	r2, s15
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d168:	e008      	b.n	800d17c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2200      	movs	r2, #0
 800d16e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2200      	movs	r2, #0
 800d174:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	609a      	str	r2, [r3, #8]
}
 800d17c:	bf00      	nop
 800d17e:	3724      	adds	r7, #36	; 0x24
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	58024400 	.word	0x58024400
 800d18c:	03d09000 	.word	0x03d09000
 800d190:	46000000 	.word	0x46000000
 800d194:	4c742400 	.word	0x4c742400
 800d198:	4a742400 	.word	0x4a742400
 800d19c:	4bbebc20 	.word	0x4bbebc20

0800d1a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b084      	sub	sp, #16
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
 800d1a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d1ae:	4b53      	ldr	r3, [pc, #332]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1b2:	f003 0303 	and.w	r3, r3, #3
 800d1b6:	2b03      	cmp	r3, #3
 800d1b8:	d101      	bne.n	800d1be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e099      	b.n	800d2f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d1be:	4b4f      	ldr	r3, [pc, #316]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	4a4e      	ldr	r2, [pc, #312]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d1c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1ca:	f7f5 fc65 	bl	8002a98 <HAL_GetTick>
 800d1ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1d0:	e008      	b.n	800d1e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1d2:	f7f5 fc61 	bl	8002a98 <HAL_GetTick>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	1ad3      	subs	r3, r2, r3
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	d901      	bls.n	800d1e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d1e0:	2303      	movs	r3, #3
 800d1e2:	e086      	b.n	800d2f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d1e4:	4b45      	ldr	r3, [pc, #276]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1f0      	bne.n	800d1d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d1f0:	4b42      	ldr	r3, [pc, #264]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	031b      	lsls	r3, r3, #12
 800d1fe:	493f      	ldr	r1, [pc, #252]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d200:	4313      	orrs	r3, r2
 800d202:	628b      	str	r3, [r1, #40]	; 0x28
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	3b01      	subs	r3, #1
 800d20a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	3b01      	subs	r3, #1
 800d214:	025b      	lsls	r3, r3, #9
 800d216:	b29b      	uxth	r3, r3
 800d218:	431a      	orrs	r2, r3
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	3b01      	subs	r3, #1
 800d220:	041b      	lsls	r3, r3, #16
 800d222:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d226:	431a      	orrs	r2, r3
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	3b01      	subs	r3, #1
 800d22e:	061b      	lsls	r3, r3, #24
 800d230:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d234:	4931      	ldr	r1, [pc, #196]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d236:	4313      	orrs	r3, r2
 800d238:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d23a:	4b30      	ldr	r3, [pc, #192]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d23e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	695b      	ldr	r3, [r3, #20]
 800d246:	492d      	ldr	r1, [pc, #180]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d248:	4313      	orrs	r3, r2
 800d24a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d24c:	4b2b      	ldr	r3, [pc, #172]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d250:	f023 0220 	bic.w	r2, r3, #32
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	4928      	ldr	r1, [pc, #160]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d25a:	4313      	orrs	r3, r2
 800d25c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d25e:	4b27      	ldr	r3, [pc, #156]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d262:	4a26      	ldr	r2, [pc, #152]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d264:	f023 0310 	bic.w	r3, r3, #16
 800d268:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d26a:	4b24      	ldr	r3, [pc, #144]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d26c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d26e:	4b24      	ldr	r3, [pc, #144]	; (800d300 <RCCEx_PLL2_Config+0x160>)
 800d270:	4013      	ands	r3, r2
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	69d2      	ldr	r2, [r2, #28]
 800d276:	00d2      	lsls	r2, r2, #3
 800d278:	4920      	ldr	r1, [pc, #128]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d27a:	4313      	orrs	r3, r2
 800d27c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d27e:	4b1f      	ldr	r3, [pc, #124]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d282:	4a1e      	ldr	r2, [pc, #120]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d284:	f043 0310 	orr.w	r3, r3, #16
 800d288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d106      	bne.n	800d29e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d290:	4b1a      	ldr	r3, [pc, #104]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d294:	4a19      	ldr	r2, [pc, #100]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d29a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d29c:	e00f      	b.n	800d2be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d106      	bne.n	800d2b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d2a4:	4b15      	ldr	r3, [pc, #84]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a8:	4a14      	ldr	r2, [pc, #80]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d2b0:	e005      	b.n	800d2be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d2b2:	4b12      	ldr	r3, [pc, #72]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b6:	4a11      	ldr	r2, [pc, #68]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d2bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d2be:	4b0f      	ldr	r3, [pc, #60]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a0e      	ldr	r2, [pc, #56]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2ca:	f7f5 fbe5 	bl	8002a98 <HAL_GetTick>
 800d2ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2d0:	e008      	b.n	800d2e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d2d2:	f7f5 fbe1 	bl	8002a98 <HAL_GetTick>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	68bb      	ldr	r3, [r7, #8]
 800d2da:	1ad3      	subs	r3, r2, r3
 800d2dc:	2b02      	cmp	r3, #2
 800d2de:	d901      	bls.n	800d2e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d2e0:	2303      	movs	r3, #3
 800d2e2:	e006      	b.n	800d2f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d2e4:	4b05      	ldr	r3, [pc, #20]	; (800d2fc <RCCEx_PLL2_Config+0x15c>)
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d0f0      	beq.n	800d2d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	3710      	adds	r7, #16
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	bd80      	pop	{r7, pc}
 800d2fa:	bf00      	nop
 800d2fc:	58024400 	.word	0x58024400
 800d300:	ffff0007 	.word	0xffff0007

0800d304 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	b084      	sub	sp, #16
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
 800d30c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d312:	4b53      	ldr	r3, [pc, #332]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d316:	f003 0303 	and.w	r3, r3, #3
 800d31a:	2b03      	cmp	r3, #3
 800d31c:	d101      	bne.n	800d322 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d31e:	2301      	movs	r3, #1
 800d320:	e099      	b.n	800d456 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d322:	4b4f      	ldr	r3, [pc, #316]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	4a4e      	ldr	r2, [pc, #312]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d32c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d32e:	f7f5 fbb3 	bl	8002a98 <HAL_GetTick>
 800d332:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d334:	e008      	b.n	800d348 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d336:	f7f5 fbaf 	bl	8002a98 <HAL_GetTick>
 800d33a:	4602      	mov	r2, r0
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	2b02      	cmp	r3, #2
 800d342:	d901      	bls.n	800d348 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d344:	2303      	movs	r3, #3
 800d346:	e086      	b.n	800d456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d348:	4b45      	ldr	r3, [pc, #276]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1f0      	bne.n	800d336 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d354:	4b42      	ldr	r3, [pc, #264]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d358:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	051b      	lsls	r3, r3, #20
 800d362:	493f      	ldr	r1, [pc, #252]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d364:	4313      	orrs	r3, r2
 800d366:	628b      	str	r3, [r1, #40]	; 0x28
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	685b      	ldr	r3, [r3, #4]
 800d36c:	3b01      	subs	r3, #1
 800d36e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	3b01      	subs	r3, #1
 800d378:	025b      	lsls	r3, r3, #9
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	431a      	orrs	r2, r3
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	3b01      	subs	r3, #1
 800d384:	041b      	lsls	r3, r3, #16
 800d386:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d38a:	431a      	orrs	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	691b      	ldr	r3, [r3, #16]
 800d390:	3b01      	subs	r3, #1
 800d392:	061b      	lsls	r3, r3, #24
 800d394:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d398:	4931      	ldr	r1, [pc, #196]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d39a:	4313      	orrs	r3, r2
 800d39c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d39e:	4b30      	ldr	r3, [pc, #192]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	695b      	ldr	r3, [r3, #20]
 800d3aa:	492d      	ldr	r1, [pc, #180]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d3b0:	4b2b      	ldr	r3, [pc, #172]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	699b      	ldr	r3, [r3, #24]
 800d3bc:	4928      	ldr	r1, [pc, #160]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d3c2:	4b27      	ldr	r3, [pc, #156]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c6:	4a26      	ldr	r2, [pc, #152]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d3ce:	4b24      	ldr	r3, [pc, #144]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3d2:	4b24      	ldr	r3, [pc, #144]	; (800d464 <RCCEx_PLL3_Config+0x160>)
 800d3d4:	4013      	ands	r3, r2
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	69d2      	ldr	r2, [r2, #28]
 800d3da:	00d2      	lsls	r2, r2, #3
 800d3dc:	4920      	ldr	r1, [pc, #128]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3de:	4313      	orrs	r3, r2
 800d3e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d3e2:	4b1f      	ldr	r3, [pc, #124]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3e6:	4a1e      	ldr	r2, [pc, #120]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d3ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d106      	bne.n	800d402 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d3f4:	4b1a      	ldr	r3, [pc, #104]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f8:	4a19      	ldr	r2, [pc, #100]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d3fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d3fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d400:	e00f      	b.n	800d422 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d106      	bne.n	800d416 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d408:	4b15      	ldr	r3, [pc, #84]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40c:	4a14      	ldr	r2, [pc, #80]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d40e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d412:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d414:	e005      	b.n	800d422 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d416:	4b12      	ldr	r3, [pc, #72]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41a:	4a11      	ldr	r2, [pc, #68]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d41c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d420:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d422:	4b0f      	ldr	r3, [pc, #60]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a0e      	ldr	r2, [pc, #56]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d42c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d42e:	f7f5 fb33 	bl	8002a98 <HAL_GetTick>
 800d432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d434:	e008      	b.n	800d448 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d436:	f7f5 fb2f 	bl	8002a98 <HAL_GetTick>
 800d43a:	4602      	mov	r2, r0
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	1ad3      	subs	r3, r2, r3
 800d440:	2b02      	cmp	r3, #2
 800d442:	d901      	bls.n	800d448 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d444:	2303      	movs	r3, #3
 800d446:	e006      	b.n	800d456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d448:	4b05      	ldr	r3, [pc, #20]	; (800d460 <RCCEx_PLL3_Config+0x15c>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d450:	2b00      	cmp	r3, #0
 800d452:	d0f0      	beq.n	800d436 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d454:	7bfb      	ldrb	r3, [r7, #15]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3710      	adds	r7, #16
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	58024400 	.word	0x58024400
 800d464:	ffff0007 	.word	0xffff0007

0800d468 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d476:	2301      	movs	r3, #1
 800d478:	e092      	b.n	800d5a0 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	7a5b      	ldrb	r3, [r3, #9]
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	2b00      	cmp	r3, #0
 800d482:	d105      	bne.n	800d490 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f7f4 fbf8 	bl	8001c80 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2202      	movs	r2, #2
 800d494:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681a      	ldr	r2, [r3, #0]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f022 0204 	bic.w	r2, r2, #4
 800d4a4:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	681a      	ldr	r2, [r3, #0]
 800d4ac:	4b3e      	ldr	r3, [pc, #248]	; (800d5a8 <HAL_RNG_Init+0x140>)
 800d4ae:	4013      	ands	r3, r2
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	6852      	ldr	r2, [r2, #4]
 800d4b4:	431a      	orrs	r2, r3
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d4be:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a39      	ldr	r2, [pc, #228]	; (800d5ac <HAL_RNG_Init+0x144>)
 800d4c6:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	f247 2274 	movw	r2, #29300	; 0x7274
 800d4d0:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d4e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d4e2:	f7f5 fad9 	bl	8002a98 <HAL_GetTick>
 800d4e6:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d4e8:	e016      	b.n	800d518 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d4ea:	f7f5 fad5 	bl	8002a98 <HAL_GetTick>
 800d4ee:	4602      	mov	r2, r0
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	1ad3      	subs	r3, r2, r3
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d90f      	bls.n	800d518 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d506:	d107      	bne.n	800d518 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2201      	movs	r2, #1
 800d50c:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2202      	movs	r2, #2
 800d512:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d514:	2301      	movs	r3, #1
 800d516:	e043      	b.n	800d5a0 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d526:	d0e0      	beq.n	800d4ea <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	681a      	ldr	r2, [r3, #0]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f042 0204 	orr.w	r2, r2, #4
 800d536:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d542:	2b40      	cmp	r3, #64	; 0x40
 800d544:	d104      	bne.n	800d550 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	2204      	movs	r2, #4
 800d54a:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d54c:	2301      	movs	r3, #1
 800d54e:	e027      	b.n	800d5a0 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d550:	f7f5 faa2 	bl	8002a98 <HAL_GetTick>
 800d554:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d556:	e015      	b.n	800d584 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d558:	f7f5 fa9e 	bl	8002a98 <HAL_GetTick>
 800d55c:	4602      	mov	r2, r0
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	1ad3      	subs	r3, r2, r3
 800d562:	2b02      	cmp	r3, #2
 800d564:	d90e      	bls.n	800d584 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	f003 0304 	and.w	r3, r3, #4
 800d570:	2b04      	cmp	r3, #4
 800d572:	d107      	bne.n	800d584 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2204      	movs	r2, #4
 800d578:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2202      	movs	r2, #2
 800d57e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	e00d      	b.n	800d5a0 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	f003 0304 	and.w	r3, r3, #4
 800d58e:	2b04      	cmp	r3, #4
 800d590:	d0e2      	beq.n	800d558 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2201      	movs	r2, #1
 800d596:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2200      	movs	r2, #0
 800d59c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3710      	adds	r7, #16
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	bfffffdf 	.word	0xbfffffdf
 800d5ac:	17590abc 	.word	0x17590abc

0800d5b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d101      	bne.n	800d5c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e10f      	b.n	800d7e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4a87      	ldr	r2, [pc, #540]	; (800d7ec <HAL_SPI_Init+0x23c>)
 800d5ce:	4293      	cmp	r3, r2
 800d5d0:	d00f      	beq.n	800d5f2 <HAL_SPI_Init+0x42>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	4a86      	ldr	r2, [pc, #536]	; (800d7f0 <HAL_SPI_Init+0x240>)
 800d5d8:	4293      	cmp	r3, r2
 800d5da:	d00a      	beq.n	800d5f2 <HAL_SPI_Init+0x42>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a84      	ldr	r2, [pc, #528]	; (800d7f4 <HAL_SPI_Init+0x244>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d005      	beq.n	800d5f2 <HAL_SPI_Init+0x42>
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	68db      	ldr	r3, [r3, #12]
 800d5ea:	2b0f      	cmp	r3, #15
 800d5ec:	d901      	bls.n	800d5f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e0f7      	b.n	800d7e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 f900 	bl	800d7f8 <SPI_GetPacketSize>
 800d5f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a7b      	ldr	r2, [pc, #492]	; (800d7ec <HAL_SPI_Init+0x23c>)
 800d600:	4293      	cmp	r3, r2
 800d602:	d00c      	beq.n	800d61e <HAL_SPI_Init+0x6e>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4a79      	ldr	r2, [pc, #484]	; (800d7f0 <HAL_SPI_Init+0x240>)
 800d60a:	4293      	cmp	r3, r2
 800d60c:	d007      	beq.n	800d61e <HAL_SPI_Init+0x6e>
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	4a78      	ldr	r2, [pc, #480]	; (800d7f4 <HAL_SPI_Init+0x244>)
 800d614:	4293      	cmp	r3, r2
 800d616:	d002      	beq.n	800d61e <HAL_SPI_Init+0x6e>
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2b08      	cmp	r3, #8
 800d61c:	d811      	bhi.n	800d642 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d622:	4a72      	ldr	r2, [pc, #456]	; (800d7ec <HAL_SPI_Init+0x23c>)
 800d624:	4293      	cmp	r3, r2
 800d626:	d009      	beq.n	800d63c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a70      	ldr	r2, [pc, #448]	; (800d7f0 <HAL_SPI_Init+0x240>)
 800d62e:	4293      	cmp	r3, r2
 800d630:	d004      	beq.n	800d63c <HAL_SPI_Init+0x8c>
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	4a6f      	ldr	r2, [pc, #444]	; (800d7f4 <HAL_SPI_Init+0x244>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d104      	bne.n	800d646 <HAL_SPI_Init+0x96>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	2b10      	cmp	r3, #16
 800d640:	d901      	bls.n	800d646 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d642:	2301      	movs	r3, #1
 800d644:	e0cd      	b.n	800d7e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d64c:	b2db      	uxtb	r3, r3
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d106      	bne.n	800d660 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2200      	movs	r2, #0
 800d656:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f7f4 fbb6 	bl	8001dcc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2202      	movs	r2, #2
 800d664:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	681a      	ldr	r2, [r3, #0]
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f022 0201 	bic.w	r2, r2, #1
 800d676:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d682:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	699b      	ldr	r3, [r3, #24]
 800d688:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d68c:	d119      	bne.n	800d6c2 <HAL_SPI_Init+0x112>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d696:	d103      	bne.n	800d6a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d008      	beq.n	800d6b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d10c      	bne.n	800d6c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d6ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d6b0:	d107      	bne.n	800d6c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	681b      	ldr	r3, [r3, #0]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d6c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00f      	beq.n	800d6ee <HAL_SPI_Init+0x13e>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68db      	ldr	r3, [r3, #12]
 800d6d2:	2b06      	cmp	r3, #6
 800d6d4:	d90b      	bls.n	800d6ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	430a      	orrs	r2, r1
 800d6ea:	601a      	str	r2, [r3, #0]
 800d6ec:	e007      	b.n	800d6fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d6fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	69da      	ldr	r2, [r3, #28]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d706:	431a      	orrs	r2, r3
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	431a      	orrs	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d710:	ea42 0103 	orr.w	r1, r2, r3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	68da      	ldr	r2, [r3, #12]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	430a      	orrs	r2, r1
 800d71e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d728:	431a      	orrs	r2, r3
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d72e:	431a      	orrs	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	699b      	ldr	r3, [r3, #24]
 800d734:	431a      	orrs	r2, r3
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	431a      	orrs	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	695b      	ldr	r3, [r3, #20]
 800d740:	431a      	orrs	r2, r3
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a1b      	ldr	r3, [r3, #32]
 800d746:	431a      	orrs	r2, r3
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	685b      	ldr	r3, [r3, #4]
 800d74c:	431a      	orrs	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d752:	431a      	orrs	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	431a      	orrs	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d75e:	ea42 0103 	orr.w	r1, r2, r3
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	430a      	orrs	r2, r1
 800d76c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	685b      	ldr	r3, [r3, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d113      	bne.n	800d79e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d788:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	689b      	ldr	r3, [r3, #8]
 800d790:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d79c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f022 0201 	bic.w	r2, r2, #1
 800d7ac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	685b      	ldr	r3, [r3, #4]
 800d7b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d00a      	beq.n	800d7d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	430a      	orrs	r2, r1
 800d7ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2201      	movs	r2, #1
 800d7dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d7e0:	2300      	movs	r3, #0
}
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	40013000 	.word	0x40013000
 800d7f0:	40003800 	.word	0x40003800
 800d7f4:	40003c00 	.word	0x40003c00

0800d7f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b085      	sub	sp, #20
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d804:	095b      	lsrs	r3, r3, #5
 800d806:	3301      	adds	r3, #1
 800d808:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	68db      	ldr	r3, [r3, #12]
 800d80e:	3301      	adds	r3, #1
 800d810:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	3307      	adds	r3, #7
 800d816:	08db      	lsrs	r3, r3, #3
 800d818:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	fb02 f303 	mul.w	r3, r2, r3
}
 800d822:	4618      	mov	r0, r3
 800d824:	3714      	adds	r7, #20
 800d826:	46bd      	mov	sp, r7
 800d828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82c:	4770      	bx	lr

0800d82e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d82e:	b580      	push	{r7, lr}
 800d830:	b082      	sub	sp, #8
 800d832:	af00      	add	r7, sp, #0
 800d834:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d101      	bne.n	800d840 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	e042      	b.n	800d8c6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d846:	2b00      	cmp	r3, #0
 800d848:	d106      	bne.n	800d858 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	2200      	movs	r2, #0
 800d84e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7f4 fdd2 	bl	80023fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2224      	movs	r2, #36	; 0x24
 800d85c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	681a      	ldr	r2, [r3, #0]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	f022 0201 	bic.w	r2, r2, #1
 800d86e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 f82d 	bl	800d8d0 <UART_SetConfig>
 800d876:	4603      	mov	r3, r0
 800d878:	2b01      	cmp	r3, #1
 800d87a:	d101      	bne.n	800d880 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d87c:	2301      	movs	r3, #1
 800d87e:	e022      	b.n	800d8c6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d884:	2b00      	cmp	r3, #0
 800d886:	d002      	beq.n	800d88e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fe8d 	bl	800e5a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	685a      	ldr	r2, [r3, #4]
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d89c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d8ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	681a      	ldr	r2, [r3, #0]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f042 0201 	orr.w	r2, r2, #1
 800d8bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d8be:	6878      	ldr	r0, [r7, #4]
 800d8c0:	f000 ff14 	bl	800e6ec <UART_CheckIdleState>
 800d8c4:	4603      	mov	r3, r0
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3708      	adds	r7, #8
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
	...

0800d8d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d8d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d8d4:	b092      	sub	sp, #72	; 0x48
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	689a      	ldr	r2, [r3, #8]
 800d8e4:	697b      	ldr	r3, [r7, #20]
 800d8e6:	691b      	ldr	r3, [r3, #16]
 800d8e8:	431a      	orrs	r2, r3
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	695b      	ldr	r3, [r3, #20]
 800d8ee:	431a      	orrs	r2, r3
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	69db      	ldr	r3, [r3, #28]
 800d8f4:	4313      	orrs	r3, r2
 800d8f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	681a      	ldr	r2, [r3, #0]
 800d8fe:	4bbe      	ldr	r3, [pc, #760]	; (800dbf8 <UART_SetConfig+0x328>)
 800d900:	4013      	ands	r3, r2
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	6812      	ldr	r2, [r2, #0]
 800d906:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d908:	430b      	orrs	r3, r1
 800d90a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	68da      	ldr	r2, [r3, #12]
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	430a      	orrs	r2, r1
 800d920:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	699b      	ldr	r3, [r3, #24]
 800d926:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	4ab3      	ldr	r2, [pc, #716]	; (800dbfc <UART_SetConfig+0x32c>)
 800d92e:	4293      	cmp	r3, r2
 800d930:	d004      	beq.n	800d93c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d932:	697b      	ldr	r3, [r7, #20]
 800d934:	6a1b      	ldr	r3, [r3, #32]
 800d936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d938:	4313      	orrs	r3, r2
 800d93a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	689a      	ldr	r2, [r3, #8]
 800d942:	4baf      	ldr	r3, [pc, #700]	; (800dc00 <UART_SetConfig+0x330>)
 800d944:	4013      	ands	r3, r2
 800d946:	697a      	ldr	r2, [r7, #20]
 800d948:	6812      	ldr	r2, [r2, #0]
 800d94a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d94c:	430b      	orrs	r3, r1
 800d94e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d956:	f023 010f 	bic.w	r1, r3, #15
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d95e:	697b      	ldr	r3, [r7, #20]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	430a      	orrs	r2, r1
 800d964:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4aa6      	ldr	r2, [pc, #664]	; (800dc04 <UART_SetConfig+0x334>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d177      	bne.n	800da60 <UART_SetConfig+0x190>
 800d970:	4ba5      	ldr	r3, [pc, #660]	; (800dc08 <UART_SetConfig+0x338>)
 800d972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d974:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d978:	2b28      	cmp	r3, #40	; 0x28
 800d97a:	d86d      	bhi.n	800da58 <UART_SetConfig+0x188>
 800d97c:	a201      	add	r2, pc, #4	; (adr r2, 800d984 <UART_SetConfig+0xb4>)
 800d97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d982:	bf00      	nop
 800d984:	0800da29 	.word	0x0800da29
 800d988:	0800da59 	.word	0x0800da59
 800d98c:	0800da59 	.word	0x0800da59
 800d990:	0800da59 	.word	0x0800da59
 800d994:	0800da59 	.word	0x0800da59
 800d998:	0800da59 	.word	0x0800da59
 800d99c:	0800da59 	.word	0x0800da59
 800d9a0:	0800da59 	.word	0x0800da59
 800d9a4:	0800da31 	.word	0x0800da31
 800d9a8:	0800da59 	.word	0x0800da59
 800d9ac:	0800da59 	.word	0x0800da59
 800d9b0:	0800da59 	.word	0x0800da59
 800d9b4:	0800da59 	.word	0x0800da59
 800d9b8:	0800da59 	.word	0x0800da59
 800d9bc:	0800da59 	.word	0x0800da59
 800d9c0:	0800da59 	.word	0x0800da59
 800d9c4:	0800da39 	.word	0x0800da39
 800d9c8:	0800da59 	.word	0x0800da59
 800d9cc:	0800da59 	.word	0x0800da59
 800d9d0:	0800da59 	.word	0x0800da59
 800d9d4:	0800da59 	.word	0x0800da59
 800d9d8:	0800da59 	.word	0x0800da59
 800d9dc:	0800da59 	.word	0x0800da59
 800d9e0:	0800da59 	.word	0x0800da59
 800d9e4:	0800da41 	.word	0x0800da41
 800d9e8:	0800da59 	.word	0x0800da59
 800d9ec:	0800da59 	.word	0x0800da59
 800d9f0:	0800da59 	.word	0x0800da59
 800d9f4:	0800da59 	.word	0x0800da59
 800d9f8:	0800da59 	.word	0x0800da59
 800d9fc:	0800da59 	.word	0x0800da59
 800da00:	0800da59 	.word	0x0800da59
 800da04:	0800da49 	.word	0x0800da49
 800da08:	0800da59 	.word	0x0800da59
 800da0c:	0800da59 	.word	0x0800da59
 800da10:	0800da59 	.word	0x0800da59
 800da14:	0800da59 	.word	0x0800da59
 800da18:	0800da59 	.word	0x0800da59
 800da1c:	0800da59 	.word	0x0800da59
 800da20:	0800da59 	.word	0x0800da59
 800da24:	0800da51 	.word	0x0800da51
 800da28:	2301      	movs	r3, #1
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2e:	e326      	b.n	800e07e <UART_SetConfig+0x7ae>
 800da30:	2304      	movs	r3, #4
 800da32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da36:	e322      	b.n	800e07e <UART_SetConfig+0x7ae>
 800da38:	2308      	movs	r3, #8
 800da3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da3e:	e31e      	b.n	800e07e <UART_SetConfig+0x7ae>
 800da40:	2310      	movs	r3, #16
 800da42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da46:	e31a      	b.n	800e07e <UART_SetConfig+0x7ae>
 800da48:	2320      	movs	r3, #32
 800da4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da4e:	e316      	b.n	800e07e <UART_SetConfig+0x7ae>
 800da50:	2340      	movs	r3, #64	; 0x40
 800da52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da56:	e312      	b.n	800e07e <UART_SetConfig+0x7ae>
 800da58:	2380      	movs	r3, #128	; 0x80
 800da5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5e:	e30e      	b.n	800e07e <UART_SetConfig+0x7ae>
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a69      	ldr	r2, [pc, #420]	; (800dc0c <UART_SetConfig+0x33c>)
 800da66:	4293      	cmp	r3, r2
 800da68:	d130      	bne.n	800dacc <UART_SetConfig+0x1fc>
 800da6a:	4b67      	ldr	r3, [pc, #412]	; (800dc08 <UART_SetConfig+0x338>)
 800da6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da6e:	f003 0307 	and.w	r3, r3, #7
 800da72:	2b05      	cmp	r3, #5
 800da74:	d826      	bhi.n	800dac4 <UART_SetConfig+0x1f4>
 800da76:	a201      	add	r2, pc, #4	; (adr r2, 800da7c <UART_SetConfig+0x1ac>)
 800da78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da7c:	0800da95 	.word	0x0800da95
 800da80:	0800da9d 	.word	0x0800da9d
 800da84:	0800daa5 	.word	0x0800daa5
 800da88:	0800daad 	.word	0x0800daad
 800da8c:	0800dab5 	.word	0x0800dab5
 800da90:	0800dabd 	.word	0x0800dabd
 800da94:	2300      	movs	r3, #0
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9a:	e2f0      	b.n	800e07e <UART_SetConfig+0x7ae>
 800da9c:	2304      	movs	r3, #4
 800da9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa2:	e2ec      	b.n	800e07e <UART_SetConfig+0x7ae>
 800daa4:	2308      	movs	r3, #8
 800daa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daaa:	e2e8      	b.n	800e07e <UART_SetConfig+0x7ae>
 800daac:	2310      	movs	r3, #16
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab2:	e2e4      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dab4:	2320      	movs	r3, #32
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daba:	e2e0      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dabc:	2340      	movs	r3, #64	; 0x40
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac2:	e2dc      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dac4:	2380      	movs	r3, #128	; 0x80
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daca:	e2d8      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dacc:	697b      	ldr	r3, [r7, #20]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	4a4f      	ldr	r2, [pc, #316]	; (800dc10 <UART_SetConfig+0x340>)
 800dad2:	4293      	cmp	r3, r2
 800dad4:	d130      	bne.n	800db38 <UART_SetConfig+0x268>
 800dad6:	4b4c      	ldr	r3, [pc, #304]	; (800dc08 <UART_SetConfig+0x338>)
 800dad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dada:	f003 0307 	and.w	r3, r3, #7
 800dade:	2b05      	cmp	r3, #5
 800dae0:	d826      	bhi.n	800db30 <UART_SetConfig+0x260>
 800dae2:	a201      	add	r2, pc, #4	; (adr r2, 800dae8 <UART_SetConfig+0x218>)
 800dae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae8:	0800db01 	.word	0x0800db01
 800daec:	0800db09 	.word	0x0800db09
 800daf0:	0800db11 	.word	0x0800db11
 800daf4:	0800db19 	.word	0x0800db19
 800daf8:	0800db21 	.word	0x0800db21
 800dafc:	0800db29 	.word	0x0800db29
 800db00:	2300      	movs	r3, #0
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db06:	e2ba      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db08:	2304      	movs	r3, #4
 800db0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0e:	e2b6      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db10:	2308      	movs	r3, #8
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db16:	e2b2      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db18:	2310      	movs	r3, #16
 800db1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1e:	e2ae      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db20:	2320      	movs	r3, #32
 800db22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db26:	e2aa      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db28:	2340      	movs	r3, #64	; 0x40
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2e:	e2a6      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db30:	2380      	movs	r3, #128	; 0x80
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db36:	e2a2      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db38:	697b      	ldr	r3, [r7, #20]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a35      	ldr	r2, [pc, #212]	; (800dc14 <UART_SetConfig+0x344>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	d130      	bne.n	800dba4 <UART_SetConfig+0x2d4>
 800db42:	4b31      	ldr	r3, [pc, #196]	; (800dc08 <UART_SetConfig+0x338>)
 800db44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db46:	f003 0307 	and.w	r3, r3, #7
 800db4a:	2b05      	cmp	r3, #5
 800db4c:	d826      	bhi.n	800db9c <UART_SetConfig+0x2cc>
 800db4e:	a201      	add	r2, pc, #4	; (adr r2, 800db54 <UART_SetConfig+0x284>)
 800db50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db54:	0800db6d 	.word	0x0800db6d
 800db58:	0800db75 	.word	0x0800db75
 800db5c:	0800db7d 	.word	0x0800db7d
 800db60:	0800db85 	.word	0x0800db85
 800db64:	0800db8d 	.word	0x0800db8d
 800db68:	0800db95 	.word	0x0800db95
 800db6c:	2300      	movs	r3, #0
 800db6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db72:	e284      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db74:	2304      	movs	r3, #4
 800db76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7a:	e280      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db7c:	2308      	movs	r3, #8
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db82:	e27c      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db84:	2310      	movs	r3, #16
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e278      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db8c:	2320      	movs	r3, #32
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db92:	e274      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db94:	2340      	movs	r3, #64	; 0x40
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9a:	e270      	b.n	800e07e <UART_SetConfig+0x7ae>
 800db9c:	2380      	movs	r3, #128	; 0x80
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba2:	e26c      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a1b      	ldr	r2, [pc, #108]	; (800dc18 <UART_SetConfig+0x348>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d142      	bne.n	800dc34 <UART_SetConfig+0x364>
 800dbae:	4b16      	ldr	r3, [pc, #88]	; (800dc08 <UART_SetConfig+0x338>)
 800dbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbb2:	f003 0307 	and.w	r3, r3, #7
 800dbb6:	2b05      	cmp	r3, #5
 800dbb8:	d838      	bhi.n	800dc2c <UART_SetConfig+0x35c>
 800dbba:	a201      	add	r2, pc, #4	; (adr r2, 800dbc0 <UART_SetConfig+0x2f0>)
 800dbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc0:	0800dbd9 	.word	0x0800dbd9
 800dbc4:	0800dbe1 	.word	0x0800dbe1
 800dbc8:	0800dbe9 	.word	0x0800dbe9
 800dbcc:	0800dbf1 	.word	0x0800dbf1
 800dbd0:	0800dc1d 	.word	0x0800dc1d
 800dbd4:	0800dc25 	.word	0x0800dc25
 800dbd8:	2300      	movs	r3, #0
 800dbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbde:	e24e      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dbe0:	2304      	movs	r3, #4
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe6:	e24a      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dbe8:	2308      	movs	r3, #8
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e246      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dbf0:	2310      	movs	r3, #16
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e242      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dbf8:	cfff69f3 	.word	0xcfff69f3
 800dbfc:	58000c00 	.word	0x58000c00
 800dc00:	11fff4ff 	.word	0x11fff4ff
 800dc04:	40011000 	.word	0x40011000
 800dc08:	58024400 	.word	0x58024400
 800dc0c:	40004400 	.word	0x40004400
 800dc10:	40004800 	.word	0x40004800
 800dc14:	40004c00 	.word	0x40004c00
 800dc18:	40005000 	.word	0x40005000
 800dc1c:	2320      	movs	r3, #32
 800dc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc22:	e22c      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dc24:	2340      	movs	r3, #64	; 0x40
 800dc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2a:	e228      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dc2c:	2380      	movs	r3, #128	; 0x80
 800dc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc32:	e224      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dc34:	697b      	ldr	r3, [r7, #20]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	4ab1      	ldr	r2, [pc, #708]	; (800df00 <UART_SetConfig+0x630>)
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d176      	bne.n	800dd2c <UART_SetConfig+0x45c>
 800dc3e:	4bb1      	ldr	r3, [pc, #708]	; (800df04 <UART_SetConfig+0x634>)
 800dc40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc46:	2b28      	cmp	r3, #40	; 0x28
 800dc48:	d86c      	bhi.n	800dd24 <UART_SetConfig+0x454>
 800dc4a:	a201      	add	r2, pc, #4	; (adr r2, 800dc50 <UART_SetConfig+0x380>)
 800dc4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc50:	0800dcf5 	.word	0x0800dcf5
 800dc54:	0800dd25 	.word	0x0800dd25
 800dc58:	0800dd25 	.word	0x0800dd25
 800dc5c:	0800dd25 	.word	0x0800dd25
 800dc60:	0800dd25 	.word	0x0800dd25
 800dc64:	0800dd25 	.word	0x0800dd25
 800dc68:	0800dd25 	.word	0x0800dd25
 800dc6c:	0800dd25 	.word	0x0800dd25
 800dc70:	0800dcfd 	.word	0x0800dcfd
 800dc74:	0800dd25 	.word	0x0800dd25
 800dc78:	0800dd25 	.word	0x0800dd25
 800dc7c:	0800dd25 	.word	0x0800dd25
 800dc80:	0800dd25 	.word	0x0800dd25
 800dc84:	0800dd25 	.word	0x0800dd25
 800dc88:	0800dd25 	.word	0x0800dd25
 800dc8c:	0800dd25 	.word	0x0800dd25
 800dc90:	0800dd05 	.word	0x0800dd05
 800dc94:	0800dd25 	.word	0x0800dd25
 800dc98:	0800dd25 	.word	0x0800dd25
 800dc9c:	0800dd25 	.word	0x0800dd25
 800dca0:	0800dd25 	.word	0x0800dd25
 800dca4:	0800dd25 	.word	0x0800dd25
 800dca8:	0800dd25 	.word	0x0800dd25
 800dcac:	0800dd25 	.word	0x0800dd25
 800dcb0:	0800dd0d 	.word	0x0800dd0d
 800dcb4:	0800dd25 	.word	0x0800dd25
 800dcb8:	0800dd25 	.word	0x0800dd25
 800dcbc:	0800dd25 	.word	0x0800dd25
 800dcc0:	0800dd25 	.word	0x0800dd25
 800dcc4:	0800dd25 	.word	0x0800dd25
 800dcc8:	0800dd25 	.word	0x0800dd25
 800dccc:	0800dd25 	.word	0x0800dd25
 800dcd0:	0800dd15 	.word	0x0800dd15
 800dcd4:	0800dd25 	.word	0x0800dd25
 800dcd8:	0800dd25 	.word	0x0800dd25
 800dcdc:	0800dd25 	.word	0x0800dd25
 800dce0:	0800dd25 	.word	0x0800dd25
 800dce4:	0800dd25 	.word	0x0800dd25
 800dce8:	0800dd25 	.word	0x0800dd25
 800dcec:	0800dd25 	.word	0x0800dd25
 800dcf0:	0800dd1d 	.word	0x0800dd1d
 800dcf4:	2301      	movs	r3, #1
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e1c0      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dcfc:	2304      	movs	r3, #4
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd02:	e1bc      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd04:	2308      	movs	r3, #8
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0a:	e1b8      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd0c:	2310      	movs	r3, #16
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd12:	e1b4      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd14:	2320      	movs	r3, #32
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1a:	e1b0      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd1c:	2340      	movs	r3, #64	; 0x40
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd22:	e1ac      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd24:	2380      	movs	r3, #128	; 0x80
 800dd26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd2a:	e1a8      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	4a75      	ldr	r2, [pc, #468]	; (800df08 <UART_SetConfig+0x638>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d130      	bne.n	800dd98 <UART_SetConfig+0x4c8>
 800dd36:	4b73      	ldr	r3, [pc, #460]	; (800df04 <UART_SetConfig+0x634>)
 800dd38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd3a:	f003 0307 	and.w	r3, r3, #7
 800dd3e:	2b05      	cmp	r3, #5
 800dd40:	d826      	bhi.n	800dd90 <UART_SetConfig+0x4c0>
 800dd42:	a201      	add	r2, pc, #4	; (adr r2, 800dd48 <UART_SetConfig+0x478>)
 800dd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd48:	0800dd61 	.word	0x0800dd61
 800dd4c:	0800dd69 	.word	0x0800dd69
 800dd50:	0800dd71 	.word	0x0800dd71
 800dd54:	0800dd79 	.word	0x0800dd79
 800dd58:	0800dd81 	.word	0x0800dd81
 800dd5c:	0800dd89 	.word	0x0800dd89
 800dd60:	2300      	movs	r3, #0
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd66:	e18a      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd68:	2304      	movs	r3, #4
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6e:	e186      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd70:	2308      	movs	r3, #8
 800dd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd76:	e182      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd78:	2310      	movs	r3, #16
 800dd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7e:	e17e      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd80:	2320      	movs	r3, #32
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd86:	e17a      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd88:	2340      	movs	r3, #64	; 0x40
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8e:	e176      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd90:	2380      	movs	r3, #128	; 0x80
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd96:	e172      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a5b      	ldr	r2, [pc, #364]	; (800df0c <UART_SetConfig+0x63c>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d130      	bne.n	800de04 <UART_SetConfig+0x534>
 800dda2:	4b58      	ldr	r3, [pc, #352]	; (800df04 <UART_SetConfig+0x634>)
 800dda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dda6:	f003 0307 	and.w	r3, r3, #7
 800ddaa:	2b05      	cmp	r3, #5
 800ddac:	d826      	bhi.n	800ddfc <UART_SetConfig+0x52c>
 800ddae:	a201      	add	r2, pc, #4	; (adr r2, 800ddb4 <UART_SetConfig+0x4e4>)
 800ddb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb4:	0800ddcd 	.word	0x0800ddcd
 800ddb8:	0800ddd5 	.word	0x0800ddd5
 800ddbc:	0800dddd 	.word	0x0800dddd
 800ddc0:	0800dde5 	.word	0x0800dde5
 800ddc4:	0800dded 	.word	0x0800dded
 800ddc8:	0800ddf5 	.word	0x0800ddf5
 800ddcc:	2300      	movs	r3, #0
 800ddce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd2:	e154      	b.n	800e07e <UART_SetConfig+0x7ae>
 800ddd4:	2304      	movs	r3, #4
 800ddd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddda:	e150      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dddc:	2308      	movs	r3, #8
 800ddde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde2:	e14c      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dde4:	2310      	movs	r3, #16
 800dde6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddea:	e148      	b.n	800e07e <UART_SetConfig+0x7ae>
 800ddec:	2320      	movs	r3, #32
 800ddee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf2:	e144      	b.n	800e07e <UART_SetConfig+0x7ae>
 800ddf4:	2340      	movs	r3, #64	; 0x40
 800ddf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfa:	e140      	b.n	800e07e <UART_SetConfig+0x7ae>
 800ddfc:	2380      	movs	r3, #128	; 0x80
 800ddfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de02:	e13c      	b.n	800e07e <UART_SetConfig+0x7ae>
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a41      	ldr	r2, [pc, #260]	; (800df10 <UART_SetConfig+0x640>)
 800de0a:	4293      	cmp	r3, r2
 800de0c:	f040 8082 	bne.w	800df14 <UART_SetConfig+0x644>
 800de10:	4b3c      	ldr	r3, [pc, #240]	; (800df04 <UART_SetConfig+0x634>)
 800de12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800de18:	2b28      	cmp	r3, #40	; 0x28
 800de1a:	d86d      	bhi.n	800def8 <UART_SetConfig+0x628>
 800de1c:	a201      	add	r2, pc, #4	; (adr r2, 800de24 <UART_SetConfig+0x554>)
 800de1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de22:	bf00      	nop
 800de24:	0800dec9 	.word	0x0800dec9
 800de28:	0800def9 	.word	0x0800def9
 800de2c:	0800def9 	.word	0x0800def9
 800de30:	0800def9 	.word	0x0800def9
 800de34:	0800def9 	.word	0x0800def9
 800de38:	0800def9 	.word	0x0800def9
 800de3c:	0800def9 	.word	0x0800def9
 800de40:	0800def9 	.word	0x0800def9
 800de44:	0800ded1 	.word	0x0800ded1
 800de48:	0800def9 	.word	0x0800def9
 800de4c:	0800def9 	.word	0x0800def9
 800de50:	0800def9 	.word	0x0800def9
 800de54:	0800def9 	.word	0x0800def9
 800de58:	0800def9 	.word	0x0800def9
 800de5c:	0800def9 	.word	0x0800def9
 800de60:	0800def9 	.word	0x0800def9
 800de64:	0800ded9 	.word	0x0800ded9
 800de68:	0800def9 	.word	0x0800def9
 800de6c:	0800def9 	.word	0x0800def9
 800de70:	0800def9 	.word	0x0800def9
 800de74:	0800def9 	.word	0x0800def9
 800de78:	0800def9 	.word	0x0800def9
 800de7c:	0800def9 	.word	0x0800def9
 800de80:	0800def9 	.word	0x0800def9
 800de84:	0800dee1 	.word	0x0800dee1
 800de88:	0800def9 	.word	0x0800def9
 800de8c:	0800def9 	.word	0x0800def9
 800de90:	0800def9 	.word	0x0800def9
 800de94:	0800def9 	.word	0x0800def9
 800de98:	0800def9 	.word	0x0800def9
 800de9c:	0800def9 	.word	0x0800def9
 800dea0:	0800def9 	.word	0x0800def9
 800dea4:	0800dee9 	.word	0x0800dee9
 800dea8:	0800def9 	.word	0x0800def9
 800deac:	0800def9 	.word	0x0800def9
 800deb0:	0800def9 	.word	0x0800def9
 800deb4:	0800def9 	.word	0x0800def9
 800deb8:	0800def9 	.word	0x0800def9
 800debc:	0800def9 	.word	0x0800def9
 800dec0:	0800def9 	.word	0x0800def9
 800dec4:	0800def1 	.word	0x0800def1
 800dec8:	2301      	movs	r3, #1
 800deca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dece:	e0d6      	b.n	800e07e <UART_SetConfig+0x7ae>
 800ded0:	2304      	movs	r3, #4
 800ded2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ded6:	e0d2      	b.n	800e07e <UART_SetConfig+0x7ae>
 800ded8:	2308      	movs	r3, #8
 800deda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dede:	e0ce      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dee0:	2310      	movs	r3, #16
 800dee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dee6:	e0ca      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dee8:	2320      	movs	r3, #32
 800deea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800deee:	e0c6      	b.n	800e07e <UART_SetConfig+0x7ae>
 800def0:	2340      	movs	r3, #64	; 0x40
 800def2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800def6:	e0c2      	b.n	800e07e <UART_SetConfig+0x7ae>
 800def8:	2380      	movs	r3, #128	; 0x80
 800defa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800defe:	e0be      	b.n	800e07e <UART_SetConfig+0x7ae>
 800df00:	40011400 	.word	0x40011400
 800df04:	58024400 	.word	0x58024400
 800df08:	40007800 	.word	0x40007800
 800df0c:	40007c00 	.word	0x40007c00
 800df10:	40011800 	.word	0x40011800
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4aad      	ldr	r2, [pc, #692]	; (800e1d0 <UART_SetConfig+0x900>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d176      	bne.n	800e00c <UART_SetConfig+0x73c>
 800df1e:	4bad      	ldr	r3, [pc, #692]	; (800e1d4 <UART_SetConfig+0x904>)
 800df20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df26:	2b28      	cmp	r3, #40	; 0x28
 800df28:	d86c      	bhi.n	800e004 <UART_SetConfig+0x734>
 800df2a:	a201      	add	r2, pc, #4	; (adr r2, 800df30 <UART_SetConfig+0x660>)
 800df2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df30:	0800dfd5 	.word	0x0800dfd5
 800df34:	0800e005 	.word	0x0800e005
 800df38:	0800e005 	.word	0x0800e005
 800df3c:	0800e005 	.word	0x0800e005
 800df40:	0800e005 	.word	0x0800e005
 800df44:	0800e005 	.word	0x0800e005
 800df48:	0800e005 	.word	0x0800e005
 800df4c:	0800e005 	.word	0x0800e005
 800df50:	0800dfdd 	.word	0x0800dfdd
 800df54:	0800e005 	.word	0x0800e005
 800df58:	0800e005 	.word	0x0800e005
 800df5c:	0800e005 	.word	0x0800e005
 800df60:	0800e005 	.word	0x0800e005
 800df64:	0800e005 	.word	0x0800e005
 800df68:	0800e005 	.word	0x0800e005
 800df6c:	0800e005 	.word	0x0800e005
 800df70:	0800dfe5 	.word	0x0800dfe5
 800df74:	0800e005 	.word	0x0800e005
 800df78:	0800e005 	.word	0x0800e005
 800df7c:	0800e005 	.word	0x0800e005
 800df80:	0800e005 	.word	0x0800e005
 800df84:	0800e005 	.word	0x0800e005
 800df88:	0800e005 	.word	0x0800e005
 800df8c:	0800e005 	.word	0x0800e005
 800df90:	0800dfed 	.word	0x0800dfed
 800df94:	0800e005 	.word	0x0800e005
 800df98:	0800e005 	.word	0x0800e005
 800df9c:	0800e005 	.word	0x0800e005
 800dfa0:	0800e005 	.word	0x0800e005
 800dfa4:	0800e005 	.word	0x0800e005
 800dfa8:	0800e005 	.word	0x0800e005
 800dfac:	0800e005 	.word	0x0800e005
 800dfb0:	0800dff5 	.word	0x0800dff5
 800dfb4:	0800e005 	.word	0x0800e005
 800dfb8:	0800e005 	.word	0x0800e005
 800dfbc:	0800e005 	.word	0x0800e005
 800dfc0:	0800e005 	.word	0x0800e005
 800dfc4:	0800e005 	.word	0x0800e005
 800dfc8:	0800e005 	.word	0x0800e005
 800dfcc:	0800e005 	.word	0x0800e005
 800dfd0:	0800dffd 	.word	0x0800dffd
 800dfd4:	2301      	movs	r3, #1
 800dfd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfda:	e050      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dfdc:	2304      	movs	r3, #4
 800dfde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfe2:	e04c      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dfe4:	2308      	movs	r3, #8
 800dfe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dfea:	e048      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dfec:	2310      	movs	r3, #16
 800dfee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dff2:	e044      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dff4:	2320      	movs	r3, #32
 800dff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dffa:	e040      	b.n	800e07e <UART_SetConfig+0x7ae>
 800dffc:	2340      	movs	r3, #64	; 0x40
 800dffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e002:	e03c      	b.n	800e07e <UART_SetConfig+0x7ae>
 800e004:	2380      	movs	r3, #128	; 0x80
 800e006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e00a:	e038      	b.n	800e07e <UART_SetConfig+0x7ae>
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a71      	ldr	r2, [pc, #452]	; (800e1d8 <UART_SetConfig+0x908>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d130      	bne.n	800e078 <UART_SetConfig+0x7a8>
 800e016:	4b6f      	ldr	r3, [pc, #444]	; (800e1d4 <UART_SetConfig+0x904>)
 800e018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e01a:	f003 0307 	and.w	r3, r3, #7
 800e01e:	2b05      	cmp	r3, #5
 800e020:	d826      	bhi.n	800e070 <UART_SetConfig+0x7a0>
 800e022:	a201      	add	r2, pc, #4	; (adr r2, 800e028 <UART_SetConfig+0x758>)
 800e024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e028:	0800e041 	.word	0x0800e041
 800e02c:	0800e049 	.word	0x0800e049
 800e030:	0800e051 	.word	0x0800e051
 800e034:	0800e059 	.word	0x0800e059
 800e038:	0800e061 	.word	0x0800e061
 800e03c:	0800e069 	.word	0x0800e069
 800e040:	2302      	movs	r3, #2
 800e042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e046:	e01a      	b.n	800e07e <UART_SetConfig+0x7ae>
 800e048:	2304      	movs	r3, #4
 800e04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e04e:	e016      	b.n	800e07e <UART_SetConfig+0x7ae>
 800e050:	2308      	movs	r3, #8
 800e052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e056:	e012      	b.n	800e07e <UART_SetConfig+0x7ae>
 800e058:	2310      	movs	r3, #16
 800e05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e05e:	e00e      	b.n	800e07e <UART_SetConfig+0x7ae>
 800e060:	2320      	movs	r3, #32
 800e062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e066:	e00a      	b.n	800e07e <UART_SetConfig+0x7ae>
 800e068:	2340      	movs	r3, #64	; 0x40
 800e06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e06e:	e006      	b.n	800e07e <UART_SetConfig+0x7ae>
 800e070:	2380      	movs	r3, #128	; 0x80
 800e072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e076:	e002      	b.n	800e07e <UART_SetConfig+0x7ae>
 800e078:	2380      	movs	r3, #128	; 0x80
 800e07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	4a55      	ldr	r2, [pc, #340]	; (800e1d8 <UART_SetConfig+0x908>)
 800e084:	4293      	cmp	r3, r2
 800e086:	f040 80f8 	bne.w	800e27a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e08a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e08e:	2b20      	cmp	r3, #32
 800e090:	dc46      	bgt.n	800e120 <UART_SetConfig+0x850>
 800e092:	2b02      	cmp	r3, #2
 800e094:	db75      	blt.n	800e182 <UART_SetConfig+0x8b2>
 800e096:	3b02      	subs	r3, #2
 800e098:	2b1e      	cmp	r3, #30
 800e09a:	d872      	bhi.n	800e182 <UART_SetConfig+0x8b2>
 800e09c:	a201      	add	r2, pc, #4	; (adr r2, 800e0a4 <UART_SetConfig+0x7d4>)
 800e09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a2:	bf00      	nop
 800e0a4:	0800e127 	.word	0x0800e127
 800e0a8:	0800e183 	.word	0x0800e183
 800e0ac:	0800e12f 	.word	0x0800e12f
 800e0b0:	0800e183 	.word	0x0800e183
 800e0b4:	0800e183 	.word	0x0800e183
 800e0b8:	0800e183 	.word	0x0800e183
 800e0bc:	0800e13f 	.word	0x0800e13f
 800e0c0:	0800e183 	.word	0x0800e183
 800e0c4:	0800e183 	.word	0x0800e183
 800e0c8:	0800e183 	.word	0x0800e183
 800e0cc:	0800e183 	.word	0x0800e183
 800e0d0:	0800e183 	.word	0x0800e183
 800e0d4:	0800e183 	.word	0x0800e183
 800e0d8:	0800e183 	.word	0x0800e183
 800e0dc:	0800e14f 	.word	0x0800e14f
 800e0e0:	0800e183 	.word	0x0800e183
 800e0e4:	0800e183 	.word	0x0800e183
 800e0e8:	0800e183 	.word	0x0800e183
 800e0ec:	0800e183 	.word	0x0800e183
 800e0f0:	0800e183 	.word	0x0800e183
 800e0f4:	0800e183 	.word	0x0800e183
 800e0f8:	0800e183 	.word	0x0800e183
 800e0fc:	0800e183 	.word	0x0800e183
 800e100:	0800e183 	.word	0x0800e183
 800e104:	0800e183 	.word	0x0800e183
 800e108:	0800e183 	.word	0x0800e183
 800e10c:	0800e183 	.word	0x0800e183
 800e110:	0800e183 	.word	0x0800e183
 800e114:	0800e183 	.word	0x0800e183
 800e118:	0800e183 	.word	0x0800e183
 800e11c:	0800e175 	.word	0x0800e175
 800e120:	2b40      	cmp	r3, #64	; 0x40
 800e122:	d02a      	beq.n	800e17a <UART_SetConfig+0x8aa>
 800e124:	e02d      	b.n	800e182 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e126:	f7fe fc2b 	bl	800c980 <HAL_RCCEx_GetD3PCLK1Freq>
 800e12a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e12c:	e02f      	b.n	800e18e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e12e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e132:	4618      	mov	r0, r3
 800e134:	f7fe fc3a 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e13c:	e027      	b.n	800e18e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e13e:	f107 0318 	add.w	r3, r7, #24
 800e142:	4618      	mov	r0, r3
 800e144:	f7fe fd86 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e148:	69fb      	ldr	r3, [r7, #28]
 800e14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e14c:	e01f      	b.n	800e18e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e14e:	4b21      	ldr	r3, [pc, #132]	; (800e1d4 <UART_SetConfig+0x904>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	f003 0320 	and.w	r3, r3, #32
 800e156:	2b00      	cmp	r3, #0
 800e158:	d009      	beq.n	800e16e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e15a:	4b1e      	ldr	r3, [pc, #120]	; (800e1d4 <UART_SetConfig+0x904>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	08db      	lsrs	r3, r3, #3
 800e160:	f003 0303 	and.w	r3, r3, #3
 800e164:	4a1d      	ldr	r2, [pc, #116]	; (800e1dc <UART_SetConfig+0x90c>)
 800e166:	fa22 f303 	lsr.w	r3, r2, r3
 800e16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e16c:	e00f      	b.n	800e18e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e16e:	4b1b      	ldr	r3, [pc, #108]	; (800e1dc <UART_SetConfig+0x90c>)
 800e170:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e172:	e00c      	b.n	800e18e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e174:	4b1a      	ldr	r3, [pc, #104]	; (800e1e0 <UART_SetConfig+0x910>)
 800e176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e178:	e009      	b.n	800e18e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e17a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e180:	e005      	b.n	800e18e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e182:	2300      	movs	r3, #0
 800e184:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e186:	2301      	movs	r3, #1
 800e188:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e18c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e190:	2b00      	cmp	r3, #0
 800e192:	f000 81ee 	beq.w	800e572 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e19a:	4a12      	ldr	r2, [pc, #72]	; (800e1e4 <UART_SetConfig+0x914>)
 800e19c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1a0:	461a      	mov	r2, r3
 800e1a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e1a8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1aa:	697b      	ldr	r3, [r7, #20]
 800e1ac:	685a      	ldr	r2, [r3, #4]
 800e1ae:	4613      	mov	r3, r2
 800e1b0:	005b      	lsls	r3, r3, #1
 800e1b2:	4413      	add	r3, r2
 800e1b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1b6:	429a      	cmp	r2, r3
 800e1b8:	d305      	bcc.n	800e1c6 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	685b      	ldr	r3, [r3, #4]
 800e1be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e1c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1c2:	429a      	cmp	r2, r3
 800e1c4:	d910      	bls.n	800e1e8 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800e1c6:	2301      	movs	r3, #1
 800e1c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e1cc:	e1d1      	b.n	800e572 <UART_SetConfig+0xca2>
 800e1ce:	bf00      	nop
 800e1d0:	40011c00 	.word	0x40011c00
 800e1d4:	58024400 	.word	0x58024400
 800e1d8:	58000c00 	.word	0x58000c00
 800e1dc:	03d09000 	.word	0x03d09000
 800e1e0:	003d0900 	.word	0x003d0900
 800e1e4:	08017cc4 	.word	0x08017cc4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	60bb      	str	r3, [r7, #8]
 800e1ee:	60fa      	str	r2, [r7, #12]
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1f4:	4ac0      	ldr	r2, [pc, #768]	; (800e4f8 <UART_SetConfig+0xc28>)
 800e1f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e1fa:	b29b      	uxth	r3, r3
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	603b      	str	r3, [r7, #0]
 800e200:	607a      	str	r2, [r7, #4]
 800e202:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e206:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e20a:	f7f2 fa95 	bl	8000738 <__aeabi_uldivmod>
 800e20e:	4602      	mov	r2, r0
 800e210:	460b      	mov	r3, r1
 800e212:	4610      	mov	r0, r2
 800e214:	4619      	mov	r1, r3
 800e216:	f04f 0200 	mov.w	r2, #0
 800e21a:	f04f 0300 	mov.w	r3, #0
 800e21e:	020b      	lsls	r3, r1, #8
 800e220:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e224:	0202      	lsls	r2, r0, #8
 800e226:	6979      	ldr	r1, [r7, #20]
 800e228:	6849      	ldr	r1, [r1, #4]
 800e22a:	0849      	lsrs	r1, r1, #1
 800e22c:	2000      	movs	r0, #0
 800e22e:	460c      	mov	r4, r1
 800e230:	4605      	mov	r5, r0
 800e232:	eb12 0804 	adds.w	r8, r2, r4
 800e236:	eb43 0905 	adc.w	r9, r3, r5
 800e23a:	697b      	ldr	r3, [r7, #20]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	469a      	mov	sl, r3
 800e242:	4693      	mov	fp, r2
 800e244:	4652      	mov	r2, sl
 800e246:	465b      	mov	r3, fp
 800e248:	4640      	mov	r0, r8
 800e24a:	4649      	mov	r1, r9
 800e24c:	f7f2 fa74 	bl	8000738 <__aeabi_uldivmod>
 800e250:	4602      	mov	r2, r0
 800e252:	460b      	mov	r3, r1
 800e254:	4613      	mov	r3, r2
 800e256:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e25e:	d308      	bcc.n	800e272 <UART_SetConfig+0x9a2>
 800e260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e262:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e266:	d204      	bcs.n	800e272 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e268:	697b      	ldr	r3, [r7, #20]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e26e:	60da      	str	r2, [r3, #12]
 800e270:	e17f      	b.n	800e572 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e272:	2301      	movs	r3, #1
 800e274:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e278:	e17b      	b.n	800e572 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e27a:	697b      	ldr	r3, [r7, #20]
 800e27c:	69db      	ldr	r3, [r3, #28]
 800e27e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e282:	f040 80bd 	bne.w	800e400 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e286:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e28a:	2b20      	cmp	r3, #32
 800e28c:	dc48      	bgt.n	800e320 <UART_SetConfig+0xa50>
 800e28e:	2b00      	cmp	r3, #0
 800e290:	db7b      	blt.n	800e38a <UART_SetConfig+0xaba>
 800e292:	2b20      	cmp	r3, #32
 800e294:	d879      	bhi.n	800e38a <UART_SetConfig+0xaba>
 800e296:	a201      	add	r2, pc, #4	; (adr r2, 800e29c <UART_SetConfig+0x9cc>)
 800e298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e29c:	0800e327 	.word	0x0800e327
 800e2a0:	0800e32f 	.word	0x0800e32f
 800e2a4:	0800e38b 	.word	0x0800e38b
 800e2a8:	0800e38b 	.word	0x0800e38b
 800e2ac:	0800e337 	.word	0x0800e337
 800e2b0:	0800e38b 	.word	0x0800e38b
 800e2b4:	0800e38b 	.word	0x0800e38b
 800e2b8:	0800e38b 	.word	0x0800e38b
 800e2bc:	0800e347 	.word	0x0800e347
 800e2c0:	0800e38b 	.word	0x0800e38b
 800e2c4:	0800e38b 	.word	0x0800e38b
 800e2c8:	0800e38b 	.word	0x0800e38b
 800e2cc:	0800e38b 	.word	0x0800e38b
 800e2d0:	0800e38b 	.word	0x0800e38b
 800e2d4:	0800e38b 	.word	0x0800e38b
 800e2d8:	0800e38b 	.word	0x0800e38b
 800e2dc:	0800e357 	.word	0x0800e357
 800e2e0:	0800e38b 	.word	0x0800e38b
 800e2e4:	0800e38b 	.word	0x0800e38b
 800e2e8:	0800e38b 	.word	0x0800e38b
 800e2ec:	0800e38b 	.word	0x0800e38b
 800e2f0:	0800e38b 	.word	0x0800e38b
 800e2f4:	0800e38b 	.word	0x0800e38b
 800e2f8:	0800e38b 	.word	0x0800e38b
 800e2fc:	0800e38b 	.word	0x0800e38b
 800e300:	0800e38b 	.word	0x0800e38b
 800e304:	0800e38b 	.word	0x0800e38b
 800e308:	0800e38b 	.word	0x0800e38b
 800e30c:	0800e38b 	.word	0x0800e38b
 800e310:	0800e38b 	.word	0x0800e38b
 800e314:	0800e38b 	.word	0x0800e38b
 800e318:	0800e38b 	.word	0x0800e38b
 800e31c:	0800e37d 	.word	0x0800e37d
 800e320:	2b40      	cmp	r3, #64	; 0x40
 800e322:	d02e      	beq.n	800e382 <UART_SetConfig+0xab2>
 800e324:	e031      	b.n	800e38a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e326:	f7fc fc8d 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800e32a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e32c:	e033      	b.n	800e396 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e32e:	f7fc fc9f 	bl	800ac70 <HAL_RCC_GetPCLK2Freq>
 800e332:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e334:	e02f      	b.n	800e396 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7fe fb36 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e344:	e027      	b.n	800e396 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e346:	f107 0318 	add.w	r3, r7, #24
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fe fc82 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e350:	69fb      	ldr	r3, [r7, #28]
 800e352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e354:	e01f      	b.n	800e396 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e356:	4b69      	ldr	r3, [pc, #420]	; (800e4fc <UART_SetConfig+0xc2c>)
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	f003 0320 	and.w	r3, r3, #32
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d009      	beq.n	800e376 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e362:	4b66      	ldr	r3, [pc, #408]	; (800e4fc <UART_SetConfig+0xc2c>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	08db      	lsrs	r3, r3, #3
 800e368:	f003 0303 	and.w	r3, r3, #3
 800e36c:	4a64      	ldr	r2, [pc, #400]	; (800e500 <UART_SetConfig+0xc30>)
 800e36e:	fa22 f303 	lsr.w	r3, r2, r3
 800e372:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e374:	e00f      	b.n	800e396 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e376:	4b62      	ldr	r3, [pc, #392]	; (800e500 <UART_SetConfig+0xc30>)
 800e378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e37a:	e00c      	b.n	800e396 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e37c:	4b61      	ldr	r3, [pc, #388]	; (800e504 <UART_SetConfig+0xc34>)
 800e37e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e380:	e009      	b.n	800e396 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e386:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e388:	e005      	b.n	800e396 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e38a:	2300      	movs	r3, #0
 800e38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e38e:	2301      	movs	r3, #1
 800e390:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e394:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e398:	2b00      	cmp	r3, #0
 800e39a:	f000 80ea 	beq.w	800e572 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e39e:	697b      	ldr	r3, [r7, #20]
 800e3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3a2:	4a55      	ldr	r2, [pc, #340]	; (800e4f8 <UART_SetConfig+0xc28>)
 800e3a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e3a8:	461a      	mov	r2, r3
 800e3aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3b0:	005a      	lsls	r2, r3, #1
 800e3b2:	697b      	ldr	r3, [r7, #20]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	085b      	lsrs	r3, r3, #1
 800e3b8:	441a      	add	r2, r3
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	685b      	ldr	r3, [r3, #4]
 800e3be:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3c6:	2b0f      	cmp	r3, #15
 800e3c8:	d916      	bls.n	800e3f8 <UART_SetConfig+0xb28>
 800e3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3d0:	d212      	bcs.n	800e3f8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	f023 030f 	bic.w	r3, r3, #15
 800e3da:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3de:	085b      	lsrs	r3, r3, #1
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	f003 0307 	and.w	r3, r3, #7
 800e3e6:	b29a      	uxth	r2, r3
 800e3e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e3f4:	60da      	str	r2, [r3, #12]
 800e3f6:	e0bc      	b.n	800e572 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e3fe:	e0b8      	b.n	800e572 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e400:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e404:	2b20      	cmp	r3, #32
 800e406:	dc4b      	bgt.n	800e4a0 <UART_SetConfig+0xbd0>
 800e408:	2b00      	cmp	r3, #0
 800e40a:	f2c0 8087 	blt.w	800e51c <UART_SetConfig+0xc4c>
 800e40e:	2b20      	cmp	r3, #32
 800e410:	f200 8084 	bhi.w	800e51c <UART_SetConfig+0xc4c>
 800e414:	a201      	add	r2, pc, #4	; (adr r2, 800e41c <UART_SetConfig+0xb4c>)
 800e416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e41a:	bf00      	nop
 800e41c:	0800e4a7 	.word	0x0800e4a7
 800e420:	0800e4af 	.word	0x0800e4af
 800e424:	0800e51d 	.word	0x0800e51d
 800e428:	0800e51d 	.word	0x0800e51d
 800e42c:	0800e4b7 	.word	0x0800e4b7
 800e430:	0800e51d 	.word	0x0800e51d
 800e434:	0800e51d 	.word	0x0800e51d
 800e438:	0800e51d 	.word	0x0800e51d
 800e43c:	0800e4c7 	.word	0x0800e4c7
 800e440:	0800e51d 	.word	0x0800e51d
 800e444:	0800e51d 	.word	0x0800e51d
 800e448:	0800e51d 	.word	0x0800e51d
 800e44c:	0800e51d 	.word	0x0800e51d
 800e450:	0800e51d 	.word	0x0800e51d
 800e454:	0800e51d 	.word	0x0800e51d
 800e458:	0800e51d 	.word	0x0800e51d
 800e45c:	0800e4d7 	.word	0x0800e4d7
 800e460:	0800e51d 	.word	0x0800e51d
 800e464:	0800e51d 	.word	0x0800e51d
 800e468:	0800e51d 	.word	0x0800e51d
 800e46c:	0800e51d 	.word	0x0800e51d
 800e470:	0800e51d 	.word	0x0800e51d
 800e474:	0800e51d 	.word	0x0800e51d
 800e478:	0800e51d 	.word	0x0800e51d
 800e47c:	0800e51d 	.word	0x0800e51d
 800e480:	0800e51d 	.word	0x0800e51d
 800e484:	0800e51d 	.word	0x0800e51d
 800e488:	0800e51d 	.word	0x0800e51d
 800e48c:	0800e51d 	.word	0x0800e51d
 800e490:	0800e51d 	.word	0x0800e51d
 800e494:	0800e51d 	.word	0x0800e51d
 800e498:	0800e51d 	.word	0x0800e51d
 800e49c:	0800e50f 	.word	0x0800e50f
 800e4a0:	2b40      	cmp	r3, #64	; 0x40
 800e4a2:	d037      	beq.n	800e514 <UART_SetConfig+0xc44>
 800e4a4:	e03a      	b.n	800e51c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e4a6:	f7fc fbcd 	bl	800ac44 <HAL_RCC_GetPCLK1Freq>
 800e4aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e4ac:	e03c      	b.n	800e528 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e4ae:	f7fc fbdf 	bl	800ac70 <HAL_RCC_GetPCLK2Freq>
 800e4b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e4b4:	e038      	b.n	800e528 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e4b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe fa76 	bl	800c9ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4c4:	e030      	b.n	800e528 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4c6:	f107 0318 	add.w	r3, r7, #24
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7fe fbc2 	bl	800cc54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e4d0:	69fb      	ldr	r3, [r7, #28]
 800e4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e4d4:	e028      	b.n	800e528 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e4d6:	4b09      	ldr	r3, [pc, #36]	; (800e4fc <UART_SetConfig+0xc2c>)
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	f003 0320 	and.w	r3, r3, #32
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d012      	beq.n	800e508 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e4e2:	4b06      	ldr	r3, [pc, #24]	; (800e4fc <UART_SetConfig+0xc2c>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	08db      	lsrs	r3, r3, #3
 800e4e8:	f003 0303 	and.w	r3, r3, #3
 800e4ec:	4a04      	ldr	r2, [pc, #16]	; (800e500 <UART_SetConfig+0xc30>)
 800e4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800e4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e4f4:	e018      	b.n	800e528 <UART_SetConfig+0xc58>
 800e4f6:	bf00      	nop
 800e4f8:	08017cc4 	.word	0x08017cc4
 800e4fc:	58024400 	.word	0x58024400
 800e500:	03d09000 	.word	0x03d09000
 800e504:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e508:	4b24      	ldr	r3, [pc, #144]	; (800e59c <UART_SetConfig+0xccc>)
 800e50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e50c:	e00c      	b.n	800e528 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e50e:	4b24      	ldr	r3, [pc, #144]	; (800e5a0 <UART_SetConfig+0xcd0>)
 800e510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e512:	e009      	b.n	800e528 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e51a:	e005      	b.n	800e528 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e51c:	2300      	movs	r3, #0
 800e51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e526:	bf00      	nop
    }

    if (pclk != 0U)
 800e528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d021      	beq.n	800e572 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e532:	4a1c      	ldr	r2, [pc, #112]	; (800e5a4 <UART_SetConfig+0xcd4>)
 800e534:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e538:	461a      	mov	r2, r3
 800e53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e53c:	fbb3 f2f2 	udiv	r2, r3, r2
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	085b      	lsrs	r3, r3, #1
 800e546:	441a      	add	r2, r3
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	685b      	ldr	r3, [r3, #4]
 800e54c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e550:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e554:	2b0f      	cmp	r3, #15
 800e556:	d909      	bls.n	800e56c <UART_SetConfig+0xc9c>
 800e558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e55a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e55e:	d205      	bcs.n	800e56c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e562:	b29a      	uxth	r2, r3
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	60da      	str	r2, [r3, #12]
 800e56a:	e002      	b.n	800e572 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e56c:	2301      	movs	r3, #1
 800e56e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	2201      	movs	r2, #1
 800e576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	2201      	movs	r2, #1
 800e57e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	2200      	movs	r2, #0
 800e586:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	2200      	movs	r2, #0
 800e58c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800e58e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e592:	4618      	mov	r0, r3
 800e594:	3748      	adds	r7, #72	; 0x48
 800e596:	46bd      	mov	sp, r7
 800e598:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e59c:	03d09000 	.word	0x03d09000
 800e5a0:	003d0900 	.word	0x003d0900
 800e5a4:	08017cc4 	.word	0x08017cc4

0800e5a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5b4:	f003 0301 	and.w	r3, r3, #1
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d00a      	beq.n	800e5d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	430a      	orrs	r2, r1
 800e5d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5d6:	f003 0302 	and.w	r3, r3, #2
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d00a      	beq.n	800e5f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	430a      	orrs	r2, r1
 800e5f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5f8:	f003 0304 	and.w	r3, r3, #4
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d00a      	beq.n	800e616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	685b      	ldr	r3, [r3, #4]
 800e606:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	430a      	orrs	r2, r1
 800e614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e61a:	f003 0308 	and.w	r3, r3, #8
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d00a      	beq.n	800e638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	430a      	orrs	r2, r1
 800e636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e63c:	f003 0310 	and.w	r3, r3, #16
 800e640:	2b00      	cmp	r3, #0
 800e642:	d00a      	beq.n	800e65a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	689b      	ldr	r3, [r3, #8]
 800e64a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	430a      	orrs	r2, r1
 800e658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e65e:	f003 0320 	and.w	r3, r3, #32
 800e662:	2b00      	cmp	r3, #0
 800e664:	d00a      	beq.n	800e67c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	689b      	ldr	r3, [r3, #8]
 800e66c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	430a      	orrs	r2, r1
 800e67a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e684:	2b00      	cmp	r3, #0
 800e686:	d01a      	beq.n	800e6be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	430a      	orrs	r2, r1
 800e69c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e6a6:	d10a      	bne.n	800e6be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	430a      	orrs	r2, r1
 800e6bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d00a      	beq.n	800e6e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	430a      	orrs	r2, r1
 800e6de:	605a      	str	r2, [r3, #4]
  }
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b098      	sub	sp, #96	; 0x60
 800e6f0:	af02      	add	r7, sp, #8
 800e6f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e6fc:	f7f4 f9cc 	bl	8002a98 <HAL_GetTick>
 800e700:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f003 0308 	and.w	r3, r3, #8
 800e70c:	2b08      	cmp	r3, #8
 800e70e:	d12f      	bne.n	800e770 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e710:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e714:	9300      	str	r3, [sp, #0]
 800e716:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e718:	2200      	movs	r2, #0
 800e71a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 f88e 	bl	800e840 <UART_WaitOnFlagUntilTimeout>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d022      	beq.n	800e770 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e732:	e853 3f00 	ldrex	r3, [r3]
 800e736:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e73a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e73e:	653b      	str	r3, [r7, #80]	; 0x50
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	461a      	mov	r2, r3
 800e746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e748:	647b      	str	r3, [r7, #68]	; 0x44
 800e74a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e74c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e74e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e750:	e841 2300 	strex	r3, r2, [r1]
 800e754:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1e6      	bne.n	800e72a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2220      	movs	r2, #32
 800e760:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e76c:	2303      	movs	r3, #3
 800e76e:	e063      	b.n	800e838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f003 0304 	and.w	r3, r3, #4
 800e77a:	2b04      	cmp	r3, #4
 800e77c:	d149      	bne.n	800e812 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e77e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e782:	9300      	str	r3, [sp, #0]
 800e784:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e786:	2200      	movs	r2, #0
 800e788:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 f857 	bl	800e840 <UART_WaitOnFlagUntilTimeout>
 800e792:	4603      	mov	r3, r0
 800e794:	2b00      	cmp	r3, #0
 800e796:	d03c      	beq.n	800e812 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a0:	e853 3f00 	ldrex	r3, [r3]
 800e7a4:	623b      	str	r3, [r7, #32]
   return(result);
 800e7a6:	6a3b      	ldr	r3, [r7, #32]
 800e7a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e7ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7b6:	633b      	str	r3, [r7, #48]	; 0x30
 800e7b8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e7bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7be:	e841 2300 	strex	r3, r2, [r1]
 800e7c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d1e6      	bne.n	800e798 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	3308      	adds	r3, #8
 800e7d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	e853 3f00 	ldrex	r3, [r3]
 800e7d8:	60fb      	str	r3, [r7, #12]
   return(result);
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	f023 0301 	bic.w	r3, r3, #1
 800e7e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	3308      	adds	r3, #8
 800e7e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e7ea:	61fa      	str	r2, [r7, #28]
 800e7ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ee:	69b9      	ldr	r1, [r7, #24]
 800e7f0:	69fa      	ldr	r2, [r7, #28]
 800e7f2:	e841 2300 	strex	r3, r2, [r1]
 800e7f6:	617b      	str	r3, [r7, #20]
   return(result);
 800e7f8:	697b      	ldr	r3, [r7, #20]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d1e5      	bne.n	800e7ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2220      	movs	r2, #32
 800e802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e80e:	2303      	movs	r3, #3
 800e810:	e012      	b.n	800e838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2220      	movs	r2, #32
 800e816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2220      	movs	r2, #32
 800e81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2200      	movs	r2, #0
 800e826:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2200      	movs	r2, #0
 800e82c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2200      	movs	r2, #0
 800e832:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800e836:	2300      	movs	r3, #0
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3758      	adds	r7, #88	; 0x58
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b084      	sub	sp, #16
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	60b9      	str	r1, [r7, #8]
 800e84a:	603b      	str	r3, [r7, #0]
 800e84c:	4613      	mov	r3, r2
 800e84e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e850:	e049      	b.n	800e8e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e858:	d045      	beq.n	800e8e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e85a:	f7f4 f91d 	bl	8002a98 <HAL_GetTick>
 800e85e:	4602      	mov	r2, r0
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	69ba      	ldr	r2, [r7, #24]
 800e866:	429a      	cmp	r2, r3
 800e868:	d302      	bcc.n	800e870 <UART_WaitOnFlagUntilTimeout+0x30>
 800e86a:	69bb      	ldr	r3, [r7, #24]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d101      	bne.n	800e874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e870:	2303      	movs	r3, #3
 800e872:	e048      	b.n	800e906 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f003 0304 	and.w	r3, r3, #4
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d031      	beq.n	800e8e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	69db      	ldr	r3, [r3, #28]
 800e888:	f003 0308 	and.w	r3, r3, #8
 800e88c:	2b08      	cmp	r3, #8
 800e88e:	d110      	bne.n	800e8b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2208      	movs	r2, #8
 800e896:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e898:	68f8      	ldr	r0, [r7, #12]
 800e89a:	f000 f839 	bl	800e910 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	2208      	movs	r2, #8
 800e8a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800e8ae:	2301      	movs	r3, #1
 800e8b0:	e029      	b.n	800e906 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	69db      	ldr	r3, [r3, #28]
 800e8b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e8c0:	d111      	bne.n	800e8e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e8ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e8cc:	68f8      	ldr	r0, [r7, #12]
 800e8ce:	f000 f81f 	bl	800e910 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	2220      	movs	r2, #32
 800e8d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800e8e2:	2303      	movs	r3, #3
 800e8e4:	e00f      	b.n	800e906 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	69da      	ldr	r2, [r3, #28]
 800e8ec:	68bb      	ldr	r3, [r7, #8]
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	68ba      	ldr	r2, [r7, #8]
 800e8f2:	429a      	cmp	r2, r3
 800e8f4:	bf0c      	ite	eq
 800e8f6:	2301      	moveq	r3, #1
 800e8f8:	2300      	movne	r3, #0
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	79fb      	ldrb	r3, [r7, #7]
 800e900:	429a      	cmp	r2, r3
 800e902:	d0a6      	beq.n	800e852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e904:	2300      	movs	r3, #0
}
 800e906:	4618      	mov	r0, r3
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
	...

0800e910 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e910:	b480      	push	{r7}
 800e912:	b095      	sub	sp, #84	; 0x54
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e91e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e920:	e853 3f00 	ldrex	r3, [r3]
 800e924:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e92c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	461a      	mov	r2, r3
 800e934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e936:	643b      	str	r3, [r7, #64]	; 0x40
 800e938:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e93a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e93c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e93e:	e841 2300 	strex	r3, r2, [r1]
 800e942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e946:	2b00      	cmp	r3, #0
 800e948:	d1e6      	bne.n	800e918 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	3308      	adds	r3, #8
 800e950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e952:	6a3b      	ldr	r3, [r7, #32]
 800e954:	e853 3f00 	ldrex	r3, [r3]
 800e958:	61fb      	str	r3, [r7, #28]
   return(result);
 800e95a:	69fa      	ldr	r2, [r7, #28]
 800e95c:	4b1e      	ldr	r3, [pc, #120]	; (800e9d8 <UART_EndRxTransfer+0xc8>)
 800e95e:	4013      	ands	r3, r2
 800e960:	64bb      	str	r3, [r7, #72]	; 0x48
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	3308      	adds	r3, #8
 800e968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e96a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e96c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e96e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e972:	e841 2300 	strex	r3, r2, [r1]
 800e976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d1e5      	bne.n	800e94a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e982:	2b01      	cmp	r3, #1
 800e984:	d118      	bne.n	800e9b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	e853 3f00 	ldrex	r3, [r3]
 800e992:	60bb      	str	r3, [r7, #8]
   return(result);
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	f023 0310 	bic.w	r3, r3, #16
 800e99a:	647b      	str	r3, [r7, #68]	; 0x44
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9a4:	61bb      	str	r3, [r7, #24]
 800e9a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a8:	6979      	ldr	r1, [r7, #20]
 800e9aa:	69ba      	ldr	r2, [r7, #24]
 800e9ac:	e841 2300 	strex	r3, r2, [r1]
 800e9b0:	613b      	str	r3, [r7, #16]
   return(result);
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d1e6      	bne.n	800e986 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2220      	movs	r2, #32
 800e9bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	675a      	str	r2, [r3, #116]	; 0x74
}
 800e9cc:	bf00      	nop
 800e9ce:	3754      	adds	r7, #84	; 0x54
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr
 800e9d8:	effffffe 	.word	0xeffffffe

0800e9dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d101      	bne.n	800e9f2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e9ee:	2302      	movs	r3, #2
 800e9f0:	e027      	b.n	800ea42 <HAL_UARTEx_DisableFifoMode+0x66>
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2201      	movs	r2, #1
 800e9f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2224      	movs	r2, #36	; 0x24
 800e9fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	f022 0201 	bic.w	r2, r2, #1
 800ea18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ea20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	2200      	movs	r2, #0
 800ea26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	68fa      	ldr	r2, [r7, #12]
 800ea2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	2220      	movs	r2, #32
 800ea34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3714      	adds	r7, #20
 800ea46:	46bd      	mov	sp, r7
 800ea48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4c:	4770      	bx	lr

0800ea4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b084      	sub	sp, #16
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
 800ea56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ea5e:	2b01      	cmp	r3, #1
 800ea60:	d101      	bne.n	800ea66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ea62:	2302      	movs	r3, #2
 800ea64:	e02d      	b.n	800eac2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2201      	movs	r2, #1
 800ea6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2224      	movs	r2, #36	; 0x24
 800ea72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f022 0201 	bic.w	r2, r2, #1
 800ea8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	689b      	ldr	r3, [r3, #8]
 800ea94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	683a      	ldr	r2, [r7, #0]
 800ea9e:	430a      	orrs	r2, r1
 800eaa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 f850 	bl	800eb48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2220      	movs	r2, #32
 800eab4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}

0800eaca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eaca:	b580      	push	{r7, lr}
 800eacc:	b084      	sub	sp, #16
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d101      	bne.n	800eae2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eade:	2302      	movs	r3, #2
 800eae0:	e02d      	b.n	800eb3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	2201      	movs	r2, #1
 800eae6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2224      	movs	r2, #36	; 0x24
 800eaee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	681a      	ldr	r2, [r3, #0]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f022 0201 	bic.w	r2, r2, #1
 800eb08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	689b      	ldr	r3, [r3, #8]
 800eb10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	683a      	ldr	r2, [r7, #0]
 800eb1a:	430a      	orrs	r2, r1
 800eb1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f000 f812 	bl	800eb48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2220      	movs	r2, #32
 800eb30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3710      	adds	r7, #16
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
	...

0800eb48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b085      	sub	sp, #20
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d108      	bne.n	800eb6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	2201      	movs	r2, #1
 800eb64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eb68:	e031      	b.n	800ebce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eb6a:	2310      	movs	r3, #16
 800eb6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eb6e:	2310      	movs	r3, #16
 800eb70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	689b      	ldr	r3, [r3, #8]
 800eb78:	0e5b      	lsrs	r3, r3, #25
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	f003 0307 	and.w	r3, r3, #7
 800eb80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	0f5b      	lsrs	r3, r3, #29
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	f003 0307 	and.w	r3, r3, #7
 800eb90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eb92:	7bbb      	ldrb	r3, [r7, #14]
 800eb94:	7b3a      	ldrb	r2, [r7, #12]
 800eb96:	4911      	ldr	r1, [pc, #68]	; (800ebdc <UARTEx_SetNbDataToProcess+0x94>)
 800eb98:	5c8a      	ldrb	r2, [r1, r2]
 800eb9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800eb9e:	7b3a      	ldrb	r2, [r7, #12]
 800eba0:	490f      	ldr	r1, [pc, #60]	; (800ebe0 <UARTEx_SetNbDataToProcess+0x98>)
 800eba2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eba4:	fb93 f3f2 	sdiv	r3, r3, r2
 800eba8:	b29a      	uxth	r2, r3
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebb0:	7bfb      	ldrb	r3, [r7, #15]
 800ebb2:	7b7a      	ldrb	r2, [r7, #13]
 800ebb4:	4909      	ldr	r1, [pc, #36]	; (800ebdc <UARTEx_SetNbDataToProcess+0x94>)
 800ebb6:	5c8a      	ldrb	r2, [r1, r2]
 800ebb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ebbc:	7b7a      	ldrb	r2, [r7, #13]
 800ebbe:	4908      	ldr	r1, [pc, #32]	; (800ebe0 <UARTEx_SetNbDataToProcess+0x98>)
 800ebc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ebc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800ebc6:	b29a      	uxth	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ebce:	bf00      	nop
 800ebd0:	3714      	adds	r7, #20
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd8:	4770      	bx	lr
 800ebda:	bf00      	nop
 800ebdc:	08017cdc 	.word	0x08017cdc
 800ebe0:	08017ce4 	.word	0x08017ce4

0800ebe4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	b480      	push	{r7}
 800ebe8:	b085      	sub	sp, #20
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
 800ebee:	f107 001c 	add.w	r0, r7, #28
 800ebf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ebfa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800ebfc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800ebfe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800ec00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800ec02:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800ec04:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800ec06:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ec08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800ec0a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	685a      	ldr	r2, [r3, #4]
 800ec16:	4b07      	ldr	r3, [pc, #28]	; (800ec34 <SDMMC_Init+0x50>)
 800ec18:	4013      	ands	r3, r2
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	431a      	orrs	r2, r3
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ec22:	2300      	movs	r3, #0
}
 800ec24:	4618      	mov	r0, r3
 800ec26:	3714      	adds	r7, #20
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2e:	b004      	add	sp, #16
 800ec30:	4770      	bx	lr
 800ec32:	bf00      	nop
 800ec34:	ffc02c00 	.word	0xffc02c00

0800ec38 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ec38:	b480      	push	{r7}
 800ec3a:	b083      	sub	sp, #12
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	370c      	adds	r7, #12
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr

0800ec52 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ec52:	b480      	push	{r7}
 800ec54:	b083      	sub	sp, #12
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	f043 0203 	orr.w	r2, r3, #3
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ec66:	2300      	movs	r3, #0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	370c      	adds	r7, #12
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr

0800ec74 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b083      	sub	sp, #12
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f003 0303 	and.w	r3, r3, #3
}
 800ec84:	4618      	mov	r0, r3
 800ec86:	370c      	adds	r7, #12
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8e:	4770      	bx	lr

0800ec90 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ec90:	b480      	push	{r7}
 800ec92:	b085      	sub	sp, #20
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	681a      	ldr	r2, [r3, #0]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ecae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ecb4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ecba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ecbc:	68fa      	ldr	r2, [r7, #12]
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	68da      	ldr	r2, [r3, #12]
 800ecc6:	4b06      	ldr	r3, [pc, #24]	; (800ece0 <SDMMC_SendCommand+0x50>)
 800ecc8:	4013      	ands	r3, r2
 800ecca:	68fa      	ldr	r2, [r7, #12]
 800eccc:	431a      	orrs	r2, r3
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ecd2:	2300      	movs	r3, #0
}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3714      	adds	r7, #20
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr
 800ece0:	fffee0c0 	.word	0xfffee0c0

0800ece4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b083      	sub	sp, #12
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	691b      	ldr	r3, [r3, #16]
 800ecf0:	b2db      	uxtb	r3, r3
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	370c      	adds	r7, #12
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfc:	4770      	bx	lr

0800ecfe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ecfe:	b480      	push	{r7}
 800ed00:	b085      	sub	sp, #20
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	3314      	adds	r3, #20
 800ed0c:	461a      	mov	r2, r3
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	4413      	add	r3, r2
 800ed12:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3714      	adds	r7, #20
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b085      	sub	sp, #20
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	685a      	ldr	r2, [r3, #4]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ed4a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ed50:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ed56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	431a      	orrs	r2, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ed6e:	2300      	movs	r3, #0

}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3714      	adds	r7, #20
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b088      	sub	sp, #32
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ed8a:	2310      	movs	r3, #16
 800ed8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ed8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed92:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ed94:	2300      	movs	r3, #0
 800ed96:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ed98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed9c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ed9e:	f107 0308 	add.w	r3, r7, #8
 800eda2:	4619      	mov	r1, r3
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7ff ff73 	bl	800ec90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800edaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800edae:	2110      	movs	r1, #16
 800edb0:	6878      	ldr	r0, [r7, #4]
 800edb2:	f000 f935 	bl	800f020 <SDMMC_GetCmdResp1>
 800edb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edb8:	69fb      	ldr	r3, [r7, #28]
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3720      	adds	r7, #32
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800edc2:	b580      	push	{r7, lr}
 800edc4:	b088      	sub	sp, #32
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
 800edca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800edd0:	2307      	movs	r3, #7
 800edd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800edd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800edda:	2300      	movs	r3, #0
 800eddc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800edde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ede2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ede4:	f107 0308 	add.w	r3, r7, #8
 800ede8:	4619      	mov	r1, r3
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f7ff ff50 	bl	800ec90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800edf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800edf4:	2107      	movs	r1, #7
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f000 f912 	bl	800f020 <SDMMC_GetCmdResp1>
 800edfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edfe:	69fb      	ldr	r3, [r7, #28]
}
 800ee00:	4618      	mov	r0, r3
 800ee02:	3720      	adds	r7, #32
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}

0800ee08 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ee08:	b580      	push	{r7, lr}
 800ee0a:	b088      	sub	sp, #32
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ee10:	2300      	movs	r3, #0
 800ee12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ee14:	2300      	movs	r3, #0
 800ee16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee26:	f107 0308 	add.w	r3, r7, #8
 800ee2a:	4619      	mov	r1, r3
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f7ff ff2f 	bl	800ec90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f000 fa70 	bl	800f318 <SDMMC_GetCmdError>
 800ee38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee3a:	69fb      	ldr	r3, [r7, #28]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3720      	adds	r7, #32
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b088      	sub	sp, #32
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ee50:	2302      	movs	r3, #2
 800ee52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ee54:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ee58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee62:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ee64:	f107 0308 	add.w	r3, r7, #8
 800ee68:	4619      	mov	r1, r3
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f7ff ff10 	bl	800ec90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f000 f9c7 	bl	800f204 <SDMMC_GetCmdResp2>
 800ee76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee78:	69fb      	ldr	r3, [r7, #28]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3720      	adds	r7, #32
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}

0800ee82 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ee82:	b580      	push	{r7, lr}
 800ee84:	b088      	sub	sp, #32
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
 800ee8a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ee90:	2309      	movs	r3, #9
 800ee92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ee94:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ee98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ee9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eea4:	f107 0308 	add.w	r3, r7, #8
 800eea8:	4619      	mov	r1, r3
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f7ff fef0 	bl	800ec90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f000 f9a7 	bl	800f204 <SDMMC_GetCmdResp2>
 800eeb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eeb8:	69fb      	ldr	r3, [r7, #28]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3720      	adds	r7, #32
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b088      	sub	sp, #32
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
 800eeca:	460b      	mov	r3, r1
 800eecc:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800eece:	887b      	ldrh	r3, [r7, #2]
 800eed0:	041b      	lsls	r3, r3, #16
 800eed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800eed4:	2303      	movs	r3, #3
 800eed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eed8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eedc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eede:	2300      	movs	r3, #0
 800eee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eee6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eee8:	f107 0308 	add.w	r3, r7, #8
 800eeec:	4619      	mov	r1, r3
 800eeee:	6878      	ldr	r0, [r7, #4]
 800eef0:	f7ff fece 	bl	800ec90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800eef4:	f241 3288 	movw	r2, #5000	; 0x1388
 800eef8:	2103      	movs	r1, #3
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 f890 	bl	800f020 <SDMMC_GetCmdResp1>
 800ef00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef02:	69fb      	ldr	r3, [r7, #28]
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3720      	adds	r7, #32
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b088      	sub	sp, #32
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
 800ef14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ef1a:	230d      	movs	r3, #13
 800ef1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef24:	2300      	movs	r3, #0
 800ef26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef2e:	f107 0308 	add.w	r3, r7, #8
 800ef32:	4619      	mov	r1, r3
 800ef34:	6878      	ldr	r0, [r7, #4]
 800ef36:	f7ff feab 	bl	800ec90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ef3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef3e:	210d      	movs	r1, #13
 800ef40:	6878      	ldr	r0, [r7, #4]
 800ef42:	f000 f86d 	bl	800f020 <SDMMC_GetCmdResp1>
 800ef46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef48:	69fb      	ldr	r3, [r7, #28]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3720      	adds	r7, #32
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b088      	sub	sp, #32
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800ef60:	2301      	movs	r3, #1
 800ef62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef64:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ef68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ef72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef74:	f107 0308 	add.w	r3, r7, #8
 800ef78:	4619      	mov	r1, r3
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f7ff fe88 	bl	800ec90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f989 	bl	800f298 <SDMMC_GetCmdResp3>
 800ef86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef88:	69fb      	ldr	r3, [r7, #28]
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3720      	adds	r7, #32
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}

0800ef92 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ef92:	b580      	push	{r7, lr}
 800ef94:	b088      	sub	sp, #32
 800ef96:	af00      	add	r7, sp, #0
 800ef98:	6078      	str	r0, [r7, #4]
 800ef9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800efa0:	2306      	movs	r3, #6
 800efa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efa4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efa8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efaa:	2300      	movs	r3, #0
 800efac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efb4:	f107 0308 	add.w	r3, r7, #8
 800efb8:	4619      	mov	r1, r3
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f7ff fe68 	bl	800ec90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800efc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800efc4:	2106      	movs	r1, #6
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 f82a 	bl	800f020 <SDMMC_GetCmdResp1>
 800efcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efce:	69fb      	ldr	r3, [r7, #28]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3720      	adds	r7, #32
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b088      	sub	sp, #32
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
 800efe0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800efe6:	2308      	movs	r3, #8
 800efe8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800efee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eff0:	2300      	movs	r3, #0
 800eff2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eff8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800effa:	f107 0308 	add.w	r3, r7, #8
 800effe:	4619      	mov	r1, r3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7ff fe45 	bl	800ec90 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800f006:	f241 3288 	movw	r2, #5000	; 0x1388
 800f00a:	2108      	movs	r1, #8
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 f807 	bl	800f020 <SDMMC_GetCmdResp1>
 800f012:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f014:	69fb      	ldr	r3, [r7, #28]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3720      	adds	r7, #32
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
	...

0800f020 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b088      	sub	sp, #32
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	460b      	mov	r3, r1
 800f02a:	607a      	str	r2, [r7, #4]
 800f02c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800f02e:	4b70      	ldr	r3, [pc, #448]	; (800f1f0 <SDMMC_GetCmdResp1+0x1d0>)
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4a70      	ldr	r2, [pc, #448]	; (800f1f4 <SDMMC_GetCmdResp1+0x1d4>)
 800f034:	fba2 2303 	umull	r2, r3, r2, r3
 800f038:	0a5a      	lsrs	r2, r3, #9
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	fb02 f303 	mul.w	r3, r2, r3
 800f040:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	1e5a      	subs	r2, r3, #1
 800f046:	61fa      	str	r2, [r7, #28]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d102      	bne.n	800f052 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f04c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f050:	e0c9      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f056:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800f058:	69ba      	ldr	r2, [r7, #24]
 800f05a:	4b67      	ldr	r3, [pc, #412]	; (800f1f8 <SDMMC_GetCmdResp1+0x1d8>)
 800f05c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d0ef      	beq.n	800f042 <SDMMC_GetCmdResp1+0x22>
 800f062:	69bb      	ldr	r3, [r7, #24]
 800f064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d1ea      	bne.n	800f042 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f070:	f003 0304 	and.w	r3, r3, #4
 800f074:	2b00      	cmp	r3, #0
 800f076:	d004      	beq.n	800f082 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2204      	movs	r2, #4
 800f07c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f07e:	2304      	movs	r3, #4
 800f080:	e0b1      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f086:	f003 0301 	and.w	r3, r3, #1
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d004      	beq.n	800f098 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	2201      	movs	r2, #1
 800f092:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f094:	2301      	movs	r3, #1
 800f096:	e0a6      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4a58      	ldr	r2, [pc, #352]	; (800f1fc <SDMMC_GetCmdResp1+0x1dc>)
 800f09c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f09e:	68f8      	ldr	r0, [r7, #12]
 800f0a0:	f7ff fe20 	bl	800ece4 <SDMMC_GetCommandResponse>
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	7afb      	ldrb	r3, [r7, #11]
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d001      	beq.n	800f0b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e099      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f0b2:	2100      	movs	r1, #0
 800f0b4:	68f8      	ldr	r0, [r7, #12]
 800f0b6:	f7ff fe22 	bl	800ecfe <SDMMC_GetResponse>
 800f0ba:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f0bc:	697a      	ldr	r2, [r7, #20]
 800f0be:	4b50      	ldr	r3, [pc, #320]	; (800f200 <SDMMC_GetCmdResp1+0x1e0>)
 800f0c0:	4013      	ands	r3, r2
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d101      	bne.n	800f0ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	e08d      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f0ca:	697b      	ldr	r3, [r7, #20]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	da02      	bge.n	800f0d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f0d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f0d4:	e087      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d001      	beq.n	800f0e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f0e0:	2340      	movs	r3, #64	; 0x40
 800f0e2:	e080      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d001      	beq.n	800f0f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f0ee:	2380      	movs	r3, #128	; 0x80
 800f0f0:	e079      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f0f2:	697b      	ldr	r3, [r7, #20]
 800f0f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d002      	beq.n	800f102 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f0fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f100:	e071      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d002      	beq.n	800f112 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f10c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f110:	e069      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d002      	beq.n	800f122 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f11c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f120:	e061      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d002      	beq.n	800f132 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f12c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f130:	e059      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d002      	beq.n	800f142 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f13c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f140:	e051      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f14c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f150:	e049      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d002      	beq.n	800f162 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f15c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f160:	e041      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d002      	beq.n	800f172 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f16c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f170:	e039      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d002      	beq.n	800f182 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f17c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f180:	e031      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d002      	beq.n	800f192 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f18c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f190:	e029      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d002      	beq.n	800f1a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f19c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f1a0:	e021      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d002      	beq.n	800f1b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f1ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f1b0:	e019      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f1b2:	697b      	ldr	r3, [r7, #20]
 800f1b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d002      	beq.n	800f1c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f1bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f1c0:	e011      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d002      	beq.n	800f1d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f1cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f1d0:	e009      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	f003 0308 	and.w	r3, r3, #8
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d002      	beq.n	800f1e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f1dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f1e0:	e001      	b.n	800f1e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f1e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3720      	adds	r7, #32
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}
 800f1ee:	bf00      	nop
 800f1f0:	24000000 	.word	0x24000000
 800f1f4:	10624dd3 	.word	0x10624dd3
 800f1f8:	00200045 	.word	0x00200045
 800f1fc:	002000c5 	.word	0x002000c5
 800f200:	fdffe008 	.word	0xfdffe008

0800f204 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f204:	b480      	push	{r7}
 800f206:	b085      	sub	sp, #20
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f20c:	4b1f      	ldr	r3, [pc, #124]	; (800f28c <SDMMC_GetCmdResp2+0x88>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	4a1f      	ldr	r2, [pc, #124]	; (800f290 <SDMMC_GetCmdResp2+0x8c>)
 800f212:	fba2 2303 	umull	r2, r3, r2, r3
 800f216:	0a5b      	lsrs	r3, r3, #9
 800f218:	f241 3288 	movw	r2, #5000	; 0x1388
 800f21c:	fb02 f303 	mul.w	r3, r2, r3
 800f220:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	1e5a      	subs	r2, r3, #1
 800f226:	60fa      	str	r2, [r7, #12]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d102      	bne.n	800f232 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f22c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f230:	e026      	b.n	800f280 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f236:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d0ef      	beq.n	800f222 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d1ea      	bne.n	800f222 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f250:	f003 0304 	and.w	r3, r3, #4
 800f254:	2b00      	cmp	r3, #0
 800f256:	d004      	beq.n	800f262 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2204      	movs	r2, #4
 800f25c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f25e:	2304      	movs	r3, #4
 800f260:	e00e      	b.n	800f280 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f266:	f003 0301 	and.w	r3, r3, #1
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d004      	beq.n	800f278 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2201      	movs	r2, #1
 800f272:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f274:	2301      	movs	r3, #1
 800f276:	e003      	b.n	800f280 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	4a06      	ldr	r2, [pc, #24]	; (800f294 <SDMMC_GetCmdResp2+0x90>)
 800f27c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f27e:	2300      	movs	r3, #0
}
 800f280:	4618      	mov	r0, r3
 800f282:	3714      	adds	r7, #20
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr
 800f28c:	24000000 	.word	0x24000000
 800f290:	10624dd3 	.word	0x10624dd3
 800f294:	002000c5 	.word	0x002000c5

0800f298 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f298:	b480      	push	{r7}
 800f29a:	b085      	sub	sp, #20
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f2a0:	4b1a      	ldr	r3, [pc, #104]	; (800f30c <SDMMC_GetCmdResp3+0x74>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a1a      	ldr	r2, [pc, #104]	; (800f310 <SDMMC_GetCmdResp3+0x78>)
 800f2a6:	fba2 2303 	umull	r2, r3, r2, r3
 800f2aa:	0a5b      	lsrs	r3, r3, #9
 800f2ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2b0:	fb02 f303 	mul.w	r3, r2, r3
 800f2b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	1e5a      	subs	r2, r3, #1
 800f2ba:	60fa      	str	r2, [r7, #12]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d102      	bne.n	800f2c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f2c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f2c4:	e01b      	b.n	800f2fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d0ef      	beq.n	800f2b6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1ea      	bne.n	800f2b6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2e4:	f003 0304 	and.w	r3, r3, #4
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d004      	beq.n	800f2f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2204      	movs	r2, #4
 800f2f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f2f2:	2304      	movs	r3, #4
 800f2f4:	e003      	b.n	800f2fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	4a06      	ldr	r2, [pc, #24]	; (800f314 <SDMMC_GetCmdResp3+0x7c>)
 800f2fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f2fc:	2300      	movs	r3, #0
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr
 800f30a:	bf00      	nop
 800f30c:	24000000 	.word	0x24000000
 800f310:	10624dd3 	.word	0x10624dd3
 800f314:	002000c5 	.word	0x002000c5

0800f318 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f318:	b480      	push	{r7}
 800f31a:	b085      	sub	sp, #20
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800f320:	4b11      	ldr	r3, [pc, #68]	; (800f368 <SDMMC_GetCmdError+0x50>)
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a11      	ldr	r2, [pc, #68]	; (800f36c <SDMMC_GetCmdError+0x54>)
 800f326:	fba2 2303 	umull	r2, r3, r2, r3
 800f32a:	0a5b      	lsrs	r3, r3, #9
 800f32c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f330:	fb02 f303 	mul.w	r3, r2, r3
 800f334:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	1e5a      	subs	r2, r3, #1
 800f33a:	60fa      	str	r2, [r7, #12]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d102      	bne.n	800f346 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f344:	e009      	b.n	800f35a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f34a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d0f1      	beq.n	800f336 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4a06      	ldr	r2, [pc, #24]	; (800f370 <SDMMC_GetCmdError+0x58>)
 800f356:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800f358:	2300      	movs	r3, #0
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3714      	adds	r7, #20
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr
 800f366:	bf00      	nop
 800f368:	24000000 	.word	0x24000000
 800f36c:	10624dd3 	.word	0x10624dd3
 800f370:	002000c5 	.word	0x002000c5

0800f374 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f374:	b084      	sub	sp, #16
 800f376:	b580      	push	{r7, lr}
 800f378:	b084      	sub	sp, #16
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	f107 001c 	add.w	r0, r7, #28
 800f382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d120      	bne.n	800f3ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f390:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	68da      	ldr	r2, [r3, #12]
 800f39c:	4b2a      	ldr	r3, [pc, #168]	; (800f448 <USB_CoreInit+0xd4>)
 800f39e:	4013      	ands	r3, r2
 800f3a0:	687a      	ldr	r2, [r7, #4]
 800f3a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f3b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3b2:	2b01      	cmp	r3, #1
 800f3b4:	d105      	bne.n	800f3c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f001 faf8 	bl	80109b8 <USB_CoreReset>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	73fb      	strb	r3, [r7, #15]
 800f3cc:	e01a      	b.n	800f404 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f001 faec 	bl	80109b8 <USB_CoreReset>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f3e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d106      	bne.n	800f3f8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	639a      	str	r2, [r3, #56]	; 0x38
 800f3f6:	e005      	b.n	800f404 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f406:	2b01      	cmp	r3, #1
 800f408:	d116      	bne.n	800f438 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f40e:	b29a      	uxth	r2, r3
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f418:	4b0c      	ldr	r3, [pc, #48]	; (800f44c <USB_CoreInit+0xd8>)
 800f41a:	4313      	orrs	r3, r2
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	689b      	ldr	r3, [r3, #8]
 800f424:	f043 0206 	orr.w	r2, r3, #6
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	689b      	ldr	r3, [r3, #8]
 800f430:	f043 0220 	orr.w	r2, r3, #32
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f438:	7bfb      	ldrb	r3, [r7, #15]
}
 800f43a:	4618      	mov	r0, r3
 800f43c:	3710      	adds	r7, #16
 800f43e:	46bd      	mov	sp, r7
 800f440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f444:	b004      	add	sp, #16
 800f446:	4770      	bx	lr
 800f448:	ffbdffbf 	.word	0xffbdffbf
 800f44c:	03ee0000 	.word	0x03ee0000

0800f450 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f450:	b480      	push	{r7}
 800f452:	b087      	sub	sp, #28
 800f454:	af00      	add	r7, sp, #0
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	4613      	mov	r3, r2
 800f45c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f45e:	79fb      	ldrb	r3, [r7, #7]
 800f460:	2b02      	cmp	r3, #2
 800f462:	d165      	bne.n	800f530 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	4a41      	ldr	r2, [pc, #260]	; (800f56c <USB_SetTurnaroundTime+0x11c>)
 800f468:	4293      	cmp	r3, r2
 800f46a:	d906      	bls.n	800f47a <USB_SetTurnaroundTime+0x2a>
 800f46c:	68bb      	ldr	r3, [r7, #8]
 800f46e:	4a40      	ldr	r2, [pc, #256]	; (800f570 <USB_SetTurnaroundTime+0x120>)
 800f470:	4293      	cmp	r3, r2
 800f472:	d202      	bcs.n	800f47a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f474:	230f      	movs	r3, #15
 800f476:	617b      	str	r3, [r7, #20]
 800f478:	e062      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	4a3c      	ldr	r2, [pc, #240]	; (800f570 <USB_SetTurnaroundTime+0x120>)
 800f47e:	4293      	cmp	r3, r2
 800f480:	d306      	bcc.n	800f490 <USB_SetTurnaroundTime+0x40>
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	4a3b      	ldr	r2, [pc, #236]	; (800f574 <USB_SetTurnaroundTime+0x124>)
 800f486:	4293      	cmp	r3, r2
 800f488:	d202      	bcs.n	800f490 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f48a:	230e      	movs	r3, #14
 800f48c:	617b      	str	r3, [r7, #20]
 800f48e:	e057      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f490:	68bb      	ldr	r3, [r7, #8]
 800f492:	4a38      	ldr	r2, [pc, #224]	; (800f574 <USB_SetTurnaroundTime+0x124>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d306      	bcc.n	800f4a6 <USB_SetTurnaroundTime+0x56>
 800f498:	68bb      	ldr	r3, [r7, #8]
 800f49a:	4a37      	ldr	r2, [pc, #220]	; (800f578 <USB_SetTurnaroundTime+0x128>)
 800f49c:	4293      	cmp	r3, r2
 800f49e:	d202      	bcs.n	800f4a6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f4a0:	230d      	movs	r3, #13
 800f4a2:	617b      	str	r3, [r7, #20]
 800f4a4:	e04c      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	4a33      	ldr	r2, [pc, #204]	; (800f578 <USB_SetTurnaroundTime+0x128>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d306      	bcc.n	800f4bc <USB_SetTurnaroundTime+0x6c>
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	4a32      	ldr	r2, [pc, #200]	; (800f57c <USB_SetTurnaroundTime+0x12c>)
 800f4b2:	4293      	cmp	r3, r2
 800f4b4:	d802      	bhi.n	800f4bc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f4b6:	230c      	movs	r3, #12
 800f4b8:	617b      	str	r3, [r7, #20]
 800f4ba:	e041      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	4a2f      	ldr	r2, [pc, #188]	; (800f57c <USB_SetTurnaroundTime+0x12c>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d906      	bls.n	800f4d2 <USB_SetTurnaroundTime+0x82>
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	4a2e      	ldr	r2, [pc, #184]	; (800f580 <USB_SetTurnaroundTime+0x130>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d802      	bhi.n	800f4d2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f4cc:	230b      	movs	r3, #11
 800f4ce:	617b      	str	r3, [r7, #20]
 800f4d0:	e036      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	4a2a      	ldr	r2, [pc, #168]	; (800f580 <USB_SetTurnaroundTime+0x130>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d906      	bls.n	800f4e8 <USB_SetTurnaroundTime+0x98>
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	4a29      	ldr	r2, [pc, #164]	; (800f584 <USB_SetTurnaroundTime+0x134>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d802      	bhi.n	800f4e8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f4e2:	230a      	movs	r3, #10
 800f4e4:	617b      	str	r3, [r7, #20]
 800f4e6:	e02b      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	4a26      	ldr	r2, [pc, #152]	; (800f584 <USB_SetTurnaroundTime+0x134>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d906      	bls.n	800f4fe <USB_SetTurnaroundTime+0xae>
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	4a25      	ldr	r2, [pc, #148]	; (800f588 <USB_SetTurnaroundTime+0x138>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d202      	bcs.n	800f4fe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f4f8:	2309      	movs	r3, #9
 800f4fa:	617b      	str	r3, [r7, #20]
 800f4fc:	e020      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	4a21      	ldr	r2, [pc, #132]	; (800f588 <USB_SetTurnaroundTime+0x138>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d306      	bcc.n	800f514 <USB_SetTurnaroundTime+0xc4>
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	4a20      	ldr	r2, [pc, #128]	; (800f58c <USB_SetTurnaroundTime+0x13c>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d802      	bhi.n	800f514 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f50e:	2308      	movs	r3, #8
 800f510:	617b      	str	r3, [r7, #20]
 800f512:	e015      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	4a1d      	ldr	r2, [pc, #116]	; (800f58c <USB_SetTurnaroundTime+0x13c>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d906      	bls.n	800f52a <USB_SetTurnaroundTime+0xda>
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	4a1c      	ldr	r2, [pc, #112]	; (800f590 <USB_SetTurnaroundTime+0x140>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d202      	bcs.n	800f52a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f524:	2307      	movs	r3, #7
 800f526:	617b      	str	r3, [r7, #20]
 800f528:	e00a      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f52a:	2306      	movs	r3, #6
 800f52c:	617b      	str	r3, [r7, #20]
 800f52e:	e007      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f530:	79fb      	ldrb	r3, [r7, #7]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d102      	bne.n	800f53c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f536:	2309      	movs	r3, #9
 800f538:	617b      	str	r3, [r7, #20]
 800f53a:	e001      	b.n	800f540 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f53c:	2309      	movs	r3, #9
 800f53e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	68da      	ldr	r2, [r3, #12]
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	029b      	lsls	r3, r3, #10
 800f554:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f558:	431a      	orrs	r2, r3
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f55e:	2300      	movs	r3, #0
}
 800f560:	4618      	mov	r0, r3
 800f562:	371c      	adds	r7, #28
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr
 800f56c:	00d8acbf 	.word	0x00d8acbf
 800f570:	00e4e1c0 	.word	0x00e4e1c0
 800f574:	00f42400 	.word	0x00f42400
 800f578:	01067380 	.word	0x01067380
 800f57c:	011a499f 	.word	0x011a499f
 800f580:	01312cff 	.word	0x01312cff
 800f584:	014ca43f 	.word	0x014ca43f
 800f588:	016e3600 	.word	0x016e3600
 800f58c:	01a6ab1f 	.word	0x01a6ab1f
 800f590:	01e84800 	.word	0x01e84800

0800f594 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	f043 0201 	orr.w	r2, r3, #1
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5a8:	2300      	movs	r3, #0
}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	370c      	adds	r7, #12
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	b083      	sub	sp, #12
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	689b      	ldr	r3, [r3, #8]
 800f5c2:	f023 0201 	bic.w	r2, r3, #1
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5ca:	2300      	movs	r3, #0
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr

0800f5d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	68db      	ldr	r3, [r3, #12]
 800f5ec:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f5f4:	78fb      	ldrb	r3, [r7, #3]
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d115      	bne.n	800f626 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	68db      	ldr	r3, [r3, #12]
 800f5fe:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f606:	2001      	movs	r0, #1
 800f608:	f7f3 fa52 	bl	8002ab0 <HAL_Delay>
      ms++;
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	3301      	adds	r3, #1
 800f610:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f001 f93f 	bl	8010896 <USB_GetMode>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b01      	cmp	r3, #1
 800f61c:	d01e      	beq.n	800f65c <USB_SetCurrentMode+0x84>
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	2b31      	cmp	r3, #49	; 0x31
 800f622:	d9f0      	bls.n	800f606 <USB_SetCurrentMode+0x2e>
 800f624:	e01a      	b.n	800f65c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f626:	78fb      	ldrb	r3, [r7, #3]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d115      	bne.n	800f658 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	68db      	ldr	r3, [r3, #12]
 800f630:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f638:	2001      	movs	r0, #1
 800f63a:	f7f3 fa39 	bl	8002ab0 <HAL_Delay>
      ms++;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3301      	adds	r3, #1
 800f642:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f001 f926 	bl	8010896 <USB_GetMode>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d005      	beq.n	800f65c <USB_SetCurrentMode+0x84>
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2b31      	cmp	r3, #49	; 0x31
 800f654:	d9f0      	bls.n	800f638 <USB_SetCurrentMode+0x60>
 800f656:	e001      	b.n	800f65c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f658:	2301      	movs	r3, #1
 800f65a:	e005      	b.n	800f668 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2b32      	cmp	r3, #50	; 0x32
 800f660:	d101      	bne.n	800f666 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f662:	2301      	movs	r3, #1
 800f664:	e000      	b.n	800f668 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f666:	2300      	movs	r3, #0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3710      	adds	r7, #16
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f670:	b084      	sub	sp, #16
 800f672:	b580      	push	{r7, lr}
 800f674:	b086      	sub	sp, #24
 800f676:	af00      	add	r7, sp, #0
 800f678:	6078      	str	r0, [r7, #4]
 800f67a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f67e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f682:	2300      	movs	r3, #0
 800f684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f68a:	2300      	movs	r3, #0
 800f68c:	613b      	str	r3, [r7, #16]
 800f68e:	e009      	b.n	800f6a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f690:	687a      	ldr	r2, [r7, #4]
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	3340      	adds	r3, #64	; 0x40
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	4413      	add	r3, r2
 800f69a:	2200      	movs	r2, #0
 800f69c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	3301      	adds	r3, #1
 800f6a2:	613b      	str	r3, [r7, #16]
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	2b0e      	cmp	r3, #14
 800f6a8:	d9f2      	bls.n	800f690 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f6aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d11c      	bne.n	800f6ea <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	68fa      	ldr	r2, [r7, #12]
 800f6ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6be:	f043 0302 	orr.w	r3, r3, #2
 800f6c2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	601a      	str	r2, [r3, #0]
 800f6e8:	e005      	b.n	800f6f6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f6fc:	461a      	mov	r2, r3
 800f6fe:	2300      	movs	r3, #0
 800f700:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f708:	4619      	mov	r1, r3
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f710:	461a      	mov	r2, r3
 800f712:	680b      	ldr	r3, [r1, #0]
 800f714:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f718:	2b01      	cmp	r3, #1
 800f71a:	d10c      	bne.n	800f736 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d104      	bne.n	800f72c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f722:	2100      	movs	r1, #0
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 f965 	bl	800f9f4 <USB_SetDevSpeed>
 800f72a:	e008      	b.n	800f73e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f72c:	2101      	movs	r1, #1
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 f960 	bl	800f9f4 <USB_SetDevSpeed>
 800f734:	e003      	b.n	800f73e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f736:	2103      	movs	r1, #3
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f000 f95b 	bl	800f9f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f73e:	2110      	movs	r1, #16
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 f8f3 	bl	800f92c <USB_FlushTxFifo>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f74c:	2301      	movs	r3, #1
 800f74e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 f91f 	bl	800f994 <USB_FlushRxFifo>
 800f756:	4603      	mov	r3, r0
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d001      	beq.n	800f760 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f75c:	2301      	movs	r3, #1
 800f75e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f766:	461a      	mov	r2, r3
 800f768:	2300      	movs	r3, #0
 800f76a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f772:	461a      	mov	r2, r3
 800f774:	2300      	movs	r3, #0
 800f776:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f77e:	461a      	mov	r2, r3
 800f780:	2300      	movs	r3, #0
 800f782:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f784:	2300      	movs	r3, #0
 800f786:	613b      	str	r3, [r7, #16]
 800f788:	e043      	b.n	800f812 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f78a:	693b      	ldr	r3, [r7, #16]
 800f78c:	015a      	lsls	r2, r3, #5
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	4413      	add	r3, r2
 800f792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f79c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7a0:	d118      	bne.n	800f7d4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d10a      	bne.n	800f7be <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f7a8:	693b      	ldr	r3, [r7, #16]
 800f7aa:	015a      	lsls	r2, r3, #5
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	4413      	add	r3, r2
 800f7b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f7ba:	6013      	str	r3, [r2, #0]
 800f7bc:	e013      	b.n	800f7e6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f7be:	693b      	ldr	r3, [r7, #16]
 800f7c0:	015a      	lsls	r2, r3, #5
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	4413      	add	r3, r2
 800f7c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f7d0:	6013      	str	r3, [r2, #0]
 800f7d2:	e008      	b.n	800f7e6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f7d4:	693b      	ldr	r3, [r7, #16]
 800f7d6:	015a      	lsls	r2, r3, #5
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	4413      	add	r3, r2
 800f7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	015a      	lsls	r2, r3, #5
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	015a      	lsls	r2, r3, #5
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	4413      	add	r3, r2
 800f800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f804:	461a      	mov	r2, r3
 800f806:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f80a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	3301      	adds	r3, #1
 800f810:	613b      	str	r3, [r7, #16]
 800f812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f814:	693a      	ldr	r2, [r7, #16]
 800f816:	429a      	cmp	r2, r3
 800f818:	d3b7      	bcc.n	800f78a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f81a:	2300      	movs	r3, #0
 800f81c:	613b      	str	r3, [r7, #16]
 800f81e:	e043      	b.n	800f8a8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	015a      	lsls	r2, r3, #5
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	4413      	add	r3, r2
 800f828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f832:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f836:	d118      	bne.n	800f86a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d10a      	bne.n	800f854 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	015a      	lsls	r2, r3, #5
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	4413      	add	r3, r2
 800f846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f84a:	461a      	mov	r2, r3
 800f84c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f850:	6013      	str	r3, [r2, #0]
 800f852:	e013      	b.n	800f87c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f854:	693b      	ldr	r3, [r7, #16]
 800f856:	015a      	lsls	r2, r3, #5
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	4413      	add	r3, r2
 800f85c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f860:	461a      	mov	r2, r3
 800f862:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f866:	6013      	str	r3, [r2, #0]
 800f868:	e008      	b.n	800f87c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	015a      	lsls	r2, r3, #5
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	4413      	add	r3, r2
 800f872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f876:	461a      	mov	r2, r3
 800f878:	2300      	movs	r3, #0
 800f87a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	015a      	lsls	r2, r3, #5
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	4413      	add	r3, r2
 800f884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f888:	461a      	mov	r2, r3
 800f88a:	2300      	movs	r3, #0
 800f88c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	015a      	lsls	r2, r3, #5
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	4413      	add	r3, r2
 800f896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f89a:	461a      	mov	r2, r3
 800f89c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f8a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f8a2:	693b      	ldr	r3, [r7, #16]
 800f8a4:	3301      	adds	r3, #1
 800f8a6:	613b      	str	r3, [r7, #16]
 800f8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8aa:	693a      	ldr	r2, [r7, #16]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d3b7      	bcc.n	800f820 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8b6:	691b      	ldr	r3, [r3, #16]
 800f8b8:	68fa      	ldr	r2, [r7, #12]
 800f8ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f8be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f8c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f8d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d105      	bne.n	800f8e4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	699b      	ldr	r3, [r3, #24]
 800f8dc:	f043 0210 	orr.w	r2, r3, #16
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	699a      	ldr	r2, [r3, #24]
 800f8e8:	4b0e      	ldr	r3, [pc, #56]	; (800f924 <USB_DevInit+0x2b4>)
 800f8ea:	4313      	orrs	r3, r2
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d005      	beq.n	800f902 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	699b      	ldr	r3, [r3, #24]
 800f8fa:	f043 0208 	orr.w	r2, r3, #8
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f904:	2b01      	cmp	r3, #1
 800f906:	d105      	bne.n	800f914 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	699a      	ldr	r2, [r3, #24]
 800f90c:	4b06      	ldr	r3, [pc, #24]	; (800f928 <USB_DevInit+0x2b8>)
 800f90e:	4313      	orrs	r3, r2
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f914:	7dfb      	ldrb	r3, [r7, #23]
}
 800f916:	4618      	mov	r0, r3
 800f918:	3718      	adds	r7, #24
 800f91a:	46bd      	mov	sp, r7
 800f91c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f920:	b004      	add	sp, #16
 800f922:	4770      	bx	lr
 800f924:	803c3800 	.word	0x803c3800
 800f928:	40000004 	.word	0x40000004

0800f92c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b085      	sub	sp, #20
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f936:	2300      	movs	r3, #0
 800f938:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	3301      	adds	r3, #1
 800f93e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	4a13      	ldr	r2, [pc, #76]	; (800f990 <USB_FlushTxFifo+0x64>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d901      	bls.n	800f94c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f948:	2303      	movs	r3, #3
 800f94a:	e01b      	b.n	800f984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	691b      	ldr	r3, [r3, #16]
 800f950:	2b00      	cmp	r3, #0
 800f952:	daf2      	bge.n	800f93a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f954:	2300      	movs	r3, #0
 800f956:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	019b      	lsls	r3, r3, #6
 800f95c:	f043 0220 	orr.w	r2, r3, #32
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	3301      	adds	r3, #1
 800f968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	4a08      	ldr	r2, [pc, #32]	; (800f990 <USB_FlushTxFifo+0x64>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d901      	bls.n	800f976 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f972:	2303      	movs	r3, #3
 800f974:	e006      	b.n	800f984 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	691b      	ldr	r3, [r3, #16]
 800f97a:	f003 0320 	and.w	r3, r3, #32
 800f97e:	2b20      	cmp	r3, #32
 800f980:	d0f0      	beq.n	800f964 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	3714      	adds	r7, #20
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr
 800f990:	00030d40 	.word	0x00030d40

0800f994 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f994:	b480      	push	{r7}
 800f996:	b085      	sub	sp, #20
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f99c:	2300      	movs	r3, #0
 800f99e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	3301      	adds	r3, #1
 800f9a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	4a11      	ldr	r2, [pc, #68]	; (800f9f0 <USB_FlushRxFifo+0x5c>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d901      	bls.n	800f9b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f9ae:	2303      	movs	r3, #3
 800f9b0:	e018      	b.n	800f9e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	691b      	ldr	r3, [r3, #16]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	daf2      	bge.n	800f9a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2210      	movs	r2, #16
 800f9c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	3301      	adds	r3, #1
 800f9c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	4a08      	ldr	r2, [pc, #32]	; (800f9f0 <USB_FlushRxFifo+0x5c>)
 800f9ce:	4293      	cmp	r3, r2
 800f9d0:	d901      	bls.n	800f9d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f9d2:	2303      	movs	r3, #3
 800f9d4:	e006      	b.n	800f9e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	691b      	ldr	r3, [r3, #16]
 800f9da:	f003 0310 	and.w	r3, r3, #16
 800f9de:	2b10      	cmp	r3, #16
 800f9e0:	d0f0      	beq.n	800f9c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f9e2:	2300      	movs	r3, #0
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	3714      	adds	r7, #20
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr
 800f9f0:	00030d40 	.word	0x00030d40

0800f9f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b085      	sub	sp, #20
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa0a:	681a      	ldr	r2, [r3, #0]
 800fa0c:	78fb      	ldrb	r3, [r7, #3]
 800fa0e:	68f9      	ldr	r1, [r7, #12]
 800fa10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa14:	4313      	orrs	r3, r2
 800fa16:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fa18:	2300      	movs	r3, #0
}
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	3714      	adds	r7, #20
 800fa1e:	46bd      	mov	sp, r7
 800fa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa24:	4770      	bx	lr

0800fa26 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fa26:	b480      	push	{r7}
 800fa28:	b087      	sub	sp, #28
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa38:	689b      	ldr	r3, [r3, #8]
 800fa3a:	f003 0306 	and.w	r3, r3, #6
 800fa3e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d102      	bne.n	800fa4c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fa46:	2300      	movs	r3, #0
 800fa48:	75fb      	strb	r3, [r7, #23]
 800fa4a:	e00a      	b.n	800fa62 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	2b02      	cmp	r3, #2
 800fa50:	d002      	beq.n	800fa58 <USB_GetDevSpeed+0x32>
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b06      	cmp	r3, #6
 800fa56:	d102      	bne.n	800fa5e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fa58:	2302      	movs	r3, #2
 800fa5a:	75fb      	strb	r3, [r7, #23]
 800fa5c:	e001      	b.n	800fa62 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fa5e:	230f      	movs	r3, #15
 800fa60:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fa62:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa64:	4618      	mov	r0, r3
 800fa66:	371c      	adds	r7, #28
 800fa68:	46bd      	mov	sp, r7
 800fa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6e:	4770      	bx	lr

0800fa70 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fa70:	b480      	push	{r7}
 800fa72:	b085      	sub	sp, #20
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	785b      	ldrb	r3, [r3, #1]
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	d139      	bne.n	800fb00 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa92:	69da      	ldr	r2, [r3, #28]
 800fa94:	683b      	ldr	r3, [r7, #0]
 800fa96:	781b      	ldrb	r3, [r3, #0]
 800fa98:	f003 030f 	and.w	r3, r3, #15
 800fa9c:	2101      	movs	r1, #1
 800fa9e:	fa01 f303 	lsl.w	r3, r1, r3
 800faa2:	b29b      	uxth	r3, r3
 800faa4:	68f9      	ldr	r1, [r7, #12]
 800faa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800faaa:	4313      	orrs	r3, r2
 800faac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800faae:	68bb      	ldr	r3, [r7, #8]
 800fab0:	015a      	lsls	r2, r3, #5
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	4413      	add	r3, r2
 800fab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d153      	bne.n	800fb6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	015a      	lsls	r2, r3, #5
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	4413      	add	r3, r2
 800facc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fad0:	681a      	ldr	r2, [r3, #0]
 800fad2:	683b      	ldr	r3, [r7, #0]
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	791b      	ldrb	r3, [r3, #4]
 800fade:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fae0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	059b      	lsls	r3, r3, #22
 800fae6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fae8:	431a      	orrs	r2, r3
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	0159      	lsls	r1, r3, #5
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	440b      	add	r3, r1
 800faf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faf6:	4619      	mov	r1, r3
 800faf8:	4b20      	ldr	r3, [pc, #128]	; (800fb7c <USB_ActivateEndpoint+0x10c>)
 800fafa:	4313      	orrs	r3, r2
 800fafc:	600b      	str	r3, [r1, #0]
 800fafe:	e035      	b.n	800fb6c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb06:	69da      	ldr	r2, [r3, #28]
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	781b      	ldrb	r3, [r3, #0]
 800fb0c:	f003 030f 	and.w	r3, r3, #15
 800fb10:	2101      	movs	r1, #1
 800fb12:	fa01 f303 	lsl.w	r3, r1, r3
 800fb16:	041b      	lsls	r3, r3, #16
 800fb18:	68f9      	ldr	r1, [r7, #12]
 800fb1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fb22:	68bb      	ldr	r3, [r7, #8]
 800fb24:	015a      	lsls	r2, r3, #5
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	4413      	add	r3, r2
 800fb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d119      	bne.n	800fb6c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	015a      	lsls	r2, r3, #5
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	4413      	add	r3, r2
 800fb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	689b      	ldr	r3, [r3, #8]
 800fb4a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	791b      	ldrb	r3, [r3, #4]
 800fb52:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb54:	430b      	orrs	r3, r1
 800fb56:	431a      	orrs	r2, r3
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	0159      	lsls	r1, r3, #5
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	440b      	add	r3, r1
 800fb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb64:	4619      	mov	r1, r3
 800fb66:	4b05      	ldr	r3, [pc, #20]	; (800fb7c <USB_ActivateEndpoint+0x10c>)
 800fb68:	4313      	orrs	r3, r2
 800fb6a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fb6c:	2300      	movs	r3, #0
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3714      	adds	r7, #20
 800fb72:	46bd      	mov	sp, r7
 800fb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb78:	4770      	bx	lr
 800fb7a:	bf00      	nop
 800fb7c:	10008000 	.word	0x10008000

0800fb80 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	785b      	ldrb	r3, [r3, #1]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d161      	bne.n	800fc60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	015a      	lsls	r2, r3, #5
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	4413      	add	r3, r2
 800fba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbb2:	d11f      	bne.n	800fbf4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	015a      	lsls	r2, r3, #5
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	4413      	add	r3, r2
 800fbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	68ba      	ldr	r2, [r7, #8]
 800fbc4:	0151      	lsls	r1, r2, #5
 800fbc6:	68fa      	ldr	r2, [r7, #12]
 800fbc8:	440a      	add	r2, r1
 800fbca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fbd2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	015a      	lsls	r2, r3, #5
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	4413      	add	r3, r2
 800fbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	68ba      	ldr	r2, [r7, #8]
 800fbe4:	0151      	lsls	r1, r2, #5
 800fbe6:	68fa      	ldr	r2, [r7, #12]
 800fbe8:	440a      	add	r2, r1
 800fbea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fbf2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	781b      	ldrb	r3, [r3, #0]
 800fc00:	f003 030f 	and.w	r3, r3, #15
 800fc04:	2101      	movs	r1, #1
 800fc06:	fa01 f303 	lsl.w	r3, r1, r3
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	43db      	mvns	r3, r3
 800fc0e:	68f9      	ldr	r1, [r7, #12]
 800fc10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc14:	4013      	ands	r3, r2
 800fc16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc1e:	69da      	ldr	r2, [r3, #28]
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	f003 030f 	and.w	r3, r3, #15
 800fc28:	2101      	movs	r1, #1
 800fc2a:	fa01 f303 	lsl.w	r3, r1, r3
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	43db      	mvns	r3, r3
 800fc32:	68f9      	ldr	r1, [r7, #12]
 800fc34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc38:	4013      	ands	r3, r2
 800fc3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	015a      	lsls	r2, r3, #5
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	4413      	add	r3, r2
 800fc44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	68bb      	ldr	r3, [r7, #8]
 800fc4c:	0159      	lsls	r1, r3, #5
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	440b      	add	r3, r1
 800fc52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc56:	4619      	mov	r1, r3
 800fc58:	4b35      	ldr	r3, [pc, #212]	; (800fd30 <USB_DeactivateEndpoint+0x1b0>)
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	600b      	str	r3, [r1, #0]
 800fc5e:	e060      	b.n	800fd22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	015a      	lsls	r2, r3, #5
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	4413      	add	r3, r2
 800fc68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc76:	d11f      	bne.n	800fcb8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	015a      	lsls	r2, r3, #5
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	4413      	add	r3, r2
 800fc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	68ba      	ldr	r2, [r7, #8]
 800fc88:	0151      	lsls	r1, r2, #5
 800fc8a:	68fa      	ldr	r2, [r7, #12]
 800fc8c:	440a      	add	r2, r1
 800fc8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fc96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	015a      	lsls	r2, r3, #5
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	4413      	add	r3, r2
 800fca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	68ba      	ldr	r2, [r7, #8]
 800fca8:	0151      	lsls	r1, r2, #5
 800fcaa:	68fa      	ldr	r2, [r7, #12]
 800fcac:	440a      	add	r2, r1
 800fcae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcb2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fcb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	781b      	ldrb	r3, [r3, #0]
 800fcc4:	f003 030f 	and.w	r3, r3, #15
 800fcc8:	2101      	movs	r1, #1
 800fcca:	fa01 f303 	lsl.w	r3, r1, r3
 800fcce:	041b      	lsls	r3, r3, #16
 800fcd0:	43db      	mvns	r3, r3
 800fcd2:	68f9      	ldr	r1, [r7, #12]
 800fcd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcd8:	4013      	ands	r3, r2
 800fcda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fce2:	69da      	ldr	r2, [r3, #28]
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	781b      	ldrb	r3, [r3, #0]
 800fce8:	f003 030f 	and.w	r3, r3, #15
 800fcec:	2101      	movs	r1, #1
 800fcee:	fa01 f303 	lsl.w	r3, r1, r3
 800fcf2:	041b      	lsls	r3, r3, #16
 800fcf4:	43db      	mvns	r3, r3
 800fcf6:	68f9      	ldr	r1, [r7, #12]
 800fcf8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcfc:	4013      	ands	r3, r2
 800fcfe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fd00:	68bb      	ldr	r3, [r7, #8]
 800fd02:	015a      	lsls	r2, r3, #5
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	4413      	add	r3, r2
 800fd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd0c:	681a      	ldr	r2, [r3, #0]
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	0159      	lsls	r1, r3, #5
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	440b      	add	r3, r1
 800fd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	4b05      	ldr	r3, [pc, #20]	; (800fd34 <USB_DeactivateEndpoint+0x1b4>)
 800fd1e:	4013      	ands	r3, r2
 800fd20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fd22:	2300      	movs	r3, #0
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3714      	adds	r7, #20
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr
 800fd30:	ec337800 	.word	0xec337800
 800fd34:	eff37800 	.word	0xeff37800

0800fd38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b08a      	sub	sp, #40	; 0x28
 800fd3c:	af02      	add	r7, sp, #8
 800fd3e:	60f8      	str	r0, [r7, #12]
 800fd40:	60b9      	str	r1, [r7, #8]
 800fd42:	4613      	mov	r3, r2
 800fd44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fd4a:	68bb      	ldr	r3, [r7, #8]
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	785b      	ldrb	r3, [r3, #1]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	f040 8181 	bne.w	801005c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	691b      	ldr	r3, [r3, #16]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d132      	bne.n	800fdc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	015a      	lsls	r2, r3, #5
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	4413      	add	r3, r2
 800fd6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd6e:	691a      	ldr	r2, [r3, #16]
 800fd70:	69bb      	ldr	r3, [r7, #24]
 800fd72:	0159      	lsls	r1, r3, #5
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	440b      	add	r3, r1
 800fd78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	4ba5      	ldr	r3, [pc, #660]	; (8010014 <USB_EPStartXfer+0x2dc>)
 800fd80:	4013      	ands	r3, r2
 800fd82:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fd84:	69bb      	ldr	r3, [r7, #24]
 800fd86:	015a      	lsls	r2, r3, #5
 800fd88:	69fb      	ldr	r3, [r7, #28]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd90:	691b      	ldr	r3, [r3, #16]
 800fd92:	69ba      	ldr	r2, [r7, #24]
 800fd94:	0151      	lsls	r1, r2, #5
 800fd96:	69fa      	ldr	r2, [r7, #28]
 800fd98:	440a      	add	r2, r1
 800fd9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fda2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fda4:	69bb      	ldr	r3, [r7, #24]
 800fda6:	015a      	lsls	r2, r3, #5
 800fda8:	69fb      	ldr	r3, [r7, #28]
 800fdaa:	4413      	add	r3, r2
 800fdac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdb0:	691a      	ldr	r2, [r3, #16]
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	0159      	lsls	r1, r3, #5
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	440b      	add	r3, r1
 800fdba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdbe:	4619      	mov	r1, r3
 800fdc0:	4b95      	ldr	r3, [pc, #596]	; (8010018 <USB_EPStartXfer+0x2e0>)
 800fdc2:	4013      	ands	r3, r2
 800fdc4:	610b      	str	r3, [r1, #16]
 800fdc6:	e092      	b.n	800feee <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fdc8:	69bb      	ldr	r3, [r7, #24]
 800fdca:	015a      	lsls	r2, r3, #5
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	4413      	add	r3, r2
 800fdd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdd4:	691a      	ldr	r2, [r3, #16]
 800fdd6:	69bb      	ldr	r3, [r7, #24]
 800fdd8:	0159      	lsls	r1, r3, #5
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	440b      	add	r3, r1
 800fdde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fde2:	4619      	mov	r1, r3
 800fde4:	4b8c      	ldr	r3, [pc, #560]	; (8010018 <USB_EPStartXfer+0x2e0>)
 800fde6:	4013      	ands	r3, r2
 800fde8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fdea:	69bb      	ldr	r3, [r7, #24]
 800fdec:	015a      	lsls	r2, r3, #5
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdf6:	691a      	ldr	r2, [r3, #16]
 800fdf8:	69bb      	ldr	r3, [r7, #24]
 800fdfa:	0159      	lsls	r1, r3, #5
 800fdfc:	69fb      	ldr	r3, [r7, #28]
 800fdfe:	440b      	add	r3, r1
 800fe00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe04:	4619      	mov	r1, r3
 800fe06:	4b83      	ldr	r3, [pc, #524]	; (8010014 <USB_EPStartXfer+0x2dc>)
 800fe08:	4013      	ands	r3, r2
 800fe0a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800fe0c:	69bb      	ldr	r3, [r7, #24]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d11a      	bne.n	800fe48 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	691a      	ldr	r2, [r3, #16]
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d903      	bls.n	800fe26 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	689a      	ldr	r2, [r3, #8]
 800fe22:	68bb      	ldr	r3, [r7, #8]
 800fe24:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	015a      	lsls	r2, r3, #5
 800fe2a:	69fb      	ldr	r3, [r7, #28]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe32:	691b      	ldr	r3, [r3, #16]
 800fe34:	69ba      	ldr	r2, [r7, #24]
 800fe36:	0151      	lsls	r1, r2, #5
 800fe38:	69fa      	ldr	r2, [r7, #28]
 800fe3a:	440a      	add	r2, r1
 800fe3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fe44:	6113      	str	r3, [r2, #16]
 800fe46:	e01b      	b.n	800fe80 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fe48:	69bb      	ldr	r3, [r7, #24]
 800fe4a:	015a      	lsls	r2, r3, #5
 800fe4c:	69fb      	ldr	r3, [r7, #28]
 800fe4e:	4413      	add	r3, r2
 800fe50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe54:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	6919      	ldr	r1, [r3, #16]
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	689b      	ldr	r3, [r3, #8]
 800fe5e:	440b      	add	r3, r1
 800fe60:	1e59      	subs	r1, r3, #1
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	689b      	ldr	r3, [r3, #8]
 800fe66:	fbb1 f3f3 	udiv	r3, r1, r3
 800fe6a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fe6c:	4b6b      	ldr	r3, [pc, #428]	; (801001c <USB_EPStartXfer+0x2e4>)
 800fe6e:	400b      	ands	r3, r1
 800fe70:	69b9      	ldr	r1, [r7, #24]
 800fe72:	0148      	lsls	r0, r1, #5
 800fe74:	69f9      	ldr	r1, [r7, #28]
 800fe76:	4401      	add	r1, r0
 800fe78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fe7c:	4313      	orrs	r3, r2
 800fe7e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	015a      	lsls	r2, r3, #5
 800fe84:	69fb      	ldr	r3, [r7, #28]
 800fe86:	4413      	add	r3, r2
 800fe88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe8c:	691a      	ldr	r2, [r3, #16]
 800fe8e:	68bb      	ldr	r3, [r7, #8]
 800fe90:	691b      	ldr	r3, [r3, #16]
 800fe92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe96:	69b9      	ldr	r1, [r7, #24]
 800fe98:	0148      	lsls	r0, r1, #5
 800fe9a:	69f9      	ldr	r1, [r7, #28]
 800fe9c:	4401      	add	r1, r0
 800fe9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fea2:	4313      	orrs	r3, r2
 800fea4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	791b      	ldrb	r3, [r3, #4]
 800feaa:	2b01      	cmp	r3, #1
 800feac:	d11f      	bne.n	800feee <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800feae:	69bb      	ldr	r3, [r7, #24]
 800feb0:	015a      	lsls	r2, r3, #5
 800feb2:	69fb      	ldr	r3, [r7, #28]
 800feb4:	4413      	add	r3, r2
 800feb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feba:	691b      	ldr	r3, [r3, #16]
 800febc:	69ba      	ldr	r2, [r7, #24]
 800febe:	0151      	lsls	r1, r2, #5
 800fec0:	69fa      	ldr	r2, [r7, #28]
 800fec2:	440a      	add	r2, r1
 800fec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fec8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fecc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	015a      	lsls	r2, r3, #5
 800fed2:	69fb      	ldr	r3, [r7, #28]
 800fed4:	4413      	add	r3, r2
 800fed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feda:	691b      	ldr	r3, [r3, #16]
 800fedc:	69ba      	ldr	r2, [r7, #24]
 800fede:	0151      	lsls	r1, r2, #5
 800fee0:	69fa      	ldr	r2, [r7, #28]
 800fee2:	440a      	add	r2, r1
 800fee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800feec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800feee:	79fb      	ldrb	r3, [r7, #7]
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d14b      	bne.n	800ff8c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	69db      	ldr	r3, [r3, #28]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d009      	beq.n	800ff10 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fefc:	69bb      	ldr	r3, [r7, #24]
 800fefe:	015a      	lsls	r2, r3, #5
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	4413      	add	r3, r2
 800ff04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff08:	461a      	mov	r2, r3
 800ff0a:	68bb      	ldr	r3, [r7, #8]
 800ff0c:	69db      	ldr	r3, [r3, #28]
 800ff0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	791b      	ldrb	r3, [r3, #4]
 800ff14:	2b01      	cmp	r3, #1
 800ff16:	d128      	bne.n	800ff6a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ff18:	69fb      	ldr	r3, [r7, #28]
 800ff1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d110      	bne.n	800ff4a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ff28:	69bb      	ldr	r3, [r7, #24]
 800ff2a:	015a      	lsls	r2, r3, #5
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	4413      	add	r3, r2
 800ff30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	69ba      	ldr	r2, [r7, #24]
 800ff38:	0151      	lsls	r1, r2, #5
 800ff3a:	69fa      	ldr	r2, [r7, #28]
 800ff3c:	440a      	add	r2, r1
 800ff3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ff46:	6013      	str	r3, [r2, #0]
 800ff48:	e00f      	b.n	800ff6a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	015a      	lsls	r2, r3, #5
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	4413      	add	r3, r2
 800ff52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	69ba      	ldr	r2, [r7, #24]
 800ff5a:	0151      	lsls	r1, r2, #5
 800ff5c:	69fa      	ldr	r2, [r7, #28]
 800ff5e:	440a      	add	r2, r1
 800ff60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff6a:	69bb      	ldr	r3, [r7, #24]
 800ff6c:	015a      	lsls	r2, r3, #5
 800ff6e:	69fb      	ldr	r3, [r7, #28]
 800ff70:	4413      	add	r3, r2
 800ff72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	69ba      	ldr	r2, [r7, #24]
 800ff7a:	0151      	lsls	r1, r2, #5
 800ff7c:	69fa      	ldr	r2, [r7, #28]
 800ff7e:	440a      	add	r2, r1
 800ff80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff88:	6013      	str	r3, [r2, #0]
 800ff8a:	e16a      	b.n	8010262 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff8c:	69bb      	ldr	r3, [r7, #24]
 800ff8e:	015a      	lsls	r2, r3, #5
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	4413      	add	r3, r2
 800ff94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	69ba      	ldr	r2, [r7, #24]
 800ff9c:	0151      	lsls	r1, r2, #5
 800ff9e:	69fa      	ldr	r2, [r7, #28]
 800ffa0:	440a      	add	r2, r1
 800ffa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ffaa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ffac:	68bb      	ldr	r3, [r7, #8]
 800ffae:	791b      	ldrb	r3, [r3, #4]
 800ffb0:	2b01      	cmp	r3, #1
 800ffb2:	d015      	beq.n	800ffe0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	691b      	ldr	r3, [r3, #16]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f000 8152 	beq.w	8010262 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ffbe:	69fb      	ldr	r3, [r7, #28]
 800ffc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	781b      	ldrb	r3, [r3, #0]
 800ffca:	f003 030f 	and.w	r3, r3, #15
 800ffce:	2101      	movs	r1, #1
 800ffd0:	fa01 f303 	lsl.w	r3, r1, r3
 800ffd4:	69f9      	ldr	r1, [r7, #28]
 800ffd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffda:	4313      	orrs	r3, r2
 800ffdc:	634b      	str	r3, [r1, #52]	; 0x34
 800ffde:	e140      	b.n	8010262 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d117      	bne.n	8010020 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	015a      	lsls	r2, r3, #5
 800fff4:	69fb      	ldr	r3, [r7, #28]
 800fff6:	4413      	add	r3, r2
 800fff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	69ba      	ldr	r2, [r7, #24]
 8010000:	0151      	lsls	r1, r2, #5
 8010002:	69fa      	ldr	r2, [r7, #28]
 8010004:	440a      	add	r2, r1
 8010006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801000a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801000e:	6013      	str	r3, [r2, #0]
 8010010:	e016      	b.n	8010040 <USB_EPStartXfer+0x308>
 8010012:	bf00      	nop
 8010014:	e007ffff 	.word	0xe007ffff
 8010018:	fff80000 	.word	0xfff80000
 801001c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010020:	69bb      	ldr	r3, [r7, #24]
 8010022:	015a      	lsls	r2, r3, #5
 8010024:	69fb      	ldr	r3, [r7, #28]
 8010026:	4413      	add	r3, r2
 8010028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	69ba      	ldr	r2, [r7, #24]
 8010030:	0151      	lsls	r1, r2, #5
 8010032:	69fa      	ldr	r2, [r7, #28]
 8010034:	440a      	add	r2, r1
 8010036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801003a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801003e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	68d9      	ldr	r1, [r3, #12]
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	781a      	ldrb	r2, [r3, #0]
 8010048:	68bb      	ldr	r3, [r7, #8]
 801004a:	691b      	ldr	r3, [r3, #16]
 801004c:	b298      	uxth	r0, r3
 801004e:	79fb      	ldrb	r3, [r7, #7]
 8010050:	9300      	str	r3, [sp, #0]
 8010052:	4603      	mov	r3, r0
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f000 f9b9 	bl	80103cc <USB_WritePacket>
 801005a:	e102      	b.n	8010262 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801005c:	69bb      	ldr	r3, [r7, #24]
 801005e:	015a      	lsls	r2, r3, #5
 8010060:	69fb      	ldr	r3, [r7, #28]
 8010062:	4413      	add	r3, r2
 8010064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010068:	691a      	ldr	r2, [r3, #16]
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	0159      	lsls	r1, r3, #5
 801006e:	69fb      	ldr	r3, [r7, #28]
 8010070:	440b      	add	r3, r1
 8010072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010076:	4619      	mov	r1, r3
 8010078:	4b7c      	ldr	r3, [pc, #496]	; (801026c <USB_EPStartXfer+0x534>)
 801007a:	4013      	ands	r3, r2
 801007c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801007e:	69bb      	ldr	r3, [r7, #24]
 8010080:	015a      	lsls	r2, r3, #5
 8010082:	69fb      	ldr	r3, [r7, #28]
 8010084:	4413      	add	r3, r2
 8010086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801008a:	691a      	ldr	r2, [r3, #16]
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	0159      	lsls	r1, r3, #5
 8010090:	69fb      	ldr	r3, [r7, #28]
 8010092:	440b      	add	r3, r1
 8010094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010098:	4619      	mov	r1, r3
 801009a:	4b75      	ldr	r3, [pc, #468]	; (8010270 <USB_EPStartXfer+0x538>)
 801009c:	4013      	ands	r3, r2
 801009e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d12f      	bne.n	8010106 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80100a6:	68bb      	ldr	r3, [r7, #8]
 80100a8:	691b      	ldr	r3, [r3, #16]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d003      	beq.n	80100b6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	689a      	ldr	r2, [r3, #8]
 80100b2:	68bb      	ldr	r3, [r7, #8]
 80100b4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	689a      	ldr	r2, [r3, #8]
 80100ba:	68bb      	ldr	r3, [r7, #8]
 80100bc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	015a      	lsls	r2, r3, #5
 80100c2:	69fb      	ldr	r3, [r7, #28]
 80100c4:	4413      	add	r3, r2
 80100c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100ca:	691a      	ldr	r2, [r3, #16]
 80100cc:	68bb      	ldr	r3, [r7, #8]
 80100ce:	6a1b      	ldr	r3, [r3, #32]
 80100d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100d4:	69b9      	ldr	r1, [r7, #24]
 80100d6:	0148      	lsls	r0, r1, #5
 80100d8:	69f9      	ldr	r1, [r7, #28]
 80100da:	4401      	add	r1, r0
 80100dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80100e0:	4313      	orrs	r3, r2
 80100e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80100e4:	69bb      	ldr	r3, [r7, #24]
 80100e6:	015a      	lsls	r2, r3, #5
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	4413      	add	r3, r2
 80100ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	69ba      	ldr	r2, [r7, #24]
 80100f4:	0151      	lsls	r1, r2, #5
 80100f6:	69fa      	ldr	r2, [r7, #28]
 80100f8:	440a      	add	r2, r1
 80100fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010102:	6113      	str	r3, [r2, #16]
 8010104:	e05f      	b.n	80101c6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	691b      	ldr	r3, [r3, #16]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d123      	bne.n	8010156 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801010e:	69bb      	ldr	r3, [r7, #24]
 8010110:	015a      	lsls	r2, r3, #5
 8010112:	69fb      	ldr	r3, [r7, #28]
 8010114:	4413      	add	r3, r2
 8010116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801011a:	691a      	ldr	r2, [r3, #16]
 801011c:	68bb      	ldr	r3, [r7, #8]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010124:	69b9      	ldr	r1, [r7, #24]
 8010126:	0148      	lsls	r0, r1, #5
 8010128:	69f9      	ldr	r1, [r7, #28]
 801012a:	4401      	add	r1, r0
 801012c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010130:	4313      	orrs	r3, r2
 8010132:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010134:	69bb      	ldr	r3, [r7, #24]
 8010136:	015a      	lsls	r2, r3, #5
 8010138:	69fb      	ldr	r3, [r7, #28]
 801013a:	4413      	add	r3, r2
 801013c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010140:	691b      	ldr	r3, [r3, #16]
 8010142:	69ba      	ldr	r2, [r7, #24]
 8010144:	0151      	lsls	r1, r2, #5
 8010146:	69fa      	ldr	r2, [r7, #28]
 8010148:	440a      	add	r2, r1
 801014a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801014e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010152:	6113      	str	r3, [r2, #16]
 8010154:	e037      	b.n	80101c6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	691a      	ldr	r2, [r3, #16]
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	4413      	add	r3, r2
 8010160:	1e5a      	subs	r2, r3, #1
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	689b      	ldr	r3, [r3, #8]
 8010166:	fbb2 f3f3 	udiv	r3, r2, r3
 801016a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801016c:	68bb      	ldr	r3, [r7, #8]
 801016e:	689b      	ldr	r3, [r3, #8]
 8010170:	8afa      	ldrh	r2, [r7, #22]
 8010172:	fb03 f202 	mul.w	r2, r3, r2
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	015a      	lsls	r2, r3, #5
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	4413      	add	r3, r2
 8010182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010186:	691a      	ldr	r2, [r3, #16]
 8010188:	8afb      	ldrh	r3, [r7, #22]
 801018a:	04d9      	lsls	r1, r3, #19
 801018c:	4b39      	ldr	r3, [pc, #228]	; (8010274 <USB_EPStartXfer+0x53c>)
 801018e:	400b      	ands	r3, r1
 8010190:	69b9      	ldr	r1, [r7, #24]
 8010192:	0148      	lsls	r0, r1, #5
 8010194:	69f9      	ldr	r1, [r7, #28]
 8010196:	4401      	add	r1, r0
 8010198:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801019c:	4313      	orrs	r3, r2
 801019e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80101a0:	69bb      	ldr	r3, [r7, #24]
 80101a2:	015a      	lsls	r2, r3, #5
 80101a4:	69fb      	ldr	r3, [r7, #28]
 80101a6:	4413      	add	r3, r2
 80101a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ac:	691a      	ldr	r2, [r3, #16]
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	6a1b      	ldr	r3, [r3, #32]
 80101b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101b6:	69b9      	ldr	r1, [r7, #24]
 80101b8:	0148      	lsls	r0, r1, #5
 80101ba:	69f9      	ldr	r1, [r7, #28]
 80101bc:	4401      	add	r1, r0
 80101be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80101c2:	4313      	orrs	r3, r2
 80101c4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80101c6:	79fb      	ldrb	r3, [r7, #7]
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	d10d      	bne.n	80101e8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	68db      	ldr	r3, [r3, #12]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d009      	beq.n	80101e8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	68d9      	ldr	r1, [r3, #12]
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	015a      	lsls	r2, r3, #5
 80101dc:	69fb      	ldr	r3, [r7, #28]
 80101de:	4413      	add	r3, r2
 80101e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101e4:	460a      	mov	r2, r1
 80101e6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	791b      	ldrb	r3, [r3, #4]
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d128      	bne.n	8010242 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80101f0:	69fb      	ldr	r3, [r7, #28]
 80101f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101f6:	689b      	ldr	r3, [r3, #8]
 80101f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d110      	bne.n	8010222 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	015a      	lsls	r2, r3, #5
 8010204:	69fb      	ldr	r3, [r7, #28]
 8010206:	4413      	add	r3, r2
 8010208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	69ba      	ldr	r2, [r7, #24]
 8010210:	0151      	lsls	r1, r2, #5
 8010212:	69fa      	ldr	r2, [r7, #28]
 8010214:	440a      	add	r2, r1
 8010216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801021a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801021e:	6013      	str	r3, [r2, #0]
 8010220:	e00f      	b.n	8010242 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010222:	69bb      	ldr	r3, [r7, #24]
 8010224:	015a      	lsls	r2, r3, #5
 8010226:	69fb      	ldr	r3, [r7, #28]
 8010228:	4413      	add	r3, r2
 801022a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	69ba      	ldr	r2, [r7, #24]
 8010232:	0151      	lsls	r1, r2, #5
 8010234:	69fa      	ldr	r2, [r7, #28]
 8010236:	440a      	add	r2, r1
 8010238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801023c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010240:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010242:	69bb      	ldr	r3, [r7, #24]
 8010244:	015a      	lsls	r2, r3, #5
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	4413      	add	r3, r2
 801024a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	69ba      	ldr	r2, [r7, #24]
 8010252:	0151      	lsls	r1, r2, #5
 8010254:	69fa      	ldr	r2, [r7, #28]
 8010256:	440a      	add	r2, r1
 8010258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801025c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010260:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010262:	2300      	movs	r3, #0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3720      	adds	r7, #32
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	fff80000 	.word	0xfff80000
 8010270:	e007ffff 	.word	0xe007ffff
 8010274:	1ff80000 	.word	0x1ff80000

08010278 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010278:	b480      	push	{r7}
 801027a:	b087      	sub	sp, #28
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010282:	2300      	movs	r3, #0
 8010284:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010286:	2300      	movs	r3, #0
 8010288:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	785b      	ldrb	r3, [r3, #1]
 8010292:	2b01      	cmp	r3, #1
 8010294:	d14a      	bne.n	801032c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	015a      	lsls	r2, r3, #5
 801029c:	693b      	ldr	r3, [r7, #16]
 801029e:	4413      	add	r3, r2
 80102a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80102aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102ae:	f040 8086 	bne.w	80103be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	015a      	lsls	r2, r3, #5
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	4413      	add	r3, r2
 80102bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	683a      	ldr	r2, [r7, #0]
 80102c4:	7812      	ldrb	r2, [r2, #0]
 80102c6:	0151      	lsls	r1, r2, #5
 80102c8:	693a      	ldr	r2, [r7, #16]
 80102ca:	440a      	add	r2, r1
 80102cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80102d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	015a      	lsls	r2, r3, #5
 80102dc:	693b      	ldr	r3, [r7, #16]
 80102de:	4413      	add	r3, r2
 80102e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	683a      	ldr	r2, [r7, #0]
 80102e8:	7812      	ldrb	r2, [r2, #0]
 80102ea:	0151      	lsls	r1, r2, #5
 80102ec:	693a      	ldr	r2, [r7, #16]
 80102ee:	440a      	add	r2, r1
 80102f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80102f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	3301      	adds	r3, #1
 80102fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	f242 7210 	movw	r2, #10000	; 0x2710
 8010306:	4293      	cmp	r3, r2
 8010308:	d902      	bls.n	8010310 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801030a:	2301      	movs	r3, #1
 801030c:	75fb      	strb	r3, [r7, #23]
          break;
 801030e:	e056      	b.n	80103be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	781b      	ldrb	r3, [r3, #0]
 8010314:	015a      	lsls	r2, r3, #5
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	4413      	add	r3, r2
 801031a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010328:	d0e7      	beq.n	80102fa <USB_EPStopXfer+0x82>
 801032a:	e048      	b.n	80103be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	015a      	lsls	r2, r3, #5
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	4413      	add	r3, r2
 8010336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010344:	d13b      	bne.n	80103be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	015a      	lsls	r2, r3, #5
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	4413      	add	r3, r2
 8010350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	683a      	ldr	r2, [r7, #0]
 8010358:	7812      	ldrb	r2, [r2, #0]
 801035a:	0151      	lsls	r1, r2, #5
 801035c:	693a      	ldr	r2, [r7, #16]
 801035e:	440a      	add	r2, r1
 8010360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010368:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	015a      	lsls	r2, r3, #5
 8010370:	693b      	ldr	r3, [r7, #16]
 8010372:	4413      	add	r3, r2
 8010374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	683a      	ldr	r2, [r7, #0]
 801037c:	7812      	ldrb	r2, [r2, #0]
 801037e:	0151      	lsls	r1, r2, #5
 8010380:	693a      	ldr	r2, [r7, #16]
 8010382:	440a      	add	r2, r1
 8010384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801038c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	3301      	adds	r3, #1
 8010392:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	f242 7210 	movw	r2, #10000	; 0x2710
 801039a:	4293      	cmp	r3, r2
 801039c:	d902      	bls.n	80103a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801039e:	2301      	movs	r3, #1
 80103a0:	75fb      	strb	r3, [r7, #23]
          break;
 80103a2:	e00c      	b.n	80103be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	015a      	lsls	r2, r3, #5
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	4413      	add	r3, r2
 80103ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80103b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80103bc:	d0e7      	beq.n	801038e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80103be:	7dfb      	ldrb	r3, [r7, #23]
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	371c      	adds	r7, #28
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b089      	sub	sp, #36	; 0x24
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	4611      	mov	r1, r2
 80103d8:	461a      	mov	r2, r3
 80103da:	460b      	mov	r3, r1
 80103dc:	71fb      	strb	r3, [r7, #7]
 80103de:	4613      	mov	r3, r2
 80103e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80103ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d123      	bne.n	801043a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80103f2:	88bb      	ldrh	r3, [r7, #4]
 80103f4:	3303      	adds	r3, #3
 80103f6:	089b      	lsrs	r3, r3, #2
 80103f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80103fa:	2300      	movs	r3, #0
 80103fc:	61bb      	str	r3, [r7, #24]
 80103fe:	e018      	b.n	8010432 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010400:	79fb      	ldrb	r3, [r7, #7]
 8010402:	031a      	lsls	r2, r3, #12
 8010404:	697b      	ldr	r3, [r7, #20]
 8010406:	4413      	add	r3, r2
 8010408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801040c:	461a      	mov	r2, r3
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010414:	69fb      	ldr	r3, [r7, #28]
 8010416:	3301      	adds	r3, #1
 8010418:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801041a:	69fb      	ldr	r3, [r7, #28]
 801041c:	3301      	adds	r3, #1
 801041e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010420:	69fb      	ldr	r3, [r7, #28]
 8010422:	3301      	adds	r3, #1
 8010424:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	3301      	adds	r3, #1
 801042a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	3301      	adds	r3, #1
 8010430:	61bb      	str	r3, [r7, #24]
 8010432:	69ba      	ldr	r2, [r7, #24]
 8010434:	693b      	ldr	r3, [r7, #16]
 8010436:	429a      	cmp	r2, r3
 8010438:	d3e2      	bcc.n	8010400 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801043a:	2300      	movs	r3, #0
}
 801043c:	4618      	mov	r0, r3
 801043e:	3724      	adds	r7, #36	; 0x24
 8010440:	46bd      	mov	sp, r7
 8010442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010446:	4770      	bx	lr

08010448 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010448:	b480      	push	{r7}
 801044a:	b08b      	sub	sp, #44	; 0x2c
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	4613      	mov	r3, r2
 8010454:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801045a:	68bb      	ldr	r3, [r7, #8]
 801045c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801045e:	88fb      	ldrh	r3, [r7, #6]
 8010460:	089b      	lsrs	r3, r3, #2
 8010462:	b29b      	uxth	r3, r3
 8010464:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010466:	88fb      	ldrh	r3, [r7, #6]
 8010468:	f003 0303 	and.w	r3, r3, #3
 801046c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801046e:	2300      	movs	r3, #0
 8010470:	623b      	str	r3, [r7, #32]
 8010472:	e014      	b.n	801049e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010474:	69bb      	ldr	r3, [r7, #24]
 8010476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801047e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010482:	3301      	adds	r3, #1
 8010484:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010488:	3301      	adds	r3, #1
 801048a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801048c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048e:	3301      	adds	r3, #1
 8010490:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010494:	3301      	adds	r3, #1
 8010496:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010498:	6a3b      	ldr	r3, [r7, #32]
 801049a:	3301      	adds	r3, #1
 801049c:	623b      	str	r3, [r7, #32]
 801049e:	6a3a      	ldr	r2, [r7, #32]
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d3e6      	bcc.n	8010474 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80104a6:	8bfb      	ldrh	r3, [r7, #30]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d01e      	beq.n	80104ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80104ac:	2300      	movs	r3, #0
 80104ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104b6:	461a      	mov	r2, r3
 80104b8:	f107 0310 	add.w	r3, r7, #16
 80104bc:	6812      	ldr	r2, [r2, #0]
 80104be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80104c0:	693a      	ldr	r2, [r7, #16]
 80104c2:	6a3b      	ldr	r3, [r7, #32]
 80104c4:	b2db      	uxtb	r3, r3
 80104c6:	00db      	lsls	r3, r3, #3
 80104c8:	fa22 f303 	lsr.w	r3, r2, r3
 80104cc:	b2da      	uxtb	r2, r3
 80104ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d0:	701a      	strb	r2, [r3, #0]
      i++;
 80104d2:	6a3b      	ldr	r3, [r7, #32]
 80104d4:	3301      	adds	r3, #1
 80104d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80104d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104da:	3301      	adds	r3, #1
 80104dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80104de:	8bfb      	ldrh	r3, [r7, #30]
 80104e0:	3b01      	subs	r3, #1
 80104e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80104e4:	8bfb      	ldrh	r3, [r7, #30]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d1ea      	bne.n	80104c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80104ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	372c      	adds	r7, #44	; 0x2c
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80104f8:	b480      	push	{r7}
 80104fa:	b085      	sub	sp, #20
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
 8010500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	785b      	ldrb	r3, [r3, #1]
 8010510:	2b01      	cmp	r3, #1
 8010512:	d12c      	bne.n	801056e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	015a      	lsls	r2, r3, #5
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	4413      	add	r3, r2
 801051c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	2b00      	cmp	r3, #0
 8010524:	db12      	blt.n	801054c <USB_EPSetStall+0x54>
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d00f      	beq.n	801054c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	015a      	lsls	r2, r3, #5
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	4413      	add	r3, r2
 8010534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	68ba      	ldr	r2, [r7, #8]
 801053c:	0151      	lsls	r1, r2, #5
 801053e:	68fa      	ldr	r2, [r7, #12]
 8010540:	440a      	add	r2, r1
 8010542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801054a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	015a      	lsls	r2, r3, #5
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	4413      	add	r3, r2
 8010554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	68ba      	ldr	r2, [r7, #8]
 801055c:	0151      	lsls	r1, r2, #5
 801055e:	68fa      	ldr	r2, [r7, #12]
 8010560:	440a      	add	r2, r1
 8010562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801056a:	6013      	str	r3, [r2, #0]
 801056c:	e02b      	b.n	80105c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	015a      	lsls	r2, r3, #5
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	4413      	add	r3, r2
 8010576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	db12      	blt.n	80105a6 <USB_EPSetStall+0xae>
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d00f      	beq.n	80105a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010586:	68bb      	ldr	r3, [r7, #8]
 8010588:	015a      	lsls	r2, r3, #5
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	4413      	add	r3, r2
 801058e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	68ba      	ldr	r2, [r7, #8]
 8010596:	0151      	lsls	r1, r2, #5
 8010598:	68fa      	ldr	r2, [r7, #12]
 801059a:	440a      	add	r2, r1
 801059c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80105a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	015a      	lsls	r2, r3, #5
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	4413      	add	r3, r2
 80105ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	68ba      	ldr	r2, [r7, #8]
 80105b6:	0151      	lsls	r1, r2, #5
 80105b8:	68fa      	ldr	r2, [r7, #12]
 80105ba:	440a      	add	r2, r1
 80105bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80105c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3714      	adds	r7, #20
 80105cc:	46bd      	mov	sp, r7
 80105ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d2:	4770      	bx	lr

080105d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80105d4:	b480      	push	{r7}
 80105d6:	b085      	sub	sp, #20
 80105d8:	af00      	add	r7, sp, #0
 80105da:	6078      	str	r0, [r7, #4]
 80105dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105e2:	683b      	ldr	r3, [r7, #0]
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	785b      	ldrb	r3, [r3, #1]
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d128      	bne.n	8010642 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	015a      	lsls	r2, r3, #5
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	4413      	add	r3, r2
 80105f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	68ba      	ldr	r2, [r7, #8]
 8010600:	0151      	lsls	r1, r2, #5
 8010602:	68fa      	ldr	r2, [r7, #12]
 8010604:	440a      	add	r2, r1
 8010606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801060a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801060e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010610:	683b      	ldr	r3, [r7, #0]
 8010612:	791b      	ldrb	r3, [r3, #4]
 8010614:	2b03      	cmp	r3, #3
 8010616:	d003      	beq.n	8010620 <USB_EPClearStall+0x4c>
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	791b      	ldrb	r3, [r3, #4]
 801061c:	2b02      	cmp	r3, #2
 801061e:	d138      	bne.n	8010692 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	015a      	lsls	r2, r3, #5
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	4413      	add	r3, r2
 8010628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	0151      	lsls	r1, r2, #5
 8010632:	68fa      	ldr	r2, [r7, #12]
 8010634:	440a      	add	r2, r1
 8010636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801063e:	6013      	str	r3, [r2, #0]
 8010640:	e027      	b.n	8010692 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010642:	68bb      	ldr	r3, [r7, #8]
 8010644:	015a      	lsls	r2, r3, #5
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	4413      	add	r3, r2
 801064a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	68ba      	ldr	r2, [r7, #8]
 8010652:	0151      	lsls	r1, r2, #5
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	440a      	add	r2, r1
 8010658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801065c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010660:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010662:	683b      	ldr	r3, [r7, #0]
 8010664:	791b      	ldrb	r3, [r3, #4]
 8010666:	2b03      	cmp	r3, #3
 8010668:	d003      	beq.n	8010672 <USB_EPClearStall+0x9e>
 801066a:	683b      	ldr	r3, [r7, #0]
 801066c:	791b      	ldrb	r3, [r3, #4]
 801066e:	2b02      	cmp	r3, #2
 8010670:	d10f      	bne.n	8010692 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	015a      	lsls	r2, r3, #5
 8010676:	68fb      	ldr	r3, [r7, #12]
 8010678:	4413      	add	r3, r2
 801067a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	68ba      	ldr	r2, [r7, #8]
 8010682:	0151      	lsls	r1, r2, #5
 8010684:	68fa      	ldr	r2, [r7, #12]
 8010686:	440a      	add	r2, r1
 8010688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010690:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010692:	2300      	movs	r3, #0
}
 8010694:	4618      	mov	r0, r3
 8010696:	3714      	adds	r7, #20
 8010698:	46bd      	mov	sp, r7
 801069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069e:	4770      	bx	lr

080106a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80106a0:	b480      	push	{r7}
 80106a2:	b085      	sub	sp, #20
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	460b      	mov	r3, r1
 80106aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	68fa      	ldr	r2, [r7, #12]
 80106ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80106be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80106c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	78fb      	ldrb	r3, [r7, #3]
 80106ce:	011b      	lsls	r3, r3, #4
 80106d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80106d4:	68f9      	ldr	r1, [r7, #12]
 80106d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106da:	4313      	orrs	r3, r2
 80106dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80106de:	2300      	movs	r3, #0
}
 80106e0:	4618      	mov	r0, r3
 80106e2:	3714      	adds	r7, #20
 80106e4:	46bd      	mov	sp, r7
 80106e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ea:	4770      	bx	lr

080106ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80106ec:	b480      	push	{r7}
 80106ee:	b085      	sub	sp, #20
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	68fa      	ldr	r2, [r7, #12]
 8010702:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010706:	f023 0303 	bic.w	r3, r3, #3
 801070a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010712:	685b      	ldr	r3, [r3, #4]
 8010714:	68fa      	ldr	r2, [r7, #12]
 8010716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801071a:	f023 0302 	bic.w	r3, r3, #2
 801071e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010720:	2300      	movs	r3, #0
}
 8010722:	4618      	mov	r0, r3
 8010724:	3714      	adds	r7, #20
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr

0801072e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801072e:	b480      	push	{r7}
 8010730:	b085      	sub	sp, #20
 8010732:	af00      	add	r7, sp, #0
 8010734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	68fa      	ldr	r2, [r7, #12]
 8010744:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010748:	f023 0303 	bic.w	r3, r3, #3
 801074c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010754:	685b      	ldr	r3, [r3, #4]
 8010756:	68fa      	ldr	r2, [r7, #12]
 8010758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801075c:	f043 0302 	orr.w	r3, r3, #2
 8010760:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010762:	2300      	movs	r3, #0
}
 8010764:	4618      	mov	r0, r3
 8010766:	3714      	adds	r7, #20
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr

08010770 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010770:	b480      	push	{r7}
 8010772:	b085      	sub	sp, #20
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	695b      	ldr	r3, [r3, #20]
 801077c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	699b      	ldr	r3, [r3, #24]
 8010782:	68fa      	ldr	r2, [r7, #12]
 8010784:	4013      	ands	r3, r2
 8010786:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010788:	68fb      	ldr	r3, [r7, #12]
}
 801078a:	4618      	mov	r0, r3
 801078c:	3714      	adds	r7, #20
 801078e:	46bd      	mov	sp, r7
 8010790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010794:	4770      	bx	lr

08010796 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010796:	b480      	push	{r7}
 8010798:	b085      	sub	sp, #20
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107a8:	699b      	ldr	r3, [r3, #24]
 80107aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107b2:	69db      	ldr	r3, [r3, #28]
 80107b4:	68ba      	ldr	r2, [r7, #8]
 80107b6:	4013      	ands	r3, r2
 80107b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	0c1b      	lsrs	r3, r3, #16
}
 80107be:	4618      	mov	r0, r3
 80107c0:	3714      	adds	r7, #20
 80107c2:	46bd      	mov	sp, r7
 80107c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c8:	4770      	bx	lr

080107ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80107ca:	b480      	push	{r7}
 80107cc:	b085      	sub	sp, #20
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107dc:	699b      	ldr	r3, [r3, #24]
 80107de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107e6:	69db      	ldr	r3, [r3, #28]
 80107e8:	68ba      	ldr	r2, [r7, #8]
 80107ea:	4013      	ands	r3, r2
 80107ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80107ee:	68bb      	ldr	r3, [r7, #8]
 80107f0:	b29b      	uxth	r3, r3
}
 80107f2:	4618      	mov	r0, r3
 80107f4:	3714      	adds	r7, #20
 80107f6:	46bd      	mov	sp, r7
 80107f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fc:	4770      	bx	lr

080107fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80107fe:	b480      	push	{r7}
 8010800:	b085      	sub	sp, #20
 8010802:	af00      	add	r7, sp, #0
 8010804:	6078      	str	r0, [r7, #4]
 8010806:	460b      	mov	r3, r1
 8010808:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801080e:	78fb      	ldrb	r3, [r7, #3]
 8010810:	015a      	lsls	r2, r3, #5
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	4413      	add	r3, r2
 8010816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801081a:	689b      	ldr	r3, [r3, #8]
 801081c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010824:	695b      	ldr	r3, [r3, #20]
 8010826:	68ba      	ldr	r2, [r7, #8]
 8010828:	4013      	ands	r3, r2
 801082a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801082c:	68bb      	ldr	r3, [r7, #8]
}
 801082e:	4618      	mov	r0, r3
 8010830:	3714      	adds	r7, #20
 8010832:	46bd      	mov	sp, r7
 8010834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010838:	4770      	bx	lr

0801083a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801083a:	b480      	push	{r7}
 801083c:	b087      	sub	sp, #28
 801083e:	af00      	add	r7, sp, #0
 8010840:	6078      	str	r0, [r7, #4]
 8010842:	460b      	mov	r3, r1
 8010844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801084a:	697b      	ldr	r3, [r7, #20]
 801084c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010850:	691b      	ldr	r3, [r3, #16]
 8010852:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010854:	697b      	ldr	r3, [r7, #20]
 8010856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801085a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801085c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801085e:	78fb      	ldrb	r3, [r7, #3]
 8010860:	f003 030f 	and.w	r3, r3, #15
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	fa22 f303 	lsr.w	r3, r2, r3
 801086a:	01db      	lsls	r3, r3, #7
 801086c:	b2db      	uxtb	r3, r3
 801086e:	693a      	ldr	r2, [r7, #16]
 8010870:	4313      	orrs	r3, r2
 8010872:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010874:	78fb      	ldrb	r3, [r7, #3]
 8010876:	015a      	lsls	r2, r3, #5
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	4413      	add	r3, r2
 801087c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010880:	689b      	ldr	r3, [r3, #8]
 8010882:	693a      	ldr	r2, [r7, #16]
 8010884:	4013      	ands	r3, r2
 8010886:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010888:	68bb      	ldr	r3, [r7, #8]
}
 801088a:	4618      	mov	r0, r3
 801088c:	371c      	adds	r7, #28
 801088e:	46bd      	mov	sp, r7
 8010890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010894:	4770      	bx	lr

08010896 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010896:	b480      	push	{r7}
 8010898:	b083      	sub	sp, #12
 801089a:	af00      	add	r7, sp, #0
 801089c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	695b      	ldr	r3, [r3, #20]
 80108a2:	f003 0301 	and.w	r3, r3, #1
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	370c      	adds	r7, #12
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr
	...

080108b4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80108b4:	b480      	push	{r7}
 80108b6:	b085      	sub	sp, #20
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108c6:	681a      	ldr	r2, [r3, #0]
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ce:	4619      	mov	r1, r3
 80108d0:	4b09      	ldr	r3, [pc, #36]	; (80108f8 <USB_ActivateSetup+0x44>)
 80108d2:	4013      	ands	r3, r2
 80108d4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	68fa      	ldr	r2, [r7, #12]
 80108e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80108e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80108e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108ea:	2300      	movs	r3, #0
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3714      	adds	r7, #20
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr
 80108f8:	fffff800 	.word	0xfffff800

080108fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80108fc:	b480      	push	{r7}
 80108fe:	b087      	sub	sp, #28
 8010900:	af00      	add	r7, sp, #0
 8010902:	60f8      	str	r0, [r7, #12]
 8010904:	460b      	mov	r3, r1
 8010906:	607a      	str	r2, [r7, #4]
 8010908:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	333c      	adds	r3, #60	; 0x3c
 8010912:	3304      	adds	r3, #4
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	4a26      	ldr	r2, [pc, #152]	; (80109b4 <USB_EP0_OutStart+0xb8>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d90a      	bls.n	8010936 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801092c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010930:	d101      	bne.n	8010936 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010932:	2300      	movs	r3, #0
 8010934:	e037      	b.n	80109a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801093c:	461a      	mov	r2, r3
 801093e:	2300      	movs	r3, #0
 8010940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010948:	691b      	ldr	r3, [r3, #16]
 801094a:	697a      	ldr	r2, [r7, #20]
 801094c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010950:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801095c:	691b      	ldr	r3, [r3, #16]
 801095e:	697a      	ldr	r2, [r7, #20]
 8010960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010964:	f043 0318 	orr.w	r3, r3, #24
 8010968:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010970:	691b      	ldr	r3, [r3, #16]
 8010972:	697a      	ldr	r2, [r7, #20]
 8010974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010978:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801097c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801097e:	7afb      	ldrb	r3, [r7, #11]
 8010980:	2b01      	cmp	r3, #1
 8010982:	d10f      	bne.n	80109a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010984:	697b      	ldr	r3, [r7, #20]
 8010986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801098a:	461a      	mov	r2, r3
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	697a      	ldr	r2, [r7, #20]
 801099a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801099e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80109a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80109a4:	2300      	movs	r3, #0
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	371c      	adds	r7, #28
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	4f54300a 	.word	0x4f54300a

080109b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80109b8:	b480      	push	{r7}
 80109ba:	b085      	sub	sp, #20
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80109c0:	2300      	movs	r3, #0
 80109c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	3301      	adds	r3, #1
 80109c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	4a13      	ldr	r2, [pc, #76]	; (8010a1c <USB_CoreReset+0x64>)
 80109ce:	4293      	cmp	r3, r2
 80109d0:	d901      	bls.n	80109d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80109d2:	2303      	movs	r3, #3
 80109d4:	e01b      	b.n	8010a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	691b      	ldr	r3, [r3, #16]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	daf2      	bge.n	80109c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80109de:	2300      	movs	r3, #0
 80109e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	691b      	ldr	r3, [r3, #16]
 80109e6:	f043 0201 	orr.w	r2, r3, #1
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	3301      	adds	r3, #1
 80109f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	4a09      	ldr	r2, [pc, #36]	; (8010a1c <USB_CoreReset+0x64>)
 80109f8:	4293      	cmp	r3, r2
 80109fa:	d901      	bls.n	8010a00 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80109fc:	2303      	movs	r3, #3
 80109fe:	e006      	b.n	8010a0e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	691b      	ldr	r3, [r3, #16]
 8010a04:	f003 0301 	and.w	r3, r3, #1
 8010a08:	2b01      	cmp	r3, #1
 8010a0a:	d0f0      	beq.n	80109ee <USB_CoreReset+0x36>

  return HAL_OK;
 8010a0c:	2300      	movs	r3, #0
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3714      	adds	r7, #20
 8010a12:	46bd      	mov	sp, r7
 8010a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a18:	4770      	bx	lr
 8010a1a:	bf00      	nop
 8010a1c:	00030d40 	.word	0x00030d40

08010a20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010a24:	4904      	ldr	r1, [pc, #16]	; (8010a38 <MX_FATFS_Init+0x18>)
 8010a26:	4805      	ldr	r0, [pc, #20]	; (8010a3c <MX_FATFS_Init+0x1c>)
 8010a28:	f002 f8a2 	bl	8012b70 <FATFS_LinkDriver>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	461a      	mov	r2, r3
 8010a30:	4b03      	ldr	r3, [pc, #12]	; (8010a40 <MX_FATFS_Init+0x20>)
 8010a32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010a34:	bf00      	nop
 8010a36:	bd80      	pop	{r7, pc}
 8010a38:	24000bc8 	.word	0x24000bc8
 8010a3c:	24000010 	.word	0x24000010
 8010a40:	24000bc4 	.word	0x24000bc4

08010a44 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	4603      	mov	r3, r0
 8010a4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8010a4e:	4b06      	ldr	r3, [pc, #24]	; (8010a68 <USER_initialize+0x24>)
 8010a50:	2201      	movs	r2, #1
 8010a52:	701a      	strb	r2, [r3, #0]
    return Stat;
 8010a54:	4b04      	ldr	r3, [pc, #16]	; (8010a68 <USER_initialize+0x24>)
 8010a56:	781b      	ldrb	r3, [r3, #0]
 8010a58:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	370c      	adds	r7, #12
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr
 8010a66:	bf00      	nop
 8010a68:	2400000d 	.word	0x2400000d

08010a6c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8010a6c:	b480      	push	{r7}
 8010a6e:	b083      	sub	sp, #12
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	4603      	mov	r3, r0
 8010a74:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8010a76:	4b06      	ldr	r3, [pc, #24]	; (8010a90 <USER_status+0x24>)
 8010a78:	2201      	movs	r2, #1
 8010a7a:	701a      	strb	r2, [r3, #0]
    return Stat;
 8010a7c:	4b04      	ldr	r3, [pc, #16]	; (8010a90 <USER_status+0x24>)
 8010a7e:	781b      	ldrb	r3, [r3, #0]
 8010a80:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	370c      	adds	r7, #12
 8010a86:	46bd      	mov	sp, r7
 8010a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8c:	4770      	bx	lr
 8010a8e:	bf00      	nop
 8010a90:	2400000d 	.word	0x2400000d

08010a94 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b085      	sub	sp, #20
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	60b9      	str	r1, [r7, #8]
 8010a9c:	607a      	str	r2, [r7, #4]
 8010a9e:	603b      	str	r3, [r7, #0]
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8010aa4:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3714      	adds	r7, #20
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab0:	4770      	bx	lr

08010ab2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010ab2:	b480      	push	{r7}
 8010ab4:	b085      	sub	sp, #20
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	607a      	str	r2, [r7, #4]
 8010abc:	603b      	str	r3, [r7, #0]
 8010abe:	4603      	mov	r3, r0
 8010ac0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8010ac2:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3714      	adds	r7, #20
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ace:	4770      	bx	lr

08010ad0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8010ad0:	b480      	push	{r7}
 8010ad2:	b085      	sub	sp, #20
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	603a      	str	r2, [r7, #0]
 8010ada:	71fb      	strb	r3, [r7, #7]
 8010adc:	460b      	mov	r3, r1
 8010ade:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8010ae0:	2301      	movs	r3, #1
 8010ae2:	73fb      	strb	r3, [r7, #15]
    return res;
 8010ae4:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3714      	adds	r7, #20
 8010aea:	46bd      	mov	sp, r7
 8010aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af0:	4770      	bx	lr
	...

08010af4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b084      	sub	sp, #16
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	460b      	mov	r3, r1
 8010afe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010b00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010b04:	f002 fd12 	bl	801352c <USBD_static_malloc>
 8010b08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d109      	bne.n	8010b24 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	32b0      	adds	r2, #176	; 0xb0
 8010b1a:	2100      	movs	r1, #0
 8010b1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010b20:	2302      	movs	r3, #2
 8010b22:	e0d4      	b.n	8010cce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010b24:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8010b28:	2100      	movs	r1, #0
 8010b2a:	68f8      	ldr	r0, [r7, #12]
 8010b2c:	f003 fd5b 	bl	80145e6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	32b0      	adds	r2, #176	; 0xb0
 8010b3a:	68f9      	ldr	r1, [r7, #12]
 8010b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	32b0      	adds	r2, #176	; 0xb0
 8010b4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	7c1b      	ldrb	r3, [r3, #16]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d138      	bne.n	8010bce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010b5c:	4b5e      	ldr	r3, [pc, #376]	; (8010cd8 <USBD_CDC_Init+0x1e4>)
 8010b5e:	7819      	ldrb	r1, [r3, #0]
 8010b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b64:	2202      	movs	r2, #2
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f002 fbbd 	bl	80132e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010b6c:	4b5a      	ldr	r3, [pc, #360]	; (8010cd8 <USBD_CDC_Init+0x1e4>)
 8010b6e:	781b      	ldrb	r3, [r3, #0]
 8010b70:	f003 020f 	and.w	r2, r3, #15
 8010b74:	6879      	ldr	r1, [r7, #4]
 8010b76:	4613      	mov	r3, r2
 8010b78:	009b      	lsls	r3, r3, #2
 8010b7a:	4413      	add	r3, r2
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	440b      	add	r3, r1
 8010b80:	3324      	adds	r3, #36	; 0x24
 8010b82:	2201      	movs	r2, #1
 8010b84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010b86:	4b55      	ldr	r3, [pc, #340]	; (8010cdc <USBD_CDC_Init+0x1e8>)
 8010b88:	7819      	ldrb	r1, [r3, #0]
 8010b8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b8e:	2202      	movs	r2, #2
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f002 fba8 	bl	80132e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010b96:	4b51      	ldr	r3, [pc, #324]	; (8010cdc <USBD_CDC_Init+0x1e8>)
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	f003 020f 	and.w	r2, r3, #15
 8010b9e:	6879      	ldr	r1, [r7, #4]
 8010ba0:	4613      	mov	r3, r2
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4413      	add	r3, r2
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	440b      	add	r3, r1
 8010baa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010bae:	2201      	movs	r2, #1
 8010bb0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010bb2:	4b4b      	ldr	r3, [pc, #300]	; (8010ce0 <USBD_CDC_Init+0x1ec>)
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	f003 020f 	and.w	r2, r3, #15
 8010bba:	6879      	ldr	r1, [r7, #4]
 8010bbc:	4613      	mov	r3, r2
 8010bbe:	009b      	lsls	r3, r3, #2
 8010bc0:	4413      	add	r3, r2
 8010bc2:	009b      	lsls	r3, r3, #2
 8010bc4:	440b      	add	r3, r1
 8010bc6:	3326      	adds	r3, #38	; 0x26
 8010bc8:	2210      	movs	r2, #16
 8010bca:	801a      	strh	r2, [r3, #0]
 8010bcc:	e035      	b.n	8010c3a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010bce:	4b42      	ldr	r3, [pc, #264]	; (8010cd8 <USBD_CDC_Init+0x1e4>)
 8010bd0:	7819      	ldrb	r1, [r3, #0]
 8010bd2:	2340      	movs	r3, #64	; 0x40
 8010bd4:	2202      	movs	r2, #2
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f002 fb85 	bl	80132e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010bdc:	4b3e      	ldr	r3, [pc, #248]	; (8010cd8 <USBD_CDC_Init+0x1e4>)
 8010bde:	781b      	ldrb	r3, [r3, #0]
 8010be0:	f003 020f 	and.w	r2, r3, #15
 8010be4:	6879      	ldr	r1, [r7, #4]
 8010be6:	4613      	mov	r3, r2
 8010be8:	009b      	lsls	r3, r3, #2
 8010bea:	4413      	add	r3, r2
 8010bec:	009b      	lsls	r3, r3, #2
 8010bee:	440b      	add	r3, r1
 8010bf0:	3324      	adds	r3, #36	; 0x24
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010bf6:	4b39      	ldr	r3, [pc, #228]	; (8010cdc <USBD_CDC_Init+0x1e8>)
 8010bf8:	7819      	ldrb	r1, [r3, #0]
 8010bfa:	2340      	movs	r3, #64	; 0x40
 8010bfc:	2202      	movs	r2, #2
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f002 fb71 	bl	80132e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010c04:	4b35      	ldr	r3, [pc, #212]	; (8010cdc <USBD_CDC_Init+0x1e8>)
 8010c06:	781b      	ldrb	r3, [r3, #0]
 8010c08:	f003 020f 	and.w	r2, r3, #15
 8010c0c:	6879      	ldr	r1, [r7, #4]
 8010c0e:	4613      	mov	r3, r2
 8010c10:	009b      	lsls	r3, r3, #2
 8010c12:	4413      	add	r3, r2
 8010c14:	009b      	lsls	r3, r3, #2
 8010c16:	440b      	add	r3, r1
 8010c18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010c1c:	2201      	movs	r2, #1
 8010c1e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010c20:	4b2f      	ldr	r3, [pc, #188]	; (8010ce0 <USBD_CDC_Init+0x1ec>)
 8010c22:	781b      	ldrb	r3, [r3, #0]
 8010c24:	f003 020f 	and.w	r2, r3, #15
 8010c28:	6879      	ldr	r1, [r7, #4]
 8010c2a:	4613      	mov	r3, r2
 8010c2c:	009b      	lsls	r3, r3, #2
 8010c2e:	4413      	add	r3, r2
 8010c30:	009b      	lsls	r3, r3, #2
 8010c32:	440b      	add	r3, r1
 8010c34:	3326      	adds	r3, #38	; 0x26
 8010c36:	2210      	movs	r2, #16
 8010c38:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010c3a:	4b29      	ldr	r3, [pc, #164]	; (8010ce0 <USBD_CDC_Init+0x1ec>)
 8010c3c:	7819      	ldrb	r1, [r3, #0]
 8010c3e:	2308      	movs	r3, #8
 8010c40:	2203      	movs	r2, #3
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f002 fb4f 	bl	80132e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010c48:	4b25      	ldr	r3, [pc, #148]	; (8010ce0 <USBD_CDC_Init+0x1ec>)
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	f003 020f 	and.w	r2, r3, #15
 8010c50:	6879      	ldr	r1, [r7, #4]
 8010c52:	4613      	mov	r3, r2
 8010c54:	009b      	lsls	r3, r3, #2
 8010c56:	4413      	add	r3, r2
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	440b      	add	r3, r1
 8010c5c:	3324      	adds	r3, #36	; 0x24
 8010c5e:	2201      	movs	r2, #1
 8010c60:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010c62:	68fb      	ldr	r3, [r7, #12]
 8010c64:	2200      	movs	r2, #0
 8010c66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	33b0      	adds	r3, #176	; 0xb0
 8010c74:	009b      	lsls	r3, r3, #2
 8010c76:	4413      	add	r3, r2
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	681b      	ldr	r3, [r3, #0]
 8010c7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	2200      	movs	r2, #0
 8010c82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d101      	bne.n	8010c9c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010c98:	2302      	movs	r3, #2
 8010c9a:	e018      	b.n	8010cce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	7c1b      	ldrb	r3, [r3, #16]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10a      	bne.n	8010cba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010ca4:	4b0d      	ldr	r3, [pc, #52]	; (8010cdc <USBD_CDC_Init+0x1e8>)
 8010ca6:	7819      	ldrb	r1, [r3, #0]
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f002 fc06 	bl	80134c4 <USBD_LL_PrepareReceive>
 8010cb8:	e008      	b.n	8010ccc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010cba:	4b08      	ldr	r3, [pc, #32]	; (8010cdc <USBD_CDC_Init+0x1e8>)
 8010cbc:	7819      	ldrb	r1, [r3, #0]
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010cc4:	2340      	movs	r3, #64	; 0x40
 8010cc6:	6878      	ldr	r0, [r7, #4]
 8010cc8:	f002 fbfc 	bl	80134c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010ccc:	2300      	movs	r3, #0
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3710      	adds	r7, #16
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	240000ab 	.word	0x240000ab
 8010cdc:	240000ac 	.word	0x240000ac
 8010ce0:	240000ad 	.word	0x240000ad

08010ce4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b082      	sub	sp, #8
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	460b      	mov	r3, r1
 8010cee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010cf0:	4b3a      	ldr	r3, [pc, #232]	; (8010ddc <USBD_CDC_DeInit+0xf8>)
 8010cf2:	781b      	ldrb	r3, [r3, #0]
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	6878      	ldr	r0, [r7, #4]
 8010cf8:	f002 fb1b 	bl	8013332 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010cfc:	4b37      	ldr	r3, [pc, #220]	; (8010ddc <USBD_CDC_DeInit+0xf8>)
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	f003 020f 	and.w	r2, r3, #15
 8010d04:	6879      	ldr	r1, [r7, #4]
 8010d06:	4613      	mov	r3, r2
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	4413      	add	r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	440b      	add	r3, r1
 8010d10:	3324      	adds	r3, #36	; 0x24
 8010d12:	2200      	movs	r2, #0
 8010d14:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010d16:	4b32      	ldr	r3, [pc, #200]	; (8010de0 <USBD_CDC_DeInit+0xfc>)
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	6878      	ldr	r0, [r7, #4]
 8010d1e:	f002 fb08 	bl	8013332 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010d22:	4b2f      	ldr	r3, [pc, #188]	; (8010de0 <USBD_CDC_DeInit+0xfc>)
 8010d24:	781b      	ldrb	r3, [r3, #0]
 8010d26:	f003 020f 	and.w	r2, r3, #15
 8010d2a:	6879      	ldr	r1, [r7, #4]
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	009b      	lsls	r3, r3, #2
 8010d30:	4413      	add	r3, r2
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	440b      	add	r3, r1
 8010d36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010d3e:	4b29      	ldr	r3, [pc, #164]	; (8010de4 <USBD_CDC_DeInit+0x100>)
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	4619      	mov	r1, r3
 8010d44:	6878      	ldr	r0, [r7, #4]
 8010d46:	f002 faf4 	bl	8013332 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010d4a:	4b26      	ldr	r3, [pc, #152]	; (8010de4 <USBD_CDC_DeInit+0x100>)
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	f003 020f 	and.w	r2, r3, #15
 8010d52:	6879      	ldr	r1, [r7, #4]
 8010d54:	4613      	mov	r3, r2
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	4413      	add	r3, r2
 8010d5a:	009b      	lsls	r3, r3, #2
 8010d5c:	440b      	add	r3, r1
 8010d5e:	3324      	adds	r3, #36	; 0x24
 8010d60:	2200      	movs	r2, #0
 8010d62:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010d64:	4b1f      	ldr	r3, [pc, #124]	; (8010de4 <USBD_CDC_DeInit+0x100>)
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	f003 020f 	and.w	r2, r3, #15
 8010d6c:	6879      	ldr	r1, [r7, #4]
 8010d6e:	4613      	mov	r3, r2
 8010d70:	009b      	lsls	r3, r3, #2
 8010d72:	4413      	add	r3, r2
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	440b      	add	r3, r1
 8010d78:	3326      	adds	r3, #38	; 0x26
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	32b0      	adds	r2, #176	; 0xb0
 8010d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d01f      	beq.n	8010dd0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	33b0      	adds	r3, #176	; 0xb0
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4413      	add	r3, r2
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	685b      	ldr	r3, [r3, #4]
 8010da2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	32b0      	adds	r2, #176	; 0xb0
 8010dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010db2:	4618      	mov	r0, r3
 8010db4:	f002 fbc8 	bl	8013548 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	32b0      	adds	r2, #176	; 0xb0
 8010dc2:	2100      	movs	r1, #0
 8010dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010dd0:	2300      	movs	r3, #0
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	3708      	adds	r7, #8
 8010dd6:	46bd      	mov	sp, r7
 8010dd8:	bd80      	pop	{r7, pc}
 8010dda:	bf00      	nop
 8010ddc:	240000ab 	.word	0x240000ab
 8010de0:	240000ac 	.word	0x240000ac
 8010de4:	240000ad 	.word	0x240000ad

08010de8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010de8:	b580      	push	{r7, lr}
 8010dea:	b086      	sub	sp, #24
 8010dec:	af00      	add	r7, sp, #0
 8010dee:	6078      	str	r0, [r7, #4]
 8010df0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	32b0      	adds	r2, #176	; 0xb0
 8010dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010e02:	2300      	movs	r3, #0
 8010e04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010e06:	2300      	movs	r3, #0
 8010e08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d101      	bne.n	8010e18 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010e14:	2303      	movs	r3, #3
 8010e16:	e0bf      	b.n	8010f98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e18:	683b      	ldr	r3, [r7, #0]
 8010e1a:	781b      	ldrb	r3, [r3, #0]
 8010e1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d050      	beq.n	8010ec6 <USBD_CDC_Setup+0xde>
 8010e24:	2b20      	cmp	r3, #32
 8010e26:	f040 80af 	bne.w	8010f88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	88db      	ldrh	r3, [r3, #6]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d03a      	beq.n	8010ea8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	b25b      	sxtb	r3, r3
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	da1b      	bge.n	8010e74 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	33b0      	adds	r3, #176	; 0xb0
 8010e46:	009b      	lsls	r3, r3, #2
 8010e48:	4413      	add	r3, r2
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	689b      	ldr	r3, [r3, #8]
 8010e4e:	683a      	ldr	r2, [r7, #0]
 8010e50:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010e52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010e54:	683a      	ldr	r2, [r7, #0]
 8010e56:	88d2      	ldrh	r2, [r2, #6]
 8010e58:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010e5a:	683b      	ldr	r3, [r7, #0]
 8010e5c:	88db      	ldrh	r3, [r3, #6]
 8010e5e:	2b07      	cmp	r3, #7
 8010e60:	bf28      	it	cs
 8010e62:	2307      	movcs	r3, #7
 8010e64:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	89fa      	ldrh	r2, [r7, #14]
 8010e6a:	4619      	mov	r1, r3
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f001 fdb3 	bl	80129d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010e72:	e090      	b.n	8010f96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	785a      	ldrb	r2, [r3, #1]
 8010e78:	693b      	ldr	r3, [r7, #16]
 8010e7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010e7e:	683b      	ldr	r3, [r7, #0]
 8010e80:	88db      	ldrh	r3, [r3, #6]
 8010e82:	2b3f      	cmp	r3, #63	; 0x3f
 8010e84:	d803      	bhi.n	8010e8e <USBD_CDC_Setup+0xa6>
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	88db      	ldrh	r3, [r3, #6]
 8010e8a:	b2da      	uxtb	r2, r3
 8010e8c:	e000      	b.n	8010e90 <USBD_CDC_Setup+0xa8>
 8010e8e:	2240      	movs	r2, #64	; 0x40
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010e96:	6939      	ldr	r1, [r7, #16]
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8010e9e:	461a      	mov	r2, r3
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f001 fdc5 	bl	8012a30 <USBD_CtlPrepareRx>
      break;
 8010ea6:	e076      	b.n	8010f96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	33b0      	adds	r3, #176	; 0xb0
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	4413      	add	r3, r2
 8010eb6:	685b      	ldr	r3, [r3, #4]
 8010eb8:	689b      	ldr	r3, [r3, #8]
 8010eba:	683a      	ldr	r2, [r7, #0]
 8010ebc:	7850      	ldrb	r0, [r2, #1]
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	6839      	ldr	r1, [r7, #0]
 8010ec2:	4798      	blx	r3
      break;
 8010ec4:	e067      	b.n	8010f96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	785b      	ldrb	r3, [r3, #1]
 8010eca:	2b0b      	cmp	r3, #11
 8010ecc:	d851      	bhi.n	8010f72 <USBD_CDC_Setup+0x18a>
 8010ece:	a201      	add	r2, pc, #4	; (adr r2, 8010ed4 <USBD_CDC_Setup+0xec>)
 8010ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed4:	08010f05 	.word	0x08010f05
 8010ed8:	08010f81 	.word	0x08010f81
 8010edc:	08010f73 	.word	0x08010f73
 8010ee0:	08010f73 	.word	0x08010f73
 8010ee4:	08010f73 	.word	0x08010f73
 8010ee8:	08010f73 	.word	0x08010f73
 8010eec:	08010f73 	.word	0x08010f73
 8010ef0:	08010f73 	.word	0x08010f73
 8010ef4:	08010f73 	.word	0x08010f73
 8010ef8:	08010f73 	.word	0x08010f73
 8010efc:	08010f2f 	.word	0x08010f2f
 8010f00:	08010f59 	.word	0x08010f59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	2b03      	cmp	r3, #3
 8010f0e:	d107      	bne.n	8010f20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010f10:	f107 030a 	add.w	r3, r7, #10
 8010f14:	2202      	movs	r2, #2
 8010f16:	4619      	mov	r1, r3
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f001 fd5d 	bl	80129d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010f1e:	e032      	b.n	8010f86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010f20:	6839      	ldr	r1, [r7, #0]
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f001 fce7 	bl	80128f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010f28:	2303      	movs	r3, #3
 8010f2a:	75fb      	strb	r3, [r7, #23]
          break;
 8010f2c:	e02b      	b.n	8010f86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f34:	b2db      	uxtb	r3, r3
 8010f36:	2b03      	cmp	r3, #3
 8010f38:	d107      	bne.n	8010f4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010f3a:	f107 030d 	add.w	r3, r7, #13
 8010f3e:	2201      	movs	r2, #1
 8010f40:	4619      	mov	r1, r3
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f001 fd48 	bl	80129d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010f48:	e01d      	b.n	8010f86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010f4a:	6839      	ldr	r1, [r7, #0]
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f001 fcd2 	bl	80128f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010f52:	2303      	movs	r3, #3
 8010f54:	75fb      	strb	r3, [r7, #23]
          break;
 8010f56:	e016      	b.n	8010f86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	2b03      	cmp	r3, #3
 8010f62:	d00f      	beq.n	8010f84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010f64:	6839      	ldr	r1, [r7, #0]
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f001 fcc5 	bl	80128f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8010f6c:	2303      	movs	r3, #3
 8010f6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010f70:	e008      	b.n	8010f84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010f72:	6839      	ldr	r1, [r7, #0]
 8010f74:	6878      	ldr	r0, [r7, #4]
 8010f76:	f001 fcbe 	bl	80128f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8010f7a:	2303      	movs	r3, #3
 8010f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8010f7e:	e002      	b.n	8010f86 <USBD_CDC_Setup+0x19e>
          break;
 8010f80:	bf00      	nop
 8010f82:	e008      	b.n	8010f96 <USBD_CDC_Setup+0x1ae>
          break;
 8010f84:	bf00      	nop
      }
      break;
 8010f86:	e006      	b.n	8010f96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010f88:	6839      	ldr	r1, [r7, #0]
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f001 fcb3 	bl	80128f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8010f90:	2303      	movs	r3, #3
 8010f92:	75fb      	strb	r3, [r7, #23]
      break;
 8010f94:	bf00      	nop
  }

  return (uint8_t)ret;
 8010f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3718      	adds	r7, #24
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	460b      	mov	r3, r1
 8010faa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8010fb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	32b0      	adds	r2, #176	; 0xb0
 8010fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d101      	bne.n	8010fca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010fc6:	2303      	movs	r3, #3
 8010fc8:	e065      	b.n	8011096 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	32b0      	adds	r2, #176	; 0xb0
 8010fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010fd8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010fda:	78fb      	ldrb	r3, [r7, #3]
 8010fdc:	f003 020f 	and.w	r2, r3, #15
 8010fe0:	6879      	ldr	r1, [r7, #4]
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	009b      	lsls	r3, r3, #2
 8010fe6:	4413      	add	r3, r2
 8010fe8:	009b      	lsls	r3, r3, #2
 8010fea:	440b      	add	r3, r1
 8010fec:	3318      	adds	r3, #24
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d02f      	beq.n	8011054 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010ff4:	78fb      	ldrb	r3, [r7, #3]
 8010ff6:	f003 020f 	and.w	r2, r3, #15
 8010ffa:	6879      	ldr	r1, [r7, #4]
 8010ffc:	4613      	mov	r3, r2
 8010ffe:	009b      	lsls	r3, r3, #2
 8011000:	4413      	add	r3, r2
 8011002:	009b      	lsls	r3, r3, #2
 8011004:	440b      	add	r3, r1
 8011006:	3318      	adds	r3, #24
 8011008:	681a      	ldr	r2, [r3, #0]
 801100a:	78fb      	ldrb	r3, [r7, #3]
 801100c:	f003 010f 	and.w	r1, r3, #15
 8011010:	68f8      	ldr	r0, [r7, #12]
 8011012:	460b      	mov	r3, r1
 8011014:	00db      	lsls	r3, r3, #3
 8011016:	440b      	add	r3, r1
 8011018:	009b      	lsls	r3, r3, #2
 801101a:	4403      	add	r3, r0
 801101c:	3344      	adds	r3, #68	; 0x44
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	fbb2 f1f3 	udiv	r1, r2, r3
 8011024:	fb01 f303 	mul.w	r3, r1, r3
 8011028:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801102a:	2b00      	cmp	r3, #0
 801102c:	d112      	bne.n	8011054 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801102e:	78fb      	ldrb	r3, [r7, #3]
 8011030:	f003 020f 	and.w	r2, r3, #15
 8011034:	6879      	ldr	r1, [r7, #4]
 8011036:	4613      	mov	r3, r2
 8011038:	009b      	lsls	r3, r3, #2
 801103a:	4413      	add	r3, r2
 801103c:	009b      	lsls	r3, r3, #2
 801103e:	440b      	add	r3, r1
 8011040:	3318      	adds	r3, #24
 8011042:	2200      	movs	r2, #0
 8011044:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011046:	78f9      	ldrb	r1, [r7, #3]
 8011048:	2300      	movs	r3, #0
 801104a:	2200      	movs	r2, #0
 801104c:	6878      	ldr	r0, [r7, #4]
 801104e:	f002 fa18 	bl	8013482 <USBD_LL_Transmit>
 8011052:	e01f      	b.n	8011094 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	2200      	movs	r2, #0
 8011058:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011062:	687a      	ldr	r2, [r7, #4]
 8011064:	33b0      	adds	r3, #176	; 0xb0
 8011066:	009b      	lsls	r3, r3, #2
 8011068:	4413      	add	r3, r2
 801106a:	685b      	ldr	r3, [r3, #4]
 801106c:	691b      	ldr	r3, [r3, #16]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d010      	beq.n	8011094 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	33b0      	adds	r3, #176	; 0xb0
 801107c:	009b      	lsls	r3, r3, #2
 801107e:	4413      	add	r3, r2
 8011080:	685b      	ldr	r3, [r3, #4]
 8011082:	691b      	ldr	r3, [r3, #16]
 8011084:	68ba      	ldr	r2, [r7, #8]
 8011086:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801108a:	68ba      	ldr	r2, [r7, #8]
 801108c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011090:	78fa      	ldrb	r2, [r7, #3]
 8011092:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8011094:	2300      	movs	r3, #0
}
 8011096:	4618      	mov	r0, r3
 8011098:	3710      	adds	r7, #16
 801109a:	46bd      	mov	sp, r7
 801109c:	bd80      	pop	{r7, pc}

0801109e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801109e:	b580      	push	{r7, lr}
 80110a0:	b084      	sub	sp, #16
 80110a2:	af00      	add	r7, sp, #0
 80110a4:	6078      	str	r0, [r7, #4]
 80110a6:	460b      	mov	r3, r1
 80110a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	32b0      	adds	r2, #176	; 0xb0
 80110b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	32b0      	adds	r2, #176	; 0xb0
 80110c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d101      	bne.n	80110d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80110cc:	2303      	movs	r3, #3
 80110ce:	e01a      	b.n	8011106 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80110d0:	78fb      	ldrb	r3, [r7, #3]
 80110d2:	4619      	mov	r1, r3
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f002 fa16 	bl	8013506 <USBD_LL_GetRxDataSize>
 80110da:	4602      	mov	r2, r0
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	33b0      	adds	r3, #176	; 0xb0
 80110ec:	009b      	lsls	r3, r3, #2
 80110ee:	4413      	add	r3, r2
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	68fa      	ldr	r2, [r7, #12]
 80110f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80110fa:	68fa      	ldr	r2, [r7, #12]
 80110fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011100:	4611      	mov	r1, r2
 8011102:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011104:	2300      	movs	r3, #0
}
 8011106:	4618      	mov	r0, r3
 8011108:	3710      	adds	r7, #16
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801110e:	b580      	push	{r7, lr}
 8011110:	b084      	sub	sp, #16
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	32b0      	adds	r2, #176	; 0xb0
 8011120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011124:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d101      	bne.n	8011130 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801112c:	2303      	movs	r3, #3
 801112e:	e025      	b.n	801117c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011136:	687a      	ldr	r2, [r7, #4]
 8011138:	33b0      	adds	r3, #176	; 0xb0
 801113a:	009b      	lsls	r3, r3, #2
 801113c:	4413      	add	r3, r2
 801113e:	685b      	ldr	r3, [r3, #4]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d01a      	beq.n	801117a <USBD_CDC_EP0_RxReady+0x6c>
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801114a:	2bff      	cmp	r3, #255	; 0xff
 801114c:	d015      	beq.n	801117a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011154:	687a      	ldr	r2, [r7, #4]
 8011156:	33b0      	adds	r3, #176	; 0xb0
 8011158:	009b      	lsls	r3, r3, #2
 801115a:	4413      	add	r3, r2
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	689b      	ldr	r3, [r3, #8]
 8011160:	68fa      	ldr	r2, [r7, #12]
 8011162:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8011166:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011168:	68fa      	ldr	r2, [r7, #12]
 801116a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801116e:	b292      	uxth	r2, r2
 8011170:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	22ff      	movs	r2, #255	; 0xff
 8011176:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 801117a:	2300      	movs	r3, #0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3710      	adds	r7, #16
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b086      	sub	sp, #24
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801118c:	2182      	movs	r1, #130	; 0x82
 801118e:	4818      	ldr	r0, [pc, #96]	; (80111f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011190:	f000 fd4f 	bl	8011c32 <USBD_GetEpDesc>
 8011194:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011196:	2101      	movs	r1, #1
 8011198:	4815      	ldr	r0, [pc, #84]	; (80111f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801119a:	f000 fd4a 	bl	8011c32 <USBD_GetEpDesc>
 801119e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80111a0:	2181      	movs	r1, #129	; 0x81
 80111a2:	4813      	ldr	r0, [pc, #76]	; (80111f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80111a4:	f000 fd45 	bl	8011c32 <USBD_GetEpDesc>
 80111a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d002      	beq.n	80111b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	2210      	movs	r2, #16
 80111b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d006      	beq.n	80111ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80111bc:	693b      	ldr	r3, [r7, #16]
 80111be:	2200      	movs	r2, #0
 80111c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80111c4:	711a      	strb	r2, [r3, #4]
 80111c6:	2200      	movs	r2, #0
 80111c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d006      	beq.n	80111de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	2200      	movs	r2, #0
 80111d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80111d8:	711a      	strb	r2, [r3, #4]
 80111da:	2200      	movs	r2, #0
 80111dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2243      	movs	r2, #67	; 0x43
 80111e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80111e4:	4b02      	ldr	r3, [pc, #8]	; (80111f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3718      	adds	r7, #24
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	24000068 	.word	0x24000068

080111f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b086      	sub	sp, #24
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80111fc:	2182      	movs	r1, #130	; 0x82
 80111fe:	4818      	ldr	r0, [pc, #96]	; (8011260 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011200:	f000 fd17 	bl	8011c32 <USBD_GetEpDesc>
 8011204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011206:	2101      	movs	r1, #1
 8011208:	4815      	ldr	r0, [pc, #84]	; (8011260 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801120a:	f000 fd12 	bl	8011c32 <USBD_GetEpDesc>
 801120e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011210:	2181      	movs	r1, #129	; 0x81
 8011212:	4813      	ldr	r0, [pc, #76]	; (8011260 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011214:	f000 fd0d 	bl	8011c32 <USBD_GetEpDesc>
 8011218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d002      	beq.n	8011226 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	2210      	movs	r2, #16
 8011224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d006      	beq.n	801123a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801122c:	693b      	ldr	r3, [r7, #16]
 801122e:	2200      	movs	r2, #0
 8011230:	711a      	strb	r2, [r3, #4]
 8011232:	2200      	movs	r2, #0
 8011234:	f042 0202 	orr.w	r2, r2, #2
 8011238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d006      	beq.n	801124e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2200      	movs	r2, #0
 8011244:	711a      	strb	r2, [r3, #4]
 8011246:	2200      	movs	r2, #0
 8011248:	f042 0202 	orr.w	r2, r2, #2
 801124c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	2243      	movs	r2, #67	; 0x43
 8011252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8011254:	4b02      	ldr	r3, [pc, #8]	; (8011260 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8011256:	4618      	mov	r0, r3
 8011258:	3718      	adds	r7, #24
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	24000068 	.word	0x24000068

08011264 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b086      	sub	sp, #24
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801126c:	2182      	movs	r1, #130	; 0x82
 801126e:	4818      	ldr	r0, [pc, #96]	; (80112d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011270:	f000 fcdf 	bl	8011c32 <USBD_GetEpDesc>
 8011274:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8011276:	2101      	movs	r1, #1
 8011278:	4815      	ldr	r0, [pc, #84]	; (80112d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801127a:	f000 fcda 	bl	8011c32 <USBD_GetEpDesc>
 801127e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011280:	2181      	movs	r1, #129	; 0x81
 8011282:	4813      	ldr	r0, [pc, #76]	; (80112d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011284:	f000 fcd5 	bl	8011c32 <USBD_GetEpDesc>
 8011288:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d002      	beq.n	8011296 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011290:	697b      	ldr	r3, [r7, #20]
 8011292:	2210      	movs	r2, #16
 8011294:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d006      	beq.n	80112aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	2200      	movs	r2, #0
 80112a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80112a4:	711a      	strb	r2, [r3, #4]
 80112a6:	2200      	movs	r2, #0
 80112a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d006      	beq.n	80112be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	2200      	movs	r2, #0
 80112b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80112b8:	711a      	strb	r2, [r3, #4]
 80112ba:	2200      	movs	r2, #0
 80112bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2243      	movs	r2, #67	; 0x43
 80112c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80112c4:	4b02      	ldr	r3, [pc, #8]	; (80112d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80112c6:	4618      	mov	r0, r3
 80112c8:	3718      	adds	r7, #24
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	24000068 	.word	0x24000068

080112d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	220a      	movs	r2, #10
 80112e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80112e2:	4b03      	ldr	r3, [pc, #12]	; (80112f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	370c      	adds	r7, #12
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr
 80112f0:	24000024 	.word	0x24000024

080112f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b083      	sub	sp, #12
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
 80112fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d101      	bne.n	8011308 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011304:	2303      	movs	r3, #3
 8011306:	e009      	b.n	801131c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801130e:	687a      	ldr	r2, [r7, #4]
 8011310:	33b0      	adds	r3, #176	; 0xb0
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	4413      	add	r3, r2
 8011316:	683a      	ldr	r2, [r7, #0]
 8011318:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801131a:	2300      	movs	r3, #0
}
 801131c:	4618      	mov	r0, r3
 801131e:	370c      	adds	r7, #12
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr

08011328 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011328:	b480      	push	{r7}
 801132a:	b087      	sub	sp, #28
 801132c:	af00      	add	r7, sp, #0
 801132e:	60f8      	str	r0, [r7, #12]
 8011330:	60b9      	str	r1, [r7, #8]
 8011332:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	32b0      	adds	r2, #176	; 0xb0
 801133e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011342:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011344:	697b      	ldr	r3, [r7, #20]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d101      	bne.n	801134e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801134a:	2303      	movs	r3, #3
 801134c:	e008      	b.n	8011360 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	68ba      	ldr	r2, [r7, #8]
 8011352:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	687a      	ldr	r2, [r7, #4]
 801135a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801135e:	2300      	movs	r3, #0
}
 8011360:	4618      	mov	r0, r3
 8011362:	371c      	adds	r7, #28
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr

0801136c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801136c:	b480      	push	{r7}
 801136e:	b085      	sub	sp, #20
 8011370:	af00      	add	r7, sp, #0
 8011372:	6078      	str	r0, [r7, #4]
 8011374:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	32b0      	adds	r2, #176	; 0xb0
 8011380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011384:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d101      	bne.n	8011390 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801138c:	2303      	movs	r3, #3
 801138e:	e004      	b.n	801139a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	683a      	ldr	r2, [r7, #0]
 8011394:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011398:	2300      	movs	r3, #0
}
 801139a:	4618      	mov	r0, r3
 801139c:	3714      	adds	r7, #20
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr
	...

080113a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b084      	sub	sp, #16
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	32b0      	adds	r2, #176	; 0xb0
 80113ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80113c0:	2301      	movs	r3, #1
 80113c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80113c4:	68bb      	ldr	r3, [r7, #8]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d101      	bne.n	80113ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80113ca:	2303      	movs	r3, #3
 80113cc:	e025      	b.n	801141a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d11f      	bne.n	8011418 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80113d8:	68bb      	ldr	r3, [r7, #8]
 80113da:	2201      	movs	r2, #1
 80113dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80113e0:	4b10      	ldr	r3, [pc, #64]	; (8011424 <USBD_CDC_TransmitPacket+0x7c>)
 80113e2:	781b      	ldrb	r3, [r3, #0]
 80113e4:	f003 020f 	and.w	r2, r3, #15
 80113e8:	68bb      	ldr	r3, [r7, #8]
 80113ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	4613      	mov	r3, r2
 80113f2:	009b      	lsls	r3, r3, #2
 80113f4:	4413      	add	r3, r2
 80113f6:	009b      	lsls	r3, r3, #2
 80113f8:	4403      	add	r3, r0
 80113fa:	3318      	adds	r3, #24
 80113fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80113fe:	4b09      	ldr	r3, [pc, #36]	; (8011424 <USBD_CDC_TransmitPacket+0x7c>)
 8011400:	7819      	ldrb	r1, [r3, #0]
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011408:	68bb      	ldr	r3, [r7, #8]
 801140a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f002 f837 	bl	8013482 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011414:	2300      	movs	r3, #0
 8011416:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011418:	7bfb      	ldrb	r3, [r7, #15]
}
 801141a:	4618      	mov	r0, r3
 801141c:	3710      	adds	r7, #16
 801141e:	46bd      	mov	sp, r7
 8011420:	bd80      	pop	{r7, pc}
 8011422:	bf00      	nop
 8011424:	240000ab 	.word	0x240000ab

08011428 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b084      	sub	sp, #16
 801142c:	af00      	add	r7, sp, #0
 801142e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	32b0      	adds	r2, #176	; 0xb0
 801143a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801143e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	32b0      	adds	r2, #176	; 0xb0
 801144a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011452:	2303      	movs	r3, #3
 8011454:	e018      	b.n	8011488 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	7c1b      	ldrb	r3, [r3, #16]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d10a      	bne.n	8011474 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801145e:	4b0c      	ldr	r3, [pc, #48]	; (8011490 <USBD_CDC_ReceivePacket+0x68>)
 8011460:	7819      	ldrb	r1, [r3, #0]
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011468:	f44f 7300 	mov.w	r3, #512	; 0x200
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f002 f829 	bl	80134c4 <USBD_LL_PrepareReceive>
 8011472:	e008      	b.n	8011486 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011474:	4b06      	ldr	r3, [pc, #24]	; (8011490 <USBD_CDC_ReceivePacket+0x68>)
 8011476:	7819      	ldrb	r1, [r3, #0]
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801147e:	2340      	movs	r3, #64	; 0x40
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f002 f81f 	bl	80134c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011486:	2300      	movs	r3, #0
}
 8011488:	4618      	mov	r0, r3
 801148a:	3710      	adds	r7, #16
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	240000ac 	.word	0x240000ac

08011494 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b086      	sub	sp, #24
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	4613      	mov	r3, r2
 80114a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d101      	bne.n	80114ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80114a8:	2303      	movs	r3, #3
 80114aa:	e01f      	b.n	80114ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2200      	movs	r2, #0
 80114b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	2200      	movs	r2, #0
 80114b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	2200      	movs	r2, #0
 80114c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d003      	beq.n	80114d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	68ba      	ldr	r2, [r7, #8]
 80114ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2201      	movs	r2, #1
 80114d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	79fa      	ldrb	r2, [r7, #7]
 80114de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f001 fe93 	bl	801320c <USBD_LL_Init>
 80114e6:	4603      	mov	r3, r0
 80114e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80114ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3718      	adds	r7, #24
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b084      	sub	sp, #16
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
 80114fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80114fe:	2300      	movs	r3, #0
 8011500:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d101      	bne.n	801150c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011508:	2303      	movs	r3, #3
 801150a:	e025      	b.n	8011558 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	683a      	ldr	r2, [r7, #0]
 8011510:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	32ae      	adds	r2, #174	; 0xae
 801151e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011524:	2b00      	cmp	r3, #0
 8011526:	d00f      	beq.n	8011548 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	32ae      	adds	r2, #174	; 0xae
 8011532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011538:	f107 020e 	add.w	r2, r7, #14
 801153c:	4610      	mov	r0, r2
 801153e:	4798      	blx	r3
 8011540:	4602      	mov	r2, r0
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801154e:	1c5a      	adds	r2, r3, #1
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8011556:	2300      	movs	r3, #0
}
 8011558:	4618      	mov	r0, r3
 801155a:	3710      	adds	r7, #16
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}

08011560 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011568:	6878      	ldr	r0, [r7, #4]
 801156a:	f001 fea1 	bl	80132b0 <USBD_LL_Start>
 801156e:	4603      	mov	r3, r0
}
 8011570:	4618      	mov	r0, r3
 8011572:	3708      	adds	r7, #8
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}

08011578 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011578:	b480      	push	{r7}
 801157a:	b083      	sub	sp, #12
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011580:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011582:	4618      	mov	r0, r3
 8011584:	370c      	adds	r7, #12
 8011586:	46bd      	mov	sp, r7
 8011588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158c:	4770      	bx	lr

0801158e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801158e:	b580      	push	{r7, lr}
 8011590:	b084      	sub	sp, #16
 8011592:	af00      	add	r7, sp, #0
 8011594:	6078      	str	r0, [r7, #4]
 8011596:	460b      	mov	r3, r1
 8011598:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801159a:	2300      	movs	r3, #0
 801159c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d009      	beq.n	80115bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	78fa      	ldrb	r2, [r7, #3]
 80115b2:	4611      	mov	r1, r2
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	4798      	blx	r3
 80115b8:	4603      	mov	r3, r0
 80115ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80115bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3710      	adds	r7, #16
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b084      	sub	sp, #16
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	460b      	mov	r3, r1
 80115d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80115d2:	2300      	movs	r3, #0
 80115d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80115dc:	685b      	ldr	r3, [r3, #4]
 80115de:	78fa      	ldrb	r2, [r7, #3]
 80115e0:	4611      	mov	r1, r2
 80115e2:	6878      	ldr	r0, [r7, #4]
 80115e4:	4798      	blx	r3
 80115e6:	4603      	mov	r3, r0
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d001      	beq.n	80115f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80115ec:	2303      	movs	r3, #3
 80115ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80115f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80115f2:	4618      	mov	r0, r3
 80115f4:	3710      	adds	r7, #16
 80115f6:	46bd      	mov	sp, r7
 80115f8:	bd80      	pop	{r7, pc}

080115fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80115fa:	b580      	push	{r7, lr}
 80115fc:	b084      	sub	sp, #16
 80115fe:	af00      	add	r7, sp, #0
 8011600:	6078      	str	r0, [r7, #4]
 8011602:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801160a:	6839      	ldr	r1, [r7, #0]
 801160c:	4618      	mov	r0, r3
 801160e:	f001 f938 	bl	8012882 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	2201      	movs	r2, #1
 8011616:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011620:	461a      	mov	r2, r3
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801162e:	f003 031f 	and.w	r3, r3, #31
 8011632:	2b02      	cmp	r3, #2
 8011634:	d01a      	beq.n	801166c <USBD_LL_SetupStage+0x72>
 8011636:	2b02      	cmp	r3, #2
 8011638:	d822      	bhi.n	8011680 <USBD_LL_SetupStage+0x86>
 801163a:	2b00      	cmp	r3, #0
 801163c:	d002      	beq.n	8011644 <USBD_LL_SetupStage+0x4a>
 801163e:	2b01      	cmp	r3, #1
 8011640:	d00a      	beq.n	8011658 <USBD_LL_SetupStage+0x5e>
 8011642:	e01d      	b.n	8011680 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801164a:	4619      	mov	r1, r3
 801164c:	6878      	ldr	r0, [r7, #4]
 801164e:	f000 fb65 	bl	8011d1c <USBD_StdDevReq>
 8011652:	4603      	mov	r3, r0
 8011654:	73fb      	strb	r3, [r7, #15]
      break;
 8011656:	e020      	b.n	801169a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801165e:	4619      	mov	r1, r3
 8011660:	6878      	ldr	r0, [r7, #4]
 8011662:	f000 fbcd 	bl	8011e00 <USBD_StdItfReq>
 8011666:	4603      	mov	r3, r0
 8011668:	73fb      	strb	r3, [r7, #15]
      break;
 801166a:	e016      	b.n	801169a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011672:	4619      	mov	r1, r3
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f000 fc2f 	bl	8011ed8 <USBD_StdEPReq>
 801167a:	4603      	mov	r3, r0
 801167c:	73fb      	strb	r3, [r7, #15]
      break;
 801167e:	e00c      	b.n	801169a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011686:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801168a:	b2db      	uxtb	r3, r3
 801168c:	4619      	mov	r1, r3
 801168e:	6878      	ldr	r0, [r7, #4]
 8011690:	f001 fe6e 	bl	8013370 <USBD_LL_StallEP>
 8011694:	4603      	mov	r3, r0
 8011696:	73fb      	strb	r3, [r7, #15]
      break;
 8011698:	bf00      	nop
  }

  return ret;
 801169a:	7bfb      	ldrb	r3, [r7, #15]
}
 801169c:	4618      	mov	r0, r3
 801169e:	3710      	adds	r7, #16
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b086      	sub	sp, #24
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	60f8      	str	r0, [r7, #12]
 80116ac:	460b      	mov	r3, r1
 80116ae:	607a      	str	r2, [r7, #4]
 80116b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80116b2:	2300      	movs	r3, #0
 80116b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80116b6:	7afb      	ldrb	r3, [r7, #11]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d16e      	bne.n	801179a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80116c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80116ca:	2b03      	cmp	r3, #3
 80116cc:	f040 8098 	bne.w	8011800 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80116d0:	693b      	ldr	r3, [r7, #16]
 80116d2:	689a      	ldr	r2, [r3, #8]
 80116d4:	693b      	ldr	r3, [r7, #16]
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	429a      	cmp	r2, r3
 80116da:	d913      	bls.n	8011704 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80116dc:	693b      	ldr	r3, [r7, #16]
 80116de:	689a      	ldr	r2, [r3, #8]
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	1ad2      	subs	r2, r2, r3
 80116e6:	693b      	ldr	r3, [r7, #16]
 80116e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	68da      	ldr	r2, [r3, #12]
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	689b      	ldr	r3, [r3, #8]
 80116f2:	4293      	cmp	r3, r2
 80116f4:	bf28      	it	cs
 80116f6:	4613      	movcs	r3, r2
 80116f8:	461a      	mov	r2, r3
 80116fa:	6879      	ldr	r1, [r7, #4]
 80116fc:	68f8      	ldr	r0, [r7, #12]
 80116fe:	f001 f9b4 	bl	8012a6a <USBD_CtlContinueRx>
 8011702:	e07d      	b.n	8011800 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801170a:	f003 031f 	and.w	r3, r3, #31
 801170e:	2b02      	cmp	r3, #2
 8011710:	d014      	beq.n	801173c <USBD_LL_DataOutStage+0x98>
 8011712:	2b02      	cmp	r3, #2
 8011714:	d81d      	bhi.n	8011752 <USBD_LL_DataOutStage+0xae>
 8011716:	2b00      	cmp	r3, #0
 8011718:	d002      	beq.n	8011720 <USBD_LL_DataOutStage+0x7c>
 801171a:	2b01      	cmp	r3, #1
 801171c:	d003      	beq.n	8011726 <USBD_LL_DataOutStage+0x82>
 801171e:	e018      	b.n	8011752 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011720:	2300      	movs	r3, #0
 8011722:	75bb      	strb	r3, [r7, #22]
            break;
 8011724:	e018      	b.n	8011758 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801172c:	b2db      	uxtb	r3, r3
 801172e:	4619      	mov	r1, r3
 8011730:	68f8      	ldr	r0, [r7, #12]
 8011732:	f000 fa64 	bl	8011bfe <USBD_CoreFindIF>
 8011736:	4603      	mov	r3, r0
 8011738:	75bb      	strb	r3, [r7, #22]
            break;
 801173a:	e00d      	b.n	8011758 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011742:	b2db      	uxtb	r3, r3
 8011744:	4619      	mov	r1, r3
 8011746:	68f8      	ldr	r0, [r7, #12]
 8011748:	f000 fa66 	bl	8011c18 <USBD_CoreFindEP>
 801174c:	4603      	mov	r3, r0
 801174e:	75bb      	strb	r3, [r7, #22]
            break;
 8011750:	e002      	b.n	8011758 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011752:	2300      	movs	r3, #0
 8011754:	75bb      	strb	r3, [r7, #22]
            break;
 8011756:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011758:	7dbb      	ldrb	r3, [r7, #22]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d119      	bne.n	8011792 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011764:	b2db      	uxtb	r3, r3
 8011766:	2b03      	cmp	r3, #3
 8011768:	d113      	bne.n	8011792 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801176a:	7dba      	ldrb	r2, [r7, #22]
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	32ae      	adds	r2, #174	; 0xae
 8011770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011774:	691b      	ldr	r3, [r3, #16]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d00b      	beq.n	8011792 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801177a:	7dba      	ldrb	r2, [r7, #22]
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011782:	7dba      	ldrb	r2, [r7, #22]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	32ae      	adds	r2, #174	; 0xae
 8011788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801178c:	691b      	ldr	r3, [r3, #16]
 801178e:	68f8      	ldr	r0, [r7, #12]
 8011790:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011792:	68f8      	ldr	r0, [r7, #12]
 8011794:	f001 f97a 	bl	8012a8c <USBD_CtlSendStatus>
 8011798:	e032      	b.n	8011800 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801179a:	7afb      	ldrb	r3, [r7, #11]
 801179c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80117a0:	b2db      	uxtb	r3, r3
 80117a2:	4619      	mov	r1, r3
 80117a4:	68f8      	ldr	r0, [r7, #12]
 80117a6:	f000 fa37 	bl	8011c18 <USBD_CoreFindEP>
 80117aa:	4603      	mov	r3, r0
 80117ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80117ae:	7dbb      	ldrb	r3, [r7, #22]
 80117b0:	2bff      	cmp	r3, #255	; 0xff
 80117b2:	d025      	beq.n	8011800 <USBD_LL_DataOutStage+0x15c>
 80117b4:	7dbb      	ldrb	r3, [r7, #22]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d122      	bne.n	8011800 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80117c0:	b2db      	uxtb	r3, r3
 80117c2:	2b03      	cmp	r3, #3
 80117c4:	d117      	bne.n	80117f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80117c6:	7dba      	ldrb	r2, [r7, #22]
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	32ae      	adds	r2, #174	; 0xae
 80117cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117d0:	699b      	ldr	r3, [r3, #24]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d00f      	beq.n	80117f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80117d6:	7dba      	ldrb	r2, [r7, #22]
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80117de:	7dba      	ldrb	r2, [r7, #22]
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	32ae      	adds	r2, #174	; 0xae
 80117e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117e8:	699b      	ldr	r3, [r3, #24]
 80117ea:	7afa      	ldrb	r2, [r7, #11]
 80117ec:	4611      	mov	r1, r2
 80117ee:	68f8      	ldr	r0, [r7, #12]
 80117f0:	4798      	blx	r3
 80117f2:	4603      	mov	r3, r0
 80117f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80117f6:	7dfb      	ldrb	r3, [r7, #23]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d001      	beq.n	8011800 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80117fc:	7dfb      	ldrb	r3, [r7, #23]
 80117fe:	e000      	b.n	8011802 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011800:	2300      	movs	r3, #0
}
 8011802:	4618      	mov	r0, r3
 8011804:	3718      	adds	r7, #24
 8011806:	46bd      	mov	sp, r7
 8011808:	bd80      	pop	{r7, pc}

0801180a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801180a:	b580      	push	{r7, lr}
 801180c:	b086      	sub	sp, #24
 801180e:	af00      	add	r7, sp, #0
 8011810:	60f8      	str	r0, [r7, #12]
 8011812:	460b      	mov	r3, r1
 8011814:	607a      	str	r2, [r7, #4]
 8011816:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011818:	7afb      	ldrb	r3, [r7, #11]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d16f      	bne.n	80118fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	3314      	adds	r3, #20
 8011822:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801182a:	2b02      	cmp	r3, #2
 801182c:	d15a      	bne.n	80118e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	689a      	ldr	r2, [r3, #8]
 8011832:	693b      	ldr	r3, [r7, #16]
 8011834:	68db      	ldr	r3, [r3, #12]
 8011836:	429a      	cmp	r2, r3
 8011838:	d914      	bls.n	8011864 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801183a:	693b      	ldr	r3, [r7, #16]
 801183c:	689a      	ldr	r2, [r3, #8]
 801183e:	693b      	ldr	r3, [r7, #16]
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	1ad2      	subs	r2, r2, r3
 8011844:	693b      	ldr	r3, [r7, #16]
 8011846:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	689b      	ldr	r3, [r3, #8]
 801184c:	461a      	mov	r2, r3
 801184e:	6879      	ldr	r1, [r7, #4]
 8011850:	68f8      	ldr	r0, [r7, #12]
 8011852:	f001 f8dc 	bl	8012a0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011856:	2300      	movs	r3, #0
 8011858:	2200      	movs	r2, #0
 801185a:	2100      	movs	r1, #0
 801185c:	68f8      	ldr	r0, [r7, #12]
 801185e:	f001 fe31 	bl	80134c4 <USBD_LL_PrepareReceive>
 8011862:	e03f      	b.n	80118e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011864:	693b      	ldr	r3, [r7, #16]
 8011866:	68da      	ldr	r2, [r3, #12]
 8011868:	693b      	ldr	r3, [r7, #16]
 801186a:	689b      	ldr	r3, [r3, #8]
 801186c:	429a      	cmp	r2, r3
 801186e:	d11c      	bne.n	80118aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	685a      	ldr	r2, [r3, #4]
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011878:	429a      	cmp	r2, r3
 801187a:	d316      	bcc.n	80118aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	685a      	ldr	r2, [r3, #4]
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011886:	429a      	cmp	r2, r3
 8011888:	d20f      	bcs.n	80118aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801188a:	2200      	movs	r2, #0
 801188c:	2100      	movs	r1, #0
 801188e:	68f8      	ldr	r0, [r7, #12]
 8011890:	f001 f8bd 	bl	8012a0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2200      	movs	r2, #0
 8011898:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801189c:	2300      	movs	r3, #0
 801189e:	2200      	movs	r2, #0
 80118a0:	2100      	movs	r1, #0
 80118a2:	68f8      	ldr	r0, [r7, #12]
 80118a4:	f001 fe0e 	bl	80134c4 <USBD_LL_PrepareReceive>
 80118a8:	e01c      	b.n	80118e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80118b0:	b2db      	uxtb	r3, r3
 80118b2:	2b03      	cmp	r3, #3
 80118b4:	d10f      	bne.n	80118d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118bc:	68db      	ldr	r3, [r3, #12]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d009      	beq.n	80118d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2200      	movs	r2, #0
 80118c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	68f8      	ldr	r0, [r7, #12]
 80118d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80118d6:	2180      	movs	r1, #128	; 0x80
 80118d8:	68f8      	ldr	r0, [r7, #12]
 80118da:	f001 fd49 	bl	8013370 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f001 f8e7 	bl	8012ab2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d03a      	beq.n	8011964 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80118ee:	68f8      	ldr	r0, [r7, #12]
 80118f0:	f7ff fe42 	bl	8011578 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2200      	movs	r2, #0
 80118f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80118fc:	e032      	b.n	8011964 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80118fe:	7afb      	ldrb	r3, [r7, #11]
 8011900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011904:	b2db      	uxtb	r3, r3
 8011906:	4619      	mov	r1, r3
 8011908:	68f8      	ldr	r0, [r7, #12]
 801190a:	f000 f985 	bl	8011c18 <USBD_CoreFindEP>
 801190e:	4603      	mov	r3, r0
 8011910:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011912:	7dfb      	ldrb	r3, [r7, #23]
 8011914:	2bff      	cmp	r3, #255	; 0xff
 8011916:	d025      	beq.n	8011964 <USBD_LL_DataInStage+0x15a>
 8011918:	7dfb      	ldrb	r3, [r7, #23]
 801191a:	2b00      	cmp	r3, #0
 801191c:	d122      	bne.n	8011964 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011924:	b2db      	uxtb	r3, r3
 8011926:	2b03      	cmp	r3, #3
 8011928:	d11c      	bne.n	8011964 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801192a:	7dfa      	ldrb	r2, [r7, #23]
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	32ae      	adds	r2, #174	; 0xae
 8011930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011934:	695b      	ldr	r3, [r3, #20]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d014      	beq.n	8011964 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801193a:	7dfa      	ldrb	r2, [r7, #23]
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8011942:	7dfa      	ldrb	r2, [r7, #23]
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	32ae      	adds	r2, #174	; 0xae
 8011948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801194c:	695b      	ldr	r3, [r3, #20]
 801194e:	7afa      	ldrb	r2, [r7, #11]
 8011950:	4611      	mov	r1, r2
 8011952:	68f8      	ldr	r0, [r7, #12]
 8011954:	4798      	blx	r3
 8011956:	4603      	mov	r3, r0
 8011958:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801195a:	7dbb      	ldrb	r3, [r7, #22]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d001      	beq.n	8011964 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011960:	7dbb      	ldrb	r3, [r7, #22]
 8011962:	e000      	b.n	8011966 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011964:	2300      	movs	r3, #0
}
 8011966:	4618      	mov	r0, r3
 8011968:	3718      	adds	r7, #24
 801196a:	46bd      	mov	sp, r7
 801196c:	bd80      	pop	{r7, pc}

0801196e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801196e:	b580      	push	{r7, lr}
 8011970:	b084      	sub	sp, #16
 8011972:	af00      	add	r7, sp, #0
 8011974:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8011976:	2300      	movs	r3, #0
 8011978:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2201      	movs	r2, #1
 801197e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2200      	movs	r2, #0
 8011986:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	2200      	movs	r2, #0
 801198e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	2200      	movs	r2, #0
 8011994:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	2200      	movs	r2, #0
 801199c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d014      	beq.n	80119d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119b0:	685b      	ldr	r3, [r3, #4]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d00e      	beq.n	80119d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119bc:	685b      	ldr	r3, [r3, #4]
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	6852      	ldr	r2, [r2, #4]
 80119c2:	b2d2      	uxtb	r2, r2
 80119c4:	4611      	mov	r1, r2
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	4798      	blx	r3
 80119ca:	4603      	mov	r3, r0
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d001      	beq.n	80119d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80119d0:	2303      	movs	r3, #3
 80119d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80119d4:	2340      	movs	r3, #64	; 0x40
 80119d6:	2200      	movs	r2, #0
 80119d8:	2100      	movs	r1, #0
 80119da:	6878      	ldr	r0, [r7, #4]
 80119dc:	f001 fc83 	bl	80132e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	2201      	movs	r2, #1
 80119e4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2240      	movs	r2, #64	; 0x40
 80119ec:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80119f0:	2340      	movs	r3, #64	; 0x40
 80119f2:	2200      	movs	r2, #0
 80119f4:	2180      	movs	r1, #128	; 0x80
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f001 fc75 	bl	80132e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	2201      	movs	r2, #1
 8011a00:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2240      	movs	r2, #64	; 0x40
 8011a06:	621a      	str	r2, [r3, #32]

  return ret;
 8011a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3710      	adds	r7, #16
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011a12:	b480      	push	{r7}
 8011a14:	b083      	sub	sp, #12
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	78fa      	ldrb	r2, [r7, #3]
 8011a22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011a24:	2300      	movs	r3, #0
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	370c      	adds	r7, #12
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a30:	4770      	bx	lr

08011a32 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011a32:	b480      	push	{r7}
 8011a34:	b083      	sub	sp, #12
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a40:	b2db      	uxtb	r3, r3
 8011a42:	2b04      	cmp	r3, #4
 8011a44:	d006      	beq.n	8011a54 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a4c:	b2da      	uxtb	r2, r3
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2204      	movs	r2, #4
 8011a58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011a5c:	2300      	movs	r3, #0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	370c      	adds	r7, #12
 8011a62:	46bd      	mov	sp, r7
 8011a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a68:	4770      	bx	lr

08011a6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011a6a:	b480      	push	{r7}
 8011a6c:	b083      	sub	sp, #12
 8011a6e:	af00      	add	r7, sp, #0
 8011a70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a78:	b2db      	uxtb	r3, r3
 8011a7a:	2b04      	cmp	r3, #4
 8011a7c:	d106      	bne.n	8011a8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011a84:	b2da      	uxtb	r2, r3
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011a8c:	2300      	movs	r3, #0
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	370c      	adds	r7, #12
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b082      	sub	sp, #8
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	2b03      	cmp	r3, #3
 8011aac:	d110      	bne.n	8011ad0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d00b      	beq.n	8011ad0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011abe:	69db      	ldr	r3, [r3, #28]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d005      	beq.n	8011ad0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aca:	69db      	ldr	r3, [r3, #28]
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011ad0:	2300      	movs	r3, #0
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3708      	adds	r7, #8
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b082      	sub	sp, #8
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
 8011ae2:	460b      	mov	r3, r1
 8011ae4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	32ae      	adds	r2, #174	; 0xae
 8011af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d101      	bne.n	8011afc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011af8:	2303      	movs	r3, #3
 8011afa:	e01c      	b.n	8011b36 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	2b03      	cmp	r3, #3
 8011b06:	d115      	bne.n	8011b34 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	32ae      	adds	r2, #174	; 0xae
 8011b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b16:	6a1b      	ldr	r3, [r3, #32]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d00b      	beq.n	8011b34 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	32ae      	adds	r2, #174	; 0xae
 8011b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b2a:	6a1b      	ldr	r3, [r3, #32]
 8011b2c:	78fa      	ldrb	r2, [r7, #3]
 8011b2e:	4611      	mov	r1, r2
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011b34:	2300      	movs	r3, #0
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3708      	adds	r7, #8
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}

08011b3e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011b3e:	b580      	push	{r7, lr}
 8011b40:	b082      	sub	sp, #8
 8011b42:	af00      	add	r7, sp, #0
 8011b44:	6078      	str	r0, [r7, #4]
 8011b46:	460b      	mov	r3, r1
 8011b48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	32ae      	adds	r2, #174	; 0xae
 8011b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d101      	bne.n	8011b60 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011b5c:	2303      	movs	r3, #3
 8011b5e:	e01c      	b.n	8011b9a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b66:	b2db      	uxtb	r3, r3
 8011b68:	2b03      	cmp	r3, #3
 8011b6a:	d115      	bne.n	8011b98 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	32ae      	adds	r2, #174	; 0xae
 8011b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d00b      	beq.n	8011b98 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	32ae      	adds	r2, #174	; 0xae
 8011b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b90:	78fa      	ldrb	r2, [r7, #3]
 8011b92:	4611      	mov	r1, r2
 8011b94:	6878      	ldr	r0, [r7, #4]
 8011b96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011b98:	2300      	movs	r3, #0
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3708      	adds	r7, #8
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}

08011ba2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011ba2:	b480      	push	{r7}
 8011ba4:	b083      	sub	sp, #12
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011baa:	2300      	movs	r3, #0
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	370c      	adds	r7, #12
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb6:	4770      	bx	lr

08011bb8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b084      	sub	sp, #16
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	2201      	movs	r2, #1
 8011bc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d00e      	beq.n	8011bf4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011bdc:	685b      	ldr	r3, [r3, #4]
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	6852      	ldr	r2, [r2, #4]
 8011be2:	b2d2      	uxtb	r2, r2
 8011be4:	4611      	mov	r1, r2
 8011be6:	6878      	ldr	r0, [r7, #4]
 8011be8:	4798      	blx	r3
 8011bea:	4603      	mov	r3, r0
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d001      	beq.n	8011bf4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011bf0:	2303      	movs	r3, #3
 8011bf2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3710      	adds	r7, #16
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011bfe:	b480      	push	{r7}
 8011c00:	b083      	sub	sp, #12
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	460b      	mov	r3, r1
 8011c08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011c0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	370c      	adds	r7, #12
 8011c10:	46bd      	mov	sp, r7
 8011c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c16:	4770      	bx	lr

08011c18 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011c18:	b480      	push	{r7}
 8011c1a:	b083      	sub	sp, #12
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	460b      	mov	r3, r1
 8011c22:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011c24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	370c      	adds	r7, #12
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr

08011c32 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011c32:	b580      	push	{r7, lr}
 8011c34:	b086      	sub	sp, #24
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	6078      	str	r0, [r7, #4]
 8011c3a:	460b      	mov	r3, r1
 8011c3c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011c46:	2300      	movs	r3, #0
 8011c48:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	885b      	ldrh	r3, [r3, #2]
 8011c4e:	b29a      	uxth	r2, r3
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	b29b      	uxth	r3, r3
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d920      	bls.n	8011c9c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	781b      	ldrb	r3, [r3, #0]
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011c62:	e013      	b.n	8011c8c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011c64:	f107 030a 	add.w	r3, r7, #10
 8011c68:	4619      	mov	r1, r3
 8011c6a:	6978      	ldr	r0, [r7, #20]
 8011c6c:	f000 f81b 	bl	8011ca6 <USBD_GetNextDesc>
 8011c70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011c72:	697b      	ldr	r3, [r7, #20]
 8011c74:	785b      	ldrb	r3, [r3, #1]
 8011c76:	2b05      	cmp	r3, #5
 8011c78:	d108      	bne.n	8011c8c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	789b      	ldrb	r3, [r3, #2]
 8011c82:	78fa      	ldrb	r2, [r7, #3]
 8011c84:	429a      	cmp	r2, r3
 8011c86:	d008      	beq.n	8011c9a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	885b      	ldrh	r3, [r3, #2]
 8011c90:	b29a      	uxth	r2, r3
 8011c92:	897b      	ldrh	r3, [r7, #10]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d8e5      	bhi.n	8011c64 <USBD_GetEpDesc+0x32>
 8011c98:	e000      	b.n	8011c9c <USBD_GetEpDesc+0x6a>
          break;
 8011c9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011c9c:	693b      	ldr	r3, [r7, #16]
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	3718      	adds	r7, #24
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}

08011ca6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011ca6:	b480      	push	{r7}
 8011ca8:	b085      	sub	sp, #20
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
 8011cae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	881a      	ldrh	r2, [r3, #0]
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	781b      	ldrb	r3, [r3, #0]
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	4413      	add	r3, r2
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	781b      	ldrb	r3, [r3, #0]
 8011cca:	461a      	mov	r2, r3
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	4413      	add	r3, r2
 8011cd0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011cd2:	68fb      	ldr	r3, [r7, #12]
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	3714      	adds	r7, #20
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr

08011ce0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b087      	sub	sp, #28
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	781b      	ldrb	r3, [r3, #0]
 8011cf0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011cf2:	697b      	ldr	r3, [r7, #20]
 8011cf4:	3301      	adds	r3, #1
 8011cf6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011cfe:	8a3b      	ldrh	r3, [r7, #16]
 8011d00:	021b      	lsls	r3, r3, #8
 8011d02:	b21a      	sxth	r2, r3
 8011d04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011d08:	4313      	orrs	r3, r2
 8011d0a:	b21b      	sxth	r3, r3
 8011d0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011d0e:	89fb      	ldrh	r3, [r7, #14]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	371c      	adds	r7, #28
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr

08011d1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
 8011d24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011d26:	2300      	movs	r3, #0
 8011d28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d2a:	683b      	ldr	r3, [r7, #0]
 8011d2c:	781b      	ldrb	r3, [r3, #0]
 8011d2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d32:	2b40      	cmp	r3, #64	; 0x40
 8011d34:	d005      	beq.n	8011d42 <USBD_StdDevReq+0x26>
 8011d36:	2b40      	cmp	r3, #64	; 0x40
 8011d38:	d857      	bhi.n	8011dea <USBD_StdDevReq+0xce>
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d00f      	beq.n	8011d5e <USBD_StdDevReq+0x42>
 8011d3e:	2b20      	cmp	r3, #32
 8011d40:	d153      	bne.n	8011dea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	32ae      	adds	r2, #174	; 0xae
 8011d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d50:	689b      	ldr	r3, [r3, #8]
 8011d52:	6839      	ldr	r1, [r7, #0]
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	4798      	blx	r3
 8011d58:	4603      	mov	r3, r0
 8011d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8011d5c:	e04a      	b.n	8011df4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011d5e:	683b      	ldr	r3, [r7, #0]
 8011d60:	785b      	ldrb	r3, [r3, #1]
 8011d62:	2b09      	cmp	r3, #9
 8011d64:	d83b      	bhi.n	8011dde <USBD_StdDevReq+0xc2>
 8011d66:	a201      	add	r2, pc, #4	; (adr r2, 8011d6c <USBD_StdDevReq+0x50>)
 8011d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d6c:	08011dc1 	.word	0x08011dc1
 8011d70:	08011dd5 	.word	0x08011dd5
 8011d74:	08011ddf 	.word	0x08011ddf
 8011d78:	08011dcb 	.word	0x08011dcb
 8011d7c:	08011ddf 	.word	0x08011ddf
 8011d80:	08011d9f 	.word	0x08011d9f
 8011d84:	08011d95 	.word	0x08011d95
 8011d88:	08011ddf 	.word	0x08011ddf
 8011d8c:	08011db7 	.word	0x08011db7
 8011d90:	08011da9 	.word	0x08011da9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011d94:	6839      	ldr	r1, [r7, #0]
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f000 fa3c 	bl	8012214 <USBD_GetDescriptor>
          break;
 8011d9c:	e024      	b.n	8011de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011d9e:	6839      	ldr	r1, [r7, #0]
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f000 fbcb 	bl	801253c <USBD_SetAddress>
          break;
 8011da6:	e01f      	b.n	8011de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011da8:	6839      	ldr	r1, [r7, #0]
 8011daa:	6878      	ldr	r0, [r7, #4]
 8011dac:	f000 fc0a 	bl	80125c4 <USBD_SetConfig>
 8011db0:	4603      	mov	r3, r0
 8011db2:	73fb      	strb	r3, [r7, #15]
          break;
 8011db4:	e018      	b.n	8011de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011db6:	6839      	ldr	r1, [r7, #0]
 8011db8:	6878      	ldr	r0, [r7, #4]
 8011dba:	f000 fcad 	bl	8012718 <USBD_GetConfig>
          break;
 8011dbe:	e013      	b.n	8011de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011dc0:	6839      	ldr	r1, [r7, #0]
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f000 fcde 	bl	8012784 <USBD_GetStatus>
          break;
 8011dc8:	e00e      	b.n	8011de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011dca:	6839      	ldr	r1, [r7, #0]
 8011dcc:	6878      	ldr	r0, [r7, #4]
 8011dce:	f000 fd0d 	bl	80127ec <USBD_SetFeature>
          break;
 8011dd2:	e009      	b.n	8011de8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011dd4:	6839      	ldr	r1, [r7, #0]
 8011dd6:	6878      	ldr	r0, [r7, #4]
 8011dd8:	f000 fd31 	bl	801283e <USBD_ClrFeature>
          break;
 8011ddc:	e004      	b.n	8011de8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011dde:	6839      	ldr	r1, [r7, #0]
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 fd88 	bl	80128f6 <USBD_CtlError>
          break;
 8011de6:	bf00      	nop
      }
      break;
 8011de8:	e004      	b.n	8011df4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011dea:	6839      	ldr	r1, [r7, #0]
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f000 fd82 	bl	80128f6 <USBD_CtlError>
      break;
 8011df2:	bf00      	nop
  }

  return ret;
 8011df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011df6:	4618      	mov	r0, r3
 8011df8:	3710      	adds	r7, #16
 8011dfa:	46bd      	mov	sp, r7
 8011dfc:	bd80      	pop	{r7, pc}
 8011dfe:	bf00      	nop

08011e00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b084      	sub	sp, #16
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	781b      	ldrb	r3, [r3, #0]
 8011e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011e16:	2b40      	cmp	r3, #64	; 0x40
 8011e18:	d005      	beq.n	8011e26 <USBD_StdItfReq+0x26>
 8011e1a:	2b40      	cmp	r3, #64	; 0x40
 8011e1c:	d852      	bhi.n	8011ec4 <USBD_StdItfReq+0xc4>
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d001      	beq.n	8011e26 <USBD_StdItfReq+0x26>
 8011e22:	2b20      	cmp	r3, #32
 8011e24:	d14e      	bne.n	8011ec4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e2c:	b2db      	uxtb	r3, r3
 8011e2e:	3b01      	subs	r3, #1
 8011e30:	2b02      	cmp	r3, #2
 8011e32:	d840      	bhi.n	8011eb6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	889b      	ldrh	r3, [r3, #4]
 8011e38:	b2db      	uxtb	r3, r3
 8011e3a:	2b01      	cmp	r3, #1
 8011e3c:	d836      	bhi.n	8011eac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011e3e:	683b      	ldr	r3, [r7, #0]
 8011e40:	889b      	ldrh	r3, [r3, #4]
 8011e42:	b2db      	uxtb	r3, r3
 8011e44:	4619      	mov	r1, r3
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f7ff fed9 	bl	8011bfe <USBD_CoreFindIF>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011e50:	7bbb      	ldrb	r3, [r7, #14]
 8011e52:	2bff      	cmp	r3, #255	; 0xff
 8011e54:	d01d      	beq.n	8011e92 <USBD_StdItfReq+0x92>
 8011e56:	7bbb      	ldrb	r3, [r7, #14]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d11a      	bne.n	8011e92 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011e5c:	7bba      	ldrb	r2, [r7, #14]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	32ae      	adds	r2, #174	; 0xae
 8011e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e66:	689b      	ldr	r3, [r3, #8]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d00f      	beq.n	8011e8c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011e6c:	7bba      	ldrb	r2, [r7, #14]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011e74:	7bba      	ldrb	r2, [r7, #14]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	32ae      	adds	r2, #174	; 0xae
 8011e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e7e:	689b      	ldr	r3, [r3, #8]
 8011e80:	6839      	ldr	r1, [r7, #0]
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	4798      	blx	r3
 8011e86:	4603      	mov	r3, r0
 8011e88:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011e8a:	e004      	b.n	8011e96 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011e8c:	2303      	movs	r3, #3
 8011e8e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011e90:	e001      	b.n	8011e96 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011e92:	2303      	movs	r3, #3
 8011e94:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	88db      	ldrh	r3, [r3, #6]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d110      	bne.n	8011ec0 <USBD_StdItfReq+0xc0>
 8011e9e:	7bfb      	ldrb	r3, [r7, #15]
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d10d      	bne.n	8011ec0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f000 fdf1 	bl	8012a8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011eaa:	e009      	b.n	8011ec0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011eac:	6839      	ldr	r1, [r7, #0]
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f000 fd21 	bl	80128f6 <USBD_CtlError>
          break;
 8011eb4:	e004      	b.n	8011ec0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011eb6:	6839      	ldr	r1, [r7, #0]
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 fd1c 	bl	80128f6 <USBD_CtlError>
          break;
 8011ebe:	e000      	b.n	8011ec2 <USBD_StdItfReq+0xc2>
          break;
 8011ec0:	bf00      	nop
      }
      break;
 8011ec2:	e004      	b.n	8011ece <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011ec4:	6839      	ldr	r1, [r7, #0]
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f000 fd15 	bl	80128f6 <USBD_CtlError>
      break;
 8011ecc:	bf00      	nop
  }

  return ret;
 8011ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	3710      	adds	r7, #16
 8011ed4:	46bd      	mov	sp, r7
 8011ed6:	bd80      	pop	{r7, pc}

08011ed8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	889b      	ldrh	r3, [r3, #4]
 8011eea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	781b      	ldrb	r3, [r3, #0]
 8011ef0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ef4:	2b40      	cmp	r3, #64	; 0x40
 8011ef6:	d007      	beq.n	8011f08 <USBD_StdEPReq+0x30>
 8011ef8:	2b40      	cmp	r3, #64	; 0x40
 8011efa:	f200 817f 	bhi.w	80121fc <USBD_StdEPReq+0x324>
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d02a      	beq.n	8011f58 <USBD_StdEPReq+0x80>
 8011f02:	2b20      	cmp	r3, #32
 8011f04:	f040 817a 	bne.w	80121fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011f08:	7bbb      	ldrb	r3, [r7, #14]
 8011f0a:	4619      	mov	r1, r3
 8011f0c:	6878      	ldr	r0, [r7, #4]
 8011f0e:	f7ff fe83 	bl	8011c18 <USBD_CoreFindEP>
 8011f12:	4603      	mov	r3, r0
 8011f14:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f16:	7b7b      	ldrb	r3, [r7, #13]
 8011f18:	2bff      	cmp	r3, #255	; 0xff
 8011f1a:	f000 8174 	beq.w	8012206 <USBD_StdEPReq+0x32e>
 8011f1e:	7b7b      	ldrb	r3, [r7, #13]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	f040 8170 	bne.w	8012206 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011f26:	7b7a      	ldrb	r2, [r7, #13]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011f2e:	7b7a      	ldrb	r2, [r7, #13]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	32ae      	adds	r2, #174	; 0xae
 8011f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f38:	689b      	ldr	r3, [r3, #8]
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f000 8163 	beq.w	8012206 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011f40:	7b7a      	ldrb	r2, [r7, #13]
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	32ae      	adds	r2, #174	; 0xae
 8011f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f4a:	689b      	ldr	r3, [r3, #8]
 8011f4c:	6839      	ldr	r1, [r7, #0]
 8011f4e:	6878      	ldr	r0, [r7, #4]
 8011f50:	4798      	blx	r3
 8011f52:	4603      	mov	r3, r0
 8011f54:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011f56:	e156      	b.n	8012206 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	785b      	ldrb	r3, [r3, #1]
 8011f5c:	2b03      	cmp	r3, #3
 8011f5e:	d008      	beq.n	8011f72 <USBD_StdEPReq+0x9a>
 8011f60:	2b03      	cmp	r3, #3
 8011f62:	f300 8145 	bgt.w	80121f0 <USBD_StdEPReq+0x318>
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	f000 809b 	beq.w	80120a2 <USBD_StdEPReq+0x1ca>
 8011f6c:	2b01      	cmp	r3, #1
 8011f6e:	d03c      	beq.n	8011fea <USBD_StdEPReq+0x112>
 8011f70:	e13e      	b.n	80121f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f78:	b2db      	uxtb	r3, r3
 8011f7a:	2b02      	cmp	r3, #2
 8011f7c:	d002      	beq.n	8011f84 <USBD_StdEPReq+0xac>
 8011f7e:	2b03      	cmp	r3, #3
 8011f80:	d016      	beq.n	8011fb0 <USBD_StdEPReq+0xd8>
 8011f82:	e02c      	b.n	8011fde <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f84:	7bbb      	ldrb	r3, [r7, #14]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d00d      	beq.n	8011fa6 <USBD_StdEPReq+0xce>
 8011f8a:	7bbb      	ldrb	r3, [r7, #14]
 8011f8c:	2b80      	cmp	r3, #128	; 0x80
 8011f8e:	d00a      	beq.n	8011fa6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f90:	7bbb      	ldrb	r3, [r7, #14]
 8011f92:	4619      	mov	r1, r3
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f001 f9eb 	bl	8013370 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f9a:	2180      	movs	r1, #128	; 0x80
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f001 f9e7 	bl	8013370 <USBD_LL_StallEP>
 8011fa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011fa4:	e020      	b.n	8011fe8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011fa6:	6839      	ldr	r1, [r7, #0]
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f000 fca4 	bl	80128f6 <USBD_CtlError>
              break;
 8011fae:	e01b      	b.n	8011fe8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011fb0:	683b      	ldr	r3, [r7, #0]
 8011fb2:	885b      	ldrh	r3, [r3, #2]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d10e      	bne.n	8011fd6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011fb8:	7bbb      	ldrb	r3, [r7, #14]
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d00b      	beq.n	8011fd6 <USBD_StdEPReq+0xfe>
 8011fbe:	7bbb      	ldrb	r3, [r7, #14]
 8011fc0:	2b80      	cmp	r3, #128	; 0x80
 8011fc2:	d008      	beq.n	8011fd6 <USBD_StdEPReq+0xfe>
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	88db      	ldrh	r3, [r3, #6]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d104      	bne.n	8011fd6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011fcc:	7bbb      	ldrb	r3, [r7, #14]
 8011fce:	4619      	mov	r1, r3
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f001 f9cd 	bl	8013370 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011fd6:	6878      	ldr	r0, [r7, #4]
 8011fd8:	f000 fd58 	bl	8012a8c <USBD_CtlSendStatus>

              break;
 8011fdc:	e004      	b.n	8011fe8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011fde:	6839      	ldr	r1, [r7, #0]
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 fc88 	bl	80128f6 <USBD_CtlError>
              break;
 8011fe6:	bf00      	nop
          }
          break;
 8011fe8:	e107      	b.n	80121fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ff0:	b2db      	uxtb	r3, r3
 8011ff2:	2b02      	cmp	r3, #2
 8011ff4:	d002      	beq.n	8011ffc <USBD_StdEPReq+0x124>
 8011ff6:	2b03      	cmp	r3, #3
 8011ff8:	d016      	beq.n	8012028 <USBD_StdEPReq+0x150>
 8011ffa:	e04b      	b.n	8012094 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011ffc:	7bbb      	ldrb	r3, [r7, #14]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d00d      	beq.n	801201e <USBD_StdEPReq+0x146>
 8012002:	7bbb      	ldrb	r3, [r7, #14]
 8012004:	2b80      	cmp	r3, #128	; 0x80
 8012006:	d00a      	beq.n	801201e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012008:	7bbb      	ldrb	r3, [r7, #14]
 801200a:	4619      	mov	r1, r3
 801200c:	6878      	ldr	r0, [r7, #4]
 801200e:	f001 f9af 	bl	8013370 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012012:	2180      	movs	r1, #128	; 0x80
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f001 f9ab 	bl	8013370 <USBD_LL_StallEP>
 801201a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801201c:	e040      	b.n	80120a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801201e:	6839      	ldr	r1, [r7, #0]
 8012020:	6878      	ldr	r0, [r7, #4]
 8012022:	f000 fc68 	bl	80128f6 <USBD_CtlError>
              break;
 8012026:	e03b      	b.n	80120a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	885b      	ldrh	r3, [r3, #2]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d136      	bne.n	801209e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012030:	7bbb      	ldrb	r3, [r7, #14]
 8012032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012036:	2b00      	cmp	r3, #0
 8012038:	d004      	beq.n	8012044 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801203a:	7bbb      	ldrb	r3, [r7, #14]
 801203c:	4619      	mov	r1, r3
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f001 f9b5 	bl	80133ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f000 fd21 	bl	8012a8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801204a:	7bbb      	ldrb	r3, [r7, #14]
 801204c:	4619      	mov	r1, r3
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f7ff fde2 	bl	8011c18 <USBD_CoreFindEP>
 8012054:	4603      	mov	r3, r0
 8012056:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012058:	7b7b      	ldrb	r3, [r7, #13]
 801205a:	2bff      	cmp	r3, #255	; 0xff
 801205c:	d01f      	beq.n	801209e <USBD_StdEPReq+0x1c6>
 801205e:	7b7b      	ldrb	r3, [r7, #13]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d11c      	bne.n	801209e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012064:	7b7a      	ldrb	r2, [r7, #13]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801206c:	7b7a      	ldrb	r2, [r7, #13]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	32ae      	adds	r2, #174	; 0xae
 8012072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d010      	beq.n	801209e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801207c:	7b7a      	ldrb	r2, [r7, #13]
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	32ae      	adds	r2, #174	; 0xae
 8012082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012086:	689b      	ldr	r3, [r3, #8]
 8012088:	6839      	ldr	r1, [r7, #0]
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	4798      	blx	r3
 801208e:	4603      	mov	r3, r0
 8012090:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012092:	e004      	b.n	801209e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012094:	6839      	ldr	r1, [r7, #0]
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f000 fc2d 	bl	80128f6 <USBD_CtlError>
              break;
 801209c:	e000      	b.n	80120a0 <USBD_StdEPReq+0x1c8>
              break;
 801209e:	bf00      	nop
          }
          break;
 80120a0:	e0ab      	b.n	80121fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120a8:	b2db      	uxtb	r3, r3
 80120aa:	2b02      	cmp	r3, #2
 80120ac:	d002      	beq.n	80120b4 <USBD_StdEPReq+0x1dc>
 80120ae:	2b03      	cmp	r3, #3
 80120b0:	d032      	beq.n	8012118 <USBD_StdEPReq+0x240>
 80120b2:	e097      	b.n	80121e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80120b4:	7bbb      	ldrb	r3, [r7, #14]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d007      	beq.n	80120ca <USBD_StdEPReq+0x1f2>
 80120ba:	7bbb      	ldrb	r3, [r7, #14]
 80120bc:	2b80      	cmp	r3, #128	; 0x80
 80120be:	d004      	beq.n	80120ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80120c0:	6839      	ldr	r1, [r7, #0]
 80120c2:	6878      	ldr	r0, [r7, #4]
 80120c4:	f000 fc17 	bl	80128f6 <USBD_CtlError>
                break;
 80120c8:	e091      	b.n	80121ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	da0b      	bge.n	80120ea <USBD_StdEPReq+0x212>
 80120d2:	7bbb      	ldrb	r3, [r7, #14]
 80120d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80120d8:	4613      	mov	r3, r2
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	4413      	add	r3, r2
 80120de:	009b      	lsls	r3, r3, #2
 80120e0:	3310      	adds	r3, #16
 80120e2:	687a      	ldr	r2, [r7, #4]
 80120e4:	4413      	add	r3, r2
 80120e6:	3304      	adds	r3, #4
 80120e8:	e00b      	b.n	8012102 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80120ea:	7bbb      	ldrb	r3, [r7, #14]
 80120ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120f0:	4613      	mov	r3, r2
 80120f2:	009b      	lsls	r3, r3, #2
 80120f4:	4413      	add	r3, r2
 80120f6:	009b      	lsls	r3, r3, #2
 80120f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	4413      	add	r3, r2
 8012100:	3304      	adds	r3, #4
 8012102:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	2200      	movs	r2, #0
 8012108:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	2202      	movs	r2, #2
 801210e:	4619      	mov	r1, r3
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 fc61 	bl	80129d8 <USBD_CtlSendData>
              break;
 8012116:	e06a      	b.n	80121ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012118:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801211c:	2b00      	cmp	r3, #0
 801211e:	da11      	bge.n	8012144 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012120:	7bbb      	ldrb	r3, [r7, #14]
 8012122:	f003 020f 	and.w	r2, r3, #15
 8012126:	6879      	ldr	r1, [r7, #4]
 8012128:	4613      	mov	r3, r2
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	4413      	add	r3, r2
 801212e:	009b      	lsls	r3, r3, #2
 8012130:	440b      	add	r3, r1
 8012132:	3324      	adds	r3, #36	; 0x24
 8012134:	881b      	ldrh	r3, [r3, #0]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d117      	bne.n	801216a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801213a:	6839      	ldr	r1, [r7, #0]
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f000 fbda 	bl	80128f6 <USBD_CtlError>
                  break;
 8012142:	e054      	b.n	80121ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012144:	7bbb      	ldrb	r3, [r7, #14]
 8012146:	f003 020f 	and.w	r2, r3, #15
 801214a:	6879      	ldr	r1, [r7, #4]
 801214c:	4613      	mov	r3, r2
 801214e:	009b      	lsls	r3, r3, #2
 8012150:	4413      	add	r3, r2
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	440b      	add	r3, r1
 8012156:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801215a:	881b      	ldrh	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d104      	bne.n	801216a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012160:	6839      	ldr	r1, [r7, #0]
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f000 fbc7 	bl	80128f6 <USBD_CtlError>
                  break;
 8012168:	e041      	b.n	80121ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801216a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801216e:	2b00      	cmp	r3, #0
 8012170:	da0b      	bge.n	801218a <USBD_StdEPReq+0x2b2>
 8012172:	7bbb      	ldrb	r3, [r7, #14]
 8012174:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012178:	4613      	mov	r3, r2
 801217a:	009b      	lsls	r3, r3, #2
 801217c:	4413      	add	r3, r2
 801217e:	009b      	lsls	r3, r3, #2
 8012180:	3310      	adds	r3, #16
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	4413      	add	r3, r2
 8012186:	3304      	adds	r3, #4
 8012188:	e00b      	b.n	80121a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801218a:	7bbb      	ldrb	r3, [r7, #14]
 801218c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012190:	4613      	mov	r3, r2
 8012192:	009b      	lsls	r3, r3, #2
 8012194:	4413      	add	r3, r2
 8012196:	009b      	lsls	r3, r3, #2
 8012198:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801219c:	687a      	ldr	r2, [r7, #4]
 801219e:	4413      	add	r3, r2
 80121a0:	3304      	adds	r3, #4
 80121a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80121a4:	7bbb      	ldrb	r3, [r7, #14]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d002      	beq.n	80121b0 <USBD_StdEPReq+0x2d8>
 80121aa:	7bbb      	ldrb	r3, [r7, #14]
 80121ac:	2b80      	cmp	r3, #128	; 0x80
 80121ae:	d103      	bne.n	80121b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	2200      	movs	r2, #0
 80121b4:	601a      	str	r2, [r3, #0]
 80121b6:	e00e      	b.n	80121d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80121b8:	7bbb      	ldrb	r3, [r7, #14]
 80121ba:	4619      	mov	r1, r3
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f001 f915 	bl	80133ec <USBD_LL_IsStallEP>
 80121c2:	4603      	mov	r3, r0
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d003      	beq.n	80121d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	2201      	movs	r2, #1
 80121cc:	601a      	str	r2, [r3, #0]
 80121ce:	e002      	b.n	80121d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	2200      	movs	r2, #0
 80121d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	2202      	movs	r2, #2
 80121da:	4619      	mov	r1, r3
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f000 fbfb 	bl	80129d8 <USBD_CtlSendData>
              break;
 80121e2:	e004      	b.n	80121ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80121e4:	6839      	ldr	r1, [r7, #0]
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f000 fb85 	bl	80128f6 <USBD_CtlError>
              break;
 80121ec:	bf00      	nop
          }
          break;
 80121ee:	e004      	b.n	80121fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80121f0:	6839      	ldr	r1, [r7, #0]
 80121f2:	6878      	ldr	r0, [r7, #4]
 80121f4:	f000 fb7f 	bl	80128f6 <USBD_CtlError>
          break;
 80121f8:	bf00      	nop
      }
      break;
 80121fa:	e005      	b.n	8012208 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80121fc:	6839      	ldr	r1, [r7, #0]
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f000 fb79 	bl	80128f6 <USBD_CtlError>
      break;
 8012204:	e000      	b.n	8012208 <USBD_StdEPReq+0x330>
      break;
 8012206:	bf00      	nop
  }

  return ret;
 8012208:	7bfb      	ldrb	r3, [r7, #15]
}
 801220a:	4618      	mov	r0, r3
 801220c:	3710      	adds	r7, #16
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
	...

08012214 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b084      	sub	sp, #16
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801221e:	2300      	movs	r3, #0
 8012220:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012222:	2300      	movs	r3, #0
 8012224:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012226:	2300      	movs	r3, #0
 8012228:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801222a:	683b      	ldr	r3, [r7, #0]
 801222c:	885b      	ldrh	r3, [r3, #2]
 801222e:	0a1b      	lsrs	r3, r3, #8
 8012230:	b29b      	uxth	r3, r3
 8012232:	3b01      	subs	r3, #1
 8012234:	2b0e      	cmp	r3, #14
 8012236:	f200 8152 	bhi.w	80124de <USBD_GetDescriptor+0x2ca>
 801223a:	a201      	add	r2, pc, #4	; (adr r2, 8012240 <USBD_GetDescriptor+0x2c>)
 801223c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012240:	080122b1 	.word	0x080122b1
 8012244:	080122c9 	.word	0x080122c9
 8012248:	08012309 	.word	0x08012309
 801224c:	080124df 	.word	0x080124df
 8012250:	080124df 	.word	0x080124df
 8012254:	0801247f 	.word	0x0801247f
 8012258:	080124ab 	.word	0x080124ab
 801225c:	080124df 	.word	0x080124df
 8012260:	080124df 	.word	0x080124df
 8012264:	080124df 	.word	0x080124df
 8012268:	080124df 	.word	0x080124df
 801226c:	080124df 	.word	0x080124df
 8012270:	080124df 	.word	0x080124df
 8012274:	080124df 	.word	0x080124df
 8012278:	0801227d 	.word	0x0801227d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012282:	69db      	ldr	r3, [r3, #28]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d00b      	beq.n	80122a0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801228e:	69db      	ldr	r3, [r3, #28]
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	7c12      	ldrb	r2, [r2, #16]
 8012294:	f107 0108 	add.w	r1, r7, #8
 8012298:	4610      	mov	r0, r2
 801229a:	4798      	blx	r3
 801229c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801229e:	e126      	b.n	80124ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80122a0:	6839      	ldr	r1, [r7, #0]
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 fb27 	bl	80128f6 <USBD_CtlError>
        err++;
 80122a8:	7afb      	ldrb	r3, [r7, #11]
 80122aa:	3301      	adds	r3, #1
 80122ac:	72fb      	strb	r3, [r7, #11]
      break;
 80122ae:	e11e      	b.n	80124ee <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	687a      	ldr	r2, [r7, #4]
 80122ba:	7c12      	ldrb	r2, [r2, #16]
 80122bc:	f107 0108 	add.w	r1, r7, #8
 80122c0:	4610      	mov	r0, r2
 80122c2:	4798      	blx	r3
 80122c4:	60f8      	str	r0, [r7, #12]
      break;
 80122c6:	e112      	b.n	80124ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	7c1b      	ldrb	r3, [r3, #16]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d10d      	bne.n	80122ec <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122d8:	f107 0208 	add.w	r2, r7, #8
 80122dc:	4610      	mov	r0, r2
 80122de:	4798      	blx	r3
 80122e0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	3301      	adds	r3, #1
 80122e6:	2202      	movs	r2, #2
 80122e8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80122ea:	e100      	b.n	80124ee <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f4:	f107 0208 	add.w	r2, r7, #8
 80122f8:	4610      	mov	r0, r2
 80122fa:	4798      	blx	r3
 80122fc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	3301      	adds	r3, #1
 8012302:	2202      	movs	r2, #2
 8012304:	701a      	strb	r2, [r3, #0]
      break;
 8012306:	e0f2      	b.n	80124ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012308:	683b      	ldr	r3, [r7, #0]
 801230a:	885b      	ldrh	r3, [r3, #2]
 801230c:	b2db      	uxtb	r3, r3
 801230e:	2b05      	cmp	r3, #5
 8012310:	f200 80ac 	bhi.w	801246c <USBD_GetDescriptor+0x258>
 8012314:	a201      	add	r2, pc, #4	; (adr r2, 801231c <USBD_GetDescriptor+0x108>)
 8012316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801231a:	bf00      	nop
 801231c:	08012335 	.word	0x08012335
 8012320:	08012369 	.word	0x08012369
 8012324:	0801239d 	.word	0x0801239d
 8012328:	080123d1 	.word	0x080123d1
 801232c:	08012405 	.word	0x08012405
 8012330:	08012439 	.word	0x08012439
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d00b      	beq.n	8012358 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	687a      	ldr	r2, [r7, #4]
 801234a:	7c12      	ldrb	r2, [r2, #16]
 801234c:	f107 0108 	add.w	r1, r7, #8
 8012350:	4610      	mov	r0, r2
 8012352:	4798      	blx	r3
 8012354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012356:	e091      	b.n	801247c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012358:	6839      	ldr	r1, [r7, #0]
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f000 facb 	bl	80128f6 <USBD_CtlError>
            err++;
 8012360:	7afb      	ldrb	r3, [r7, #11]
 8012362:	3301      	adds	r3, #1
 8012364:	72fb      	strb	r3, [r7, #11]
          break;
 8012366:	e089      	b.n	801247c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801236e:	689b      	ldr	r3, [r3, #8]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d00b      	beq.n	801238c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801237a:	689b      	ldr	r3, [r3, #8]
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	7c12      	ldrb	r2, [r2, #16]
 8012380:	f107 0108 	add.w	r1, r7, #8
 8012384:	4610      	mov	r0, r2
 8012386:	4798      	blx	r3
 8012388:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801238a:	e077      	b.n	801247c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801238c:	6839      	ldr	r1, [r7, #0]
 801238e:	6878      	ldr	r0, [r7, #4]
 8012390:	f000 fab1 	bl	80128f6 <USBD_CtlError>
            err++;
 8012394:	7afb      	ldrb	r3, [r7, #11]
 8012396:	3301      	adds	r3, #1
 8012398:	72fb      	strb	r3, [r7, #11]
          break;
 801239a:	e06f      	b.n	801247c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123a2:	68db      	ldr	r3, [r3, #12]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d00b      	beq.n	80123c0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123ae:	68db      	ldr	r3, [r3, #12]
 80123b0:	687a      	ldr	r2, [r7, #4]
 80123b2:	7c12      	ldrb	r2, [r2, #16]
 80123b4:	f107 0108 	add.w	r1, r7, #8
 80123b8:	4610      	mov	r0, r2
 80123ba:	4798      	blx	r3
 80123bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80123be:	e05d      	b.n	801247c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80123c0:	6839      	ldr	r1, [r7, #0]
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f000 fa97 	bl	80128f6 <USBD_CtlError>
            err++;
 80123c8:	7afb      	ldrb	r3, [r7, #11]
 80123ca:	3301      	adds	r3, #1
 80123cc:	72fb      	strb	r3, [r7, #11]
          break;
 80123ce:	e055      	b.n	801247c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123d6:	691b      	ldr	r3, [r3, #16]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d00b      	beq.n	80123f4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80123e2:	691b      	ldr	r3, [r3, #16]
 80123e4:	687a      	ldr	r2, [r7, #4]
 80123e6:	7c12      	ldrb	r2, [r2, #16]
 80123e8:	f107 0108 	add.w	r1, r7, #8
 80123ec:	4610      	mov	r0, r2
 80123ee:	4798      	blx	r3
 80123f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80123f2:	e043      	b.n	801247c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80123f4:	6839      	ldr	r1, [r7, #0]
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f000 fa7d 	bl	80128f6 <USBD_CtlError>
            err++;
 80123fc:	7afb      	ldrb	r3, [r7, #11]
 80123fe:	3301      	adds	r3, #1
 8012400:	72fb      	strb	r3, [r7, #11]
          break;
 8012402:	e03b      	b.n	801247c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801240a:	695b      	ldr	r3, [r3, #20]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00b      	beq.n	8012428 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012416:	695b      	ldr	r3, [r3, #20]
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	7c12      	ldrb	r2, [r2, #16]
 801241c:	f107 0108 	add.w	r1, r7, #8
 8012420:	4610      	mov	r0, r2
 8012422:	4798      	blx	r3
 8012424:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012426:	e029      	b.n	801247c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012428:	6839      	ldr	r1, [r7, #0]
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f000 fa63 	bl	80128f6 <USBD_CtlError>
            err++;
 8012430:	7afb      	ldrb	r3, [r7, #11]
 8012432:	3301      	adds	r3, #1
 8012434:	72fb      	strb	r3, [r7, #11]
          break;
 8012436:	e021      	b.n	801247c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801243e:	699b      	ldr	r3, [r3, #24]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d00b      	beq.n	801245c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801244a:	699b      	ldr	r3, [r3, #24]
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	7c12      	ldrb	r2, [r2, #16]
 8012450:	f107 0108 	add.w	r1, r7, #8
 8012454:	4610      	mov	r0, r2
 8012456:	4798      	blx	r3
 8012458:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801245a:	e00f      	b.n	801247c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801245c:	6839      	ldr	r1, [r7, #0]
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f000 fa49 	bl	80128f6 <USBD_CtlError>
            err++;
 8012464:	7afb      	ldrb	r3, [r7, #11]
 8012466:	3301      	adds	r3, #1
 8012468:	72fb      	strb	r3, [r7, #11]
          break;
 801246a:	e007      	b.n	801247c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801246c:	6839      	ldr	r1, [r7, #0]
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f000 fa41 	bl	80128f6 <USBD_CtlError>
          err++;
 8012474:	7afb      	ldrb	r3, [r7, #11]
 8012476:	3301      	adds	r3, #1
 8012478:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801247a:	bf00      	nop
      }
      break;
 801247c:	e037      	b.n	80124ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	7c1b      	ldrb	r3, [r3, #16]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d109      	bne.n	801249a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801248e:	f107 0208 	add.w	r2, r7, #8
 8012492:	4610      	mov	r0, r2
 8012494:	4798      	blx	r3
 8012496:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012498:	e029      	b.n	80124ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801249a:	6839      	ldr	r1, [r7, #0]
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f000 fa2a 	bl	80128f6 <USBD_CtlError>
        err++;
 80124a2:	7afb      	ldrb	r3, [r7, #11]
 80124a4:	3301      	adds	r3, #1
 80124a6:	72fb      	strb	r3, [r7, #11]
      break;
 80124a8:	e021      	b.n	80124ee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	7c1b      	ldrb	r3, [r3, #16]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d10d      	bne.n	80124ce <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124ba:	f107 0208 	add.w	r2, r7, #8
 80124be:	4610      	mov	r0, r2
 80124c0:	4798      	blx	r3
 80124c2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	3301      	adds	r3, #1
 80124c8:	2207      	movs	r2, #7
 80124ca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80124cc:	e00f      	b.n	80124ee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80124ce:	6839      	ldr	r1, [r7, #0]
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 fa10 	bl	80128f6 <USBD_CtlError>
        err++;
 80124d6:	7afb      	ldrb	r3, [r7, #11]
 80124d8:	3301      	adds	r3, #1
 80124da:	72fb      	strb	r3, [r7, #11]
      break;
 80124dc:	e007      	b.n	80124ee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80124de:	6839      	ldr	r1, [r7, #0]
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f000 fa08 	bl	80128f6 <USBD_CtlError>
      err++;
 80124e6:	7afb      	ldrb	r3, [r7, #11]
 80124e8:	3301      	adds	r3, #1
 80124ea:	72fb      	strb	r3, [r7, #11]
      break;
 80124ec:	bf00      	nop
  }

  if (err != 0U)
 80124ee:	7afb      	ldrb	r3, [r7, #11]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d11e      	bne.n	8012532 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	88db      	ldrh	r3, [r3, #6]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d016      	beq.n	801252a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80124fc:	893b      	ldrh	r3, [r7, #8]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d00e      	beq.n	8012520 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	88da      	ldrh	r2, [r3, #6]
 8012506:	893b      	ldrh	r3, [r7, #8]
 8012508:	4293      	cmp	r3, r2
 801250a:	bf28      	it	cs
 801250c:	4613      	movcs	r3, r2
 801250e:	b29b      	uxth	r3, r3
 8012510:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012512:	893b      	ldrh	r3, [r7, #8]
 8012514:	461a      	mov	r2, r3
 8012516:	68f9      	ldr	r1, [r7, #12]
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f000 fa5d 	bl	80129d8 <USBD_CtlSendData>
 801251e:	e009      	b.n	8012534 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012520:	6839      	ldr	r1, [r7, #0]
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f000 f9e7 	bl	80128f6 <USBD_CtlError>
 8012528:	e004      	b.n	8012534 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f000 faae 	bl	8012a8c <USBD_CtlSendStatus>
 8012530:	e000      	b.n	8012534 <USBD_GetDescriptor+0x320>
    return;
 8012532:	bf00      	nop
  }
}
 8012534:	3710      	adds	r7, #16
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}
 801253a:	bf00      	nop

0801253c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012546:	683b      	ldr	r3, [r7, #0]
 8012548:	889b      	ldrh	r3, [r3, #4]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d131      	bne.n	80125b2 <USBD_SetAddress+0x76>
 801254e:	683b      	ldr	r3, [r7, #0]
 8012550:	88db      	ldrh	r3, [r3, #6]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d12d      	bne.n	80125b2 <USBD_SetAddress+0x76>
 8012556:	683b      	ldr	r3, [r7, #0]
 8012558:	885b      	ldrh	r3, [r3, #2]
 801255a:	2b7f      	cmp	r3, #127	; 0x7f
 801255c:	d829      	bhi.n	80125b2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801255e:	683b      	ldr	r3, [r7, #0]
 8012560:	885b      	ldrh	r3, [r3, #2]
 8012562:	b2db      	uxtb	r3, r3
 8012564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012568:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012570:	b2db      	uxtb	r3, r3
 8012572:	2b03      	cmp	r3, #3
 8012574:	d104      	bne.n	8012580 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012576:	6839      	ldr	r1, [r7, #0]
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f000 f9bc 	bl	80128f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801257e:	e01d      	b.n	80125bc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	7bfa      	ldrb	r2, [r7, #15]
 8012584:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012588:	7bfb      	ldrb	r3, [r7, #15]
 801258a:	4619      	mov	r1, r3
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f000 ff59 	bl	8013444 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	f000 fa7a 	bl	8012a8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012598:	7bfb      	ldrb	r3, [r7, #15]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d004      	beq.n	80125a8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2202      	movs	r2, #2
 80125a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125a6:	e009      	b.n	80125bc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2201      	movs	r2, #1
 80125ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125b0:	e004      	b.n	80125bc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80125b2:	6839      	ldr	r1, [r7, #0]
 80125b4:	6878      	ldr	r0, [r7, #4]
 80125b6:	f000 f99e 	bl	80128f6 <USBD_CtlError>
  }
}
 80125ba:	bf00      	nop
 80125bc:	bf00      	nop
 80125be:	3710      	adds	r7, #16
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80125ce:	2300      	movs	r3, #0
 80125d0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	885b      	ldrh	r3, [r3, #2]
 80125d6:	b2da      	uxtb	r2, r3
 80125d8:	4b4e      	ldr	r3, [pc, #312]	; (8012714 <USBD_SetConfig+0x150>)
 80125da:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80125dc:	4b4d      	ldr	r3, [pc, #308]	; (8012714 <USBD_SetConfig+0x150>)
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	2b01      	cmp	r3, #1
 80125e2:	d905      	bls.n	80125f0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80125e4:	6839      	ldr	r1, [r7, #0]
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f000 f985 	bl	80128f6 <USBD_CtlError>
    return USBD_FAIL;
 80125ec:	2303      	movs	r3, #3
 80125ee:	e08c      	b.n	801270a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	2b02      	cmp	r3, #2
 80125fa:	d002      	beq.n	8012602 <USBD_SetConfig+0x3e>
 80125fc:	2b03      	cmp	r3, #3
 80125fe:	d029      	beq.n	8012654 <USBD_SetConfig+0x90>
 8012600:	e075      	b.n	80126ee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012602:	4b44      	ldr	r3, [pc, #272]	; (8012714 <USBD_SetConfig+0x150>)
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d020      	beq.n	801264c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801260a:	4b42      	ldr	r3, [pc, #264]	; (8012714 <USBD_SetConfig+0x150>)
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	461a      	mov	r2, r3
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012614:	4b3f      	ldr	r3, [pc, #252]	; (8012714 <USBD_SetConfig+0x150>)
 8012616:	781b      	ldrb	r3, [r3, #0]
 8012618:	4619      	mov	r1, r3
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f7fe ffb7 	bl	801158e <USBD_SetClassConfig>
 8012620:	4603      	mov	r3, r0
 8012622:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012624:	7bfb      	ldrb	r3, [r7, #15]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d008      	beq.n	801263c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801262a:	6839      	ldr	r1, [r7, #0]
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f000 f962 	bl	80128f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2202      	movs	r2, #2
 8012636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801263a:	e065      	b.n	8012708 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801263c:	6878      	ldr	r0, [r7, #4]
 801263e:	f000 fa25 	bl	8012a8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2203      	movs	r2, #3
 8012646:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801264a:	e05d      	b.n	8012708 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801264c:	6878      	ldr	r0, [r7, #4]
 801264e:	f000 fa1d 	bl	8012a8c <USBD_CtlSendStatus>
      break;
 8012652:	e059      	b.n	8012708 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012654:	4b2f      	ldr	r3, [pc, #188]	; (8012714 <USBD_SetConfig+0x150>)
 8012656:	781b      	ldrb	r3, [r3, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d112      	bne.n	8012682 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	2202      	movs	r2, #2
 8012660:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012664:	4b2b      	ldr	r3, [pc, #172]	; (8012714 <USBD_SetConfig+0x150>)
 8012666:	781b      	ldrb	r3, [r3, #0]
 8012668:	461a      	mov	r2, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801266e:	4b29      	ldr	r3, [pc, #164]	; (8012714 <USBD_SetConfig+0x150>)
 8012670:	781b      	ldrb	r3, [r3, #0]
 8012672:	4619      	mov	r1, r3
 8012674:	6878      	ldr	r0, [r7, #4]
 8012676:	f7fe ffa6 	bl	80115c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801267a:	6878      	ldr	r0, [r7, #4]
 801267c:	f000 fa06 	bl	8012a8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012680:	e042      	b.n	8012708 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012682:	4b24      	ldr	r3, [pc, #144]	; (8012714 <USBD_SetConfig+0x150>)
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	461a      	mov	r2, r3
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	685b      	ldr	r3, [r3, #4]
 801268c:	429a      	cmp	r2, r3
 801268e:	d02a      	beq.n	80126e6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	685b      	ldr	r3, [r3, #4]
 8012694:	b2db      	uxtb	r3, r3
 8012696:	4619      	mov	r1, r3
 8012698:	6878      	ldr	r0, [r7, #4]
 801269a:	f7fe ff94 	bl	80115c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801269e:	4b1d      	ldr	r3, [pc, #116]	; (8012714 <USBD_SetConfig+0x150>)
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	461a      	mov	r2, r3
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80126a8:	4b1a      	ldr	r3, [pc, #104]	; (8012714 <USBD_SetConfig+0x150>)
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	4619      	mov	r1, r3
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7fe ff6d 	bl	801158e <USBD_SetClassConfig>
 80126b4:	4603      	mov	r3, r0
 80126b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80126b8:	7bfb      	ldrb	r3, [r7, #15]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d00f      	beq.n	80126de <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80126be:	6839      	ldr	r1, [r7, #0]
 80126c0:	6878      	ldr	r0, [r7, #4]
 80126c2:	f000 f918 	bl	80128f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	b2db      	uxtb	r3, r3
 80126cc:	4619      	mov	r1, r3
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f7fe ff79 	bl	80115c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2202      	movs	r2, #2
 80126d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80126dc:	e014      	b.n	8012708 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f000 f9d4 	bl	8012a8c <USBD_CtlSendStatus>
      break;
 80126e4:	e010      	b.n	8012708 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80126e6:	6878      	ldr	r0, [r7, #4]
 80126e8:	f000 f9d0 	bl	8012a8c <USBD_CtlSendStatus>
      break;
 80126ec:	e00c      	b.n	8012708 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80126ee:	6839      	ldr	r1, [r7, #0]
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f000 f900 	bl	80128f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80126f6:	4b07      	ldr	r3, [pc, #28]	; (8012714 <USBD_SetConfig+0x150>)
 80126f8:	781b      	ldrb	r3, [r3, #0]
 80126fa:	4619      	mov	r1, r3
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f7fe ff62 	bl	80115c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012702:	2303      	movs	r3, #3
 8012704:	73fb      	strb	r3, [r7, #15]
      break;
 8012706:	bf00      	nop
  }

  return ret;
 8012708:	7bfb      	ldrb	r3, [r7, #15]
}
 801270a:	4618      	mov	r0, r3
 801270c:	3710      	adds	r7, #16
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}
 8012712:	bf00      	nop
 8012714:	24000bcc 	.word	0x24000bcc

08012718 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012718:	b580      	push	{r7, lr}
 801271a:	b082      	sub	sp, #8
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
 8012720:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	88db      	ldrh	r3, [r3, #6]
 8012726:	2b01      	cmp	r3, #1
 8012728:	d004      	beq.n	8012734 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801272a:	6839      	ldr	r1, [r7, #0]
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f000 f8e2 	bl	80128f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012732:	e023      	b.n	801277c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801273a:	b2db      	uxtb	r3, r3
 801273c:	2b02      	cmp	r3, #2
 801273e:	dc02      	bgt.n	8012746 <USBD_GetConfig+0x2e>
 8012740:	2b00      	cmp	r3, #0
 8012742:	dc03      	bgt.n	801274c <USBD_GetConfig+0x34>
 8012744:	e015      	b.n	8012772 <USBD_GetConfig+0x5a>
 8012746:	2b03      	cmp	r3, #3
 8012748:	d00b      	beq.n	8012762 <USBD_GetConfig+0x4a>
 801274a:	e012      	b.n	8012772 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2200      	movs	r2, #0
 8012750:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	3308      	adds	r3, #8
 8012756:	2201      	movs	r2, #1
 8012758:	4619      	mov	r1, r3
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f000 f93c 	bl	80129d8 <USBD_CtlSendData>
        break;
 8012760:	e00c      	b.n	801277c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	3304      	adds	r3, #4
 8012766:	2201      	movs	r2, #1
 8012768:	4619      	mov	r1, r3
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f000 f934 	bl	80129d8 <USBD_CtlSendData>
        break;
 8012770:	e004      	b.n	801277c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012772:	6839      	ldr	r1, [r7, #0]
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f000 f8be 	bl	80128f6 <USBD_CtlError>
        break;
 801277a:	bf00      	nop
}
 801277c:	bf00      	nop
 801277e:	3708      	adds	r7, #8
 8012780:	46bd      	mov	sp, r7
 8012782:	bd80      	pop	{r7, pc}

08012784 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b082      	sub	sp, #8
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
 801278c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012794:	b2db      	uxtb	r3, r3
 8012796:	3b01      	subs	r3, #1
 8012798:	2b02      	cmp	r3, #2
 801279a:	d81e      	bhi.n	80127da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	88db      	ldrh	r3, [r3, #6]
 80127a0:	2b02      	cmp	r3, #2
 80127a2:	d004      	beq.n	80127ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80127a4:	6839      	ldr	r1, [r7, #0]
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 f8a5 	bl	80128f6 <USBD_CtlError>
        break;
 80127ac:	e01a      	b.n	80127e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2201      	movs	r2, #1
 80127b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d005      	beq.n	80127ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	68db      	ldr	r3, [r3, #12]
 80127c2:	f043 0202 	orr.w	r2, r3, #2
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	330c      	adds	r3, #12
 80127ce:	2202      	movs	r2, #2
 80127d0:	4619      	mov	r1, r3
 80127d2:	6878      	ldr	r0, [r7, #4]
 80127d4:	f000 f900 	bl	80129d8 <USBD_CtlSendData>
      break;
 80127d8:	e004      	b.n	80127e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80127da:	6839      	ldr	r1, [r7, #0]
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f000 f88a 	bl	80128f6 <USBD_CtlError>
      break;
 80127e2:	bf00      	nop
  }
}
 80127e4:	bf00      	nop
 80127e6:	3708      	adds	r7, #8
 80127e8:	46bd      	mov	sp, r7
 80127ea:	bd80      	pop	{r7, pc}

080127ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b082      	sub	sp, #8
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
 80127f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	885b      	ldrh	r3, [r3, #2]
 80127fa:	2b01      	cmp	r3, #1
 80127fc:	d107      	bne.n	801280e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	2201      	movs	r2, #1
 8012802:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f000 f940 	bl	8012a8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801280c:	e013      	b.n	8012836 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	885b      	ldrh	r3, [r3, #2]
 8012812:	2b02      	cmp	r3, #2
 8012814:	d10b      	bne.n	801282e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	889b      	ldrh	r3, [r3, #4]
 801281a:	0a1b      	lsrs	r3, r3, #8
 801281c:	b29b      	uxth	r3, r3
 801281e:	b2da      	uxtb	r2, r3
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f000 f930 	bl	8012a8c <USBD_CtlSendStatus>
}
 801282c:	e003      	b.n	8012836 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801282e:	6839      	ldr	r1, [r7, #0]
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 f860 	bl	80128f6 <USBD_CtlError>
}
 8012836:	bf00      	nop
 8012838:	3708      	adds	r7, #8
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}

0801283e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801283e:	b580      	push	{r7, lr}
 8012840:	b082      	sub	sp, #8
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
 8012846:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801284e:	b2db      	uxtb	r3, r3
 8012850:	3b01      	subs	r3, #1
 8012852:	2b02      	cmp	r3, #2
 8012854:	d80b      	bhi.n	801286e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	885b      	ldrh	r3, [r3, #2]
 801285a:	2b01      	cmp	r3, #1
 801285c:	d10c      	bne.n	8012878 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2200      	movs	r2, #0
 8012862:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f000 f910 	bl	8012a8c <USBD_CtlSendStatus>
      }
      break;
 801286c:	e004      	b.n	8012878 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801286e:	6839      	ldr	r1, [r7, #0]
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f000 f840 	bl	80128f6 <USBD_CtlError>
      break;
 8012876:	e000      	b.n	801287a <USBD_ClrFeature+0x3c>
      break;
 8012878:	bf00      	nop
  }
}
 801287a:	bf00      	nop
 801287c:	3708      	adds	r7, #8
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}

08012882 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012882:	b580      	push	{r7, lr}
 8012884:	b084      	sub	sp, #16
 8012886:	af00      	add	r7, sp, #0
 8012888:	6078      	str	r0, [r7, #4]
 801288a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	781a      	ldrb	r2, [r3, #0]
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	3301      	adds	r3, #1
 801289c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	781a      	ldrb	r2, [r3, #0]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	3301      	adds	r3, #1
 80128aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80128ac:	68f8      	ldr	r0, [r7, #12]
 80128ae:	f7ff fa17 	bl	8011ce0 <SWAPBYTE>
 80128b2:	4603      	mov	r3, r0
 80128b4:	461a      	mov	r2, r3
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	3301      	adds	r3, #1
 80128be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	3301      	adds	r3, #1
 80128c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80128c6:	68f8      	ldr	r0, [r7, #12]
 80128c8:	f7ff fa0a 	bl	8011ce0 <SWAPBYTE>
 80128cc:	4603      	mov	r3, r0
 80128ce:	461a      	mov	r2, r3
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80128d4:	68fb      	ldr	r3, [r7, #12]
 80128d6:	3301      	adds	r3, #1
 80128d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	3301      	adds	r3, #1
 80128de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80128e0:	68f8      	ldr	r0, [r7, #12]
 80128e2:	f7ff f9fd 	bl	8011ce0 <SWAPBYTE>
 80128e6:	4603      	mov	r3, r0
 80128e8:	461a      	mov	r2, r3
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	80da      	strh	r2, [r3, #6]
}
 80128ee:	bf00      	nop
 80128f0:	3710      	adds	r7, #16
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bd80      	pop	{r7, pc}

080128f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128f6:	b580      	push	{r7, lr}
 80128f8:	b082      	sub	sp, #8
 80128fa:	af00      	add	r7, sp, #0
 80128fc:	6078      	str	r0, [r7, #4]
 80128fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012900:	2180      	movs	r1, #128	; 0x80
 8012902:	6878      	ldr	r0, [r7, #4]
 8012904:	f000 fd34 	bl	8013370 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012908:	2100      	movs	r1, #0
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f000 fd30 	bl	8013370 <USBD_LL_StallEP>
}
 8012910:	bf00      	nop
 8012912:	3708      	adds	r7, #8
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b086      	sub	sp, #24
 801291c:	af00      	add	r7, sp, #0
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012924:	2300      	movs	r3, #0
 8012926:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d036      	beq.n	801299c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012932:	6938      	ldr	r0, [r7, #16]
 8012934:	f000 f836 	bl	80129a4 <USBD_GetLen>
 8012938:	4603      	mov	r3, r0
 801293a:	3301      	adds	r3, #1
 801293c:	b29b      	uxth	r3, r3
 801293e:	005b      	lsls	r3, r3, #1
 8012940:	b29a      	uxth	r2, r3
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012946:	7dfb      	ldrb	r3, [r7, #23]
 8012948:	68ba      	ldr	r2, [r7, #8]
 801294a:	4413      	add	r3, r2
 801294c:	687a      	ldr	r2, [r7, #4]
 801294e:	7812      	ldrb	r2, [r2, #0]
 8012950:	701a      	strb	r2, [r3, #0]
  idx++;
 8012952:	7dfb      	ldrb	r3, [r7, #23]
 8012954:	3301      	adds	r3, #1
 8012956:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012958:	7dfb      	ldrb	r3, [r7, #23]
 801295a:	68ba      	ldr	r2, [r7, #8]
 801295c:	4413      	add	r3, r2
 801295e:	2203      	movs	r2, #3
 8012960:	701a      	strb	r2, [r3, #0]
  idx++;
 8012962:	7dfb      	ldrb	r3, [r7, #23]
 8012964:	3301      	adds	r3, #1
 8012966:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012968:	e013      	b.n	8012992 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801296a:	7dfb      	ldrb	r3, [r7, #23]
 801296c:	68ba      	ldr	r2, [r7, #8]
 801296e:	4413      	add	r3, r2
 8012970:	693a      	ldr	r2, [r7, #16]
 8012972:	7812      	ldrb	r2, [r2, #0]
 8012974:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	3301      	adds	r3, #1
 801297a:	613b      	str	r3, [r7, #16]
    idx++;
 801297c:	7dfb      	ldrb	r3, [r7, #23]
 801297e:	3301      	adds	r3, #1
 8012980:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012982:	7dfb      	ldrb	r3, [r7, #23]
 8012984:	68ba      	ldr	r2, [r7, #8]
 8012986:	4413      	add	r3, r2
 8012988:	2200      	movs	r2, #0
 801298a:	701a      	strb	r2, [r3, #0]
    idx++;
 801298c:	7dfb      	ldrb	r3, [r7, #23]
 801298e:	3301      	adds	r3, #1
 8012990:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	781b      	ldrb	r3, [r3, #0]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d1e7      	bne.n	801296a <USBD_GetString+0x52>
 801299a:	e000      	b.n	801299e <USBD_GetString+0x86>
    return;
 801299c:	bf00      	nop
  }
}
 801299e:	3718      	adds	r7, #24
 80129a0:	46bd      	mov	sp, r7
 80129a2:	bd80      	pop	{r7, pc}

080129a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80129a4:	b480      	push	{r7}
 80129a6:	b085      	sub	sp, #20
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80129ac:	2300      	movs	r3, #0
 80129ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80129b4:	e005      	b.n	80129c2 <USBD_GetLen+0x1e>
  {
    len++;
 80129b6:	7bfb      	ldrb	r3, [r7, #15]
 80129b8:	3301      	adds	r3, #1
 80129ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	3301      	adds	r3, #1
 80129c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	781b      	ldrb	r3, [r3, #0]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d1f5      	bne.n	80129b6 <USBD_GetLen+0x12>
  }

  return len;
 80129ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80129cc:	4618      	mov	r0, r3
 80129ce:	3714      	adds	r7, #20
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	60f8      	str	r0, [r7, #12]
 80129e0:	60b9      	str	r1, [r7, #8]
 80129e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	2202      	movs	r2, #2
 80129e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	687a      	ldr	r2, [r7, #4]
 80129f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80129f2:	68fb      	ldr	r3, [r7, #12]
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	68ba      	ldr	r2, [r7, #8]
 80129fc:	2100      	movs	r1, #0
 80129fe:	68f8      	ldr	r0, [r7, #12]
 8012a00:	f000 fd3f 	bl	8013482 <USBD_LL_Transmit>

  return USBD_OK;
 8012a04:	2300      	movs	r3, #0
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3710      	adds	r7, #16
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}

08012a0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b084      	sub	sp, #16
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	60f8      	str	r0, [r7, #12]
 8012a16:	60b9      	str	r1, [r7, #8]
 8012a18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	68ba      	ldr	r2, [r7, #8]
 8012a1e:	2100      	movs	r1, #0
 8012a20:	68f8      	ldr	r0, [r7, #12]
 8012a22:	f000 fd2e 	bl	8013482 <USBD_LL_Transmit>

  return USBD_OK;
 8012a26:	2300      	movs	r3, #0
}
 8012a28:	4618      	mov	r0, r3
 8012a2a:	3710      	adds	r7, #16
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b084      	sub	sp, #16
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	60f8      	str	r0, [r7, #12]
 8012a38:	60b9      	str	r1, [r7, #8]
 8012a3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	2203      	movs	r2, #3
 8012a40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	687a      	ldr	r2, [r7, #4]
 8012a48:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012a4c:	68fb      	ldr	r3, [r7, #12]
 8012a4e:	687a      	ldr	r2, [r7, #4]
 8012a50:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	68ba      	ldr	r2, [r7, #8]
 8012a58:	2100      	movs	r1, #0
 8012a5a:	68f8      	ldr	r0, [r7, #12]
 8012a5c:	f000 fd32 	bl	80134c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012a60:	2300      	movs	r3, #0
}
 8012a62:	4618      	mov	r0, r3
 8012a64:	3710      	adds	r7, #16
 8012a66:	46bd      	mov	sp, r7
 8012a68:	bd80      	pop	{r7, pc}

08012a6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012a6a:	b580      	push	{r7, lr}
 8012a6c:	b084      	sub	sp, #16
 8012a6e:	af00      	add	r7, sp, #0
 8012a70:	60f8      	str	r0, [r7, #12]
 8012a72:	60b9      	str	r1, [r7, #8]
 8012a74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	68ba      	ldr	r2, [r7, #8]
 8012a7a:	2100      	movs	r1, #0
 8012a7c:	68f8      	ldr	r0, [r7, #12]
 8012a7e:	f000 fd21 	bl	80134c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012a82:	2300      	movs	r3, #0
}
 8012a84:	4618      	mov	r0, r3
 8012a86:	3710      	adds	r7, #16
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}

08012a8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012a8c:	b580      	push	{r7, lr}
 8012a8e:	b082      	sub	sp, #8
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2204      	movs	r2, #4
 8012a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	2100      	movs	r1, #0
 8012aa2:	6878      	ldr	r0, [r7, #4]
 8012aa4:	f000 fced 	bl	8013482 <USBD_LL_Transmit>

  return USBD_OK;
 8012aa8:	2300      	movs	r3, #0
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3708      	adds	r7, #8
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}

08012ab2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012ab2:	b580      	push	{r7, lr}
 8012ab4:	b082      	sub	sp, #8
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	2205      	movs	r2, #5
 8012abe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	2100      	movs	r1, #0
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f000 fcfb 	bl	80134c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012ace:	2300      	movs	r3, #0
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3708      	adds	r7, #8
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b087      	sub	sp, #28
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	60f8      	str	r0, [r7, #12]
 8012ae0:	60b9      	str	r1, [r7, #8]
 8012ae2:	4613      	mov	r3, r2
 8012ae4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012aea:	2300      	movs	r3, #0
 8012aec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012aee:	4b1f      	ldr	r3, [pc, #124]	; (8012b6c <FATFS_LinkDriverEx+0x94>)
 8012af0:	7a5b      	ldrb	r3, [r3, #9]
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d131      	bne.n	8012b5c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012af8:	4b1c      	ldr	r3, [pc, #112]	; (8012b6c <FATFS_LinkDriverEx+0x94>)
 8012afa:	7a5b      	ldrb	r3, [r3, #9]
 8012afc:	b2db      	uxtb	r3, r3
 8012afe:	461a      	mov	r2, r3
 8012b00:	4b1a      	ldr	r3, [pc, #104]	; (8012b6c <FATFS_LinkDriverEx+0x94>)
 8012b02:	2100      	movs	r1, #0
 8012b04:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012b06:	4b19      	ldr	r3, [pc, #100]	; (8012b6c <FATFS_LinkDriverEx+0x94>)
 8012b08:	7a5b      	ldrb	r3, [r3, #9]
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	4a17      	ldr	r2, [pc, #92]	; (8012b6c <FATFS_LinkDriverEx+0x94>)
 8012b0e:	009b      	lsls	r3, r3, #2
 8012b10:	4413      	add	r3, r2
 8012b12:	68fa      	ldr	r2, [r7, #12]
 8012b14:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012b16:	4b15      	ldr	r3, [pc, #84]	; (8012b6c <FATFS_LinkDriverEx+0x94>)
 8012b18:	7a5b      	ldrb	r3, [r3, #9]
 8012b1a:	b2db      	uxtb	r3, r3
 8012b1c:	461a      	mov	r2, r3
 8012b1e:	4b13      	ldr	r3, [pc, #76]	; (8012b6c <FATFS_LinkDriverEx+0x94>)
 8012b20:	4413      	add	r3, r2
 8012b22:	79fa      	ldrb	r2, [r7, #7]
 8012b24:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012b26:	4b11      	ldr	r3, [pc, #68]	; (8012b6c <FATFS_LinkDriverEx+0x94>)
 8012b28:	7a5b      	ldrb	r3, [r3, #9]
 8012b2a:	b2db      	uxtb	r3, r3
 8012b2c:	1c5a      	adds	r2, r3, #1
 8012b2e:	b2d1      	uxtb	r1, r2
 8012b30:	4a0e      	ldr	r2, [pc, #56]	; (8012b6c <FATFS_LinkDriverEx+0x94>)
 8012b32:	7251      	strb	r1, [r2, #9]
 8012b34:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012b36:	7dbb      	ldrb	r3, [r7, #22]
 8012b38:	3330      	adds	r3, #48	; 0x30
 8012b3a:	b2da      	uxtb	r2, r3
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	3301      	adds	r3, #1
 8012b44:	223a      	movs	r2, #58	; 0x3a
 8012b46:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	3302      	adds	r3, #2
 8012b4c:	222f      	movs	r2, #47	; 0x2f
 8012b4e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	3303      	adds	r3, #3
 8012b54:	2200      	movs	r2, #0
 8012b56:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012b58:	2300      	movs	r3, #0
 8012b5a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	371c      	adds	r7, #28
 8012b62:	46bd      	mov	sp, r7
 8012b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b68:	4770      	bx	lr
 8012b6a:	bf00      	nop
 8012b6c:	24000bd0 	.word	0x24000bd0

08012b70 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b082      	sub	sp, #8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
 8012b78:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	6839      	ldr	r1, [r7, #0]
 8012b7e:	6878      	ldr	r0, [r7, #4]
 8012b80:	f7ff ffaa 	bl	8012ad8 <FATFS_LinkDriverEx>
 8012b84:	4603      	mov	r3, r0
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	3708      	adds	r7, #8
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}
	...

08012b90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8012b94:	2201      	movs	r2, #1
 8012b96:	4912      	ldr	r1, [pc, #72]	; (8012be0 <MX_USB_DEVICE_Init+0x50>)
 8012b98:	4812      	ldr	r0, [pc, #72]	; (8012be4 <MX_USB_DEVICE_Init+0x54>)
 8012b9a:	f7fe fc7b 	bl	8011494 <USBD_Init>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d001      	beq.n	8012ba8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012ba4:	f7ee fdfa 	bl	800179c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8012ba8:	490f      	ldr	r1, [pc, #60]	; (8012be8 <MX_USB_DEVICE_Init+0x58>)
 8012baa:	480e      	ldr	r0, [pc, #56]	; (8012be4 <MX_USB_DEVICE_Init+0x54>)
 8012bac:	f7fe fca2 	bl	80114f4 <USBD_RegisterClass>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d001      	beq.n	8012bba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012bb6:	f7ee fdf1 	bl	800179c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8012bba:	490c      	ldr	r1, [pc, #48]	; (8012bec <MX_USB_DEVICE_Init+0x5c>)
 8012bbc:	4809      	ldr	r0, [pc, #36]	; (8012be4 <MX_USB_DEVICE_Init+0x54>)
 8012bbe:	f7fe fb99 	bl	80112f4 <USBD_CDC_RegisterInterface>
 8012bc2:	4603      	mov	r3, r0
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d001      	beq.n	8012bcc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012bc8:	f7ee fde8 	bl	800179c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8012bcc:	4805      	ldr	r0, [pc, #20]	; (8012be4 <MX_USB_DEVICE_Init+0x54>)
 8012bce:	f7fe fcc7 	bl	8011560 <USBD_Start>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d001      	beq.n	8012bdc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012bd8:	f7ee fde0 	bl	800179c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012bdc:	bf00      	nop
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	240000c4 	.word	0x240000c4
 8012be4:	24000bdc 	.word	0x24000bdc
 8012be8:	24000030 	.word	0x24000030
 8012bec:	240000b0 	.word	0x240000b0

08012bf0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	4905      	ldr	r1, [pc, #20]	; (8012c0c <CDC_Init_HS+0x1c>)
 8012bf8:	4805      	ldr	r0, [pc, #20]	; (8012c10 <CDC_Init_HS+0x20>)
 8012bfa:	f7fe fb95 	bl	8011328 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8012bfe:	4905      	ldr	r1, [pc, #20]	; (8012c14 <CDC_Init_HS+0x24>)
 8012c00:	4803      	ldr	r0, [pc, #12]	; (8012c10 <CDC_Init_HS+0x20>)
 8012c02:	f7fe fbb3 	bl	801136c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012c06:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012c08:	4618      	mov	r0, r3
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	240016b8 	.word	0x240016b8
 8012c10:	24000bdc 	.word	0x24000bdc
 8012c14:	24000eb8 	.word	0x24000eb8

08012c18 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8012c18:	b480      	push	{r7}
 8012c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012c1c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	46bd      	mov	sp, r7
 8012c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c26:	4770      	bx	lr

08012c28 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012c28:	b480      	push	{r7}
 8012c2a:	b083      	sub	sp, #12
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	4603      	mov	r3, r0
 8012c30:	6039      	str	r1, [r7, #0]
 8012c32:	71fb      	strb	r3, [r7, #7]
 8012c34:	4613      	mov	r3, r2
 8012c36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8012c38:	79fb      	ldrb	r3, [r7, #7]
 8012c3a:	2b23      	cmp	r3, #35	; 0x23
 8012c3c:	d84a      	bhi.n	8012cd4 <CDC_Control_HS+0xac>
 8012c3e:	a201      	add	r2, pc, #4	; (adr r2, 8012c44 <CDC_Control_HS+0x1c>)
 8012c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c44:	08012cd5 	.word	0x08012cd5
 8012c48:	08012cd5 	.word	0x08012cd5
 8012c4c:	08012cd5 	.word	0x08012cd5
 8012c50:	08012cd5 	.word	0x08012cd5
 8012c54:	08012cd5 	.word	0x08012cd5
 8012c58:	08012cd5 	.word	0x08012cd5
 8012c5c:	08012cd5 	.word	0x08012cd5
 8012c60:	08012cd5 	.word	0x08012cd5
 8012c64:	08012cd5 	.word	0x08012cd5
 8012c68:	08012cd5 	.word	0x08012cd5
 8012c6c:	08012cd5 	.word	0x08012cd5
 8012c70:	08012cd5 	.word	0x08012cd5
 8012c74:	08012cd5 	.word	0x08012cd5
 8012c78:	08012cd5 	.word	0x08012cd5
 8012c7c:	08012cd5 	.word	0x08012cd5
 8012c80:	08012cd5 	.word	0x08012cd5
 8012c84:	08012cd5 	.word	0x08012cd5
 8012c88:	08012cd5 	.word	0x08012cd5
 8012c8c:	08012cd5 	.word	0x08012cd5
 8012c90:	08012cd5 	.word	0x08012cd5
 8012c94:	08012cd5 	.word	0x08012cd5
 8012c98:	08012cd5 	.word	0x08012cd5
 8012c9c:	08012cd5 	.word	0x08012cd5
 8012ca0:	08012cd5 	.word	0x08012cd5
 8012ca4:	08012cd5 	.word	0x08012cd5
 8012ca8:	08012cd5 	.word	0x08012cd5
 8012cac:	08012cd5 	.word	0x08012cd5
 8012cb0:	08012cd5 	.word	0x08012cd5
 8012cb4:	08012cd5 	.word	0x08012cd5
 8012cb8:	08012cd5 	.word	0x08012cd5
 8012cbc:	08012cd5 	.word	0x08012cd5
 8012cc0:	08012cd5 	.word	0x08012cd5
 8012cc4:	08012cd5 	.word	0x08012cd5
 8012cc8:	08012cd5 	.word	0x08012cd5
 8012ccc:	08012cd5 	.word	0x08012cd5
 8012cd0:	08012cd5 	.word	0x08012cd5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012cd4:	bf00      	nop
  }

  return (USBD_OK);
 8012cd6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8012cd8:	4618      	mov	r0, r3
 8012cda:	370c      	adds	r7, #12
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr

08012ce4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b082      	sub	sp, #8
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	6078      	str	r0, [r7, #4]
 8012cec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8012cee:	6879      	ldr	r1, [r7, #4]
 8012cf0:	4805      	ldr	r0, [pc, #20]	; (8012d08 <CDC_Receive_HS+0x24>)
 8012cf2:	f7fe fb3b 	bl	801136c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8012cf6:	4804      	ldr	r0, [pc, #16]	; (8012d08 <CDC_Receive_HS+0x24>)
 8012cf8:	f7fe fb96 	bl	8011428 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8012cfc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8012cfe:	4618      	mov	r0, r3
 8012d00:	3708      	adds	r7, #8
 8012d02:	46bd      	mov	sp, r7
 8012d04:	bd80      	pop	{r7, pc}
 8012d06:	bf00      	nop
 8012d08:	24000bdc 	.word	0x24000bdc

08012d0c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b084      	sub	sp, #16
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
 8012d14:	460b      	mov	r3, r1
 8012d16:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012d18:	2300      	movs	r3, #0
 8012d1a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8012d1c:	4b0d      	ldr	r3, [pc, #52]	; (8012d54 <CDC_Transmit_HS+0x48>)
 8012d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012d22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d001      	beq.n	8012d32 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8012d2e:	2301      	movs	r3, #1
 8012d30:	e00b      	b.n	8012d4a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8012d32:	887b      	ldrh	r3, [r7, #2]
 8012d34:	461a      	mov	r2, r3
 8012d36:	6879      	ldr	r1, [r7, #4]
 8012d38:	4806      	ldr	r0, [pc, #24]	; (8012d54 <CDC_Transmit_HS+0x48>)
 8012d3a:	f7fe faf5 	bl	8011328 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8012d3e:	4805      	ldr	r0, [pc, #20]	; (8012d54 <CDC_Transmit_HS+0x48>)
 8012d40:	f7fe fb32 	bl	80113a8 <USBD_CDC_TransmitPacket>
 8012d44:	4603      	mov	r3, r0
 8012d46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8012d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3710      	adds	r7, #16
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	24000bdc 	.word	0x24000bdc

08012d58 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012d58:	b480      	push	{r7}
 8012d5a:	b087      	sub	sp, #28
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	60f8      	str	r0, [r7, #12]
 8012d60:	60b9      	str	r1, [r7, #8]
 8012d62:	4613      	mov	r3, r2
 8012d64:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012d66:	2300      	movs	r3, #0
 8012d68:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8012d6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012d6e:	4618      	mov	r0, r3
 8012d70:	371c      	adds	r7, #28
 8012d72:	46bd      	mov	sp, r7
 8012d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d78:	4770      	bx	lr
	...

08012d7c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	b083      	sub	sp, #12
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	4603      	mov	r3, r0
 8012d84:	6039      	str	r1, [r7, #0]
 8012d86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	2212      	movs	r2, #18
 8012d8c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8012d8e:	4b03      	ldr	r3, [pc, #12]	; (8012d9c <USBD_HS_DeviceDescriptor+0x20>)
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	370c      	adds	r7, #12
 8012d94:	46bd      	mov	sp, r7
 8012d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9a:	4770      	bx	lr
 8012d9c:	240000e4 	.word	0x240000e4

08012da0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012da0:	b480      	push	{r7}
 8012da2:	b083      	sub	sp, #12
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	4603      	mov	r3, r0
 8012da8:	6039      	str	r1, [r7, #0]
 8012daa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	2204      	movs	r2, #4
 8012db0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012db2:	4b03      	ldr	r3, [pc, #12]	; (8012dc0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	370c      	adds	r7, #12
 8012db8:	46bd      	mov	sp, r7
 8012dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbe:	4770      	bx	lr
 8012dc0:	240000f8 	.word	0x240000f8

08012dc4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b082      	sub	sp, #8
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	4603      	mov	r3, r0
 8012dcc:	6039      	str	r1, [r7, #0]
 8012dce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012dd0:	79fb      	ldrb	r3, [r7, #7]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d105      	bne.n	8012de2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012dd6:	683a      	ldr	r2, [r7, #0]
 8012dd8:	4907      	ldr	r1, [pc, #28]	; (8012df8 <USBD_HS_ProductStrDescriptor+0x34>)
 8012dda:	4808      	ldr	r0, [pc, #32]	; (8012dfc <USBD_HS_ProductStrDescriptor+0x38>)
 8012ddc:	f7ff fd9c 	bl	8012918 <USBD_GetString>
 8012de0:	e004      	b.n	8012dec <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012de2:	683a      	ldr	r2, [r7, #0]
 8012de4:	4904      	ldr	r1, [pc, #16]	; (8012df8 <USBD_HS_ProductStrDescriptor+0x34>)
 8012de6:	4805      	ldr	r0, [pc, #20]	; (8012dfc <USBD_HS_ProductStrDescriptor+0x38>)
 8012de8:	f7ff fd96 	bl	8012918 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012dec:	4b02      	ldr	r3, [pc, #8]	; (8012df8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8012dee:	4618      	mov	r0, r3
 8012df0:	3708      	adds	r7, #8
 8012df2:	46bd      	mov	sp, r7
 8012df4:	bd80      	pop	{r7, pc}
 8012df6:	bf00      	nop
 8012df8:	24001eb8 	.word	0x24001eb8
 8012dfc:	08017c08 	.word	0x08017c08

08012e00 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b082      	sub	sp, #8
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	4603      	mov	r3, r0
 8012e08:	6039      	str	r1, [r7, #0]
 8012e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012e0c:	683a      	ldr	r2, [r7, #0]
 8012e0e:	4904      	ldr	r1, [pc, #16]	; (8012e20 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8012e10:	4804      	ldr	r0, [pc, #16]	; (8012e24 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8012e12:	f7ff fd81 	bl	8012918 <USBD_GetString>
  return USBD_StrDesc;
 8012e16:	4b02      	ldr	r3, [pc, #8]	; (8012e20 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012e18:	4618      	mov	r0, r3
 8012e1a:	3708      	adds	r7, #8
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}
 8012e20:	24001eb8 	.word	0x24001eb8
 8012e24:	08017c20 	.word	0x08017c20

08012e28 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	4603      	mov	r3, r0
 8012e30:	6039      	str	r1, [r7, #0]
 8012e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	221a      	movs	r2, #26
 8012e38:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012e3a:	f000 f843 	bl	8012ec4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012e3e:	4b02      	ldr	r3, [pc, #8]	; (8012e48 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8012e40:	4618      	mov	r0, r3
 8012e42:	3708      	adds	r7, #8
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd80      	pop	{r7, pc}
 8012e48:	240000fc 	.word	0x240000fc

08012e4c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b082      	sub	sp, #8
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	4603      	mov	r3, r0
 8012e54:	6039      	str	r1, [r7, #0]
 8012e56:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012e58:	79fb      	ldrb	r3, [r7, #7]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d105      	bne.n	8012e6a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012e5e:	683a      	ldr	r2, [r7, #0]
 8012e60:	4907      	ldr	r1, [pc, #28]	; (8012e80 <USBD_HS_ConfigStrDescriptor+0x34>)
 8012e62:	4808      	ldr	r0, [pc, #32]	; (8012e84 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012e64:	f7ff fd58 	bl	8012918 <USBD_GetString>
 8012e68:	e004      	b.n	8012e74 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012e6a:	683a      	ldr	r2, [r7, #0]
 8012e6c:	4904      	ldr	r1, [pc, #16]	; (8012e80 <USBD_HS_ConfigStrDescriptor+0x34>)
 8012e6e:	4805      	ldr	r0, [pc, #20]	; (8012e84 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012e70:	f7ff fd52 	bl	8012918 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e74:	4b02      	ldr	r3, [pc, #8]	; (8012e80 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3708      	adds	r7, #8
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}
 8012e7e:	bf00      	nop
 8012e80:	24001eb8 	.word	0x24001eb8
 8012e84:	08017c34 	.word	0x08017c34

08012e88 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012e88:	b580      	push	{r7, lr}
 8012e8a:	b082      	sub	sp, #8
 8012e8c:	af00      	add	r7, sp, #0
 8012e8e:	4603      	mov	r3, r0
 8012e90:	6039      	str	r1, [r7, #0]
 8012e92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012e94:	79fb      	ldrb	r3, [r7, #7]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d105      	bne.n	8012ea6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012e9a:	683a      	ldr	r2, [r7, #0]
 8012e9c:	4907      	ldr	r1, [pc, #28]	; (8012ebc <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012e9e:	4808      	ldr	r0, [pc, #32]	; (8012ec0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012ea0:	f7ff fd3a 	bl	8012918 <USBD_GetString>
 8012ea4:	e004      	b.n	8012eb0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012ea6:	683a      	ldr	r2, [r7, #0]
 8012ea8:	4904      	ldr	r1, [pc, #16]	; (8012ebc <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012eaa:	4805      	ldr	r0, [pc, #20]	; (8012ec0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012eac:	f7ff fd34 	bl	8012918 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012eb0:	4b02      	ldr	r3, [pc, #8]	; (8012ebc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3708      	adds	r7, #8
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	bd80      	pop	{r7, pc}
 8012eba:	bf00      	nop
 8012ebc:	24001eb8 	.word	0x24001eb8
 8012ec0:	08017c40 	.word	0x08017c40

08012ec4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012eca:	4b0f      	ldr	r3, [pc, #60]	; (8012f08 <Get_SerialNum+0x44>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012ed0:	4b0e      	ldr	r3, [pc, #56]	; (8012f0c <Get_SerialNum+0x48>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012ed6:	4b0e      	ldr	r3, [pc, #56]	; (8012f10 <Get_SerialNum+0x4c>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012edc:	68fa      	ldr	r2, [r7, #12]
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	4413      	add	r3, r2
 8012ee2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d009      	beq.n	8012efe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012eea:	2208      	movs	r2, #8
 8012eec:	4909      	ldr	r1, [pc, #36]	; (8012f14 <Get_SerialNum+0x50>)
 8012eee:	68f8      	ldr	r0, [r7, #12]
 8012ef0:	f000 f814 	bl	8012f1c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012ef4:	2204      	movs	r2, #4
 8012ef6:	4908      	ldr	r1, [pc, #32]	; (8012f18 <Get_SerialNum+0x54>)
 8012ef8:	68b8      	ldr	r0, [r7, #8]
 8012efa:	f000 f80f 	bl	8012f1c <IntToUnicode>
  }
}
 8012efe:	bf00      	nop
 8012f00:	3710      	adds	r7, #16
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	1ff1e800 	.word	0x1ff1e800
 8012f0c:	1ff1e804 	.word	0x1ff1e804
 8012f10:	1ff1e808 	.word	0x1ff1e808
 8012f14:	240000fe 	.word	0x240000fe
 8012f18:	2400010e 	.word	0x2400010e

08012f1c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012f1c:	b480      	push	{r7}
 8012f1e:	b087      	sub	sp, #28
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	4613      	mov	r3, r2
 8012f28:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012f2e:	2300      	movs	r3, #0
 8012f30:	75fb      	strb	r3, [r7, #23]
 8012f32:	e027      	b.n	8012f84 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	0f1b      	lsrs	r3, r3, #28
 8012f38:	2b09      	cmp	r3, #9
 8012f3a:	d80b      	bhi.n	8012f54 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	0f1b      	lsrs	r3, r3, #28
 8012f40:	b2da      	uxtb	r2, r3
 8012f42:	7dfb      	ldrb	r3, [r7, #23]
 8012f44:	005b      	lsls	r3, r3, #1
 8012f46:	4619      	mov	r1, r3
 8012f48:	68bb      	ldr	r3, [r7, #8]
 8012f4a:	440b      	add	r3, r1
 8012f4c:	3230      	adds	r2, #48	; 0x30
 8012f4e:	b2d2      	uxtb	r2, r2
 8012f50:	701a      	strb	r2, [r3, #0]
 8012f52:	e00a      	b.n	8012f6a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	0f1b      	lsrs	r3, r3, #28
 8012f58:	b2da      	uxtb	r2, r3
 8012f5a:	7dfb      	ldrb	r3, [r7, #23]
 8012f5c:	005b      	lsls	r3, r3, #1
 8012f5e:	4619      	mov	r1, r3
 8012f60:	68bb      	ldr	r3, [r7, #8]
 8012f62:	440b      	add	r3, r1
 8012f64:	3237      	adds	r2, #55	; 0x37
 8012f66:	b2d2      	uxtb	r2, r2
 8012f68:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	011b      	lsls	r3, r3, #4
 8012f6e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012f70:	7dfb      	ldrb	r3, [r7, #23]
 8012f72:	005b      	lsls	r3, r3, #1
 8012f74:	3301      	adds	r3, #1
 8012f76:	68ba      	ldr	r2, [r7, #8]
 8012f78:	4413      	add	r3, r2
 8012f7a:	2200      	movs	r2, #0
 8012f7c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012f7e:	7dfb      	ldrb	r3, [r7, #23]
 8012f80:	3301      	adds	r3, #1
 8012f82:	75fb      	strb	r3, [r7, #23]
 8012f84:	7dfa      	ldrb	r2, [r7, #23]
 8012f86:	79fb      	ldrb	r3, [r7, #7]
 8012f88:	429a      	cmp	r2, r3
 8012f8a:	d3d3      	bcc.n	8012f34 <IntToUnicode+0x18>
  }
}
 8012f8c:	bf00      	nop
 8012f8e:	bf00      	nop
 8012f90:	371c      	adds	r7, #28
 8012f92:	46bd      	mov	sp, r7
 8012f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f98:	4770      	bx	lr
	...

08012f9c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b0b2      	sub	sp, #200	; 0xc8
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012fa4:	f107 0310 	add.w	r3, r7, #16
 8012fa8:	22b8      	movs	r2, #184	; 0xb8
 8012faa:	2100      	movs	r1, #0
 8012fac:	4618      	mov	r0, r3
 8012fae:	f001 fb1a 	bl	80145e6 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	4a1a      	ldr	r2, [pc, #104]	; (8013020 <HAL_PCD_MspInit+0x84>)
 8012fb8:	4293      	cmp	r3, r2
 8012fba:	d12c      	bne.n	8013016 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012fbc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8012fc0:	f04f 0300 	mov.w	r3, #0
 8012fc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8012fc8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8012fcc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012fd0:	f107 0310 	add.w	r3, r7, #16
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7f7 fe61 	bl	800ac9c <HAL_RCCEx_PeriphCLKConfig>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d001      	beq.n	8012fe4 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8012fe0:	f7ee fbdc 	bl	800179c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012fe4:	f7f6 fee4 	bl	8009db0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012fe8:	4b0e      	ldr	r3, [pc, #56]	; (8013024 <HAL_PCD_MspInit+0x88>)
 8012fea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012fee:	4a0d      	ldr	r2, [pc, #52]	; (8013024 <HAL_PCD_MspInit+0x88>)
 8012ff0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8012ff4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8012ff8:	4b0a      	ldr	r3, [pc, #40]	; (8013024 <HAL_PCD_MspInit+0x88>)
 8012ffa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8012ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013002:	60fb      	str	r3, [r7, #12]
 8013004:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8013006:	2200      	movs	r2, #0
 8013008:	2100      	movs	r1, #0
 801300a:	204d      	movs	r0, #77	; 0x4d
 801300c:	f7f1 f9f1 	bl	80043f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8013010:	204d      	movs	r0, #77	; 0x4d
 8013012:	f7f1 fa08 	bl	8004426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8013016:	bf00      	nop
 8013018:	37c8      	adds	r7, #200	; 0xc8
 801301a:	46bd      	mov	sp, r7
 801301c:	bd80      	pop	{r7, pc}
 801301e:	bf00      	nop
 8013020:	40040000 	.word	0x40040000
 8013024:	58024400 	.word	0x58024400

08013028 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b082      	sub	sp, #8
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801303c:	4619      	mov	r1, r3
 801303e:	4610      	mov	r0, r2
 8013040:	f7fe fadb 	bl	80115fa <USBD_LL_SetupStage>
}
 8013044:	bf00      	nop
 8013046:	3708      	adds	r7, #8
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	460b      	mov	r3, r1
 8013056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801305e:	78fa      	ldrb	r2, [r7, #3]
 8013060:	6879      	ldr	r1, [r7, #4]
 8013062:	4613      	mov	r3, r2
 8013064:	00db      	lsls	r3, r3, #3
 8013066:	4413      	add	r3, r2
 8013068:	009b      	lsls	r3, r3, #2
 801306a:	440b      	add	r3, r1
 801306c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8013070:	681a      	ldr	r2, [r3, #0]
 8013072:	78fb      	ldrb	r3, [r7, #3]
 8013074:	4619      	mov	r1, r3
 8013076:	f7fe fb15 	bl	80116a4 <USBD_LL_DataOutStage>
}
 801307a:	bf00      	nop
 801307c:	3708      	adds	r7, #8
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}

08013082 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013082:	b580      	push	{r7, lr}
 8013084:	b082      	sub	sp, #8
 8013086:	af00      	add	r7, sp, #0
 8013088:	6078      	str	r0, [r7, #4]
 801308a:	460b      	mov	r3, r1
 801308c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013094:	78fa      	ldrb	r2, [r7, #3]
 8013096:	6879      	ldr	r1, [r7, #4]
 8013098:	4613      	mov	r3, r2
 801309a:	00db      	lsls	r3, r3, #3
 801309c:	4413      	add	r3, r2
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	440b      	add	r3, r1
 80130a2:	3348      	adds	r3, #72	; 0x48
 80130a4:	681a      	ldr	r2, [r3, #0]
 80130a6:	78fb      	ldrb	r3, [r7, #3]
 80130a8:	4619      	mov	r1, r3
 80130aa:	f7fe fbae 	bl	801180a <USBD_LL_DataInStage>
}
 80130ae:	bf00      	nop
 80130b0:	3708      	adds	r7, #8
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}

080130b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130b6:	b580      	push	{r7, lr}
 80130b8:	b082      	sub	sp, #8
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80130c4:	4618      	mov	r0, r3
 80130c6:	f7fe fce8 	bl	8011a9a <USBD_LL_SOF>
}
 80130ca:	bf00      	nop
 80130cc:	3708      	adds	r7, #8
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b084      	sub	sp, #16
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80130da:	2301      	movs	r3, #1
 80130dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	691b      	ldr	r3, [r3, #16]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d102      	bne.n	80130ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80130e6:	2300      	movs	r3, #0
 80130e8:	73fb      	strb	r3, [r7, #15]
 80130ea:	e008      	b.n	80130fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	691b      	ldr	r3, [r3, #16]
 80130f0:	2b02      	cmp	r3, #2
 80130f2:	d102      	bne.n	80130fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80130f4:	2301      	movs	r3, #1
 80130f6:	73fb      	strb	r3, [r7, #15]
 80130f8:	e001      	b.n	80130fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80130fa:	f7ee fb4f 	bl	800179c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013104:	7bfa      	ldrb	r2, [r7, #15]
 8013106:	4611      	mov	r1, r2
 8013108:	4618      	mov	r0, r3
 801310a:	f7fe fc82 	bl	8011a12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013114:	4618      	mov	r0, r3
 8013116:	f7fe fc2a 	bl	801196e <USBD_LL_Reset>
}
 801311a:	bf00      	nop
 801311c:	3710      	adds	r7, #16
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
	...

08013124 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b082      	sub	sp, #8
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013132:	4618      	mov	r0, r3
 8013134:	f7fe fc7d 	bl	8011a32 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	687a      	ldr	r2, [r7, #4]
 8013144:	6812      	ldr	r2, [r2, #0]
 8013146:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801314a:	f043 0301 	orr.w	r3, r3, #1
 801314e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6a1b      	ldr	r3, [r3, #32]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d005      	beq.n	8013164 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013158:	4b04      	ldr	r3, [pc, #16]	; (801316c <HAL_PCD_SuspendCallback+0x48>)
 801315a:	691b      	ldr	r3, [r3, #16]
 801315c:	4a03      	ldr	r2, [pc, #12]	; (801316c <HAL_PCD_SuspendCallback+0x48>)
 801315e:	f043 0306 	orr.w	r3, r3, #6
 8013162:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013164:	bf00      	nop
 8013166:	3708      	adds	r7, #8
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	e000ed00 	.word	0xe000ed00

08013170 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b082      	sub	sp, #8
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801317e:	4618      	mov	r0, r3
 8013180:	f7fe fc73 	bl	8011a6a <USBD_LL_Resume>
}
 8013184:	bf00      	nop
 8013186:	3708      	adds	r7, #8
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b082      	sub	sp, #8
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
 8013194:	460b      	mov	r3, r1
 8013196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801319e:	78fa      	ldrb	r2, [r7, #3]
 80131a0:	4611      	mov	r1, r2
 80131a2:	4618      	mov	r0, r3
 80131a4:	f7fe fccb 	bl	8011b3e <USBD_LL_IsoOUTIncomplete>
}
 80131a8:	bf00      	nop
 80131aa:	3708      	adds	r7, #8
 80131ac:	46bd      	mov	sp, r7
 80131ae:	bd80      	pop	{r7, pc}

080131b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131b0:	b580      	push	{r7, lr}
 80131b2:	b082      	sub	sp, #8
 80131b4:	af00      	add	r7, sp, #0
 80131b6:	6078      	str	r0, [r7, #4]
 80131b8:	460b      	mov	r3, r1
 80131ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80131c2:	78fa      	ldrb	r2, [r7, #3]
 80131c4:	4611      	mov	r1, r2
 80131c6:	4618      	mov	r0, r3
 80131c8:	f7fe fc87 	bl	8011ada <USBD_LL_IsoINIncomplete>
}
 80131cc:	bf00      	nop
 80131ce:	3708      	adds	r7, #8
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}

080131d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7fe fcdd 	bl	8011ba2 <USBD_LL_DevConnected>
}
 80131e8:	bf00      	nop
 80131ea:	3708      	adds	r7, #8
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80131fe:	4618      	mov	r0, r3
 8013200:	f7fe fcda 	bl	8011bb8 <USBD_LL_DevDisconnected>
}
 8013204:	bf00      	nop
 8013206:	3708      	adds	r7, #8
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}

0801320c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	781b      	ldrb	r3, [r3, #0]
 8013218:	2b01      	cmp	r3, #1
 801321a:	d140      	bne.n	801329e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801321c:	4a22      	ldr	r2, [pc, #136]	; (80132a8 <USBD_LL_Init+0x9c>)
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	4a20      	ldr	r2, [pc, #128]	; (80132a8 <USBD_LL_Init+0x9c>)
 8013228:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801322c:	4b1e      	ldr	r3, [pc, #120]	; (80132a8 <USBD_LL_Init+0x9c>)
 801322e:	4a1f      	ldr	r2, [pc, #124]	; (80132ac <USBD_LL_Init+0xa0>)
 8013230:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8013232:	4b1d      	ldr	r3, [pc, #116]	; (80132a8 <USBD_LL_Init+0x9c>)
 8013234:	2209      	movs	r2, #9
 8013236:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8013238:	4b1b      	ldr	r3, [pc, #108]	; (80132a8 <USBD_LL_Init+0x9c>)
 801323a:	2202      	movs	r2, #2
 801323c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801323e:	4b1a      	ldr	r3, [pc, #104]	; (80132a8 <USBD_LL_Init+0x9c>)
 8013240:	2200      	movs	r2, #0
 8013242:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8013244:	4b18      	ldr	r3, [pc, #96]	; (80132a8 <USBD_LL_Init+0x9c>)
 8013246:	2202      	movs	r2, #2
 8013248:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801324a:	4b17      	ldr	r3, [pc, #92]	; (80132a8 <USBD_LL_Init+0x9c>)
 801324c:	2200      	movs	r2, #0
 801324e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8013250:	4b15      	ldr	r3, [pc, #84]	; (80132a8 <USBD_LL_Init+0x9c>)
 8013252:	2200      	movs	r2, #0
 8013254:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8013256:	4b14      	ldr	r3, [pc, #80]	; (80132a8 <USBD_LL_Init+0x9c>)
 8013258:	2200      	movs	r2, #0
 801325a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801325c:	4b12      	ldr	r3, [pc, #72]	; (80132a8 <USBD_LL_Init+0x9c>)
 801325e:	2200      	movs	r2, #0
 8013260:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8013262:	4b11      	ldr	r3, [pc, #68]	; (80132a8 <USBD_LL_Init+0x9c>)
 8013264:	2200      	movs	r2, #0
 8013266:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8013268:	4b0f      	ldr	r3, [pc, #60]	; (80132a8 <USBD_LL_Init+0x9c>)
 801326a:	2200      	movs	r2, #0
 801326c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801326e:	480e      	ldr	r0, [pc, #56]	; (80132a8 <USBD_LL_Init+0x9c>)
 8013270:	f7f5 faaa 	bl	80087c8 <HAL_PCD_Init>
 8013274:	4603      	mov	r3, r0
 8013276:	2b00      	cmp	r3, #0
 8013278:	d001      	beq.n	801327e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801327a:	f7ee fa8f 	bl	800179c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801327e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013282:	4809      	ldr	r0, [pc, #36]	; (80132a8 <USBD_LL_Init+0x9c>)
 8013284:	f7f6 fd19 	bl	8009cba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8013288:	2280      	movs	r2, #128	; 0x80
 801328a:	2100      	movs	r1, #0
 801328c:	4806      	ldr	r0, [pc, #24]	; (80132a8 <USBD_LL_Init+0x9c>)
 801328e:	f7f6 fccd 	bl	8009c2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8013292:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8013296:	2101      	movs	r1, #1
 8013298:	4803      	ldr	r0, [pc, #12]	; (80132a8 <USBD_LL_Init+0x9c>)
 801329a:	f7f6 fcc7 	bl	8009c2c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801329e:	2300      	movs	r3, #0
}
 80132a0:	4618      	mov	r0, r3
 80132a2:	3708      	adds	r7, #8
 80132a4:	46bd      	mov	sp, r7
 80132a6:	bd80      	pop	{r7, pc}
 80132a8:	240020b8 	.word	0x240020b8
 80132ac:	40040000 	.word	0x40040000

080132b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	b084      	sub	sp, #16
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132b8:	2300      	movs	r3, #0
 80132ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132bc:	2300      	movs	r3, #0
 80132be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7f5 fba2 	bl	8008a10 <HAL_PCD_Start>
 80132cc:	4603      	mov	r3, r0
 80132ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132d0:	7bfb      	ldrb	r3, [r7, #15]
 80132d2:	4618      	mov	r0, r3
 80132d4:	f000 f942 	bl	801355c <USBD_Get_USB_Status>
 80132d8:	4603      	mov	r3, r0
 80132da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3710      	adds	r7, #16
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}

080132e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80132e6:	b580      	push	{r7, lr}
 80132e8:	b084      	sub	sp, #16
 80132ea:	af00      	add	r7, sp, #0
 80132ec:	6078      	str	r0, [r7, #4]
 80132ee:	4608      	mov	r0, r1
 80132f0:	4611      	mov	r1, r2
 80132f2:	461a      	mov	r2, r3
 80132f4:	4603      	mov	r3, r0
 80132f6:	70fb      	strb	r3, [r7, #3]
 80132f8:	460b      	mov	r3, r1
 80132fa:	70bb      	strb	r3, [r7, #2]
 80132fc:	4613      	mov	r3, r2
 80132fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013300:	2300      	movs	r3, #0
 8013302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013304:	2300      	movs	r3, #0
 8013306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801330e:	78bb      	ldrb	r3, [r7, #2]
 8013310:	883a      	ldrh	r2, [r7, #0]
 8013312:	78f9      	ldrb	r1, [r7, #3]
 8013314:	f7f6 f8a2 	bl	800945c <HAL_PCD_EP_Open>
 8013318:	4603      	mov	r3, r0
 801331a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801331c:	7bfb      	ldrb	r3, [r7, #15]
 801331e:	4618      	mov	r0, r3
 8013320:	f000 f91c 	bl	801355c <USBD_Get_USB_Status>
 8013324:	4603      	mov	r3, r0
 8013326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013328:	7bbb      	ldrb	r3, [r7, #14]
}
 801332a:	4618      	mov	r0, r3
 801332c:	3710      	adds	r7, #16
 801332e:	46bd      	mov	sp, r7
 8013330:	bd80      	pop	{r7, pc}

08013332 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013332:	b580      	push	{r7, lr}
 8013334:	b084      	sub	sp, #16
 8013336:	af00      	add	r7, sp, #0
 8013338:	6078      	str	r0, [r7, #4]
 801333a:	460b      	mov	r3, r1
 801333c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801333e:	2300      	movs	r3, #0
 8013340:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013342:	2300      	movs	r3, #0
 8013344:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801334c:	78fa      	ldrb	r2, [r7, #3]
 801334e:	4611      	mov	r1, r2
 8013350:	4618      	mov	r0, r3
 8013352:	f7f6 f8eb 	bl	800952c <HAL_PCD_EP_Close>
 8013356:	4603      	mov	r3, r0
 8013358:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801335a:	7bfb      	ldrb	r3, [r7, #15]
 801335c:	4618      	mov	r0, r3
 801335e:	f000 f8fd 	bl	801355c <USBD_Get_USB_Status>
 8013362:	4603      	mov	r3, r0
 8013364:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013366:	7bbb      	ldrb	r3, [r7, #14]
}
 8013368:	4618      	mov	r0, r3
 801336a:	3710      	adds	r7, #16
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	460b      	mov	r3, r1
 801337a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801337c:	2300      	movs	r3, #0
 801337e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013380:	2300      	movs	r3, #0
 8013382:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801338a:	78fa      	ldrb	r2, [r7, #3]
 801338c:	4611      	mov	r1, r2
 801338e:	4618      	mov	r0, r3
 8013390:	f7f6 f9a5 	bl	80096de <HAL_PCD_EP_SetStall>
 8013394:	4603      	mov	r3, r0
 8013396:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013398:	7bfb      	ldrb	r3, [r7, #15]
 801339a:	4618      	mov	r0, r3
 801339c:	f000 f8de 	bl	801355c <USBD_Get_USB_Status>
 80133a0:	4603      	mov	r3, r0
 80133a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80133a6:	4618      	mov	r0, r3
 80133a8:	3710      	adds	r7, #16
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}

080133ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b084      	sub	sp, #16
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	6078      	str	r0, [r7, #4]
 80133b6:	460b      	mov	r3, r1
 80133b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133ba:	2300      	movs	r3, #0
 80133bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133be:	2300      	movs	r3, #0
 80133c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80133c8:	78fa      	ldrb	r2, [r7, #3]
 80133ca:	4611      	mov	r1, r2
 80133cc:	4618      	mov	r0, r3
 80133ce:	f7f6 f9ea 	bl	80097a6 <HAL_PCD_EP_ClrStall>
 80133d2:	4603      	mov	r3, r0
 80133d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133d6:	7bfb      	ldrb	r3, [r7, #15]
 80133d8:	4618      	mov	r0, r3
 80133da:	f000 f8bf 	bl	801355c <USBD_Get_USB_Status>
 80133de:	4603      	mov	r3, r0
 80133e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3710      	adds	r7, #16
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b085      	sub	sp, #20
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	460b      	mov	r3, r1
 80133f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80133fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013400:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013404:	2b00      	cmp	r3, #0
 8013406:	da0b      	bge.n	8013420 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013408:	78fb      	ldrb	r3, [r7, #3]
 801340a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801340e:	68f9      	ldr	r1, [r7, #12]
 8013410:	4613      	mov	r3, r2
 8013412:	00db      	lsls	r3, r3, #3
 8013414:	4413      	add	r3, r2
 8013416:	009b      	lsls	r3, r3, #2
 8013418:	440b      	add	r3, r1
 801341a:	333e      	adds	r3, #62	; 0x3e
 801341c:	781b      	ldrb	r3, [r3, #0]
 801341e:	e00b      	b.n	8013438 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013420:	78fb      	ldrb	r3, [r7, #3]
 8013422:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013426:	68f9      	ldr	r1, [r7, #12]
 8013428:	4613      	mov	r3, r2
 801342a:	00db      	lsls	r3, r3, #3
 801342c:	4413      	add	r3, r2
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	440b      	add	r3, r1
 8013432:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013436:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013438:	4618      	mov	r0, r3
 801343a:	3714      	adds	r7, #20
 801343c:	46bd      	mov	sp, r7
 801343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013442:	4770      	bx	lr

08013444 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b084      	sub	sp, #16
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
 801344c:	460b      	mov	r3, r1
 801344e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013450:	2300      	movs	r3, #0
 8013452:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013454:	2300      	movs	r3, #0
 8013456:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801345e:	78fa      	ldrb	r2, [r7, #3]
 8013460:	4611      	mov	r1, r2
 8013462:	4618      	mov	r0, r3
 8013464:	f7f5 ffd5 	bl	8009412 <HAL_PCD_SetAddress>
 8013468:	4603      	mov	r3, r0
 801346a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801346c:	7bfb      	ldrb	r3, [r7, #15]
 801346e:	4618      	mov	r0, r3
 8013470:	f000 f874 	bl	801355c <USBD_Get_USB_Status>
 8013474:	4603      	mov	r3, r0
 8013476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013478:	7bbb      	ldrb	r3, [r7, #14]
}
 801347a:	4618      	mov	r0, r3
 801347c:	3710      	adds	r7, #16
 801347e:	46bd      	mov	sp, r7
 8013480:	bd80      	pop	{r7, pc}

08013482 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013482:	b580      	push	{r7, lr}
 8013484:	b086      	sub	sp, #24
 8013486:	af00      	add	r7, sp, #0
 8013488:	60f8      	str	r0, [r7, #12]
 801348a:	607a      	str	r2, [r7, #4]
 801348c:	603b      	str	r3, [r7, #0]
 801348e:	460b      	mov	r3, r1
 8013490:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013492:	2300      	movs	r3, #0
 8013494:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013496:	2300      	movs	r3, #0
 8013498:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80134a0:	7af9      	ldrb	r1, [r7, #11]
 80134a2:	683b      	ldr	r3, [r7, #0]
 80134a4:	687a      	ldr	r2, [r7, #4]
 80134a6:	f7f6 f8df 	bl	8009668 <HAL_PCD_EP_Transmit>
 80134aa:	4603      	mov	r3, r0
 80134ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134ae:	7dfb      	ldrb	r3, [r7, #23]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f000 f853 	bl	801355c <USBD_Get_USB_Status>
 80134b6:	4603      	mov	r3, r0
 80134b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80134ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80134bc:	4618      	mov	r0, r3
 80134be:	3718      	adds	r7, #24
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}

080134c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80134c4:	b580      	push	{r7, lr}
 80134c6:	b086      	sub	sp, #24
 80134c8:	af00      	add	r7, sp, #0
 80134ca:	60f8      	str	r0, [r7, #12]
 80134cc:	607a      	str	r2, [r7, #4]
 80134ce:	603b      	str	r3, [r7, #0]
 80134d0:	460b      	mov	r3, r1
 80134d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134d4:	2300      	movs	r3, #0
 80134d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134d8:	2300      	movs	r3, #0
 80134da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80134e2:	7af9      	ldrb	r1, [r7, #11]
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	687a      	ldr	r2, [r7, #4]
 80134e8:	f7f6 f86a 	bl	80095c0 <HAL_PCD_EP_Receive>
 80134ec:	4603      	mov	r3, r0
 80134ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134f0:	7dfb      	ldrb	r3, [r7, #23]
 80134f2:	4618      	mov	r0, r3
 80134f4:	f000 f832 	bl	801355c <USBD_Get_USB_Status>
 80134f8:	4603      	mov	r3, r0
 80134fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80134fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3718      	adds	r7, #24
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}

08013506 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013506:	b580      	push	{r7, lr}
 8013508:	b082      	sub	sp, #8
 801350a:	af00      	add	r7, sp, #0
 801350c:	6078      	str	r0, [r7, #4]
 801350e:	460b      	mov	r3, r1
 8013510:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013518:	78fa      	ldrb	r2, [r7, #3]
 801351a:	4611      	mov	r1, r2
 801351c:	4618      	mov	r0, r3
 801351e:	f7f6 f88b 	bl	8009638 <HAL_PCD_EP_GetRxCount>
 8013522:	4603      	mov	r3, r0
}
 8013524:	4618      	mov	r0, r3
 8013526:	3708      	adds	r7, #8
 8013528:	46bd      	mov	sp, r7
 801352a:	bd80      	pop	{r7, pc}

0801352c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801352c:	b480      	push	{r7}
 801352e:	b083      	sub	sp, #12
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013534:	4b03      	ldr	r3, [pc, #12]	; (8013544 <USBD_static_malloc+0x18>)
}
 8013536:	4618      	mov	r0, r3
 8013538:	370c      	adds	r7, #12
 801353a:	46bd      	mov	sp, r7
 801353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013540:	4770      	bx	lr
 8013542:	bf00      	nop
 8013544:	240025c4 	.word	0x240025c4

08013548 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013548:	b480      	push	{r7}
 801354a:	b083      	sub	sp, #12
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013550:	bf00      	nop
 8013552:	370c      	adds	r7, #12
 8013554:	46bd      	mov	sp, r7
 8013556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355a:	4770      	bx	lr

0801355c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801355c:	b480      	push	{r7}
 801355e:	b085      	sub	sp, #20
 8013560:	af00      	add	r7, sp, #0
 8013562:	4603      	mov	r3, r0
 8013564:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013566:	2300      	movs	r3, #0
 8013568:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801356a:	79fb      	ldrb	r3, [r7, #7]
 801356c:	2b03      	cmp	r3, #3
 801356e:	d817      	bhi.n	80135a0 <USBD_Get_USB_Status+0x44>
 8013570:	a201      	add	r2, pc, #4	; (adr r2, 8013578 <USBD_Get_USB_Status+0x1c>)
 8013572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013576:	bf00      	nop
 8013578:	08013589 	.word	0x08013589
 801357c:	0801358f 	.word	0x0801358f
 8013580:	08013595 	.word	0x08013595
 8013584:	0801359b 	.word	0x0801359b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013588:	2300      	movs	r3, #0
 801358a:	73fb      	strb	r3, [r7, #15]
    break;
 801358c:	e00b      	b.n	80135a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801358e:	2303      	movs	r3, #3
 8013590:	73fb      	strb	r3, [r7, #15]
    break;
 8013592:	e008      	b.n	80135a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013594:	2301      	movs	r3, #1
 8013596:	73fb      	strb	r3, [r7, #15]
    break;
 8013598:	e005      	b.n	80135a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801359a:	2303      	movs	r3, #3
 801359c:	73fb      	strb	r3, [r7, #15]
    break;
 801359e:	e002      	b.n	80135a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80135a0:	2303      	movs	r3, #3
 80135a2:	73fb      	strb	r3, [r7, #15]
    break;
 80135a4:	bf00      	nop
  }
  return usb_status;
 80135a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	3714      	adds	r7, #20
 80135ac:	46bd      	mov	sp, r7
 80135ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b2:	4770      	bx	lr

080135b4 <malloc>:
 80135b4:	4b02      	ldr	r3, [pc, #8]	; (80135c0 <malloc+0xc>)
 80135b6:	4601      	mov	r1, r0
 80135b8:	6818      	ldr	r0, [r3, #0]
 80135ba:	f000 b823 	b.w	8013604 <_malloc_r>
 80135be:	bf00      	nop
 80135c0:	24000170 	.word	0x24000170

080135c4 <sbrk_aligned>:
 80135c4:	b570      	push	{r4, r5, r6, lr}
 80135c6:	4e0e      	ldr	r6, [pc, #56]	; (8013600 <sbrk_aligned+0x3c>)
 80135c8:	460c      	mov	r4, r1
 80135ca:	6831      	ldr	r1, [r6, #0]
 80135cc:	4605      	mov	r5, r0
 80135ce:	b911      	cbnz	r1, 80135d6 <sbrk_aligned+0x12>
 80135d0:	f001 f84a 	bl	8014668 <_sbrk_r>
 80135d4:	6030      	str	r0, [r6, #0]
 80135d6:	4621      	mov	r1, r4
 80135d8:	4628      	mov	r0, r5
 80135da:	f001 f845 	bl	8014668 <_sbrk_r>
 80135de:	1c43      	adds	r3, r0, #1
 80135e0:	d00a      	beq.n	80135f8 <sbrk_aligned+0x34>
 80135e2:	1cc4      	adds	r4, r0, #3
 80135e4:	f024 0403 	bic.w	r4, r4, #3
 80135e8:	42a0      	cmp	r0, r4
 80135ea:	d007      	beq.n	80135fc <sbrk_aligned+0x38>
 80135ec:	1a21      	subs	r1, r4, r0
 80135ee:	4628      	mov	r0, r5
 80135f0:	f001 f83a 	bl	8014668 <_sbrk_r>
 80135f4:	3001      	adds	r0, #1
 80135f6:	d101      	bne.n	80135fc <sbrk_aligned+0x38>
 80135f8:	f04f 34ff 	mov.w	r4, #4294967295
 80135fc:	4620      	mov	r0, r4
 80135fe:	bd70      	pop	{r4, r5, r6, pc}
 8013600:	240027e8 	.word	0x240027e8

08013604 <_malloc_r>:
 8013604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013608:	1ccd      	adds	r5, r1, #3
 801360a:	f025 0503 	bic.w	r5, r5, #3
 801360e:	3508      	adds	r5, #8
 8013610:	2d0c      	cmp	r5, #12
 8013612:	bf38      	it	cc
 8013614:	250c      	movcc	r5, #12
 8013616:	2d00      	cmp	r5, #0
 8013618:	4607      	mov	r7, r0
 801361a:	db01      	blt.n	8013620 <_malloc_r+0x1c>
 801361c:	42a9      	cmp	r1, r5
 801361e:	d905      	bls.n	801362c <_malloc_r+0x28>
 8013620:	230c      	movs	r3, #12
 8013622:	603b      	str	r3, [r7, #0]
 8013624:	2600      	movs	r6, #0
 8013626:	4630      	mov	r0, r6
 8013628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801362c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013700 <_malloc_r+0xfc>
 8013630:	f000 f868 	bl	8013704 <__malloc_lock>
 8013634:	f8d8 3000 	ldr.w	r3, [r8]
 8013638:	461c      	mov	r4, r3
 801363a:	bb5c      	cbnz	r4, 8013694 <_malloc_r+0x90>
 801363c:	4629      	mov	r1, r5
 801363e:	4638      	mov	r0, r7
 8013640:	f7ff ffc0 	bl	80135c4 <sbrk_aligned>
 8013644:	1c43      	adds	r3, r0, #1
 8013646:	4604      	mov	r4, r0
 8013648:	d155      	bne.n	80136f6 <_malloc_r+0xf2>
 801364a:	f8d8 4000 	ldr.w	r4, [r8]
 801364e:	4626      	mov	r6, r4
 8013650:	2e00      	cmp	r6, #0
 8013652:	d145      	bne.n	80136e0 <_malloc_r+0xdc>
 8013654:	2c00      	cmp	r4, #0
 8013656:	d048      	beq.n	80136ea <_malloc_r+0xe6>
 8013658:	6823      	ldr	r3, [r4, #0]
 801365a:	4631      	mov	r1, r6
 801365c:	4638      	mov	r0, r7
 801365e:	eb04 0903 	add.w	r9, r4, r3
 8013662:	f001 f801 	bl	8014668 <_sbrk_r>
 8013666:	4581      	cmp	r9, r0
 8013668:	d13f      	bne.n	80136ea <_malloc_r+0xe6>
 801366a:	6821      	ldr	r1, [r4, #0]
 801366c:	1a6d      	subs	r5, r5, r1
 801366e:	4629      	mov	r1, r5
 8013670:	4638      	mov	r0, r7
 8013672:	f7ff ffa7 	bl	80135c4 <sbrk_aligned>
 8013676:	3001      	adds	r0, #1
 8013678:	d037      	beq.n	80136ea <_malloc_r+0xe6>
 801367a:	6823      	ldr	r3, [r4, #0]
 801367c:	442b      	add	r3, r5
 801367e:	6023      	str	r3, [r4, #0]
 8013680:	f8d8 3000 	ldr.w	r3, [r8]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d038      	beq.n	80136fa <_malloc_r+0xf6>
 8013688:	685a      	ldr	r2, [r3, #4]
 801368a:	42a2      	cmp	r2, r4
 801368c:	d12b      	bne.n	80136e6 <_malloc_r+0xe2>
 801368e:	2200      	movs	r2, #0
 8013690:	605a      	str	r2, [r3, #4]
 8013692:	e00f      	b.n	80136b4 <_malloc_r+0xb0>
 8013694:	6822      	ldr	r2, [r4, #0]
 8013696:	1b52      	subs	r2, r2, r5
 8013698:	d41f      	bmi.n	80136da <_malloc_r+0xd6>
 801369a:	2a0b      	cmp	r2, #11
 801369c:	d917      	bls.n	80136ce <_malloc_r+0xca>
 801369e:	1961      	adds	r1, r4, r5
 80136a0:	42a3      	cmp	r3, r4
 80136a2:	6025      	str	r5, [r4, #0]
 80136a4:	bf18      	it	ne
 80136a6:	6059      	strne	r1, [r3, #4]
 80136a8:	6863      	ldr	r3, [r4, #4]
 80136aa:	bf08      	it	eq
 80136ac:	f8c8 1000 	streq.w	r1, [r8]
 80136b0:	5162      	str	r2, [r4, r5]
 80136b2:	604b      	str	r3, [r1, #4]
 80136b4:	4638      	mov	r0, r7
 80136b6:	f104 060b 	add.w	r6, r4, #11
 80136ba:	f000 f829 	bl	8013710 <__malloc_unlock>
 80136be:	f026 0607 	bic.w	r6, r6, #7
 80136c2:	1d23      	adds	r3, r4, #4
 80136c4:	1af2      	subs	r2, r6, r3
 80136c6:	d0ae      	beq.n	8013626 <_malloc_r+0x22>
 80136c8:	1b9b      	subs	r3, r3, r6
 80136ca:	50a3      	str	r3, [r4, r2]
 80136cc:	e7ab      	b.n	8013626 <_malloc_r+0x22>
 80136ce:	42a3      	cmp	r3, r4
 80136d0:	6862      	ldr	r2, [r4, #4]
 80136d2:	d1dd      	bne.n	8013690 <_malloc_r+0x8c>
 80136d4:	f8c8 2000 	str.w	r2, [r8]
 80136d8:	e7ec      	b.n	80136b4 <_malloc_r+0xb0>
 80136da:	4623      	mov	r3, r4
 80136dc:	6864      	ldr	r4, [r4, #4]
 80136de:	e7ac      	b.n	801363a <_malloc_r+0x36>
 80136e0:	4634      	mov	r4, r6
 80136e2:	6876      	ldr	r6, [r6, #4]
 80136e4:	e7b4      	b.n	8013650 <_malloc_r+0x4c>
 80136e6:	4613      	mov	r3, r2
 80136e8:	e7cc      	b.n	8013684 <_malloc_r+0x80>
 80136ea:	230c      	movs	r3, #12
 80136ec:	603b      	str	r3, [r7, #0]
 80136ee:	4638      	mov	r0, r7
 80136f0:	f000 f80e 	bl	8013710 <__malloc_unlock>
 80136f4:	e797      	b.n	8013626 <_malloc_r+0x22>
 80136f6:	6025      	str	r5, [r4, #0]
 80136f8:	e7dc      	b.n	80136b4 <_malloc_r+0xb0>
 80136fa:	605b      	str	r3, [r3, #4]
 80136fc:	deff      	udf	#255	; 0xff
 80136fe:	bf00      	nop
 8013700:	240027e4 	.word	0x240027e4

08013704 <__malloc_lock>:
 8013704:	4801      	ldr	r0, [pc, #4]	; (801370c <__malloc_lock+0x8>)
 8013706:	f7ef b918 	b.w	800293a <__retarget_lock_acquire_recursive>
 801370a:	bf00      	nop
 801370c:	24000bbc 	.word	0x24000bbc

08013710 <__malloc_unlock>:
 8013710:	4801      	ldr	r0, [pc, #4]	; (8013718 <__malloc_unlock+0x8>)
 8013712:	f7ef b926 	b.w	8002962 <__retarget_lock_release_recursive>
 8013716:	bf00      	nop
 8013718:	24000bbc 	.word	0x24000bbc

0801371c <__cvt>:
 801371c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801371e:	ed2d 8b02 	vpush	{d8}
 8013722:	eeb0 8b40 	vmov.f64	d8, d0
 8013726:	b085      	sub	sp, #20
 8013728:	4617      	mov	r7, r2
 801372a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801372c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801372e:	ee18 2a90 	vmov	r2, s17
 8013732:	f025 0520 	bic.w	r5, r5, #32
 8013736:	2a00      	cmp	r2, #0
 8013738:	bfb6      	itet	lt
 801373a:	222d      	movlt	r2, #45	; 0x2d
 801373c:	2200      	movge	r2, #0
 801373e:	eeb1 8b40 	vneglt.f64	d8, d0
 8013742:	2d46      	cmp	r5, #70	; 0x46
 8013744:	460c      	mov	r4, r1
 8013746:	701a      	strb	r2, [r3, #0]
 8013748:	d004      	beq.n	8013754 <__cvt+0x38>
 801374a:	2d45      	cmp	r5, #69	; 0x45
 801374c:	d100      	bne.n	8013750 <__cvt+0x34>
 801374e:	3401      	adds	r4, #1
 8013750:	2102      	movs	r1, #2
 8013752:	e000      	b.n	8013756 <__cvt+0x3a>
 8013754:	2103      	movs	r1, #3
 8013756:	ab03      	add	r3, sp, #12
 8013758:	9301      	str	r3, [sp, #4]
 801375a:	ab02      	add	r3, sp, #8
 801375c:	9300      	str	r3, [sp, #0]
 801375e:	4622      	mov	r2, r4
 8013760:	4633      	mov	r3, r6
 8013762:	eeb0 0b48 	vmov.f64	d0, d8
 8013766:	f001 f85b 	bl	8014820 <_dtoa_r>
 801376a:	2d47      	cmp	r5, #71	; 0x47
 801376c:	d101      	bne.n	8013772 <__cvt+0x56>
 801376e:	07fb      	lsls	r3, r7, #31
 8013770:	d51a      	bpl.n	80137a8 <__cvt+0x8c>
 8013772:	2d46      	cmp	r5, #70	; 0x46
 8013774:	eb00 0204 	add.w	r2, r0, r4
 8013778:	d10c      	bne.n	8013794 <__cvt+0x78>
 801377a:	7803      	ldrb	r3, [r0, #0]
 801377c:	2b30      	cmp	r3, #48	; 0x30
 801377e:	d107      	bne.n	8013790 <__cvt+0x74>
 8013780:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013788:	bf1c      	itt	ne
 801378a:	f1c4 0401 	rsbne	r4, r4, #1
 801378e:	6034      	strne	r4, [r6, #0]
 8013790:	6833      	ldr	r3, [r6, #0]
 8013792:	441a      	add	r2, r3
 8013794:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801379c:	bf08      	it	eq
 801379e:	9203      	streq	r2, [sp, #12]
 80137a0:	2130      	movs	r1, #48	; 0x30
 80137a2:	9b03      	ldr	r3, [sp, #12]
 80137a4:	4293      	cmp	r3, r2
 80137a6:	d307      	bcc.n	80137b8 <__cvt+0x9c>
 80137a8:	9b03      	ldr	r3, [sp, #12]
 80137aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80137ac:	1a1b      	subs	r3, r3, r0
 80137ae:	6013      	str	r3, [r2, #0]
 80137b0:	b005      	add	sp, #20
 80137b2:	ecbd 8b02 	vpop	{d8}
 80137b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137b8:	1c5c      	adds	r4, r3, #1
 80137ba:	9403      	str	r4, [sp, #12]
 80137bc:	7019      	strb	r1, [r3, #0]
 80137be:	e7f0      	b.n	80137a2 <__cvt+0x86>

080137c0 <__exponent>:
 80137c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80137c2:	4603      	mov	r3, r0
 80137c4:	2900      	cmp	r1, #0
 80137c6:	bfb8      	it	lt
 80137c8:	4249      	neglt	r1, r1
 80137ca:	f803 2b02 	strb.w	r2, [r3], #2
 80137ce:	bfb4      	ite	lt
 80137d0:	222d      	movlt	r2, #45	; 0x2d
 80137d2:	222b      	movge	r2, #43	; 0x2b
 80137d4:	2909      	cmp	r1, #9
 80137d6:	7042      	strb	r2, [r0, #1]
 80137d8:	dd2a      	ble.n	8013830 <__exponent+0x70>
 80137da:	f10d 0207 	add.w	r2, sp, #7
 80137de:	4617      	mov	r7, r2
 80137e0:	260a      	movs	r6, #10
 80137e2:	4694      	mov	ip, r2
 80137e4:	fb91 f5f6 	sdiv	r5, r1, r6
 80137e8:	fb06 1415 	mls	r4, r6, r5, r1
 80137ec:	3430      	adds	r4, #48	; 0x30
 80137ee:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80137f2:	460c      	mov	r4, r1
 80137f4:	2c63      	cmp	r4, #99	; 0x63
 80137f6:	f102 32ff 	add.w	r2, r2, #4294967295
 80137fa:	4629      	mov	r1, r5
 80137fc:	dcf1      	bgt.n	80137e2 <__exponent+0x22>
 80137fe:	3130      	adds	r1, #48	; 0x30
 8013800:	f1ac 0402 	sub.w	r4, ip, #2
 8013804:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013808:	1c41      	adds	r1, r0, #1
 801380a:	4622      	mov	r2, r4
 801380c:	42ba      	cmp	r2, r7
 801380e:	d30a      	bcc.n	8013826 <__exponent+0x66>
 8013810:	f10d 0209 	add.w	r2, sp, #9
 8013814:	eba2 020c 	sub.w	r2, r2, ip
 8013818:	42bc      	cmp	r4, r7
 801381a:	bf88      	it	hi
 801381c:	2200      	movhi	r2, #0
 801381e:	4413      	add	r3, r2
 8013820:	1a18      	subs	r0, r3, r0
 8013822:	b003      	add	sp, #12
 8013824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013826:	f812 5b01 	ldrb.w	r5, [r2], #1
 801382a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801382e:	e7ed      	b.n	801380c <__exponent+0x4c>
 8013830:	2330      	movs	r3, #48	; 0x30
 8013832:	3130      	adds	r1, #48	; 0x30
 8013834:	7083      	strb	r3, [r0, #2]
 8013836:	70c1      	strb	r1, [r0, #3]
 8013838:	1d03      	adds	r3, r0, #4
 801383a:	e7f1      	b.n	8013820 <__exponent+0x60>
 801383c:	0000      	movs	r0, r0
	...

08013840 <_printf_float>:
 8013840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013844:	b08b      	sub	sp, #44	; 0x2c
 8013846:	460c      	mov	r4, r1
 8013848:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801384c:	4616      	mov	r6, r2
 801384e:	461f      	mov	r7, r3
 8013850:	4605      	mov	r5, r0
 8013852:	f000 fed1 	bl	80145f8 <_localeconv_r>
 8013856:	f8d0 b000 	ldr.w	fp, [r0]
 801385a:	4658      	mov	r0, fp
 801385c:	f7ec fda8 	bl	80003b0 <strlen>
 8013860:	2300      	movs	r3, #0
 8013862:	9308      	str	r3, [sp, #32]
 8013864:	f8d8 3000 	ldr.w	r3, [r8]
 8013868:	f894 9018 	ldrb.w	r9, [r4, #24]
 801386c:	6822      	ldr	r2, [r4, #0]
 801386e:	3307      	adds	r3, #7
 8013870:	f023 0307 	bic.w	r3, r3, #7
 8013874:	f103 0108 	add.w	r1, r3, #8
 8013878:	f8c8 1000 	str.w	r1, [r8]
 801387c:	ed93 0b00 	vldr	d0, [r3]
 8013880:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8013ae0 <_printf_float+0x2a0>
 8013884:	eeb0 7bc0 	vabs.f64	d7, d0
 8013888:	eeb4 7b46 	vcmp.f64	d7, d6
 801388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013890:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8013894:	4682      	mov	sl, r0
 8013896:	dd24      	ble.n	80138e2 <_printf_float+0xa2>
 8013898:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801389c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138a0:	d502      	bpl.n	80138a8 <_printf_float+0x68>
 80138a2:	232d      	movs	r3, #45	; 0x2d
 80138a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138a8:	498f      	ldr	r1, [pc, #572]	; (8013ae8 <_printf_float+0x2a8>)
 80138aa:	4b90      	ldr	r3, [pc, #576]	; (8013aec <_printf_float+0x2ac>)
 80138ac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80138b0:	bf94      	ite	ls
 80138b2:	4688      	movls	r8, r1
 80138b4:	4698      	movhi	r8, r3
 80138b6:	2303      	movs	r3, #3
 80138b8:	6123      	str	r3, [r4, #16]
 80138ba:	f022 0204 	bic.w	r2, r2, #4
 80138be:	2300      	movs	r3, #0
 80138c0:	6022      	str	r2, [r4, #0]
 80138c2:	9304      	str	r3, [sp, #16]
 80138c4:	9700      	str	r7, [sp, #0]
 80138c6:	4633      	mov	r3, r6
 80138c8:	aa09      	add	r2, sp, #36	; 0x24
 80138ca:	4621      	mov	r1, r4
 80138cc:	4628      	mov	r0, r5
 80138ce:	f000 f9d1 	bl	8013c74 <_printf_common>
 80138d2:	3001      	adds	r0, #1
 80138d4:	f040 808a 	bne.w	80139ec <_printf_float+0x1ac>
 80138d8:	f04f 30ff 	mov.w	r0, #4294967295
 80138dc:	b00b      	add	sp, #44	; 0x2c
 80138de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80138e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ea:	d709      	bvc.n	8013900 <_printf_float+0xc0>
 80138ec:	ee10 3a90 	vmov	r3, s1
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	bfbc      	itt	lt
 80138f4:	232d      	movlt	r3, #45	; 0x2d
 80138f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80138fa:	497d      	ldr	r1, [pc, #500]	; (8013af0 <_printf_float+0x2b0>)
 80138fc:	4b7d      	ldr	r3, [pc, #500]	; (8013af4 <_printf_float+0x2b4>)
 80138fe:	e7d5      	b.n	80138ac <_printf_float+0x6c>
 8013900:	6863      	ldr	r3, [r4, #4]
 8013902:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8013906:	9104      	str	r1, [sp, #16]
 8013908:	1c59      	adds	r1, r3, #1
 801390a:	d13c      	bne.n	8013986 <_printf_float+0x146>
 801390c:	2306      	movs	r3, #6
 801390e:	6063      	str	r3, [r4, #4]
 8013910:	2300      	movs	r3, #0
 8013912:	9303      	str	r3, [sp, #12]
 8013914:	ab08      	add	r3, sp, #32
 8013916:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801391a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801391e:	ab07      	add	r3, sp, #28
 8013920:	6861      	ldr	r1, [r4, #4]
 8013922:	9300      	str	r3, [sp, #0]
 8013924:	6022      	str	r2, [r4, #0]
 8013926:	f10d 031b 	add.w	r3, sp, #27
 801392a:	4628      	mov	r0, r5
 801392c:	f7ff fef6 	bl	801371c <__cvt>
 8013930:	9b04      	ldr	r3, [sp, #16]
 8013932:	9907      	ldr	r1, [sp, #28]
 8013934:	2b47      	cmp	r3, #71	; 0x47
 8013936:	4680      	mov	r8, r0
 8013938:	d108      	bne.n	801394c <_printf_float+0x10c>
 801393a:	1cc8      	adds	r0, r1, #3
 801393c:	db02      	blt.n	8013944 <_printf_float+0x104>
 801393e:	6863      	ldr	r3, [r4, #4]
 8013940:	4299      	cmp	r1, r3
 8013942:	dd41      	ble.n	80139c8 <_printf_float+0x188>
 8013944:	f1a9 0902 	sub.w	r9, r9, #2
 8013948:	fa5f f989 	uxtb.w	r9, r9
 801394c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013950:	d820      	bhi.n	8013994 <_printf_float+0x154>
 8013952:	3901      	subs	r1, #1
 8013954:	464a      	mov	r2, r9
 8013956:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801395a:	9107      	str	r1, [sp, #28]
 801395c:	f7ff ff30 	bl	80137c0 <__exponent>
 8013960:	9a08      	ldr	r2, [sp, #32]
 8013962:	9004      	str	r0, [sp, #16]
 8013964:	1813      	adds	r3, r2, r0
 8013966:	2a01      	cmp	r2, #1
 8013968:	6123      	str	r3, [r4, #16]
 801396a:	dc02      	bgt.n	8013972 <_printf_float+0x132>
 801396c:	6822      	ldr	r2, [r4, #0]
 801396e:	07d2      	lsls	r2, r2, #31
 8013970:	d501      	bpl.n	8013976 <_printf_float+0x136>
 8013972:	3301      	adds	r3, #1
 8013974:	6123      	str	r3, [r4, #16]
 8013976:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d0a2      	beq.n	80138c4 <_printf_float+0x84>
 801397e:	232d      	movs	r3, #45	; 0x2d
 8013980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013984:	e79e      	b.n	80138c4 <_printf_float+0x84>
 8013986:	9904      	ldr	r1, [sp, #16]
 8013988:	2947      	cmp	r1, #71	; 0x47
 801398a:	d1c1      	bne.n	8013910 <_printf_float+0xd0>
 801398c:	2b00      	cmp	r3, #0
 801398e:	d1bf      	bne.n	8013910 <_printf_float+0xd0>
 8013990:	2301      	movs	r3, #1
 8013992:	e7bc      	b.n	801390e <_printf_float+0xce>
 8013994:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8013998:	d118      	bne.n	80139cc <_printf_float+0x18c>
 801399a:	2900      	cmp	r1, #0
 801399c:	6863      	ldr	r3, [r4, #4]
 801399e:	dd0b      	ble.n	80139b8 <_printf_float+0x178>
 80139a0:	6121      	str	r1, [r4, #16]
 80139a2:	b913      	cbnz	r3, 80139aa <_printf_float+0x16a>
 80139a4:	6822      	ldr	r2, [r4, #0]
 80139a6:	07d0      	lsls	r0, r2, #31
 80139a8:	d502      	bpl.n	80139b0 <_printf_float+0x170>
 80139aa:	3301      	adds	r3, #1
 80139ac:	440b      	add	r3, r1
 80139ae:	6123      	str	r3, [r4, #16]
 80139b0:	2300      	movs	r3, #0
 80139b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80139b4:	9304      	str	r3, [sp, #16]
 80139b6:	e7de      	b.n	8013976 <_printf_float+0x136>
 80139b8:	b913      	cbnz	r3, 80139c0 <_printf_float+0x180>
 80139ba:	6822      	ldr	r2, [r4, #0]
 80139bc:	07d2      	lsls	r2, r2, #31
 80139be:	d501      	bpl.n	80139c4 <_printf_float+0x184>
 80139c0:	3302      	adds	r3, #2
 80139c2:	e7f4      	b.n	80139ae <_printf_float+0x16e>
 80139c4:	2301      	movs	r3, #1
 80139c6:	e7f2      	b.n	80139ae <_printf_float+0x16e>
 80139c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80139cc:	9b08      	ldr	r3, [sp, #32]
 80139ce:	4299      	cmp	r1, r3
 80139d0:	db05      	blt.n	80139de <_printf_float+0x19e>
 80139d2:	6823      	ldr	r3, [r4, #0]
 80139d4:	6121      	str	r1, [r4, #16]
 80139d6:	07d8      	lsls	r0, r3, #31
 80139d8:	d5ea      	bpl.n	80139b0 <_printf_float+0x170>
 80139da:	1c4b      	adds	r3, r1, #1
 80139dc:	e7e7      	b.n	80139ae <_printf_float+0x16e>
 80139de:	2900      	cmp	r1, #0
 80139e0:	bfd4      	ite	le
 80139e2:	f1c1 0202 	rsble	r2, r1, #2
 80139e6:	2201      	movgt	r2, #1
 80139e8:	4413      	add	r3, r2
 80139ea:	e7e0      	b.n	80139ae <_printf_float+0x16e>
 80139ec:	6823      	ldr	r3, [r4, #0]
 80139ee:	055a      	lsls	r2, r3, #21
 80139f0:	d407      	bmi.n	8013a02 <_printf_float+0x1c2>
 80139f2:	6923      	ldr	r3, [r4, #16]
 80139f4:	4642      	mov	r2, r8
 80139f6:	4631      	mov	r1, r6
 80139f8:	4628      	mov	r0, r5
 80139fa:	47b8      	blx	r7
 80139fc:	3001      	adds	r0, #1
 80139fe:	d12a      	bne.n	8013a56 <_printf_float+0x216>
 8013a00:	e76a      	b.n	80138d8 <_printf_float+0x98>
 8013a02:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8013a06:	f240 80e0 	bls.w	8013bca <_printf_float+0x38a>
 8013a0a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013a0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013a12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a16:	d133      	bne.n	8013a80 <_printf_float+0x240>
 8013a18:	4a37      	ldr	r2, [pc, #220]	; (8013af8 <_printf_float+0x2b8>)
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	4631      	mov	r1, r6
 8013a1e:	4628      	mov	r0, r5
 8013a20:	47b8      	blx	r7
 8013a22:	3001      	adds	r0, #1
 8013a24:	f43f af58 	beq.w	80138d8 <_printf_float+0x98>
 8013a28:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	db02      	blt.n	8013a36 <_printf_float+0x1f6>
 8013a30:	6823      	ldr	r3, [r4, #0]
 8013a32:	07d8      	lsls	r0, r3, #31
 8013a34:	d50f      	bpl.n	8013a56 <_printf_float+0x216>
 8013a36:	4653      	mov	r3, sl
 8013a38:	465a      	mov	r2, fp
 8013a3a:	4631      	mov	r1, r6
 8013a3c:	4628      	mov	r0, r5
 8013a3e:	47b8      	blx	r7
 8013a40:	3001      	adds	r0, #1
 8013a42:	f43f af49 	beq.w	80138d8 <_printf_float+0x98>
 8013a46:	f04f 0800 	mov.w	r8, #0
 8013a4a:	f104 091a 	add.w	r9, r4, #26
 8013a4e:	9b08      	ldr	r3, [sp, #32]
 8013a50:	3b01      	subs	r3, #1
 8013a52:	4543      	cmp	r3, r8
 8013a54:	dc09      	bgt.n	8013a6a <_printf_float+0x22a>
 8013a56:	6823      	ldr	r3, [r4, #0]
 8013a58:	079b      	lsls	r3, r3, #30
 8013a5a:	f100 8106 	bmi.w	8013c6a <_printf_float+0x42a>
 8013a5e:	68e0      	ldr	r0, [r4, #12]
 8013a60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a62:	4298      	cmp	r0, r3
 8013a64:	bfb8      	it	lt
 8013a66:	4618      	movlt	r0, r3
 8013a68:	e738      	b.n	80138dc <_printf_float+0x9c>
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	464a      	mov	r2, r9
 8013a6e:	4631      	mov	r1, r6
 8013a70:	4628      	mov	r0, r5
 8013a72:	47b8      	blx	r7
 8013a74:	3001      	adds	r0, #1
 8013a76:	f43f af2f 	beq.w	80138d8 <_printf_float+0x98>
 8013a7a:	f108 0801 	add.w	r8, r8, #1
 8013a7e:	e7e6      	b.n	8013a4e <_printf_float+0x20e>
 8013a80:	9b07      	ldr	r3, [sp, #28]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	dc3a      	bgt.n	8013afc <_printf_float+0x2bc>
 8013a86:	4a1c      	ldr	r2, [pc, #112]	; (8013af8 <_printf_float+0x2b8>)
 8013a88:	2301      	movs	r3, #1
 8013a8a:	4631      	mov	r1, r6
 8013a8c:	4628      	mov	r0, r5
 8013a8e:	47b8      	blx	r7
 8013a90:	3001      	adds	r0, #1
 8013a92:	f43f af21 	beq.w	80138d8 <_printf_float+0x98>
 8013a96:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8013a9a:	4313      	orrs	r3, r2
 8013a9c:	d102      	bne.n	8013aa4 <_printf_float+0x264>
 8013a9e:	6823      	ldr	r3, [r4, #0]
 8013aa0:	07d9      	lsls	r1, r3, #31
 8013aa2:	d5d8      	bpl.n	8013a56 <_printf_float+0x216>
 8013aa4:	4653      	mov	r3, sl
 8013aa6:	465a      	mov	r2, fp
 8013aa8:	4631      	mov	r1, r6
 8013aaa:	4628      	mov	r0, r5
 8013aac:	47b8      	blx	r7
 8013aae:	3001      	adds	r0, #1
 8013ab0:	f43f af12 	beq.w	80138d8 <_printf_float+0x98>
 8013ab4:	f04f 0900 	mov.w	r9, #0
 8013ab8:	f104 0a1a 	add.w	sl, r4, #26
 8013abc:	9b07      	ldr	r3, [sp, #28]
 8013abe:	425b      	negs	r3, r3
 8013ac0:	454b      	cmp	r3, r9
 8013ac2:	dc01      	bgt.n	8013ac8 <_printf_float+0x288>
 8013ac4:	9b08      	ldr	r3, [sp, #32]
 8013ac6:	e795      	b.n	80139f4 <_printf_float+0x1b4>
 8013ac8:	2301      	movs	r3, #1
 8013aca:	4652      	mov	r2, sl
 8013acc:	4631      	mov	r1, r6
 8013ace:	4628      	mov	r0, r5
 8013ad0:	47b8      	blx	r7
 8013ad2:	3001      	adds	r0, #1
 8013ad4:	f43f af00 	beq.w	80138d8 <_printf_float+0x98>
 8013ad8:	f109 0901 	add.w	r9, r9, #1
 8013adc:	e7ee      	b.n	8013abc <_printf_float+0x27c>
 8013ade:	bf00      	nop
 8013ae0:	ffffffff 	.word	0xffffffff
 8013ae4:	7fefffff 	.word	0x7fefffff
 8013ae8:	08017cec 	.word	0x08017cec
 8013aec:	08017cf0 	.word	0x08017cf0
 8013af0:	08017cf4 	.word	0x08017cf4
 8013af4:	08017cf8 	.word	0x08017cf8
 8013af8:	08017cfc 	.word	0x08017cfc
 8013afc:	9a08      	ldr	r2, [sp, #32]
 8013afe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013b00:	429a      	cmp	r2, r3
 8013b02:	bfa8      	it	ge
 8013b04:	461a      	movge	r2, r3
 8013b06:	2a00      	cmp	r2, #0
 8013b08:	4691      	mov	r9, r2
 8013b0a:	dc38      	bgt.n	8013b7e <_printf_float+0x33e>
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	9305      	str	r3, [sp, #20]
 8013b10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013b14:	f104 021a 	add.w	r2, r4, #26
 8013b18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013b1a:	9905      	ldr	r1, [sp, #20]
 8013b1c:	9304      	str	r3, [sp, #16]
 8013b1e:	eba3 0309 	sub.w	r3, r3, r9
 8013b22:	428b      	cmp	r3, r1
 8013b24:	dc33      	bgt.n	8013b8e <_printf_float+0x34e>
 8013b26:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	db3c      	blt.n	8013ba8 <_printf_float+0x368>
 8013b2e:	6823      	ldr	r3, [r4, #0]
 8013b30:	07da      	lsls	r2, r3, #31
 8013b32:	d439      	bmi.n	8013ba8 <_printf_float+0x368>
 8013b34:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8013b38:	eba2 0903 	sub.w	r9, r2, r3
 8013b3c:	9b04      	ldr	r3, [sp, #16]
 8013b3e:	1ad2      	subs	r2, r2, r3
 8013b40:	4591      	cmp	r9, r2
 8013b42:	bfa8      	it	ge
 8013b44:	4691      	movge	r9, r2
 8013b46:	f1b9 0f00 	cmp.w	r9, #0
 8013b4a:	dc35      	bgt.n	8013bb8 <_printf_float+0x378>
 8013b4c:	f04f 0800 	mov.w	r8, #0
 8013b50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013b54:	f104 0a1a 	add.w	sl, r4, #26
 8013b58:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013b5c:	1a9b      	subs	r3, r3, r2
 8013b5e:	eba3 0309 	sub.w	r3, r3, r9
 8013b62:	4543      	cmp	r3, r8
 8013b64:	f77f af77 	ble.w	8013a56 <_printf_float+0x216>
 8013b68:	2301      	movs	r3, #1
 8013b6a:	4652      	mov	r2, sl
 8013b6c:	4631      	mov	r1, r6
 8013b6e:	4628      	mov	r0, r5
 8013b70:	47b8      	blx	r7
 8013b72:	3001      	adds	r0, #1
 8013b74:	f43f aeb0 	beq.w	80138d8 <_printf_float+0x98>
 8013b78:	f108 0801 	add.w	r8, r8, #1
 8013b7c:	e7ec      	b.n	8013b58 <_printf_float+0x318>
 8013b7e:	4613      	mov	r3, r2
 8013b80:	4631      	mov	r1, r6
 8013b82:	4642      	mov	r2, r8
 8013b84:	4628      	mov	r0, r5
 8013b86:	47b8      	blx	r7
 8013b88:	3001      	adds	r0, #1
 8013b8a:	d1bf      	bne.n	8013b0c <_printf_float+0x2cc>
 8013b8c:	e6a4      	b.n	80138d8 <_printf_float+0x98>
 8013b8e:	2301      	movs	r3, #1
 8013b90:	4631      	mov	r1, r6
 8013b92:	4628      	mov	r0, r5
 8013b94:	9204      	str	r2, [sp, #16]
 8013b96:	47b8      	blx	r7
 8013b98:	3001      	adds	r0, #1
 8013b9a:	f43f ae9d 	beq.w	80138d8 <_printf_float+0x98>
 8013b9e:	9b05      	ldr	r3, [sp, #20]
 8013ba0:	9a04      	ldr	r2, [sp, #16]
 8013ba2:	3301      	adds	r3, #1
 8013ba4:	9305      	str	r3, [sp, #20]
 8013ba6:	e7b7      	b.n	8013b18 <_printf_float+0x2d8>
 8013ba8:	4653      	mov	r3, sl
 8013baa:	465a      	mov	r2, fp
 8013bac:	4631      	mov	r1, r6
 8013bae:	4628      	mov	r0, r5
 8013bb0:	47b8      	blx	r7
 8013bb2:	3001      	adds	r0, #1
 8013bb4:	d1be      	bne.n	8013b34 <_printf_float+0x2f4>
 8013bb6:	e68f      	b.n	80138d8 <_printf_float+0x98>
 8013bb8:	9a04      	ldr	r2, [sp, #16]
 8013bba:	464b      	mov	r3, r9
 8013bbc:	4442      	add	r2, r8
 8013bbe:	4631      	mov	r1, r6
 8013bc0:	4628      	mov	r0, r5
 8013bc2:	47b8      	blx	r7
 8013bc4:	3001      	adds	r0, #1
 8013bc6:	d1c1      	bne.n	8013b4c <_printf_float+0x30c>
 8013bc8:	e686      	b.n	80138d8 <_printf_float+0x98>
 8013bca:	9a08      	ldr	r2, [sp, #32]
 8013bcc:	2a01      	cmp	r2, #1
 8013bce:	dc01      	bgt.n	8013bd4 <_printf_float+0x394>
 8013bd0:	07db      	lsls	r3, r3, #31
 8013bd2:	d537      	bpl.n	8013c44 <_printf_float+0x404>
 8013bd4:	2301      	movs	r3, #1
 8013bd6:	4642      	mov	r2, r8
 8013bd8:	4631      	mov	r1, r6
 8013bda:	4628      	mov	r0, r5
 8013bdc:	47b8      	blx	r7
 8013bde:	3001      	adds	r0, #1
 8013be0:	f43f ae7a 	beq.w	80138d8 <_printf_float+0x98>
 8013be4:	4653      	mov	r3, sl
 8013be6:	465a      	mov	r2, fp
 8013be8:	4631      	mov	r1, r6
 8013bea:	4628      	mov	r0, r5
 8013bec:	47b8      	blx	r7
 8013bee:	3001      	adds	r0, #1
 8013bf0:	f43f ae72 	beq.w	80138d8 <_printf_float+0x98>
 8013bf4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8013bf8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c00:	9b08      	ldr	r3, [sp, #32]
 8013c02:	d01a      	beq.n	8013c3a <_printf_float+0x3fa>
 8013c04:	3b01      	subs	r3, #1
 8013c06:	f108 0201 	add.w	r2, r8, #1
 8013c0a:	4631      	mov	r1, r6
 8013c0c:	4628      	mov	r0, r5
 8013c0e:	47b8      	blx	r7
 8013c10:	3001      	adds	r0, #1
 8013c12:	d10e      	bne.n	8013c32 <_printf_float+0x3f2>
 8013c14:	e660      	b.n	80138d8 <_printf_float+0x98>
 8013c16:	2301      	movs	r3, #1
 8013c18:	464a      	mov	r2, r9
 8013c1a:	4631      	mov	r1, r6
 8013c1c:	4628      	mov	r0, r5
 8013c1e:	47b8      	blx	r7
 8013c20:	3001      	adds	r0, #1
 8013c22:	f43f ae59 	beq.w	80138d8 <_printf_float+0x98>
 8013c26:	f108 0801 	add.w	r8, r8, #1
 8013c2a:	9b08      	ldr	r3, [sp, #32]
 8013c2c:	3b01      	subs	r3, #1
 8013c2e:	4543      	cmp	r3, r8
 8013c30:	dcf1      	bgt.n	8013c16 <_printf_float+0x3d6>
 8013c32:	9b04      	ldr	r3, [sp, #16]
 8013c34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013c38:	e6dd      	b.n	80139f6 <_printf_float+0x1b6>
 8013c3a:	f04f 0800 	mov.w	r8, #0
 8013c3e:	f104 091a 	add.w	r9, r4, #26
 8013c42:	e7f2      	b.n	8013c2a <_printf_float+0x3ea>
 8013c44:	2301      	movs	r3, #1
 8013c46:	4642      	mov	r2, r8
 8013c48:	e7df      	b.n	8013c0a <_printf_float+0x3ca>
 8013c4a:	2301      	movs	r3, #1
 8013c4c:	464a      	mov	r2, r9
 8013c4e:	4631      	mov	r1, r6
 8013c50:	4628      	mov	r0, r5
 8013c52:	47b8      	blx	r7
 8013c54:	3001      	adds	r0, #1
 8013c56:	f43f ae3f 	beq.w	80138d8 <_printf_float+0x98>
 8013c5a:	f108 0801 	add.w	r8, r8, #1
 8013c5e:	68e3      	ldr	r3, [r4, #12]
 8013c60:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c62:	1a5b      	subs	r3, r3, r1
 8013c64:	4543      	cmp	r3, r8
 8013c66:	dcf0      	bgt.n	8013c4a <_printf_float+0x40a>
 8013c68:	e6f9      	b.n	8013a5e <_printf_float+0x21e>
 8013c6a:	f04f 0800 	mov.w	r8, #0
 8013c6e:	f104 0919 	add.w	r9, r4, #25
 8013c72:	e7f4      	b.n	8013c5e <_printf_float+0x41e>

08013c74 <_printf_common>:
 8013c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c78:	4616      	mov	r6, r2
 8013c7a:	4699      	mov	r9, r3
 8013c7c:	688a      	ldr	r2, [r1, #8]
 8013c7e:	690b      	ldr	r3, [r1, #16]
 8013c80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013c84:	4293      	cmp	r3, r2
 8013c86:	bfb8      	it	lt
 8013c88:	4613      	movlt	r3, r2
 8013c8a:	6033      	str	r3, [r6, #0]
 8013c8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013c90:	4607      	mov	r7, r0
 8013c92:	460c      	mov	r4, r1
 8013c94:	b10a      	cbz	r2, 8013c9a <_printf_common+0x26>
 8013c96:	3301      	adds	r3, #1
 8013c98:	6033      	str	r3, [r6, #0]
 8013c9a:	6823      	ldr	r3, [r4, #0]
 8013c9c:	0699      	lsls	r1, r3, #26
 8013c9e:	bf42      	ittt	mi
 8013ca0:	6833      	ldrmi	r3, [r6, #0]
 8013ca2:	3302      	addmi	r3, #2
 8013ca4:	6033      	strmi	r3, [r6, #0]
 8013ca6:	6825      	ldr	r5, [r4, #0]
 8013ca8:	f015 0506 	ands.w	r5, r5, #6
 8013cac:	d106      	bne.n	8013cbc <_printf_common+0x48>
 8013cae:	f104 0a19 	add.w	sl, r4, #25
 8013cb2:	68e3      	ldr	r3, [r4, #12]
 8013cb4:	6832      	ldr	r2, [r6, #0]
 8013cb6:	1a9b      	subs	r3, r3, r2
 8013cb8:	42ab      	cmp	r3, r5
 8013cba:	dc26      	bgt.n	8013d0a <_printf_common+0x96>
 8013cbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013cc0:	1e13      	subs	r3, r2, #0
 8013cc2:	6822      	ldr	r2, [r4, #0]
 8013cc4:	bf18      	it	ne
 8013cc6:	2301      	movne	r3, #1
 8013cc8:	0692      	lsls	r2, r2, #26
 8013cca:	d42b      	bmi.n	8013d24 <_printf_common+0xb0>
 8013ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013cd0:	4649      	mov	r1, r9
 8013cd2:	4638      	mov	r0, r7
 8013cd4:	47c0      	blx	r8
 8013cd6:	3001      	adds	r0, #1
 8013cd8:	d01e      	beq.n	8013d18 <_printf_common+0xa4>
 8013cda:	6823      	ldr	r3, [r4, #0]
 8013cdc:	6922      	ldr	r2, [r4, #16]
 8013cde:	f003 0306 	and.w	r3, r3, #6
 8013ce2:	2b04      	cmp	r3, #4
 8013ce4:	bf02      	ittt	eq
 8013ce6:	68e5      	ldreq	r5, [r4, #12]
 8013ce8:	6833      	ldreq	r3, [r6, #0]
 8013cea:	1aed      	subeq	r5, r5, r3
 8013cec:	68a3      	ldr	r3, [r4, #8]
 8013cee:	bf0c      	ite	eq
 8013cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013cf4:	2500      	movne	r5, #0
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	bfc4      	itt	gt
 8013cfa:	1a9b      	subgt	r3, r3, r2
 8013cfc:	18ed      	addgt	r5, r5, r3
 8013cfe:	2600      	movs	r6, #0
 8013d00:	341a      	adds	r4, #26
 8013d02:	42b5      	cmp	r5, r6
 8013d04:	d11a      	bne.n	8013d3c <_printf_common+0xc8>
 8013d06:	2000      	movs	r0, #0
 8013d08:	e008      	b.n	8013d1c <_printf_common+0xa8>
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	4652      	mov	r2, sl
 8013d0e:	4649      	mov	r1, r9
 8013d10:	4638      	mov	r0, r7
 8013d12:	47c0      	blx	r8
 8013d14:	3001      	adds	r0, #1
 8013d16:	d103      	bne.n	8013d20 <_printf_common+0xac>
 8013d18:	f04f 30ff 	mov.w	r0, #4294967295
 8013d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d20:	3501      	adds	r5, #1
 8013d22:	e7c6      	b.n	8013cb2 <_printf_common+0x3e>
 8013d24:	18e1      	adds	r1, r4, r3
 8013d26:	1c5a      	adds	r2, r3, #1
 8013d28:	2030      	movs	r0, #48	; 0x30
 8013d2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013d2e:	4422      	add	r2, r4
 8013d30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013d34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013d38:	3302      	adds	r3, #2
 8013d3a:	e7c7      	b.n	8013ccc <_printf_common+0x58>
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	4622      	mov	r2, r4
 8013d40:	4649      	mov	r1, r9
 8013d42:	4638      	mov	r0, r7
 8013d44:	47c0      	blx	r8
 8013d46:	3001      	adds	r0, #1
 8013d48:	d0e6      	beq.n	8013d18 <_printf_common+0xa4>
 8013d4a:	3601      	adds	r6, #1
 8013d4c:	e7d9      	b.n	8013d02 <_printf_common+0x8e>
	...

08013d50 <_printf_i>:
 8013d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d54:	7e0f      	ldrb	r7, [r1, #24]
 8013d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013d58:	2f78      	cmp	r7, #120	; 0x78
 8013d5a:	4691      	mov	r9, r2
 8013d5c:	4680      	mov	r8, r0
 8013d5e:	460c      	mov	r4, r1
 8013d60:	469a      	mov	sl, r3
 8013d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013d66:	d807      	bhi.n	8013d78 <_printf_i+0x28>
 8013d68:	2f62      	cmp	r7, #98	; 0x62
 8013d6a:	d80a      	bhi.n	8013d82 <_printf_i+0x32>
 8013d6c:	2f00      	cmp	r7, #0
 8013d6e:	f000 80d4 	beq.w	8013f1a <_printf_i+0x1ca>
 8013d72:	2f58      	cmp	r7, #88	; 0x58
 8013d74:	f000 80c0 	beq.w	8013ef8 <_printf_i+0x1a8>
 8013d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013d80:	e03a      	b.n	8013df8 <_printf_i+0xa8>
 8013d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013d86:	2b15      	cmp	r3, #21
 8013d88:	d8f6      	bhi.n	8013d78 <_printf_i+0x28>
 8013d8a:	a101      	add	r1, pc, #4	; (adr r1, 8013d90 <_printf_i+0x40>)
 8013d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013d90:	08013de9 	.word	0x08013de9
 8013d94:	08013dfd 	.word	0x08013dfd
 8013d98:	08013d79 	.word	0x08013d79
 8013d9c:	08013d79 	.word	0x08013d79
 8013da0:	08013d79 	.word	0x08013d79
 8013da4:	08013d79 	.word	0x08013d79
 8013da8:	08013dfd 	.word	0x08013dfd
 8013dac:	08013d79 	.word	0x08013d79
 8013db0:	08013d79 	.word	0x08013d79
 8013db4:	08013d79 	.word	0x08013d79
 8013db8:	08013d79 	.word	0x08013d79
 8013dbc:	08013f01 	.word	0x08013f01
 8013dc0:	08013e29 	.word	0x08013e29
 8013dc4:	08013ebb 	.word	0x08013ebb
 8013dc8:	08013d79 	.word	0x08013d79
 8013dcc:	08013d79 	.word	0x08013d79
 8013dd0:	08013f23 	.word	0x08013f23
 8013dd4:	08013d79 	.word	0x08013d79
 8013dd8:	08013e29 	.word	0x08013e29
 8013ddc:	08013d79 	.word	0x08013d79
 8013de0:	08013d79 	.word	0x08013d79
 8013de4:	08013ec3 	.word	0x08013ec3
 8013de8:	682b      	ldr	r3, [r5, #0]
 8013dea:	1d1a      	adds	r2, r3, #4
 8013dec:	681b      	ldr	r3, [r3, #0]
 8013dee:	602a      	str	r2, [r5, #0]
 8013df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013df8:	2301      	movs	r3, #1
 8013dfa:	e09f      	b.n	8013f3c <_printf_i+0x1ec>
 8013dfc:	6820      	ldr	r0, [r4, #0]
 8013dfe:	682b      	ldr	r3, [r5, #0]
 8013e00:	0607      	lsls	r7, r0, #24
 8013e02:	f103 0104 	add.w	r1, r3, #4
 8013e06:	6029      	str	r1, [r5, #0]
 8013e08:	d501      	bpl.n	8013e0e <_printf_i+0xbe>
 8013e0a:	681e      	ldr	r6, [r3, #0]
 8013e0c:	e003      	b.n	8013e16 <_printf_i+0xc6>
 8013e0e:	0646      	lsls	r6, r0, #25
 8013e10:	d5fb      	bpl.n	8013e0a <_printf_i+0xba>
 8013e12:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013e16:	2e00      	cmp	r6, #0
 8013e18:	da03      	bge.n	8013e22 <_printf_i+0xd2>
 8013e1a:	232d      	movs	r3, #45	; 0x2d
 8013e1c:	4276      	negs	r6, r6
 8013e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e22:	485a      	ldr	r0, [pc, #360]	; (8013f8c <_printf_i+0x23c>)
 8013e24:	230a      	movs	r3, #10
 8013e26:	e012      	b.n	8013e4e <_printf_i+0xfe>
 8013e28:	682b      	ldr	r3, [r5, #0]
 8013e2a:	6820      	ldr	r0, [r4, #0]
 8013e2c:	1d19      	adds	r1, r3, #4
 8013e2e:	6029      	str	r1, [r5, #0]
 8013e30:	0605      	lsls	r5, r0, #24
 8013e32:	d501      	bpl.n	8013e38 <_printf_i+0xe8>
 8013e34:	681e      	ldr	r6, [r3, #0]
 8013e36:	e002      	b.n	8013e3e <_printf_i+0xee>
 8013e38:	0641      	lsls	r1, r0, #25
 8013e3a:	d5fb      	bpl.n	8013e34 <_printf_i+0xe4>
 8013e3c:	881e      	ldrh	r6, [r3, #0]
 8013e3e:	4853      	ldr	r0, [pc, #332]	; (8013f8c <_printf_i+0x23c>)
 8013e40:	2f6f      	cmp	r7, #111	; 0x6f
 8013e42:	bf0c      	ite	eq
 8013e44:	2308      	moveq	r3, #8
 8013e46:	230a      	movne	r3, #10
 8013e48:	2100      	movs	r1, #0
 8013e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013e4e:	6865      	ldr	r5, [r4, #4]
 8013e50:	60a5      	str	r5, [r4, #8]
 8013e52:	2d00      	cmp	r5, #0
 8013e54:	bfa2      	ittt	ge
 8013e56:	6821      	ldrge	r1, [r4, #0]
 8013e58:	f021 0104 	bicge.w	r1, r1, #4
 8013e5c:	6021      	strge	r1, [r4, #0]
 8013e5e:	b90e      	cbnz	r6, 8013e64 <_printf_i+0x114>
 8013e60:	2d00      	cmp	r5, #0
 8013e62:	d04b      	beq.n	8013efc <_printf_i+0x1ac>
 8013e64:	4615      	mov	r5, r2
 8013e66:	fbb6 f1f3 	udiv	r1, r6, r3
 8013e6a:	fb03 6711 	mls	r7, r3, r1, r6
 8013e6e:	5dc7      	ldrb	r7, [r0, r7]
 8013e70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013e74:	4637      	mov	r7, r6
 8013e76:	42bb      	cmp	r3, r7
 8013e78:	460e      	mov	r6, r1
 8013e7a:	d9f4      	bls.n	8013e66 <_printf_i+0x116>
 8013e7c:	2b08      	cmp	r3, #8
 8013e7e:	d10b      	bne.n	8013e98 <_printf_i+0x148>
 8013e80:	6823      	ldr	r3, [r4, #0]
 8013e82:	07de      	lsls	r6, r3, #31
 8013e84:	d508      	bpl.n	8013e98 <_printf_i+0x148>
 8013e86:	6923      	ldr	r3, [r4, #16]
 8013e88:	6861      	ldr	r1, [r4, #4]
 8013e8a:	4299      	cmp	r1, r3
 8013e8c:	bfde      	ittt	le
 8013e8e:	2330      	movle	r3, #48	; 0x30
 8013e90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013e94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013e98:	1b52      	subs	r2, r2, r5
 8013e9a:	6122      	str	r2, [r4, #16]
 8013e9c:	f8cd a000 	str.w	sl, [sp]
 8013ea0:	464b      	mov	r3, r9
 8013ea2:	aa03      	add	r2, sp, #12
 8013ea4:	4621      	mov	r1, r4
 8013ea6:	4640      	mov	r0, r8
 8013ea8:	f7ff fee4 	bl	8013c74 <_printf_common>
 8013eac:	3001      	adds	r0, #1
 8013eae:	d14a      	bne.n	8013f46 <_printf_i+0x1f6>
 8013eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013eb4:	b004      	add	sp, #16
 8013eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013eba:	6823      	ldr	r3, [r4, #0]
 8013ebc:	f043 0320 	orr.w	r3, r3, #32
 8013ec0:	6023      	str	r3, [r4, #0]
 8013ec2:	4833      	ldr	r0, [pc, #204]	; (8013f90 <_printf_i+0x240>)
 8013ec4:	2778      	movs	r7, #120	; 0x78
 8013ec6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013eca:	6823      	ldr	r3, [r4, #0]
 8013ecc:	6829      	ldr	r1, [r5, #0]
 8013ece:	061f      	lsls	r7, r3, #24
 8013ed0:	f851 6b04 	ldr.w	r6, [r1], #4
 8013ed4:	d402      	bmi.n	8013edc <_printf_i+0x18c>
 8013ed6:	065f      	lsls	r7, r3, #25
 8013ed8:	bf48      	it	mi
 8013eda:	b2b6      	uxthmi	r6, r6
 8013edc:	07df      	lsls	r7, r3, #31
 8013ede:	bf48      	it	mi
 8013ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8013ee4:	6029      	str	r1, [r5, #0]
 8013ee6:	bf48      	it	mi
 8013ee8:	6023      	strmi	r3, [r4, #0]
 8013eea:	b91e      	cbnz	r6, 8013ef4 <_printf_i+0x1a4>
 8013eec:	6823      	ldr	r3, [r4, #0]
 8013eee:	f023 0320 	bic.w	r3, r3, #32
 8013ef2:	6023      	str	r3, [r4, #0]
 8013ef4:	2310      	movs	r3, #16
 8013ef6:	e7a7      	b.n	8013e48 <_printf_i+0xf8>
 8013ef8:	4824      	ldr	r0, [pc, #144]	; (8013f8c <_printf_i+0x23c>)
 8013efa:	e7e4      	b.n	8013ec6 <_printf_i+0x176>
 8013efc:	4615      	mov	r5, r2
 8013efe:	e7bd      	b.n	8013e7c <_printf_i+0x12c>
 8013f00:	682b      	ldr	r3, [r5, #0]
 8013f02:	6826      	ldr	r6, [r4, #0]
 8013f04:	6961      	ldr	r1, [r4, #20]
 8013f06:	1d18      	adds	r0, r3, #4
 8013f08:	6028      	str	r0, [r5, #0]
 8013f0a:	0635      	lsls	r5, r6, #24
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	d501      	bpl.n	8013f14 <_printf_i+0x1c4>
 8013f10:	6019      	str	r1, [r3, #0]
 8013f12:	e002      	b.n	8013f1a <_printf_i+0x1ca>
 8013f14:	0670      	lsls	r0, r6, #25
 8013f16:	d5fb      	bpl.n	8013f10 <_printf_i+0x1c0>
 8013f18:	8019      	strh	r1, [r3, #0]
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	6123      	str	r3, [r4, #16]
 8013f1e:	4615      	mov	r5, r2
 8013f20:	e7bc      	b.n	8013e9c <_printf_i+0x14c>
 8013f22:	682b      	ldr	r3, [r5, #0]
 8013f24:	1d1a      	adds	r2, r3, #4
 8013f26:	602a      	str	r2, [r5, #0]
 8013f28:	681d      	ldr	r5, [r3, #0]
 8013f2a:	6862      	ldr	r2, [r4, #4]
 8013f2c:	2100      	movs	r1, #0
 8013f2e:	4628      	mov	r0, r5
 8013f30:	f7ec f9ee 	bl	8000310 <memchr>
 8013f34:	b108      	cbz	r0, 8013f3a <_printf_i+0x1ea>
 8013f36:	1b40      	subs	r0, r0, r5
 8013f38:	6060      	str	r0, [r4, #4]
 8013f3a:	6863      	ldr	r3, [r4, #4]
 8013f3c:	6123      	str	r3, [r4, #16]
 8013f3e:	2300      	movs	r3, #0
 8013f40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f44:	e7aa      	b.n	8013e9c <_printf_i+0x14c>
 8013f46:	6923      	ldr	r3, [r4, #16]
 8013f48:	462a      	mov	r2, r5
 8013f4a:	4649      	mov	r1, r9
 8013f4c:	4640      	mov	r0, r8
 8013f4e:	47d0      	blx	sl
 8013f50:	3001      	adds	r0, #1
 8013f52:	d0ad      	beq.n	8013eb0 <_printf_i+0x160>
 8013f54:	6823      	ldr	r3, [r4, #0]
 8013f56:	079b      	lsls	r3, r3, #30
 8013f58:	d413      	bmi.n	8013f82 <_printf_i+0x232>
 8013f5a:	68e0      	ldr	r0, [r4, #12]
 8013f5c:	9b03      	ldr	r3, [sp, #12]
 8013f5e:	4298      	cmp	r0, r3
 8013f60:	bfb8      	it	lt
 8013f62:	4618      	movlt	r0, r3
 8013f64:	e7a6      	b.n	8013eb4 <_printf_i+0x164>
 8013f66:	2301      	movs	r3, #1
 8013f68:	4632      	mov	r2, r6
 8013f6a:	4649      	mov	r1, r9
 8013f6c:	4640      	mov	r0, r8
 8013f6e:	47d0      	blx	sl
 8013f70:	3001      	adds	r0, #1
 8013f72:	d09d      	beq.n	8013eb0 <_printf_i+0x160>
 8013f74:	3501      	adds	r5, #1
 8013f76:	68e3      	ldr	r3, [r4, #12]
 8013f78:	9903      	ldr	r1, [sp, #12]
 8013f7a:	1a5b      	subs	r3, r3, r1
 8013f7c:	42ab      	cmp	r3, r5
 8013f7e:	dcf2      	bgt.n	8013f66 <_printf_i+0x216>
 8013f80:	e7eb      	b.n	8013f5a <_printf_i+0x20a>
 8013f82:	2500      	movs	r5, #0
 8013f84:	f104 0619 	add.w	r6, r4, #25
 8013f88:	e7f5      	b.n	8013f76 <_printf_i+0x226>
 8013f8a:	bf00      	nop
 8013f8c:	08017cfe 	.word	0x08017cfe
 8013f90:	08017d0f 	.word	0x08017d0f

08013f94 <_scanf_float>:
 8013f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f98:	b087      	sub	sp, #28
 8013f9a:	4617      	mov	r7, r2
 8013f9c:	9303      	str	r3, [sp, #12]
 8013f9e:	688b      	ldr	r3, [r1, #8]
 8013fa0:	1e5a      	subs	r2, r3, #1
 8013fa2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8013fa6:	bf83      	ittte	hi
 8013fa8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013fac:	195b      	addhi	r3, r3, r5
 8013fae:	9302      	strhi	r3, [sp, #8]
 8013fb0:	2300      	movls	r3, #0
 8013fb2:	bf86      	itte	hi
 8013fb4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013fb8:	608b      	strhi	r3, [r1, #8]
 8013fba:	9302      	strls	r3, [sp, #8]
 8013fbc:	680b      	ldr	r3, [r1, #0]
 8013fbe:	468b      	mov	fp, r1
 8013fc0:	2500      	movs	r5, #0
 8013fc2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8013fc6:	f84b 3b1c 	str.w	r3, [fp], #28
 8013fca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013fce:	4680      	mov	r8, r0
 8013fd0:	460c      	mov	r4, r1
 8013fd2:	465e      	mov	r6, fp
 8013fd4:	46aa      	mov	sl, r5
 8013fd6:	46a9      	mov	r9, r5
 8013fd8:	9501      	str	r5, [sp, #4]
 8013fda:	68a2      	ldr	r2, [r4, #8]
 8013fdc:	b152      	cbz	r2, 8013ff4 <_scanf_float+0x60>
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	2b4e      	cmp	r3, #78	; 0x4e
 8013fe4:	d864      	bhi.n	80140b0 <_scanf_float+0x11c>
 8013fe6:	2b40      	cmp	r3, #64	; 0x40
 8013fe8:	d83c      	bhi.n	8014064 <_scanf_float+0xd0>
 8013fea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013fee:	b2c8      	uxtb	r0, r1
 8013ff0:	280e      	cmp	r0, #14
 8013ff2:	d93a      	bls.n	801406a <_scanf_float+0xd6>
 8013ff4:	f1b9 0f00 	cmp.w	r9, #0
 8013ff8:	d003      	beq.n	8014002 <_scanf_float+0x6e>
 8013ffa:	6823      	ldr	r3, [r4, #0]
 8013ffc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014000:	6023      	str	r3, [r4, #0]
 8014002:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014006:	f1ba 0f01 	cmp.w	sl, #1
 801400a:	f200 8113 	bhi.w	8014234 <_scanf_float+0x2a0>
 801400e:	455e      	cmp	r6, fp
 8014010:	f200 8105 	bhi.w	801421e <_scanf_float+0x28a>
 8014014:	2501      	movs	r5, #1
 8014016:	4628      	mov	r0, r5
 8014018:	b007      	add	sp, #28
 801401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801401e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8014022:	2a0d      	cmp	r2, #13
 8014024:	d8e6      	bhi.n	8013ff4 <_scanf_float+0x60>
 8014026:	a101      	add	r1, pc, #4	; (adr r1, 801402c <_scanf_float+0x98>)
 8014028:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801402c:	0801416b 	.word	0x0801416b
 8014030:	08013ff5 	.word	0x08013ff5
 8014034:	08013ff5 	.word	0x08013ff5
 8014038:	08013ff5 	.word	0x08013ff5
 801403c:	080141cb 	.word	0x080141cb
 8014040:	080141a3 	.word	0x080141a3
 8014044:	08013ff5 	.word	0x08013ff5
 8014048:	08013ff5 	.word	0x08013ff5
 801404c:	08014179 	.word	0x08014179
 8014050:	08013ff5 	.word	0x08013ff5
 8014054:	08013ff5 	.word	0x08013ff5
 8014058:	08013ff5 	.word	0x08013ff5
 801405c:	08013ff5 	.word	0x08013ff5
 8014060:	08014131 	.word	0x08014131
 8014064:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8014068:	e7db      	b.n	8014022 <_scanf_float+0x8e>
 801406a:	290e      	cmp	r1, #14
 801406c:	d8c2      	bhi.n	8013ff4 <_scanf_float+0x60>
 801406e:	a001      	add	r0, pc, #4	; (adr r0, 8014074 <_scanf_float+0xe0>)
 8014070:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8014074:	08014123 	.word	0x08014123
 8014078:	08013ff5 	.word	0x08013ff5
 801407c:	08014123 	.word	0x08014123
 8014080:	080141b7 	.word	0x080141b7
 8014084:	08013ff5 	.word	0x08013ff5
 8014088:	080140d1 	.word	0x080140d1
 801408c:	0801410d 	.word	0x0801410d
 8014090:	0801410d 	.word	0x0801410d
 8014094:	0801410d 	.word	0x0801410d
 8014098:	0801410d 	.word	0x0801410d
 801409c:	0801410d 	.word	0x0801410d
 80140a0:	0801410d 	.word	0x0801410d
 80140a4:	0801410d 	.word	0x0801410d
 80140a8:	0801410d 	.word	0x0801410d
 80140ac:	0801410d 	.word	0x0801410d
 80140b0:	2b6e      	cmp	r3, #110	; 0x6e
 80140b2:	d809      	bhi.n	80140c8 <_scanf_float+0x134>
 80140b4:	2b60      	cmp	r3, #96	; 0x60
 80140b6:	d8b2      	bhi.n	801401e <_scanf_float+0x8a>
 80140b8:	2b54      	cmp	r3, #84	; 0x54
 80140ba:	d077      	beq.n	80141ac <_scanf_float+0x218>
 80140bc:	2b59      	cmp	r3, #89	; 0x59
 80140be:	d199      	bne.n	8013ff4 <_scanf_float+0x60>
 80140c0:	2d07      	cmp	r5, #7
 80140c2:	d197      	bne.n	8013ff4 <_scanf_float+0x60>
 80140c4:	2508      	movs	r5, #8
 80140c6:	e029      	b.n	801411c <_scanf_float+0x188>
 80140c8:	2b74      	cmp	r3, #116	; 0x74
 80140ca:	d06f      	beq.n	80141ac <_scanf_float+0x218>
 80140cc:	2b79      	cmp	r3, #121	; 0x79
 80140ce:	e7f6      	b.n	80140be <_scanf_float+0x12a>
 80140d0:	6821      	ldr	r1, [r4, #0]
 80140d2:	05c8      	lsls	r0, r1, #23
 80140d4:	d51a      	bpl.n	801410c <_scanf_float+0x178>
 80140d6:	9b02      	ldr	r3, [sp, #8]
 80140d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80140dc:	6021      	str	r1, [r4, #0]
 80140de:	f109 0901 	add.w	r9, r9, #1
 80140e2:	b11b      	cbz	r3, 80140ec <_scanf_float+0x158>
 80140e4:	3b01      	subs	r3, #1
 80140e6:	3201      	adds	r2, #1
 80140e8:	9302      	str	r3, [sp, #8]
 80140ea:	60a2      	str	r2, [r4, #8]
 80140ec:	68a3      	ldr	r3, [r4, #8]
 80140ee:	3b01      	subs	r3, #1
 80140f0:	60a3      	str	r3, [r4, #8]
 80140f2:	6923      	ldr	r3, [r4, #16]
 80140f4:	3301      	adds	r3, #1
 80140f6:	6123      	str	r3, [r4, #16]
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	3b01      	subs	r3, #1
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	607b      	str	r3, [r7, #4]
 8014100:	f340 8084 	ble.w	801420c <_scanf_float+0x278>
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	3301      	adds	r3, #1
 8014108:	603b      	str	r3, [r7, #0]
 801410a:	e766      	b.n	8013fda <_scanf_float+0x46>
 801410c:	eb1a 0f05 	cmn.w	sl, r5
 8014110:	f47f af70 	bne.w	8013ff4 <_scanf_float+0x60>
 8014114:	6822      	ldr	r2, [r4, #0]
 8014116:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801411a:	6022      	str	r2, [r4, #0]
 801411c:	f806 3b01 	strb.w	r3, [r6], #1
 8014120:	e7e4      	b.n	80140ec <_scanf_float+0x158>
 8014122:	6822      	ldr	r2, [r4, #0]
 8014124:	0610      	lsls	r0, r2, #24
 8014126:	f57f af65 	bpl.w	8013ff4 <_scanf_float+0x60>
 801412a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801412e:	e7f4      	b.n	801411a <_scanf_float+0x186>
 8014130:	f1ba 0f00 	cmp.w	sl, #0
 8014134:	d10e      	bne.n	8014154 <_scanf_float+0x1c0>
 8014136:	f1b9 0f00 	cmp.w	r9, #0
 801413a:	d10e      	bne.n	801415a <_scanf_float+0x1c6>
 801413c:	6822      	ldr	r2, [r4, #0]
 801413e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014142:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8014146:	d108      	bne.n	801415a <_scanf_float+0x1c6>
 8014148:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801414c:	6022      	str	r2, [r4, #0]
 801414e:	f04f 0a01 	mov.w	sl, #1
 8014152:	e7e3      	b.n	801411c <_scanf_float+0x188>
 8014154:	f1ba 0f02 	cmp.w	sl, #2
 8014158:	d055      	beq.n	8014206 <_scanf_float+0x272>
 801415a:	2d01      	cmp	r5, #1
 801415c:	d002      	beq.n	8014164 <_scanf_float+0x1d0>
 801415e:	2d04      	cmp	r5, #4
 8014160:	f47f af48 	bne.w	8013ff4 <_scanf_float+0x60>
 8014164:	3501      	adds	r5, #1
 8014166:	b2ed      	uxtb	r5, r5
 8014168:	e7d8      	b.n	801411c <_scanf_float+0x188>
 801416a:	f1ba 0f01 	cmp.w	sl, #1
 801416e:	f47f af41 	bne.w	8013ff4 <_scanf_float+0x60>
 8014172:	f04f 0a02 	mov.w	sl, #2
 8014176:	e7d1      	b.n	801411c <_scanf_float+0x188>
 8014178:	b97d      	cbnz	r5, 801419a <_scanf_float+0x206>
 801417a:	f1b9 0f00 	cmp.w	r9, #0
 801417e:	f47f af3c 	bne.w	8013ffa <_scanf_float+0x66>
 8014182:	6822      	ldr	r2, [r4, #0]
 8014184:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8014188:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801418c:	f47f af39 	bne.w	8014002 <_scanf_float+0x6e>
 8014190:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8014194:	6022      	str	r2, [r4, #0]
 8014196:	2501      	movs	r5, #1
 8014198:	e7c0      	b.n	801411c <_scanf_float+0x188>
 801419a:	2d03      	cmp	r5, #3
 801419c:	d0e2      	beq.n	8014164 <_scanf_float+0x1d0>
 801419e:	2d05      	cmp	r5, #5
 80141a0:	e7de      	b.n	8014160 <_scanf_float+0x1cc>
 80141a2:	2d02      	cmp	r5, #2
 80141a4:	f47f af26 	bne.w	8013ff4 <_scanf_float+0x60>
 80141a8:	2503      	movs	r5, #3
 80141aa:	e7b7      	b.n	801411c <_scanf_float+0x188>
 80141ac:	2d06      	cmp	r5, #6
 80141ae:	f47f af21 	bne.w	8013ff4 <_scanf_float+0x60>
 80141b2:	2507      	movs	r5, #7
 80141b4:	e7b2      	b.n	801411c <_scanf_float+0x188>
 80141b6:	6822      	ldr	r2, [r4, #0]
 80141b8:	0591      	lsls	r1, r2, #22
 80141ba:	f57f af1b 	bpl.w	8013ff4 <_scanf_float+0x60>
 80141be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80141c2:	6022      	str	r2, [r4, #0]
 80141c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80141c8:	e7a8      	b.n	801411c <_scanf_float+0x188>
 80141ca:	6822      	ldr	r2, [r4, #0]
 80141cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80141d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80141d4:	d006      	beq.n	80141e4 <_scanf_float+0x250>
 80141d6:	0550      	lsls	r0, r2, #21
 80141d8:	f57f af0c 	bpl.w	8013ff4 <_scanf_float+0x60>
 80141dc:	f1b9 0f00 	cmp.w	r9, #0
 80141e0:	f43f af0f 	beq.w	8014002 <_scanf_float+0x6e>
 80141e4:	0591      	lsls	r1, r2, #22
 80141e6:	bf58      	it	pl
 80141e8:	9901      	ldrpl	r1, [sp, #4]
 80141ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80141ee:	bf58      	it	pl
 80141f0:	eba9 0101 	subpl.w	r1, r9, r1
 80141f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80141f8:	bf58      	it	pl
 80141fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80141fe:	6022      	str	r2, [r4, #0]
 8014200:	f04f 0900 	mov.w	r9, #0
 8014204:	e78a      	b.n	801411c <_scanf_float+0x188>
 8014206:	f04f 0a03 	mov.w	sl, #3
 801420a:	e787      	b.n	801411c <_scanf_float+0x188>
 801420c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014210:	4639      	mov	r1, r7
 8014212:	4640      	mov	r0, r8
 8014214:	4798      	blx	r3
 8014216:	2800      	cmp	r0, #0
 8014218:	f43f aedf 	beq.w	8013fda <_scanf_float+0x46>
 801421c:	e6ea      	b.n	8013ff4 <_scanf_float+0x60>
 801421e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014222:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8014226:	463a      	mov	r2, r7
 8014228:	4640      	mov	r0, r8
 801422a:	4798      	blx	r3
 801422c:	6923      	ldr	r3, [r4, #16]
 801422e:	3b01      	subs	r3, #1
 8014230:	6123      	str	r3, [r4, #16]
 8014232:	e6ec      	b.n	801400e <_scanf_float+0x7a>
 8014234:	1e6b      	subs	r3, r5, #1
 8014236:	2b06      	cmp	r3, #6
 8014238:	d825      	bhi.n	8014286 <_scanf_float+0x2f2>
 801423a:	2d02      	cmp	r5, #2
 801423c:	d836      	bhi.n	80142ac <_scanf_float+0x318>
 801423e:	455e      	cmp	r6, fp
 8014240:	f67f aee8 	bls.w	8014014 <_scanf_float+0x80>
 8014244:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014248:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801424c:	463a      	mov	r2, r7
 801424e:	4640      	mov	r0, r8
 8014250:	4798      	blx	r3
 8014252:	6923      	ldr	r3, [r4, #16]
 8014254:	3b01      	subs	r3, #1
 8014256:	6123      	str	r3, [r4, #16]
 8014258:	e7f1      	b.n	801423e <_scanf_float+0x2aa>
 801425a:	9802      	ldr	r0, [sp, #8]
 801425c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014260:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8014264:	9002      	str	r0, [sp, #8]
 8014266:	463a      	mov	r2, r7
 8014268:	4640      	mov	r0, r8
 801426a:	4798      	blx	r3
 801426c:	6923      	ldr	r3, [r4, #16]
 801426e:	3b01      	subs	r3, #1
 8014270:	6123      	str	r3, [r4, #16]
 8014272:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014276:	fa5f fa8a 	uxtb.w	sl, sl
 801427a:	f1ba 0f02 	cmp.w	sl, #2
 801427e:	d1ec      	bne.n	801425a <_scanf_float+0x2c6>
 8014280:	3d03      	subs	r5, #3
 8014282:	b2ed      	uxtb	r5, r5
 8014284:	1b76      	subs	r6, r6, r5
 8014286:	6823      	ldr	r3, [r4, #0]
 8014288:	05da      	lsls	r2, r3, #23
 801428a:	d52f      	bpl.n	80142ec <_scanf_float+0x358>
 801428c:	055b      	lsls	r3, r3, #21
 801428e:	d510      	bpl.n	80142b2 <_scanf_float+0x31e>
 8014290:	455e      	cmp	r6, fp
 8014292:	f67f aebf 	bls.w	8014014 <_scanf_float+0x80>
 8014296:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801429a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801429e:	463a      	mov	r2, r7
 80142a0:	4640      	mov	r0, r8
 80142a2:	4798      	blx	r3
 80142a4:	6923      	ldr	r3, [r4, #16]
 80142a6:	3b01      	subs	r3, #1
 80142a8:	6123      	str	r3, [r4, #16]
 80142aa:	e7f1      	b.n	8014290 <_scanf_float+0x2fc>
 80142ac:	46aa      	mov	sl, r5
 80142ae:	9602      	str	r6, [sp, #8]
 80142b0:	e7df      	b.n	8014272 <_scanf_float+0x2de>
 80142b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80142b6:	6923      	ldr	r3, [r4, #16]
 80142b8:	2965      	cmp	r1, #101	; 0x65
 80142ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80142be:	f106 35ff 	add.w	r5, r6, #4294967295
 80142c2:	6123      	str	r3, [r4, #16]
 80142c4:	d00c      	beq.n	80142e0 <_scanf_float+0x34c>
 80142c6:	2945      	cmp	r1, #69	; 0x45
 80142c8:	d00a      	beq.n	80142e0 <_scanf_float+0x34c>
 80142ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80142ce:	463a      	mov	r2, r7
 80142d0:	4640      	mov	r0, r8
 80142d2:	4798      	blx	r3
 80142d4:	6923      	ldr	r3, [r4, #16]
 80142d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80142da:	3b01      	subs	r3, #1
 80142dc:	1eb5      	subs	r5, r6, #2
 80142de:	6123      	str	r3, [r4, #16]
 80142e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80142e4:	463a      	mov	r2, r7
 80142e6:	4640      	mov	r0, r8
 80142e8:	4798      	blx	r3
 80142ea:	462e      	mov	r6, r5
 80142ec:	6825      	ldr	r5, [r4, #0]
 80142ee:	f015 0510 	ands.w	r5, r5, #16
 80142f2:	d14d      	bne.n	8014390 <_scanf_float+0x3fc>
 80142f4:	7035      	strb	r5, [r6, #0]
 80142f6:	6823      	ldr	r3, [r4, #0]
 80142f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80142fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014300:	d11a      	bne.n	8014338 <_scanf_float+0x3a4>
 8014302:	9b01      	ldr	r3, [sp, #4]
 8014304:	454b      	cmp	r3, r9
 8014306:	eba3 0209 	sub.w	r2, r3, r9
 801430a:	d122      	bne.n	8014352 <_scanf_float+0x3be>
 801430c:	2200      	movs	r2, #0
 801430e:	4659      	mov	r1, fp
 8014310:	4640      	mov	r0, r8
 8014312:	f002 fab3 	bl	801687c <_strtod_r>
 8014316:	9b03      	ldr	r3, [sp, #12]
 8014318:	6821      	ldr	r1, [r4, #0]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	f011 0f02 	tst.w	r1, #2
 8014320:	f103 0204 	add.w	r2, r3, #4
 8014324:	d020      	beq.n	8014368 <_scanf_float+0x3d4>
 8014326:	9903      	ldr	r1, [sp, #12]
 8014328:	600a      	str	r2, [r1, #0]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	ed83 0b00 	vstr	d0, [r3]
 8014330:	68e3      	ldr	r3, [r4, #12]
 8014332:	3301      	adds	r3, #1
 8014334:	60e3      	str	r3, [r4, #12]
 8014336:	e66e      	b.n	8014016 <_scanf_float+0x82>
 8014338:	9b04      	ldr	r3, [sp, #16]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d0e6      	beq.n	801430c <_scanf_float+0x378>
 801433e:	9905      	ldr	r1, [sp, #20]
 8014340:	230a      	movs	r3, #10
 8014342:	462a      	mov	r2, r5
 8014344:	3101      	adds	r1, #1
 8014346:	4640      	mov	r0, r8
 8014348:	f002 fb20 	bl	801698c <_strtol_r>
 801434c:	9b04      	ldr	r3, [sp, #16]
 801434e:	9e05      	ldr	r6, [sp, #20]
 8014350:	1ac2      	subs	r2, r0, r3
 8014352:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014356:	429e      	cmp	r6, r3
 8014358:	bf28      	it	cs
 801435a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801435e:	490d      	ldr	r1, [pc, #52]	; (8014394 <_scanf_float+0x400>)
 8014360:	4630      	mov	r0, r6
 8014362:	f000 f8dd 	bl	8014520 <siprintf>
 8014366:	e7d1      	b.n	801430c <_scanf_float+0x378>
 8014368:	f011 0f04 	tst.w	r1, #4
 801436c:	9903      	ldr	r1, [sp, #12]
 801436e:	600a      	str	r2, [r1, #0]
 8014370:	d1db      	bne.n	801432a <_scanf_float+0x396>
 8014372:	eeb4 0b40 	vcmp.f64	d0, d0
 8014376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801437a:	681e      	ldr	r6, [r3, #0]
 801437c:	d705      	bvc.n	801438a <_scanf_float+0x3f6>
 801437e:	4806      	ldr	r0, [pc, #24]	; (8014398 <_scanf_float+0x404>)
 8014380:	f000 f9be 	bl	8014700 <nanf>
 8014384:	ed86 0a00 	vstr	s0, [r6]
 8014388:	e7d2      	b.n	8014330 <_scanf_float+0x39c>
 801438a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801438e:	e7f9      	b.n	8014384 <_scanf_float+0x3f0>
 8014390:	2500      	movs	r5, #0
 8014392:	e640      	b.n	8014016 <_scanf_float+0x82>
 8014394:	08017d20 	.word	0x08017d20
 8014398:	080180b5 	.word	0x080180b5

0801439c <std>:
 801439c:	2300      	movs	r3, #0
 801439e:	b510      	push	{r4, lr}
 80143a0:	4604      	mov	r4, r0
 80143a2:	e9c0 3300 	strd	r3, r3, [r0]
 80143a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80143aa:	6083      	str	r3, [r0, #8]
 80143ac:	8181      	strh	r1, [r0, #12]
 80143ae:	6643      	str	r3, [r0, #100]	; 0x64
 80143b0:	81c2      	strh	r2, [r0, #14]
 80143b2:	6183      	str	r3, [r0, #24]
 80143b4:	4619      	mov	r1, r3
 80143b6:	2208      	movs	r2, #8
 80143b8:	305c      	adds	r0, #92	; 0x5c
 80143ba:	f000 f914 	bl	80145e6 <memset>
 80143be:	4b0d      	ldr	r3, [pc, #52]	; (80143f4 <std+0x58>)
 80143c0:	6263      	str	r3, [r4, #36]	; 0x24
 80143c2:	4b0d      	ldr	r3, [pc, #52]	; (80143f8 <std+0x5c>)
 80143c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80143c6:	4b0d      	ldr	r3, [pc, #52]	; (80143fc <std+0x60>)
 80143c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80143ca:	4b0d      	ldr	r3, [pc, #52]	; (8014400 <std+0x64>)
 80143cc:	6323      	str	r3, [r4, #48]	; 0x30
 80143ce:	4b0d      	ldr	r3, [pc, #52]	; (8014404 <std+0x68>)
 80143d0:	6224      	str	r4, [r4, #32]
 80143d2:	429c      	cmp	r4, r3
 80143d4:	d006      	beq.n	80143e4 <std+0x48>
 80143d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80143da:	4294      	cmp	r4, r2
 80143dc:	d002      	beq.n	80143e4 <std+0x48>
 80143de:	33d0      	adds	r3, #208	; 0xd0
 80143e0:	429c      	cmp	r4, r3
 80143e2:	d105      	bne.n	80143f0 <std+0x54>
 80143e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80143e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143ec:	f7ee ba7f 	b.w	80028ee <__retarget_lock_init_recursive>
 80143f0:	bd10      	pop	{r4, pc}
 80143f2:	bf00      	nop
 80143f4:	08014561 	.word	0x08014561
 80143f8:	08014583 	.word	0x08014583
 80143fc:	080145bb 	.word	0x080145bb
 8014400:	080145df 	.word	0x080145df
 8014404:	240027ec 	.word	0x240027ec

08014408 <stdio_exit_handler>:
 8014408:	4a02      	ldr	r2, [pc, #8]	; (8014414 <stdio_exit_handler+0xc>)
 801440a:	4903      	ldr	r1, [pc, #12]	; (8014418 <stdio_exit_handler+0x10>)
 801440c:	4803      	ldr	r0, [pc, #12]	; (801441c <stdio_exit_handler+0x14>)
 801440e:	f000 b869 	b.w	80144e4 <_fwalk_sglue>
 8014412:	bf00      	nop
 8014414:	24000118 	.word	0x24000118
 8014418:	08016d4d 	.word	0x08016d4d
 801441c:	24000124 	.word	0x24000124

08014420 <cleanup_stdio>:
 8014420:	6841      	ldr	r1, [r0, #4]
 8014422:	4b0c      	ldr	r3, [pc, #48]	; (8014454 <cleanup_stdio+0x34>)
 8014424:	4299      	cmp	r1, r3
 8014426:	b510      	push	{r4, lr}
 8014428:	4604      	mov	r4, r0
 801442a:	d001      	beq.n	8014430 <cleanup_stdio+0x10>
 801442c:	f002 fc8e 	bl	8016d4c <_fflush_r>
 8014430:	68a1      	ldr	r1, [r4, #8]
 8014432:	4b09      	ldr	r3, [pc, #36]	; (8014458 <cleanup_stdio+0x38>)
 8014434:	4299      	cmp	r1, r3
 8014436:	d002      	beq.n	801443e <cleanup_stdio+0x1e>
 8014438:	4620      	mov	r0, r4
 801443a:	f002 fc87 	bl	8016d4c <_fflush_r>
 801443e:	68e1      	ldr	r1, [r4, #12]
 8014440:	4b06      	ldr	r3, [pc, #24]	; (801445c <cleanup_stdio+0x3c>)
 8014442:	4299      	cmp	r1, r3
 8014444:	d004      	beq.n	8014450 <cleanup_stdio+0x30>
 8014446:	4620      	mov	r0, r4
 8014448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801444c:	f002 bc7e 	b.w	8016d4c <_fflush_r>
 8014450:	bd10      	pop	{r4, pc}
 8014452:	bf00      	nop
 8014454:	240027ec 	.word	0x240027ec
 8014458:	24002854 	.word	0x24002854
 801445c:	240028bc 	.word	0x240028bc

08014460 <global_stdio_init.part.0>:
 8014460:	b510      	push	{r4, lr}
 8014462:	4b0b      	ldr	r3, [pc, #44]	; (8014490 <global_stdio_init.part.0+0x30>)
 8014464:	4c0b      	ldr	r4, [pc, #44]	; (8014494 <global_stdio_init.part.0+0x34>)
 8014466:	4a0c      	ldr	r2, [pc, #48]	; (8014498 <global_stdio_init.part.0+0x38>)
 8014468:	601a      	str	r2, [r3, #0]
 801446a:	4620      	mov	r0, r4
 801446c:	2200      	movs	r2, #0
 801446e:	2104      	movs	r1, #4
 8014470:	f7ff ff94 	bl	801439c <std>
 8014474:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8014478:	2201      	movs	r2, #1
 801447a:	2109      	movs	r1, #9
 801447c:	f7ff ff8e 	bl	801439c <std>
 8014480:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8014484:	2202      	movs	r2, #2
 8014486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801448a:	2112      	movs	r1, #18
 801448c:	f7ff bf86 	b.w	801439c <std>
 8014490:	24002924 	.word	0x24002924
 8014494:	240027ec 	.word	0x240027ec
 8014498:	08014409 	.word	0x08014409

0801449c <__sfp_lock_acquire>:
 801449c:	4801      	ldr	r0, [pc, #4]	; (80144a4 <__sfp_lock_acquire+0x8>)
 801449e:	f7ee ba4c 	b.w	800293a <__retarget_lock_acquire_recursive>
 80144a2:	bf00      	nop
 80144a4:	24000bb8 	.word	0x24000bb8

080144a8 <__sfp_lock_release>:
 80144a8:	4801      	ldr	r0, [pc, #4]	; (80144b0 <__sfp_lock_release+0x8>)
 80144aa:	f7ee ba5a 	b.w	8002962 <__retarget_lock_release_recursive>
 80144ae:	bf00      	nop
 80144b0:	24000bb8 	.word	0x24000bb8

080144b4 <__sinit>:
 80144b4:	b510      	push	{r4, lr}
 80144b6:	4604      	mov	r4, r0
 80144b8:	f7ff fff0 	bl	801449c <__sfp_lock_acquire>
 80144bc:	6a23      	ldr	r3, [r4, #32]
 80144be:	b11b      	cbz	r3, 80144c8 <__sinit+0x14>
 80144c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80144c4:	f7ff bff0 	b.w	80144a8 <__sfp_lock_release>
 80144c8:	4b04      	ldr	r3, [pc, #16]	; (80144dc <__sinit+0x28>)
 80144ca:	6223      	str	r3, [r4, #32]
 80144cc:	4b04      	ldr	r3, [pc, #16]	; (80144e0 <__sinit+0x2c>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d1f5      	bne.n	80144c0 <__sinit+0xc>
 80144d4:	f7ff ffc4 	bl	8014460 <global_stdio_init.part.0>
 80144d8:	e7f2      	b.n	80144c0 <__sinit+0xc>
 80144da:	bf00      	nop
 80144dc:	08014421 	.word	0x08014421
 80144e0:	24002924 	.word	0x24002924

080144e4 <_fwalk_sglue>:
 80144e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144e8:	4607      	mov	r7, r0
 80144ea:	4688      	mov	r8, r1
 80144ec:	4614      	mov	r4, r2
 80144ee:	2600      	movs	r6, #0
 80144f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80144f4:	f1b9 0901 	subs.w	r9, r9, #1
 80144f8:	d505      	bpl.n	8014506 <_fwalk_sglue+0x22>
 80144fa:	6824      	ldr	r4, [r4, #0]
 80144fc:	2c00      	cmp	r4, #0
 80144fe:	d1f7      	bne.n	80144f0 <_fwalk_sglue+0xc>
 8014500:	4630      	mov	r0, r6
 8014502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014506:	89ab      	ldrh	r3, [r5, #12]
 8014508:	2b01      	cmp	r3, #1
 801450a:	d907      	bls.n	801451c <_fwalk_sglue+0x38>
 801450c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014510:	3301      	adds	r3, #1
 8014512:	d003      	beq.n	801451c <_fwalk_sglue+0x38>
 8014514:	4629      	mov	r1, r5
 8014516:	4638      	mov	r0, r7
 8014518:	47c0      	blx	r8
 801451a:	4306      	orrs	r6, r0
 801451c:	3568      	adds	r5, #104	; 0x68
 801451e:	e7e9      	b.n	80144f4 <_fwalk_sglue+0x10>

08014520 <siprintf>:
 8014520:	b40e      	push	{r1, r2, r3}
 8014522:	b500      	push	{lr}
 8014524:	b09c      	sub	sp, #112	; 0x70
 8014526:	ab1d      	add	r3, sp, #116	; 0x74
 8014528:	9002      	str	r0, [sp, #8]
 801452a:	9006      	str	r0, [sp, #24]
 801452c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014530:	4809      	ldr	r0, [pc, #36]	; (8014558 <siprintf+0x38>)
 8014532:	9107      	str	r1, [sp, #28]
 8014534:	9104      	str	r1, [sp, #16]
 8014536:	4909      	ldr	r1, [pc, #36]	; (801455c <siprintf+0x3c>)
 8014538:	f853 2b04 	ldr.w	r2, [r3], #4
 801453c:	9105      	str	r1, [sp, #20]
 801453e:	6800      	ldr	r0, [r0, #0]
 8014540:	9301      	str	r3, [sp, #4]
 8014542:	a902      	add	r1, sp, #8
 8014544:	f002 fa7e 	bl	8016a44 <_svfiprintf_r>
 8014548:	9b02      	ldr	r3, [sp, #8]
 801454a:	2200      	movs	r2, #0
 801454c:	701a      	strb	r2, [r3, #0]
 801454e:	b01c      	add	sp, #112	; 0x70
 8014550:	f85d eb04 	ldr.w	lr, [sp], #4
 8014554:	b003      	add	sp, #12
 8014556:	4770      	bx	lr
 8014558:	24000170 	.word	0x24000170
 801455c:	ffff0208 	.word	0xffff0208

08014560 <__sread>:
 8014560:	b510      	push	{r4, lr}
 8014562:	460c      	mov	r4, r1
 8014564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014568:	f000 f86c 	bl	8014644 <_read_r>
 801456c:	2800      	cmp	r0, #0
 801456e:	bfab      	itete	ge
 8014570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014572:	89a3      	ldrhlt	r3, [r4, #12]
 8014574:	181b      	addge	r3, r3, r0
 8014576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801457a:	bfac      	ite	ge
 801457c:	6563      	strge	r3, [r4, #84]	; 0x54
 801457e:	81a3      	strhlt	r3, [r4, #12]
 8014580:	bd10      	pop	{r4, pc}

08014582 <__swrite>:
 8014582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014586:	461f      	mov	r7, r3
 8014588:	898b      	ldrh	r3, [r1, #12]
 801458a:	05db      	lsls	r3, r3, #23
 801458c:	4605      	mov	r5, r0
 801458e:	460c      	mov	r4, r1
 8014590:	4616      	mov	r6, r2
 8014592:	d505      	bpl.n	80145a0 <__swrite+0x1e>
 8014594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014598:	2302      	movs	r3, #2
 801459a:	2200      	movs	r2, #0
 801459c:	f000 f840 	bl	8014620 <_lseek_r>
 80145a0:	89a3      	ldrh	r3, [r4, #12]
 80145a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80145aa:	81a3      	strh	r3, [r4, #12]
 80145ac:	4632      	mov	r2, r6
 80145ae:	463b      	mov	r3, r7
 80145b0:	4628      	mov	r0, r5
 80145b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145b6:	f000 b867 	b.w	8014688 <_write_r>

080145ba <__sseek>:
 80145ba:	b510      	push	{r4, lr}
 80145bc:	460c      	mov	r4, r1
 80145be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145c2:	f000 f82d 	bl	8014620 <_lseek_r>
 80145c6:	1c43      	adds	r3, r0, #1
 80145c8:	89a3      	ldrh	r3, [r4, #12]
 80145ca:	bf15      	itete	ne
 80145cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80145ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80145d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80145d6:	81a3      	strheq	r3, [r4, #12]
 80145d8:	bf18      	it	ne
 80145da:	81a3      	strhne	r3, [r4, #12]
 80145dc:	bd10      	pop	{r4, pc}

080145de <__sclose>:
 80145de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145e2:	f000 b80d 	b.w	8014600 <_close_r>

080145e6 <memset>:
 80145e6:	4402      	add	r2, r0
 80145e8:	4603      	mov	r3, r0
 80145ea:	4293      	cmp	r3, r2
 80145ec:	d100      	bne.n	80145f0 <memset+0xa>
 80145ee:	4770      	bx	lr
 80145f0:	f803 1b01 	strb.w	r1, [r3], #1
 80145f4:	e7f9      	b.n	80145ea <memset+0x4>
	...

080145f8 <_localeconv_r>:
 80145f8:	4800      	ldr	r0, [pc, #0]	; (80145fc <_localeconv_r+0x4>)
 80145fa:	4770      	bx	lr
 80145fc:	24000264 	.word	0x24000264

08014600 <_close_r>:
 8014600:	b538      	push	{r3, r4, r5, lr}
 8014602:	4d06      	ldr	r5, [pc, #24]	; (801461c <_close_r+0x1c>)
 8014604:	2300      	movs	r3, #0
 8014606:	4604      	mov	r4, r0
 8014608:	4608      	mov	r0, r1
 801460a:	602b      	str	r3, [r5, #0]
 801460c:	f7ed ffed 	bl	80025ea <_close>
 8014610:	1c43      	adds	r3, r0, #1
 8014612:	d102      	bne.n	801461a <_close_r+0x1a>
 8014614:	682b      	ldr	r3, [r5, #0]
 8014616:	b103      	cbz	r3, 801461a <_close_r+0x1a>
 8014618:	6023      	str	r3, [r4, #0]
 801461a:	bd38      	pop	{r3, r4, r5, pc}
 801461c:	24002928 	.word	0x24002928

08014620 <_lseek_r>:
 8014620:	b538      	push	{r3, r4, r5, lr}
 8014622:	4d07      	ldr	r5, [pc, #28]	; (8014640 <_lseek_r+0x20>)
 8014624:	4604      	mov	r4, r0
 8014626:	4608      	mov	r0, r1
 8014628:	4611      	mov	r1, r2
 801462a:	2200      	movs	r2, #0
 801462c:	602a      	str	r2, [r5, #0]
 801462e:	461a      	mov	r2, r3
 8014630:	f7ee f802 	bl	8002638 <_lseek>
 8014634:	1c43      	adds	r3, r0, #1
 8014636:	d102      	bne.n	801463e <_lseek_r+0x1e>
 8014638:	682b      	ldr	r3, [r5, #0]
 801463a:	b103      	cbz	r3, 801463e <_lseek_r+0x1e>
 801463c:	6023      	str	r3, [r4, #0]
 801463e:	bd38      	pop	{r3, r4, r5, pc}
 8014640:	24002928 	.word	0x24002928

08014644 <_read_r>:
 8014644:	b538      	push	{r3, r4, r5, lr}
 8014646:	4d07      	ldr	r5, [pc, #28]	; (8014664 <_read_r+0x20>)
 8014648:	4604      	mov	r4, r0
 801464a:	4608      	mov	r0, r1
 801464c:	4611      	mov	r1, r2
 801464e:	2200      	movs	r2, #0
 8014650:	602a      	str	r2, [r5, #0]
 8014652:	461a      	mov	r2, r3
 8014654:	f7ed ff90 	bl	8002578 <_read>
 8014658:	1c43      	adds	r3, r0, #1
 801465a:	d102      	bne.n	8014662 <_read_r+0x1e>
 801465c:	682b      	ldr	r3, [r5, #0]
 801465e:	b103      	cbz	r3, 8014662 <_read_r+0x1e>
 8014660:	6023      	str	r3, [r4, #0]
 8014662:	bd38      	pop	{r3, r4, r5, pc}
 8014664:	24002928 	.word	0x24002928

08014668 <_sbrk_r>:
 8014668:	b538      	push	{r3, r4, r5, lr}
 801466a:	4d06      	ldr	r5, [pc, #24]	; (8014684 <_sbrk_r+0x1c>)
 801466c:	2300      	movs	r3, #0
 801466e:	4604      	mov	r4, r0
 8014670:	4608      	mov	r0, r1
 8014672:	602b      	str	r3, [r5, #0]
 8014674:	f7ed ffee 	bl	8002654 <_sbrk>
 8014678:	1c43      	adds	r3, r0, #1
 801467a:	d102      	bne.n	8014682 <_sbrk_r+0x1a>
 801467c:	682b      	ldr	r3, [r5, #0]
 801467e:	b103      	cbz	r3, 8014682 <_sbrk_r+0x1a>
 8014680:	6023      	str	r3, [r4, #0]
 8014682:	bd38      	pop	{r3, r4, r5, pc}
 8014684:	24002928 	.word	0x24002928

08014688 <_write_r>:
 8014688:	b538      	push	{r3, r4, r5, lr}
 801468a:	4d07      	ldr	r5, [pc, #28]	; (80146a8 <_write_r+0x20>)
 801468c:	4604      	mov	r4, r0
 801468e:	4608      	mov	r0, r1
 8014690:	4611      	mov	r1, r2
 8014692:	2200      	movs	r2, #0
 8014694:	602a      	str	r2, [r5, #0]
 8014696:	461a      	mov	r2, r3
 8014698:	f7ed ff8b 	bl	80025b2 <_write>
 801469c:	1c43      	adds	r3, r0, #1
 801469e:	d102      	bne.n	80146a6 <_write_r+0x1e>
 80146a0:	682b      	ldr	r3, [r5, #0]
 80146a2:	b103      	cbz	r3, 80146a6 <_write_r+0x1e>
 80146a4:	6023      	str	r3, [r4, #0]
 80146a6:	bd38      	pop	{r3, r4, r5, pc}
 80146a8:	24002928 	.word	0x24002928

080146ac <__errno>:
 80146ac:	4b01      	ldr	r3, [pc, #4]	; (80146b4 <__errno+0x8>)
 80146ae:	6818      	ldr	r0, [r3, #0]
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop
 80146b4:	24000170 	.word	0x24000170

080146b8 <__libc_init_array>:
 80146b8:	b570      	push	{r4, r5, r6, lr}
 80146ba:	4d0d      	ldr	r5, [pc, #52]	; (80146f0 <__libc_init_array+0x38>)
 80146bc:	4c0d      	ldr	r4, [pc, #52]	; (80146f4 <__libc_init_array+0x3c>)
 80146be:	1b64      	subs	r4, r4, r5
 80146c0:	10a4      	asrs	r4, r4, #2
 80146c2:	2600      	movs	r6, #0
 80146c4:	42a6      	cmp	r6, r4
 80146c6:	d109      	bne.n	80146dc <__libc_init_array+0x24>
 80146c8:	4d0b      	ldr	r5, [pc, #44]	; (80146f8 <__libc_init_array+0x40>)
 80146ca:	4c0c      	ldr	r4, [pc, #48]	; (80146fc <__libc_init_array+0x44>)
 80146cc:	f003 fa44 	bl	8017b58 <_init>
 80146d0:	1b64      	subs	r4, r4, r5
 80146d2:	10a4      	asrs	r4, r4, #2
 80146d4:	2600      	movs	r6, #0
 80146d6:	42a6      	cmp	r6, r4
 80146d8:	d105      	bne.n	80146e6 <__libc_init_array+0x2e>
 80146da:	bd70      	pop	{r4, r5, r6, pc}
 80146dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80146e0:	4798      	blx	r3
 80146e2:	3601      	adds	r6, #1
 80146e4:	e7ee      	b.n	80146c4 <__libc_init_array+0xc>
 80146e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80146ea:	4798      	blx	r3
 80146ec:	3601      	adds	r6, #1
 80146ee:	e7f2      	b.n	80146d6 <__libc_init_array+0x1e>
 80146f0:	08018120 	.word	0x08018120
 80146f4:	08018120 	.word	0x08018120
 80146f8:	08018120 	.word	0x08018120
 80146fc:	08018124 	.word	0x08018124

08014700 <nanf>:
 8014700:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014708 <nanf+0x8>
 8014704:	4770      	bx	lr
 8014706:	bf00      	nop
 8014708:	7fc00000 	.word	0x7fc00000

0801470c <quorem>:
 801470c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014710:	6903      	ldr	r3, [r0, #16]
 8014712:	690c      	ldr	r4, [r1, #16]
 8014714:	42a3      	cmp	r3, r4
 8014716:	4607      	mov	r7, r0
 8014718:	db7e      	blt.n	8014818 <quorem+0x10c>
 801471a:	3c01      	subs	r4, #1
 801471c:	f101 0814 	add.w	r8, r1, #20
 8014720:	f100 0514 	add.w	r5, r0, #20
 8014724:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014728:	9301      	str	r3, [sp, #4]
 801472a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801472e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014732:	3301      	adds	r3, #1
 8014734:	429a      	cmp	r2, r3
 8014736:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801473a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801473e:	fbb2 f6f3 	udiv	r6, r2, r3
 8014742:	d331      	bcc.n	80147a8 <quorem+0x9c>
 8014744:	f04f 0e00 	mov.w	lr, #0
 8014748:	4640      	mov	r0, r8
 801474a:	46ac      	mov	ip, r5
 801474c:	46f2      	mov	sl, lr
 801474e:	f850 2b04 	ldr.w	r2, [r0], #4
 8014752:	b293      	uxth	r3, r2
 8014754:	fb06 e303 	mla	r3, r6, r3, lr
 8014758:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801475c:	0c1a      	lsrs	r2, r3, #16
 801475e:	b29b      	uxth	r3, r3
 8014760:	ebaa 0303 	sub.w	r3, sl, r3
 8014764:	f8dc a000 	ldr.w	sl, [ip]
 8014768:	fa13 f38a 	uxtah	r3, r3, sl
 801476c:	fb06 220e 	mla	r2, r6, lr, r2
 8014770:	9300      	str	r3, [sp, #0]
 8014772:	9b00      	ldr	r3, [sp, #0]
 8014774:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014778:	b292      	uxth	r2, r2
 801477a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801477e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014782:	f8bd 3000 	ldrh.w	r3, [sp]
 8014786:	4581      	cmp	r9, r0
 8014788:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801478c:	f84c 3b04 	str.w	r3, [ip], #4
 8014790:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014794:	d2db      	bcs.n	801474e <quorem+0x42>
 8014796:	f855 300b 	ldr.w	r3, [r5, fp]
 801479a:	b92b      	cbnz	r3, 80147a8 <quorem+0x9c>
 801479c:	9b01      	ldr	r3, [sp, #4]
 801479e:	3b04      	subs	r3, #4
 80147a0:	429d      	cmp	r5, r3
 80147a2:	461a      	mov	r2, r3
 80147a4:	d32c      	bcc.n	8014800 <quorem+0xf4>
 80147a6:	613c      	str	r4, [r7, #16]
 80147a8:	4638      	mov	r0, r7
 80147aa:	f001 f8b7 	bl	801591c <__mcmp>
 80147ae:	2800      	cmp	r0, #0
 80147b0:	db22      	blt.n	80147f8 <quorem+0xec>
 80147b2:	3601      	adds	r6, #1
 80147b4:	4629      	mov	r1, r5
 80147b6:	2000      	movs	r0, #0
 80147b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80147bc:	f8d1 c000 	ldr.w	ip, [r1]
 80147c0:	b293      	uxth	r3, r2
 80147c2:	1ac3      	subs	r3, r0, r3
 80147c4:	0c12      	lsrs	r2, r2, #16
 80147c6:	fa13 f38c 	uxtah	r3, r3, ip
 80147ca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80147ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80147d2:	b29b      	uxth	r3, r3
 80147d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80147d8:	45c1      	cmp	r9, r8
 80147da:	f841 3b04 	str.w	r3, [r1], #4
 80147de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80147e2:	d2e9      	bcs.n	80147b8 <quorem+0xac>
 80147e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80147e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80147ec:	b922      	cbnz	r2, 80147f8 <quorem+0xec>
 80147ee:	3b04      	subs	r3, #4
 80147f0:	429d      	cmp	r5, r3
 80147f2:	461a      	mov	r2, r3
 80147f4:	d30a      	bcc.n	801480c <quorem+0x100>
 80147f6:	613c      	str	r4, [r7, #16]
 80147f8:	4630      	mov	r0, r6
 80147fa:	b003      	add	sp, #12
 80147fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014800:	6812      	ldr	r2, [r2, #0]
 8014802:	3b04      	subs	r3, #4
 8014804:	2a00      	cmp	r2, #0
 8014806:	d1ce      	bne.n	80147a6 <quorem+0x9a>
 8014808:	3c01      	subs	r4, #1
 801480a:	e7c9      	b.n	80147a0 <quorem+0x94>
 801480c:	6812      	ldr	r2, [r2, #0]
 801480e:	3b04      	subs	r3, #4
 8014810:	2a00      	cmp	r2, #0
 8014812:	d1f0      	bne.n	80147f6 <quorem+0xea>
 8014814:	3c01      	subs	r4, #1
 8014816:	e7eb      	b.n	80147f0 <quorem+0xe4>
 8014818:	2000      	movs	r0, #0
 801481a:	e7ee      	b.n	80147fa <quorem+0xee>
 801481c:	0000      	movs	r0, r0
	...

08014820 <_dtoa_r>:
 8014820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014824:	ed2d 8b02 	vpush	{d8}
 8014828:	69c5      	ldr	r5, [r0, #28]
 801482a:	b091      	sub	sp, #68	; 0x44
 801482c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8014830:	ec59 8b10 	vmov	r8, r9, d0
 8014834:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8014836:	9106      	str	r1, [sp, #24]
 8014838:	4606      	mov	r6, r0
 801483a:	9208      	str	r2, [sp, #32]
 801483c:	930c      	str	r3, [sp, #48]	; 0x30
 801483e:	b975      	cbnz	r5, 801485e <_dtoa_r+0x3e>
 8014840:	2010      	movs	r0, #16
 8014842:	f7fe feb7 	bl	80135b4 <malloc>
 8014846:	4602      	mov	r2, r0
 8014848:	61f0      	str	r0, [r6, #28]
 801484a:	b920      	cbnz	r0, 8014856 <_dtoa_r+0x36>
 801484c:	4ba6      	ldr	r3, [pc, #664]	; (8014ae8 <_dtoa_r+0x2c8>)
 801484e:	21ef      	movs	r1, #239	; 0xef
 8014850:	48a6      	ldr	r0, [pc, #664]	; (8014aec <_dtoa_r+0x2cc>)
 8014852:	f002 fae5 	bl	8016e20 <__assert_func>
 8014856:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801485a:	6005      	str	r5, [r0, #0]
 801485c:	60c5      	str	r5, [r0, #12]
 801485e:	69f3      	ldr	r3, [r6, #28]
 8014860:	6819      	ldr	r1, [r3, #0]
 8014862:	b151      	cbz	r1, 801487a <_dtoa_r+0x5a>
 8014864:	685a      	ldr	r2, [r3, #4]
 8014866:	604a      	str	r2, [r1, #4]
 8014868:	2301      	movs	r3, #1
 801486a:	4093      	lsls	r3, r2
 801486c:	608b      	str	r3, [r1, #8]
 801486e:	4630      	mov	r0, r6
 8014870:	f000 fdce 	bl	8015410 <_Bfree>
 8014874:	69f3      	ldr	r3, [r6, #28]
 8014876:	2200      	movs	r2, #0
 8014878:	601a      	str	r2, [r3, #0]
 801487a:	f1b9 0300 	subs.w	r3, r9, #0
 801487e:	bfbb      	ittet	lt
 8014880:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014884:	9303      	strlt	r3, [sp, #12]
 8014886:	2300      	movge	r3, #0
 8014888:	2201      	movlt	r2, #1
 801488a:	bfac      	ite	ge
 801488c:	6023      	strge	r3, [r4, #0]
 801488e:	6022      	strlt	r2, [r4, #0]
 8014890:	4b97      	ldr	r3, [pc, #604]	; (8014af0 <_dtoa_r+0x2d0>)
 8014892:	9c03      	ldr	r4, [sp, #12]
 8014894:	43a3      	bics	r3, r4
 8014896:	d11c      	bne.n	80148d2 <_dtoa_r+0xb2>
 8014898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801489a:	f242 730f 	movw	r3, #9999	; 0x270f
 801489e:	6013      	str	r3, [r2, #0]
 80148a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80148a4:	ea53 0308 	orrs.w	r3, r3, r8
 80148a8:	f000 84fb 	beq.w	80152a2 <_dtoa_r+0xa82>
 80148ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80148ae:	b963      	cbnz	r3, 80148ca <_dtoa_r+0xaa>
 80148b0:	4b90      	ldr	r3, [pc, #576]	; (8014af4 <_dtoa_r+0x2d4>)
 80148b2:	e020      	b.n	80148f6 <_dtoa_r+0xd6>
 80148b4:	4b90      	ldr	r3, [pc, #576]	; (8014af8 <_dtoa_r+0x2d8>)
 80148b6:	9301      	str	r3, [sp, #4]
 80148b8:	3308      	adds	r3, #8
 80148ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80148bc:	6013      	str	r3, [r2, #0]
 80148be:	9801      	ldr	r0, [sp, #4]
 80148c0:	b011      	add	sp, #68	; 0x44
 80148c2:	ecbd 8b02 	vpop	{d8}
 80148c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ca:	4b8a      	ldr	r3, [pc, #552]	; (8014af4 <_dtoa_r+0x2d4>)
 80148cc:	9301      	str	r3, [sp, #4]
 80148ce:	3303      	adds	r3, #3
 80148d0:	e7f3      	b.n	80148ba <_dtoa_r+0x9a>
 80148d2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80148d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80148da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148de:	d10c      	bne.n	80148fa <_dtoa_r+0xda>
 80148e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80148e2:	2301      	movs	r3, #1
 80148e4:	6013      	str	r3, [r2, #0]
 80148e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	f000 84d7 	beq.w	801529c <_dtoa_r+0xa7c>
 80148ee:	4b83      	ldr	r3, [pc, #524]	; (8014afc <_dtoa_r+0x2dc>)
 80148f0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80148f2:	6013      	str	r3, [r2, #0]
 80148f4:	3b01      	subs	r3, #1
 80148f6:	9301      	str	r3, [sp, #4]
 80148f8:	e7e1      	b.n	80148be <_dtoa_r+0x9e>
 80148fa:	aa0e      	add	r2, sp, #56	; 0x38
 80148fc:	a90f      	add	r1, sp, #60	; 0x3c
 80148fe:	4630      	mov	r0, r6
 8014900:	eeb0 0b48 	vmov.f64	d0, d8
 8014904:	f001 f920 	bl	8015b48 <__d2b>
 8014908:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801490c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801490e:	4605      	mov	r5, r0
 8014910:	2b00      	cmp	r3, #0
 8014912:	d046      	beq.n	80149a2 <_dtoa_r+0x182>
 8014914:	eeb0 7b48 	vmov.f64	d7, d8
 8014918:	ee18 1a90 	vmov	r1, s17
 801491c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8014920:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8014924:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014928:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801492c:	2000      	movs	r0, #0
 801492e:	ee07 1a90 	vmov	s15, r1
 8014932:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8014936:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8014ad0 <_dtoa_r+0x2b0>
 801493a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801493e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8014ad8 <_dtoa_r+0x2b8>
 8014942:	eea7 6b05 	vfma.f64	d6, d7, d5
 8014946:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8014ae0 <_dtoa_r+0x2c0>
 801494a:	ee07 3a90 	vmov	s15, r3
 801494e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8014952:	eeb0 7b46 	vmov.f64	d7, d6
 8014956:	eea4 7b05 	vfma.f64	d7, d4, d5
 801495a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801495e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8014962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014966:	ee16 ba90 	vmov	fp, s13
 801496a:	9009      	str	r0, [sp, #36]	; 0x24
 801496c:	d508      	bpl.n	8014980 <_dtoa_r+0x160>
 801496e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8014972:	eeb4 6b47 	vcmp.f64	d6, d7
 8014976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801497a:	bf18      	it	ne
 801497c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8014980:	f1bb 0f16 	cmp.w	fp, #22
 8014984:	d82b      	bhi.n	80149de <_dtoa_r+0x1be>
 8014986:	495e      	ldr	r1, [pc, #376]	; (8014b00 <_dtoa_r+0x2e0>)
 8014988:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801498c:	ed91 7b00 	vldr	d7, [r1]
 8014990:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8014994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014998:	d501      	bpl.n	801499e <_dtoa_r+0x17e>
 801499a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801499e:	2100      	movs	r1, #0
 80149a0:	e01e      	b.n	80149e0 <_dtoa_r+0x1c0>
 80149a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80149a4:	4413      	add	r3, r2
 80149a6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80149aa:	2920      	cmp	r1, #32
 80149ac:	bfc1      	itttt	gt
 80149ae:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80149b2:	408c      	lslgt	r4, r1
 80149b4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80149b8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80149bc:	bfd6      	itet	le
 80149be:	f1c1 0120 	rsble	r1, r1, #32
 80149c2:	4321      	orrgt	r1, r4
 80149c4:	fa08 f101 	lslle.w	r1, r8, r1
 80149c8:	ee07 1a90 	vmov	s15, r1
 80149cc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80149d0:	3b01      	subs	r3, #1
 80149d2:	ee17 1a90 	vmov	r1, s15
 80149d6:	2001      	movs	r0, #1
 80149d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80149dc:	e7a7      	b.n	801492e <_dtoa_r+0x10e>
 80149de:	2101      	movs	r1, #1
 80149e0:	1ad2      	subs	r2, r2, r3
 80149e2:	1e53      	subs	r3, r2, #1
 80149e4:	9305      	str	r3, [sp, #20]
 80149e6:	bf45      	ittet	mi
 80149e8:	f1c2 0301 	rsbmi	r3, r2, #1
 80149ec:	9304      	strmi	r3, [sp, #16]
 80149ee:	2300      	movpl	r3, #0
 80149f0:	2300      	movmi	r3, #0
 80149f2:	bf4c      	ite	mi
 80149f4:	9305      	strmi	r3, [sp, #20]
 80149f6:	9304      	strpl	r3, [sp, #16]
 80149f8:	f1bb 0f00 	cmp.w	fp, #0
 80149fc:	910b      	str	r1, [sp, #44]	; 0x2c
 80149fe:	db18      	blt.n	8014a32 <_dtoa_r+0x212>
 8014a00:	9b05      	ldr	r3, [sp, #20]
 8014a02:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8014a06:	445b      	add	r3, fp
 8014a08:	9305      	str	r3, [sp, #20]
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	9a06      	ldr	r2, [sp, #24]
 8014a0e:	2a09      	cmp	r2, #9
 8014a10:	d848      	bhi.n	8014aa4 <_dtoa_r+0x284>
 8014a12:	2a05      	cmp	r2, #5
 8014a14:	bfc4      	itt	gt
 8014a16:	3a04      	subgt	r2, #4
 8014a18:	9206      	strgt	r2, [sp, #24]
 8014a1a:	9a06      	ldr	r2, [sp, #24]
 8014a1c:	f1a2 0202 	sub.w	r2, r2, #2
 8014a20:	bfcc      	ite	gt
 8014a22:	2400      	movgt	r4, #0
 8014a24:	2401      	movle	r4, #1
 8014a26:	2a03      	cmp	r2, #3
 8014a28:	d847      	bhi.n	8014aba <_dtoa_r+0x29a>
 8014a2a:	e8df f002 	tbb	[pc, r2]
 8014a2e:	2d0b      	.short	0x2d0b
 8014a30:	392b      	.short	0x392b
 8014a32:	9b04      	ldr	r3, [sp, #16]
 8014a34:	2200      	movs	r2, #0
 8014a36:	eba3 030b 	sub.w	r3, r3, fp
 8014a3a:	9304      	str	r3, [sp, #16]
 8014a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8014a3e:	f1cb 0300 	rsb	r3, fp, #0
 8014a42:	e7e3      	b.n	8014a0c <_dtoa_r+0x1ec>
 8014a44:	2200      	movs	r2, #0
 8014a46:	9207      	str	r2, [sp, #28]
 8014a48:	9a08      	ldr	r2, [sp, #32]
 8014a4a:	2a00      	cmp	r2, #0
 8014a4c:	dc38      	bgt.n	8014ac0 <_dtoa_r+0x2a0>
 8014a4e:	f04f 0a01 	mov.w	sl, #1
 8014a52:	46d1      	mov	r9, sl
 8014a54:	4652      	mov	r2, sl
 8014a56:	f8cd a020 	str.w	sl, [sp, #32]
 8014a5a:	69f7      	ldr	r7, [r6, #28]
 8014a5c:	2100      	movs	r1, #0
 8014a5e:	2004      	movs	r0, #4
 8014a60:	f100 0c14 	add.w	ip, r0, #20
 8014a64:	4594      	cmp	ip, r2
 8014a66:	d930      	bls.n	8014aca <_dtoa_r+0x2aa>
 8014a68:	6079      	str	r1, [r7, #4]
 8014a6a:	4630      	mov	r0, r6
 8014a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8014a6e:	f000 fc8f 	bl	8015390 <_Balloc>
 8014a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a74:	9001      	str	r0, [sp, #4]
 8014a76:	4602      	mov	r2, r0
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d145      	bne.n	8014b08 <_dtoa_r+0x2e8>
 8014a7c:	4b21      	ldr	r3, [pc, #132]	; (8014b04 <_dtoa_r+0x2e4>)
 8014a7e:	f240 11af 	movw	r1, #431	; 0x1af
 8014a82:	e6e5      	b.n	8014850 <_dtoa_r+0x30>
 8014a84:	2201      	movs	r2, #1
 8014a86:	e7de      	b.n	8014a46 <_dtoa_r+0x226>
 8014a88:	2200      	movs	r2, #0
 8014a8a:	9207      	str	r2, [sp, #28]
 8014a8c:	9a08      	ldr	r2, [sp, #32]
 8014a8e:	eb0b 0a02 	add.w	sl, fp, r2
 8014a92:	f10a 0901 	add.w	r9, sl, #1
 8014a96:	464a      	mov	r2, r9
 8014a98:	2a01      	cmp	r2, #1
 8014a9a:	bfb8      	it	lt
 8014a9c:	2201      	movlt	r2, #1
 8014a9e:	e7dc      	b.n	8014a5a <_dtoa_r+0x23a>
 8014aa0:	2201      	movs	r2, #1
 8014aa2:	e7f2      	b.n	8014a8a <_dtoa_r+0x26a>
 8014aa4:	2401      	movs	r4, #1
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8014aac:	f04f 3aff 	mov.w	sl, #4294967295
 8014ab0:	2100      	movs	r1, #0
 8014ab2:	46d1      	mov	r9, sl
 8014ab4:	2212      	movs	r2, #18
 8014ab6:	9108      	str	r1, [sp, #32]
 8014ab8:	e7cf      	b.n	8014a5a <_dtoa_r+0x23a>
 8014aba:	2201      	movs	r2, #1
 8014abc:	9207      	str	r2, [sp, #28]
 8014abe:	e7f5      	b.n	8014aac <_dtoa_r+0x28c>
 8014ac0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014ac4:	46d1      	mov	r9, sl
 8014ac6:	4652      	mov	r2, sl
 8014ac8:	e7c7      	b.n	8014a5a <_dtoa_r+0x23a>
 8014aca:	3101      	adds	r1, #1
 8014acc:	0040      	lsls	r0, r0, #1
 8014ace:	e7c7      	b.n	8014a60 <_dtoa_r+0x240>
 8014ad0:	636f4361 	.word	0x636f4361
 8014ad4:	3fd287a7 	.word	0x3fd287a7
 8014ad8:	8b60c8b3 	.word	0x8b60c8b3
 8014adc:	3fc68a28 	.word	0x3fc68a28
 8014ae0:	509f79fb 	.word	0x509f79fb
 8014ae4:	3fd34413 	.word	0x3fd34413
 8014ae8:	08017d32 	.word	0x08017d32
 8014aec:	08017d49 	.word	0x08017d49
 8014af0:	7ff00000 	.word	0x7ff00000
 8014af4:	08017d2e 	.word	0x08017d2e
 8014af8:	08017d25 	.word	0x08017d25
 8014afc:	08017cfd 	.word	0x08017cfd
 8014b00:	08017e38 	.word	0x08017e38
 8014b04:	08017da1 	.word	0x08017da1
 8014b08:	69f2      	ldr	r2, [r6, #28]
 8014b0a:	9901      	ldr	r1, [sp, #4]
 8014b0c:	6011      	str	r1, [r2, #0]
 8014b0e:	f1b9 0f0e 	cmp.w	r9, #14
 8014b12:	d86c      	bhi.n	8014bee <_dtoa_r+0x3ce>
 8014b14:	2c00      	cmp	r4, #0
 8014b16:	d06a      	beq.n	8014bee <_dtoa_r+0x3ce>
 8014b18:	f1bb 0f00 	cmp.w	fp, #0
 8014b1c:	f340 80a0 	ble.w	8014c60 <_dtoa_r+0x440>
 8014b20:	4ac1      	ldr	r2, [pc, #772]	; (8014e28 <_dtoa_r+0x608>)
 8014b22:	f00b 010f 	and.w	r1, fp, #15
 8014b26:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8014b2a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014b2e:	ed92 7b00 	vldr	d7, [r2]
 8014b32:	ea4f 122b 	mov.w	r2, fp, asr #4
 8014b36:	f000 8087 	beq.w	8014c48 <_dtoa_r+0x428>
 8014b3a:	49bc      	ldr	r1, [pc, #752]	; (8014e2c <_dtoa_r+0x60c>)
 8014b3c:	ed91 6b08 	vldr	d6, [r1, #32]
 8014b40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8014b44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8014b48:	f002 020f 	and.w	r2, r2, #15
 8014b4c:	2103      	movs	r1, #3
 8014b4e:	48b7      	ldr	r0, [pc, #732]	; (8014e2c <_dtoa_r+0x60c>)
 8014b50:	2a00      	cmp	r2, #0
 8014b52:	d17b      	bne.n	8014c4c <_dtoa_r+0x42c>
 8014b54:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014b58:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8014b5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014b62:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014b66:	2a00      	cmp	r2, #0
 8014b68:	f000 80a0 	beq.w	8014cac <_dtoa_r+0x48c>
 8014b6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8014b70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b78:	f140 8098 	bpl.w	8014cac <_dtoa_r+0x48c>
 8014b7c:	f1b9 0f00 	cmp.w	r9, #0
 8014b80:	f000 8094 	beq.w	8014cac <_dtoa_r+0x48c>
 8014b84:	f1ba 0f00 	cmp.w	sl, #0
 8014b88:	dd2f      	ble.n	8014bea <_dtoa_r+0x3ca>
 8014b8a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8014b8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014b92:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014b96:	f10b 32ff 	add.w	r2, fp, #4294967295
 8014b9a:	3101      	adds	r1, #1
 8014b9c:	4654      	mov	r4, sl
 8014b9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8014ba2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8014ba6:	ee07 1a90 	vmov	s15, r1
 8014baa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8014bae:	eea7 5b06 	vfma.f64	d5, d7, d6
 8014bb2:	ee15 7a90 	vmov	r7, s11
 8014bb6:	ec51 0b15 	vmov	r0, r1, d5
 8014bba:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8014bbe:	2c00      	cmp	r4, #0
 8014bc0:	d177      	bne.n	8014cb2 <_dtoa_r+0x492>
 8014bc2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014bc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8014bca:	ec41 0b17 	vmov	d7, r0, r1
 8014bce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bd6:	f300 826a 	bgt.w	80150ae <_dtoa_r+0x88e>
 8014bda:	eeb1 7b47 	vneg.f64	d7, d7
 8014bde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014be6:	f100 8260 	bmi.w	80150aa <_dtoa_r+0x88a>
 8014bea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8014bee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8014bf0:	2a00      	cmp	r2, #0
 8014bf2:	f2c0 811d 	blt.w	8014e30 <_dtoa_r+0x610>
 8014bf6:	f1bb 0f0e 	cmp.w	fp, #14
 8014bfa:	f300 8119 	bgt.w	8014e30 <_dtoa_r+0x610>
 8014bfe:	4b8a      	ldr	r3, [pc, #552]	; (8014e28 <_dtoa_r+0x608>)
 8014c00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014c04:	ed93 6b00 	vldr	d6, [r3]
 8014c08:	9b08      	ldr	r3, [sp, #32]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	f280 80b7 	bge.w	8014d7e <_dtoa_r+0x55e>
 8014c10:	f1b9 0f00 	cmp.w	r9, #0
 8014c14:	f300 80b3 	bgt.w	8014d7e <_dtoa_r+0x55e>
 8014c18:	f040 8246 	bne.w	80150a8 <_dtoa_r+0x888>
 8014c1c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8014c20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8014c24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014c28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c30:	464c      	mov	r4, r9
 8014c32:	464f      	mov	r7, r9
 8014c34:	f280 821c 	bge.w	8015070 <_dtoa_r+0x850>
 8014c38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014c3c:	2331      	movs	r3, #49	; 0x31
 8014c3e:	f808 3b01 	strb.w	r3, [r8], #1
 8014c42:	f10b 0b01 	add.w	fp, fp, #1
 8014c46:	e218      	b.n	801507a <_dtoa_r+0x85a>
 8014c48:	2102      	movs	r1, #2
 8014c4a:	e780      	b.n	8014b4e <_dtoa_r+0x32e>
 8014c4c:	07d4      	lsls	r4, r2, #31
 8014c4e:	d504      	bpl.n	8014c5a <_dtoa_r+0x43a>
 8014c50:	ed90 6b00 	vldr	d6, [r0]
 8014c54:	3101      	adds	r1, #1
 8014c56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014c5a:	1052      	asrs	r2, r2, #1
 8014c5c:	3008      	adds	r0, #8
 8014c5e:	e777      	b.n	8014b50 <_dtoa_r+0x330>
 8014c60:	d022      	beq.n	8014ca8 <_dtoa_r+0x488>
 8014c62:	f1cb 0200 	rsb	r2, fp, #0
 8014c66:	4970      	ldr	r1, [pc, #448]	; (8014e28 <_dtoa_r+0x608>)
 8014c68:	f002 000f 	and.w	r0, r2, #15
 8014c6c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8014c70:	ed91 7b00 	vldr	d7, [r1]
 8014c74:	ee28 7b07 	vmul.f64	d7, d8, d7
 8014c78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014c7c:	486b      	ldr	r0, [pc, #428]	; (8014e2c <_dtoa_r+0x60c>)
 8014c7e:	1112      	asrs	r2, r2, #4
 8014c80:	2400      	movs	r4, #0
 8014c82:	2102      	movs	r1, #2
 8014c84:	b92a      	cbnz	r2, 8014c92 <_dtoa_r+0x472>
 8014c86:	2c00      	cmp	r4, #0
 8014c88:	f43f af6a 	beq.w	8014b60 <_dtoa_r+0x340>
 8014c8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014c90:	e766      	b.n	8014b60 <_dtoa_r+0x340>
 8014c92:	07d7      	lsls	r7, r2, #31
 8014c94:	d505      	bpl.n	8014ca2 <_dtoa_r+0x482>
 8014c96:	ed90 6b00 	vldr	d6, [r0]
 8014c9a:	3101      	adds	r1, #1
 8014c9c:	2401      	movs	r4, #1
 8014c9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8014ca2:	1052      	asrs	r2, r2, #1
 8014ca4:	3008      	adds	r0, #8
 8014ca6:	e7ed      	b.n	8014c84 <_dtoa_r+0x464>
 8014ca8:	2102      	movs	r1, #2
 8014caa:	e759      	b.n	8014b60 <_dtoa_r+0x340>
 8014cac:	465a      	mov	r2, fp
 8014cae:	464c      	mov	r4, r9
 8014cb0:	e775      	b.n	8014b9e <_dtoa_r+0x37e>
 8014cb2:	ec41 0b17 	vmov	d7, r0, r1
 8014cb6:	495c      	ldr	r1, [pc, #368]	; (8014e28 <_dtoa_r+0x608>)
 8014cb8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8014cbc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8014cc0:	9901      	ldr	r1, [sp, #4]
 8014cc2:	440c      	add	r4, r1
 8014cc4:	9907      	ldr	r1, [sp, #28]
 8014cc6:	b351      	cbz	r1, 8014d1e <_dtoa_r+0x4fe>
 8014cc8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8014ccc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8014cd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014cd4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8014cd8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014cdc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8014ce0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014ce4:	ee14 1a90 	vmov	r1, s9
 8014ce8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014cec:	3130      	adds	r1, #48	; 0x30
 8014cee:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014cf2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8014cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cfa:	f808 1b01 	strb.w	r1, [r8], #1
 8014cfe:	d439      	bmi.n	8014d74 <_dtoa_r+0x554>
 8014d00:	ee32 5b46 	vsub.f64	d5, d2, d6
 8014d04:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8014d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d0c:	d472      	bmi.n	8014df4 <_dtoa_r+0x5d4>
 8014d0e:	45a0      	cmp	r8, r4
 8014d10:	f43f af6b 	beq.w	8014bea <_dtoa_r+0x3ca>
 8014d14:	ee27 7b03 	vmul.f64	d7, d7, d3
 8014d18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014d1c:	e7e0      	b.n	8014ce0 <_dtoa_r+0x4c0>
 8014d1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014d22:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014d26:	4620      	mov	r0, r4
 8014d28:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8014d2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8014d30:	ee14 1a90 	vmov	r1, s9
 8014d34:	3130      	adds	r1, #48	; 0x30
 8014d36:	f808 1b01 	strb.w	r1, [r8], #1
 8014d3a:	45a0      	cmp	r8, r4
 8014d3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8014d40:	ee36 6b45 	vsub.f64	d6, d6, d5
 8014d44:	d118      	bne.n	8014d78 <_dtoa_r+0x558>
 8014d46:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8014d4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8014d4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8014d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d56:	dc4d      	bgt.n	8014df4 <_dtoa_r+0x5d4>
 8014d58:	ee35 5b47 	vsub.f64	d5, d5, d7
 8014d5c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8014d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014d64:	f57f af41 	bpl.w	8014bea <_dtoa_r+0x3ca>
 8014d68:	4680      	mov	r8, r0
 8014d6a:	3801      	subs	r0, #1
 8014d6c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8014d70:	2b30      	cmp	r3, #48	; 0x30
 8014d72:	d0f9      	beq.n	8014d68 <_dtoa_r+0x548>
 8014d74:	4693      	mov	fp, r2
 8014d76:	e02a      	b.n	8014dce <_dtoa_r+0x5ae>
 8014d78:	ee26 6b03 	vmul.f64	d6, d6, d3
 8014d7c:	e7d6      	b.n	8014d2c <_dtoa_r+0x50c>
 8014d7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014d82:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8014d86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014d8a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8014d8e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8014d92:	ee15 3a10 	vmov	r3, s10
 8014d96:	3330      	adds	r3, #48	; 0x30
 8014d98:	f808 3b01 	strb.w	r3, [r8], #1
 8014d9c:	9b01      	ldr	r3, [sp, #4]
 8014d9e:	eba8 0303 	sub.w	r3, r8, r3
 8014da2:	4599      	cmp	r9, r3
 8014da4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8014da8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8014dac:	d133      	bne.n	8014e16 <_dtoa_r+0x5f6>
 8014dae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8014db2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8014db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dba:	dc1a      	bgt.n	8014df2 <_dtoa_r+0x5d2>
 8014dbc:	eeb4 7b46 	vcmp.f64	d7, d6
 8014dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dc4:	d103      	bne.n	8014dce <_dtoa_r+0x5ae>
 8014dc6:	ee15 3a10 	vmov	r3, s10
 8014dca:	07d9      	lsls	r1, r3, #31
 8014dcc:	d411      	bmi.n	8014df2 <_dtoa_r+0x5d2>
 8014dce:	4629      	mov	r1, r5
 8014dd0:	4630      	mov	r0, r6
 8014dd2:	f000 fb1d 	bl	8015410 <_Bfree>
 8014dd6:	2300      	movs	r3, #0
 8014dd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014dda:	f888 3000 	strb.w	r3, [r8]
 8014dde:	f10b 0301 	add.w	r3, fp, #1
 8014de2:	6013      	str	r3, [r2, #0]
 8014de4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	f43f ad69 	beq.w	80148be <_dtoa_r+0x9e>
 8014dec:	f8c3 8000 	str.w	r8, [r3]
 8014df0:	e565      	b.n	80148be <_dtoa_r+0x9e>
 8014df2:	465a      	mov	r2, fp
 8014df4:	4643      	mov	r3, r8
 8014df6:	4698      	mov	r8, r3
 8014df8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8014dfc:	2939      	cmp	r1, #57	; 0x39
 8014dfe:	d106      	bne.n	8014e0e <_dtoa_r+0x5ee>
 8014e00:	9901      	ldr	r1, [sp, #4]
 8014e02:	4299      	cmp	r1, r3
 8014e04:	d1f7      	bne.n	8014df6 <_dtoa_r+0x5d6>
 8014e06:	9801      	ldr	r0, [sp, #4]
 8014e08:	2130      	movs	r1, #48	; 0x30
 8014e0a:	3201      	adds	r2, #1
 8014e0c:	7001      	strb	r1, [r0, #0]
 8014e0e:	7819      	ldrb	r1, [r3, #0]
 8014e10:	3101      	adds	r1, #1
 8014e12:	7019      	strb	r1, [r3, #0]
 8014e14:	e7ae      	b.n	8014d74 <_dtoa_r+0x554>
 8014e16:	ee27 7b04 	vmul.f64	d7, d7, d4
 8014e1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8014e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e22:	d1b2      	bne.n	8014d8a <_dtoa_r+0x56a>
 8014e24:	e7d3      	b.n	8014dce <_dtoa_r+0x5ae>
 8014e26:	bf00      	nop
 8014e28:	08017e38 	.word	0x08017e38
 8014e2c:	08017e10 	.word	0x08017e10
 8014e30:	9907      	ldr	r1, [sp, #28]
 8014e32:	2900      	cmp	r1, #0
 8014e34:	f000 80d0 	beq.w	8014fd8 <_dtoa_r+0x7b8>
 8014e38:	9906      	ldr	r1, [sp, #24]
 8014e3a:	2901      	cmp	r1, #1
 8014e3c:	f300 80b4 	bgt.w	8014fa8 <_dtoa_r+0x788>
 8014e40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e42:	2900      	cmp	r1, #0
 8014e44:	f000 80ac 	beq.w	8014fa0 <_dtoa_r+0x780>
 8014e48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014e4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014e50:	461c      	mov	r4, r3
 8014e52:	9309      	str	r3, [sp, #36]	; 0x24
 8014e54:	9b04      	ldr	r3, [sp, #16]
 8014e56:	4413      	add	r3, r2
 8014e58:	9304      	str	r3, [sp, #16]
 8014e5a:	9b05      	ldr	r3, [sp, #20]
 8014e5c:	2101      	movs	r1, #1
 8014e5e:	4413      	add	r3, r2
 8014e60:	4630      	mov	r0, r6
 8014e62:	9305      	str	r3, [sp, #20]
 8014e64:	f000 fbd4 	bl	8015610 <__i2b>
 8014e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e6a:	4607      	mov	r7, r0
 8014e6c:	f1b8 0f00 	cmp.w	r8, #0
 8014e70:	d00d      	beq.n	8014e8e <_dtoa_r+0x66e>
 8014e72:	9a05      	ldr	r2, [sp, #20]
 8014e74:	2a00      	cmp	r2, #0
 8014e76:	dd0a      	ble.n	8014e8e <_dtoa_r+0x66e>
 8014e78:	4542      	cmp	r2, r8
 8014e7a:	9904      	ldr	r1, [sp, #16]
 8014e7c:	bfa8      	it	ge
 8014e7e:	4642      	movge	r2, r8
 8014e80:	1a89      	subs	r1, r1, r2
 8014e82:	9104      	str	r1, [sp, #16]
 8014e84:	9905      	ldr	r1, [sp, #20]
 8014e86:	eba8 0802 	sub.w	r8, r8, r2
 8014e8a:	1a8a      	subs	r2, r1, r2
 8014e8c:	9205      	str	r2, [sp, #20]
 8014e8e:	b303      	cbz	r3, 8014ed2 <_dtoa_r+0x6b2>
 8014e90:	9a07      	ldr	r2, [sp, #28]
 8014e92:	2a00      	cmp	r2, #0
 8014e94:	f000 80a5 	beq.w	8014fe2 <_dtoa_r+0x7c2>
 8014e98:	2c00      	cmp	r4, #0
 8014e9a:	dd13      	ble.n	8014ec4 <_dtoa_r+0x6a4>
 8014e9c:	4639      	mov	r1, r7
 8014e9e:	4622      	mov	r2, r4
 8014ea0:	4630      	mov	r0, r6
 8014ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8014ea4:	f000 fc74 	bl	8015790 <__pow5mult>
 8014ea8:	462a      	mov	r2, r5
 8014eaa:	4601      	mov	r1, r0
 8014eac:	4607      	mov	r7, r0
 8014eae:	4630      	mov	r0, r6
 8014eb0:	f000 fbc4 	bl	801563c <__multiply>
 8014eb4:	4629      	mov	r1, r5
 8014eb6:	9009      	str	r0, [sp, #36]	; 0x24
 8014eb8:	4630      	mov	r0, r6
 8014eba:	f000 faa9 	bl	8015410 <_Bfree>
 8014ebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ec0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ec2:	4615      	mov	r5, r2
 8014ec4:	1b1a      	subs	r2, r3, r4
 8014ec6:	d004      	beq.n	8014ed2 <_dtoa_r+0x6b2>
 8014ec8:	4629      	mov	r1, r5
 8014eca:	4630      	mov	r0, r6
 8014ecc:	f000 fc60 	bl	8015790 <__pow5mult>
 8014ed0:	4605      	mov	r5, r0
 8014ed2:	2101      	movs	r1, #1
 8014ed4:	4630      	mov	r0, r6
 8014ed6:	f000 fb9b 	bl	8015610 <__i2b>
 8014eda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	4604      	mov	r4, r0
 8014ee0:	f340 8081 	ble.w	8014fe6 <_dtoa_r+0x7c6>
 8014ee4:	461a      	mov	r2, r3
 8014ee6:	4601      	mov	r1, r0
 8014ee8:	4630      	mov	r0, r6
 8014eea:	f000 fc51 	bl	8015790 <__pow5mult>
 8014eee:	9b06      	ldr	r3, [sp, #24]
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	4604      	mov	r4, r0
 8014ef4:	dd7a      	ble.n	8014fec <_dtoa_r+0x7cc>
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8014efa:	6922      	ldr	r2, [r4, #16]
 8014efc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014f00:	6910      	ldr	r0, [r2, #16]
 8014f02:	f000 fb37 	bl	8015574 <__hi0bits>
 8014f06:	f1c0 0020 	rsb	r0, r0, #32
 8014f0a:	9b05      	ldr	r3, [sp, #20]
 8014f0c:	4418      	add	r0, r3
 8014f0e:	f010 001f 	ands.w	r0, r0, #31
 8014f12:	f000 8093 	beq.w	801503c <_dtoa_r+0x81c>
 8014f16:	f1c0 0220 	rsb	r2, r0, #32
 8014f1a:	2a04      	cmp	r2, #4
 8014f1c:	f340 8085 	ble.w	801502a <_dtoa_r+0x80a>
 8014f20:	9b04      	ldr	r3, [sp, #16]
 8014f22:	f1c0 001c 	rsb	r0, r0, #28
 8014f26:	4403      	add	r3, r0
 8014f28:	9304      	str	r3, [sp, #16]
 8014f2a:	9b05      	ldr	r3, [sp, #20]
 8014f2c:	4480      	add	r8, r0
 8014f2e:	4403      	add	r3, r0
 8014f30:	9305      	str	r3, [sp, #20]
 8014f32:	9b04      	ldr	r3, [sp, #16]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	dd05      	ble.n	8014f44 <_dtoa_r+0x724>
 8014f38:	4629      	mov	r1, r5
 8014f3a:	461a      	mov	r2, r3
 8014f3c:	4630      	mov	r0, r6
 8014f3e:	f000 fc81 	bl	8015844 <__lshift>
 8014f42:	4605      	mov	r5, r0
 8014f44:	9b05      	ldr	r3, [sp, #20]
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	dd05      	ble.n	8014f56 <_dtoa_r+0x736>
 8014f4a:	4621      	mov	r1, r4
 8014f4c:	461a      	mov	r2, r3
 8014f4e:	4630      	mov	r0, r6
 8014f50:	f000 fc78 	bl	8015844 <__lshift>
 8014f54:	4604      	mov	r4, r0
 8014f56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d071      	beq.n	8015040 <_dtoa_r+0x820>
 8014f5c:	4621      	mov	r1, r4
 8014f5e:	4628      	mov	r0, r5
 8014f60:	f000 fcdc 	bl	801591c <__mcmp>
 8014f64:	2800      	cmp	r0, #0
 8014f66:	da6b      	bge.n	8015040 <_dtoa_r+0x820>
 8014f68:	2300      	movs	r3, #0
 8014f6a:	4629      	mov	r1, r5
 8014f6c:	220a      	movs	r2, #10
 8014f6e:	4630      	mov	r0, r6
 8014f70:	f000 fa70 	bl	8015454 <__multadd>
 8014f74:	9b07      	ldr	r3, [sp, #28]
 8014f76:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014f7a:	4605      	mov	r5, r0
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	f000 8197 	beq.w	80152b0 <_dtoa_r+0xa90>
 8014f82:	4639      	mov	r1, r7
 8014f84:	2300      	movs	r3, #0
 8014f86:	220a      	movs	r2, #10
 8014f88:	4630      	mov	r0, r6
 8014f8a:	f000 fa63 	bl	8015454 <__multadd>
 8014f8e:	f1ba 0f00 	cmp.w	sl, #0
 8014f92:	4607      	mov	r7, r0
 8014f94:	f300 8093 	bgt.w	80150be <_dtoa_r+0x89e>
 8014f98:	9b06      	ldr	r3, [sp, #24]
 8014f9a:	2b02      	cmp	r3, #2
 8014f9c:	dc57      	bgt.n	801504e <_dtoa_r+0x82e>
 8014f9e:	e08e      	b.n	80150be <_dtoa_r+0x89e>
 8014fa0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014fa2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8014fa6:	e751      	b.n	8014e4c <_dtoa_r+0x62c>
 8014fa8:	f109 34ff 	add.w	r4, r9, #4294967295
 8014fac:	42a3      	cmp	r3, r4
 8014fae:	bfbf      	itttt	lt
 8014fb0:	1ae2      	sublt	r2, r4, r3
 8014fb2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014fb4:	189b      	addlt	r3, r3, r2
 8014fb6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014fb8:	bfae      	itee	ge
 8014fba:	1b1c      	subge	r4, r3, r4
 8014fbc:	4623      	movlt	r3, r4
 8014fbe:	2400      	movlt	r4, #0
 8014fc0:	f1b9 0f00 	cmp.w	r9, #0
 8014fc4:	bfb5      	itete	lt
 8014fc6:	9a04      	ldrlt	r2, [sp, #16]
 8014fc8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8014fcc:	eba2 0809 	sublt.w	r8, r2, r9
 8014fd0:	464a      	movge	r2, r9
 8014fd2:	bfb8      	it	lt
 8014fd4:	2200      	movlt	r2, #0
 8014fd6:	e73c      	b.n	8014e52 <_dtoa_r+0x632>
 8014fd8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014fdc:	9f07      	ldr	r7, [sp, #28]
 8014fde:	461c      	mov	r4, r3
 8014fe0:	e744      	b.n	8014e6c <_dtoa_r+0x64c>
 8014fe2:	461a      	mov	r2, r3
 8014fe4:	e770      	b.n	8014ec8 <_dtoa_r+0x6a8>
 8014fe6:	9b06      	ldr	r3, [sp, #24]
 8014fe8:	2b01      	cmp	r3, #1
 8014fea:	dc18      	bgt.n	801501e <_dtoa_r+0x7fe>
 8014fec:	9b02      	ldr	r3, [sp, #8]
 8014fee:	b9b3      	cbnz	r3, 801501e <_dtoa_r+0x7fe>
 8014ff0:	9b03      	ldr	r3, [sp, #12]
 8014ff2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8014ff6:	b9a2      	cbnz	r2, 8015022 <_dtoa_r+0x802>
 8014ff8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014ffc:	0d12      	lsrs	r2, r2, #20
 8014ffe:	0512      	lsls	r2, r2, #20
 8015000:	b18a      	cbz	r2, 8015026 <_dtoa_r+0x806>
 8015002:	9b04      	ldr	r3, [sp, #16]
 8015004:	3301      	adds	r3, #1
 8015006:	9304      	str	r3, [sp, #16]
 8015008:	9b05      	ldr	r3, [sp, #20]
 801500a:	3301      	adds	r3, #1
 801500c:	9305      	str	r3, [sp, #20]
 801500e:	2301      	movs	r3, #1
 8015010:	9309      	str	r3, [sp, #36]	; 0x24
 8015012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015014:	2b00      	cmp	r3, #0
 8015016:	f47f af70 	bne.w	8014efa <_dtoa_r+0x6da>
 801501a:	2001      	movs	r0, #1
 801501c:	e775      	b.n	8014f0a <_dtoa_r+0x6ea>
 801501e:	2300      	movs	r3, #0
 8015020:	e7f6      	b.n	8015010 <_dtoa_r+0x7f0>
 8015022:	9b02      	ldr	r3, [sp, #8]
 8015024:	e7f4      	b.n	8015010 <_dtoa_r+0x7f0>
 8015026:	9209      	str	r2, [sp, #36]	; 0x24
 8015028:	e7f3      	b.n	8015012 <_dtoa_r+0x7f2>
 801502a:	d082      	beq.n	8014f32 <_dtoa_r+0x712>
 801502c:	9b04      	ldr	r3, [sp, #16]
 801502e:	321c      	adds	r2, #28
 8015030:	4413      	add	r3, r2
 8015032:	9304      	str	r3, [sp, #16]
 8015034:	9b05      	ldr	r3, [sp, #20]
 8015036:	4490      	add	r8, r2
 8015038:	4413      	add	r3, r2
 801503a:	e779      	b.n	8014f30 <_dtoa_r+0x710>
 801503c:	4602      	mov	r2, r0
 801503e:	e7f5      	b.n	801502c <_dtoa_r+0x80c>
 8015040:	f1b9 0f00 	cmp.w	r9, #0
 8015044:	dc36      	bgt.n	80150b4 <_dtoa_r+0x894>
 8015046:	9b06      	ldr	r3, [sp, #24]
 8015048:	2b02      	cmp	r3, #2
 801504a:	dd33      	ble.n	80150b4 <_dtoa_r+0x894>
 801504c:	46ca      	mov	sl, r9
 801504e:	f1ba 0f00 	cmp.w	sl, #0
 8015052:	d10d      	bne.n	8015070 <_dtoa_r+0x850>
 8015054:	4621      	mov	r1, r4
 8015056:	4653      	mov	r3, sl
 8015058:	2205      	movs	r2, #5
 801505a:	4630      	mov	r0, r6
 801505c:	f000 f9fa 	bl	8015454 <__multadd>
 8015060:	4601      	mov	r1, r0
 8015062:	4604      	mov	r4, r0
 8015064:	4628      	mov	r0, r5
 8015066:	f000 fc59 	bl	801591c <__mcmp>
 801506a:	2800      	cmp	r0, #0
 801506c:	f73f ade4 	bgt.w	8014c38 <_dtoa_r+0x418>
 8015070:	9b08      	ldr	r3, [sp, #32]
 8015072:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015076:	ea6f 0b03 	mvn.w	fp, r3
 801507a:	f04f 0900 	mov.w	r9, #0
 801507e:	4621      	mov	r1, r4
 8015080:	4630      	mov	r0, r6
 8015082:	f000 f9c5 	bl	8015410 <_Bfree>
 8015086:	2f00      	cmp	r7, #0
 8015088:	f43f aea1 	beq.w	8014dce <_dtoa_r+0x5ae>
 801508c:	f1b9 0f00 	cmp.w	r9, #0
 8015090:	d005      	beq.n	801509e <_dtoa_r+0x87e>
 8015092:	45b9      	cmp	r9, r7
 8015094:	d003      	beq.n	801509e <_dtoa_r+0x87e>
 8015096:	4649      	mov	r1, r9
 8015098:	4630      	mov	r0, r6
 801509a:	f000 f9b9 	bl	8015410 <_Bfree>
 801509e:	4639      	mov	r1, r7
 80150a0:	4630      	mov	r0, r6
 80150a2:	f000 f9b5 	bl	8015410 <_Bfree>
 80150a6:	e692      	b.n	8014dce <_dtoa_r+0x5ae>
 80150a8:	2400      	movs	r4, #0
 80150aa:	4627      	mov	r7, r4
 80150ac:	e7e0      	b.n	8015070 <_dtoa_r+0x850>
 80150ae:	4693      	mov	fp, r2
 80150b0:	4627      	mov	r7, r4
 80150b2:	e5c1      	b.n	8014c38 <_dtoa_r+0x418>
 80150b4:	9b07      	ldr	r3, [sp, #28]
 80150b6:	46ca      	mov	sl, r9
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	f000 8100 	beq.w	80152be <_dtoa_r+0xa9e>
 80150be:	f1b8 0f00 	cmp.w	r8, #0
 80150c2:	dd05      	ble.n	80150d0 <_dtoa_r+0x8b0>
 80150c4:	4639      	mov	r1, r7
 80150c6:	4642      	mov	r2, r8
 80150c8:	4630      	mov	r0, r6
 80150ca:	f000 fbbb 	bl	8015844 <__lshift>
 80150ce:	4607      	mov	r7, r0
 80150d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d05d      	beq.n	8015192 <_dtoa_r+0x972>
 80150d6:	6879      	ldr	r1, [r7, #4]
 80150d8:	4630      	mov	r0, r6
 80150da:	f000 f959 	bl	8015390 <_Balloc>
 80150de:	4680      	mov	r8, r0
 80150e0:	b928      	cbnz	r0, 80150ee <_dtoa_r+0x8ce>
 80150e2:	4b82      	ldr	r3, [pc, #520]	; (80152ec <_dtoa_r+0xacc>)
 80150e4:	4602      	mov	r2, r0
 80150e6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80150ea:	f7ff bbb1 	b.w	8014850 <_dtoa_r+0x30>
 80150ee:	693a      	ldr	r2, [r7, #16]
 80150f0:	3202      	adds	r2, #2
 80150f2:	0092      	lsls	r2, r2, #2
 80150f4:	f107 010c 	add.w	r1, r7, #12
 80150f8:	300c      	adds	r0, #12
 80150fa:	f001 fe7b 	bl	8016df4 <memcpy>
 80150fe:	2201      	movs	r2, #1
 8015100:	4641      	mov	r1, r8
 8015102:	4630      	mov	r0, r6
 8015104:	f000 fb9e 	bl	8015844 <__lshift>
 8015108:	9b01      	ldr	r3, [sp, #4]
 801510a:	3301      	adds	r3, #1
 801510c:	9304      	str	r3, [sp, #16]
 801510e:	9b01      	ldr	r3, [sp, #4]
 8015110:	4453      	add	r3, sl
 8015112:	9308      	str	r3, [sp, #32]
 8015114:	9b02      	ldr	r3, [sp, #8]
 8015116:	f003 0301 	and.w	r3, r3, #1
 801511a:	46b9      	mov	r9, r7
 801511c:	9307      	str	r3, [sp, #28]
 801511e:	4607      	mov	r7, r0
 8015120:	9b04      	ldr	r3, [sp, #16]
 8015122:	4621      	mov	r1, r4
 8015124:	3b01      	subs	r3, #1
 8015126:	4628      	mov	r0, r5
 8015128:	9302      	str	r3, [sp, #8]
 801512a:	f7ff faef 	bl	801470c <quorem>
 801512e:	4603      	mov	r3, r0
 8015130:	3330      	adds	r3, #48	; 0x30
 8015132:	9005      	str	r0, [sp, #20]
 8015134:	4649      	mov	r1, r9
 8015136:	4628      	mov	r0, r5
 8015138:	9309      	str	r3, [sp, #36]	; 0x24
 801513a:	f000 fbef 	bl	801591c <__mcmp>
 801513e:	463a      	mov	r2, r7
 8015140:	4682      	mov	sl, r0
 8015142:	4621      	mov	r1, r4
 8015144:	4630      	mov	r0, r6
 8015146:	f000 fc05 	bl	8015954 <__mdiff>
 801514a:	68c2      	ldr	r2, [r0, #12]
 801514c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801514e:	4680      	mov	r8, r0
 8015150:	bb0a      	cbnz	r2, 8015196 <_dtoa_r+0x976>
 8015152:	4601      	mov	r1, r0
 8015154:	4628      	mov	r0, r5
 8015156:	f000 fbe1 	bl	801591c <__mcmp>
 801515a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801515c:	4602      	mov	r2, r0
 801515e:	4641      	mov	r1, r8
 8015160:	4630      	mov	r0, r6
 8015162:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8015166:	f000 f953 	bl	8015410 <_Bfree>
 801516a:	9b06      	ldr	r3, [sp, #24]
 801516c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801516e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8015172:	ea43 0102 	orr.w	r1, r3, r2
 8015176:	9b07      	ldr	r3, [sp, #28]
 8015178:	4319      	orrs	r1, r3
 801517a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801517c:	d10d      	bne.n	801519a <_dtoa_r+0x97a>
 801517e:	2b39      	cmp	r3, #57	; 0x39
 8015180:	d029      	beq.n	80151d6 <_dtoa_r+0x9b6>
 8015182:	f1ba 0f00 	cmp.w	sl, #0
 8015186:	dd01      	ble.n	801518c <_dtoa_r+0x96c>
 8015188:	9b05      	ldr	r3, [sp, #20]
 801518a:	3331      	adds	r3, #49	; 0x31
 801518c:	9a02      	ldr	r2, [sp, #8]
 801518e:	7013      	strb	r3, [r2, #0]
 8015190:	e775      	b.n	801507e <_dtoa_r+0x85e>
 8015192:	4638      	mov	r0, r7
 8015194:	e7b8      	b.n	8015108 <_dtoa_r+0x8e8>
 8015196:	2201      	movs	r2, #1
 8015198:	e7e1      	b.n	801515e <_dtoa_r+0x93e>
 801519a:	f1ba 0f00 	cmp.w	sl, #0
 801519e:	db06      	blt.n	80151ae <_dtoa_r+0x98e>
 80151a0:	9906      	ldr	r1, [sp, #24]
 80151a2:	ea41 0a0a 	orr.w	sl, r1, sl
 80151a6:	9907      	ldr	r1, [sp, #28]
 80151a8:	ea5a 0a01 	orrs.w	sl, sl, r1
 80151ac:	d120      	bne.n	80151f0 <_dtoa_r+0x9d0>
 80151ae:	2a00      	cmp	r2, #0
 80151b0:	ddec      	ble.n	801518c <_dtoa_r+0x96c>
 80151b2:	4629      	mov	r1, r5
 80151b4:	2201      	movs	r2, #1
 80151b6:	4630      	mov	r0, r6
 80151b8:	9304      	str	r3, [sp, #16]
 80151ba:	f000 fb43 	bl	8015844 <__lshift>
 80151be:	4621      	mov	r1, r4
 80151c0:	4605      	mov	r5, r0
 80151c2:	f000 fbab 	bl	801591c <__mcmp>
 80151c6:	2800      	cmp	r0, #0
 80151c8:	9b04      	ldr	r3, [sp, #16]
 80151ca:	dc02      	bgt.n	80151d2 <_dtoa_r+0x9b2>
 80151cc:	d1de      	bne.n	801518c <_dtoa_r+0x96c>
 80151ce:	07da      	lsls	r2, r3, #31
 80151d0:	d5dc      	bpl.n	801518c <_dtoa_r+0x96c>
 80151d2:	2b39      	cmp	r3, #57	; 0x39
 80151d4:	d1d8      	bne.n	8015188 <_dtoa_r+0x968>
 80151d6:	9a02      	ldr	r2, [sp, #8]
 80151d8:	2339      	movs	r3, #57	; 0x39
 80151da:	7013      	strb	r3, [r2, #0]
 80151dc:	4643      	mov	r3, r8
 80151de:	4698      	mov	r8, r3
 80151e0:	3b01      	subs	r3, #1
 80151e2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80151e6:	2a39      	cmp	r2, #57	; 0x39
 80151e8:	d051      	beq.n	801528e <_dtoa_r+0xa6e>
 80151ea:	3201      	adds	r2, #1
 80151ec:	701a      	strb	r2, [r3, #0]
 80151ee:	e746      	b.n	801507e <_dtoa_r+0x85e>
 80151f0:	2a00      	cmp	r2, #0
 80151f2:	dd03      	ble.n	80151fc <_dtoa_r+0x9dc>
 80151f4:	2b39      	cmp	r3, #57	; 0x39
 80151f6:	d0ee      	beq.n	80151d6 <_dtoa_r+0x9b6>
 80151f8:	3301      	adds	r3, #1
 80151fa:	e7c7      	b.n	801518c <_dtoa_r+0x96c>
 80151fc:	9a04      	ldr	r2, [sp, #16]
 80151fe:	9908      	ldr	r1, [sp, #32]
 8015200:	f802 3c01 	strb.w	r3, [r2, #-1]
 8015204:	428a      	cmp	r2, r1
 8015206:	d02b      	beq.n	8015260 <_dtoa_r+0xa40>
 8015208:	4629      	mov	r1, r5
 801520a:	2300      	movs	r3, #0
 801520c:	220a      	movs	r2, #10
 801520e:	4630      	mov	r0, r6
 8015210:	f000 f920 	bl	8015454 <__multadd>
 8015214:	45b9      	cmp	r9, r7
 8015216:	4605      	mov	r5, r0
 8015218:	f04f 0300 	mov.w	r3, #0
 801521c:	f04f 020a 	mov.w	r2, #10
 8015220:	4649      	mov	r1, r9
 8015222:	4630      	mov	r0, r6
 8015224:	d107      	bne.n	8015236 <_dtoa_r+0xa16>
 8015226:	f000 f915 	bl	8015454 <__multadd>
 801522a:	4681      	mov	r9, r0
 801522c:	4607      	mov	r7, r0
 801522e:	9b04      	ldr	r3, [sp, #16]
 8015230:	3301      	adds	r3, #1
 8015232:	9304      	str	r3, [sp, #16]
 8015234:	e774      	b.n	8015120 <_dtoa_r+0x900>
 8015236:	f000 f90d 	bl	8015454 <__multadd>
 801523a:	4639      	mov	r1, r7
 801523c:	4681      	mov	r9, r0
 801523e:	2300      	movs	r3, #0
 8015240:	220a      	movs	r2, #10
 8015242:	4630      	mov	r0, r6
 8015244:	f000 f906 	bl	8015454 <__multadd>
 8015248:	4607      	mov	r7, r0
 801524a:	e7f0      	b.n	801522e <_dtoa_r+0xa0e>
 801524c:	f1ba 0f00 	cmp.w	sl, #0
 8015250:	9a01      	ldr	r2, [sp, #4]
 8015252:	bfcc      	ite	gt
 8015254:	46d0      	movgt	r8, sl
 8015256:	f04f 0801 	movle.w	r8, #1
 801525a:	4490      	add	r8, r2
 801525c:	f04f 0900 	mov.w	r9, #0
 8015260:	4629      	mov	r1, r5
 8015262:	2201      	movs	r2, #1
 8015264:	4630      	mov	r0, r6
 8015266:	9302      	str	r3, [sp, #8]
 8015268:	f000 faec 	bl	8015844 <__lshift>
 801526c:	4621      	mov	r1, r4
 801526e:	4605      	mov	r5, r0
 8015270:	f000 fb54 	bl	801591c <__mcmp>
 8015274:	2800      	cmp	r0, #0
 8015276:	dcb1      	bgt.n	80151dc <_dtoa_r+0x9bc>
 8015278:	d102      	bne.n	8015280 <_dtoa_r+0xa60>
 801527a:	9b02      	ldr	r3, [sp, #8]
 801527c:	07db      	lsls	r3, r3, #31
 801527e:	d4ad      	bmi.n	80151dc <_dtoa_r+0x9bc>
 8015280:	4643      	mov	r3, r8
 8015282:	4698      	mov	r8, r3
 8015284:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015288:	2a30      	cmp	r2, #48	; 0x30
 801528a:	d0fa      	beq.n	8015282 <_dtoa_r+0xa62>
 801528c:	e6f7      	b.n	801507e <_dtoa_r+0x85e>
 801528e:	9a01      	ldr	r2, [sp, #4]
 8015290:	429a      	cmp	r2, r3
 8015292:	d1a4      	bne.n	80151de <_dtoa_r+0x9be>
 8015294:	f10b 0b01 	add.w	fp, fp, #1
 8015298:	2331      	movs	r3, #49	; 0x31
 801529a:	e778      	b.n	801518e <_dtoa_r+0x96e>
 801529c:	4b14      	ldr	r3, [pc, #80]	; (80152f0 <_dtoa_r+0xad0>)
 801529e:	f7ff bb2a 	b.w	80148f6 <_dtoa_r+0xd6>
 80152a2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	f47f ab05 	bne.w	80148b4 <_dtoa_r+0x94>
 80152aa:	4b12      	ldr	r3, [pc, #72]	; (80152f4 <_dtoa_r+0xad4>)
 80152ac:	f7ff bb23 	b.w	80148f6 <_dtoa_r+0xd6>
 80152b0:	f1ba 0f00 	cmp.w	sl, #0
 80152b4:	dc03      	bgt.n	80152be <_dtoa_r+0xa9e>
 80152b6:	9b06      	ldr	r3, [sp, #24]
 80152b8:	2b02      	cmp	r3, #2
 80152ba:	f73f aec8 	bgt.w	801504e <_dtoa_r+0x82e>
 80152be:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80152c2:	4621      	mov	r1, r4
 80152c4:	4628      	mov	r0, r5
 80152c6:	f7ff fa21 	bl	801470c <quorem>
 80152ca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80152ce:	f808 3b01 	strb.w	r3, [r8], #1
 80152d2:	9a01      	ldr	r2, [sp, #4]
 80152d4:	eba8 0202 	sub.w	r2, r8, r2
 80152d8:	4592      	cmp	sl, r2
 80152da:	ddb7      	ble.n	801524c <_dtoa_r+0xa2c>
 80152dc:	4629      	mov	r1, r5
 80152de:	2300      	movs	r3, #0
 80152e0:	220a      	movs	r2, #10
 80152e2:	4630      	mov	r0, r6
 80152e4:	f000 f8b6 	bl	8015454 <__multadd>
 80152e8:	4605      	mov	r5, r0
 80152ea:	e7ea      	b.n	80152c2 <_dtoa_r+0xaa2>
 80152ec:	08017da1 	.word	0x08017da1
 80152f0:	08017cfc 	.word	0x08017cfc
 80152f4:	08017d25 	.word	0x08017d25

080152f8 <_free_r>:
 80152f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152fa:	2900      	cmp	r1, #0
 80152fc:	d044      	beq.n	8015388 <_free_r+0x90>
 80152fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015302:	9001      	str	r0, [sp, #4]
 8015304:	2b00      	cmp	r3, #0
 8015306:	f1a1 0404 	sub.w	r4, r1, #4
 801530a:	bfb8      	it	lt
 801530c:	18e4      	addlt	r4, r4, r3
 801530e:	f7fe f9f9 	bl	8013704 <__malloc_lock>
 8015312:	4a1e      	ldr	r2, [pc, #120]	; (801538c <_free_r+0x94>)
 8015314:	9801      	ldr	r0, [sp, #4]
 8015316:	6813      	ldr	r3, [r2, #0]
 8015318:	b933      	cbnz	r3, 8015328 <_free_r+0x30>
 801531a:	6063      	str	r3, [r4, #4]
 801531c:	6014      	str	r4, [r2, #0]
 801531e:	b003      	add	sp, #12
 8015320:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015324:	f7fe b9f4 	b.w	8013710 <__malloc_unlock>
 8015328:	42a3      	cmp	r3, r4
 801532a:	d908      	bls.n	801533e <_free_r+0x46>
 801532c:	6825      	ldr	r5, [r4, #0]
 801532e:	1961      	adds	r1, r4, r5
 8015330:	428b      	cmp	r3, r1
 8015332:	bf01      	itttt	eq
 8015334:	6819      	ldreq	r1, [r3, #0]
 8015336:	685b      	ldreq	r3, [r3, #4]
 8015338:	1949      	addeq	r1, r1, r5
 801533a:	6021      	streq	r1, [r4, #0]
 801533c:	e7ed      	b.n	801531a <_free_r+0x22>
 801533e:	461a      	mov	r2, r3
 8015340:	685b      	ldr	r3, [r3, #4]
 8015342:	b10b      	cbz	r3, 8015348 <_free_r+0x50>
 8015344:	42a3      	cmp	r3, r4
 8015346:	d9fa      	bls.n	801533e <_free_r+0x46>
 8015348:	6811      	ldr	r1, [r2, #0]
 801534a:	1855      	adds	r5, r2, r1
 801534c:	42a5      	cmp	r5, r4
 801534e:	d10b      	bne.n	8015368 <_free_r+0x70>
 8015350:	6824      	ldr	r4, [r4, #0]
 8015352:	4421      	add	r1, r4
 8015354:	1854      	adds	r4, r2, r1
 8015356:	42a3      	cmp	r3, r4
 8015358:	6011      	str	r1, [r2, #0]
 801535a:	d1e0      	bne.n	801531e <_free_r+0x26>
 801535c:	681c      	ldr	r4, [r3, #0]
 801535e:	685b      	ldr	r3, [r3, #4]
 8015360:	6053      	str	r3, [r2, #4]
 8015362:	440c      	add	r4, r1
 8015364:	6014      	str	r4, [r2, #0]
 8015366:	e7da      	b.n	801531e <_free_r+0x26>
 8015368:	d902      	bls.n	8015370 <_free_r+0x78>
 801536a:	230c      	movs	r3, #12
 801536c:	6003      	str	r3, [r0, #0]
 801536e:	e7d6      	b.n	801531e <_free_r+0x26>
 8015370:	6825      	ldr	r5, [r4, #0]
 8015372:	1961      	adds	r1, r4, r5
 8015374:	428b      	cmp	r3, r1
 8015376:	bf04      	itt	eq
 8015378:	6819      	ldreq	r1, [r3, #0]
 801537a:	685b      	ldreq	r3, [r3, #4]
 801537c:	6063      	str	r3, [r4, #4]
 801537e:	bf04      	itt	eq
 8015380:	1949      	addeq	r1, r1, r5
 8015382:	6021      	streq	r1, [r4, #0]
 8015384:	6054      	str	r4, [r2, #4]
 8015386:	e7ca      	b.n	801531e <_free_r+0x26>
 8015388:	b003      	add	sp, #12
 801538a:	bd30      	pop	{r4, r5, pc}
 801538c:	240027e4 	.word	0x240027e4

08015390 <_Balloc>:
 8015390:	b570      	push	{r4, r5, r6, lr}
 8015392:	69c6      	ldr	r6, [r0, #28]
 8015394:	4604      	mov	r4, r0
 8015396:	460d      	mov	r5, r1
 8015398:	b976      	cbnz	r6, 80153b8 <_Balloc+0x28>
 801539a:	2010      	movs	r0, #16
 801539c:	f7fe f90a 	bl	80135b4 <malloc>
 80153a0:	4602      	mov	r2, r0
 80153a2:	61e0      	str	r0, [r4, #28]
 80153a4:	b920      	cbnz	r0, 80153b0 <_Balloc+0x20>
 80153a6:	4b18      	ldr	r3, [pc, #96]	; (8015408 <_Balloc+0x78>)
 80153a8:	4818      	ldr	r0, [pc, #96]	; (801540c <_Balloc+0x7c>)
 80153aa:	216b      	movs	r1, #107	; 0x6b
 80153ac:	f001 fd38 	bl	8016e20 <__assert_func>
 80153b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80153b4:	6006      	str	r6, [r0, #0]
 80153b6:	60c6      	str	r6, [r0, #12]
 80153b8:	69e6      	ldr	r6, [r4, #28]
 80153ba:	68f3      	ldr	r3, [r6, #12]
 80153bc:	b183      	cbz	r3, 80153e0 <_Balloc+0x50>
 80153be:	69e3      	ldr	r3, [r4, #28]
 80153c0:	68db      	ldr	r3, [r3, #12]
 80153c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80153c6:	b9b8      	cbnz	r0, 80153f8 <_Balloc+0x68>
 80153c8:	2101      	movs	r1, #1
 80153ca:	fa01 f605 	lsl.w	r6, r1, r5
 80153ce:	1d72      	adds	r2, r6, #5
 80153d0:	0092      	lsls	r2, r2, #2
 80153d2:	4620      	mov	r0, r4
 80153d4:	f001 fd42 	bl	8016e5c <_calloc_r>
 80153d8:	b160      	cbz	r0, 80153f4 <_Balloc+0x64>
 80153da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80153de:	e00e      	b.n	80153fe <_Balloc+0x6e>
 80153e0:	2221      	movs	r2, #33	; 0x21
 80153e2:	2104      	movs	r1, #4
 80153e4:	4620      	mov	r0, r4
 80153e6:	f001 fd39 	bl	8016e5c <_calloc_r>
 80153ea:	69e3      	ldr	r3, [r4, #28]
 80153ec:	60f0      	str	r0, [r6, #12]
 80153ee:	68db      	ldr	r3, [r3, #12]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d1e4      	bne.n	80153be <_Balloc+0x2e>
 80153f4:	2000      	movs	r0, #0
 80153f6:	bd70      	pop	{r4, r5, r6, pc}
 80153f8:	6802      	ldr	r2, [r0, #0]
 80153fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80153fe:	2300      	movs	r3, #0
 8015400:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015404:	e7f7      	b.n	80153f6 <_Balloc+0x66>
 8015406:	bf00      	nop
 8015408:	08017d32 	.word	0x08017d32
 801540c:	08017db2 	.word	0x08017db2

08015410 <_Bfree>:
 8015410:	b570      	push	{r4, r5, r6, lr}
 8015412:	69c6      	ldr	r6, [r0, #28]
 8015414:	4605      	mov	r5, r0
 8015416:	460c      	mov	r4, r1
 8015418:	b976      	cbnz	r6, 8015438 <_Bfree+0x28>
 801541a:	2010      	movs	r0, #16
 801541c:	f7fe f8ca 	bl	80135b4 <malloc>
 8015420:	4602      	mov	r2, r0
 8015422:	61e8      	str	r0, [r5, #28]
 8015424:	b920      	cbnz	r0, 8015430 <_Bfree+0x20>
 8015426:	4b09      	ldr	r3, [pc, #36]	; (801544c <_Bfree+0x3c>)
 8015428:	4809      	ldr	r0, [pc, #36]	; (8015450 <_Bfree+0x40>)
 801542a:	218f      	movs	r1, #143	; 0x8f
 801542c:	f001 fcf8 	bl	8016e20 <__assert_func>
 8015430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015434:	6006      	str	r6, [r0, #0]
 8015436:	60c6      	str	r6, [r0, #12]
 8015438:	b13c      	cbz	r4, 801544a <_Bfree+0x3a>
 801543a:	69eb      	ldr	r3, [r5, #28]
 801543c:	6862      	ldr	r2, [r4, #4]
 801543e:	68db      	ldr	r3, [r3, #12]
 8015440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015444:	6021      	str	r1, [r4, #0]
 8015446:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801544a:	bd70      	pop	{r4, r5, r6, pc}
 801544c:	08017d32 	.word	0x08017d32
 8015450:	08017db2 	.word	0x08017db2

08015454 <__multadd>:
 8015454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015458:	690d      	ldr	r5, [r1, #16]
 801545a:	4607      	mov	r7, r0
 801545c:	460c      	mov	r4, r1
 801545e:	461e      	mov	r6, r3
 8015460:	f101 0c14 	add.w	ip, r1, #20
 8015464:	2000      	movs	r0, #0
 8015466:	f8dc 3000 	ldr.w	r3, [ip]
 801546a:	b299      	uxth	r1, r3
 801546c:	fb02 6101 	mla	r1, r2, r1, r6
 8015470:	0c1e      	lsrs	r6, r3, #16
 8015472:	0c0b      	lsrs	r3, r1, #16
 8015474:	fb02 3306 	mla	r3, r2, r6, r3
 8015478:	b289      	uxth	r1, r1
 801547a:	3001      	adds	r0, #1
 801547c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015480:	4285      	cmp	r5, r0
 8015482:	f84c 1b04 	str.w	r1, [ip], #4
 8015486:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801548a:	dcec      	bgt.n	8015466 <__multadd+0x12>
 801548c:	b30e      	cbz	r6, 80154d2 <__multadd+0x7e>
 801548e:	68a3      	ldr	r3, [r4, #8]
 8015490:	42ab      	cmp	r3, r5
 8015492:	dc19      	bgt.n	80154c8 <__multadd+0x74>
 8015494:	6861      	ldr	r1, [r4, #4]
 8015496:	4638      	mov	r0, r7
 8015498:	3101      	adds	r1, #1
 801549a:	f7ff ff79 	bl	8015390 <_Balloc>
 801549e:	4680      	mov	r8, r0
 80154a0:	b928      	cbnz	r0, 80154ae <__multadd+0x5a>
 80154a2:	4602      	mov	r2, r0
 80154a4:	4b0c      	ldr	r3, [pc, #48]	; (80154d8 <__multadd+0x84>)
 80154a6:	480d      	ldr	r0, [pc, #52]	; (80154dc <__multadd+0x88>)
 80154a8:	21ba      	movs	r1, #186	; 0xba
 80154aa:	f001 fcb9 	bl	8016e20 <__assert_func>
 80154ae:	6922      	ldr	r2, [r4, #16]
 80154b0:	3202      	adds	r2, #2
 80154b2:	f104 010c 	add.w	r1, r4, #12
 80154b6:	0092      	lsls	r2, r2, #2
 80154b8:	300c      	adds	r0, #12
 80154ba:	f001 fc9b 	bl	8016df4 <memcpy>
 80154be:	4621      	mov	r1, r4
 80154c0:	4638      	mov	r0, r7
 80154c2:	f7ff ffa5 	bl	8015410 <_Bfree>
 80154c6:	4644      	mov	r4, r8
 80154c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80154cc:	3501      	adds	r5, #1
 80154ce:	615e      	str	r6, [r3, #20]
 80154d0:	6125      	str	r5, [r4, #16]
 80154d2:	4620      	mov	r0, r4
 80154d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154d8:	08017da1 	.word	0x08017da1
 80154dc:	08017db2 	.word	0x08017db2

080154e0 <__s2b>:
 80154e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154e4:	460c      	mov	r4, r1
 80154e6:	4615      	mov	r5, r2
 80154e8:	461f      	mov	r7, r3
 80154ea:	2209      	movs	r2, #9
 80154ec:	3308      	adds	r3, #8
 80154ee:	4606      	mov	r6, r0
 80154f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80154f4:	2100      	movs	r1, #0
 80154f6:	2201      	movs	r2, #1
 80154f8:	429a      	cmp	r2, r3
 80154fa:	db09      	blt.n	8015510 <__s2b+0x30>
 80154fc:	4630      	mov	r0, r6
 80154fe:	f7ff ff47 	bl	8015390 <_Balloc>
 8015502:	b940      	cbnz	r0, 8015516 <__s2b+0x36>
 8015504:	4602      	mov	r2, r0
 8015506:	4b19      	ldr	r3, [pc, #100]	; (801556c <__s2b+0x8c>)
 8015508:	4819      	ldr	r0, [pc, #100]	; (8015570 <__s2b+0x90>)
 801550a:	21d3      	movs	r1, #211	; 0xd3
 801550c:	f001 fc88 	bl	8016e20 <__assert_func>
 8015510:	0052      	lsls	r2, r2, #1
 8015512:	3101      	adds	r1, #1
 8015514:	e7f0      	b.n	80154f8 <__s2b+0x18>
 8015516:	9b08      	ldr	r3, [sp, #32]
 8015518:	6143      	str	r3, [r0, #20]
 801551a:	2d09      	cmp	r5, #9
 801551c:	f04f 0301 	mov.w	r3, #1
 8015520:	6103      	str	r3, [r0, #16]
 8015522:	dd16      	ble.n	8015552 <__s2b+0x72>
 8015524:	f104 0909 	add.w	r9, r4, #9
 8015528:	46c8      	mov	r8, r9
 801552a:	442c      	add	r4, r5
 801552c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015530:	4601      	mov	r1, r0
 8015532:	3b30      	subs	r3, #48	; 0x30
 8015534:	220a      	movs	r2, #10
 8015536:	4630      	mov	r0, r6
 8015538:	f7ff ff8c 	bl	8015454 <__multadd>
 801553c:	45a0      	cmp	r8, r4
 801553e:	d1f5      	bne.n	801552c <__s2b+0x4c>
 8015540:	f1a5 0408 	sub.w	r4, r5, #8
 8015544:	444c      	add	r4, r9
 8015546:	1b2d      	subs	r5, r5, r4
 8015548:	1963      	adds	r3, r4, r5
 801554a:	42bb      	cmp	r3, r7
 801554c:	db04      	blt.n	8015558 <__s2b+0x78>
 801554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015552:	340a      	adds	r4, #10
 8015554:	2509      	movs	r5, #9
 8015556:	e7f6      	b.n	8015546 <__s2b+0x66>
 8015558:	f814 3b01 	ldrb.w	r3, [r4], #1
 801555c:	4601      	mov	r1, r0
 801555e:	3b30      	subs	r3, #48	; 0x30
 8015560:	220a      	movs	r2, #10
 8015562:	4630      	mov	r0, r6
 8015564:	f7ff ff76 	bl	8015454 <__multadd>
 8015568:	e7ee      	b.n	8015548 <__s2b+0x68>
 801556a:	bf00      	nop
 801556c:	08017da1 	.word	0x08017da1
 8015570:	08017db2 	.word	0x08017db2

08015574 <__hi0bits>:
 8015574:	0c03      	lsrs	r3, r0, #16
 8015576:	041b      	lsls	r3, r3, #16
 8015578:	b9d3      	cbnz	r3, 80155b0 <__hi0bits+0x3c>
 801557a:	0400      	lsls	r0, r0, #16
 801557c:	2310      	movs	r3, #16
 801557e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015582:	bf04      	itt	eq
 8015584:	0200      	lsleq	r0, r0, #8
 8015586:	3308      	addeq	r3, #8
 8015588:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801558c:	bf04      	itt	eq
 801558e:	0100      	lsleq	r0, r0, #4
 8015590:	3304      	addeq	r3, #4
 8015592:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015596:	bf04      	itt	eq
 8015598:	0080      	lsleq	r0, r0, #2
 801559a:	3302      	addeq	r3, #2
 801559c:	2800      	cmp	r0, #0
 801559e:	db05      	blt.n	80155ac <__hi0bits+0x38>
 80155a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80155a4:	f103 0301 	add.w	r3, r3, #1
 80155a8:	bf08      	it	eq
 80155aa:	2320      	moveq	r3, #32
 80155ac:	4618      	mov	r0, r3
 80155ae:	4770      	bx	lr
 80155b0:	2300      	movs	r3, #0
 80155b2:	e7e4      	b.n	801557e <__hi0bits+0xa>

080155b4 <__lo0bits>:
 80155b4:	6803      	ldr	r3, [r0, #0]
 80155b6:	f013 0207 	ands.w	r2, r3, #7
 80155ba:	d00c      	beq.n	80155d6 <__lo0bits+0x22>
 80155bc:	07d9      	lsls	r1, r3, #31
 80155be:	d422      	bmi.n	8015606 <__lo0bits+0x52>
 80155c0:	079a      	lsls	r2, r3, #30
 80155c2:	bf49      	itett	mi
 80155c4:	085b      	lsrmi	r3, r3, #1
 80155c6:	089b      	lsrpl	r3, r3, #2
 80155c8:	6003      	strmi	r3, [r0, #0]
 80155ca:	2201      	movmi	r2, #1
 80155cc:	bf5c      	itt	pl
 80155ce:	6003      	strpl	r3, [r0, #0]
 80155d0:	2202      	movpl	r2, #2
 80155d2:	4610      	mov	r0, r2
 80155d4:	4770      	bx	lr
 80155d6:	b299      	uxth	r1, r3
 80155d8:	b909      	cbnz	r1, 80155de <__lo0bits+0x2a>
 80155da:	0c1b      	lsrs	r3, r3, #16
 80155dc:	2210      	movs	r2, #16
 80155de:	b2d9      	uxtb	r1, r3
 80155e0:	b909      	cbnz	r1, 80155e6 <__lo0bits+0x32>
 80155e2:	3208      	adds	r2, #8
 80155e4:	0a1b      	lsrs	r3, r3, #8
 80155e6:	0719      	lsls	r1, r3, #28
 80155e8:	bf04      	itt	eq
 80155ea:	091b      	lsreq	r3, r3, #4
 80155ec:	3204      	addeq	r2, #4
 80155ee:	0799      	lsls	r1, r3, #30
 80155f0:	bf04      	itt	eq
 80155f2:	089b      	lsreq	r3, r3, #2
 80155f4:	3202      	addeq	r2, #2
 80155f6:	07d9      	lsls	r1, r3, #31
 80155f8:	d403      	bmi.n	8015602 <__lo0bits+0x4e>
 80155fa:	085b      	lsrs	r3, r3, #1
 80155fc:	f102 0201 	add.w	r2, r2, #1
 8015600:	d003      	beq.n	801560a <__lo0bits+0x56>
 8015602:	6003      	str	r3, [r0, #0]
 8015604:	e7e5      	b.n	80155d2 <__lo0bits+0x1e>
 8015606:	2200      	movs	r2, #0
 8015608:	e7e3      	b.n	80155d2 <__lo0bits+0x1e>
 801560a:	2220      	movs	r2, #32
 801560c:	e7e1      	b.n	80155d2 <__lo0bits+0x1e>
	...

08015610 <__i2b>:
 8015610:	b510      	push	{r4, lr}
 8015612:	460c      	mov	r4, r1
 8015614:	2101      	movs	r1, #1
 8015616:	f7ff febb 	bl	8015390 <_Balloc>
 801561a:	4602      	mov	r2, r0
 801561c:	b928      	cbnz	r0, 801562a <__i2b+0x1a>
 801561e:	4b05      	ldr	r3, [pc, #20]	; (8015634 <__i2b+0x24>)
 8015620:	4805      	ldr	r0, [pc, #20]	; (8015638 <__i2b+0x28>)
 8015622:	f240 1145 	movw	r1, #325	; 0x145
 8015626:	f001 fbfb 	bl	8016e20 <__assert_func>
 801562a:	2301      	movs	r3, #1
 801562c:	6144      	str	r4, [r0, #20]
 801562e:	6103      	str	r3, [r0, #16]
 8015630:	bd10      	pop	{r4, pc}
 8015632:	bf00      	nop
 8015634:	08017da1 	.word	0x08017da1
 8015638:	08017db2 	.word	0x08017db2

0801563c <__multiply>:
 801563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015640:	4691      	mov	r9, r2
 8015642:	690a      	ldr	r2, [r1, #16]
 8015644:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015648:	429a      	cmp	r2, r3
 801564a:	bfb8      	it	lt
 801564c:	460b      	movlt	r3, r1
 801564e:	460c      	mov	r4, r1
 8015650:	bfbc      	itt	lt
 8015652:	464c      	movlt	r4, r9
 8015654:	4699      	movlt	r9, r3
 8015656:	6927      	ldr	r7, [r4, #16]
 8015658:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801565c:	68a3      	ldr	r3, [r4, #8]
 801565e:	6861      	ldr	r1, [r4, #4]
 8015660:	eb07 060a 	add.w	r6, r7, sl
 8015664:	42b3      	cmp	r3, r6
 8015666:	b085      	sub	sp, #20
 8015668:	bfb8      	it	lt
 801566a:	3101      	addlt	r1, #1
 801566c:	f7ff fe90 	bl	8015390 <_Balloc>
 8015670:	b930      	cbnz	r0, 8015680 <__multiply+0x44>
 8015672:	4602      	mov	r2, r0
 8015674:	4b44      	ldr	r3, [pc, #272]	; (8015788 <__multiply+0x14c>)
 8015676:	4845      	ldr	r0, [pc, #276]	; (801578c <__multiply+0x150>)
 8015678:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801567c:	f001 fbd0 	bl	8016e20 <__assert_func>
 8015680:	f100 0514 	add.w	r5, r0, #20
 8015684:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015688:	462b      	mov	r3, r5
 801568a:	2200      	movs	r2, #0
 801568c:	4543      	cmp	r3, r8
 801568e:	d321      	bcc.n	80156d4 <__multiply+0x98>
 8015690:	f104 0314 	add.w	r3, r4, #20
 8015694:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015698:	f109 0314 	add.w	r3, r9, #20
 801569c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80156a0:	9202      	str	r2, [sp, #8]
 80156a2:	1b3a      	subs	r2, r7, r4
 80156a4:	3a15      	subs	r2, #21
 80156a6:	f022 0203 	bic.w	r2, r2, #3
 80156aa:	3204      	adds	r2, #4
 80156ac:	f104 0115 	add.w	r1, r4, #21
 80156b0:	428f      	cmp	r7, r1
 80156b2:	bf38      	it	cc
 80156b4:	2204      	movcc	r2, #4
 80156b6:	9201      	str	r2, [sp, #4]
 80156b8:	9a02      	ldr	r2, [sp, #8]
 80156ba:	9303      	str	r3, [sp, #12]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d80c      	bhi.n	80156da <__multiply+0x9e>
 80156c0:	2e00      	cmp	r6, #0
 80156c2:	dd03      	ble.n	80156cc <__multiply+0x90>
 80156c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d05b      	beq.n	8015784 <__multiply+0x148>
 80156cc:	6106      	str	r6, [r0, #16]
 80156ce:	b005      	add	sp, #20
 80156d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156d4:	f843 2b04 	str.w	r2, [r3], #4
 80156d8:	e7d8      	b.n	801568c <__multiply+0x50>
 80156da:	f8b3 a000 	ldrh.w	sl, [r3]
 80156de:	f1ba 0f00 	cmp.w	sl, #0
 80156e2:	d024      	beq.n	801572e <__multiply+0xf2>
 80156e4:	f104 0e14 	add.w	lr, r4, #20
 80156e8:	46a9      	mov	r9, r5
 80156ea:	f04f 0c00 	mov.w	ip, #0
 80156ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80156f2:	f8d9 1000 	ldr.w	r1, [r9]
 80156f6:	fa1f fb82 	uxth.w	fp, r2
 80156fa:	b289      	uxth	r1, r1
 80156fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8015700:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015704:	f8d9 2000 	ldr.w	r2, [r9]
 8015708:	4461      	add	r1, ip
 801570a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801570e:	fb0a c20b 	mla	r2, sl, fp, ip
 8015712:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015716:	b289      	uxth	r1, r1
 8015718:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801571c:	4577      	cmp	r7, lr
 801571e:	f849 1b04 	str.w	r1, [r9], #4
 8015722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015726:	d8e2      	bhi.n	80156ee <__multiply+0xb2>
 8015728:	9a01      	ldr	r2, [sp, #4]
 801572a:	f845 c002 	str.w	ip, [r5, r2]
 801572e:	9a03      	ldr	r2, [sp, #12]
 8015730:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015734:	3304      	adds	r3, #4
 8015736:	f1b9 0f00 	cmp.w	r9, #0
 801573a:	d021      	beq.n	8015780 <__multiply+0x144>
 801573c:	6829      	ldr	r1, [r5, #0]
 801573e:	f104 0c14 	add.w	ip, r4, #20
 8015742:	46ae      	mov	lr, r5
 8015744:	f04f 0a00 	mov.w	sl, #0
 8015748:	f8bc b000 	ldrh.w	fp, [ip]
 801574c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015750:	fb09 220b 	mla	r2, r9, fp, r2
 8015754:	4452      	add	r2, sl
 8015756:	b289      	uxth	r1, r1
 8015758:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801575c:	f84e 1b04 	str.w	r1, [lr], #4
 8015760:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015764:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015768:	f8be 1000 	ldrh.w	r1, [lr]
 801576c:	fb09 110a 	mla	r1, r9, sl, r1
 8015770:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8015774:	4567      	cmp	r7, ip
 8015776:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801577a:	d8e5      	bhi.n	8015748 <__multiply+0x10c>
 801577c:	9a01      	ldr	r2, [sp, #4]
 801577e:	50a9      	str	r1, [r5, r2]
 8015780:	3504      	adds	r5, #4
 8015782:	e799      	b.n	80156b8 <__multiply+0x7c>
 8015784:	3e01      	subs	r6, #1
 8015786:	e79b      	b.n	80156c0 <__multiply+0x84>
 8015788:	08017da1 	.word	0x08017da1
 801578c:	08017db2 	.word	0x08017db2

08015790 <__pow5mult>:
 8015790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015794:	4615      	mov	r5, r2
 8015796:	f012 0203 	ands.w	r2, r2, #3
 801579a:	4606      	mov	r6, r0
 801579c:	460f      	mov	r7, r1
 801579e:	d007      	beq.n	80157b0 <__pow5mult+0x20>
 80157a0:	4c25      	ldr	r4, [pc, #148]	; (8015838 <__pow5mult+0xa8>)
 80157a2:	3a01      	subs	r2, #1
 80157a4:	2300      	movs	r3, #0
 80157a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80157aa:	f7ff fe53 	bl	8015454 <__multadd>
 80157ae:	4607      	mov	r7, r0
 80157b0:	10ad      	asrs	r5, r5, #2
 80157b2:	d03d      	beq.n	8015830 <__pow5mult+0xa0>
 80157b4:	69f4      	ldr	r4, [r6, #28]
 80157b6:	b97c      	cbnz	r4, 80157d8 <__pow5mult+0x48>
 80157b8:	2010      	movs	r0, #16
 80157ba:	f7fd fefb 	bl	80135b4 <malloc>
 80157be:	4602      	mov	r2, r0
 80157c0:	61f0      	str	r0, [r6, #28]
 80157c2:	b928      	cbnz	r0, 80157d0 <__pow5mult+0x40>
 80157c4:	4b1d      	ldr	r3, [pc, #116]	; (801583c <__pow5mult+0xac>)
 80157c6:	481e      	ldr	r0, [pc, #120]	; (8015840 <__pow5mult+0xb0>)
 80157c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80157cc:	f001 fb28 	bl	8016e20 <__assert_func>
 80157d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80157d4:	6004      	str	r4, [r0, #0]
 80157d6:	60c4      	str	r4, [r0, #12]
 80157d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80157dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80157e0:	b94c      	cbnz	r4, 80157f6 <__pow5mult+0x66>
 80157e2:	f240 2171 	movw	r1, #625	; 0x271
 80157e6:	4630      	mov	r0, r6
 80157e8:	f7ff ff12 	bl	8015610 <__i2b>
 80157ec:	2300      	movs	r3, #0
 80157ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80157f2:	4604      	mov	r4, r0
 80157f4:	6003      	str	r3, [r0, #0]
 80157f6:	f04f 0900 	mov.w	r9, #0
 80157fa:	07eb      	lsls	r3, r5, #31
 80157fc:	d50a      	bpl.n	8015814 <__pow5mult+0x84>
 80157fe:	4639      	mov	r1, r7
 8015800:	4622      	mov	r2, r4
 8015802:	4630      	mov	r0, r6
 8015804:	f7ff ff1a 	bl	801563c <__multiply>
 8015808:	4639      	mov	r1, r7
 801580a:	4680      	mov	r8, r0
 801580c:	4630      	mov	r0, r6
 801580e:	f7ff fdff 	bl	8015410 <_Bfree>
 8015812:	4647      	mov	r7, r8
 8015814:	106d      	asrs	r5, r5, #1
 8015816:	d00b      	beq.n	8015830 <__pow5mult+0xa0>
 8015818:	6820      	ldr	r0, [r4, #0]
 801581a:	b938      	cbnz	r0, 801582c <__pow5mult+0x9c>
 801581c:	4622      	mov	r2, r4
 801581e:	4621      	mov	r1, r4
 8015820:	4630      	mov	r0, r6
 8015822:	f7ff ff0b 	bl	801563c <__multiply>
 8015826:	6020      	str	r0, [r4, #0]
 8015828:	f8c0 9000 	str.w	r9, [r0]
 801582c:	4604      	mov	r4, r0
 801582e:	e7e4      	b.n	80157fa <__pow5mult+0x6a>
 8015830:	4638      	mov	r0, r7
 8015832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015836:	bf00      	nop
 8015838:	08017f00 	.word	0x08017f00
 801583c:	08017d32 	.word	0x08017d32
 8015840:	08017db2 	.word	0x08017db2

08015844 <__lshift>:
 8015844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015848:	460c      	mov	r4, r1
 801584a:	6849      	ldr	r1, [r1, #4]
 801584c:	6923      	ldr	r3, [r4, #16]
 801584e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015852:	68a3      	ldr	r3, [r4, #8]
 8015854:	4607      	mov	r7, r0
 8015856:	4691      	mov	r9, r2
 8015858:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801585c:	f108 0601 	add.w	r6, r8, #1
 8015860:	42b3      	cmp	r3, r6
 8015862:	db0b      	blt.n	801587c <__lshift+0x38>
 8015864:	4638      	mov	r0, r7
 8015866:	f7ff fd93 	bl	8015390 <_Balloc>
 801586a:	4605      	mov	r5, r0
 801586c:	b948      	cbnz	r0, 8015882 <__lshift+0x3e>
 801586e:	4602      	mov	r2, r0
 8015870:	4b28      	ldr	r3, [pc, #160]	; (8015914 <__lshift+0xd0>)
 8015872:	4829      	ldr	r0, [pc, #164]	; (8015918 <__lshift+0xd4>)
 8015874:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015878:	f001 fad2 	bl	8016e20 <__assert_func>
 801587c:	3101      	adds	r1, #1
 801587e:	005b      	lsls	r3, r3, #1
 8015880:	e7ee      	b.n	8015860 <__lshift+0x1c>
 8015882:	2300      	movs	r3, #0
 8015884:	f100 0114 	add.w	r1, r0, #20
 8015888:	f100 0210 	add.w	r2, r0, #16
 801588c:	4618      	mov	r0, r3
 801588e:	4553      	cmp	r3, sl
 8015890:	db33      	blt.n	80158fa <__lshift+0xb6>
 8015892:	6920      	ldr	r0, [r4, #16]
 8015894:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015898:	f104 0314 	add.w	r3, r4, #20
 801589c:	f019 091f 	ands.w	r9, r9, #31
 80158a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80158a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80158a8:	d02b      	beq.n	8015902 <__lshift+0xbe>
 80158aa:	f1c9 0e20 	rsb	lr, r9, #32
 80158ae:	468a      	mov	sl, r1
 80158b0:	2200      	movs	r2, #0
 80158b2:	6818      	ldr	r0, [r3, #0]
 80158b4:	fa00 f009 	lsl.w	r0, r0, r9
 80158b8:	4310      	orrs	r0, r2
 80158ba:	f84a 0b04 	str.w	r0, [sl], #4
 80158be:	f853 2b04 	ldr.w	r2, [r3], #4
 80158c2:	459c      	cmp	ip, r3
 80158c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80158c8:	d8f3      	bhi.n	80158b2 <__lshift+0x6e>
 80158ca:	ebac 0304 	sub.w	r3, ip, r4
 80158ce:	3b15      	subs	r3, #21
 80158d0:	f023 0303 	bic.w	r3, r3, #3
 80158d4:	3304      	adds	r3, #4
 80158d6:	f104 0015 	add.w	r0, r4, #21
 80158da:	4584      	cmp	ip, r0
 80158dc:	bf38      	it	cc
 80158de:	2304      	movcc	r3, #4
 80158e0:	50ca      	str	r2, [r1, r3]
 80158e2:	b10a      	cbz	r2, 80158e8 <__lshift+0xa4>
 80158e4:	f108 0602 	add.w	r6, r8, #2
 80158e8:	3e01      	subs	r6, #1
 80158ea:	4638      	mov	r0, r7
 80158ec:	612e      	str	r6, [r5, #16]
 80158ee:	4621      	mov	r1, r4
 80158f0:	f7ff fd8e 	bl	8015410 <_Bfree>
 80158f4:	4628      	mov	r0, r5
 80158f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80158fe:	3301      	adds	r3, #1
 8015900:	e7c5      	b.n	801588e <__lshift+0x4a>
 8015902:	3904      	subs	r1, #4
 8015904:	f853 2b04 	ldr.w	r2, [r3], #4
 8015908:	f841 2f04 	str.w	r2, [r1, #4]!
 801590c:	459c      	cmp	ip, r3
 801590e:	d8f9      	bhi.n	8015904 <__lshift+0xc0>
 8015910:	e7ea      	b.n	80158e8 <__lshift+0xa4>
 8015912:	bf00      	nop
 8015914:	08017da1 	.word	0x08017da1
 8015918:	08017db2 	.word	0x08017db2

0801591c <__mcmp>:
 801591c:	b530      	push	{r4, r5, lr}
 801591e:	6902      	ldr	r2, [r0, #16]
 8015920:	690c      	ldr	r4, [r1, #16]
 8015922:	1b12      	subs	r2, r2, r4
 8015924:	d10e      	bne.n	8015944 <__mcmp+0x28>
 8015926:	f100 0314 	add.w	r3, r0, #20
 801592a:	3114      	adds	r1, #20
 801592c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015930:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015934:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015938:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801593c:	42a5      	cmp	r5, r4
 801593e:	d003      	beq.n	8015948 <__mcmp+0x2c>
 8015940:	d305      	bcc.n	801594e <__mcmp+0x32>
 8015942:	2201      	movs	r2, #1
 8015944:	4610      	mov	r0, r2
 8015946:	bd30      	pop	{r4, r5, pc}
 8015948:	4283      	cmp	r3, r0
 801594a:	d3f3      	bcc.n	8015934 <__mcmp+0x18>
 801594c:	e7fa      	b.n	8015944 <__mcmp+0x28>
 801594e:	f04f 32ff 	mov.w	r2, #4294967295
 8015952:	e7f7      	b.n	8015944 <__mcmp+0x28>

08015954 <__mdiff>:
 8015954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015958:	460c      	mov	r4, r1
 801595a:	4606      	mov	r6, r0
 801595c:	4611      	mov	r1, r2
 801595e:	4620      	mov	r0, r4
 8015960:	4690      	mov	r8, r2
 8015962:	f7ff ffdb 	bl	801591c <__mcmp>
 8015966:	1e05      	subs	r5, r0, #0
 8015968:	d110      	bne.n	801598c <__mdiff+0x38>
 801596a:	4629      	mov	r1, r5
 801596c:	4630      	mov	r0, r6
 801596e:	f7ff fd0f 	bl	8015390 <_Balloc>
 8015972:	b930      	cbnz	r0, 8015982 <__mdiff+0x2e>
 8015974:	4b3a      	ldr	r3, [pc, #232]	; (8015a60 <__mdiff+0x10c>)
 8015976:	4602      	mov	r2, r0
 8015978:	f240 2137 	movw	r1, #567	; 0x237
 801597c:	4839      	ldr	r0, [pc, #228]	; (8015a64 <__mdiff+0x110>)
 801597e:	f001 fa4f 	bl	8016e20 <__assert_func>
 8015982:	2301      	movs	r3, #1
 8015984:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015988:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801598c:	bfa4      	itt	ge
 801598e:	4643      	movge	r3, r8
 8015990:	46a0      	movge	r8, r4
 8015992:	4630      	mov	r0, r6
 8015994:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015998:	bfa6      	itte	ge
 801599a:	461c      	movge	r4, r3
 801599c:	2500      	movge	r5, #0
 801599e:	2501      	movlt	r5, #1
 80159a0:	f7ff fcf6 	bl	8015390 <_Balloc>
 80159a4:	b920      	cbnz	r0, 80159b0 <__mdiff+0x5c>
 80159a6:	4b2e      	ldr	r3, [pc, #184]	; (8015a60 <__mdiff+0x10c>)
 80159a8:	4602      	mov	r2, r0
 80159aa:	f240 2145 	movw	r1, #581	; 0x245
 80159ae:	e7e5      	b.n	801597c <__mdiff+0x28>
 80159b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80159b4:	6926      	ldr	r6, [r4, #16]
 80159b6:	60c5      	str	r5, [r0, #12]
 80159b8:	f104 0914 	add.w	r9, r4, #20
 80159bc:	f108 0514 	add.w	r5, r8, #20
 80159c0:	f100 0e14 	add.w	lr, r0, #20
 80159c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80159c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80159cc:	f108 0210 	add.w	r2, r8, #16
 80159d0:	46f2      	mov	sl, lr
 80159d2:	2100      	movs	r1, #0
 80159d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80159d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80159dc:	fa11 f88b 	uxtah	r8, r1, fp
 80159e0:	b299      	uxth	r1, r3
 80159e2:	0c1b      	lsrs	r3, r3, #16
 80159e4:	eba8 0801 	sub.w	r8, r8, r1
 80159e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80159ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80159f0:	fa1f f888 	uxth.w	r8, r8
 80159f4:	1419      	asrs	r1, r3, #16
 80159f6:	454e      	cmp	r6, r9
 80159f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80159fc:	f84a 3b04 	str.w	r3, [sl], #4
 8015a00:	d8e8      	bhi.n	80159d4 <__mdiff+0x80>
 8015a02:	1b33      	subs	r3, r6, r4
 8015a04:	3b15      	subs	r3, #21
 8015a06:	f023 0303 	bic.w	r3, r3, #3
 8015a0a:	3304      	adds	r3, #4
 8015a0c:	3415      	adds	r4, #21
 8015a0e:	42a6      	cmp	r6, r4
 8015a10:	bf38      	it	cc
 8015a12:	2304      	movcc	r3, #4
 8015a14:	441d      	add	r5, r3
 8015a16:	4473      	add	r3, lr
 8015a18:	469e      	mov	lr, r3
 8015a1a:	462e      	mov	r6, r5
 8015a1c:	4566      	cmp	r6, ip
 8015a1e:	d30e      	bcc.n	8015a3e <__mdiff+0xea>
 8015a20:	f10c 0203 	add.w	r2, ip, #3
 8015a24:	1b52      	subs	r2, r2, r5
 8015a26:	f022 0203 	bic.w	r2, r2, #3
 8015a2a:	3d03      	subs	r5, #3
 8015a2c:	45ac      	cmp	ip, r5
 8015a2e:	bf38      	it	cc
 8015a30:	2200      	movcc	r2, #0
 8015a32:	4413      	add	r3, r2
 8015a34:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015a38:	b17a      	cbz	r2, 8015a5a <__mdiff+0x106>
 8015a3a:	6107      	str	r7, [r0, #16]
 8015a3c:	e7a4      	b.n	8015988 <__mdiff+0x34>
 8015a3e:	f856 8b04 	ldr.w	r8, [r6], #4
 8015a42:	fa11 f288 	uxtah	r2, r1, r8
 8015a46:	1414      	asrs	r4, r2, #16
 8015a48:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015a4c:	b292      	uxth	r2, r2
 8015a4e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015a52:	f84e 2b04 	str.w	r2, [lr], #4
 8015a56:	1421      	asrs	r1, r4, #16
 8015a58:	e7e0      	b.n	8015a1c <__mdiff+0xc8>
 8015a5a:	3f01      	subs	r7, #1
 8015a5c:	e7ea      	b.n	8015a34 <__mdiff+0xe0>
 8015a5e:	bf00      	nop
 8015a60:	08017da1 	.word	0x08017da1
 8015a64:	08017db2 	.word	0x08017db2

08015a68 <__ulp>:
 8015a68:	b082      	sub	sp, #8
 8015a6a:	ed8d 0b00 	vstr	d0, [sp]
 8015a6e:	9a01      	ldr	r2, [sp, #4]
 8015a70:	4b0f      	ldr	r3, [pc, #60]	; (8015ab0 <__ulp+0x48>)
 8015a72:	4013      	ands	r3, r2
 8015a74:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	dc08      	bgt.n	8015a8e <__ulp+0x26>
 8015a7c:	425b      	negs	r3, r3
 8015a7e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8015a82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015a86:	da04      	bge.n	8015a92 <__ulp+0x2a>
 8015a88:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015a8c:	4113      	asrs	r3, r2
 8015a8e:	2200      	movs	r2, #0
 8015a90:	e008      	b.n	8015aa4 <__ulp+0x3c>
 8015a92:	f1a2 0314 	sub.w	r3, r2, #20
 8015a96:	2b1e      	cmp	r3, #30
 8015a98:	bfda      	itte	le
 8015a9a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8015a9e:	40da      	lsrle	r2, r3
 8015aa0:	2201      	movgt	r2, #1
 8015aa2:	2300      	movs	r3, #0
 8015aa4:	4619      	mov	r1, r3
 8015aa6:	4610      	mov	r0, r2
 8015aa8:	ec41 0b10 	vmov	d0, r0, r1
 8015aac:	b002      	add	sp, #8
 8015aae:	4770      	bx	lr
 8015ab0:	7ff00000 	.word	0x7ff00000

08015ab4 <__b2d>:
 8015ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab8:	6906      	ldr	r6, [r0, #16]
 8015aba:	f100 0814 	add.w	r8, r0, #20
 8015abe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015ac2:	1f37      	subs	r7, r6, #4
 8015ac4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015ac8:	4610      	mov	r0, r2
 8015aca:	f7ff fd53 	bl	8015574 <__hi0bits>
 8015ace:	f1c0 0320 	rsb	r3, r0, #32
 8015ad2:	280a      	cmp	r0, #10
 8015ad4:	600b      	str	r3, [r1, #0]
 8015ad6:	491b      	ldr	r1, [pc, #108]	; (8015b44 <__b2d+0x90>)
 8015ad8:	dc15      	bgt.n	8015b06 <__b2d+0x52>
 8015ada:	f1c0 0c0b 	rsb	ip, r0, #11
 8015ade:	fa22 f30c 	lsr.w	r3, r2, ip
 8015ae2:	45b8      	cmp	r8, r7
 8015ae4:	ea43 0501 	orr.w	r5, r3, r1
 8015ae8:	bf34      	ite	cc
 8015aea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015aee:	2300      	movcs	r3, #0
 8015af0:	3015      	adds	r0, #21
 8015af2:	fa02 f000 	lsl.w	r0, r2, r0
 8015af6:	fa23 f30c 	lsr.w	r3, r3, ip
 8015afa:	4303      	orrs	r3, r0
 8015afc:	461c      	mov	r4, r3
 8015afe:	ec45 4b10 	vmov	d0, r4, r5
 8015b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b06:	45b8      	cmp	r8, r7
 8015b08:	bf3a      	itte	cc
 8015b0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015b0e:	f1a6 0708 	subcc.w	r7, r6, #8
 8015b12:	2300      	movcs	r3, #0
 8015b14:	380b      	subs	r0, #11
 8015b16:	d012      	beq.n	8015b3e <__b2d+0x8a>
 8015b18:	f1c0 0120 	rsb	r1, r0, #32
 8015b1c:	fa23 f401 	lsr.w	r4, r3, r1
 8015b20:	4082      	lsls	r2, r0
 8015b22:	4322      	orrs	r2, r4
 8015b24:	4547      	cmp	r7, r8
 8015b26:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8015b2a:	bf8c      	ite	hi
 8015b2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015b30:	2200      	movls	r2, #0
 8015b32:	4083      	lsls	r3, r0
 8015b34:	40ca      	lsrs	r2, r1
 8015b36:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015b3a:	4313      	orrs	r3, r2
 8015b3c:	e7de      	b.n	8015afc <__b2d+0x48>
 8015b3e:	ea42 0501 	orr.w	r5, r2, r1
 8015b42:	e7db      	b.n	8015afc <__b2d+0x48>
 8015b44:	3ff00000 	.word	0x3ff00000

08015b48 <__d2b>:
 8015b48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015b4c:	460f      	mov	r7, r1
 8015b4e:	2101      	movs	r1, #1
 8015b50:	ec59 8b10 	vmov	r8, r9, d0
 8015b54:	4616      	mov	r6, r2
 8015b56:	f7ff fc1b 	bl	8015390 <_Balloc>
 8015b5a:	4604      	mov	r4, r0
 8015b5c:	b930      	cbnz	r0, 8015b6c <__d2b+0x24>
 8015b5e:	4602      	mov	r2, r0
 8015b60:	4b24      	ldr	r3, [pc, #144]	; (8015bf4 <__d2b+0xac>)
 8015b62:	4825      	ldr	r0, [pc, #148]	; (8015bf8 <__d2b+0xb0>)
 8015b64:	f240 310f 	movw	r1, #783	; 0x30f
 8015b68:	f001 f95a 	bl	8016e20 <__assert_func>
 8015b6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015b70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015b74:	bb2d      	cbnz	r5, 8015bc2 <__d2b+0x7a>
 8015b76:	9301      	str	r3, [sp, #4]
 8015b78:	f1b8 0300 	subs.w	r3, r8, #0
 8015b7c:	d026      	beq.n	8015bcc <__d2b+0x84>
 8015b7e:	4668      	mov	r0, sp
 8015b80:	9300      	str	r3, [sp, #0]
 8015b82:	f7ff fd17 	bl	80155b4 <__lo0bits>
 8015b86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015b8a:	b1e8      	cbz	r0, 8015bc8 <__d2b+0x80>
 8015b8c:	f1c0 0320 	rsb	r3, r0, #32
 8015b90:	fa02 f303 	lsl.w	r3, r2, r3
 8015b94:	430b      	orrs	r3, r1
 8015b96:	40c2      	lsrs	r2, r0
 8015b98:	6163      	str	r3, [r4, #20]
 8015b9a:	9201      	str	r2, [sp, #4]
 8015b9c:	9b01      	ldr	r3, [sp, #4]
 8015b9e:	61a3      	str	r3, [r4, #24]
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	bf14      	ite	ne
 8015ba4:	2202      	movne	r2, #2
 8015ba6:	2201      	moveq	r2, #1
 8015ba8:	6122      	str	r2, [r4, #16]
 8015baa:	b1bd      	cbz	r5, 8015bdc <__d2b+0x94>
 8015bac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015bb0:	4405      	add	r5, r0
 8015bb2:	603d      	str	r5, [r7, #0]
 8015bb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015bb8:	6030      	str	r0, [r6, #0]
 8015bba:	4620      	mov	r0, r4
 8015bbc:	b003      	add	sp, #12
 8015bbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015bc6:	e7d6      	b.n	8015b76 <__d2b+0x2e>
 8015bc8:	6161      	str	r1, [r4, #20]
 8015bca:	e7e7      	b.n	8015b9c <__d2b+0x54>
 8015bcc:	a801      	add	r0, sp, #4
 8015bce:	f7ff fcf1 	bl	80155b4 <__lo0bits>
 8015bd2:	9b01      	ldr	r3, [sp, #4]
 8015bd4:	6163      	str	r3, [r4, #20]
 8015bd6:	3020      	adds	r0, #32
 8015bd8:	2201      	movs	r2, #1
 8015bda:	e7e5      	b.n	8015ba8 <__d2b+0x60>
 8015bdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015be0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015be4:	6038      	str	r0, [r7, #0]
 8015be6:	6918      	ldr	r0, [r3, #16]
 8015be8:	f7ff fcc4 	bl	8015574 <__hi0bits>
 8015bec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015bf0:	e7e2      	b.n	8015bb8 <__d2b+0x70>
 8015bf2:	bf00      	nop
 8015bf4:	08017da1 	.word	0x08017da1
 8015bf8:	08017db2 	.word	0x08017db2

08015bfc <__ratio>:
 8015bfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c00:	4688      	mov	r8, r1
 8015c02:	4669      	mov	r1, sp
 8015c04:	4681      	mov	r9, r0
 8015c06:	f7ff ff55 	bl	8015ab4 <__b2d>
 8015c0a:	a901      	add	r1, sp, #4
 8015c0c:	4640      	mov	r0, r8
 8015c0e:	ec55 4b10 	vmov	r4, r5, d0
 8015c12:	ee10 aa10 	vmov	sl, s0
 8015c16:	f7ff ff4d 	bl	8015ab4 <__b2d>
 8015c1a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015c1e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8015c22:	1ad2      	subs	r2, r2, r3
 8015c24:	e9dd 3100 	ldrd	r3, r1, [sp]
 8015c28:	1a5b      	subs	r3, r3, r1
 8015c2a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8015c2e:	ec57 6b10 	vmov	r6, r7, d0
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	bfd6      	itet	le
 8015c36:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015c3a:	462a      	movgt	r2, r5
 8015c3c:	463a      	movle	r2, r7
 8015c3e:	46ab      	mov	fp, r5
 8015c40:	bfd6      	itet	le
 8015c42:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8015c46:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8015c4a:	ee00 3a90 	vmovle	s1, r3
 8015c4e:	ec4b ab17 	vmov	d7, sl, fp
 8015c52:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8015c56:	b003      	add	sp, #12
 8015c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c5c <__copybits>:
 8015c5c:	3901      	subs	r1, #1
 8015c5e:	b570      	push	{r4, r5, r6, lr}
 8015c60:	1149      	asrs	r1, r1, #5
 8015c62:	6914      	ldr	r4, [r2, #16]
 8015c64:	3101      	adds	r1, #1
 8015c66:	f102 0314 	add.w	r3, r2, #20
 8015c6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015c6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015c72:	1f05      	subs	r5, r0, #4
 8015c74:	42a3      	cmp	r3, r4
 8015c76:	d30c      	bcc.n	8015c92 <__copybits+0x36>
 8015c78:	1aa3      	subs	r3, r4, r2
 8015c7a:	3b11      	subs	r3, #17
 8015c7c:	f023 0303 	bic.w	r3, r3, #3
 8015c80:	3211      	adds	r2, #17
 8015c82:	42a2      	cmp	r2, r4
 8015c84:	bf88      	it	hi
 8015c86:	2300      	movhi	r3, #0
 8015c88:	4418      	add	r0, r3
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	4288      	cmp	r0, r1
 8015c8e:	d305      	bcc.n	8015c9c <__copybits+0x40>
 8015c90:	bd70      	pop	{r4, r5, r6, pc}
 8015c92:	f853 6b04 	ldr.w	r6, [r3], #4
 8015c96:	f845 6f04 	str.w	r6, [r5, #4]!
 8015c9a:	e7eb      	b.n	8015c74 <__copybits+0x18>
 8015c9c:	f840 3b04 	str.w	r3, [r0], #4
 8015ca0:	e7f4      	b.n	8015c8c <__copybits+0x30>

08015ca2 <__any_on>:
 8015ca2:	f100 0214 	add.w	r2, r0, #20
 8015ca6:	6900      	ldr	r0, [r0, #16]
 8015ca8:	114b      	asrs	r3, r1, #5
 8015caa:	4298      	cmp	r0, r3
 8015cac:	b510      	push	{r4, lr}
 8015cae:	db11      	blt.n	8015cd4 <__any_on+0x32>
 8015cb0:	dd0a      	ble.n	8015cc8 <__any_on+0x26>
 8015cb2:	f011 011f 	ands.w	r1, r1, #31
 8015cb6:	d007      	beq.n	8015cc8 <__any_on+0x26>
 8015cb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015cbc:	fa24 f001 	lsr.w	r0, r4, r1
 8015cc0:	fa00 f101 	lsl.w	r1, r0, r1
 8015cc4:	428c      	cmp	r4, r1
 8015cc6:	d10b      	bne.n	8015ce0 <__any_on+0x3e>
 8015cc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015ccc:	4293      	cmp	r3, r2
 8015cce:	d803      	bhi.n	8015cd8 <__any_on+0x36>
 8015cd0:	2000      	movs	r0, #0
 8015cd2:	bd10      	pop	{r4, pc}
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	e7f7      	b.n	8015cc8 <__any_on+0x26>
 8015cd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015cdc:	2900      	cmp	r1, #0
 8015cde:	d0f5      	beq.n	8015ccc <__any_on+0x2a>
 8015ce0:	2001      	movs	r0, #1
 8015ce2:	e7f6      	b.n	8015cd2 <__any_on+0x30>

08015ce4 <sulp>:
 8015ce4:	b570      	push	{r4, r5, r6, lr}
 8015ce6:	4604      	mov	r4, r0
 8015ce8:	460d      	mov	r5, r1
 8015cea:	4616      	mov	r6, r2
 8015cec:	ec45 4b10 	vmov	d0, r4, r5
 8015cf0:	f7ff feba 	bl	8015a68 <__ulp>
 8015cf4:	b17e      	cbz	r6, 8015d16 <sulp+0x32>
 8015cf6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015cfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	dd09      	ble.n	8015d16 <sulp+0x32>
 8015d02:	051b      	lsls	r3, r3, #20
 8015d04:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8015d08:	2000      	movs	r0, #0
 8015d0a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8015d0e:	ec41 0b17 	vmov	d7, r0, r1
 8015d12:	ee20 0b07 	vmul.f64	d0, d0, d7
 8015d16:	bd70      	pop	{r4, r5, r6, pc}

08015d18 <_strtod_l>:
 8015d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d1c:	ed2d 8b0e 	vpush	{d8-d14}
 8015d20:	b097      	sub	sp, #92	; 0x5c
 8015d22:	4604      	mov	r4, r0
 8015d24:	920d      	str	r2, [sp, #52]	; 0x34
 8015d26:	2200      	movs	r2, #0
 8015d28:	9212      	str	r2, [sp, #72]	; 0x48
 8015d2a:	468a      	mov	sl, r1
 8015d2c:	f04f 0800 	mov.w	r8, #0
 8015d30:	f04f 0900 	mov.w	r9, #0
 8015d34:	460a      	mov	r2, r1
 8015d36:	9211      	str	r2, [sp, #68]	; 0x44
 8015d38:	7811      	ldrb	r1, [r2, #0]
 8015d3a:	292b      	cmp	r1, #43	; 0x2b
 8015d3c:	d04c      	beq.n	8015dd8 <_strtod_l+0xc0>
 8015d3e:	d839      	bhi.n	8015db4 <_strtod_l+0x9c>
 8015d40:	290d      	cmp	r1, #13
 8015d42:	d833      	bhi.n	8015dac <_strtod_l+0x94>
 8015d44:	2908      	cmp	r1, #8
 8015d46:	d833      	bhi.n	8015db0 <_strtod_l+0x98>
 8015d48:	2900      	cmp	r1, #0
 8015d4a:	d03c      	beq.n	8015dc6 <_strtod_l+0xae>
 8015d4c:	2200      	movs	r2, #0
 8015d4e:	9208      	str	r2, [sp, #32]
 8015d50:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8015d52:	7832      	ldrb	r2, [r6, #0]
 8015d54:	2a30      	cmp	r2, #48	; 0x30
 8015d56:	f040 80b8 	bne.w	8015eca <_strtod_l+0x1b2>
 8015d5a:	7872      	ldrb	r2, [r6, #1]
 8015d5c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015d60:	2a58      	cmp	r2, #88	; 0x58
 8015d62:	d170      	bne.n	8015e46 <_strtod_l+0x12e>
 8015d64:	9302      	str	r3, [sp, #8]
 8015d66:	9b08      	ldr	r3, [sp, #32]
 8015d68:	9301      	str	r3, [sp, #4]
 8015d6a:	ab12      	add	r3, sp, #72	; 0x48
 8015d6c:	9300      	str	r3, [sp, #0]
 8015d6e:	4a91      	ldr	r2, [pc, #580]	; (8015fb4 <_strtod_l+0x29c>)
 8015d70:	ab13      	add	r3, sp, #76	; 0x4c
 8015d72:	a911      	add	r1, sp, #68	; 0x44
 8015d74:	4620      	mov	r0, r4
 8015d76:	f001 f8ef 	bl	8016f58 <__gethex>
 8015d7a:	f010 070f 	ands.w	r7, r0, #15
 8015d7e:	4605      	mov	r5, r0
 8015d80:	d005      	beq.n	8015d8e <_strtod_l+0x76>
 8015d82:	2f06      	cmp	r7, #6
 8015d84:	d12a      	bne.n	8015ddc <_strtod_l+0xc4>
 8015d86:	3601      	adds	r6, #1
 8015d88:	2300      	movs	r3, #0
 8015d8a:	9611      	str	r6, [sp, #68]	; 0x44
 8015d8c:	9308      	str	r3, [sp, #32]
 8015d8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	f040 8555 	bne.w	8016840 <_strtod_l+0xb28>
 8015d96:	9b08      	ldr	r3, [sp, #32]
 8015d98:	ec49 8b10 	vmov	d0, r8, r9
 8015d9c:	b1cb      	cbz	r3, 8015dd2 <_strtod_l+0xba>
 8015d9e:	eeb1 0b40 	vneg.f64	d0, d0
 8015da2:	b017      	add	sp, #92	; 0x5c
 8015da4:	ecbd 8b0e 	vpop	{d8-d14}
 8015da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dac:	2920      	cmp	r1, #32
 8015dae:	d1cd      	bne.n	8015d4c <_strtod_l+0x34>
 8015db0:	3201      	adds	r2, #1
 8015db2:	e7c0      	b.n	8015d36 <_strtod_l+0x1e>
 8015db4:	292d      	cmp	r1, #45	; 0x2d
 8015db6:	d1c9      	bne.n	8015d4c <_strtod_l+0x34>
 8015db8:	2101      	movs	r1, #1
 8015dba:	9108      	str	r1, [sp, #32]
 8015dbc:	1c51      	adds	r1, r2, #1
 8015dbe:	9111      	str	r1, [sp, #68]	; 0x44
 8015dc0:	7852      	ldrb	r2, [r2, #1]
 8015dc2:	2a00      	cmp	r2, #0
 8015dc4:	d1c4      	bne.n	8015d50 <_strtod_l+0x38>
 8015dc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015dc8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	f040 8535 	bne.w	801683c <_strtod_l+0xb24>
 8015dd2:	ec49 8b10 	vmov	d0, r8, r9
 8015dd6:	e7e4      	b.n	8015da2 <_strtod_l+0x8a>
 8015dd8:	2100      	movs	r1, #0
 8015dda:	e7ee      	b.n	8015dba <_strtod_l+0xa2>
 8015ddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015dde:	b13a      	cbz	r2, 8015df0 <_strtod_l+0xd8>
 8015de0:	2135      	movs	r1, #53	; 0x35
 8015de2:	a814      	add	r0, sp, #80	; 0x50
 8015de4:	f7ff ff3a 	bl	8015c5c <__copybits>
 8015de8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8015dea:	4620      	mov	r0, r4
 8015dec:	f7ff fb10 	bl	8015410 <_Bfree>
 8015df0:	1e7b      	subs	r3, r7, #1
 8015df2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015df4:	2b04      	cmp	r3, #4
 8015df6:	d806      	bhi.n	8015e06 <_strtod_l+0xee>
 8015df8:	e8df f003 	tbb	[pc, r3]
 8015dfc:	201d0314 	.word	0x201d0314
 8015e00:	14          	.byte	0x14
 8015e01:	00          	.byte	0x00
 8015e02:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8015e06:	05eb      	lsls	r3, r5, #23
 8015e08:	bf48      	it	mi
 8015e0a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8015e0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015e12:	0d1b      	lsrs	r3, r3, #20
 8015e14:	051b      	lsls	r3, r3, #20
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d1b9      	bne.n	8015d8e <_strtod_l+0x76>
 8015e1a:	f7fe fc47 	bl	80146ac <__errno>
 8015e1e:	2322      	movs	r3, #34	; 0x22
 8015e20:	6003      	str	r3, [r0, #0]
 8015e22:	e7b4      	b.n	8015d8e <_strtod_l+0x76>
 8015e24:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8015e28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015e2c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015e30:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015e34:	e7e7      	b.n	8015e06 <_strtod_l+0xee>
 8015e36:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8015fbc <_strtod_l+0x2a4>
 8015e3a:	e7e4      	b.n	8015e06 <_strtod_l+0xee>
 8015e3c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015e40:	f04f 38ff 	mov.w	r8, #4294967295
 8015e44:	e7df      	b.n	8015e06 <_strtod_l+0xee>
 8015e46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e48:	1c5a      	adds	r2, r3, #1
 8015e4a:	9211      	str	r2, [sp, #68]	; 0x44
 8015e4c:	785b      	ldrb	r3, [r3, #1]
 8015e4e:	2b30      	cmp	r3, #48	; 0x30
 8015e50:	d0f9      	beq.n	8015e46 <_strtod_l+0x12e>
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	d09b      	beq.n	8015d8e <_strtod_l+0x76>
 8015e56:	2301      	movs	r3, #1
 8015e58:	9306      	str	r3, [sp, #24]
 8015e5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015e5c:	9309      	str	r3, [sp, #36]	; 0x24
 8015e5e:	2300      	movs	r3, #0
 8015e60:	9305      	str	r3, [sp, #20]
 8015e62:	9307      	str	r3, [sp, #28]
 8015e64:	461e      	mov	r6, r3
 8015e66:	220a      	movs	r2, #10
 8015e68:	9811      	ldr	r0, [sp, #68]	; 0x44
 8015e6a:	7805      	ldrb	r5, [r0, #0]
 8015e6c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8015e70:	b2d9      	uxtb	r1, r3
 8015e72:	2909      	cmp	r1, #9
 8015e74:	d92b      	bls.n	8015ece <_strtod_l+0x1b6>
 8015e76:	4950      	ldr	r1, [pc, #320]	; (8015fb8 <_strtod_l+0x2a0>)
 8015e78:	2201      	movs	r2, #1
 8015e7a:	f000 ffa9 	bl	8016dd0 <strncmp>
 8015e7e:	2800      	cmp	r0, #0
 8015e80:	d035      	beq.n	8015eee <_strtod_l+0x1d6>
 8015e82:	2000      	movs	r0, #0
 8015e84:	462a      	mov	r2, r5
 8015e86:	4633      	mov	r3, r6
 8015e88:	4683      	mov	fp, r0
 8015e8a:	4601      	mov	r1, r0
 8015e8c:	2a65      	cmp	r2, #101	; 0x65
 8015e8e:	d001      	beq.n	8015e94 <_strtod_l+0x17c>
 8015e90:	2a45      	cmp	r2, #69	; 0x45
 8015e92:	d118      	bne.n	8015ec6 <_strtod_l+0x1ae>
 8015e94:	b91b      	cbnz	r3, 8015e9e <_strtod_l+0x186>
 8015e96:	9b06      	ldr	r3, [sp, #24]
 8015e98:	4303      	orrs	r3, r0
 8015e9a:	d094      	beq.n	8015dc6 <_strtod_l+0xae>
 8015e9c:	2300      	movs	r3, #0
 8015e9e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 8015ea2:	f10a 0201 	add.w	r2, sl, #1
 8015ea6:	9211      	str	r2, [sp, #68]	; 0x44
 8015ea8:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8015eac:	2a2b      	cmp	r2, #43	; 0x2b
 8015eae:	d075      	beq.n	8015f9c <_strtod_l+0x284>
 8015eb0:	2a2d      	cmp	r2, #45	; 0x2d
 8015eb2:	d07b      	beq.n	8015fac <_strtod_l+0x294>
 8015eb4:	f04f 0e00 	mov.w	lr, #0
 8015eb8:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8015ebc:	2d09      	cmp	r5, #9
 8015ebe:	f240 8083 	bls.w	8015fc8 <_strtod_l+0x2b0>
 8015ec2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8015ec6:	2500      	movs	r5, #0
 8015ec8:	e09e      	b.n	8016008 <_strtod_l+0x2f0>
 8015eca:	2300      	movs	r3, #0
 8015ecc:	e7c4      	b.n	8015e58 <_strtod_l+0x140>
 8015ece:	2e08      	cmp	r6, #8
 8015ed0:	bfd5      	itete	le
 8015ed2:	9907      	ldrle	r1, [sp, #28]
 8015ed4:	9905      	ldrgt	r1, [sp, #20]
 8015ed6:	fb02 3301 	mlale	r3, r2, r1, r3
 8015eda:	fb02 3301 	mlagt	r3, r2, r1, r3
 8015ede:	f100 0001 	add.w	r0, r0, #1
 8015ee2:	bfd4      	ite	le
 8015ee4:	9307      	strle	r3, [sp, #28]
 8015ee6:	9305      	strgt	r3, [sp, #20]
 8015ee8:	3601      	adds	r6, #1
 8015eea:	9011      	str	r0, [sp, #68]	; 0x44
 8015eec:	e7bc      	b.n	8015e68 <_strtod_l+0x150>
 8015eee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015ef0:	1c5a      	adds	r2, r3, #1
 8015ef2:	9211      	str	r2, [sp, #68]	; 0x44
 8015ef4:	785a      	ldrb	r2, [r3, #1]
 8015ef6:	b3ae      	cbz	r6, 8015f64 <_strtod_l+0x24c>
 8015ef8:	4683      	mov	fp, r0
 8015efa:	4633      	mov	r3, r6
 8015efc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015f00:	2909      	cmp	r1, #9
 8015f02:	d912      	bls.n	8015f2a <_strtod_l+0x212>
 8015f04:	2101      	movs	r1, #1
 8015f06:	e7c1      	b.n	8015e8c <_strtod_l+0x174>
 8015f08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f0a:	1c5a      	adds	r2, r3, #1
 8015f0c:	9211      	str	r2, [sp, #68]	; 0x44
 8015f0e:	785a      	ldrb	r2, [r3, #1]
 8015f10:	3001      	adds	r0, #1
 8015f12:	2a30      	cmp	r2, #48	; 0x30
 8015f14:	d0f8      	beq.n	8015f08 <_strtod_l+0x1f0>
 8015f16:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015f1a:	2b08      	cmp	r3, #8
 8015f1c:	f200 8495 	bhi.w	801684a <_strtod_l+0xb32>
 8015f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015f22:	9309      	str	r3, [sp, #36]	; 0x24
 8015f24:	4683      	mov	fp, r0
 8015f26:	2000      	movs	r0, #0
 8015f28:	4603      	mov	r3, r0
 8015f2a:	3a30      	subs	r2, #48	; 0x30
 8015f2c:	f100 0101 	add.w	r1, r0, #1
 8015f30:	d012      	beq.n	8015f58 <_strtod_l+0x240>
 8015f32:	448b      	add	fp, r1
 8015f34:	eb00 0c03 	add.w	ip, r0, r3
 8015f38:	4619      	mov	r1, r3
 8015f3a:	250a      	movs	r5, #10
 8015f3c:	4561      	cmp	r1, ip
 8015f3e:	d113      	bne.n	8015f68 <_strtod_l+0x250>
 8015f40:	1819      	adds	r1, r3, r0
 8015f42:	2908      	cmp	r1, #8
 8015f44:	f103 0301 	add.w	r3, r3, #1
 8015f48:	4403      	add	r3, r0
 8015f4a:	dc1b      	bgt.n	8015f84 <_strtod_l+0x26c>
 8015f4c:	9807      	ldr	r0, [sp, #28]
 8015f4e:	210a      	movs	r1, #10
 8015f50:	fb01 2200 	mla	r2, r1, r0, r2
 8015f54:	9207      	str	r2, [sp, #28]
 8015f56:	2100      	movs	r1, #0
 8015f58:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015f5a:	1c50      	adds	r0, r2, #1
 8015f5c:	9011      	str	r0, [sp, #68]	; 0x44
 8015f5e:	7852      	ldrb	r2, [r2, #1]
 8015f60:	4608      	mov	r0, r1
 8015f62:	e7cb      	b.n	8015efc <_strtod_l+0x1e4>
 8015f64:	4630      	mov	r0, r6
 8015f66:	e7d4      	b.n	8015f12 <_strtod_l+0x1fa>
 8015f68:	2908      	cmp	r1, #8
 8015f6a:	f101 0101 	add.w	r1, r1, #1
 8015f6e:	dc03      	bgt.n	8015f78 <_strtod_l+0x260>
 8015f70:	9f07      	ldr	r7, [sp, #28]
 8015f72:	436f      	muls	r7, r5
 8015f74:	9707      	str	r7, [sp, #28]
 8015f76:	e7e1      	b.n	8015f3c <_strtod_l+0x224>
 8015f78:	2910      	cmp	r1, #16
 8015f7a:	bfde      	ittt	le
 8015f7c:	9f05      	ldrle	r7, [sp, #20]
 8015f7e:	436f      	mulle	r7, r5
 8015f80:	9705      	strle	r7, [sp, #20]
 8015f82:	e7db      	b.n	8015f3c <_strtod_l+0x224>
 8015f84:	2b10      	cmp	r3, #16
 8015f86:	bfdf      	itttt	le
 8015f88:	9805      	ldrle	r0, [sp, #20]
 8015f8a:	210a      	movle	r1, #10
 8015f8c:	fb01 2200 	mlale	r2, r1, r0, r2
 8015f90:	9205      	strle	r2, [sp, #20]
 8015f92:	e7e0      	b.n	8015f56 <_strtod_l+0x23e>
 8015f94:	f04f 0b00 	mov.w	fp, #0
 8015f98:	2101      	movs	r1, #1
 8015f9a:	e77c      	b.n	8015e96 <_strtod_l+0x17e>
 8015f9c:	f04f 0e00 	mov.w	lr, #0
 8015fa0:	f10a 0202 	add.w	r2, sl, #2
 8015fa4:	9211      	str	r2, [sp, #68]	; 0x44
 8015fa6:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8015faa:	e785      	b.n	8015eb8 <_strtod_l+0x1a0>
 8015fac:	f04f 0e01 	mov.w	lr, #1
 8015fb0:	e7f6      	b.n	8015fa0 <_strtod_l+0x288>
 8015fb2:	bf00      	nop
 8015fb4:	08017f10 	.word	0x08017f10
 8015fb8:	08017f0c 	.word	0x08017f0c
 8015fbc:	7ff00000 	.word	0x7ff00000
 8015fc0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015fc2:	1c55      	adds	r5, r2, #1
 8015fc4:	9511      	str	r5, [sp, #68]	; 0x44
 8015fc6:	7852      	ldrb	r2, [r2, #1]
 8015fc8:	2a30      	cmp	r2, #48	; 0x30
 8015fca:	d0f9      	beq.n	8015fc0 <_strtod_l+0x2a8>
 8015fcc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8015fd0:	2d08      	cmp	r5, #8
 8015fd2:	f63f af78 	bhi.w	8015ec6 <_strtod_l+0x1ae>
 8015fd6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8015fda:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015fdc:	920a      	str	r2, [sp, #40]	; 0x28
 8015fde:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015fe0:	1c55      	adds	r5, r2, #1
 8015fe2:	9511      	str	r5, [sp, #68]	; 0x44
 8015fe4:	7852      	ldrb	r2, [r2, #1]
 8015fe6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8015fea:	2f09      	cmp	r7, #9
 8015fec:	d937      	bls.n	801605e <_strtod_l+0x346>
 8015fee:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8015ff0:	1bed      	subs	r5, r5, r7
 8015ff2:	2d08      	cmp	r5, #8
 8015ff4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8015ff8:	dc02      	bgt.n	8016000 <_strtod_l+0x2e8>
 8015ffa:	4565      	cmp	r5, ip
 8015ffc:	bfa8      	it	ge
 8015ffe:	4665      	movge	r5, ip
 8016000:	f1be 0f00 	cmp.w	lr, #0
 8016004:	d000      	beq.n	8016008 <_strtod_l+0x2f0>
 8016006:	426d      	negs	r5, r5
 8016008:	2b00      	cmp	r3, #0
 801600a:	d14d      	bne.n	80160a8 <_strtod_l+0x390>
 801600c:	9b06      	ldr	r3, [sp, #24]
 801600e:	4303      	orrs	r3, r0
 8016010:	f47f aebd 	bne.w	8015d8e <_strtod_l+0x76>
 8016014:	2900      	cmp	r1, #0
 8016016:	f47f aed6 	bne.w	8015dc6 <_strtod_l+0xae>
 801601a:	2a69      	cmp	r2, #105	; 0x69
 801601c:	d027      	beq.n	801606e <_strtod_l+0x356>
 801601e:	dc24      	bgt.n	801606a <_strtod_l+0x352>
 8016020:	2a49      	cmp	r2, #73	; 0x49
 8016022:	d024      	beq.n	801606e <_strtod_l+0x356>
 8016024:	2a4e      	cmp	r2, #78	; 0x4e
 8016026:	f47f aece 	bne.w	8015dc6 <_strtod_l+0xae>
 801602a:	4995      	ldr	r1, [pc, #596]	; (8016280 <_strtod_l+0x568>)
 801602c:	a811      	add	r0, sp, #68	; 0x44
 801602e:	f001 f9d3 	bl	80173d8 <__match>
 8016032:	2800      	cmp	r0, #0
 8016034:	f43f aec7 	beq.w	8015dc6 <_strtod_l+0xae>
 8016038:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	2b28      	cmp	r3, #40	; 0x28
 801603e:	d12d      	bne.n	801609c <_strtod_l+0x384>
 8016040:	4990      	ldr	r1, [pc, #576]	; (8016284 <_strtod_l+0x56c>)
 8016042:	aa14      	add	r2, sp, #80	; 0x50
 8016044:	a811      	add	r0, sp, #68	; 0x44
 8016046:	f001 f9db 	bl	8017400 <__hexnan>
 801604a:	2805      	cmp	r0, #5
 801604c:	d126      	bne.n	801609c <_strtod_l+0x384>
 801604e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016050:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8016054:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8016058:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801605c:	e697      	b.n	8015d8e <_strtod_l+0x76>
 801605e:	250a      	movs	r5, #10
 8016060:	fb05 2c0c 	mla	ip, r5, ip, r2
 8016064:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8016068:	e7b9      	b.n	8015fde <_strtod_l+0x2c6>
 801606a:	2a6e      	cmp	r2, #110	; 0x6e
 801606c:	e7db      	b.n	8016026 <_strtod_l+0x30e>
 801606e:	4986      	ldr	r1, [pc, #536]	; (8016288 <_strtod_l+0x570>)
 8016070:	a811      	add	r0, sp, #68	; 0x44
 8016072:	f001 f9b1 	bl	80173d8 <__match>
 8016076:	2800      	cmp	r0, #0
 8016078:	f43f aea5 	beq.w	8015dc6 <_strtod_l+0xae>
 801607c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801607e:	4983      	ldr	r1, [pc, #524]	; (801628c <_strtod_l+0x574>)
 8016080:	3b01      	subs	r3, #1
 8016082:	a811      	add	r0, sp, #68	; 0x44
 8016084:	9311      	str	r3, [sp, #68]	; 0x44
 8016086:	f001 f9a7 	bl	80173d8 <__match>
 801608a:	b910      	cbnz	r0, 8016092 <_strtod_l+0x37a>
 801608c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801608e:	3301      	adds	r3, #1
 8016090:	9311      	str	r3, [sp, #68]	; 0x44
 8016092:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80162a0 <_strtod_l+0x588>
 8016096:	f04f 0800 	mov.w	r8, #0
 801609a:	e678      	b.n	8015d8e <_strtod_l+0x76>
 801609c:	487c      	ldr	r0, [pc, #496]	; (8016290 <_strtod_l+0x578>)
 801609e:	f000 feb7 	bl	8016e10 <nan>
 80160a2:	ec59 8b10 	vmov	r8, r9, d0
 80160a6:	e672      	b.n	8015d8e <_strtod_l+0x76>
 80160a8:	eddd 7a07 	vldr	s15, [sp, #28]
 80160ac:	eba5 020b 	sub.w	r2, r5, fp
 80160b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80160b4:	2e00      	cmp	r6, #0
 80160b6:	bf08      	it	eq
 80160b8:	461e      	moveq	r6, r3
 80160ba:	2b10      	cmp	r3, #16
 80160bc:	9206      	str	r2, [sp, #24]
 80160be:	461a      	mov	r2, r3
 80160c0:	bfa8      	it	ge
 80160c2:	2210      	movge	r2, #16
 80160c4:	2b09      	cmp	r3, #9
 80160c6:	ec59 8b17 	vmov	r8, r9, d7
 80160ca:	dd0c      	ble.n	80160e6 <_strtod_l+0x3ce>
 80160cc:	4971      	ldr	r1, [pc, #452]	; (8016294 <_strtod_l+0x57c>)
 80160ce:	eddd 6a05 	vldr	s13, [sp, #20]
 80160d2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80160d6:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80160da:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80160de:	eea7 6b05 	vfma.f64	d6, d7, d5
 80160e2:	ec59 8b16 	vmov	r8, r9, d6
 80160e6:	2b0f      	cmp	r3, #15
 80160e8:	dc37      	bgt.n	801615a <_strtod_l+0x442>
 80160ea:	9906      	ldr	r1, [sp, #24]
 80160ec:	2900      	cmp	r1, #0
 80160ee:	f43f ae4e 	beq.w	8015d8e <_strtod_l+0x76>
 80160f2:	dd23      	ble.n	801613c <_strtod_l+0x424>
 80160f4:	2916      	cmp	r1, #22
 80160f6:	dc0b      	bgt.n	8016110 <_strtod_l+0x3f8>
 80160f8:	4b66      	ldr	r3, [pc, #408]	; (8016294 <_strtod_l+0x57c>)
 80160fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80160fe:	ed93 7b00 	vldr	d7, [r3]
 8016102:	ec49 8b16 	vmov	d6, r8, r9
 8016106:	ee27 7b06 	vmul.f64	d7, d7, d6
 801610a:	ec59 8b17 	vmov	r8, r9, d7
 801610e:	e63e      	b.n	8015d8e <_strtod_l+0x76>
 8016110:	9806      	ldr	r0, [sp, #24]
 8016112:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8016116:	4281      	cmp	r1, r0
 8016118:	db1f      	blt.n	801615a <_strtod_l+0x442>
 801611a:	4a5e      	ldr	r2, [pc, #376]	; (8016294 <_strtod_l+0x57c>)
 801611c:	f1c3 030f 	rsb	r3, r3, #15
 8016120:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8016124:	ed91 7b00 	vldr	d7, [r1]
 8016128:	ec49 8b16 	vmov	d6, r8, r9
 801612c:	1ac3      	subs	r3, r0, r3
 801612e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8016132:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016136:	ed92 6b00 	vldr	d6, [r2]
 801613a:	e7e4      	b.n	8016106 <_strtod_l+0x3ee>
 801613c:	9906      	ldr	r1, [sp, #24]
 801613e:	3116      	adds	r1, #22
 8016140:	db0b      	blt.n	801615a <_strtod_l+0x442>
 8016142:	4b54      	ldr	r3, [pc, #336]	; (8016294 <_strtod_l+0x57c>)
 8016144:	ebab 0505 	sub.w	r5, fp, r5
 8016148:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801614c:	ed95 7b00 	vldr	d7, [r5]
 8016150:	ec49 8b16 	vmov	d6, r8, r9
 8016154:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8016158:	e7d7      	b.n	801610a <_strtod_l+0x3f2>
 801615a:	9906      	ldr	r1, [sp, #24]
 801615c:	1a9a      	subs	r2, r3, r2
 801615e:	440a      	add	r2, r1
 8016160:	2a00      	cmp	r2, #0
 8016162:	dd6e      	ble.n	8016242 <_strtod_l+0x52a>
 8016164:	f012 000f 	ands.w	r0, r2, #15
 8016168:	d00a      	beq.n	8016180 <_strtod_l+0x468>
 801616a:	494a      	ldr	r1, [pc, #296]	; (8016294 <_strtod_l+0x57c>)
 801616c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016170:	ed91 7b00 	vldr	d7, [r1]
 8016174:	ec49 8b16 	vmov	d6, r8, r9
 8016178:	ee27 7b06 	vmul.f64	d7, d7, d6
 801617c:	ec59 8b17 	vmov	r8, r9, d7
 8016180:	f032 020f 	bics.w	r2, r2, #15
 8016184:	d04e      	beq.n	8016224 <_strtod_l+0x50c>
 8016186:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801618a:	dd22      	ble.n	80161d2 <_strtod_l+0x4ba>
 801618c:	2500      	movs	r5, #0
 801618e:	462e      	mov	r6, r5
 8016190:	9507      	str	r5, [sp, #28]
 8016192:	462f      	mov	r7, r5
 8016194:	2322      	movs	r3, #34	; 0x22
 8016196:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80162a0 <_strtod_l+0x588>
 801619a:	6023      	str	r3, [r4, #0]
 801619c:	f04f 0800 	mov.w	r8, #0
 80161a0:	9b07      	ldr	r3, [sp, #28]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	f43f adf3 	beq.w	8015d8e <_strtod_l+0x76>
 80161a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 80161aa:	4620      	mov	r0, r4
 80161ac:	f7ff f930 	bl	8015410 <_Bfree>
 80161b0:	4639      	mov	r1, r7
 80161b2:	4620      	mov	r0, r4
 80161b4:	f7ff f92c 	bl	8015410 <_Bfree>
 80161b8:	4631      	mov	r1, r6
 80161ba:	4620      	mov	r0, r4
 80161bc:	f7ff f928 	bl	8015410 <_Bfree>
 80161c0:	9907      	ldr	r1, [sp, #28]
 80161c2:	4620      	mov	r0, r4
 80161c4:	f7ff f924 	bl	8015410 <_Bfree>
 80161c8:	4629      	mov	r1, r5
 80161ca:	4620      	mov	r0, r4
 80161cc:	f7ff f920 	bl	8015410 <_Bfree>
 80161d0:	e5dd      	b.n	8015d8e <_strtod_l+0x76>
 80161d2:	2000      	movs	r0, #0
 80161d4:	ec49 8b17 	vmov	d7, r8, r9
 80161d8:	4f2f      	ldr	r7, [pc, #188]	; (8016298 <_strtod_l+0x580>)
 80161da:	1112      	asrs	r2, r2, #4
 80161dc:	4601      	mov	r1, r0
 80161de:	2a01      	cmp	r2, #1
 80161e0:	dc23      	bgt.n	801622a <_strtod_l+0x512>
 80161e2:	b108      	cbz	r0, 80161e8 <_strtod_l+0x4d0>
 80161e4:	ec59 8b17 	vmov	r8, r9, d7
 80161e8:	4a2b      	ldr	r2, [pc, #172]	; (8016298 <_strtod_l+0x580>)
 80161ea:	482c      	ldr	r0, [pc, #176]	; (801629c <_strtod_l+0x584>)
 80161ec:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80161f0:	ed92 7b00 	vldr	d7, [r2]
 80161f4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80161f8:	ec49 8b16 	vmov	d6, r8, r9
 80161fc:	4a28      	ldr	r2, [pc, #160]	; (80162a0 <_strtod_l+0x588>)
 80161fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8016202:	ee17 1a90 	vmov	r1, s15
 8016206:	400a      	ands	r2, r1
 8016208:	4282      	cmp	r2, r0
 801620a:	ec59 8b17 	vmov	r8, r9, d7
 801620e:	d8bd      	bhi.n	801618c <_strtod_l+0x474>
 8016210:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8016214:	4282      	cmp	r2, r0
 8016216:	bf86      	itte	hi
 8016218:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 80162a4 <_strtod_l+0x58c>
 801621c:	f04f 38ff 	movhi.w	r8, #4294967295
 8016220:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8016224:	2200      	movs	r2, #0
 8016226:	9205      	str	r2, [sp, #20]
 8016228:	e076      	b.n	8016318 <_strtod_l+0x600>
 801622a:	f012 0f01 	tst.w	r2, #1
 801622e:	d004      	beq.n	801623a <_strtod_l+0x522>
 8016230:	ed97 6b00 	vldr	d6, [r7]
 8016234:	2001      	movs	r0, #1
 8016236:	ee27 7b06 	vmul.f64	d7, d7, d6
 801623a:	3101      	adds	r1, #1
 801623c:	1052      	asrs	r2, r2, #1
 801623e:	3708      	adds	r7, #8
 8016240:	e7cd      	b.n	80161de <_strtod_l+0x4c6>
 8016242:	d0ef      	beq.n	8016224 <_strtod_l+0x50c>
 8016244:	4252      	negs	r2, r2
 8016246:	f012 000f 	ands.w	r0, r2, #15
 801624a:	d00a      	beq.n	8016262 <_strtod_l+0x54a>
 801624c:	4911      	ldr	r1, [pc, #68]	; (8016294 <_strtod_l+0x57c>)
 801624e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8016252:	ed91 7b00 	vldr	d7, [r1]
 8016256:	ec49 8b16 	vmov	d6, r8, r9
 801625a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801625e:	ec59 8b17 	vmov	r8, r9, d7
 8016262:	1112      	asrs	r2, r2, #4
 8016264:	d0de      	beq.n	8016224 <_strtod_l+0x50c>
 8016266:	2a1f      	cmp	r2, #31
 8016268:	dd1e      	ble.n	80162a8 <_strtod_l+0x590>
 801626a:	2500      	movs	r5, #0
 801626c:	462e      	mov	r6, r5
 801626e:	9507      	str	r5, [sp, #28]
 8016270:	462f      	mov	r7, r5
 8016272:	2322      	movs	r3, #34	; 0x22
 8016274:	f04f 0800 	mov.w	r8, #0
 8016278:	f04f 0900 	mov.w	r9, #0
 801627c:	6023      	str	r3, [r4, #0]
 801627e:	e78f      	b.n	80161a0 <_strtod_l+0x488>
 8016280:	08017cf9 	.word	0x08017cf9
 8016284:	08017f24 	.word	0x08017f24
 8016288:	08017cf1 	.word	0x08017cf1
 801628c:	08017d28 	.word	0x08017d28
 8016290:	080180b5 	.word	0x080180b5
 8016294:	08017e38 	.word	0x08017e38
 8016298:	08017e10 	.word	0x08017e10
 801629c:	7ca00000 	.word	0x7ca00000
 80162a0:	7ff00000 	.word	0x7ff00000
 80162a4:	7fefffff 	.word	0x7fefffff
 80162a8:	f012 0110 	ands.w	r1, r2, #16
 80162ac:	bf18      	it	ne
 80162ae:	216a      	movne	r1, #106	; 0x6a
 80162b0:	9105      	str	r1, [sp, #20]
 80162b2:	ec49 8b17 	vmov	d7, r8, r9
 80162b6:	49be      	ldr	r1, [pc, #760]	; (80165b0 <_strtod_l+0x898>)
 80162b8:	2000      	movs	r0, #0
 80162ba:	07d7      	lsls	r7, r2, #31
 80162bc:	d504      	bpl.n	80162c8 <_strtod_l+0x5b0>
 80162be:	ed91 6b00 	vldr	d6, [r1]
 80162c2:	2001      	movs	r0, #1
 80162c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80162c8:	1052      	asrs	r2, r2, #1
 80162ca:	f101 0108 	add.w	r1, r1, #8
 80162ce:	d1f4      	bne.n	80162ba <_strtod_l+0x5a2>
 80162d0:	b108      	cbz	r0, 80162d6 <_strtod_l+0x5be>
 80162d2:	ec59 8b17 	vmov	r8, r9, d7
 80162d6:	9a05      	ldr	r2, [sp, #20]
 80162d8:	b1ba      	cbz	r2, 801630a <_strtod_l+0x5f2>
 80162da:	f3c9 510a 	ubfx	r1, r9, #20, #11
 80162de:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 80162e2:	2a00      	cmp	r2, #0
 80162e4:	4648      	mov	r0, r9
 80162e6:	dd10      	ble.n	801630a <_strtod_l+0x5f2>
 80162e8:	2a1f      	cmp	r2, #31
 80162ea:	f340 812c 	ble.w	8016546 <_strtod_l+0x82e>
 80162ee:	2a34      	cmp	r2, #52	; 0x34
 80162f0:	bfde      	ittt	le
 80162f2:	f04f 32ff 	movle.w	r2, #4294967295
 80162f6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 80162fa:	408a      	lslle	r2, r1
 80162fc:	f04f 0800 	mov.w	r8, #0
 8016300:	bfcc      	ite	gt
 8016302:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016306:	ea02 0900 	andle.w	r9, r2, r0
 801630a:	ec49 8b17 	vmov	d7, r8, r9
 801630e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016316:	d0a8      	beq.n	801626a <_strtod_l+0x552>
 8016318:	9a07      	ldr	r2, [sp, #28]
 801631a:	9200      	str	r2, [sp, #0]
 801631c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801631e:	4632      	mov	r2, r6
 8016320:	4620      	mov	r0, r4
 8016322:	f7ff f8dd 	bl	80154e0 <__s2b>
 8016326:	9007      	str	r0, [sp, #28]
 8016328:	2800      	cmp	r0, #0
 801632a:	f43f af2f 	beq.w	801618c <_strtod_l+0x474>
 801632e:	9a06      	ldr	r2, [sp, #24]
 8016330:	2a00      	cmp	r2, #0
 8016332:	ebab 0305 	sub.w	r3, fp, r5
 8016336:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8016590 <_strtod_l+0x878>
 801633a:	bfa8      	it	ge
 801633c:	2300      	movge	r3, #0
 801633e:	ed9f ab96 	vldr	d10, [pc, #600]	; 8016598 <_strtod_l+0x880>
 8016342:	ed9f bb97 	vldr	d11, [pc, #604]	; 80165a0 <_strtod_l+0x888>
 8016346:	9309      	str	r3, [sp, #36]	; 0x24
 8016348:	2500      	movs	r5, #0
 801634a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801634e:	930c      	str	r3, [sp, #48]	; 0x30
 8016350:	462e      	mov	r6, r5
 8016352:	9b07      	ldr	r3, [sp, #28]
 8016354:	4620      	mov	r0, r4
 8016356:	6859      	ldr	r1, [r3, #4]
 8016358:	f7ff f81a 	bl	8015390 <_Balloc>
 801635c:	4607      	mov	r7, r0
 801635e:	2800      	cmp	r0, #0
 8016360:	f43f af18 	beq.w	8016194 <_strtod_l+0x47c>
 8016364:	9b07      	ldr	r3, [sp, #28]
 8016366:	691a      	ldr	r2, [r3, #16]
 8016368:	3202      	adds	r2, #2
 801636a:	f103 010c 	add.w	r1, r3, #12
 801636e:	0092      	lsls	r2, r2, #2
 8016370:	300c      	adds	r0, #12
 8016372:	f000 fd3f 	bl	8016df4 <memcpy>
 8016376:	ec49 8b10 	vmov	d0, r8, r9
 801637a:	aa14      	add	r2, sp, #80	; 0x50
 801637c:	a913      	add	r1, sp, #76	; 0x4c
 801637e:	4620      	mov	r0, r4
 8016380:	f7ff fbe2 	bl	8015b48 <__d2b>
 8016384:	ec49 8b18 	vmov	d8, r8, r9
 8016388:	9012      	str	r0, [sp, #72]	; 0x48
 801638a:	2800      	cmp	r0, #0
 801638c:	f43f af02 	beq.w	8016194 <_strtod_l+0x47c>
 8016390:	2101      	movs	r1, #1
 8016392:	4620      	mov	r0, r4
 8016394:	f7ff f93c 	bl	8015610 <__i2b>
 8016398:	4606      	mov	r6, r0
 801639a:	2800      	cmp	r0, #0
 801639c:	f43f aefa 	beq.w	8016194 <_strtod_l+0x47c>
 80163a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80163a2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	bfab      	itete	ge
 80163a8:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80163aa:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80163ac:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80163b0:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80163b4:	bfac      	ite	ge
 80163b6:	eb03 0b02 	addge.w	fp, r3, r2
 80163ba:	eba2 0a03 	sublt.w	sl, r2, r3
 80163be:	9a05      	ldr	r2, [sp, #20]
 80163c0:	1a9b      	subs	r3, r3, r2
 80163c2:	440b      	add	r3, r1
 80163c4:	4a7b      	ldr	r2, [pc, #492]	; (80165b4 <_strtod_l+0x89c>)
 80163c6:	3b01      	subs	r3, #1
 80163c8:	4293      	cmp	r3, r2
 80163ca:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80163ce:	f280 80cd 	bge.w	801656c <_strtod_l+0x854>
 80163d2:	1ad2      	subs	r2, r2, r3
 80163d4:	2a1f      	cmp	r2, #31
 80163d6:	eba1 0102 	sub.w	r1, r1, r2
 80163da:	f04f 0001 	mov.w	r0, #1
 80163de:	f300 80b9 	bgt.w	8016554 <_strtod_l+0x83c>
 80163e2:	fa00 f302 	lsl.w	r3, r0, r2
 80163e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80163e8:	2300      	movs	r3, #0
 80163ea:	930a      	str	r3, [sp, #40]	; 0x28
 80163ec:	eb0b 0301 	add.w	r3, fp, r1
 80163f0:	9a05      	ldr	r2, [sp, #20]
 80163f2:	459b      	cmp	fp, r3
 80163f4:	448a      	add	sl, r1
 80163f6:	4492      	add	sl, r2
 80163f8:	465a      	mov	r2, fp
 80163fa:	bfa8      	it	ge
 80163fc:	461a      	movge	r2, r3
 80163fe:	4552      	cmp	r2, sl
 8016400:	bfa8      	it	ge
 8016402:	4652      	movge	r2, sl
 8016404:	2a00      	cmp	r2, #0
 8016406:	bfc2      	ittt	gt
 8016408:	1a9b      	subgt	r3, r3, r2
 801640a:	ebaa 0a02 	subgt.w	sl, sl, r2
 801640e:	ebab 0b02 	subgt.w	fp, fp, r2
 8016412:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016414:	2a00      	cmp	r2, #0
 8016416:	dd18      	ble.n	801644a <_strtod_l+0x732>
 8016418:	4631      	mov	r1, r6
 801641a:	4620      	mov	r0, r4
 801641c:	930f      	str	r3, [sp, #60]	; 0x3c
 801641e:	f7ff f9b7 	bl	8015790 <__pow5mult>
 8016422:	4606      	mov	r6, r0
 8016424:	2800      	cmp	r0, #0
 8016426:	f43f aeb5 	beq.w	8016194 <_strtod_l+0x47c>
 801642a:	4601      	mov	r1, r0
 801642c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801642e:	4620      	mov	r0, r4
 8016430:	f7ff f904 	bl	801563c <__multiply>
 8016434:	900e      	str	r0, [sp, #56]	; 0x38
 8016436:	2800      	cmp	r0, #0
 8016438:	f43f aeac 	beq.w	8016194 <_strtod_l+0x47c>
 801643c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801643e:	4620      	mov	r0, r4
 8016440:	f7fe ffe6 	bl	8015410 <_Bfree>
 8016444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016448:	9212      	str	r2, [sp, #72]	; 0x48
 801644a:	2b00      	cmp	r3, #0
 801644c:	f300 8093 	bgt.w	8016576 <_strtod_l+0x85e>
 8016450:	9b06      	ldr	r3, [sp, #24]
 8016452:	2b00      	cmp	r3, #0
 8016454:	dd08      	ble.n	8016468 <_strtod_l+0x750>
 8016456:	4639      	mov	r1, r7
 8016458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801645a:	4620      	mov	r0, r4
 801645c:	f7ff f998 	bl	8015790 <__pow5mult>
 8016460:	4607      	mov	r7, r0
 8016462:	2800      	cmp	r0, #0
 8016464:	f43f ae96 	beq.w	8016194 <_strtod_l+0x47c>
 8016468:	f1ba 0f00 	cmp.w	sl, #0
 801646c:	dd08      	ble.n	8016480 <_strtod_l+0x768>
 801646e:	4639      	mov	r1, r7
 8016470:	4652      	mov	r2, sl
 8016472:	4620      	mov	r0, r4
 8016474:	f7ff f9e6 	bl	8015844 <__lshift>
 8016478:	4607      	mov	r7, r0
 801647a:	2800      	cmp	r0, #0
 801647c:	f43f ae8a 	beq.w	8016194 <_strtod_l+0x47c>
 8016480:	f1bb 0f00 	cmp.w	fp, #0
 8016484:	dd08      	ble.n	8016498 <_strtod_l+0x780>
 8016486:	4631      	mov	r1, r6
 8016488:	465a      	mov	r2, fp
 801648a:	4620      	mov	r0, r4
 801648c:	f7ff f9da 	bl	8015844 <__lshift>
 8016490:	4606      	mov	r6, r0
 8016492:	2800      	cmp	r0, #0
 8016494:	f43f ae7e 	beq.w	8016194 <_strtod_l+0x47c>
 8016498:	9912      	ldr	r1, [sp, #72]	; 0x48
 801649a:	463a      	mov	r2, r7
 801649c:	4620      	mov	r0, r4
 801649e:	f7ff fa59 	bl	8015954 <__mdiff>
 80164a2:	4605      	mov	r5, r0
 80164a4:	2800      	cmp	r0, #0
 80164a6:	f43f ae75 	beq.w	8016194 <_strtod_l+0x47c>
 80164aa:	2300      	movs	r3, #0
 80164ac:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80164b0:	60c3      	str	r3, [r0, #12]
 80164b2:	4631      	mov	r1, r6
 80164b4:	f7ff fa32 	bl	801591c <__mcmp>
 80164b8:	2800      	cmp	r0, #0
 80164ba:	da7f      	bge.n	80165bc <_strtod_l+0x8a4>
 80164bc:	ea5a 0a08 	orrs.w	sl, sl, r8
 80164c0:	f040 80a5 	bne.w	801660e <_strtod_l+0x8f6>
 80164c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	f040 80a0 	bne.w	801660e <_strtod_l+0x8f6>
 80164ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80164d2:	0d1b      	lsrs	r3, r3, #20
 80164d4:	051b      	lsls	r3, r3, #20
 80164d6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80164da:	f240 8098 	bls.w	801660e <_strtod_l+0x8f6>
 80164de:	696b      	ldr	r3, [r5, #20]
 80164e0:	b91b      	cbnz	r3, 80164ea <_strtod_l+0x7d2>
 80164e2:	692b      	ldr	r3, [r5, #16]
 80164e4:	2b01      	cmp	r3, #1
 80164e6:	f340 8092 	ble.w	801660e <_strtod_l+0x8f6>
 80164ea:	4629      	mov	r1, r5
 80164ec:	2201      	movs	r2, #1
 80164ee:	4620      	mov	r0, r4
 80164f0:	f7ff f9a8 	bl	8015844 <__lshift>
 80164f4:	4631      	mov	r1, r6
 80164f6:	4605      	mov	r5, r0
 80164f8:	f7ff fa10 	bl	801591c <__mcmp>
 80164fc:	2800      	cmp	r0, #0
 80164fe:	f340 8086 	ble.w	801660e <_strtod_l+0x8f6>
 8016502:	9905      	ldr	r1, [sp, #20]
 8016504:	4a2c      	ldr	r2, [pc, #176]	; (80165b8 <_strtod_l+0x8a0>)
 8016506:	464b      	mov	r3, r9
 8016508:	2900      	cmp	r1, #0
 801650a:	f000 809f 	beq.w	801664c <_strtod_l+0x934>
 801650e:	ea02 0109 	and.w	r1, r2, r9
 8016512:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016516:	f300 8099 	bgt.w	801664c <_strtod_l+0x934>
 801651a:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801651e:	f77f aea8 	ble.w	8016272 <_strtod_l+0x55a>
 8016522:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80165a8 <_strtod_l+0x890>
 8016526:	ec49 8b16 	vmov	d6, r8, r9
 801652a:	4b23      	ldr	r3, [pc, #140]	; (80165b8 <_strtod_l+0x8a0>)
 801652c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8016530:	ee17 2a90 	vmov	r2, s15
 8016534:	4013      	ands	r3, r2
 8016536:	ec59 8b17 	vmov	r8, r9, d7
 801653a:	2b00      	cmp	r3, #0
 801653c:	f47f ae34 	bne.w	80161a8 <_strtod_l+0x490>
 8016540:	2322      	movs	r3, #34	; 0x22
 8016542:	6023      	str	r3, [r4, #0]
 8016544:	e630      	b.n	80161a8 <_strtod_l+0x490>
 8016546:	f04f 31ff 	mov.w	r1, #4294967295
 801654a:	fa01 f202 	lsl.w	r2, r1, r2
 801654e:	ea02 0808 	and.w	r8, r2, r8
 8016552:	e6da      	b.n	801630a <_strtod_l+0x5f2>
 8016554:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8016558:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801655c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8016560:	33e2      	adds	r3, #226	; 0xe2
 8016562:	fa00 f303 	lsl.w	r3, r0, r3
 8016566:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801656a:	e73f      	b.n	80163ec <_strtod_l+0x6d4>
 801656c:	2200      	movs	r2, #0
 801656e:	2301      	movs	r3, #1
 8016570:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016574:	e73a      	b.n	80163ec <_strtod_l+0x6d4>
 8016576:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016578:	461a      	mov	r2, r3
 801657a:	4620      	mov	r0, r4
 801657c:	f7ff f962 	bl	8015844 <__lshift>
 8016580:	9012      	str	r0, [sp, #72]	; 0x48
 8016582:	2800      	cmp	r0, #0
 8016584:	f47f af64 	bne.w	8016450 <_strtod_l+0x738>
 8016588:	e604      	b.n	8016194 <_strtod_l+0x47c>
 801658a:	bf00      	nop
 801658c:	f3af 8000 	nop.w
 8016590:	94a03595 	.word	0x94a03595
 8016594:	3fcfffff 	.word	0x3fcfffff
 8016598:	94a03595 	.word	0x94a03595
 801659c:	3fdfffff 	.word	0x3fdfffff
 80165a0:	35afe535 	.word	0x35afe535
 80165a4:	3fe00000 	.word	0x3fe00000
 80165a8:	00000000 	.word	0x00000000
 80165ac:	39500000 	.word	0x39500000
 80165b0:	08017f38 	.word	0x08017f38
 80165b4:	fffffc02 	.word	0xfffffc02
 80165b8:	7ff00000 	.word	0x7ff00000
 80165bc:	46cb      	mov	fp, r9
 80165be:	d15f      	bne.n	8016680 <_strtod_l+0x968>
 80165c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80165c4:	f1ba 0f00 	cmp.w	sl, #0
 80165c8:	d02a      	beq.n	8016620 <_strtod_l+0x908>
 80165ca:	4aa7      	ldr	r2, [pc, #668]	; (8016868 <_strtod_l+0xb50>)
 80165cc:	4293      	cmp	r3, r2
 80165ce:	d12b      	bne.n	8016628 <_strtod_l+0x910>
 80165d0:	9b05      	ldr	r3, [sp, #20]
 80165d2:	4642      	mov	r2, r8
 80165d4:	b1fb      	cbz	r3, 8016616 <_strtod_l+0x8fe>
 80165d6:	4ba5      	ldr	r3, [pc, #660]	; (801686c <_strtod_l+0xb54>)
 80165d8:	ea09 0303 	and.w	r3, r9, r3
 80165dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80165e0:	f04f 31ff 	mov.w	r1, #4294967295
 80165e4:	d81a      	bhi.n	801661c <_strtod_l+0x904>
 80165e6:	0d1b      	lsrs	r3, r3, #20
 80165e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80165ec:	fa01 f303 	lsl.w	r3, r1, r3
 80165f0:	429a      	cmp	r2, r3
 80165f2:	d119      	bne.n	8016628 <_strtod_l+0x910>
 80165f4:	4b9e      	ldr	r3, [pc, #632]	; (8016870 <_strtod_l+0xb58>)
 80165f6:	459b      	cmp	fp, r3
 80165f8:	d102      	bne.n	8016600 <_strtod_l+0x8e8>
 80165fa:	3201      	adds	r2, #1
 80165fc:	f43f adca 	beq.w	8016194 <_strtod_l+0x47c>
 8016600:	4b9a      	ldr	r3, [pc, #616]	; (801686c <_strtod_l+0xb54>)
 8016602:	ea0b 0303 	and.w	r3, fp, r3
 8016606:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801660a:	f04f 0800 	mov.w	r8, #0
 801660e:	9b05      	ldr	r3, [sp, #20]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d186      	bne.n	8016522 <_strtod_l+0x80a>
 8016614:	e5c8      	b.n	80161a8 <_strtod_l+0x490>
 8016616:	f04f 33ff 	mov.w	r3, #4294967295
 801661a:	e7e9      	b.n	80165f0 <_strtod_l+0x8d8>
 801661c:	460b      	mov	r3, r1
 801661e:	e7e7      	b.n	80165f0 <_strtod_l+0x8d8>
 8016620:	ea53 0308 	orrs.w	r3, r3, r8
 8016624:	f43f af6d 	beq.w	8016502 <_strtod_l+0x7ea>
 8016628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801662a:	b1cb      	cbz	r3, 8016660 <_strtod_l+0x948>
 801662c:	ea13 0f0b 	tst.w	r3, fp
 8016630:	d0ed      	beq.n	801660e <_strtod_l+0x8f6>
 8016632:	9a05      	ldr	r2, [sp, #20]
 8016634:	4640      	mov	r0, r8
 8016636:	4649      	mov	r1, r9
 8016638:	f1ba 0f00 	cmp.w	sl, #0
 801663c:	d014      	beq.n	8016668 <_strtod_l+0x950>
 801663e:	f7ff fb51 	bl	8015ce4 <sulp>
 8016642:	ee38 7b00 	vadd.f64	d7, d8, d0
 8016646:	ec59 8b17 	vmov	r8, r9, d7
 801664a:	e7e0      	b.n	801660e <_strtod_l+0x8f6>
 801664c:	4013      	ands	r3, r2
 801664e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016652:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8016656:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801665a:	f04f 38ff 	mov.w	r8, #4294967295
 801665e:	e7d6      	b.n	801660e <_strtod_l+0x8f6>
 8016660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016662:	ea13 0f08 	tst.w	r3, r8
 8016666:	e7e3      	b.n	8016630 <_strtod_l+0x918>
 8016668:	f7ff fb3c 	bl	8015ce4 <sulp>
 801666c:	ee38 0b40 	vsub.f64	d0, d8, d0
 8016670:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016678:	ec59 8b10 	vmov	r8, r9, d0
 801667c:	d1c7      	bne.n	801660e <_strtod_l+0x8f6>
 801667e:	e5f8      	b.n	8016272 <_strtod_l+0x55a>
 8016680:	4631      	mov	r1, r6
 8016682:	4628      	mov	r0, r5
 8016684:	f7ff faba 	bl	8015bfc <__ratio>
 8016688:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801668c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016694:	d85f      	bhi.n	8016756 <_strtod_l+0xa3e>
 8016696:	f1ba 0f00 	cmp.w	sl, #0
 801669a:	d166      	bne.n	801676a <_strtod_l+0xa52>
 801669c:	f1b8 0f00 	cmp.w	r8, #0
 80166a0:	d14d      	bne.n	801673e <_strtod_l+0xa26>
 80166a2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80166a6:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d162      	bne.n	8016774 <_strtod_l+0xa5c>
 80166ae:	eeb4 0bcd 	vcmpe.f64	d0, d13
 80166b2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80166b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ba:	d401      	bmi.n	80166c0 <_strtod_l+0x9a8>
 80166bc:	ee20 db0d 	vmul.f64	d13, d0, d13
 80166c0:	eeb1 cb4d 	vneg.f64	d12, d13
 80166c4:	4869      	ldr	r0, [pc, #420]	; (801686c <_strtod_l+0xb54>)
 80166c6:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 8016878 <_strtod_l+0xb60>
 80166ca:	ea0b 0100 	and.w	r1, fp, r0
 80166ce:	4561      	cmp	r1, ip
 80166d0:	ec53 2b1c 	vmov	r2, r3, d12
 80166d4:	d17a      	bne.n	80167cc <_strtod_l+0xab4>
 80166d6:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80166da:	ec49 8b10 	vmov	d0, r8, r9
 80166de:	910a      	str	r1, [sp, #40]	; 0x28
 80166e0:	f7ff f9c2 	bl	8015a68 <__ulp>
 80166e4:	ec49 8b1e 	vmov	d14, r8, r9
 80166e8:	4860      	ldr	r0, [pc, #384]	; (801686c <_strtod_l+0xb54>)
 80166ea:	eea0 eb0c 	vfma.f64	d14, d0, d12
 80166ee:	ee1e 3a90 	vmov	r3, s29
 80166f2:	4a60      	ldr	r2, [pc, #384]	; (8016874 <_strtod_l+0xb5c>)
 80166f4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80166f6:	4018      	ands	r0, r3
 80166f8:	4290      	cmp	r0, r2
 80166fa:	ec59 8b1e 	vmov	r8, r9, d14
 80166fe:	d93c      	bls.n	801677a <_strtod_l+0xa62>
 8016700:	ee18 2a90 	vmov	r2, s17
 8016704:	4b5a      	ldr	r3, [pc, #360]	; (8016870 <_strtod_l+0xb58>)
 8016706:	429a      	cmp	r2, r3
 8016708:	d104      	bne.n	8016714 <_strtod_l+0x9fc>
 801670a:	ee18 3a10 	vmov	r3, s16
 801670e:	3301      	adds	r3, #1
 8016710:	f43f ad40 	beq.w	8016194 <_strtod_l+0x47c>
 8016714:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8016870 <_strtod_l+0xb58>
 8016718:	f04f 38ff 	mov.w	r8, #4294967295
 801671c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801671e:	4620      	mov	r0, r4
 8016720:	f7fe fe76 	bl	8015410 <_Bfree>
 8016724:	4639      	mov	r1, r7
 8016726:	4620      	mov	r0, r4
 8016728:	f7fe fe72 	bl	8015410 <_Bfree>
 801672c:	4631      	mov	r1, r6
 801672e:	4620      	mov	r0, r4
 8016730:	f7fe fe6e 	bl	8015410 <_Bfree>
 8016734:	4629      	mov	r1, r5
 8016736:	4620      	mov	r0, r4
 8016738:	f7fe fe6a 	bl	8015410 <_Bfree>
 801673c:	e609      	b.n	8016352 <_strtod_l+0x63a>
 801673e:	f1b8 0f01 	cmp.w	r8, #1
 8016742:	d103      	bne.n	801674c <_strtod_l+0xa34>
 8016744:	f1b9 0f00 	cmp.w	r9, #0
 8016748:	f43f ad93 	beq.w	8016272 <_strtod_l+0x55a>
 801674c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8016750:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8016754:	e7b6      	b.n	80166c4 <_strtod_l+0x9ac>
 8016756:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801675a:	ee20 db0d 	vmul.f64	d13, d0, d13
 801675e:	f1ba 0f00 	cmp.w	sl, #0
 8016762:	d0ad      	beq.n	80166c0 <_strtod_l+0x9a8>
 8016764:	eeb0 cb4d 	vmov.f64	d12, d13
 8016768:	e7ac      	b.n	80166c4 <_strtod_l+0x9ac>
 801676a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 801676e:	eeb0 db4c 	vmov.f64	d13, d12
 8016772:	e7a7      	b.n	80166c4 <_strtod_l+0x9ac>
 8016774:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 8016778:	e7a4      	b.n	80166c4 <_strtod_l+0x9ac>
 801677a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801677e:	9b05      	ldr	r3, [sp, #20]
 8016780:	46cb      	mov	fp, r9
 8016782:	2b00      	cmp	r3, #0
 8016784:	d1ca      	bne.n	801671c <_strtod_l+0xa04>
 8016786:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801678a:	0d1b      	lsrs	r3, r3, #20
 801678c:	051b      	lsls	r3, r3, #20
 801678e:	4299      	cmp	r1, r3
 8016790:	d1c4      	bne.n	801671c <_strtod_l+0xa04>
 8016792:	ec51 0b1d 	vmov	r0, r1, d13
 8016796:	f7e9 ffe7 	bl	8000768 <__aeabi_d2lz>
 801679a:	f7e9 ff9f 	bl	80006dc <__aeabi_l2d>
 801679e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 80167a2:	ec41 0b17 	vmov	d7, r0, r1
 80167a6:	ea4b 0b08 	orr.w	fp, fp, r8
 80167aa:	ea5b 0b0a 	orrs.w	fp, fp, sl
 80167ae:	ee3d db47 	vsub.f64	d13, d13, d7
 80167b2:	d03c      	beq.n	801682e <_strtod_l+0xb16>
 80167b4:	eeb4 dbca 	vcmpe.f64	d13, d10
 80167b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167bc:	f53f acf4 	bmi.w	80161a8 <_strtod_l+0x490>
 80167c0:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80167c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167c8:	dda8      	ble.n	801671c <_strtod_l+0xa04>
 80167ca:	e4ed      	b.n	80161a8 <_strtod_l+0x490>
 80167cc:	9805      	ldr	r0, [sp, #20]
 80167ce:	b1f0      	cbz	r0, 801680e <_strtod_l+0xaf6>
 80167d0:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 80167d4:	d81b      	bhi.n	801680e <_strtod_l+0xaf6>
 80167d6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 8016860 <_strtod_l+0xb48>
 80167da:	eeb4 dbc7 	vcmpe.f64	d13, d7
 80167de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167e2:	d811      	bhi.n	8016808 <_strtod_l+0xaf0>
 80167e4:	eebc dbcd 	vcvt.u32.f64	s26, d13
 80167e8:	ee1d 3a10 	vmov	r3, s26
 80167ec:	2b01      	cmp	r3, #1
 80167ee:	bf38      	it	cc
 80167f0:	2301      	movcc	r3, #1
 80167f2:	ee0d 3a10 	vmov	s26, r3
 80167f6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 80167fa:	f1ba 0f00 	cmp.w	sl, #0
 80167fe:	d113      	bne.n	8016828 <_strtod_l+0xb10>
 8016800:	eeb1 7b4d 	vneg.f64	d7, d13
 8016804:	ec53 2b17 	vmov	r2, r3, d7
 8016808:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801680c:	1a43      	subs	r3, r0, r1
 801680e:	eeb0 0b48 	vmov.f64	d0, d8
 8016812:	ec43 2b1c 	vmov	d12, r2, r3
 8016816:	910a      	str	r1, [sp, #40]	; 0x28
 8016818:	f7ff f926 	bl	8015a68 <__ulp>
 801681c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801681e:	eeac 8b00 	vfma.f64	d8, d12, d0
 8016822:	ec59 8b18 	vmov	r8, r9, d8
 8016826:	e7aa      	b.n	801677e <_strtod_l+0xa66>
 8016828:	eeb0 7b4d 	vmov.f64	d7, d13
 801682c:	e7ea      	b.n	8016804 <_strtod_l+0xaec>
 801682e:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8016832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016836:	f57f af71 	bpl.w	801671c <_strtod_l+0xa04>
 801683a:	e4b5      	b.n	80161a8 <_strtod_l+0x490>
 801683c:	2300      	movs	r3, #0
 801683e:	9308      	str	r3, [sp, #32]
 8016840:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016842:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016844:	6013      	str	r3, [r2, #0]
 8016846:	f7ff baa6 	b.w	8015d96 <_strtod_l+0x7e>
 801684a:	2a65      	cmp	r2, #101	; 0x65
 801684c:	f43f aba2 	beq.w	8015f94 <_strtod_l+0x27c>
 8016850:	2a45      	cmp	r2, #69	; 0x45
 8016852:	f43f ab9f 	beq.w	8015f94 <_strtod_l+0x27c>
 8016856:	2101      	movs	r1, #1
 8016858:	f7ff bbd8 	b.w	801600c <_strtod_l+0x2f4>
 801685c:	f3af 8000 	nop.w
 8016860:	ffc00000 	.word	0xffc00000
 8016864:	41dfffff 	.word	0x41dfffff
 8016868:	000fffff 	.word	0x000fffff
 801686c:	7ff00000 	.word	0x7ff00000
 8016870:	7fefffff 	.word	0x7fefffff
 8016874:	7c9fffff 	.word	0x7c9fffff
 8016878:	7fe00000 	.word	0x7fe00000

0801687c <_strtod_r>:
 801687c:	4b01      	ldr	r3, [pc, #4]	; (8016884 <_strtod_r+0x8>)
 801687e:	f7ff ba4b 	b.w	8015d18 <_strtod_l>
 8016882:	bf00      	nop
 8016884:	24000174 	.word	0x24000174

08016888 <_strtol_l.constprop.0>:
 8016888:	2b01      	cmp	r3, #1
 801688a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801688e:	d001      	beq.n	8016894 <_strtol_l.constprop.0+0xc>
 8016890:	2b24      	cmp	r3, #36	; 0x24
 8016892:	d906      	bls.n	80168a2 <_strtol_l.constprop.0+0x1a>
 8016894:	f7fd ff0a 	bl	80146ac <__errno>
 8016898:	2316      	movs	r3, #22
 801689a:	6003      	str	r3, [r0, #0]
 801689c:	2000      	movs	r0, #0
 801689e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168a2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016988 <_strtol_l.constprop.0+0x100>
 80168a6:	460d      	mov	r5, r1
 80168a8:	462e      	mov	r6, r5
 80168aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80168ae:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80168b2:	f017 0708 	ands.w	r7, r7, #8
 80168b6:	d1f7      	bne.n	80168a8 <_strtol_l.constprop.0+0x20>
 80168b8:	2c2d      	cmp	r4, #45	; 0x2d
 80168ba:	d132      	bne.n	8016922 <_strtol_l.constprop.0+0x9a>
 80168bc:	782c      	ldrb	r4, [r5, #0]
 80168be:	2701      	movs	r7, #1
 80168c0:	1cb5      	adds	r5, r6, #2
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d05b      	beq.n	801697e <_strtol_l.constprop.0+0xf6>
 80168c6:	2b10      	cmp	r3, #16
 80168c8:	d109      	bne.n	80168de <_strtol_l.constprop.0+0x56>
 80168ca:	2c30      	cmp	r4, #48	; 0x30
 80168cc:	d107      	bne.n	80168de <_strtol_l.constprop.0+0x56>
 80168ce:	782c      	ldrb	r4, [r5, #0]
 80168d0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80168d4:	2c58      	cmp	r4, #88	; 0x58
 80168d6:	d14d      	bne.n	8016974 <_strtol_l.constprop.0+0xec>
 80168d8:	786c      	ldrb	r4, [r5, #1]
 80168da:	2310      	movs	r3, #16
 80168dc:	3502      	adds	r5, #2
 80168de:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80168e2:	f108 38ff 	add.w	r8, r8, #4294967295
 80168e6:	f04f 0e00 	mov.w	lr, #0
 80168ea:	fbb8 f9f3 	udiv	r9, r8, r3
 80168ee:	4676      	mov	r6, lr
 80168f0:	fb03 8a19 	mls	sl, r3, r9, r8
 80168f4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80168f8:	f1bc 0f09 	cmp.w	ip, #9
 80168fc:	d816      	bhi.n	801692c <_strtol_l.constprop.0+0xa4>
 80168fe:	4664      	mov	r4, ip
 8016900:	42a3      	cmp	r3, r4
 8016902:	dd24      	ble.n	801694e <_strtol_l.constprop.0+0xc6>
 8016904:	f1be 3fff 	cmp.w	lr, #4294967295
 8016908:	d008      	beq.n	801691c <_strtol_l.constprop.0+0x94>
 801690a:	45b1      	cmp	r9, r6
 801690c:	d31c      	bcc.n	8016948 <_strtol_l.constprop.0+0xc0>
 801690e:	d101      	bne.n	8016914 <_strtol_l.constprop.0+0x8c>
 8016910:	45a2      	cmp	sl, r4
 8016912:	db19      	blt.n	8016948 <_strtol_l.constprop.0+0xc0>
 8016914:	fb06 4603 	mla	r6, r6, r3, r4
 8016918:	f04f 0e01 	mov.w	lr, #1
 801691c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016920:	e7e8      	b.n	80168f4 <_strtol_l.constprop.0+0x6c>
 8016922:	2c2b      	cmp	r4, #43	; 0x2b
 8016924:	bf04      	itt	eq
 8016926:	782c      	ldrbeq	r4, [r5, #0]
 8016928:	1cb5      	addeq	r5, r6, #2
 801692a:	e7ca      	b.n	80168c2 <_strtol_l.constprop.0+0x3a>
 801692c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016930:	f1bc 0f19 	cmp.w	ip, #25
 8016934:	d801      	bhi.n	801693a <_strtol_l.constprop.0+0xb2>
 8016936:	3c37      	subs	r4, #55	; 0x37
 8016938:	e7e2      	b.n	8016900 <_strtol_l.constprop.0+0x78>
 801693a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801693e:	f1bc 0f19 	cmp.w	ip, #25
 8016942:	d804      	bhi.n	801694e <_strtol_l.constprop.0+0xc6>
 8016944:	3c57      	subs	r4, #87	; 0x57
 8016946:	e7db      	b.n	8016900 <_strtol_l.constprop.0+0x78>
 8016948:	f04f 3eff 	mov.w	lr, #4294967295
 801694c:	e7e6      	b.n	801691c <_strtol_l.constprop.0+0x94>
 801694e:	f1be 3fff 	cmp.w	lr, #4294967295
 8016952:	d105      	bne.n	8016960 <_strtol_l.constprop.0+0xd8>
 8016954:	2322      	movs	r3, #34	; 0x22
 8016956:	6003      	str	r3, [r0, #0]
 8016958:	4646      	mov	r6, r8
 801695a:	b942      	cbnz	r2, 801696e <_strtol_l.constprop.0+0xe6>
 801695c:	4630      	mov	r0, r6
 801695e:	e79e      	b.n	801689e <_strtol_l.constprop.0+0x16>
 8016960:	b107      	cbz	r7, 8016964 <_strtol_l.constprop.0+0xdc>
 8016962:	4276      	negs	r6, r6
 8016964:	2a00      	cmp	r2, #0
 8016966:	d0f9      	beq.n	801695c <_strtol_l.constprop.0+0xd4>
 8016968:	f1be 0f00 	cmp.w	lr, #0
 801696c:	d000      	beq.n	8016970 <_strtol_l.constprop.0+0xe8>
 801696e:	1e69      	subs	r1, r5, #1
 8016970:	6011      	str	r1, [r2, #0]
 8016972:	e7f3      	b.n	801695c <_strtol_l.constprop.0+0xd4>
 8016974:	2430      	movs	r4, #48	; 0x30
 8016976:	2b00      	cmp	r3, #0
 8016978:	d1b1      	bne.n	80168de <_strtol_l.constprop.0+0x56>
 801697a:	2308      	movs	r3, #8
 801697c:	e7af      	b.n	80168de <_strtol_l.constprop.0+0x56>
 801697e:	2c30      	cmp	r4, #48	; 0x30
 8016980:	d0a5      	beq.n	80168ce <_strtol_l.constprop.0+0x46>
 8016982:	230a      	movs	r3, #10
 8016984:	e7ab      	b.n	80168de <_strtol_l.constprop.0+0x56>
 8016986:	bf00      	nop
 8016988:	08017f61 	.word	0x08017f61

0801698c <_strtol_r>:
 801698c:	f7ff bf7c 	b.w	8016888 <_strtol_l.constprop.0>

08016990 <__ssputs_r>:
 8016990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016994:	688e      	ldr	r6, [r1, #8]
 8016996:	461f      	mov	r7, r3
 8016998:	42be      	cmp	r6, r7
 801699a:	680b      	ldr	r3, [r1, #0]
 801699c:	4682      	mov	sl, r0
 801699e:	460c      	mov	r4, r1
 80169a0:	4690      	mov	r8, r2
 80169a2:	d82c      	bhi.n	80169fe <__ssputs_r+0x6e>
 80169a4:	898a      	ldrh	r2, [r1, #12]
 80169a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80169aa:	d026      	beq.n	80169fa <__ssputs_r+0x6a>
 80169ac:	6965      	ldr	r5, [r4, #20]
 80169ae:	6909      	ldr	r1, [r1, #16]
 80169b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80169b4:	eba3 0901 	sub.w	r9, r3, r1
 80169b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80169bc:	1c7b      	adds	r3, r7, #1
 80169be:	444b      	add	r3, r9
 80169c0:	106d      	asrs	r5, r5, #1
 80169c2:	429d      	cmp	r5, r3
 80169c4:	bf38      	it	cc
 80169c6:	461d      	movcc	r5, r3
 80169c8:	0553      	lsls	r3, r2, #21
 80169ca:	d527      	bpl.n	8016a1c <__ssputs_r+0x8c>
 80169cc:	4629      	mov	r1, r5
 80169ce:	f7fc fe19 	bl	8013604 <_malloc_r>
 80169d2:	4606      	mov	r6, r0
 80169d4:	b360      	cbz	r0, 8016a30 <__ssputs_r+0xa0>
 80169d6:	6921      	ldr	r1, [r4, #16]
 80169d8:	464a      	mov	r2, r9
 80169da:	f000 fa0b 	bl	8016df4 <memcpy>
 80169de:	89a3      	ldrh	r3, [r4, #12]
 80169e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80169e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80169e8:	81a3      	strh	r3, [r4, #12]
 80169ea:	6126      	str	r6, [r4, #16]
 80169ec:	6165      	str	r5, [r4, #20]
 80169ee:	444e      	add	r6, r9
 80169f0:	eba5 0509 	sub.w	r5, r5, r9
 80169f4:	6026      	str	r6, [r4, #0]
 80169f6:	60a5      	str	r5, [r4, #8]
 80169f8:	463e      	mov	r6, r7
 80169fa:	42be      	cmp	r6, r7
 80169fc:	d900      	bls.n	8016a00 <__ssputs_r+0x70>
 80169fe:	463e      	mov	r6, r7
 8016a00:	6820      	ldr	r0, [r4, #0]
 8016a02:	4632      	mov	r2, r6
 8016a04:	4641      	mov	r1, r8
 8016a06:	f000 f9c9 	bl	8016d9c <memmove>
 8016a0a:	68a3      	ldr	r3, [r4, #8]
 8016a0c:	1b9b      	subs	r3, r3, r6
 8016a0e:	60a3      	str	r3, [r4, #8]
 8016a10:	6823      	ldr	r3, [r4, #0]
 8016a12:	4433      	add	r3, r6
 8016a14:	6023      	str	r3, [r4, #0]
 8016a16:	2000      	movs	r0, #0
 8016a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a1c:	462a      	mov	r2, r5
 8016a1e:	f000 fd9c 	bl	801755a <_realloc_r>
 8016a22:	4606      	mov	r6, r0
 8016a24:	2800      	cmp	r0, #0
 8016a26:	d1e0      	bne.n	80169ea <__ssputs_r+0x5a>
 8016a28:	6921      	ldr	r1, [r4, #16]
 8016a2a:	4650      	mov	r0, sl
 8016a2c:	f7fe fc64 	bl	80152f8 <_free_r>
 8016a30:	230c      	movs	r3, #12
 8016a32:	f8ca 3000 	str.w	r3, [sl]
 8016a36:	89a3      	ldrh	r3, [r4, #12]
 8016a38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016a3c:	81a3      	strh	r3, [r4, #12]
 8016a3e:	f04f 30ff 	mov.w	r0, #4294967295
 8016a42:	e7e9      	b.n	8016a18 <__ssputs_r+0x88>

08016a44 <_svfiprintf_r>:
 8016a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a48:	4698      	mov	r8, r3
 8016a4a:	898b      	ldrh	r3, [r1, #12]
 8016a4c:	061b      	lsls	r3, r3, #24
 8016a4e:	b09d      	sub	sp, #116	; 0x74
 8016a50:	4607      	mov	r7, r0
 8016a52:	460d      	mov	r5, r1
 8016a54:	4614      	mov	r4, r2
 8016a56:	d50e      	bpl.n	8016a76 <_svfiprintf_r+0x32>
 8016a58:	690b      	ldr	r3, [r1, #16]
 8016a5a:	b963      	cbnz	r3, 8016a76 <_svfiprintf_r+0x32>
 8016a5c:	2140      	movs	r1, #64	; 0x40
 8016a5e:	f7fc fdd1 	bl	8013604 <_malloc_r>
 8016a62:	6028      	str	r0, [r5, #0]
 8016a64:	6128      	str	r0, [r5, #16]
 8016a66:	b920      	cbnz	r0, 8016a72 <_svfiprintf_r+0x2e>
 8016a68:	230c      	movs	r3, #12
 8016a6a:	603b      	str	r3, [r7, #0]
 8016a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a70:	e0d0      	b.n	8016c14 <_svfiprintf_r+0x1d0>
 8016a72:	2340      	movs	r3, #64	; 0x40
 8016a74:	616b      	str	r3, [r5, #20]
 8016a76:	2300      	movs	r3, #0
 8016a78:	9309      	str	r3, [sp, #36]	; 0x24
 8016a7a:	2320      	movs	r3, #32
 8016a7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016a80:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a84:	2330      	movs	r3, #48	; 0x30
 8016a86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016c2c <_svfiprintf_r+0x1e8>
 8016a8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016a8e:	f04f 0901 	mov.w	r9, #1
 8016a92:	4623      	mov	r3, r4
 8016a94:	469a      	mov	sl, r3
 8016a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a9a:	b10a      	cbz	r2, 8016aa0 <_svfiprintf_r+0x5c>
 8016a9c:	2a25      	cmp	r2, #37	; 0x25
 8016a9e:	d1f9      	bne.n	8016a94 <_svfiprintf_r+0x50>
 8016aa0:	ebba 0b04 	subs.w	fp, sl, r4
 8016aa4:	d00b      	beq.n	8016abe <_svfiprintf_r+0x7a>
 8016aa6:	465b      	mov	r3, fp
 8016aa8:	4622      	mov	r2, r4
 8016aaa:	4629      	mov	r1, r5
 8016aac:	4638      	mov	r0, r7
 8016aae:	f7ff ff6f 	bl	8016990 <__ssputs_r>
 8016ab2:	3001      	adds	r0, #1
 8016ab4:	f000 80a9 	beq.w	8016c0a <_svfiprintf_r+0x1c6>
 8016ab8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016aba:	445a      	add	r2, fp
 8016abc:	9209      	str	r2, [sp, #36]	; 0x24
 8016abe:	f89a 3000 	ldrb.w	r3, [sl]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	f000 80a1 	beq.w	8016c0a <_svfiprintf_r+0x1c6>
 8016ac8:	2300      	movs	r3, #0
 8016aca:	f04f 32ff 	mov.w	r2, #4294967295
 8016ace:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ad2:	f10a 0a01 	add.w	sl, sl, #1
 8016ad6:	9304      	str	r3, [sp, #16]
 8016ad8:	9307      	str	r3, [sp, #28]
 8016ada:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ade:	931a      	str	r3, [sp, #104]	; 0x68
 8016ae0:	4654      	mov	r4, sl
 8016ae2:	2205      	movs	r2, #5
 8016ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ae8:	4850      	ldr	r0, [pc, #320]	; (8016c2c <_svfiprintf_r+0x1e8>)
 8016aea:	f7e9 fc11 	bl	8000310 <memchr>
 8016aee:	9a04      	ldr	r2, [sp, #16]
 8016af0:	b9d8      	cbnz	r0, 8016b2a <_svfiprintf_r+0xe6>
 8016af2:	06d0      	lsls	r0, r2, #27
 8016af4:	bf44      	itt	mi
 8016af6:	2320      	movmi	r3, #32
 8016af8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016afc:	0711      	lsls	r1, r2, #28
 8016afe:	bf44      	itt	mi
 8016b00:	232b      	movmi	r3, #43	; 0x2b
 8016b02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016b06:	f89a 3000 	ldrb.w	r3, [sl]
 8016b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8016b0c:	d015      	beq.n	8016b3a <_svfiprintf_r+0xf6>
 8016b0e:	9a07      	ldr	r2, [sp, #28]
 8016b10:	4654      	mov	r4, sl
 8016b12:	2000      	movs	r0, #0
 8016b14:	f04f 0c0a 	mov.w	ip, #10
 8016b18:	4621      	mov	r1, r4
 8016b1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b1e:	3b30      	subs	r3, #48	; 0x30
 8016b20:	2b09      	cmp	r3, #9
 8016b22:	d94d      	bls.n	8016bc0 <_svfiprintf_r+0x17c>
 8016b24:	b1b0      	cbz	r0, 8016b54 <_svfiprintf_r+0x110>
 8016b26:	9207      	str	r2, [sp, #28]
 8016b28:	e014      	b.n	8016b54 <_svfiprintf_r+0x110>
 8016b2a:	eba0 0308 	sub.w	r3, r0, r8
 8016b2e:	fa09 f303 	lsl.w	r3, r9, r3
 8016b32:	4313      	orrs	r3, r2
 8016b34:	9304      	str	r3, [sp, #16]
 8016b36:	46a2      	mov	sl, r4
 8016b38:	e7d2      	b.n	8016ae0 <_svfiprintf_r+0x9c>
 8016b3a:	9b03      	ldr	r3, [sp, #12]
 8016b3c:	1d19      	adds	r1, r3, #4
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	9103      	str	r1, [sp, #12]
 8016b42:	2b00      	cmp	r3, #0
 8016b44:	bfbb      	ittet	lt
 8016b46:	425b      	neglt	r3, r3
 8016b48:	f042 0202 	orrlt.w	r2, r2, #2
 8016b4c:	9307      	strge	r3, [sp, #28]
 8016b4e:	9307      	strlt	r3, [sp, #28]
 8016b50:	bfb8      	it	lt
 8016b52:	9204      	strlt	r2, [sp, #16]
 8016b54:	7823      	ldrb	r3, [r4, #0]
 8016b56:	2b2e      	cmp	r3, #46	; 0x2e
 8016b58:	d10c      	bne.n	8016b74 <_svfiprintf_r+0x130>
 8016b5a:	7863      	ldrb	r3, [r4, #1]
 8016b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8016b5e:	d134      	bne.n	8016bca <_svfiprintf_r+0x186>
 8016b60:	9b03      	ldr	r3, [sp, #12]
 8016b62:	1d1a      	adds	r2, r3, #4
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	9203      	str	r2, [sp, #12]
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	bfb8      	it	lt
 8016b6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8016b70:	3402      	adds	r4, #2
 8016b72:	9305      	str	r3, [sp, #20]
 8016b74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016c3c <_svfiprintf_r+0x1f8>
 8016b78:	7821      	ldrb	r1, [r4, #0]
 8016b7a:	2203      	movs	r2, #3
 8016b7c:	4650      	mov	r0, sl
 8016b7e:	f7e9 fbc7 	bl	8000310 <memchr>
 8016b82:	b138      	cbz	r0, 8016b94 <_svfiprintf_r+0x150>
 8016b84:	9b04      	ldr	r3, [sp, #16]
 8016b86:	eba0 000a 	sub.w	r0, r0, sl
 8016b8a:	2240      	movs	r2, #64	; 0x40
 8016b8c:	4082      	lsls	r2, r0
 8016b8e:	4313      	orrs	r3, r2
 8016b90:	3401      	adds	r4, #1
 8016b92:	9304      	str	r3, [sp, #16]
 8016b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016b98:	4825      	ldr	r0, [pc, #148]	; (8016c30 <_svfiprintf_r+0x1ec>)
 8016b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016b9e:	2206      	movs	r2, #6
 8016ba0:	f7e9 fbb6 	bl	8000310 <memchr>
 8016ba4:	2800      	cmp	r0, #0
 8016ba6:	d038      	beq.n	8016c1a <_svfiprintf_r+0x1d6>
 8016ba8:	4b22      	ldr	r3, [pc, #136]	; (8016c34 <_svfiprintf_r+0x1f0>)
 8016baa:	bb1b      	cbnz	r3, 8016bf4 <_svfiprintf_r+0x1b0>
 8016bac:	9b03      	ldr	r3, [sp, #12]
 8016bae:	3307      	adds	r3, #7
 8016bb0:	f023 0307 	bic.w	r3, r3, #7
 8016bb4:	3308      	adds	r3, #8
 8016bb6:	9303      	str	r3, [sp, #12]
 8016bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bba:	4433      	add	r3, r6
 8016bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8016bbe:	e768      	b.n	8016a92 <_svfiprintf_r+0x4e>
 8016bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8016bc4:	460c      	mov	r4, r1
 8016bc6:	2001      	movs	r0, #1
 8016bc8:	e7a6      	b.n	8016b18 <_svfiprintf_r+0xd4>
 8016bca:	2300      	movs	r3, #0
 8016bcc:	3401      	adds	r4, #1
 8016bce:	9305      	str	r3, [sp, #20]
 8016bd0:	4619      	mov	r1, r3
 8016bd2:	f04f 0c0a 	mov.w	ip, #10
 8016bd6:	4620      	mov	r0, r4
 8016bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bdc:	3a30      	subs	r2, #48	; 0x30
 8016bde:	2a09      	cmp	r2, #9
 8016be0:	d903      	bls.n	8016bea <_svfiprintf_r+0x1a6>
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d0c6      	beq.n	8016b74 <_svfiprintf_r+0x130>
 8016be6:	9105      	str	r1, [sp, #20]
 8016be8:	e7c4      	b.n	8016b74 <_svfiprintf_r+0x130>
 8016bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8016bee:	4604      	mov	r4, r0
 8016bf0:	2301      	movs	r3, #1
 8016bf2:	e7f0      	b.n	8016bd6 <_svfiprintf_r+0x192>
 8016bf4:	ab03      	add	r3, sp, #12
 8016bf6:	9300      	str	r3, [sp, #0]
 8016bf8:	462a      	mov	r2, r5
 8016bfa:	4b0f      	ldr	r3, [pc, #60]	; (8016c38 <_svfiprintf_r+0x1f4>)
 8016bfc:	a904      	add	r1, sp, #16
 8016bfe:	4638      	mov	r0, r7
 8016c00:	f7fc fe1e 	bl	8013840 <_printf_float>
 8016c04:	1c42      	adds	r2, r0, #1
 8016c06:	4606      	mov	r6, r0
 8016c08:	d1d6      	bne.n	8016bb8 <_svfiprintf_r+0x174>
 8016c0a:	89ab      	ldrh	r3, [r5, #12]
 8016c0c:	065b      	lsls	r3, r3, #25
 8016c0e:	f53f af2d 	bmi.w	8016a6c <_svfiprintf_r+0x28>
 8016c12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c14:	b01d      	add	sp, #116	; 0x74
 8016c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c1a:	ab03      	add	r3, sp, #12
 8016c1c:	9300      	str	r3, [sp, #0]
 8016c1e:	462a      	mov	r2, r5
 8016c20:	4b05      	ldr	r3, [pc, #20]	; (8016c38 <_svfiprintf_r+0x1f4>)
 8016c22:	a904      	add	r1, sp, #16
 8016c24:	4638      	mov	r0, r7
 8016c26:	f7fd f893 	bl	8013d50 <_printf_i>
 8016c2a:	e7eb      	b.n	8016c04 <_svfiprintf_r+0x1c0>
 8016c2c:	08018061 	.word	0x08018061
 8016c30:	0801806b 	.word	0x0801806b
 8016c34:	08013841 	.word	0x08013841
 8016c38:	08016991 	.word	0x08016991
 8016c3c:	08018067 	.word	0x08018067

08016c40 <__sflush_r>:
 8016c40:	898a      	ldrh	r2, [r1, #12]
 8016c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c46:	4605      	mov	r5, r0
 8016c48:	0710      	lsls	r0, r2, #28
 8016c4a:	460c      	mov	r4, r1
 8016c4c:	d458      	bmi.n	8016d00 <__sflush_r+0xc0>
 8016c4e:	684b      	ldr	r3, [r1, #4]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	dc05      	bgt.n	8016c60 <__sflush_r+0x20>
 8016c54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	dc02      	bgt.n	8016c60 <__sflush_r+0x20>
 8016c5a:	2000      	movs	r0, #0
 8016c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016c62:	2e00      	cmp	r6, #0
 8016c64:	d0f9      	beq.n	8016c5a <__sflush_r+0x1a>
 8016c66:	2300      	movs	r3, #0
 8016c68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016c6c:	682f      	ldr	r7, [r5, #0]
 8016c6e:	6a21      	ldr	r1, [r4, #32]
 8016c70:	602b      	str	r3, [r5, #0]
 8016c72:	d032      	beq.n	8016cda <__sflush_r+0x9a>
 8016c74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016c76:	89a3      	ldrh	r3, [r4, #12]
 8016c78:	075a      	lsls	r2, r3, #29
 8016c7a:	d505      	bpl.n	8016c88 <__sflush_r+0x48>
 8016c7c:	6863      	ldr	r3, [r4, #4]
 8016c7e:	1ac0      	subs	r0, r0, r3
 8016c80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016c82:	b10b      	cbz	r3, 8016c88 <__sflush_r+0x48>
 8016c84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016c86:	1ac0      	subs	r0, r0, r3
 8016c88:	2300      	movs	r3, #0
 8016c8a:	4602      	mov	r2, r0
 8016c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016c8e:	6a21      	ldr	r1, [r4, #32]
 8016c90:	4628      	mov	r0, r5
 8016c92:	47b0      	blx	r6
 8016c94:	1c43      	adds	r3, r0, #1
 8016c96:	89a3      	ldrh	r3, [r4, #12]
 8016c98:	d106      	bne.n	8016ca8 <__sflush_r+0x68>
 8016c9a:	6829      	ldr	r1, [r5, #0]
 8016c9c:	291d      	cmp	r1, #29
 8016c9e:	d82b      	bhi.n	8016cf8 <__sflush_r+0xb8>
 8016ca0:	4a29      	ldr	r2, [pc, #164]	; (8016d48 <__sflush_r+0x108>)
 8016ca2:	410a      	asrs	r2, r1
 8016ca4:	07d6      	lsls	r6, r2, #31
 8016ca6:	d427      	bmi.n	8016cf8 <__sflush_r+0xb8>
 8016ca8:	2200      	movs	r2, #0
 8016caa:	6062      	str	r2, [r4, #4]
 8016cac:	04d9      	lsls	r1, r3, #19
 8016cae:	6922      	ldr	r2, [r4, #16]
 8016cb0:	6022      	str	r2, [r4, #0]
 8016cb2:	d504      	bpl.n	8016cbe <__sflush_r+0x7e>
 8016cb4:	1c42      	adds	r2, r0, #1
 8016cb6:	d101      	bne.n	8016cbc <__sflush_r+0x7c>
 8016cb8:	682b      	ldr	r3, [r5, #0]
 8016cba:	b903      	cbnz	r3, 8016cbe <__sflush_r+0x7e>
 8016cbc:	6560      	str	r0, [r4, #84]	; 0x54
 8016cbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016cc0:	602f      	str	r7, [r5, #0]
 8016cc2:	2900      	cmp	r1, #0
 8016cc4:	d0c9      	beq.n	8016c5a <__sflush_r+0x1a>
 8016cc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016cca:	4299      	cmp	r1, r3
 8016ccc:	d002      	beq.n	8016cd4 <__sflush_r+0x94>
 8016cce:	4628      	mov	r0, r5
 8016cd0:	f7fe fb12 	bl	80152f8 <_free_r>
 8016cd4:	2000      	movs	r0, #0
 8016cd6:	6360      	str	r0, [r4, #52]	; 0x34
 8016cd8:	e7c0      	b.n	8016c5c <__sflush_r+0x1c>
 8016cda:	2301      	movs	r3, #1
 8016cdc:	4628      	mov	r0, r5
 8016cde:	47b0      	blx	r6
 8016ce0:	1c41      	adds	r1, r0, #1
 8016ce2:	d1c8      	bne.n	8016c76 <__sflush_r+0x36>
 8016ce4:	682b      	ldr	r3, [r5, #0]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d0c5      	beq.n	8016c76 <__sflush_r+0x36>
 8016cea:	2b1d      	cmp	r3, #29
 8016cec:	d001      	beq.n	8016cf2 <__sflush_r+0xb2>
 8016cee:	2b16      	cmp	r3, #22
 8016cf0:	d101      	bne.n	8016cf6 <__sflush_r+0xb6>
 8016cf2:	602f      	str	r7, [r5, #0]
 8016cf4:	e7b1      	b.n	8016c5a <__sflush_r+0x1a>
 8016cf6:	89a3      	ldrh	r3, [r4, #12]
 8016cf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016cfc:	81a3      	strh	r3, [r4, #12]
 8016cfe:	e7ad      	b.n	8016c5c <__sflush_r+0x1c>
 8016d00:	690f      	ldr	r7, [r1, #16]
 8016d02:	2f00      	cmp	r7, #0
 8016d04:	d0a9      	beq.n	8016c5a <__sflush_r+0x1a>
 8016d06:	0793      	lsls	r3, r2, #30
 8016d08:	680e      	ldr	r6, [r1, #0]
 8016d0a:	bf08      	it	eq
 8016d0c:	694b      	ldreq	r3, [r1, #20]
 8016d0e:	600f      	str	r7, [r1, #0]
 8016d10:	bf18      	it	ne
 8016d12:	2300      	movne	r3, #0
 8016d14:	eba6 0807 	sub.w	r8, r6, r7
 8016d18:	608b      	str	r3, [r1, #8]
 8016d1a:	f1b8 0f00 	cmp.w	r8, #0
 8016d1e:	dd9c      	ble.n	8016c5a <__sflush_r+0x1a>
 8016d20:	6a21      	ldr	r1, [r4, #32]
 8016d22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016d24:	4643      	mov	r3, r8
 8016d26:	463a      	mov	r2, r7
 8016d28:	4628      	mov	r0, r5
 8016d2a:	47b0      	blx	r6
 8016d2c:	2800      	cmp	r0, #0
 8016d2e:	dc06      	bgt.n	8016d3e <__sflush_r+0xfe>
 8016d30:	89a3      	ldrh	r3, [r4, #12]
 8016d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d36:	81a3      	strh	r3, [r4, #12]
 8016d38:	f04f 30ff 	mov.w	r0, #4294967295
 8016d3c:	e78e      	b.n	8016c5c <__sflush_r+0x1c>
 8016d3e:	4407      	add	r7, r0
 8016d40:	eba8 0800 	sub.w	r8, r8, r0
 8016d44:	e7e9      	b.n	8016d1a <__sflush_r+0xda>
 8016d46:	bf00      	nop
 8016d48:	dfbffffe 	.word	0xdfbffffe

08016d4c <_fflush_r>:
 8016d4c:	b538      	push	{r3, r4, r5, lr}
 8016d4e:	690b      	ldr	r3, [r1, #16]
 8016d50:	4605      	mov	r5, r0
 8016d52:	460c      	mov	r4, r1
 8016d54:	b913      	cbnz	r3, 8016d5c <_fflush_r+0x10>
 8016d56:	2500      	movs	r5, #0
 8016d58:	4628      	mov	r0, r5
 8016d5a:	bd38      	pop	{r3, r4, r5, pc}
 8016d5c:	b118      	cbz	r0, 8016d66 <_fflush_r+0x1a>
 8016d5e:	6a03      	ldr	r3, [r0, #32]
 8016d60:	b90b      	cbnz	r3, 8016d66 <_fflush_r+0x1a>
 8016d62:	f7fd fba7 	bl	80144b4 <__sinit>
 8016d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d0f3      	beq.n	8016d56 <_fflush_r+0xa>
 8016d6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016d70:	07d0      	lsls	r0, r2, #31
 8016d72:	d404      	bmi.n	8016d7e <_fflush_r+0x32>
 8016d74:	0599      	lsls	r1, r3, #22
 8016d76:	d402      	bmi.n	8016d7e <_fflush_r+0x32>
 8016d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d7a:	f7eb fdde 	bl	800293a <__retarget_lock_acquire_recursive>
 8016d7e:	4628      	mov	r0, r5
 8016d80:	4621      	mov	r1, r4
 8016d82:	f7ff ff5d 	bl	8016c40 <__sflush_r>
 8016d86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016d88:	07da      	lsls	r2, r3, #31
 8016d8a:	4605      	mov	r5, r0
 8016d8c:	d4e4      	bmi.n	8016d58 <_fflush_r+0xc>
 8016d8e:	89a3      	ldrh	r3, [r4, #12]
 8016d90:	059b      	lsls	r3, r3, #22
 8016d92:	d4e1      	bmi.n	8016d58 <_fflush_r+0xc>
 8016d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016d96:	f7eb fde4 	bl	8002962 <__retarget_lock_release_recursive>
 8016d9a:	e7dd      	b.n	8016d58 <_fflush_r+0xc>

08016d9c <memmove>:
 8016d9c:	4288      	cmp	r0, r1
 8016d9e:	b510      	push	{r4, lr}
 8016da0:	eb01 0402 	add.w	r4, r1, r2
 8016da4:	d902      	bls.n	8016dac <memmove+0x10>
 8016da6:	4284      	cmp	r4, r0
 8016da8:	4623      	mov	r3, r4
 8016daa:	d807      	bhi.n	8016dbc <memmove+0x20>
 8016dac:	1e43      	subs	r3, r0, #1
 8016dae:	42a1      	cmp	r1, r4
 8016db0:	d008      	beq.n	8016dc4 <memmove+0x28>
 8016db2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016db6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016dba:	e7f8      	b.n	8016dae <memmove+0x12>
 8016dbc:	4402      	add	r2, r0
 8016dbe:	4601      	mov	r1, r0
 8016dc0:	428a      	cmp	r2, r1
 8016dc2:	d100      	bne.n	8016dc6 <memmove+0x2a>
 8016dc4:	bd10      	pop	{r4, pc}
 8016dc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016dca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016dce:	e7f7      	b.n	8016dc0 <memmove+0x24>

08016dd0 <strncmp>:
 8016dd0:	b510      	push	{r4, lr}
 8016dd2:	b16a      	cbz	r2, 8016df0 <strncmp+0x20>
 8016dd4:	3901      	subs	r1, #1
 8016dd6:	1884      	adds	r4, r0, r2
 8016dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ddc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8016de0:	429a      	cmp	r2, r3
 8016de2:	d103      	bne.n	8016dec <strncmp+0x1c>
 8016de4:	42a0      	cmp	r0, r4
 8016de6:	d001      	beq.n	8016dec <strncmp+0x1c>
 8016de8:	2a00      	cmp	r2, #0
 8016dea:	d1f5      	bne.n	8016dd8 <strncmp+0x8>
 8016dec:	1ad0      	subs	r0, r2, r3
 8016dee:	bd10      	pop	{r4, pc}
 8016df0:	4610      	mov	r0, r2
 8016df2:	e7fc      	b.n	8016dee <strncmp+0x1e>

08016df4 <memcpy>:
 8016df4:	440a      	add	r2, r1
 8016df6:	4291      	cmp	r1, r2
 8016df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8016dfc:	d100      	bne.n	8016e00 <memcpy+0xc>
 8016dfe:	4770      	bx	lr
 8016e00:	b510      	push	{r4, lr}
 8016e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e0a:	4291      	cmp	r1, r2
 8016e0c:	d1f9      	bne.n	8016e02 <memcpy+0xe>
 8016e0e:	bd10      	pop	{r4, pc}

08016e10 <nan>:
 8016e10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016e18 <nan+0x8>
 8016e14:	4770      	bx	lr
 8016e16:	bf00      	nop
 8016e18:	00000000 	.word	0x00000000
 8016e1c:	7ff80000 	.word	0x7ff80000

08016e20 <__assert_func>:
 8016e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016e22:	4614      	mov	r4, r2
 8016e24:	461a      	mov	r2, r3
 8016e26:	4b09      	ldr	r3, [pc, #36]	; (8016e4c <__assert_func+0x2c>)
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	4605      	mov	r5, r0
 8016e2c:	68d8      	ldr	r0, [r3, #12]
 8016e2e:	b14c      	cbz	r4, 8016e44 <__assert_func+0x24>
 8016e30:	4b07      	ldr	r3, [pc, #28]	; (8016e50 <__assert_func+0x30>)
 8016e32:	9100      	str	r1, [sp, #0]
 8016e34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016e38:	4906      	ldr	r1, [pc, #24]	; (8016e54 <__assert_func+0x34>)
 8016e3a:	462b      	mov	r3, r5
 8016e3c:	f000 fbca 	bl	80175d4 <fiprintf>
 8016e40:	f000 fbda 	bl	80175f8 <abort>
 8016e44:	4b04      	ldr	r3, [pc, #16]	; (8016e58 <__assert_func+0x38>)
 8016e46:	461c      	mov	r4, r3
 8016e48:	e7f3      	b.n	8016e32 <__assert_func+0x12>
 8016e4a:	bf00      	nop
 8016e4c:	24000170 	.word	0x24000170
 8016e50:	0801807a 	.word	0x0801807a
 8016e54:	08018087 	.word	0x08018087
 8016e58:	080180b5 	.word	0x080180b5

08016e5c <_calloc_r>:
 8016e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016e5e:	fba1 2402 	umull	r2, r4, r1, r2
 8016e62:	b94c      	cbnz	r4, 8016e78 <_calloc_r+0x1c>
 8016e64:	4611      	mov	r1, r2
 8016e66:	9201      	str	r2, [sp, #4]
 8016e68:	f7fc fbcc 	bl	8013604 <_malloc_r>
 8016e6c:	9a01      	ldr	r2, [sp, #4]
 8016e6e:	4605      	mov	r5, r0
 8016e70:	b930      	cbnz	r0, 8016e80 <_calloc_r+0x24>
 8016e72:	4628      	mov	r0, r5
 8016e74:	b003      	add	sp, #12
 8016e76:	bd30      	pop	{r4, r5, pc}
 8016e78:	220c      	movs	r2, #12
 8016e7a:	6002      	str	r2, [r0, #0]
 8016e7c:	2500      	movs	r5, #0
 8016e7e:	e7f8      	b.n	8016e72 <_calloc_r+0x16>
 8016e80:	4621      	mov	r1, r4
 8016e82:	f7fd fbb0 	bl	80145e6 <memset>
 8016e86:	e7f4      	b.n	8016e72 <_calloc_r+0x16>

08016e88 <rshift>:
 8016e88:	6903      	ldr	r3, [r0, #16]
 8016e8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8016e8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e92:	ea4f 1261 	mov.w	r2, r1, asr #5
 8016e96:	f100 0414 	add.w	r4, r0, #20
 8016e9a:	dd45      	ble.n	8016f28 <rshift+0xa0>
 8016e9c:	f011 011f 	ands.w	r1, r1, #31
 8016ea0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016ea4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016ea8:	d10c      	bne.n	8016ec4 <rshift+0x3c>
 8016eaa:	f100 0710 	add.w	r7, r0, #16
 8016eae:	4629      	mov	r1, r5
 8016eb0:	42b1      	cmp	r1, r6
 8016eb2:	d334      	bcc.n	8016f1e <rshift+0x96>
 8016eb4:	1a9b      	subs	r3, r3, r2
 8016eb6:	009b      	lsls	r3, r3, #2
 8016eb8:	1eea      	subs	r2, r5, #3
 8016eba:	4296      	cmp	r6, r2
 8016ebc:	bf38      	it	cc
 8016ebe:	2300      	movcc	r3, #0
 8016ec0:	4423      	add	r3, r4
 8016ec2:	e015      	b.n	8016ef0 <rshift+0x68>
 8016ec4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016ec8:	f1c1 0820 	rsb	r8, r1, #32
 8016ecc:	40cf      	lsrs	r7, r1
 8016ece:	f105 0e04 	add.w	lr, r5, #4
 8016ed2:	46a1      	mov	r9, r4
 8016ed4:	4576      	cmp	r6, lr
 8016ed6:	46f4      	mov	ip, lr
 8016ed8:	d815      	bhi.n	8016f06 <rshift+0x7e>
 8016eda:	1a9a      	subs	r2, r3, r2
 8016edc:	0092      	lsls	r2, r2, #2
 8016ede:	3a04      	subs	r2, #4
 8016ee0:	3501      	adds	r5, #1
 8016ee2:	42ae      	cmp	r6, r5
 8016ee4:	bf38      	it	cc
 8016ee6:	2200      	movcc	r2, #0
 8016ee8:	18a3      	adds	r3, r4, r2
 8016eea:	50a7      	str	r7, [r4, r2]
 8016eec:	b107      	cbz	r7, 8016ef0 <rshift+0x68>
 8016eee:	3304      	adds	r3, #4
 8016ef0:	1b1a      	subs	r2, r3, r4
 8016ef2:	42a3      	cmp	r3, r4
 8016ef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016ef8:	bf08      	it	eq
 8016efa:	2300      	moveq	r3, #0
 8016efc:	6102      	str	r2, [r0, #16]
 8016efe:	bf08      	it	eq
 8016f00:	6143      	streq	r3, [r0, #20]
 8016f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016f06:	f8dc c000 	ldr.w	ip, [ip]
 8016f0a:	fa0c fc08 	lsl.w	ip, ip, r8
 8016f0e:	ea4c 0707 	orr.w	r7, ip, r7
 8016f12:	f849 7b04 	str.w	r7, [r9], #4
 8016f16:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016f1a:	40cf      	lsrs	r7, r1
 8016f1c:	e7da      	b.n	8016ed4 <rshift+0x4c>
 8016f1e:	f851 cb04 	ldr.w	ip, [r1], #4
 8016f22:	f847 cf04 	str.w	ip, [r7, #4]!
 8016f26:	e7c3      	b.n	8016eb0 <rshift+0x28>
 8016f28:	4623      	mov	r3, r4
 8016f2a:	e7e1      	b.n	8016ef0 <rshift+0x68>

08016f2c <__hexdig_fun>:
 8016f2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8016f30:	2b09      	cmp	r3, #9
 8016f32:	d802      	bhi.n	8016f3a <__hexdig_fun+0xe>
 8016f34:	3820      	subs	r0, #32
 8016f36:	b2c0      	uxtb	r0, r0
 8016f38:	4770      	bx	lr
 8016f3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8016f3e:	2b05      	cmp	r3, #5
 8016f40:	d801      	bhi.n	8016f46 <__hexdig_fun+0x1a>
 8016f42:	3847      	subs	r0, #71	; 0x47
 8016f44:	e7f7      	b.n	8016f36 <__hexdig_fun+0xa>
 8016f46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8016f4a:	2b05      	cmp	r3, #5
 8016f4c:	d801      	bhi.n	8016f52 <__hexdig_fun+0x26>
 8016f4e:	3827      	subs	r0, #39	; 0x27
 8016f50:	e7f1      	b.n	8016f36 <__hexdig_fun+0xa>
 8016f52:	2000      	movs	r0, #0
 8016f54:	4770      	bx	lr
	...

08016f58 <__gethex>:
 8016f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f5c:	4617      	mov	r7, r2
 8016f5e:	680a      	ldr	r2, [r1, #0]
 8016f60:	b085      	sub	sp, #20
 8016f62:	f102 0b02 	add.w	fp, r2, #2
 8016f66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8016f6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8016f6e:	4681      	mov	r9, r0
 8016f70:	468a      	mov	sl, r1
 8016f72:	9302      	str	r3, [sp, #8]
 8016f74:	32fe      	adds	r2, #254	; 0xfe
 8016f76:	eb02 030b 	add.w	r3, r2, fp
 8016f7a:	46d8      	mov	r8, fp
 8016f7c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8016f80:	9301      	str	r3, [sp, #4]
 8016f82:	2830      	cmp	r0, #48	; 0x30
 8016f84:	d0f7      	beq.n	8016f76 <__gethex+0x1e>
 8016f86:	f7ff ffd1 	bl	8016f2c <__hexdig_fun>
 8016f8a:	4604      	mov	r4, r0
 8016f8c:	2800      	cmp	r0, #0
 8016f8e:	d138      	bne.n	8017002 <__gethex+0xaa>
 8016f90:	49a7      	ldr	r1, [pc, #668]	; (8017230 <__gethex+0x2d8>)
 8016f92:	2201      	movs	r2, #1
 8016f94:	4640      	mov	r0, r8
 8016f96:	f7ff ff1b 	bl	8016dd0 <strncmp>
 8016f9a:	4606      	mov	r6, r0
 8016f9c:	2800      	cmp	r0, #0
 8016f9e:	d169      	bne.n	8017074 <__gethex+0x11c>
 8016fa0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8016fa4:	465d      	mov	r5, fp
 8016fa6:	f7ff ffc1 	bl	8016f2c <__hexdig_fun>
 8016faa:	2800      	cmp	r0, #0
 8016fac:	d064      	beq.n	8017078 <__gethex+0x120>
 8016fae:	465a      	mov	r2, fp
 8016fb0:	7810      	ldrb	r0, [r2, #0]
 8016fb2:	2830      	cmp	r0, #48	; 0x30
 8016fb4:	4690      	mov	r8, r2
 8016fb6:	f102 0201 	add.w	r2, r2, #1
 8016fba:	d0f9      	beq.n	8016fb0 <__gethex+0x58>
 8016fbc:	f7ff ffb6 	bl	8016f2c <__hexdig_fun>
 8016fc0:	2301      	movs	r3, #1
 8016fc2:	fab0 f480 	clz	r4, r0
 8016fc6:	0964      	lsrs	r4, r4, #5
 8016fc8:	465e      	mov	r6, fp
 8016fca:	9301      	str	r3, [sp, #4]
 8016fcc:	4642      	mov	r2, r8
 8016fce:	4615      	mov	r5, r2
 8016fd0:	3201      	adds	r2, #1
 8016fd2:	7828      	ldrb	r0, [r5, #0]
 8016fd4:	f7ff ffaa 	bl	8016f2c <__hexdig_fun>
 8016fd8:	2800      	cmp	r0, #0
 8016fda:	d1f8      	bne.n	8016fce <__gethex+0x76>
 8016fdc:	4994      	ldr	r1, [pc, #592]	; (8017230 <__gethex+0x2d8>)
 8016fde:	2201      	movs	r2, #1
 8016fe0:	4628      	mov	r0, r5
 8016fe2:	f7ff fef5 	bl	8016dd0 <strncmp>
 8016fe6:	b978      	cbnz	r0, 8017008 <__gethex+0xb0>
 8016fe8:	b946      	cbnz	r6, 8016ffc <__gethex+0xa4>
 8016fea:	1c6e      	adds	r6, r5, #1
 8016fec:	4632      	mov	r2, r6
 8016fee:	4615      	mov	r5, r2
 8016ff0:	3201      	adds	r2, #1
 8016ff2:	7828      	ldrb	r0, [r5, #0]
 8016ff4:	f7ff ff9a 	bl	8016f2c <__hexdig_fun>
 8016ff8:	2800      	cmp	r0, #0
 8016ffa:	d1f8      	bne.n	8016fee <__gethex+0x96>
 8016ffc:	1b73      	subs	r3, r6, r5
 8016ffe:	009e      	lsls	r6, r3, #2
 8017000:	e004      	b.n	801700c <__gethex+0xb4>
 8017002:	2400      	movs	r4, #0
 8017004:	4626      	mov	r6, r4
 8017006:	e7e1      	b.n	8016fcc <__gethex+0x74>
 8017008:	2e00      	cmp	r6, #0
 801700a:	d1f7      	bne.n	8016ffc <__gethex+0xa4>
 801700c:	782b      	ldrb	r3, [r5, #0]
 801700e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8017012:	2b50      	cmp	r3, #80	; 0x50
 8017014:	d13d      	bne.n	8017092 <__gethex+0x13a>
 8017016:	786b      	ldrb	r3, [r5, #1]
 8017018:	2b2b      	cmp	r3, #43	; 0x2b
 801701a:	d02f      	beq.n	801707c <__gethex+0x124>
 801701c:	2b2d      	cmp	r3, #45	; 0x2d
 801701e:	d031      	beq.n	8017084 <__gethex+0x12c>
 8017020:	1c69      	adds	r1, r5, #1
 8017022:	f04f 0b00 	mov.w	fp, #0
 8017026:	7808      	ldrb	r0, [r1, #0]
 8017028:	f7ff ff80 	bl	8016f2c <__hexdig_fun>
 801702c:	1e42      	subs	r2, r0, #1
 801702e:	b2d2      	uxtb	r2, r2
 8017030:	2a18      	cmp	r2, #24
 8017032:	d82e      	bhi.n	8017092 <__gethex+0x13a>
 8017034:	f1a0 0210 	sub.w	r2, r0, #16
 8017038:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801703c:	f7ff ff76 	bl	8016f2c <__hexdig_fun>
 8017040:	f100 3cff 	add.w	ip, r0, #4294967295
 8017044:	fa5f fc8c 	uxtb.w	ip, ip
 8017048:	f1bc 0f18 	cmp.w	ip, #24
 801704c:	d91d      	bls.n	801708a <__gethex+0x132>
 801704e:	f1bb 0f00 	cmp.w	fp, #0
 8017052:	d000      	beq.n	8017056 <__gethex+0xfe>
 8017054:	4252      	negs	r2, r2
 8017056:	4416      	add	r6, r2
 8017058:	f8ca 1000 	str.w	r1, [sl]
 801705c:	b1dc      	cbz	r4, 8017096 <__gethex+0x13e>
 801705e:	9b01      	ldr	r3, [sp, #4]
 8017060:	2b00      	cmp	r3, #0
 8017062:	bf14      	ite	ne
 8017064:	f04f 0800 	movne.w	r8, #0
 8017068:	f04f 0806 	moveq.w	r8, #6
 801706c:	4640      	mov	r0, r8
 801706e:	b005      	add	sp, #20
 8017070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017074:	4645      	mov	r5, r8
 8017076:	4626      	mov	r6, r4
 8017078:	2401      	movs	r4, #1
 801707a:	e7c7      	b.n	801700c <__gethex+0xb4>
 801707c:	f04f 0b00 	mov.w	fp, #0
 8017080:	1ca9      	adds	r1, r5, #2
 8017082:	e7d0      	b.n	8017026 <__gethex+0xce>
 8017084:	f04f 0b01 	mov.w	fp, #1
 8017088:	e7fa      	b.n	8017080 <__gethex+0x128>
 801708a:	230a      	movs	r3, #10
 801708c:	fb03 0002 	mla	r0, r3, r2, r0
 8017090:	e7d0      	b.n	8017034 <__gethex+0xdc>
 8017092:	4629      	mov	r1, r5
 8017094:	e7e0      	b.n	8017058 <__gethex+0x100>
 8017096:	eba5 0308 	sub.w	r3, r5, r8
 801709a:	3b01      	subs	r3, #1
 801709c:	4621      	mov	r1, r4
 801709e:	2b07      	cmp	r3, #7
 80170a0:	dc0a      	bgt.n	80170b8 <__gethex+0x160>
 80170a2:	4648      	mov	r0, r9
 80170a4:	f7fe f974 	bl	8015390 <_Balloc>
 80170a8:	4604      	mov	r4, r0
 80170aa:	b940      	cbnz	r0, 80170be <__gethex+0x166>
 80170ac:	4b61      	ldr	r3, [pc, #388]	; (8017234 <__gethex+0x2dc>)
 80170ae:	4602      	mov	r2, r0
 80170b0:	21e4      	movs	r1, #228	; 0xe4
 80170b2:	4861      	ldr	r0, [pc, #388]	; (8017238 <__gethex+0x2e0>)
 80170b4:	f7ff feb4 	bl	8016e20 <__assert_func>
 80170b8:	3101      	adds	r1, #1
 80170ba:	105b      	asrs	r3, r3, #1
 80170bc:	e7ef      	b.n	801709e <__gethex+0x146>
 80170be:	f100 0a14 	add.w	sl, r0, #20
 80170c2:	2300      	movs	r3, #0
 80170c4:	495a      	ldr	r1, [pc, #360]	; (8017230 <__gethex+0x2d8>)
 80170c6:	f8cd a004 	str.w	sl, [sp, #4]
 80170ca:	469b      	mov	fp, r3
 80170cc:	45a8      	cmp	r8, r5
 80170ce:	d342      	bcc.n	8017156 <__gethex+0x1fe>
 80170d0:	9801      	ldr	r0, [sp, #4]
 80170d2:	f840 bb04 	str.w	fp, [r0], #4
 80170d6:	eba0 000a 	sub.w	r0, r0, sl
 80170da:	1080      	asrs	r0, r0, #2
 80170dc:	6120      	str	r0, [r4, #16]
 80170de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80170e2:	4658      	mov	r0, fp
 80170e4:	f7fe fa46 	bl	8015574 <__hi0bits>
 80170e8:	683d      	ldr	r5, [r7, #0]
 80170ea:	eba8 0000 	sub.w	r0, r8, r0
 80170ee:	42a8      	cmp	r0, r5
 80170f0:	dd59      	ble.n	80171a6 <__gethex+0x24e>
 80170f2:	eba0 0805 	sub.w	r8, r0, r5
 80170f6:	4641      	mov	r1, r8
 80170f8:	4620      	mov	r0, r4
 80170fa:	f7fe fdd2 	bl	8015ca2 <__any_on>
 80170fe:	4683      	mov	fp, r0
 8017100:	b1b8      	cbz	r0, 8017132 <__gethex+0x1da>
 8017102:	f108 33ff 	add.w	r3, r8, #4294967295
 8017106:	1159      	asrs	r1, r3, #5
 8017108:	f003 021f 	and.w	r2, r3, #31
 801710c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8017110:	f04f 0b01 	mov.w	fp, #1
 8017114:	fa0b f202 	lsl.w	r2, fp, r2
 8017118:	420a      	tst	r2, r1
 801711a:	d00a      	beq.n	8017132 <__gethex+0x1da>
 801711c:	455b      	cmp	r3, fp
 801711e:	dd06      	ble.n	801712e <__gethex+0x1d6>
 8017120:	f1a8 0102 	sub.w	r1, r8, #2
 8017124:	4620      	mov	r0, r4
 8017126:	f7fe fdbc 	bl	8015ca2 <__any_on>
 801712a:	2800      	cmp	r0, #0
 801712c:	d138      	bne.n	80171a0 <__gethex+0x248>
 801712e:	f04f 0b02 	mov.w	fp, #2
 8017132:	4641      	mov	r1, r8
 8017134:	4620      	mov	r0, r4
 8017136:	f7ff fea7 	bl	8016e88 <rshift>
 801713a:	4446      	add	r6, r8
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	42b3      	cmp	r3, r6
 8017140:	da41      	bge.n	80171c6 <__gethex+0x26e>
 8017142:	4621      	mov	r1, r4
 8017144:	4648      	mov	r0, r9
 8017146:	f7fe f963 	bl	8015410 <_Bfree>
 801714a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801714c:	2300      	movs	r3, #0
 801714e:	6013      	str	r3, [r2, #0]
 8017150:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8017154:	e78a      	b.n	801706c <__gethex+0x114>
 8017156:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801715a:	2a2e      	cmp	r2, #46	; 0x2e
 801715c:	d014      	beq.n	8017188 <__gethex+0x230>
 801715e:	2b20      	cmp	r3, #32
 8017160:	d106      	bne.n	8017170 <__gethex+0x218>
 8017162:	9b01      	ldr	r3, [sp, #4]
 8017164:	f843 bb04 	str.w	fp, [r3], #4
 8017168:	f04f 0b00 	mov.w	fp, #0
 801716c:	9301      	str	r3, [sp, #4]
 801716e:	465b      	mov	r3, fp
 8017170:	7828      	ldrb	r0, [r5, #0]
 8017172:	9303      	str	r3, [sp, #12]
 8017174:	f7ff feda 	bl	8016f2c <__hexdig_fun>
 8017178:	9b03      	ldr	r3, [sp, #12]
 801717a:	f000 000f 	and.w	r0, r0, #15
 801717e:	4098      	lsls	r0, r3
 8017180:	ea4b 0b00 	orr.w	fp, fp, r0
 8017184:	3304      	adds	r3, #4
 8017186:	e7a1      	b.n	80170cc <__gethex+0x174>
 8017188:	45a8      	cmp	r8, r5
 801718a:	d8e8      	bhi.n	801715e <__gethex+0x206>
 801718c:	2201      	movs	r2, #1
 801718e:	4628      	mov	r0, r5
 8017190:	9303      	str	r3, [sp, #12]
 8017192:	f7ff fe1d 	bl	8016dd0 <strncmp>
 8017196:	4926      	ldr	r1, [pc, #152]	; (8017230 <__gethex+0x2d8>)
 8017198:	9b03      	ldr	r3, [sp, #12]
 801719a:	2800      	cmp	r0, #0
 801719c:	d1df      	bne.n	801715e <__gethex+0x206>
 801719e:	e795      	b.n	80170cc <__gethex+0x174>
 80171a0:	f04f 0b03 	mov.w	fp, #3
 80171a4:	e7c5      	b.n	8017132 <__gethex+0x1da>
 80171a6:	da0b      	bge.n	80171c0 <__gethex+0x268>
 80171a8:	eba5 0800 	sub.w	r8, r5, r0
 80171ac:	4621      	mov	r1, r4
 80171ae:	4642      	mov	r2, r8
 80171b0:	4648      	mov	r0, r9
 80171b2:	f7fe fb47 	bl	8015844 <__lshift>
 80171b6:	eba6 0608 	sub.w	r6, r6, r8
 80171ba:	4604      	mov	r4, r0
 80171bc:	f100 0a14 	add.w	sl, r0, #20
 80171c0:	f04f 0b00 	mov.w	fp, #0
 80171c4:	e7ba      	b.n	801713c <__gethex+0x1e4>
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	42b3      	cmp	r3, r6
 80171ca:	dd73      	ble.n	80172b4 <__gethex+0x35c>
 80171cc:	1b9e      	subs	r6, r3, r6
 80171ce:	42b5      	cmp	r5, r6
 80171d0:	dc34      	bgt.n	801723c <__gethex+0x2e4>
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	2b02      	cmp	r3, #2
 80171d6:	d023      	beq.n	8017220 <__gethex+0x2c8>
 80171d8:	2b03      	cmp	r3, #3
 80171da:	d025      	beq.n	8017228 <__gethex+0x2d0>
 80171dc:	2b01      	cmp	r3, #1
 80171de:	d115      	bne.n	801720c <__gethex+0x2b4>
 80171e0:	42b5      	cmp	r5, r6
 80171e2:	d113      	bne.n	801720c <__gethex+0x2b4>
 80171e4:	2d01      	cmp	r5, #1
 80171e6:	d10b      	bne.n	8017200 <__gethex+0x2a8>
 80171e8:	9a02      	ldr	r2, [sp, #8]
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	6013      	str	r3, [r2, #0]
 80171ee:	2301      	movs	r3, #1
 80171f0:	6123      	str	r3, [r4, #16]
 80171f2:	f8ca 3000 	str.w	r3, [sl]
 80171f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80171f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 80171fc:	601c      	str	r4, [r3, #0]
 80171fe:	e735      	b.n	801706c <__gethex+0x114>
 8017200:	1e69      	subs	r1, r5, #1
 8017202:	4620      	mov	r0, r4
 8017204:	f7fe fd4d 	bl	8015ca2 <__any_on>
 8017208:	2800      	cmp	r0, #0
 801720a:	d1ed      	bne.n	80171e8 <__gethex+0x290>
 801720c:	4621      	mov	r1, r4
 801720e:	4648      	mov	r0, r9
 8017210:	f7fe f8fe 	bl	8015410 <_Bfree>
 8017214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017216:	2300      	movs	r3, #0
 8017218:	6013      	str	r3, [r2, #0]
 801721a:	f04f 0850 	mov.w	r8, #80	; 0x50
 801721e:	e725      	b.n	801706c <__gethex+0x114>
 8017220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017222:	2b00      	cmp	r3, #0
 8017224:	d1f2      	bne.n	801720c <__gethex+0x2b4>
 8017226:	e7df      	b.n	80171e8 <__gethex+0x290>
 8017228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801722a:	2b00      	cmp	r3, #0
 801722c:	d1dc      	bne.n	80171e8 <__gethex+0x290>
 801722e:	e7ed      	b.n	801720c <__gethex+0x2b4>
 8017230:	08017f0c 	.word	0x08017f0c
 8017234:	08017da1 	.word	0x08017da1
 8017238:	080180b6 	.word	0x080180b6
 801723c:	f106 38ff 	add.w	r8, r6, #4294967295
 8017240:	f1bb 0f00 	cmp.w	fp, #0
 8017244:	d133      	bne.n	80172ae <__gethex+0x356>
 8017246:	f1b8 0f00 	cmp.w	r8, #0
 801724a:	d004      	beq.n	8017256 <__gethex+0x2fe>
 801724c:	4641      	mov	r1, r8
 801724e:	4620      	mov	r0, r4
 8017250:	f7fe fd27 	bl	8015ca2 <__any_on>
 8017254:	4683      	mov	fp, r0
 8017256:	ea4f 1268 	mov.w	r2, r8, asr #5
 801725a:	2301      	movs	r3, #1
 801725c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8017260:	f008 081f 	and.w	r8, r8, #31
 8017264:	fa03 f308 	lsl.w	r3, r3, r8
 8017268:	4213      	tst	r3, r2
 801726a:	4631      	mov	r1, r6
 801726c:	4620      	mov	r0, r4
 801726e:	bf18      	it	ne
 8017270:	f04b 0b02 	orrne.w	fp, fp, #2
 8017274:	1bad      	subs	r5, r5, r6
 8017276:	f7ff fe07 	bl	8016e88 <rshift>
 801727a:	687e      	ldr	r6, [r7, #4]
 801727c:	f04f 0802 	mov.w	r8, #2
 8017280:	f1bb 0f00 	cmp.w	fp, #0
 8017284:	d04a      	beq.n	801731c <__gethex+0x3c4>
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	2b02      	cmp	r3, #2
 801728a:	d016      	beq.n	80172ba <__gethex+0x362>
 801728c:	2b03      	cmp	r3, #3
 801728e:	d018      	beq.n	80172c2 <__gethex+0x36a>
 8017290:	2b01      	cmp	r3, #1
 8017292:	d109      	bne.n	80172a8 <__gethex+0x350>
 8017294:	f01b 0f02 	tst.w	fp, #2
 8017298:	d006      	beq.n	80172a8 <__gethex+0x350>
 801729a:	f8da 3000 	ldr.w	r3, [sl]
 801729e:	ea4b 0b03 	orr.w	fp, fp, r3
 80172a2:	f01b 0f01 	tst.w	fp, #1
 80172a6:	d10f      	bne.n	80172c8 <__gethex+0x370>
 80172a8:	f048 0810 	orr.w	r8, r8, #16
 80172ac:	e036      	b.n	801731c <__gethex+0x3c4>
 80172ae:	f04f 0b01 	mov.w	fp, #1
 80172b2:	e7d0      	b.n	8017256 <__gethex+0x2fe>
 80172b4:	f04f 0801 	mov.w	r8, #1
 80172b8:	e7e2      	b.n	8017280 <__gethex+0x328>
 80172ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172bc:	f1c3 0301 	rsb	r3, r3, #1
 80172c0:	930f      	str	r3, [sp, #60]	; 0x3c
 80172c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d0ef      	beq.n	80172a8 <__gethex+0x350>
 80172c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80172cc:	f104 0214 	add.w	r2, r4, #20
 80172d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80172d4:	9301      	str	r3, [sp, #4]
 80172d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80172da:	2300      	movs	r3, #0
 80172dc:	4694      	mov	ip, r2
 80172de:	f852 1b04 	ldr.w	r1, [r2], #4
 80172e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 80172e6:	d01e      	beq.n	8017326 <__gethex+0x3ce>
 80172e8:	3101      	adds	r1, #1
 80172ea:	f8cc 1000 	str.w	r1, [ip]
 80172ee:	f1b8 0f02 	cmp.w	r8, #2
 80172f2:	f104 0214 	add.w	r2, r4, #20
 80172f6:	d13d      	bne.n	8017374 <__gethex+0x41c>
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	3b01      	subs	r3, #1
 80172fc:	42ab      	cmp	r3, r5
 80172fe:	d10b      	bne.n	8017318 <__gethex+0x3c0>
 8017300:	1169      	asrs	r1, r5, #5
 8017302:	2301      	movs	r3, #1
 8017304:	f005 051f 	and.w	r5, r5, #31
 8017308:	fa03 f505 	lsl.w	r5, r3, r5
 801730c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017310:	421d      	tst	r5, r3
 8017312:	bf18      	it	ne
 8017314:	f04f 0801 	movne.w	r8, #1
 8017318:	f048 0820 	orr.w	r8, r8, #32
 801731c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801731e:	601c      	str	r4, [r3, #0]
 8017320:	9b02      	ldr	r3, [sp, #8]
 8017322:	601e      	str	r6, [r3, #0]
 8017324:	e6a2      	b.n	801706c <__gethex+0x114>
 8017326:	4290      	cmp	r0, r2
 8017328:	f842 3c04 	str.w	r3, [r2, #-4]
 801732c:	d8d6      	bhi.n	80172dc <__gethex+0x384>
 801732e:	68a2      	ldr	r2, [r4, #8]
 8017330:	4593      	cmp	fp, r2
 8017332:	db17      	blt.n	8017364 <__gethex+0x40c>
 8017334:	6861      	ldr	r1, [r4, #4]
 8017336:	4648      	mov	r0, r9
 8017338:	3101      	adds	r1, #1
 801733a:	f7fe f829 	bl	8015390 <_Balloc>
 801733e:	4682      	mov	sl, r0
 8017340:	b918      	cbnz	r0, 801734a <__gethex+0x3f2>
 8017342:	4b1b      	ldr	r3, [pc, #108]	; (80173b0 <__gethex+0x458>)
 8017344:	4602      	mov	r2, r0
 8017346:	2184      	movs	r1, #132	; 0x84
 8017348:	e6b3      	b.n	80170b2 <__gethex+0x15a>
 801734a:	6922      	ldr	r2, [r4, #16]
 801734c:	3202      	adds	r2, #2
 801734e:	f104 010c 	add.w	r1, r4, #12
 8017352:	0092      	lsls	r2, r2, #2
 8017354:	300c      	adds	r0, #12
 8017356:	f7ff fd4d 	bl	8016df4 <memcpy>
 801735a:	4621      	mov	r1, r4
 801735c:	4648      	mov	r0, r9
 801735e:	f7fe f857 	bl	8015410 <_Bfree>
 8017362:	4654      	mov	r4, sl
 8017364:	6922      	ldr	r2, [r4, #16]
 8017366:	1c51      	adds	r1, r2, #1
 8017368:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801736c:	6121      	str	r1, [r4, #16]
 801736e:	2101      	movs	r1, #1
 8017370:	6151      	str	r1, [r2, #20]
 8017372:	e7bc      	b.n	80172ee <__gethex+0x396>
 8017374:	6921      	ldr	r1, [r4, #16]
 8017376:	4559      	cmp	r1, fp
 8017378:	dd0b      	ble.n	8017392 <__gethex+0x43a>
 801737a:	2101      	movs	r1, #1
 801737c:	4620      	mov	r0, r4
 801737e:	f7ff fd83 	bl	8016e88 <rshift>
 8017382:	68bb      	ldr	r3, [r7, #8]
 8017384:	3601      	adds	r6, #1
 8017386:	42b3      	cmp	r3, r6
 8017388:	f6ff aedb 	blt.w	8017142 <__gethex+0x1ea>
 801738c:	f04f 0801 	mov.w	r8, #1
 8017390:	e7c2      	b.n	8017318 <__gethex+0x3c0>
 8017392:	f015 051f 	ands.w	r5, r5, #31
 8017396:	d0f9      	beq.n	801738c <__gethex+0x434>
 8017398:	9b01      	ldr	r3, [sp, #4]
 801739a:	441a      	add	r2, r3
 801739c:	f1c5 0520 	rsb	r5, r5, #32
 80173a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80173a4:	f7fe f8e6 	bl	8015574 <__hi0bits>
 80173a8:	42a8      	cmp	r0, r5
 80173aa:	dbe6      	blt.n	801737a <__gethex+0x422>
 80173ac:	e7ee      	b.n	801738c <__gethex+0x434>
 80173ae:	bf00      	nop
 80173b0:	08017da1 	.word	0x08017da1

080173b4 <L_shift>:
 80173b4:	f1c2 0208 	rsb	r2, r2, #8
 80173b8:	0092      	lsls	r2, r2, #2
 80173ba:	b570      	push	{r4, r5, r6, lr}
 80173bc:	f1c2 0620 	rsb	r6, r2, #32
 80173c0:	6843      	ldr	r3, [r0, #4]
 80173c2:	6804      	ldr	r4, [r0, #0]
 80173c4:	fa03 f506 	lsl.w	r5, r3, r6
 80173c8:	432c      	orrs	r4, r5
 80173ca:	40d3      	lsrs	r3, r2
 80173cc:	6004      	str	r4, [r0, #0]
 80173ce:	f840 3f04 	str.w	r3, [r0, #4]!
 80173d2:	4288      	cmp	r0, r1
 80173d4:	d3f4      	bcc.n	80173c0 <L_shift+0xc>
 80173d6:	bd70      	pop	{r4, r5, r6, pc}

080173d8 <__match>:
 80173d8:	b530      	push	{r4, r5, lr}
 80173da:	6803      	ldr	r3, [r0, #0]
 80173dc:	3301      	adds	r3, #1
 80173de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80173e2:	b914      	cbnz	r4, 80173ea <__match+0x12>
 80173e4:	6003      	str	r3, [r0, #0]
 80173e6:	2001      	movs	r0, #1
 80173e8:	bd30      	pop	{r4, r5, pc}
 80173ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80173ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80173f2:	2d19      	cmp	r5, #25
 80173f4:	bf98      	it	ls
 80173f6:	3220      	addls	r2, #32
 80173f8:	42a2      	cmp	r2, r4
 80173fa:	d0f0      	beq.n	80173de <__match+0x6>
 80173fc:	2000      	movs	r0, #0
 80173fe:	e7f3      	b.n	80173e8 <__match+0x10>

08017400 <__hexnan>:
 8017400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017404:	680b      	ldr	r3, [r1, #0]
 8017406:	6801      	ldr	r1, [r0, #0]
 8017408:	115e      	asrs	r6, r3, #5
 801740a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801740e:	f013 031f 	ands.w	r3, r3, #31
 8017412:	b087      	sub	sp, #28
 8017414:	bf18      	it	ne
 8017416:	3604      	addne	r6, #4
 8017418:	2500      	movs	r5, #0
 801741a:	1f37      	subs	r7, r6, #4
 801741c:	4682      	mov	sl, r0
 801741e:	4690      	mov	r8, r2
 8017420:	9301      	str	r3, [sp, #4]
 8017422:	f846 5c04 	str.w	r5, [r6, #-4]
 8017426:	46b9      	mov	r9, r7
 8017428:	463c      	mov	r4, r7
 801742a:	9502      	str	r5, [sp, #8]
 801742c:	46ab      	mov	fp, r5
 801742e:	784a      	ldrb	r2, [r1, #1]
 8017430:	1c4b      	adds	r3, r1, #1
 8017432:	9303      	str	r3, [sp, #12]
 8017434:	b342      	cbz	r2, 8017488 <__hexnan+0x88>
 8017436:	4610      	mov	r0, r2
 8017438:	9105      	str	r1, [sp, #20]
 801743a:	9204      	str	r2, [sp, #16]
 801743c:	f7ff fd76 	bl	8016f2c <__hexdig_fun>
 8017440:	2800      	cmp	r0, #0
 8017442:	d14f      	bne.n	80174e4 <__hexnan+0xe4>
 8017444:	9a04      	ldr	r2, [sp, #16]
 8017446:	9905      	ldr	r1, [sp, #20]
 8017448:	2a20      	cmp	r2, #32
 801744a:	d818      	bhi.n	801747e <__hexnan+0x7e>
 801744c:	9b02      	ldr	r3, [sp, #8]
 801744e:	459b      	cmp	fp, r3
 8017450:	dd13      	ble.n	801747a <__hexnan+0x7a>
 8017452:	454c      	cmp	r4, r9
 8017454:	d206      	bcs.n	8017464 <__hexnan+0x64>
 8017456:	2d07      	cmp	r5, #7
 8017458:	dc04      	bgt.n	8017464 <__hexnan+0x64>
 801745a:	462a      	mov	r2, r5
 801745c:	4649      	mov	r1, r9
 801745e:	4620      	mov	r0, r4
 8017460:	f7ff ffa8 	bl	80173b4 <L_shift>
 8017464:	4544      	cmp	r4, r8
 8017466:	d950      	bls.n	801750a <__hexnan+0x10a>
 8017468:	2300      	movs	r3, #0
 801746a:	f1a4 0904 	sub.w	r9, r4, #4
 801746e:	f844 3c04 	str.w	r3, [r4, #-4]
 8017472:	f8cd b008 	str.w	fp, [sp, #8]
 8017476:	464c      	mov	r4, r9
 8017478:	461d      	mov	r5, r3
 801747a:	9903      	ldr	r1, [sp, #12]
 801747c:	e7d7      	b.n	801742e <__hexnan+0x2e>
 801747e:	2a29      	cmp	r2, #41	; 0x29
 8017480:	d155      	bne.n	801752e <__hexnan+0x12e>
 8017482:	3102      	adds	r1, #2
 8017484:	f8ca 1000 	str.w	r1, [sl]
 8017488:	f1bb 0f00 	cmp.w	fp, #0
 801748c:	d04f      	beq.n	801752e <__hexnan+0x12e>
 801748e:	454c      	cmp	r4, r9
 8017490:	d206      	bcs.n	80174a0 <__hexnan+0xa0>
 8017492:	2d07      	cmp	r5, #7
 8017494:	dc04      	bgt.n	80174a0 <__hexnan+0xa0>
 8017496:	462a      	mov	r2, r5
 8017498:	4649      	mov	r1, r9
 801749a:	4620      	mov	r0, r4
 801749c:	f7ff ff8a 	bl	80173b4 <L_shift>
 80174a0:	4544      	cmp	r4, r8
 80174a2:	d934      	bls.n	801750e <__hexnan+0x10e>
 80174a4:	f1a8 0204 	sub.w	r2, r8, #4
 80174a8:	4623      	mov	r3, r4
 80174aa:	f853 1b04 	ldr.w	r1, [r3], #4
 80174ae:	f842 1f04 	str.w	r1, [r2, #4]!
 80174b2:	429f      	cmp	r7, r3
 80174b4:	d2f9      	bcs.n	80174aa <__hexnan+0xaa>
 80174b6:	1b3b      	subs	r3, r7, r4
 80174b8:	f023 0303 	bic.w	r3, r3, #3
 80174bc:	3304      	adds	r3, #4
 80174be:	3e03      	subs	r6, #3
 80174c0:	3401      	adds	r4, #1
 80174c2:	42a6      	cmp	r6, r4
 80174c4:	bf38      	it	cc
 80174c6:	2304      	movcc	r3, #4
 80174c8:	4443      	add	r3, r8
 80174ca:	2200      	movs	r2, #0
 80174cc:	f843 2b04 	str.w	r2, [r3], #4
 80174d0:	429f      	cmp	r7, r3
 80174d2:	d2fb      	bcs.n	80174cc <__hexnan+0xcc>
 80174d4:	683b      	ldr	r3, [r7, #0]
 80174d6:	b91b      	cbnz	r3, 80174e0 <__hexnan+0xe0>
 80174d8:	4547      	cmp	r7, r8
 80174da:	d126      	bne.n	801752a <__hexnan+0x12a>
 80174dc:	2301      	movs	r3, #1
 80174de:	603b      	str	r3, [r7, #0]
 80174e0:	2005      	movs	r0, #5
 80174e2:	e025      	b.n	8017530 <__hexnan+0x130>
 80174e4:	3501      	adds	r5, #1
 80174e6:	2d08      	cmp	r5, #8
 80174e8:	f10b 0b01 	add.w	fp, fp, #1
 80174ec:	dd06      	ble.n	80174fc <__hexnan+0xfc>
 80174ee:	4544      	cmp	r4, r8
 80174f0:	d9c3      	bls.n	801747a <__hexnan+0x7a>
 80174f2:	2300      	movs	r3, #0
 80174f4:	f844 3c04 	str.w	r3, [r4, #-4]
 80174f8:	2501      	movs	r5, #1
 80174fa:	3c04      	subs	r4, #4
 80174fc:	6822      	ldr	r2, [r4, #0]
 80174fe:	f000 000f 	and.w	r0, r0, #15
 8017502:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017506:	6020      	str	r0, [r4, #0]
 8017508:	e7b7      	b.n	801747a <__hexnan+0x7a>
 801750a:	2508      	movs	r5, #8
 801750c:	e7b5      	b.n	801747a <__hexnan+0x7a>
 801750e:	9b01      	ldr	r3, [sp, #4]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d0df      	beq.n	80174d4 <__hexnan+0xd4>
 8017514:	f1c3 0320 	rsb	r3, r3, #32
 8017518:	f04f 32ff 	mov.w	r2, #4294967295
 801751c:	40da      	lsrs	r2, r3
 801751e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8017522:	4013      	ands	r3, r2
 8017524:	f846 3c04 	str.w	r3, [r6, #-4]
 8017528:	e7d4      	b.n	80174d4 <__hexnan+0xd4>
 801752a:	3f04      	subs	r7, #4
 801752c:	e7d2      	b.n	80174d4 <__hexnan+0xd4>
 801752e:	2004      	movs	r0, #4
 8017530:	b007      	add	sp, #28
 8017532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017536 <__ascii_mbtowc>:
 8017536:	b082      	sub	sp, #8
 8017538:	b901      	cbnz	r1, 801753c <__ascii_mbtowc+0x6>
 801753a:	a901      	add	r1, sp, #4
 801753c:	b142      	cbz	r2, 8017550 <__ascii_mbtowc+0x1a>
 801753e:	b14b      	cbz	r3, 8017554 <__ascii_mbtowc+0x1e>
 8017540:	7813      	ldrb	r3, [r2, #0]
 8017542:	600b      	str	r3, [r1, #0]
 8017544:	7812      	ldrb	r2, [r2, #0]
 8017546:	1e10      	subs	r0, r2, #0
 8017548:	bf18      	it	ne
 801754a:	2001      	movne	r0, #1
 801754c:	b002      	add	sp, #8
 801754e:	4770      	bx	lr
 8017550:	4610      	mov	r0, r2
 8017552:	e7fb      	b.n	801754c <__ascii_mbtowc+0x16>
 8017554:	f06f 0001 	mvn.w	r0, #1
 8017558:	e7f8      	b.n	801754c <__ascii_mbtowc+0x16>

0801755a <_realloc_r>:
 801755a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801755e:	4680      	mov	r8, r0
 8017560:	4614      	mov	r4, r2
 8017562:	460e      	mov	r6, r1
 8017564:	b921      	cbnz	r1, 8017570 <_realloc_r+0x16>
 8017566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801756a:	4611      	mov	r1, r2
 801756c:	f7fc b84a 	b.w	8013604 <_malloc_r>
 8017570:	b92a      	cbnz	r2, 801757e <_realloc_r+0x24>
 8017572:	f7fd fec1 	bl	80152f8 <_free_r>
 8017576:	4625      	mov	r5, r4
 8017578:	4628      	mov	r0, r5
 801757a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801757e:	f000 f842 	bl	8017606 <_malloc_usable_size_r>
 8017582:	4284      	cmp	r4, r0
 8017584:	4607      	mov	r7, r0
 8017586:	d802      	bhi.n	801758e <_realloc_r+0x34>
 8017588:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801758c:	d812      	bhi.n	80175b4 <_realloc_r+0x5a>
 801758e:	4621      	mov	r1, r4
 8017590:	4640      	mov	r0, r8
 8017592:	f7fc f837 	bl	8013604 <_malloc_r>
 8017596:	4605      	mov	r5, r0
 8017598:	2800      	cmp	r0, #0
 801759a:	d0ed      	beq.n	8017578 <_realloc_r+0x1e>
 801759c:	42bc      	cmp	r4, r7
 801759e:	4622      	mov	r2, r4
 80175a0:	4631      	mov	r1, r6
 80175a2:	bf28      	it	cs
 80175a4:	463a      	movcs	r2, r7
 80175a6:	f7ff fc25 	bl	8016df4 <memcpy>
 80175aa:	4631      	mov	r1, r6
 80175ac:	4640      	mov	r0, r8
 80175ae:	f7fd fea3 	bl	80152f8 <_free_r>
 80175b2:	e7e1      	b.n	8017578 <_realloc_r+0x1e>
 80175b4:	4635      	mov	r5, r6
 80175b6:	e7df      	b.n	8017578 <_realloc_r+0x1e>

080175b8 <__ascii_wctomb>:
 80175b8:	b149      	cbz	r1, 80175ce <__ascii_wctomb+0x16>
 80175ba:	2aff      	cmp	r2, #255	; 0xff
 80175bc:	bf85      	ittet	hi
 80175be:	238a      	movhi	r3, #138	; 0x8a
 80175c0:	6003      	strhi	r3, [r0, #0]
 80175c2:	700a      	strbls	r2, [r1, #0]
 80175c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80175c8:	bf98      	it	ls
 80175ca:	2001      	movls	r0, #1
 80175cc:	4770      	bx	lr
 80175ce:	4608      	mov	r0, r1
 80175d0:	4770      	bx	lr
	...

080175d4 <fiprintf>:
 80175d4:	b40e      	push	{r1, r2, r3}
 80175d6:	b503      	push	{r0, r1, lr}
 80175d8:	4601      	mov	r1, r0
 80175da:	ab03      	add	r3, sp, #12
 80175dc:	4805      	ldr	r0, [pc, #20]	; (80175f4 <fiprintf+0x20>)
 80175de:	f853 2b04 	ldr.w	r2, [r3], #4
 80175e2:	6800      	ldr	r0, [r0, #0]
 80175e4:	9301      	str	r3, [sp, #4]
 80175e6:	f000 f83f 	bl	8017668 <_vfiprintf_r>
 80175ea:	b002      	add	sp, #8
 80175ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80175f0:	b003      	add	sp, #12
 80175f2:	4770      	bx	lr
 80175f4:	24000170 	.word	0x24000170

080175f8 <abort>:
 80175f8:	b508      	push	{r3, lr}
 80175fa:	2006      	movs	r0, #6
 80175fc:	f000 fa0c 	bl	8017a18 <raise>
 8017600:	2001      	movs	r0, #1
 8017602:	f7ea ffaf 	bl	8002564 <_exit>

08017606 <_malloc_usable_size_r>:
 8017606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801760a:	1f18      	subs	r0, r3, #4
 801760c:	2b00      	cmp	r3, #0
 801760e:	bfbc      	itt	lt
 8017610:	580b      	ldrlt	r3, [r1, r0]
 8017612:	18c0      	addlt	r0, r0, r3
 8017614:	4770      	bx	lr

08017616 <__sfputc_r>:
 8017616:	6893      	ldr	r3, [r2, #8]
 8017618:	3b01      	subs	r3, #1
 801761a:	2b00      	cmp	r3, #0
 801761c:	b410      	push	{r4}
 801761e:	6093      	str	r3, [r2, #8]
 8017620:	da08      	bge.n	8017634 <__sfputc_r+0x1e>
 8017622:	6994      	ldr	r4, [r2, #24]
 8017624:	42a3      	cmp	r3, r4
 8017626:	db01      	blt.n	801762c <__sfputc_r+0x16>
 8017628:	290a      	cmp	r1, #10
 801762a:	d103      	bne.n	8017634 <__sfputc_r+0x1e>
 801762c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017630:	f000 b934 	b.w	801789c <__swbuf_r>
 8017634:	6813      	ldr	r3, [r2, #0]
 8017636:	1c58      	adds	r0, r3, #1
 8017638:	6010      	str	r0, [r2, #0]
 801763a:	7019      	strb	r1, [r3, #0]
 801763c:	4608      	mov	r0, r1
 801763e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017642:	4770      	bx	lr

08017644 <__sfputs_r>:
 8017644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017646:	4606      	mov	r6, r0
 8017648:	460f      	mov	r7, r1
 801764a:	4614      	mov	r4, r2
 801764c:	18d5      	adds	r5, r2, r3
 801764e:	42ac      	cmp	r4, r5
 8017650:	d101      	bne.n	8017656 <__sfputs_r+0x12>
 8017652:	2000      	movs	r0, #0
 8017654:	e007      	b.n	8017666 <__sfputs_r+0x22>
 8017656:	f814 1b01 	ldrb.w	r1, [r4], #1
 801765a:	463a      	mov	r2, r7
 801765c:	4630      	mov	r0, r6
 801765e:	f7ff ffda 	bl	8017616 <__sfputc_r>
 8017662:	1c43      	adds	r3, r0, #1
 8017664:	d1f3      	bne.n	801764e <__sfputs_r+0xa>
 8017666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08017668 <_vfiprintf_r>:
 8017668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801766c:	460d      	mov	r5, r1
 801766e:	b09d      	sub	sp, #116	; 0x74
 8017670:	4614      	mov	r4, r2
 8017672:	4698      	mov	r8, r3
 8017674:	4606      	mov	r6, r0
 8017676:	b118      	cbz	r0, 8017680 <_vfiprintf_r+0x18>
 8017678:	6a03      	ldr	r3, [r0, #32]
 801767a:	b90b      	cbnz	r3, 8017680 <_vfiprintf_r+0x18>
 801767c:	f7fc ff1a 	bl	80144b4 <__sinit>
 8017680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017682:	07d9      	lsls	r1, r3, #31
 8017684:	d405      	bmi.n	8017692 <_vfiprintf_r+0x2a>
 8017686:	89ab      	ldrh	r3, [r5, #12]
 8017688:	059a      	lsls	r2, r3, #22
 801768a:	d402      	bmi.n	8017692 <_vfiprintf_r+0x2a>
 801768c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801768e:	f7eb f954 	bl	800293a <__retarget_lock_acquire_recursive>
 8017692:	89ab      	ldrh	r3, [r5, #12]
 8017694:	071b      	lsls	r3, r3, #28
 8017696:	d501      	bpl.n	801769c <_vfiprintf_r+0x34>
 8017698:	692b      	ldr	r3, [r5, #16]
 801769a:	b99b      	cbnz	r3, 80176c4 <_vfiprintf_r+0x5c>
 801769c:	4629      	mov	r1, r5
 801769e:	4630      	mov	r0, r6
 80176a0:	f000 f93a 	bl	8017918 <__swsetup_r>
 80176a4:	b170      	cbz	r0, 80176c4 <_vfiprintf_r+0x5c>
 80176a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176a8:	07dc      	lsls	r4, r3, #31
 80176aa:	d504      	bpl.n	80176b6 <_vfiprintf_r+0x4e>
 80176ac:	f04f 30ff 	mov.w	r0, #4294967295
 80176b0:	b01d      	add	sp, #116	; 0x74
 80176b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176b6:	89ab      	ldrh	r3, [r5, #12]
 80176b8:	0598      	lsls	r0, r3, #22
 80176ba:	d4f7      	bmi.n	80176ac <_vfiprintf_r+0x44>
 80176bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176be:	f7eb f950 	bl	8002962 <__retarget_lock_release_recursive>
 80176c2:	e7f3      	b.n	80176ac <_vfiprintf_r+0x44>
 80176c4:	2300      	movs	r3, #0
 80176c6:	9309      	str	r3, [sp, #36]	; 0x24
 80176c8:	2320      	movs	r3, #32
 80176ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80176d2:	2330      	movs	r3, #48	; 0x30
 80176d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017888 <_vfiprintf_r+0x220>
 80176d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80176dc:	f04f 0901 	mov.w	r9, #1
 80176e0:	4623      	mov	r3, r4
 80176e2:	469a      	mov	sl, r3
 80176e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176e8:	b10a      	cbz	r2, 80176ee <_vfiprintf_r+0x86>
 80176ea:	2a25      	cmp	r2, #37	; 0x25
 80176ec:	d1f9      	bne.n	80176e2 <_vfiprintf_r+0x7a>
 80176ee:	ebba 0b04 	subs.w	fp, sl, r4
 80176f2:	d00b      	beq.n	801770c <_vfiprintf_r+0xa4>
 80176f4:	465b      	mov	r3, fp
 80176f6:	4622      	mov	r2, r4
 80176f8:	4629      	mov	r1, r5
 80176fa:	4630      	mov	r0, r6
 80176fc:	f7ff ffa2 	bl	8017644 <__sfputs_r>
 8017700:	3001      	adds	r0, #1
 8017702:	f000 80a9 	beq.w	8017858 <_vfiprintf_r+0x1f0>
 8017706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017708:	445a      	add	r2, fp
 801770a:	9209      	str	r2, [sp, #36]	; 0x24
 801770c:	f89a 3000 	ldrb.w	r3, [sl]
 8017710:	2b00      	cmp	r3, #0
 8017712:	f000 80a1 	beq.w	8017858 <_vfiprintf_r+0x1f0>
 8017716:	2300      	movs	r3, #0
 8017718:	f04f 32ff 	mov.w	r2, #4294967295
 801771c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017720:	f10a 0a01 	add.w	sl, sl, #1
 8017724:	9304      	str	r3, [sp, #16]
 8017726:	9307      	str	r3, [sp, #28]
 8017728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801772c:	931a      	str	r3, [sp, #104]	; 0x68
 801772e:	4654      	mov	r4, sl
 8017730:	2205      	movs	r2, #5
 8017732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017736:	4854      	ldr	r0, [pc, #336]	; (8017888 <_vfiprintf_r+0x220>)
 8017738:	f7e8 fdea 	bl	8000310 <memchr>
 801773c:	9a04      	ldr	r2, [sp, #16]
 801773e:	b9d8      	cbnz	r0, 8017778 <_vfiprintf_r+0x110>
 8017740:	06d1      	lsls	r1, r2, #27
 8017742:	bf44      	itt	mi
 8017744:	2320      	movmi	r3, #32
 8017746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801774a:	0713      	lsls	r3, r2, #28
 801774c:	bf44      	itt	mi
 801774e:	232b      	movmi	r3, #43	; 0x2b
 8017750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017754:	f89a 3000 	ldrb.w	r3, [sl]
 8017758:	2b2a      	cmp	r3, #42	; 0x2a
 801775a:	d015      	beq.n	8017788 <_vfiprintf_r+0x120>
 801775c:	9a07      	ldr	r2, [sp, #28]
 801775e:	4654      	mov	r4, sl
 8017760:	2000      	movs	r0, #0
 8017762:	f04f 0c0a 	mov.w	ip, #10
 8017766:	4621      	mov	r1, r4
 8017768:	f811 3b01 	ldrb.w	r3, [r1], #1
 801776c:	3b30      	subs	r3, #48	; 0x30
 801776e:	2b09      	cmp	r3, #9
 8017770:	d94d      	bls.n	801780e <_vfiprintf_r+0x1a6>
 8017772:	b1b0      	cbz	r0, 80177a2 <_vfiprintf_r+0x13a>
 8017774:	9207      	str	r2, [sp, #28]
 8017776:	e014      	b.n	80177a2 <_vfiprintf_r+0x13a>
 8017778:	eba0 0308 	sub.w	r3, r0, r8
 801777c:	fa09 f303 	lsl.w	r3, r9, r3
 8017780:	4313      	orrs	r3, r2
 8017782:	9304      	str	r3, [sp, #16]
 8017784:	46a2      	mov	sl, r4
 8017786:	e7d2      	b.n	801772e <_vfiprintf_r+0xc6>
 8017788:	9b03      	ldr	r3, [sp, #12]
 801778a:	1d19      	adds	r1, r3, #4
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	9103      	str	r1, [sp, #12]
 8017790:	2b00      	cmp	r3, #0
 8017792:	bfbb      	ittet	lt
 8017794:	425b      	neglt	r3, r3
 8017796:	f042 0202 	orrlt.w	r2, r2, #2
 801779a:	9307      	strge	r3, [sp, #28]
 801779c:	9307      	strlt	r3, [sp, #28]
 801779e:	bfb8      	it	lt
 80177a0:	9204      	strlt	r2, [sp, #16]
 80177a2:	7823      	ldrb	r3, [r4, #0]
 80177a4:	2b2e      	cmp	r3, #46	; 0x2e
 80177a6:	d10c      	bne.n	80177c2 <_vfiprintf_r+0x15a>
 80177a8:	7863      	ldrb	r3, [r4, #1]
 80177aa:	2b2a      	cmp	r3, #42	; 0x2a
 80177ac:	d134      	bne.n	8017818 <_vfiprintf_r+0x1b0>
 80177ae:	9b03      	ldr	r3, [sp, #12]
 80177b0:	1d1a      	adds	r2, r3, #4
 80177b2:	681b      	ldr	r3, [r3, #0]
 80177b4:	9203      	str	r2, [sp, #12]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	bfb8      	it	lt
 80177ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80177be:	3402      	adds	r4, #2
 80177c0:	9305      	str	r3, [sp, #20]
 80177c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017898 <_vfiprintf_r+0x230>
 80177c6:	7821      	ldrb	r1, [r4, #0]
 80177c8:	2203      	movs	r2, #3
 80177ca:	4650      	mov	r0, sl
 80177cc:	f7e8 fda0 	bl	8000310 <memchr>
 80177d0:	b138      	cbz	r0, 80177e2 <_vfiprintf_r+0x17a>
 80177d2:	9b04      	ldr	r3, [sp, #16]
 80177d4:	eba0 000a 	sub.w	r0, r0, sl
 80177d8:	2240      	movs	r2, #64	; 0x40
 80177da:	4082      	lsls	r2, r0
 80177dc:	4313      	orrs	r3, r2
 80177de:	3401      	adds	r4, #1
 80177e0:	9304      	str	r3, [sp, #16]
 80177e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177e6:	4829      	ldr	r0, [pc, #164]	; (801788c <_vfiprintf_r+0x224>)
 80177e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80177ec:	2206      	movs	r2, #6
 80177ee:	f7e8 fd8f 	bl	8000310 <memchr>
 80177f2:	2800      	cmp	r0, #0
 80177f4:	d03f      	beq.n	8017876 <_vfiprintf_r+0x20e>
 80177f6:	4b26      	ldr	r3, [pc, #152]	; (8017890 <_vfiprintf_r+0x228>)
 80177f8:	bb1b      	cbnz	r3, 8017842 <_vfiprintf_r+0x1da>
 80177fa:	9b03      	ldr	r3, [sp, #12]
 80177fc:	3307      	adds	r3, #7
 80177fe:	f023 0307 	bic.w	r3, r3, #7
 8017802:	3308      	adds	r3, #8
 8017804:	9303      	str	r3, [sp, #12]
 8017806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017808:	443b      	add	r3, r7
 801780a:	9309      	str	r3, [sp, #36]	; 0x24
 801780c:	e768      	b.n	80176e0 <_vfiprintf_r+0x78>
 801780e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017812:	460c      	mov	r4, r1
 8017814:	2001      	movs	r0, #1
 8017816:	e7a6      	b.n	8017766 <_vfiprintf_r+0xfe>
 8017818:	2300      	movs	r3, #0
 801781a:	3401      	adds	r4, #1
 801781c:	9305      	str	r3, [sp, #20]
 801781e:	4619      	mov	r1, r3
 8017820:	f04f 0c0a 	mov.w	ip, #10
 8017824:	4620      	mov	r0, r4
 8017826:	f810 2b01 	ldrb.w	r2, [r0], #1
 801782a:	3a30      	subs	r2, #48	; 0x30
 801782c:	2a09      	cmp	r2, #9
 801782e:	d903      	bls.n	8017838 <_vfiprintf_r+0x1d0>
 8017830:	2b00      	cmp	r3, #0
 8017832:	d0c6      	beq.n	80177c2 <_vfiprintf_r+0x15a>
 8017834:	9105      	str	r1, [sp, #20]
 8017836:	e7c4      	b.n	80177c2 <_vfiprintf_r+0x15a>
 8017838:	fb0c 2101 	mla	r1, ip, r1, r2
 801783c:	4604      	mov	r4, r0
 801783e:	2301      	movs	r3, #1
 8017840:	e7f0      	b.n	8017824 <_vfiprintf_r+0x1bc>
 8017842:	ab03      	add	r3, sp, #12
 8017844:	9300      	str	r3, [sp, #0]
 8017846:	462a      	mov	r2, r5
 8017848:	4b12      	ldr	r3, [pc, #72]	; (8017894 <_vfiprintf_r+0x22c>)
 801784a:	a904      	add	r1, sp, #16
 801784c:	4630      	mov	r0, r6
 801784e:	f7fb fff7 	bl	8013840 <_printf_float>
 8017852:	4607      	mov	r7, r0
 8017854:	1c78      	adds	r0, r7, #1
 8017856:	d1d6      	bne.n	8017806 <_vfiprintf_r+0x19e>
 8017858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801785a:	07d9      	lsls	r1, r3, #31
 801785c:	d405      	bmi.n	801786a <_vfiprintf_r+0x202>
 801785e:	89ab      	ldrh	r3, [r5, #12]
 8017860:	059a      	lsls	r2, r3, #22
 8017862:	d402      	bmi.n	801786a <_vfiprintf_r+0x202>
 8017864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017866:	f7eb f87c 	bl	8002962 <__retarget_lock_release_recursive>
 801786a:	89ab      	ldrh	r3, [r5, #12]
 801786c:	065b      	lsls	r3, r3, #25
 801786e:	f53f af1d 	bmi.w	80176ac <_vfiprintf_r+0x44>
 8017872:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017874:	e71c      	b.n	80176b0 <_vfiprintf_r+0x48>
 8017876:	ab03      	add	r3, sp, #12
 8017878:	9300      	str	r3, [sp, #0]
 801787a:	462a      	mov	r2, r5
 801787c:	4b05      	ldr	r3, [pc, #20]	; (8017894 <_vfiprintf_r+0x22c>)
 801787e:	a904      	add	r1, sp, #16
 8017880:	4630      	mov	r0, r6
 8017882:	f7fc fa65 	bl	8013d50 <_printf_i>
 8017886:	e7e4      	b.n	8017852 <_vfiprintf_r+0x1ea>
 8017888:	08018061 	.word	0x08018061
 801788c:	0801806b 	.word	0x0801806b
 8017890:	08013841 	.word	0x08013841
 8017894:	08017645 	.word	0x08017645
 8017898:	08018067 	.word	0x08018067

0801789c <__swbuf_r>:
 801789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801789e:	460e      	mov	r6, r1
 80178a0:	4614      	mov	r4, r2
 80178a2:	4605      	mov	r5, r0
 80178a4:	b118      	cbz	r0, 80178ae <__swbuf_r+0x12>
 80178a6:	6a03      	ldr	r3, [r0, #32]
 80178a8:	b90b      	cbnz	r3, 80178ae <__swbuf_r+0x12>
 80178aa:	f7fc fe03 	bl	80144b4 <__sinit>
 80178ae:	69a3      	ldr	r3, [r4, #24]
 80178b0:	60a3      	str	r3, [r4, #8]
 80178b2:	89a3      	ldrh	r3, [r4, #12]
 80178b4:	071a      	lsls	r2, r3, #28
 80178b6:	d525      	bpl.n	8017904 <__swbuf_r+0x68>
 80178b8:	6923      	ldr	r3, [r4, #16]
 80178ba:	b31b      	cbz	r3, 8017904 <__swbuf_r+0x68>
 80178bc:	6823      	ldr	r3, [r4, #0]
 80178be:	6922      	ldr	r2, [r4, #16]
 80178c0:	1a98      	subs	r0, r3, r2
 80178c2:	6963      	ldr	r3, [r4, #20]
 80178c4:	b2f6      	uxtb	r6, r6
 80178c6:	4283      	cmp	r3, r0
 80178c8:	4637      	mov	r7, r6
 80178ca:	dc04      	bgt.n	80178d6 <__swbuf_r+0x3a>
 80178cc:	4621      	mov	r1, r4
 80178ce:	4628      	mov	r0, r5
 80178d0:	f7ff fa3c 	bl	8016d4c <_fflush_r>
 80178d4:	b9e0      	cbnz	r0, 8017910 <__swbuf_r+0x74>
 80178d6:	68a3      	ldr	r3, [r4, #8]
 80178d8:	3b01      	subs	r3, #1
 80178da:	60a3      	str	r3, [r4, #8]
 80178dc:	6823      	ldr	r3, [r4, #0]
 80178de:	1c5a      	adds	r2, r3, #1
 80178e0:	6022      	str	r2, [r4, #0]
 80178e2:	701e      	strb	r6, [r3, #0]
 80178e4:	6962      	ldr	r2, [r4, #20]
 80178e6:	1c43      	adds	r3, r0, #1
 80178e8:	429a      	cmp	r2, r3
 80178ea:	d004      	beq.n	80178f6 <__swbuf_r+0x5a>
 80178ec:	89a3      	ldrh	r3, [r4, #12]
 80178ee:	07db      	lsls	r3, r3, #31
 80178f0:	d506      	bpl.n	8017900 <__swbuf_r+0x64>
 80178f2:	2e0a      	cmp	r6, #10
 80178f4:	d104      	bne.n	8017900 <__swbuf_r+0x64>
 80178f6:	4621      	mov	r1, r4
 80178f8:	4628      	mov	r0, r5
 80178fa:	f7ff fa27 	bl	8016d4c <_fflush_r>
 80178fe:	b938      	cbnz	r0, 8017910 <__swbuf_r+0x74>
 8017900:	4638      	mov	r0, r7
 8017902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017904:	4621      	mov	r1, r4
 8017906:	4628      	mov	r0, r5
 8017908:	f000 f806 	bl	8017918 <__swsetup_r>
 801790c:	2800      	cmp	r0, #0
 801790e:	d0d5      	beq.n	80178bc <__swbuf_r+0x20>
 8017910:	f04f 37ff 	mov.w	r7, #4294967295
 8017914:	e7f4      	b.n	8017900 <__swbuf_r+0x64>
	...

08017918 <__swsetup_r>:
 8017918:	b538      	push	{r3, r4, r5, lr}
 801791a:	4b2a      	ldr	r3, [pc, #168]	; (80179c4 <__swsetup_r+0xac>)
 801791c:	4605      	mov	r5, r0
 801791e:	6818      	ldr	r0, [r3, #0]
 8017920:	460c      	mov	r4, r1
 8017922:	b118      	cbz	r0, 801792c <__swsetup_r+0x14>
 8017924:	6a03      	ldr	r3, [r0, #32]
 8017926:	b90b      	cbnz	r3, 801792c <__swsetup_r+0x14>
 8017928:	f7fc fdc4 	bl	80144b4 <__sinit>
 801792c:	89a3      	ldrh	r3, [r4, #12]
 801792e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017932:	0718      	lsls	r0, r3, #28
 8017934:	d422      	bmi.n	801797c <__swsetup_r+0x64>
 8017936:	06d9      	lsls	r1, r3, #27
 8017938:	d407      	bmi.n	801794a <__swsetup_r+0x32>
 801793a:	2309      	movs	r3, #9
 801793c:	602b      	str	r3, [r5, #0]
 801793e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017942:	81a3      	strh	r3, [r4, #12]
 8017944:	f04f 30ff 	mov.w	r0, #4294967295
 8017948:	e034      	b.n	80179b4 <__swsetup_r+0x9c>
 801794a:	0758      	lsls	r0, r3, #29
 801794c:	d512      	bpl.n	8017974 <__swsetup_r+0x5c>
 801794e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017950:	b141      	cbz	r1, 8017964 <__swsetup_r+0x4c>
 8017952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017956:	4299      	cmp	r1, r3
 8017958:	d002      	beq.n	8017960 <__swsetup_r+0x48>
 801795a:	4628      	mov	r0, r5
 801795c:	f7fd fccc 	bl	80152f8 <_free_r>
 8017960:	2300      	movs	r3, #0
 8017962:	6363      	str	r3, [r4, #52]	; 0x34
 8017964:	89a3      	ldrh	r3, [r4, #12]
 8017966:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801796a:	81a3      	strh	r3, [r4, #12]
 801796c:	2300      	movs	r3, #0
 801796e:	6063      	str	r3, [r4, #4]
 8017970:	6923      	ldr	r3, [r4, #16]
 8017972:	6023      	str	r3, [r4, #0]
 8017974:	89a3      	ldrh	r3, [r4, #12]
 8017976:	f043 0308 	orr.w	r3, r3, #8
 801797a:	81a3      	strh	r3, [r4, #12]
 801797c:	6923      	ldr	r3, [r4, #16]
 801797e:	b94b      	cbnz	r3, 8017994 <__swsetup_r+0x7c>
 8017980:	89a3      	ldrh	r3, [r4, #12]
 8017982:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801798a:	d003      	beq.n	8017994 <__swsetup_r+0x7c>
 801798c:	4621      	mov	r1, r4
 801798e:	4628      	mov	r0, r5
 8017990:	f000 f884 	bl	8017a9c <__smakebuf_r>
 8017994:	89a0      	ldrh	r0, [r4, #12]
 8017996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801799a:	f010 0301 	ands.w	r3, r0, #1
 801799e:	d00a      	beq.n	80179b6 <__swsetup_r+0x9e>
 80179a0:	2300      	movs	r3, #0
 80179a2:	60a3      	str	r3, [r4, #8]
 80179a4:	6963      	ldr	r3, [r4, #20]
 80179a6:	425b      	negs	r3, r3
 80179a8:	61a3      	str	r3, [r4, #24]
 80179aa:	6923      	ldr	r3, [r4, #16]
 80179ac:	b943      	cbnz	r3, 80179c0 <__swsetup_r+0xa8>
 80179ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80179b2:	d1c4      	bne.n	801793e <__swsetup_r+0x26>
 80179b4:	bd38      	pop	{r3, r4, r5, pc}
 80179b6:	0781      	lsls	r1, r0, #30
 80179b8:	bf58      	it	pl
 80179ba:	6963      	ldrpl	r3, [r4, #20]
 80179bc:	60a3      	str	r3, [r4, #8]
 80179be:	e7f4      	b.n	80179aa <__swsetup_r+0x92>
 80179c0:	2000      	movs	r0, #0
 80179c2:	e7f7      	b.n	80179b4 <__swsetup_r+0x9c>
 80179c4:	24000170 	.word	0x24000170

080179c8 <_raise_r>:
 80179c8:	291f      	cmp	r1, #31
 80179ca:	b538      	push	{r3, r4, r5, lr}
 80179cc:	4604      	mov	r4, r0
 80179ce:	460d      	mov	r5, r1
 80179d0:	d904      	bls.n	80179dc <_raise_r+0x14>
 80179d2:	2316      	movs	r3, #22
 80179d4:	6003      	str	r3, [r0, #0]
 80179d6:	f04f 30ff 	mov.w	r0, #4294967295
 80179da:	bd38      	pop	{r3, r4, r5, pc}
 80179dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80179de:	b112      	cbz	r2, 80179e6 <_raise_r+0x1e>
 80179e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80179e4:	b94b      	cbnz	r3, 80179fa <_raise_r+0x32>
 80179e6:	4620      	mov	r0, r4
 80179e8:	f000 f830 	bl	8017a4c <_getpid_r>
 80179ec:	462a      	mov	r2, r5
 80179ee:	4601      	mov	r1, r0
 80179f0:	4620      	mov	r0, r4
 80179f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80179f6:	f000 b817 	b.w	8017a28 <_kill_r>
 80179fa:	2b01      	cmp	r3, #1
 80179fc:	d00a      	beq.n	8017a14 <_raise_r+0x4c>
 80179fe:	1c59      	adds	r1, r3, #1
 8017a00:	d103      	bne.n	8017a0a <_raise_r+0x42>
 8017a02:	2316      	movs	r3, #22
 8017a04:	6003      	str	r3, [r0, #0]
 8017a06:	2001      	movs	r0, #1
 8017a08:	e7e7      	b.n	80179da <_raise_r+0x12>
 8017a0a:	2400      	movs	r4, #0
 8017a0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017a10:	4628      	mov	r0, r5
 8017a12:	4798      	blx	r3
 8017a14:	2000      	movs	r0, #0
 8017a16:	e7e0      	b.n	80179da <_raise_r+0x12>

08017a18 <raise>:
 8017a18:	4b02      	ldr	r3, [pc, #8]	; (8017a24 <raise+0xc>)
 8017a1a:	4601      	mov	r1, r0
 8017a1c:	6818      	ldr	r0, [r3, #0]
 8017a1e:	f7ff bfd3 	b.w	80179c8 <_raise_r>
 8017a22:	bf00      	nop
 8017a24:	24000170 	.word	0x24000170

08017a28 <_kill_r>:
 8017a28:	b538      	push	{r3, r4, r5, lr}
 8017a2a:	4d07      	ldr	r5, [pc, #28]	; (8017a48 <_kill_r+0x20>)
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	4604      	mov	r4, r0
 8017a30:	4608      	mov	r0, r1
 8017a32:	4611      	mov	r1, r2
 8017a34:	602b      	str	r3, [r5, #0]
 8017a36:	f7ea fd85 	bl	8002544 <_kill>
 8017a3a:	1c43      	adds	r3, r0, #1
 8017a3c:	d102      	bne.n	8017a44 <_kill_r+0x1c>
 8017a3e:	682b      	ldr	r3, [r5, #0]
 8017a40:	b103      	cbz	r3, 8017a44 <_kill_r+0x1c>
 8017a42:	6023      	str	r3, [r4, #0]
 8017a44:	bd38      	pop	{r3, r4, r5, pc}
 8017a46:	bf00      	nop
 8017a48:	24002928 	.word	0x24002928

08017a4c <_getpid_r>:
 8017a4c:	f7ea bd72 	b.w	8002534 <_getpid>

08017a50 <__swhatbuf_r>:
 8017a50:	b570      	push	{r4, r5, r6, lr}
 8017a52:	460c      	mov	r4, r1
 8017a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a58:	2900      	cmp	r1, #0
 8017a5a:	b096      	sub	sp, #88	; 0x58
 8017a5c:	4615      	mov	r5, r2
 8017a5e:	461e      	mov	r6, r3
 8017a60:	da0d      	bge.n	8017a7e <__swhatbuf_r+0x2e>
 8017a62:	89a3      	ldrh	r3, [r4, #12]
 8017a64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017a68:	f04f 0100 	mov.w	r1, #0
 8017a6c:	bf0c      	ite	eq
 8017a6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017a72:	2340      	movne	r3, #64	; 0x40
 8017a74:	2000      	movs	r0, #0
 8017a76:	6031      	str	r1, [r6, #0]
 8017a78:	602b      	str	r3, [r5, #0]
 8017a7a:	b016      	add	sp, #88	; 0x58
 8017a7c:	bd70      	pop	{r4, r5, r6, pc}
 8017a7e:	466a      	mov	r2, sp
 8017a80:	f000 f848 	bl	8017b14 <_fstat_r>
 8017a84:	2800      	cmp	r0, #0
 8017a86:	dbec      	blt.n	8017a62 <__swhatbuf_r+0x12>
 8017a88:	9901      	ldr	r1, [sp, #4]
 8017a8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017a8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017a92:	4259      	negs	r1, r3
 8017a94:	4159      	adcs	r1, r3
 8017a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017a9a:	e7eb      	b.n	8017a74 <__swhatbuf_r+0x24>

08017a9c <__smakebuf_r>:
 8017a9c:	898b      	ldrh	r3, [r1, #12]
 8017a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017aa0:	079d      	lsls	r5, r3, #30
 8017aa2:	4606      	mov	r6, r0
 8017aa4:	460c      	mov	r4, r1
 8017aa6:	d507      	bpl.n	8017ab8 <__smakebuf_r+0x1c>
 8017aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017aac:	6023      	str	r3, [r4, #0]
 8017aae:	6123      	str	r3, [r4, #16]
 8017ab0:	2301      	movs	r3, #1
 8017ab2:	6163      	str	r3, [r4, #20]
 8017ab4:	b002      	add	sp, #8
 8017ab6:	bd70      	pop	{r4, r5, r6, pc}
 8017ab8:	ab01      	add	r3, sp, #4
 8017aba:	466a      	mov	r2, sp
 8017abc:	f7ff ffc8 	bl	8017a50 <__swhatbuf_r>
 8017ac0:	9900      	ldr	r1, [sp, #0]
 8017ac2:	4605      	mov	r5, r0
 8017ac4:	4630      	mov	r0, r6
 8017ac6:	f7fb fd9d 	bl	8013604 <_malloc_r>
 8017aca:	b948      	cbnz	r0, 8017ae0 <__smakebuf_r+0x44>
 8017acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ad0:	059a      	lsls	r2, r3, #22
 8017ad2:	d4ef      	bmi.n	8017ab4 <__smakebuf_r+0x18>
 8017ad4:	f023 0303 	bic.w	r3, r3, #3
 8017ad8:	f043 0302 	orr.w	r3, r3, #2
 8017adc:	81a3      	strh	r3, [r4, #12]
 8017ade:	e7e3      	b.n	8017aa8 <__smakebuf_r+0xc>
 8017ae0:	89a3      	ldrh	r3, [r4, #12]
 8017ae2:	6020      	str	r0, [r4, #0]
 8017ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ae8:	81a3      	strh	r3, [r4, #12]
 8017aea:	9b00      	ldr	r3, [sp, #0]
 8017aec:	6163      	str	r3, [r4, #20]
 8017aee:	9b01      	ldr	r3, [sp, #4]
 8017af0:	6120      	str	r0, [r4, #16]
 8017af2:	b15b      	cbz	r3, 8017b0c <__smakebuf_r+0x70>
 8017af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017af8:	4630      	mov	r0, r6
 8017afa:	f000 f81d 	bl	8017b38 <_isatty_r>
 8017afe:	b128      	cbz	r0, 8017b0c <__smakebuf_r+0x70>
 8017b00:	89a3      	ldrh	r3, [r4, #12]
 8017b02:	f023 0303 	bic.w	r3, r3, #3
 8017b06:	f043 0301 	orr.w	r3, r3, #1
 8017b0a:	81a3      	strh	r3, [r4, #12]
 8017b0c:	89a3      	ldrh	r3, [r4, #12]
 8017b0e:	431d      	orrs	r5, r3
 8017b10:	81a5      	strh	r5, [r4, #12]
 8017b12:	e7cf      	b.n	8017ab4 <__smakebuf_r+0x18>

08017b14 <_fstat_r>:
 8017b14:	b538      	push	{r3, r4, r5, lr}
 8017b16:	4d07      	ldr	r5, [pc, #28]	; (8017b34 <_fstat_r+0x20>)
 8017b18:	2300      	movs	r3, #0
 8017b1a:	4604      	mov	r4, r0
 8017b1c:	4608      	mov	r0, r1
 8017b1e:	4611      	mov	r1, r2
 8017b20:	602b      	str	r3, [r5, #0]
 8017b22:	f7ea fd6e 	bl	8002602 <_fstat>
 8017b26:	1c43      	adds	r3, r0, #1
 8017b28:	d102      	bne.n	8017b30 <_fstat_r+0x1c>
 8017b2a:	682b      	ldr	r3, [r5, #0]
 8017b2c:	b103      	cbz	r3, 8017b30 <_fstat_r+0x1c>
 8017b2e:	6023      	str	r3, [r4, #0]
 8017b30:	bd38      	pop	{r3, r4, r5, pc}
 8017b32:	bf00      	nop
 8017b34:	24002928 	.word	0x24002928

08017b38 <_isatty_r>:
 8017b38:	b538      	push	{r3, r4, r5, lr}
 8017b3a:	4d06      	ldr	r5, [pc, #24]	; (8017b54 <_isatty_r+0x1c>)
 8017b3c:	2300      	movs	r3, #0
 8017b3e:	4604      	mov	r4, r0
 8017b40:	4608      	mov	r0, r1
 8017b42:	602b      	str	r3, [r5, #0]
 8017b44:	f7ea fd6d 	bl	8002622 <_isatty>
 8017b48:	1c43      	adds	r3, r0, #1
 8017b4a:	d102      	bne.n	8017b52 <_isatty_r+0x1a>
 8017b4c:	682b      	ldr	r3, [r5, #0]
 8017b4e:	b103      	cbz	r3, 8017b52 <_isatty_r+0x1a>
 8017b50:	6023      	str	r3, [r4, #0]
 8017b52:	bd38      	pop	{r3, r4, r5, pc}
 8017b54:	24002928 	.word	0x24002928

08017b58 <_init>:
 8017b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b5a:	bf00      	nop
 8017b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b5e:	bc08      	pop	{r3}
 8017b60:	469e      	mov	lr, r3
 8017b62:	4770      	bx	lr

08017b64 <_fini>:
 8017b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b66:	bf00      	nop
 8017b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017b6a:	bc08      	pop	{r3}
 8017b6c:	469e      	mov	lr, r3
 8017b6e:	4770      	bx	lr
