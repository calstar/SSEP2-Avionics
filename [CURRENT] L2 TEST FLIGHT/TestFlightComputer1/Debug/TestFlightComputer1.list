
TestFlightComputer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be0c  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800c0d8  0800c0d8  0001c0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c110  0800c110  0001c110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c118  0800c118  0001c118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c11c  0800c11c  0001c11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  0800c120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000d9c  24000010  0800c130  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000dac  0800c130  00020dac  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00024859  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000407c  00000000  00000000  000448da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001dc8  00000000  00000000  00048958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001718  00000000  00000000  0004a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00038424  00000000  00000000  0004be38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00027df6  00000000  00000000  0008425c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00167699  00000000  00000000  000ac052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000081cc  00000000  00000000  002136ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008a  00000000  00000000  0021b8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800c0c0 	.word	0x0800c0c0

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800c0c0 	.word	0x0800c0c0

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f001 fda4 	bl	8002158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f830 	bl	8000674 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000614:	f000 f8a0 	bl	8000758 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 fd36 	bl	8001088 <MX_GPIO_Init>
  MX_CORDIC_Init();
 800061c:	f000 f94a 	bl	80008b4 <MX_CORDIC_Init>
  MX_CRC_Init();
 8000620:	f000 f95c 	bl	80008dc <MX_CRC_Init>
  MX_FMAC_Init();
 8000624:	f000 f97c 	bl	8000920 <MX_FMAC_Init>
  MX_I2C1_Init();
 8000628:	f000 f98e 	bl	8000948 <MX_I2C1_Init>
  MX_I2C2_Init();
 800062c:	f000 f9cc 	bl	80009c8 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000630:	f000 fa0a 	bl	8000a48 <MX_I2C3_Init>
  MX_I2C4_Init();
 8000634:	f000 fa48 	bl	8000ac8 <MX_I2C4_Init>
  MX_RNG_Init();
 8000638:	f000 fa86 	bl	8000b48 <MX_RNG_Init>
  MX_SDMMC1_MMC_Init();
 800063c:	f000 fa9a 	bl	8000b74 <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 8000640:	f000 faba 	bl	8000bb8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000644:	f000 fb0e 	bl	8000c64 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000648:	f000 fb62 	bl	8000d10 <MX_SPI3_Init>
  MX_SPI4_Init();
 800064c:	f000 fbb6 	bl	8000dbc <MX_SPI4_Init>
  MX_SPI6_Init();
 8000650:	f000 fc0a 	bl	8000e68 <MX_SPI6_Init>
  MX_USB_OTG_HS_PCD_Init();
 8000654:	f000 fce6 	bl	8001024 <MX_USB_OTG_HS_PCD_Init>
  MX_ADC1_Init();
 8000658:	f000 f8b4 	bl	80007c4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800065c:	f000 fc5a 	bl	8000f14 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000660:	2201      	movs	r2, #1
 8000662:	4902      	ldr	r1, [pc, #8]	; (800066c <main+0x64>)
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <main+0x68>)
 8000666:	f008 fe03 	bl	8009270 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0x62>
 800066c:	24000898 	.word	0x24000898
 8000670:	240007a0 	.word	0x240007a0

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b09c      	sub	sp, #112	; 0x70
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800067e:	224c      	movs	r2, #76	; 0x4c
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f00b fcf0 	bl	800c068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2220      	movs	r2, #32
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f00b fcea 	bl	800c068 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000694:	2002      	movs	r0, #2
 8000696:	f004 ff93 	bl	80055c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800069a:	2300      	movs	r3, #0
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <SystemClock_Config+0xe0>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a6:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <SystemClock_Config+0xe0>)
 80006a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ac:	6193      	str	r3, [r2, #24]
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <SystemClock_Config+0xe0>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ba:	bf00      	nop
 80006bc:	4b25      	ldr	r3, [pc, #148]	; (8000754 <SystemClock_Config+0xe0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006c8:	d1f8      	bne.n	80006bc <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80006ca:	2322      	movs	r3, #34	; 0x22
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80006d2:	2340      	movs	r3, #64	; 0x40
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006de:	2300      	movs	r3, #0
 80006e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80006e6:	230c      	movs	r3, #12
 80006e8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006ea:	2301      	movs	r3, #1
 80006ec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 80006ee:	2301      	movs	r3, #1
 80006f0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006f6:	230c      	movs	r3, #12
 80006f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006fa:	2300      	movs	r3, #0
 80006fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	4618      	mov	r0, r3
 8000708:	f004 ffa4 	bl	8005654 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000712:	f000 fd7f 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	233f      	movs	r3, #63	; 0x3f
 8000718:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2303      	movs	r3, #3
 800071c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000726:	2340      	movs	r3, #64	; 0x40
 8000728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 800072a:	2350      	movs	r3, #80	; 0x50
 800072c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800072e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8000734:	2350      	movs	r3, #80	; 0x50
 8000736:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000738:	1d3b      	adds	r3, r7, #4
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f005 fb63 	bl	8005e08 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000748:	f000 fd64 	bl	8001214 <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3770      	adds	r7, #112	; 0x70
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	58024800 	.word	0x58024800

08000758 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b0ae      	sub	sp, #184	; 0xb8
 800075c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	22b8      	movs	r2, #184	; 0xb8
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f00b fc7f 	bl	800c068 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 800076a:	4a15      	ldr	r2, [pc, #84]	; (80007c0 <PeriphCommonClock_Config+0x68>)
 800076c:	f04f 0300 	mov.w	r3, #0
 8000770:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000778:	230c      	movs	r3, #12
 800077a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000788:	23c0      	movs	r3, #192	; 0xc0
 800078a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000798:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 800079a:	2300      	movs	r3, #0
 800079c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800079e:	2300      	movs	r3, #0
 80007a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a4:	463b      	mov	r3, r7
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 feba 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 80007b2:	f000 fd2f 	bl	8001214 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	37b8      	adds	r7, #184	; 0xb8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	80090000 	.word	0x80090000

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007d6:	463b      	mov	r3, r7
 80007d8:	2224      	movs	r2, #36	; 0x24
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f00b fc43 	bl	800c068 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007e2:	4b31      	ldr	r3, [pc, #196]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007e4:	4a31      	ldr	r2, [pc, #196]	; (80008ac <MX_ADC1_Init+0xe8>)
 80007e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e8:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007ee:	4b2e      	ldr	r3, [pc, #184]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_ADC1_Init+0xe4>)
 80007fc:	2204      	movs	r2, #4
 80007fe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000802:	2200      	movs	r2, #0
 8000804:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000808:	2200      	movs	r2, #0
 800080a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800080e:	2201      	movs	r2, #1
 8000810:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000814:	2200      	movs	r2, #0
 8000816:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800081c:	2200      	movs	r2, #0
 800081e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000822:	2200      	movs	r2, #0
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000826:	4b20      	ldr	r3, [pc, #128]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000828:	2200      	movs	r2, #0
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800082e:	2200      	movs	r2, #0
 8000830:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000834:	2200      	movs	r2, #0
 8000836:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000838:	4b1b      	ldr	r3, [pc, #108]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000840:	4819      	ldr	r0, [pc, #100]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000842:	f001 ff85 	bl	8002750 <HAL_ADC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800084c:	f000 fce2 	bl	8001214 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000858:	4619      	mov	r1, r3
 800085a:	4813      	ldr	r0, [pc, #76]	; (80008a8 <MX_ADC1_Init+0xe4>)
 800085c:	f002 ffc0 	bl	80037e0 <HAL_ADCEx_MultiModeConfigChannel>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000866:	f000 fcd5 	bl	8001214 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_ADC1_Init+0xec>)
 800086c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800086e:	2306      	movs	r3, #6
 8000870:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000876:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800087a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800087c:	2304      	movs	r3, #4
 800087e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	4619      	mov	r1, r3
 800088e:	4806      	ldr	r0, [pc, #24]	; (80008a8 <MX_ADC1_Init+0xe4>)
 8000890:	f002 f966 	bl	8002b60 <HAL_ADC_ConfigChannel>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 800089a:	f000 fcbb 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	2400002c 	.word	0x2400002c
 80008ac:	40022000 	.word	0x40022000
 80008b0:	10c00010 	.word	0x10c00010

080008b4 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <MX_CORDIC_Init+0x20>)
 80008ba:	4a07      	ldr	r2, [pc, #28]	; (80008d8 <MX_CORDIC_Init+0x24>)
 80008bc:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80008be:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_CORDIC_Init+0x20>)
 80008c0:	f003 f870 	bl	80039a4 <HAL_CORDIC_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80008ca:	f000 fca3 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2400009c 	.word	0x2400009c
 80008d8:	48024400 	.word	0x48024400

080008dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_CRC_Init+0x3c>)
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <MX_CRC_Init+0x40>)
 80008e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_CRC_Init+0x3c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_CRC_Init+0x3c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_CRC_Init+0x3c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80008f8:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_CRC_Init+0x3c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_CRC_Init+0x3c>)
 8000900:	2201      	movs	r2, #1
 8000902:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_CRC_Init+0x3c>)
 8000906:	f003 f963 	bl	8003bd0 <HAL_CRC_Init>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000910:	f000 fc80 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	240000c4 	.word	0x240000c4
 800091c:	58024c00 	.word	0x58024c00

08000920 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_FMAC_Init+0x20>)
 8000926:	4a07      	ldr	r2, [pc, #28]	; (8000944 <MX_FMAC_Init+0x24>)
 8000928:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_FMAC_Init+0x20>)
 800092c:	f003 fa42 	bl	8003db4 <HAL_FMAC_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8000936:	f000 fc6d 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	240000e8 	.word	0x240000e8
 8000944:	48024000 	.word	0x48024000

08000948 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_I2C1_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <MX_I2C1_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_I2C1_Init+0x74>)
 8000954:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <MX_I2C1_Init+0x7c>)
 8000956:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_I2C1_Init+0x74>)
 8000960:	2201      	movs	r2, #1
 8000962:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_I2C1_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2C1_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_I2C1_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000982:	480e      	ldr	r0, [pc, #56]	; (80009bc <MX_I2C1_Init+0x74>)
 8000984:	f003 fc84 	bl	8004290 <HAL_I2C_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800098e:	f000 fc41 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000992:	2100      	movs	r1, #0
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <MX_I2C1_Init+0x74>)
 8000996:	f003 fd0b 	bl	80043b0 <HAL_I2CEx_ConfigAnalogFilter>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009a0:	f000 fc38 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009a4:	2100      	movs	r1, #0
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_I2C1_Init+0x74>)
 80009a8:	f003 fd4d 	bl	8004446 <HAL_I2CEx_ConfigDigitalFilter>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009b2:	f000 fc2f 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	24000120 	.word	0x24000120
 80009c0:	40005400 	.word	0x40005400
 80009c4:	20303e5d 	.word	0x20303e5d

080009c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_I2C2_Init+0x74>)
 80009ce:	4a1c      	ldr	r2, [pc, #112]	; (8000a40 <MX_I2C2_Init+0x78>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_I2C2_Init+0x74>)
 80009d4:	4a1b      	ldr	r2, [pc, #108]	; (8000a44 <MX_I2C2_Init+0x7c>)
 80009d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009d8:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_I2C2_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_I2C2_Init+0x74>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009e4:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_I2C2_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009ea:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_I2C2_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_I2C2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_I2C2_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_I2C2_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a02:	480e      	ldr	r0, [pc, #56]	; (8000a3c <MX_I2C2_Init+0x74>)
 8000a04:	f003 fc44 	bl	8004290 <HAL_I2C_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a0e:	f000 fc01 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a12:	2100      	movs	r1, #0
 8000a14:	4809      	ldr	r0, [pc, #36]	; (8000a3c <MX_I2C2_Init+0x74>)
 8000a16:	f003 fccb 	bl	80043b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a20:	f000 fbf8 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_I2C2_Init+0x74>)
 8000a28:	f003 fd0d 	bl	8004446 <HAL_I2CEx_ConfigDigitalFilter>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f000 fbef 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	24000174 	.word	0x24000174
 8000a40:	40005800 	.word	0x40005800
 8000a44:	20303e5d 	.word	0x20303e5d

08000a48 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a4e:	4a1c      	ldr	r2, [pc, #112]	; (8000ac0 <MX_I2C3_Init+0x78>)
 8000a50:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a54:	4a1b      	ldr	r2, [pc, #108]	; (8000ac4 <MX_I2C3_Init+0x7c>)
 8000a56:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000a6a:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000a82:	480e      	ldr	r0, [pc, #56]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a84:	f003 fc04 	bl	8004290 <HAL_I2C_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000a8e:	f000 fbc1 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <MX_I2C3_Init+0x74>)
 8000a96:	f003 fc8b 	bl	80043b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000aa0:	f000 fbb8 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_I2C3_Init+0x74>)
 8000aa8:	f003 fccd 	bl	8004446 <HAL_I2CEx_ConfigDigitalFilter>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000ab2:	f000 fbaf 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	240001c8 	.word	0x240001c8
 8000ac0:	40005c00 	.word	0x40005c00
 8000ac4:	20303e5d 	.word	0x20303e5d

08000ac8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_I2C4_Init+0x78>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 8000ad2:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <MX_I2C4_Init+0x7c>)
 8000ad6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae4:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b02:	480e      	ldr	r0, [pc, #56]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000b04:	f003 fbc4 	bl	8004290 <HAL_I2C_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000b0e:	f000 fb81 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b12:	2100      	movs	r1, #0
 8000b14:	4809      	ldr	r0, [pc, #36]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000b16:	f003 fc4b 	bl	80043b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000b20:	f000 fb78 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_I2C4_Init+0x74>)
 8000b28:	f003 fc8d 	bl	8004446 <HAL_I2CEx_ConfigDigitalFilter>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000b32:	f000 fb6f 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	2400021c 	.word	0x2400021c
 8000b40:	58001c00 	.word	0x58001c00
 8000b44:	20303e5d 	.word	0x20303e5d

08000b48 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_RNG_Init+0x24>)
 8000b4e:	4a08      	ldr	r2, [pc, #32]	; (8000b70 <MX_RNG_Init+0x28>)
 8000b50:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_RNG_Init+0x24>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_RNG_Init+0x24>)
 8000b5a:	f008 f8c7 	bl	8008cec <HAL_RNG_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000b64:	f000 fb56 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	24000270 	.word	0x24000270
 8000b70:	48021800 	.word	0x48021800

08000b74 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <MX_SDMMC1_MMC_Init+0x3c>)
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	; (8000bb4 <MX_SDMMC1_MMC_Init+0x40>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SDMMC1_MMC_Init+0x3c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_SDMMC1_MMC_Init+0x3c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SDMMC1_MMC_Init+0x3c>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_SDMMC1_MMC_Init+0x3c>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SDMMC1_MMC_Init+0x3c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_SDMMC1_MMC_Init+0x3c>)
 8000b9e:	f003 fc9e 	bl	80044de <HAL_MMC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_SDMMC1_MMC_Init+0x38>
  {
    Error_Handler();
 8000ba8:	f000 fb34 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	24000284 	.word	0x24000284
 8000bb4:	52007000 	.word	0x52007000

08000bb8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bbc:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bbe:	4a28      	ldr	r2, [pc, #160]	; (8000c60 <MX_SPI1_Init+0xa8>)
 8000bc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bc4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bca:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bd2:	2203      	movs	r2, #3
 8000bd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000be4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000be8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c02:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c0e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_SPI1_Init+0xa4>)
 8000c48:	f008 f8f4 	bl	8008e34 <HAL_SPI_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000c52:	f000 fadf 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240004f8 	.word	0x240004f8
 8000c60:	40013000 	.word	0x40013000

08000c64 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000c6a:	4a28      	ldr	r2, [pc, #160]	; (8000d0c <MX_SPI2_Init+0xa8>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c6e:	4b26      	ldr	r3, [pc, #152]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000c70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c76:	4b24      	ldr	r3, [pc, #144]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c7c:	4b22      	ldr	r3, [pc, #136]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000c7e:	2203      	movs	r2, #3
 8000c80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c82:	4b21      	ldr	r3, [pc, #132]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c88:	4b1f      	ldr	r3, [pc, #124]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c8e:	4b1e      	ldr	r3, [pc, #120]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000c90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000cb6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cda:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cec:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <MX_SPI2_Init+0xa4>)
 8000cf4:	f008 f89e 	bl	8008e34 <HAL_SPI_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000cfe:	f000 fa89 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	24000580 	.word	0x24000580
 8000d0c:	40003800 	.word	0x40003800

08000d10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d16:	4a28      	ldr	r2, [pc, #160]	; (8000db8 <MX_SPI3_Init+0xa8>)
 8000d18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d1c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d22:	4b24      	ldr	r3, [pc, #144]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d28:	4b22      	ldr	r3, [pc, #136]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d2e:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d3a:	4b1e      	ldr	r3, [pc, #120]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d3c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d40:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d42:	4b1c      	ldr	r3, [pc, #112]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d48:	4b1a      	ldr	r3, [pc, #104]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4e:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d54:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000d5a:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d66:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d68:	4b12      	ldr	r3, [pc, #72]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_SPI3_Init+0xa4>)
 8000da0:	f008 f848 	bl	8008e34 <HAL_SPI_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000daa:	f000 fa33 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	24000608 	.word	0x24000608
 8000db8:	40003c00 	.word	0x40003c00

08000dbc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000dc2:	4a28      	ldr	r2, [pc, #160]	; (8000e64 <MX_SPI4_Init+0xa8>)
 8000dc4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000dc6:	4b26      	ldr	r3, [pc, #152]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000dc8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dcc:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000dce:	4b24      	ldr	r3, [pc, #144]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000dd4:	4b22      	ldr	r3, [pc, #136]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000dd6:	2203      	movs	r2, #3
 8000dd8:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dda:	4b21      	ldr	r3, [pc, #132]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000de0:	4b1f      	ldr	r3, [pc, #124]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000de6:	4b1e      	ldr	r3, [pc, #120]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000de8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000dec:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e12:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_SPI4_Init+0xa4>)
 8000e4c:	f007 fff2 	bl	8008e34 <HAL_SPI_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000e56:	f000 f9dd 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	24000690 	.word	0x24000690
 8000e64:	40013400 	.word	0x40013400

08000e68 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000e6c:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000e6e:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <MX_SPI6_Init+0xa8>)
 8000e70:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000e74:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e78:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000e7a:	4b24      	ldr	r3, [pc, #144]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e80:	4b22      	ldr	r3, [pc, #136]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000e82:	2203      	movs	r2, #3
 8000e84:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e86:	4b21      	ldr	r3, [pc, #132]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e92:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000e94:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e98:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e9a:	4b1c      	ldr	r3, [pc, #112]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000eba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_SPI6_Init+0xa4>)
 8000ef8:	f007 ff9c 	bl	8008e34 <HAL_SPI_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8000f02:	f000 f987 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	24000718 	.word	0x24000718
 8000f10:	58001400 	.word	0x58001400

08000f14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <MX_USART2_UART_Init+0x94>)
 8000f1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f26:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f5c:	4811      	ldr	r0, [pc, #68]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f5e:	f008 f8a8 	bl	80090b2 <HAL_UART_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f68:	f000 f954 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f70:	f00a f8dd 	bl	800b12e <HAL_UARTEx_SetTxFifoThreshold>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f7a:	f000 f94b 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f82:	f00a f912 	bl	800b1aa <HAL_UARTEx_SetRxFifoThreshold>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f8c:	f000 f942 	bl	8001214 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_USART2_UART_Init+0x90>)
 8000f92:	f00a f893 	bl	800b0bc <HAL_UARTEx_DisableFifoMode>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f9c:	f000 f93a 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	240007a0 	.word	0x240007a0
 8000fa8:	40004400 	.word	0x40004400

08000fac <HAL_UART_RxCpltCallback>:
{
    HAL_UART_Receive(&huart2, buffer, size, 1000);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a15      	ldr	r2, [pc, #84]	; (8001010 <HAL_UART_RxCpltCallback+0x64>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d123      	bne.n	8001006 <HAL_UART_RxCpltCallback+0x5a>
    // Process received data here
    // Example: Copy received data to a buffer
    rxBuffer[rxBufferIndex++] = rxData;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_UART_RxCpltCallback+0x68>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	b2d1      	uxtb	r1, r2
 8000fc6:	4a13      	ldr	r2, [pc, #76]	; (8001014 <HAL_UART_RxCpltCallback+0x68>)
 8000fc8:	7011      	strb	r1, [r2, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_UART_RxCpltCallback+0x6c>)
 8000fce:	7819      	ldrb	r1, [r3, #0]
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_UART_RxCpltCallback+0x70>)
 8000fd2:	5499      	strb	r1, [r3, r2]

    // Check if buffer is full or if you received a specific termination character
    if (rxBufferIndex >= BUFFER_SIZE || rxData == '\n') {
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_UART_RxCpltCallback+0x68>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b63      	cmp	r3, #99	; 0x63
 8000fda:	d803      	bhi.n	8000fe4 <HAL_UART_RxCpltCallback+0x38>
 8000fdc:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <HAL_UART_RxCpltCallback+0x6c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b0a      	cmp	r3, #10
 8000fe2:	d10b      	bne.n	8000ffc <HAL_UART_RxCpltCallback+0x50>
      // Do something with the received data
      // Example: Print it back
      HAL_UART_Transmit(&huart2, rxBuffer, rxBufferIndex, HAL_MAX_DELAY);
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_UART_RxCpltCallback+0x68>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	490b      	ldr	r1, [pc, #44]	; (800101c <HAL_UART_RxCpltCallback+0x70>)
 8000ff0:	480b      	ldr	r0, [pc, #44]	; (8001020 <HAL_UART_RxCpltCallback+0x74>)
 8000ff2:	f008 f8ae 	bl	8009152 <HAL_UART_Transmit>

      // Reset buffer index for next reception
      rxBufferIndex = 0;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <HAL_UART_RxCpltCallback+0x68>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
    }

    // Start next receive
    HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	4906      	ldr	r1, [pc, #24]	; (8001018 <HAL_UART_RxCpltCallback+0x6c>)
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <HAL_UART_RxCpltCallback+0x74>)
 8001002:	f008 f935 	bl	8009270 <HAL_UART_Receive_IT>
  }
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40004400 	.word	0x40004400
 8001014:	24000899 	.word	0x24000899
 8001018:	24000898 	.word	0x24000898
 800101c:	24000834 	.word	0x24000834
 8001020:	240007a0 	.word	0x240007a0

08001024 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <MX_USB_OTG_HS_PCD_Init+0x60>)
 800102c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001030:	2209      	movs	r2, #9
 8001032:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001036:	2202      	movs	r2, #2
 8001038:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001040:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001042:	2202      	movs	r2, #2
 8001044:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001054:	2200      	movs	r2, #0
 8001056:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800105a:	2200      	movs	r2, #0
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001060:	2200      	movs	r2, #0
 8001062:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001066:	2200      	movs	r2, #0
 8001068:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800106a:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800106c:	f004 f960 	bl	8005330 <HAL_PCD_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8001076:	f000 f8cd 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2400089c 	.word	0x2400089c
 8001084:	40040000 	.word	0x40040000

08001088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	4b57      	ldr	r3, [pc, #348]	; (80011fc <MX_GPIO_Init+0x174>)
 80010a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a4:	4a55      	ldr	r2, [pc, #340]	; (80011fc <MX_GPIO_Init+0x174>)
 80010a6:	f043 0304 	orr.w	r3, r3, #4
 80010aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ae:	4b53      	ldr	r3, [pc, #332]	; (80011fc <MX_GPIO_Init+0x174>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010bc:	4b4f      	ldr	r3, [pc, #316]	; (80011fc <MX_GPIO_Init+0x174>)
 80010be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c2:	4a4e      	ldr	r2, [pc, #312]	; (80011fc <MX_GPIO_Init+0x174>)
 80010c4:	f043 0310 	orr.w	r3, r3, #16
 80010c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010cc:	4b4b      	ldr	r3, [pc, #300]	; (80011fc <MX_GPIO_Init+0x174>)
 80010ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b48      	ldr	r3, [pc, #288]	; (80011fc <MX_GPIO_Init+0x174>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e0:	4a46      	ldr	r2, [pc, #280]	; (80011fc <MX_GPIO_Init+0x174>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <MX_GPIO_Init+0x174>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b40      	ldr	r3, [pc, #256]	; (80011fc <MX_GPIO_Init+0x174>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	4a3f      	ldr	r2, [pc, #252]	; (80011fc <MX_GPIO_Init+0x174>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <MX_GPIO_Init+0x174>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001116:	4b39      	ldr	r3, [pc, #228]	; (80011fc <MX_GPIO_Init+0x174>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111c:	4a37      	ldr	r2, [pc, #220]	; (80011fc <MX_GPIO_Init+0x174>)
 800111e:	f043 0308 	orr.w	r3, r3, #8
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001126:	4b35      	ldr	r3, [pc, #212]	; (80011fc <MX_GPIO_Init+0x174>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112c:	f003 0308 	and.w	r3, r3, #8
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001134:	4b31      	ldr	r3, [pc, #196]	; (80011fc <MX_GPIO_Init+0x174>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113a:	4a30      	ldr	r2, [pc, #192]	; (80011fc <MX_GPIO_Init+0x174>)
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001144:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <MX_GPIO_Init+0x174>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001158:	4829      	ldr	r0, [pc, #164]	; (8001200 <MX_GPIO_Init+0x178>)
 800115a:	f003 f87f 	bl	800425c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_10
 800115e:	2200      	movs	r2, #0
 8001160:	f44f 415f 	mov.w	r1, #57088	; 0xdf00
 8001164:	4827      	ldr	r0, [pc, #156]	; (8001204 <MX_GPIO_Init+0x17c>)
 8001166:	f003 f879 	bl	800425c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <MX_GPIO_Init+0x178>)
 8001184:	f002 fec2 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_7;
 8001188:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 800118c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 031c 	add.w	r3, r7, #28
 800119a:	4619      	mov	r1, r3
 800119c:	481a      	ldr	r0, [pc, #104]	; (8001208 <MX_GPIO_Init+0x180>)
 800119e:	f002 feb5 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD11 PD14 PD10
                           PD9 PD8 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_10
 80011a2:	f44f 435f 	mov.w	r3, #57088	; 0xdf00
 80011a6:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4812      	ldr	r0, [pc, #72]	; (8001204 <MX_GPIO_Init+0x17c>)
 80011bc:	f002 fea6 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_12;
 80011c0:	f243 0303 	movw	r3, #12291	; 0x3003
 80011c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	480d      	ldr	r0, [pc, #52]	; (800120c <MX_GPIO_Init+0x184>)
 80011d6:	f002 fe99 	bl	8003f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE12 PE9 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_13;
 80011da:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 80011de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e0:	2300      	movs	r3, #0
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4808      	ldr	r0, [pc, #32]	; (8001210 <MX_GPIO_Init+0x188>)
 80011f0:	f002 fe8c 	bl	8003f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011f4:	bf00      	nop
 80011f6:	3730      	adds	r7, #48	; 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	58024400 	.word	0x58024400
 8001200:	58020800 	.word	0x58020800
 8001204:	58020c00 	.word	0x58020c00
 8001208:	58020000 	.word	0x58020000
 800120c:	58020400 	.word	0x58020400
 8001210:	58021000 	.word	0x58021000

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	e7fe      	b.n	800121c <Error_Handler+0x8>
	...

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001226:	4b0a      	ldr	r3, [pc, #40]	; (8001250 <HAL_MspInit+0x30>)
 8001228:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800122c:	4a08      	ldr	r2, [pc, #32]	; (8001250 <HAL_MspInit+0x30>)
 800122e:	f043 0302 	orr.w	r3, r3, #2
 8001232:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_MspInit+0x30>)
 8001238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	607b      	str	r3, [r7, #4]
 8001242:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	58024400 	.word	0x58024400

08001254 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08a      	sub	sp, #40	; 0x28
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a18      	ldr	r2, [pc, #96]	; (80012d4 <HAL_ADC_MspInit+0x80>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d129      	bne.n	80012ca <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <HAL_ADC_MspInit+0x84>)
 8001278:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800127c:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <HAL_ADC_MspInit+0x84>)
 800127e:	f043 0320 	orr.w	r3, r3, #32
 8001282:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001286:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_ADC_MspInit+0x84>)
 8001288:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800128c:	f003 0320 	and.w	r3, r3, #32
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <HAL_ADC_MspInit+0x84>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_ADC_MspInit+0x84>)
 800129c:	f043 0304 	orr.w	r3, r3, #4
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <HAL_ADC_MspInit+0x84>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|BATADC1_Pin;
 80012b2:	2311      	movs	r3, #17
 80012b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012b6:	2303      	movs	r3, #3
 80012b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012be:	f107 0314 	add.w	r3, r7, #20
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_ADC_MspInit+0x88>)
 80012c6:	f002 fe21 	bl	8003f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012ca:	bf00      	nop
 80012cc:	3728      	adds	r7, #40	; 0x28
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40022000 	.word	0x40022000
 80012d8:	58024400 	.word	0x58024400
 80012dc:	58020800 	.word	0x58020800

080012e0 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_CORDIC_MspInit+0x3c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10e      	bne.n	8001310 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <HAL_CORDIC_MspInit+0x40>)
 80012f4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80012f8:	4a09      	ldr	r2, [pc, #36]	; (8001320 <HAL_CORDIC_MspInit+0x40>)
 80012fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012fe:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <HAL_CORDIC_MspInit+0x40>)
 8001304:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	48024400 	.word	0x48024400
 8001320:	58024400 	.word	0x58024400

08001324 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_CRC_MspInit+0x3c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10e      	bne.n	8001354 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_CRC_MspInit+0x40>)
 8001338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133c:	4a09      	ldr	r2, [pc, #36]	; (8001364 <HAL_CRC_MspInit+0x40>)
 800133e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <HAL_CRC_MspInit+0x40>)
 8001348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001354:	bf00      	nop
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	58024c00 	.word	0x58024c00
 8001364:	58024400 	.word	0x58024400

08001368 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <HAL_FMAC_MspInit+0x3c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d10e      	bne.n	8001398 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800137a:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_FMAC_MspInit+0x40>)
 800137c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001380:	4a09      	ldr	r2, [pc, #36]	; (80013a8 <HAL_FMAC_MspInit+0x40>)
 8001382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001386:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800138a:	4b07      	ldr	r3, [pc, #28]	; (80013a8 <HAL_FMAC_MspInit+0x40>)
 800138c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	48024000 	.word	0x48024000
 80013a8:	58024400 	.word	0x58024400

080013ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b0c0      	sub	sp, #256	; 0x100
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c8:	22b8      	movs	r2, #184	; 0xb8
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f00a fe4b 	bl	800c068 <memset>
  if(hi2c->Instance==I2C1)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4abf      	ldr	r2, [pc, #764]	; (80016d4 <HAL_I2C_MspInit+0x328>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d147      	bne.n	800146c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013dc:	f04f 0208 	mov.w	r2, #8
 80013e0:	f04f 0300 	mov.w	r3, #0
 80013e4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f2:	4618      	mov	r0, r3
 80013f4:	f005 f894 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80013fe:	f7ff ff09 	bl	8001214 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4bb5      	ldr	r3, [pc, #724]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	4ab3      	ldr	r2, [pc, #716]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 800140a:	f043 0302 	orr.w	r3, r3, #2
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001412:	4bb1      	ldr	r3, [pc, #708]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800141e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001420:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001424:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001428:	2312      	movs	r3, #18
 800142a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800143a:	2304      	movs	r3, #4
 800143c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001440:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001444:	4619      	mov	r1, r3
 8001446:	48a5      	ldr	r0, [pc, #660]	; (80016dc <HAL_I2C_MspInit+0x330>)
 8001448:	f002 fd60 	bl	8003f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800144c:	4ba2      	ldr	r3, [pc, #648]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 800144e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001452:	4aa1      	ldr	r2, [pc, #644]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 8001454:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001458:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800145c:	4b9e      	ldr	r3, [pc, #632]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 800145e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
 8001468:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800146a:	e12e      	b.n	80016ca <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C2)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a9b      	ldr	r2, [pc, #620]	; (80016e0 <HAL_I2C_MspInit+0x334>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d147      	bne.n	8001506 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001476:	f04f 0208 	mov.w	r2, #8
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148c:	4618      	mov	r0, r3
 800148e:	f005 f847 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001498:	f7ff febc 	bl	8001214 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b8e      	ldr	r3, [pc, #568]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	4a8d      	ldr	r2, [pc, #564]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ac:	4b8a      	ldr	r3, [pc, #552]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	627b      	str	r3, [r7, #36]	; 0x24
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c2:	2312      	movs	r3, #18
 80014c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014d4:	2304      	movs	r3, #4
 80014d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014de:	4619      	mov	r1, r3
 80014e0:	487e      	ldr	r0, [pc, #504]	; (80016dc <HAL_I2C_MspInit+0x330>)
 80014e2:	f002 fd13 	bl	8003f0c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e6:	4b7c      	ldr	r3, [pc, #496]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80014e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014ec:	4a7a      	ldr	r2, [pc, #488]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80014ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014f2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80014f6:	4b78      	ldr	r3, [pc, #480]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80014f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001500:	623b      	str	r3, [r7, #32]
 8001502:	6a3b      	ldr	r3, [r7, #32]
}
 8001504:	e0e1      	b.n	80016ca <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C3)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a76      	ldr	r2, [pc, #472]	; (80016e4 <HAL_I2C_MspInit+0x338>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d16c      	bne.n	80015ea <HAL_I2C_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001510:	f04f 0208 	mov.w	r2, #8
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001522:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001526:	4618      	mov	r0, r3
 8001528:	f004 fffa 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8001532:	f7ff fe6f 	bl	8001214 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001536:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	4a66      	ldr	r2, [pc, #408]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001546:	4b64      	ldr	r3, [pc, #400]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 8001548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	61fb      	str	r3, [r7, #28]
 8001552:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001554:	4b60      	ldr	r3, [pc, #384]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	4a5f      	ldr	r2, [pc, #380]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001564:	4b5c      	ldr	r3, [pc, #368]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	f003 0304 	and.w	r3, r3, #4
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001572:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001576:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157a:	2312      	movs	r3, #18
 800157c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800158c:	2304      	movs	r3, #4
 800158e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001596:	4619      	mov	r1, r3
 8001598:	4853      	ldr	r0, [pc, #332]	; (80016e8 <HAL_I2C_MspInit+0x33c>)
 800159a:	f002 fcb7 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	2312      	movs	r3, #18
 80015a8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015b8:	2304      	movs	r3, #4
 80015ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015c2:	4619      	mov	r1, r3
 80015c4:	4849      	ldr	r0, [pc, #292]	; (80016ec <HAL_I2C_MspInit+0x340>)
 80015c6:	f002 fca1 	bl	8003f0c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015ca:	4b43      	ldr	r3, [pc, #268]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80015cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015d0:	4a41      	ldr	r2, [pc, #260]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80015d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80015dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697b      	ldr	r3, [r7, #20]
}
 80015e8:	e06f      	b.n	80016ca <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C4)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a40      	ldr	r2, [pc, #256]	; (80016f0 <HAL_I2C_MspInit+0x344>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d16a      	bne.n	80016ca <HAL_I2C_MspInit+0x31e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80015f4:	f04f 0210 	mov.w	r2, #16
 80015f8:	f04f 0300 	mov.w	r3, #0
 80015fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001600:	2300      	movs	r3, #0
 8001602:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800160a:	4618      	mov	r0, r3
 800160c:	f004 ff88 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_I2C_MspInit+0x26e>
      Error_Handler();
 8001616:	f7ff fdfd 	bl	8001214 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001620:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 8001622:	f043 0302 	orr.w	r3, r3, #2
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163e:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001648:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001656:	2340      	movs	r3, #64	; 0x40
 8001658:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165c:	2312      	movs	r3, #18
 800165e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 800166e:	2306      	movs	r3, #6
 8001670:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001678:	4619      	mov	r1, r3
 800167a:	4818      	ldr	r0, [pc, #96]	; (80016dc <HAL_I2C_MspInit+0x330>)
 800167c:	f002 fc46 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001684:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001688:	2312      	movs	r3, #18
 800168a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800169a:	2304      	movs	r3, #4
 800169c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016a4:	4619      	mov	r1, r3
 80016a6:	4813      	ldr	r0, [pc, #76]	; (80016f4 <HAL_I2C_MspInit+0x348>)
 80016a8:	f002 fc30 	bl	8003f0c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80016ac:	4b0a      	ldr	r3, [pc, #40]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80016ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016b2:	4a09      	ldr	r2, [pc, #36]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80016b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_I2C_MspInit+0x32c>)
 80016be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
}
 80016ca:	bf00      	nop
 80016cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40005400 	.word	0x40005400
 80016d8:	58024400 	.word	0x58024400
 80016dc:	58020400 	.word	0x58020400
 80016e0:	40005800 	.word	0x40005800
 80016e4:	40005c00 	.word	0x40005c00
 80016e8:	58020000 	.word	0x58020000
 80016ec:	58020800 	.word	0x58020800
 80016f0:	58001c00 	.word	0x58001c00
 80016f4:	58020c00 	.word	0x58020c00

080016f8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b0b2      	sub	sp, #200	; 0xc8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	22b8      	movs	r2, #184	; 0xb8
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f00a fcad 	bl	800c068 <memset>
  if(hrng->Instance==RNG)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a14      	ldr	r2, [pc, #80]	; (8001764 <HAL_RNG_MspInit+0x6c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d121      	bne.n	800175c <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001718:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800172a:	f107 0310 	add.w	r3, r7, #16
 800172e:	4618      	mov	r0, r3
 8001730:	f004 fef6 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 800173a:	f7ff fd6b 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_RNG_MspInit+0x70>)
 8001740:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001744:	4a08      	ldr	r2, [pc, #32]	; (8001768 <HAL_RNG_MspInit+0x70>)
 8001746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800174e:	4b06      	ldr	r3, [pc, #24]	; (8001768 <HAL_RNG_MspInit+0x70>)
 8001750:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800175c:	bf00      	nop
 800175e:	37c8      	adds	r7, #200	; 0xc8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	48021800 	.word	0x48021800
 8001768:	58024400 	.word	0x58024400

0800176c <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a2a      	ldr	r2, [pc, #168]	; (8001834 <HAL_MMC_MspInit+0xc8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d14d      	bne.n	800182a <HAL_MMC_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_MMC_MspInit+0xcc>)
 8001790:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001794:	4a28      	ldr	r2, [pc, #160]	; (8001838 <HAL_MMC_MspInit+0xcc>)
 8001796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800179a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800179e:	4b26      	ldr	r3, [pc, #152]	; (8001838 <HAL_MMC_MspInit+0xcc>)
 80017a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_MMC_MspInit+0xcc>)
 80017ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017b2:	4a21      	ldr	r2, [pc, #132]	; (8001838 <HAL_MMC_MspInit+0xcc>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017bc:	4b1e      	ldr	r3, [pc, #120]	; (8001838 <HAL_MMC_MspInit+0xcc>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <HAL_MMC_MspInit+0xcc>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d0:	4a19      	ldr	r2, [pc, #100]	; (8001838 <HAL_MMC_MspInit+0xcc>)
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017da:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_MMC_MspInit+0xcc>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PD2     ------> SDMMC1_CMD
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017e8:	2304      	movs	r3, #4
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80017f8:	230c      	movs	r3, #12
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	480e      	ldr	r0, [pc, #56]	; (800183c <HAL_MMC_MspInit+0xd0>)
 8001804:	f002 fb82 	bl	8003f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001808:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800181a:	230c      	movs	r3, #12
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4806      	ldr	r0, [pc, #24]	; (8001840 <HAL_MMC_MspInit+0xd4>)
 8001826:	f002 fb71 	bl	8003f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	52007000 	.word	0x52007000
 8001838:	58024400 	.word	0x58024400
 800183c:	58020c00 	.word	0x58020c00
 8001840:	58020800 	.word	0x58020800

08001844 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0c8      	sub	sp, #288	; 0x120
 8001848:	af00      	add	r7, sp, #0
 800184a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800184e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001852:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001854:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001864:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001868:	22b8      	movs	r2, #184	; 0xb8
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f00a fbfb 	bl	800c068 <memset>
  if(hspi->Instance==SPI1)
 8001872:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001876:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a98      	ldr	r2, [pc, #608]	; (8001ae0 <HAL_SPI_MspInit+0x29c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	f040 8091 	bne.w	80019a8 <HAL_SPI_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001886:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001892:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001896:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800189e:	4618      	mov	r0, r3
 80018a0:	f004 fe3e 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_SPI_MspInit+0x6a>
    {
      Error_Handler();
 80018aa:	f7ff fcb3 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018ae:	4b8d      	ldr	r3, [pc, #564]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80018b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018b4:	4a8b      	ldr	r2, [pc, #556]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80018b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018be:	4b89      	ldr	r3, [pc, #548]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80018c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018cc:	4b85      	ldr	r3, [pc, #532]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d2:	4a84      	ldr	r2, [pc, #528]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018dc:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80018de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80018e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	4b7e      	ldr	r3, [pc, #504]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f0:	4a7c      	ldr	r2, [pc, #496]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fa:	4b7a      	ldr	r3, [pc, #488]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80018fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	647b      	str	r3, [r7, #68]	; 0x44
 8001906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001908:	4b76      	ldr	r3, [pc, #472]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 800190a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190e:	4a75      	ldr	r2, [pc, #468]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 8001910:	f043 0308 	orr.w	r3, r3, #8
 8001914:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001918:	4b72      	ldr	r3, [pc, #456]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 800191a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
 8001924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    PB4(NJTRST)     ------> SPI1_MISO
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8001926:	2318      	movs	r3, #24
 8001928:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800193e:	2305      	movs	r3, #5
 8001940:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001944:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001948:	4619      	mov	r1, r3
 800194a:	4867      	ldr	r0, [pc, #412]	; (8001ae8 <HAL_SPI_MspInit+0x2a4>)
 800194c:	f002 fade 	bl	8003f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001950:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001954:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196a:	2305      	movs	r3, #5
 800196c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001974:	4619      	mov	r1, r3
 8001976:	485d      	ldr	r0, [pc, #372]	; (8001aec <HAL_SPI_MspInit+0x2a8>)
 8001978:	f002 fac8 	bl	8003f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001994:	2305      	movs	r3, #5
 8001996:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800199e:	4619      	mov	r1, r3
 80019a0:	4853      	ldr	r0, [pc, #332]	; (8001af0 <HAL_SPI_MspInit+0x2ac>)
 80019a2:	f002 fab3 	bl	8003f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80019a6:	e24d      	b.n	8001e44 <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI2)
 80019a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80019ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a4f      	ldr	r2, [pc, #316]	; (8001af4 <HAL_SPI_MspInit+0x2b0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	f040 80a0 	bne.w	8001afc <HAL_SPI_MspInit+0x2b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80019bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80019c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019d0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019d4:	4618      	mov	r0, r3
 80019d6:	f004 fda3 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_SPI_MspInit+0x1a0>
      Error_Handler();
 80019e0:	f7ff fc18 	bl	8001214 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019e4:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80019e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ea:	4a3e      	ldr	r2, [pc, #248]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019f4:	4b3b      	ldr	r3, [pc, #236]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 80019f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 8001a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a08:	4a36      	ldr	r2, [pc, #216]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 8001a0a:	f043 0302 	orr.w	r3, r3, #2
 8001a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 8001a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 8001a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a26:	4a2f      	ldr	r2, [pc, #188]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 8001a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 8001a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a44:	4a27      	ldr	r2, [pc, #156]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4e:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <HAL_SPI_MspInit+0x2a0>)
 8001a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
 8001a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a60:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a76:	2305      	movs	r3, #5
 8001a78:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001a80:	4619      	mov	r1, r3
 8001a82:	4819      	ldr	r0, [pc, #100]	; (8001ae8 <HAL_SPI_MspInit+0x2a4>)
 8001a84:	f002 fa42 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a88:	2308      	movs	r3, #8
 8001a8a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aa0:	2305      	movs	r3, #5
 8001aa2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aa6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4810      	ldr	r0, [pc, #64]	; (8001af0 <HAL_SPI_MspInit+0x2ac>)
 8001aae:	f002 fa2d 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ab2:	230c      	movs	r3, #12
 8001ab4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aca:	2305      	movs	r3, #5
 8001acc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ad0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4808      	ldr	r0, [pc, #32]	; (8001af8 <HAL_SPI_MspInit+0x2b4>)
 8001ad8:	f002 fa18 	bl	8003f0c <HAL_GPIO_Init>
}
 8001adc:	e1b2      	b.n	8001e44 <HAL_SPI_MspInit+0x600>
 8001ade:	bf00      	nop
 8001ae0:	40013000 	.word	0x40013000
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	58020400 	.word	0x58020400
 8001aec:	58020000 	.word	0x58020000
 8001af0:	58020c00 	.word	0x58020c00
 8001af4:	40003800 	.word	0x40003800
 8001af8:	58020800 	.word	0x58020800
  else if(hspi->Instance==SPI3)
 8001afc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001b00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4ad1      	ldr	r2, [pc, #836]	; (8001e50 <HAL_SPI_MspInit+0x60c>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	f040 8099 	bne.w	8001c42 <HAL_SPI_MspInit+0x3fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001b10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b14:	f04f 0300 	mov.w	r3, #0
 8001b18:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001b1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b24:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f004 fcf9 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <HAL_SPI_MspInit+0x2f4>
      Error_Handler();
 8001b34:	f7ff fb6e 	bl	8001214 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b38:	4bc6      	ldr	r3, [pc, #792]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b3e:	4ac5      	ldr	r2, [pc, #788]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b44:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b48:	4bc2      	ldr	r3, [pc, #776]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b56:	4bbf      	ldr	r3, [pc, #764]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5c:	4abd      	ldr	r2, [pc, #756]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b5e:	f043 0304 	orr.w	r3, r3, #4
 8001b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b66:	4bbb      	ldr	r3, [pc, #748]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b74:	4bb7      	ldr	r3, [pc, #732]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7a:	4ab6      	ldr	r2, [pc, #728]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b84:	4bb3      	ldr	r3, [pc, #716]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b92:	4bb0      	ldr	r3, [pc, #704]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b98:	4aae      	ldr	r2, [pc, #696]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba2:	4bac      	ldr	r3, [pc, #688]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	f003 0201 	and.w	r2, r3, #1
 8001bac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001bb0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001bba:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bbe:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001bc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bc4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bda:	2306      	movs	r3, #6
 8001bdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001be0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001be4:	4619      	mov	r1, r3
 8001be6:	489c      	ldr	r0, [pc, #624]	; (8001e58 <HAL_SPI_MspInit+0x614>)
 8001be8:	f002 f990 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bec:	2340      	movs	r3, #64	; 0x40
 8001bee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001c04:	2305      	movs	r3, #5
 8001c06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c0a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4892      	ldr	r0, [pc, #584]	; (8001e5c <HAL_SPI_MspInit+0x618>)
 8001c12:	f002 f97b 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c16:	2310      	movs	r3, #16
 8001c18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c2e:	2306      	movs	r3, #6
 8001c30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4889      	ldr	r0, [pc, #548]	; (8001e60 <HAL_SPI_MspInit+0x61c>)
 8001c3c:	f002 f966 	bl	8003f0c <HAL_GPIO_Init>
}
 8001c40:	e100      	b.n	8001e44 <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI4)
 8001c42:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c46:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a85      	ldr	r2, [pc, #532]	; (8001e64 <HAL_SPI_MspInit+0x620>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d156      	bne.n	8001d02 <HAL_SPI_MspInit+0x4be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001c54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f004 fc58 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_SPI_MspInit+0x436>
      Error_Handler();
 8001c76:	f7ff facd 	bl	8001214 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c7a:	4b76      	ldr	r3, [pc, #472]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001c7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c80:	4a74      	ldr	r2, [pc, #464]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001c82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001c8a:	4b72      	ldr	r3, [pc, #456]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001c8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ca2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ca6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ca8:	4b6a      	ldr	r3, [pc, #424]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cae:	4a69      	ldr	r2, [pc, #420]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb8:	4b66      	ldr	r3, [pc, #408]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbe:	f003 0210 	and.w	r2, r3, #16
 8001cc2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cd4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001cd6:	2374      	movs	r3, #116	; 0x74
 8001cd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001cee:	2305      	movs	r3, #5
 8001cf0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	485b      	ldr	r0, [pc, #364]	; (8001e68 <HAL_SPI_MspInit+0x624>)
 8001cfc:	f002 f906 	bl	8003f0c <HAL_GPIO_Init>
}
 8001d00:	e0a0      	b.n	8001e44 <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI6)
 8001d02:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d06:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a57      	ldr	r2, [pc, #348]	; (8001e6c <HAL_SPI_MspInit+0x628>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	f040 8097 	bne.w	8001e44 <HAL_SPI_MspInit+0x600>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8001d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f004 fbf7 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <HAL_SPI_MspInit+0x4f8>
      Error_Handler();
 8001d38:	f7ff fa6c 	bl	8001214 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001d3c:	4b45      	ldr	r3, [pc, #276]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001d3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d42:	4a44      	ldr	r2, [pc, #272]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001d44:	f043 0320 	orr.w	r3, r3, #32
 8001d48:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001d4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d52:	f003 0220 	and.w	r2, r3, #32
 8001d56:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d64:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d68:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6a:	4b3a      	ldr	r3, [pc, #232]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	4a38      	ldr	r2, [pc, #224]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001d72:	f043 0302 	orr.w	r3, r3, #2
 8001d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d80:	f003 0202 	and.w	r2, r3, #2
 8001d84:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d88:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d92:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001d96:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d98:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9e:	4a2d      	ldr	r2, [pc, #180]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da8:	4b2a      	ldr	r3, [pc, #168]	; (8001e54 <HAL_SPI_MspInit+0x610>)
 8001daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dae:	f003 0201 	and.w	r2, r3, #1
 8001db2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001db6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001dc0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dc4:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dc6:	2320      	movs	r3, #32
 8001dc8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001dde:	2308      	movs	r3, #8
 8001de0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001de8:	4619      	mov	r1, r3
 8001dea:	4821      	ldr	r0, [pc, #132]	; (8001e70 <HAL_SPI_MspInit+0x62c>)
 8001dec:	f002 f88e 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001e08:	2305      	movs	r3, #5
 8001e0a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001e12:	4619      	mov	r1, r3
 8001e14:	4812      	ldr	r0, [pc, #72]	; (8001e60 <HAL_SPI_MspInit+0x61c>)
 8001e16:	f002 f879 	bl	8003f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e1a:	2360      	movs	r3, #96	; 0x60
 8001e1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001e32:	2308      	movs	r3, #8
 8001e34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e38:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4808      	ldr	r0, [pc, #32]	; (8001e60 <HAL_SPI_MspInit+0x61c>)
 8001e40:	f002 f864 	bl	8003f0c <HAL_GPIO_Init>
}
 8001e44:	bf00      	nop
 8001e46:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40003c00 	.word	0x40003c00
 8001e54:	58024400 	.word	0x58024400
 8001e58:	58020800 	.word	0x58020800
 8001e5c:	58020c00 	.word	0x58020c00
 8001e60:	58020000 	.word	0x58020000
 8001e64:	40013400 	.word	0x40013400
 8001e68:	58021000 	.word	0x58021000
 8001e6c:	58001400 	.word	0x58001400
 8001e70:	58020400 	.word	0x58020400

08001e74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b0b8      	sub	sp, #224	; 0xe0
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8c:	f107 0310 	add.w	r3, r7, #16
 8001e90:	22b8      	movs	r2, #184	; 0xb8
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00a f8e7 	bl	800c068 <memset>
  if(huart->Instance==USART2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a26      	ldr	r2, [pc, #152]	; (8001f38 <HAL_UART_MspInit+0xc4>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d145      	bne.n	8001f30 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ea4:	f04f 0202 	mov.w	r2, #2
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eb6:	f107 0310 	add.w	r3, r7, #16
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f004 fb30 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ec6:	f7ff f9a5 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eca:	4b1c      	ldr	r3, [pc, #112]	; (8001f3c <HAL_UART_MspInit+0xc8>)
 8001ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ed0:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_UART_MspInit+0xc8>)
 8001ed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_UART_MspInit+0xc8>)
 8001edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_UART_MspInit+0xc8>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eee:	4a13      	ldr	r2, [pc, #76]	; (8001f3c <HAL_UART_MspInit+0xc8>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <HAL_UART_MspInit+0xc8>)
 8001efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f06:	230c      	movs	r3, #12
 8001f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f1e:	2307      	movs	r3, #7
 8001f20:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <HAL_UART_MspInit+0xcc>)
 8001f2c:	f001 ffee 	bl	8003f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f30:	bf00      	nop
 8001f32:	37e0      	adds	r7, #224	; 0xe0
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40004400 	.word	0x40004400
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	58020000 	.word	0x58020000

08001f44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0b2      	sub	sp, #200	; 0xc8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	22b8      	movs	r2, #184	; 0xb8
 8001f52:	2100      	movs	r1, #0
 8001f54:	4618      	mov	r0, r3
 8001f56:	f00a f887 	bl	800c068 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a16      	ldr	r2, [pc, #88]	; (8001fb8 <HAL_PCD_MspInit+0x74>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d124      	bne.n	8001fae <HAL_PCD_MspInit+0x6a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f70:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001f74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f78:	f107 0310 	add.w	r3, r7, #16
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f004 facf 	bl	8006520 <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8001f88:	f7ff f944 	bl	8001214 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001f8c:	f003 fb52 	bl	8005634 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <HAL_PCD_MspInit+0x78>)
 8001f92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_PCD_MspInit+0x78>)
 8001f98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_PCD_MspInit+0x78>)
 8001fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	60fb      	str	r3, [r7, #12]
 8001fac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001fae:	bf00      	nop
 8001fb0:	37c8      	adds	r7, #200	; 0xc8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40040000 	.word	0x40040000
 8001fbc:	58024400 	.word	0x58024400

08001fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <NMI_Handler+0x4>

08001fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fca:	e7fe      	b.n	8001fca <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	e7fe      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <BusFault_Handler+0x4>

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <UsageFault_Handler+0x4>

08001fde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr

08001ffa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800200c:	f000 f916 	bl	800223c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002018:	4b32      	ldr	r3, [pc, #200]	; (80020e4 <SystemInit+0xd0>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	4a31      	ldr	r2, [pc, #196]	; (80020e4 <SystemInit+0xd0>)
 8002020:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002024:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002028:	4b2f      	ldr	r3, [pc, #188]	; (80020e8 <SystemInit+0xd4>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	2b06      	cmp	r3, #6
 8002032:	d807      	bhi.n	8002044 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002034:	4b2c      	ldr	r3, [pc, #176]	; (80020e8 <SystemInit+0xd4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 030f 	bic.w	r3, r3, #15
 800203c:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <SystemInit+0xd4>)
 800203e:	f043 0307 	orr.w	r3, r3, #7
 8002042:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002044:	4b29      	ldr	r3, [pc, #164]	; (80020ec <SystemInit+0xd8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a28      	ldr	r2, [pc, #160]	; (80020ec <SystemInit+0xd8>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002050:	4b26      	ldr	r3, [pc, #152]	; (80020ec <SystemInit+0xd8>)
 8002052:	2200      	movs	r2, #0
 8002054:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002056:	4b25      	ldr	r3, [pc, #148]	; (80020ec <SystemInit+0xd8>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	4924      	ldr	r1, [pc, #144]	; (80020ec <SystemInit+0xd8>)
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <SystemInit+0xdc>)
 800205e:	4013      	ands	r3, r2
 8002060:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <SystemInit+0xd4>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d007      	beq.n	800207e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <SystemInit+0xd4>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f023 030f 	bic.w	r3, r3, #15
 8002076:	4a1c      	ldr	r2, [pc, #112]	; (80020e8 <SystemInit+0xd4>)
 8002078:	f043 0307 	orr.w	r3, r3, #7
 800207c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <SystemInit+0xd8>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <SystemInit+0xd8>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <SystemInit+0xd8>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <SystemInit+0xd8>)
 8002092:	4a18      	ldr	r2, [pc, #96]	; (80020f4 <SystemInit+0xe0>)
 8002094:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <SystemInit+0xd8>)
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <SystemInit+0xe4>)
 800209a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <SystemInit+0xd8>)
 800209e:	4a17      	ldr	r2, [pc, #92]	; (80020fc <SystemInit+0xe8>)
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <SystemInit+0xd8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80020a8:	4b10      	ldr	r3, [pc, #64]	; (80020ec <SystemInit+0xd8>)
 80020aa:	4a14      	ldr	r2, [pc, #80]	; (80020fc <SystemInit+0xe8>)
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80020ae:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <SystemInit+0xd8>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <SystemInit+0xd8>)
 80020b6:	4a11      	ldr	r2, [pc, #68]	; (80020fc <SystemInit+0xe8>)
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <SystemInit+0xd8>)
 80020bc:	2200      	movs	r2, #0
 80020be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <SystemInit+0xd8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a09      	ldr	r2, [pc, #36]	; (80020ec <SystemInit+0xd8>)
 80020c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <SystemInit+0xd8>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <SystemInit+0xec>)
 80020d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80020d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80020da:	bf00      	nop
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00
 80020e8:	52002000 	.word	0x52002000
 80020ec:	58024400 	.word	0x58024400
 80020f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80020f4:	02020200 	.word	0x02020200
 80020f8:	01ff0000 	.word	0x01ff0000
 80020fc:	01010280 	.word	0x01010280
 8002100:	52004000 	.word	0x52004000

08002104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800213c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002108:	f7ff ff84 	bl	8002014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800210c:	480c      	ldr	r0, [pc, #48]	; (8002140 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800210e:	490d      	ldr	r1, [pc, #52]	; (8002144 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0a      	ldr	r2, [pc, #40]	; (800214c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002124:	4c0a      	ldr	r4, [pc, #40]	; (8002150 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002132:	f009 ffa1 	bl	800c078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002136:	f7fe fa67 	bl	8000608 <main>
  bx  lr
 800213a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800213c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8002140:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002144:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8002148:	0800c120 	.word	0x0800c120
  ldr r2, =_sbss
 800214c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8002150:	24000dac 	.word	0x24000dac

08002154 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002154:	e7fe      	b.n	8002154 <ADC3_IRQHandler>
	...

08002158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215e:	2003      	movs	r0, #3
 8002160:	f001 fd04 	bl	8003b6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002164:	f004 f806 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_Init+0x68>)
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	0a1b      	lsrs	r3, r3, #8
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	4913      	ldr	r1, [pc, #76]	; (80021c4 <HAL_Init+0x6c>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_Init+0x68>)
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	4a0e      	ldr	r2, [pc, #56]	; (80021c4 <HAL_Init+0x6c>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	f003 031f 	and.w	r3, r3, #31
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
 8002198:	4a0b      	ldr	r2, [pc, #44]	; (80021c8 <HAL_Init+0x70>)
 800219a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <HAL_Init+0x74>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021a2:	200f      	movs	r0, #15
 80021a4:	f000 f814 	bl	80021d0 <HAL_InitTick>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e002      	b.n	80021b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021b2:	f7ff f835 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	58024400 	.word	0x58024400
 80021c4:	0800c0d8 	.word	0x0800c0d8
 80021c8:	24000004 	.word	0x24000004
 80021cc:	24000000 	.word	0x24000000

080021d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80021d8:	4b15      	ldr	r3, [pc, #84]	; (8002230 <HAL_InitTick+0x60>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d101      	bne.n	80021e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e021      	b.n	8002228 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80021e4:	4b13      	ldr	r3, [pc, #76]	; (8002234 <HAL_InitTick+0x64>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_InitTick+0x60>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	4619      	mov	r1, r3
 80021ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fa:	4618      	mov	r0, r3
 80021fc:	f001 fcdb 	bl	8003bb6 <HAL_SYSTICK_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e00e      	b.n	8002228 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b0f      	cmp	r3, #15
 800220e:	d80a      	bhi.n	8002226 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002210:	2200      	movs	r2, #0
 8002212:	6879      	ldr	r1, [r7, #4]
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f001 fcb3 	bl	8003b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800221c:	4a06      	ldr	r2, [pc, #24]	; (8002238 <HAL_InitTick+0x68>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	e000      	b.n	8002228 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2400000c 	.word	0x2400000c
 8002234:	24000000 	.word	0x24000000
 8002238:	24000008 	.word	0x24000008

0800223c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002240:	4b06      	ldr	r3, [pc, #24]	; (800225c <HAL_IncTick+0x20>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	461a      	mov	r2, r3
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_IncTick+0x24>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4413      	add	r3, r2
 800224c:	4a04      	ldr	r2, [pc, #16]	; (8002260 <HAL_IncTick+0x24>)
 800224e:	6013      	str	r3, [r2, #0]
}
 8002250:	bf00      	nop
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	2400000c 	.word	0x2400000c
 8002260:	24000da8 	.word	0x24000da8

08002264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  return uwTick;
 8002268:	4b03      	ldr	r3, [pc, #12]	; (8002278 <HAL_GetTick+0x14>)
 800226a:	681b      	ldr	r3, [r3, #0]
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	24000da8 	.word	0x24000da8

0800227c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002284:	f7ff ffee 	bl	8002264 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d005      	beq.n	80022a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002296:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_Delay+0x44>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	4413      	add	r3, r2
 80022a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022a2:	bf00      	nop
 80022a4:	f7ff ffde 	bl	8002264 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d8f7      	bhi.n	80022a4 <HAL_Delay+0x28>
  {
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	2400000c 	.word	0x2400000c

080022c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	609a      	str	r2, [r3, #8]
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	609a      	str	r2, [r3, #8]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
 8002338:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	3360      	adds	r3, #96	; 0x60
 800233e:	461a      	mov	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	4413      	add	r3, r2
 8002346:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <LL_ADC_SetOffset+0x60>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d10b      	bne.n	8002368 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	4313      	orrs	r3, r2
 800235e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002366:	e00b      	b.n	8002380 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	430b      	orrs	r3, r1
 800237a:	431a      	orrs	r2, r3
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	601a      	str	r2, [r3, #0]
}
 8002380:	bf00      	nop
 8002382:	371c      	adds	r7, #28
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	58026000 	.word	0x58026000

08002390 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3360      	adds	r3, #96	; 0x60
 800239e:	461a      	mov	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f003 031f 	and.w	r3, r3, #31
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	fa01 f303 	lsl.w	r3, r1, r3
 80023dc:	431a      	orrs	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	611a      	str	r2, [r3, #16]
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d00e      	beq.n	8002422 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3360      	adds	r3, #96	; 0x60
 8002408:	461a      	mov	r2, r3
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4413      	add	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	431a      	orrs	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	601a      	str	r2, [r3, #0]
  }
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	58026000 	.word	0x58026000

08002434 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002434:	b480      	push	{r7}
 8002436:	b087      	sub	sp, #28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a0c      	ldr	r2, [pc, #48]	; (8002474 <LL_ADC_SetOffsetSaturation+0x40>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d10e      	bne.n	8002466 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	3360      	adds	r3, #96	; 0x60
 800244c:	461a      	mov	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	4413      	add	r3, r2
 8002454:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	431a      	orrs	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8002466:	bf00      	nop
 8002468:	371c      	adds	r7, #28
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	58026000 	.word	0x58026000

08002478 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002478:	b480      	push	{r7}
 800247a:	b087      	sub	sp, #28
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4a0c      	ldr	r2, [pc, #48]	; (80024b8 <LL_ADC_SetOffsetSign+0x40>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d10e      	bne.n	80024aa <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	3360      	adds	r3, #96	; 0x60
 8002490:	461a      	mov	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80024aa:	bf00      	nop
 80024ac:	371c      	adds	r7, #28
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	58026000 	.word	0x58026000

080024bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b087      	sub	sp, #28
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	3360      	adds	r3, #96	; 0x60
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	4413      	add	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4a0c      	ldr	r2, [pc, #48]	; (800250c <LL_ADC_SetOffsetState+0x50>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d108      	bne.n	80024f0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80024ee:	e007      	b.n	8002500 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	431a      	orrs	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	371c      	adds	r7, #28
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	58026000 	.word	0x58026000

08002510 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3330      	adds	r3, #48	; 0x30
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	f003 030c 	and.w	r3, r3, #12
 800252c:	4413      	add	r3, r2
 800252e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 031f 	and.w	r3, r3, #31
 800253a:	211f      	movs	r1, #31
 800253c:	fa01 f303 	lsl.w	r3, r1, r3
 8002540:	43db      	mvns	r3, r3
 8002542:	401a      	ands	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	0e9b      	lsrs	r3, r3, #26
 8002548:	f003 011f 	and.w	r1, r3, #31
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	fa01 f303 	lsl.w	r3, r1, r3
 8002556:	431a      	orrs	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800255c:	bf00      	nop
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002568:	b480      	push	{r7}
 800256a:	b087      	sub	sp, #28
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	3314      	adds	r3, #20
 8002578:	461a      	mov	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	0e5b      	lsrs	r3, r3, #25
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	4413      	add	r3, r2
 8002586:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	0d1b      	lsrs	r3, r3, #20
 8002590:	f003 031f 	and.w	r3, r3, #31
 8002594:	2107      	movs	r1, #7
 8002596:	fa01 f303 	lsl.w	r3, r1, r3
 800259a:	43db      	mvns	r3, r3
 800259c:	401a      	ands	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	0d1b      	lsrs	r3, r3, #20
 80025a2:	f003 031f 	and.w	r3, r3, #31
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	431a      	orrs	r2, r3
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025b2:	bf00      	nop
 80025b4:	371c      	adds	r7, #28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <LL_ADC_SetChannelSingleDiff+0x78>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d115      	bne.n	8002600 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025e0:	43db      	mvns	r3, r3
 80025e2:	401a      	ands	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f003 0318 	and.w	r3, r3, #24
 80025ea:	4914      	ldr	r1, [pc, #80]	; (800263c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80025ec:	40d9      	lsrs	r1, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	400b      	ands	r3, r1
 80025f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80025fe:	e014      	b.n	800262a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800260c:	43db      	mvns	r3, r3
 800260e:	401a      	ands	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0318 	and.w	r3, r3, #24
 8002616:	4909      	ldr	r1, [pc, #36]	; (800263c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002618:	40d9      	lsrs	r1, r3
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	400b      	ands	r3, r1
 800261e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002622:	431a      	orrs	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	58026000 	.word	0x58026000
 800263c:	000fffff 	.word	0x000fffff

08002640 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <LL_ADC_DisableDeepPowerDown+0x20>)
 800264e:	4013      	ands	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6093      	str	r3, [r2, #8]
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	5fffffc0 	.word	0x5fffffc0

08002664 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002674:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002678:	d101      	bne.n	800267e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689a      	ldr	r2, [r3, #8]
 8002698:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800269a:	4013      	ands	r3, r2
 800269c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	6fffffc0 	.word	0x6fffffc0

080026b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026c8:	d101      	bne.n	80026ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <LL_ADC_IsEnabled+0x18>
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <LL_ADC_IsEnabled+0x1a>
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 0304 	and.w	r3, r3, #4
 8002712:	2b04      	cmp	r3, #4
 8002714:	d101      	bne.n	800271a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b08      	cmp	r3, #8
 800273a:	d101      	bne.n	8002740 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800273c:	2301      	movs	r3, #1
 800273e:	e000      	b.n	8002742 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
	...

08002750 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002750:	b590      	push	{r4, r7, lr}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002758:	2300      	movs	r3, #0
 800275a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800275c:	2300      	movs	r3, #0
 800275e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e1ee      	b.n	8002b48 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002774:	2b00      	cmp	r3, #0
 8002776:	d109      	bne.n	800278c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7fe fd6b 	bl	8001254 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff67 	bl	8002664 <LL_ADC_IsDeepPowerDownEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff4d 	bl	8002640 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ff82 	bl	80026b4 <LL_ADC_IsInternalRegulatorEnabled>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d114      	bne.n	80027e0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff ff66 	bl	800268c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c0:	4b8e      	ldr	r3, [pc, #568]	; (80029fc <HAL_ADC_Init+0x2ac>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	4a8e      	ldr	r2, [pc, #568]	; (8002a00 <HAL_ADC_Init+0x2b0>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	3301      	adds	r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027d2:	e002      	b.n	80027da <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f9      	bne.n	80027d4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff ff65 	bl	80026b4 <LL_ADC_IsInternalRegulatorEnabled>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10d      	bne.n	800280c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f4:	f043 0210 	orr.w	r2, r3, #16
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002800:	f043 0201 	orr.w	r2, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff ff76 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 8002816:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	f040 8188 	bne.w	8002b36 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 8184 	bne.w	8002b36 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002832:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002836:	f043 0202 	orr.w	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff ff4a 	bl	80026dc <LL_ADC_IsEnabled>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d136      	bne.n	80028bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6c      	ldr	r2, [pc, #432]	; (8002a04 <HAL_ADC_Init+0x2b4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_ADC_Init+0x112>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a6a      	ldr	r2, [pc, #424]	; (8002a08 <HAL_ADC_Init+0x2b8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10e      	bne.n	8002880 <HAL_ADC_Init+0x130>
 8002862:	4868      	ldr	r0, [pc, #416]	; (8002a04 <HAL_ADC_Init+0x2b4>)
 8002864:	f7ff ff3a 	bl	80026dc <LL_ADC_IsEnabled>
 8002868:	4604      	mov	r4, r0
 800286a:	4867      	ldr	r0, [pc, #412]	; (8002a08 <HAL_ADC_Init+0x2b8>)
 800286c:	f7ff ff36 	bl	80026dc <LL_ADC_IsEnabled>
 8002870:	4603      	mov	r3, r0
 8002872:	4323      	orrs	r3, r4
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e008      	b.n	8002892 <HAL_ADC_Init+0x142>
 8002880:	4862      	ldr	r0, [pc, #392]	; (8002a0c <HAL_ADC_Init+0x2bc>)
 8002882:	f7ff ff2b 	bl	80026dc <LL_ADC_IsEnabled>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	bf0c      	ite	eq
 800288c:	2301      	moveq	r3, #1
 800288e:	2300      	movne	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <HAL_ADC_Init+0x2b4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_ADC_Init+0x15a>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a58      	ldr	r2, [pc, #352]	; (8002a08 <HAL_ADC_Init+0x2b8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_ADC_Init+0x15e>
 80028aa:	4a59      	ldr	r2, [pc, #356]	; (8002a10 <HAL_ADC_Init+0x2c0>)
 80028ac:	e000      	b.n	80028b0 <HAL_ADC_Init+0x160>
 80028ae:	4a59      	ldr	r2, [pc, #356]	; (8002a14 <HAL_ADC_Init+0x2c4>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4610      	mov	r0, r2
 80028b8:	f7ff fd04 	bl	80022c4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_ADC_Init+0x2bc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d129      	bne.n	800291a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	7e5b      	ldrb	r3, [r3, #25]
 80028ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80028d0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80028d6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d013      	beq.n	8002908 <HAL_ADC_Init+0x1b8>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	2b0c      	cmp	r3, #12
 80028e6:	d00d      	beq.n	8002904 <HAL_ADC_Init+0x1b4>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b1c      	cmp	r3, #28
 80028ee:	d007      	beq.n	8002900 <HAL_ADC_Init+0x1b0>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b18      	cmp	r3, #24
 80028f6:	d101      	bne.n	80028fc <HAL_ADC_Init+0x1ac>
 80028f8:	2318      	movs	r3, #24
 80028fa:	e006      	b.n	800290a <HAL_ADC_Init+0x1ba>
 80028fc:	2300      	movs	r3, #0
 80028fe:	e004      	b.n	800290a <HAL_ADC_Init+0x1ba>
 8002900:	2310      	movs	r3, #16
 8002902:	e002      	b.n	800290a <HAL_ADC_Init+0x1ba>
 8002904:	2308      	movs	r3, #8
 8002906:	e000      	b.n	800290a <HAL_ADC_Init+0x1ba>
 8002908:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800290a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002912:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
 8002918:	e00e      	b.n	8002938 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	7e5b      	ldrb	r3, [r3, #25]
 800291e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002924:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800292a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002932:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800293e:	2b01      	cmp	r3, #1
 8002940:	d106      	bne.n	8002950 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	3b01      	subs	r3, #1
 8002948:	045b      	lsls	r3, r3, #17
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d009      	beq.n	800296c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002964:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a26      	ldr	r2, [pc, #152]	; (8002a0c <HAL_ADC_Init+0x2bc>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d115      	bne.n	80029a2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_ADC_Init+0x2c8>)
 800297e:	4013      	ands	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	69b9      	ldr	r1, [r7, #24]
 8002986:	430b      	orrs	r3, r1
 8002988:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	611a      	str	r2, [r3, #16]
 80029a0:	e009      	b.n	80029b6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <HAL_ADC_Init+0x2cc>)
 80029aa:	4013      	ands	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	69b9      	ldr	r1, [r7, #24]
 80029b2:	430b      	orrs	r3, r1
 80029b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff fea1 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 80029c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff feae 	bl	8002728 <LL_ADC_INJ_IsConversionOngoing>
 80029cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 808e 	bne.w	8002af2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f040 808a 	bne.w	8002af2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <HAL_ADC_Init+0x2bc>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d11b      	bne.n	8002a20 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7e1b      	ldrb	r3, [r3, #24]
 80029ec:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029f4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80029f6:	4313      	orrs	r3, r2
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	e018      	b.n	8002a2e <HAL_ADC_Init+0x2de>
 80029fc:	24000000 	.word	0x24000000
 8002a00:	053e2d63 	.word	0x053e2d63
 8002a04:	40022000 	.word	0x40022000
 8002a08:	40022100 	.word	0x40022100
 8002a0c:	58026000 	.word	0x58026000
 8002a10:	40022300 	.word	0x40022300
 8002a14:	58026300 	.word	0x58026300
 8002a18:	fff04007 	.word	0xfff04007
 8002a1c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7e1b      	ldrb	r3, [r3, #24]
 8002a24:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	4b46      	ldr	r3, [pc, #280]	; (8002b50 <HAL_ADC_Init+0x400>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	69b9      	ldr	r1, [r7, #24]
 8002a3e:	430b      	orrs	r3, r1
 8002a40:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d137      	bne.n	8002abc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a3f      	ldr	r2, [pc, #252]	; (8002b54 <HAL_ADC_Init+0x404>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d116      	bne.n	8002a8a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691a      	ldr	r2, [r3, #16]
 8002a62:	4b3d      	ldr	r3, [pc, #244]	; (8002b58 <HAL_ADC_Init+0x408>)
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a6e:	4311      	orrs	r1, r2
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a74:	4311      	orrs	r1, r2
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0201 	orr.w	r2, r2, #1
 8002a86:	611a      	str	r2, [r3, #16]
 8002a88:	e020      	b.n	8002acc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	4b32      	ldr	r3, [pc, #200]	; (8002b5c <HAL_ADC_Init+0x40c>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a98:	3a01      	subs	r2, #1
 8002a9a:	0411      	lsls	r1, r2, #16
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002aa0:	4311      	orrs	r1, r2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002aa6:	4311      	orrs	r1, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002aac:	430a      	orrs	r2, r1
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	611a      	str	r2, [r3, #16]
 8002aba:	e007      	b.n	8002acc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	691a      	ldr	r2, [r3, #16]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0201 	bic.w	r2, r2, #1
 8002aca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1b      	ldr	r2, [pc, #108]	; (8002b54 <HAL_ADC_Init+0x404>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d002      	beq.n	8002af2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fd63 	bl	80035b8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d10c      	bne.n	8002b14 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b00:	f023 010f 	bic.w	r1, r3, #15
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69db      	ldr	r3, [r3, #28]
 8002b08:	1e5a      	subs	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
 8002b12:	e007      	b.n	8002b24 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 020f 	bic.w	r2, r2, #15
 8002b22:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b28:	f023 0303 	bic.w	r3, r3, #3
 8002b2c:	f043 0201 	orr.w	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	661a      	str	r2, [r3, #96]	; 0x60
 8002b34:	e007      	b.n	8002b46 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3a:	f043 0210 	orr.w	r2, r3, #16
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002b46:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3724      	adds	r7, #36	; 0x24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd90      	pop	{r4, r7, pc}
 8002b50:	ffffbffc 	.word	0xffffbffc
 8002b54:	58026000 	.word	0x58026000
 8002b58:	fc00f81f 	.word	0xfc00f81f
 8002b5c:	fc00f81e 	.word	0xfc00f81e

08002b60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b60:	b590      	push	{r4, r7, lr}
 8002b62:	b0b9      	sub	sp, #228	; 0xe4
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b7a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4aa9      	ldr	r2, [pc, #676]	; (8002e28 <HAL_ADC_ConfigChannel+0x2c8>)
 8002b82:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d102      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x34>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f000 bcfa 	b.w	8003588 <HAL_ADC_ConfigChannel+0xa28>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fdae 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f040 84de 	bne.w	800356a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a9e      	ldr	r2, [pc, #632]	; (8002e2c <HAL_ADC_ConfigChannel+0x2cc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d033      	beq.n	8002c20 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d108      	bne.n	8002bd6 <HAL_ADC_ConfigChannel+0x76>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	0e9b      	lsrs	r3, r3, #26
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2201      	movs	r2, #1
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	e01d      	b.n	8002c12 <HAL_ADC_ConfigChannel+0xb2>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002be2:	fa93 f3a3 	rbit	r3, r3
 8002be6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002bfa:	2320      	movs	r3, #32
 8002bfc:	e004      	b.n	8002c08 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002bfe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c02:	fab3 f383 	clz	r3, r3
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	69d1      	ldr	r1, [r2, #28]
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6812      	ldr	r2, [r2, #0]
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6859      	ldr	r1, [r3, #4]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	f7ff fc6f 	bl	8002510 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff fd63 	bl	8002702 <LL_ADC_REG_IsConversionOngoing>
 8002c3c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff fd6f 	bl	8002728 <LL_ADC_INJ_IsConversionOngoing>
 8002c4a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f040 8270 	bne.w	8003138 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c58:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f040 826b 	bne.w	8003138 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f7ff fc7a 	bl	8002568 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a6c      	ldr	r2, [pc, #432]	; (8002e2c <HAL_ADC_ConfigChannel+0x2cc>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d10d      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	08db      	lsrs	r3, r3, #3
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002c98:	e032      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c9a:	4b65      	ldr	r3, [pc, #404]	; (8002e30 <HAL_ADC_ConfigChannel+0x2d0>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002ca2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ca6:	d10b      	bne.n	8002cc0 <HAL_ADC_ConfigChannel+0x160>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	e01d      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x19c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x186>
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	e00a      	b.n	8002cfc <HAL_ADC_ConfigChannel+0x19c>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695a      	ldr	r2, [r3, #20]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	005b      	lsls	r3, r3, #1
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d048      	beq.n	8002d9a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6919      	ldr	r1, [r3, #16]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d18:	f7ff fb08 	bl	800232c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a42      	ldr	r2, [pc, #264]	; (8002e2c <HAL_ADC_ConfigChannel+0x2cc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d119      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6919      	ldr	r1, [r3, #16]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f7ff fba0 	bl	8002478 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6919      	ldr	r1, [r3, #16]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x1f0>
 8002d4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d4e:	e000      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x1f2>
 8002d50:	2300      	movs	r3, #0
 8002d52:	461a      	mov	r2, r3
 8002d54:	f7ff fb6e 	bl	8002434 <LL_ADC_SetOffsetSaturation>
 8002d58:	e1ee      	b.n	8003138 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6818      	ldr	r0, [r3, #0]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	6919      	ldr	r1, [r3, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d102      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x212>
 8002d6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002d70:	e000      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x214>
 8002d72:	2300      	movs	r3, #0
 8002d74:	461a      	mov	r2, r3
 8002d76:	f7ff fb3b 	bl	80023f0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6818      	ldr	r0, [r3, #0]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6919      	ldr	r1, [r3, #16]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	7e1b      	ldrb	r3, [r3, #24]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <HAL_ADC_ConfigChannel+0x230>
 8002d8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d8e:	e000      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x232>
 8002d90:	2300      	movs	r3, #0
 8002d92:	461a      	mov	r2, r3
 8002d94:	f7ff fb12 	bl	80023bc <LL_ADC_SetDataRightShift>
 8002d98:	e1ce      	b.n	8003138 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a23      	ldr	r2, [pc, #140]	; (8002e2c <HAL_ADC_ConfigChannel+0x2cc>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	f040 8181 	bne.w	80030a8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2100      	movs	r1, #0
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff faef 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x272>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fae4 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	0e9b      	lsrs	r3, r3, #26
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	e01e      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x2b0>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fad9 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002df0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002df4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002df8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e004      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002e04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x2d4>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	e01e      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x306>
 8002e28:	47ff0000 	.word	0x47ff0000
 8002e2c:	58026000 	.word	0x58026000
 8002e30:	5c001000 	.word	0x5c001000
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002e48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002e50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e004      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8002e5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d106      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fb22 	bl	80024bc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fa86 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x344>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fa7b 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	f003 021f 	and.w	r2, r3, #31
 8002ea2:	e01e      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x382>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff fa70 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002ec2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ec6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002eca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	e004      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002ed6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d105      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x39a>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0e9b      	lsrs	r3, r3, #26
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	e018      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x3cc>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002f0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002f16:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e004      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002f22:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d106      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fabf 	bl	80024bc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff fa23 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x40a>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fa18 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	e01e      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x448>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff fa0d 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002f88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002f90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e004      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002f9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x460>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e9b      	lsrs	r3, r3, #26
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	e014      	b.n	8002fea <HAL_ADC_ConfigChannel+0x48a>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fc8:	fa93 f3a3 	rbit	r3, r3
 8002fcc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002fce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002fd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002fdc:	2320      	movs	r3, #32
 8002fde:	e004      	b.n	8002fea <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8002fe0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d106      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2102      	movs	r1, #2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7ff fa60 	bl	80024bc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2103      	movs	r1, #3
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff f9c4 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8003008:	4603      	mov	r3, r0
 800300a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10a      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x4c8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2103      	movs	r1, #3
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff f9b9 	bl	8002390 <LL_ADC_GetOffsetChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	0e9b      	lsrs	r3, r3, #26
 8003022:	f003 021f 	and.w	r2, r3, #31
 8003026:	e017      	b.n	8003058 <HAL_ADC_ConfigChannel+0x4f8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2103      	movs	r1, #3
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff f9ae 	bl	8002390 <LL_ADC_GetOffsetChannel>
 8003034:	4603      	mov	r3, r0
 8003036:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003042:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8003044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003046:	2b00      	cmp	r3, #0
 8003048:	d101      	bne.n	800304e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800304a:	2320      	movs	r3, #32
 800304c:	e003      	b.n	8003056 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800304e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003050:	fab3 f383 	clz	r3, r3
 8003054:	b2db      	uxtb	r3, r3
 8003056:	461a      	mov	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003060:	2b00      	cmp	r3, #0
 8003062:	d105      	bne.n	8003070 <HAL_ADC_ConfigChannel+0x510>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0e9b      	lsrs	r3, r3, #26
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	e011      	b.n	8003094 <HAL_ADC_ConfigChannel+0x534>
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003078:	fa93 f3a3 	rbit	r3, r3
 800307c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800307e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003080:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003082:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8003088:	2320      	movs	r3, #32
 800308a:	e003      	b.n	8003094 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800308c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	429a      	cmp	r2, r3
 8003096:	d14f      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	2103      	movs	r1, #3
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fa0b 	bl	80024bc <LL_ADC_SetOffsetState>
 80030a6:	e047      	b.n	8003138 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	069b      	lsls	r3, r3, #26
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d107      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030ca:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	069b      	lsls	r3, r3, #26
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80030ee:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	069b      	lsls	r3, r3, #26
 8003100:	429a      	cmp	r2, r3
 8003102:	d107      	bne.n	8003114 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003112:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800311a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	069b      	lsls	r3, r3, #26
 8003124:	429a      	cmp	r2, r3
 8003126:	d107      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003136:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff facd 	bl	80026dc <LL_ADC_IsEnabled>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	f040 8219 	bne.w	800357c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6819      	ldr	r1, [r3, #0]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	461a      	mov	r2, r3
 8003158:	f7ff fa32 	bl	80025c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4aa1      	ldr	r2, [pc, #644]	; (80033e8 <HAL_ADC_ConfigChannel+0x888>)
 8003162:	4293      	cmp	r3, r2
 8003164:	f040 812e 	bne.w	80033c4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x630>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	3301      	adds	r3, #1
 8003180:	f003 031f 	and.w	r3, r3, #31
 8003184:	2b09      	cmp	r3, #9
 8003186:	bf94      	ite	ls
 8003188:	2301      	movls	r3, #1
 800318a:	2300      	movhi	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	e019      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x664>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800319e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80031a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e003      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80031ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3301      	adds	r3, #1
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	bf94      	ite	ls
 80031be:	2301      	movls	r3, #1
 80031c0:	2300      	movhi	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d079      	beq.n	80032bc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d107      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x684>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	0e9b      	lsrs	r3, r3, #26
 80031da:	3301      	adds	r3, #1
 80031dc:	069b      	lsls	r3, r3, #26
 80031de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031e2:	e015      	b.n	8003210 <HAL_ADC_ConfigChannel+0x6b0>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80031f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80031f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80031fc:	2320      	movs	r3, #32
 80031fe:	e003      	b.n	8003208 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003202:	fab3 f383 	clz	r3, r3
 8003206:	b2db      	uxtb	r3, r3
 8003208:	3301      	adds	r3, #1
 800320a:	069b      	lsls	r3, r3, #26
 800320c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <HAL_ADC_ConfigChannel+0x6d0>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e9b      	lsrs	r3, r3, #26
 8003222:	3301      	adds	r3, #1
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	2101      	movs	r1, #1
 800322a:	fa01 f303 	lsl.w	r3, r1, r3
 800322e:	e017      	b.n	8003260 <HAL_ADC_ConfigChannel+0x700>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003238:	fa93 f3a3 	rbit	r3, r3
 800323c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800323e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003240:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8003248:	2320      	movs	r3, #32
 800324a:	e003      	b.n	8003254 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800324c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	3301      	adds	r3, #1
 8003256:	f003 031f 	and.w	r3, r3, #31
 800325a:	2101      	movs	r1, #1
 800325c:	fa01 f303 	lsl.w	r3, r1, r3
 8003260:	ea42 0103 	orr.w	r1, r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800326c:	2b00      	cmp	r3, #0
 800326e:	d10a      	bne.n	8003286 <HAL_ADC_ConfigChannel+0x726>
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	3301      	adds	r3, #1
 8003278:	f003 021f 	and.w	r2, r3, #31
 800327c:	4613      	mov	r3, r2
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4413      	add	r3, r2
 8003282:	051b      	lsls	r3, r3, #20
 8003284:	e018      	b.n	80032b8 <HAL_ADC_ConfigChannel+0x758>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003296:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800329e:	2320      	movs	r3, #32
 80032a0:	e003      	b.n	80032aa <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80032a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	3301      	adds	r3, #1
 80032ac:	f003 021f 	and.w	r2, r3, #31
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032b8:	430b      	orrs	r3, r1
 80032ba:	e07e      	b.n	80033ba <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d107      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x778>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	0e9b      	lsrs	r3, r3, #26
 80032ce:	3301      	adds	r3, #1
 80032d0:	069b      	lsls	r3, r3, #26
 80032d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d6:	e015      	b.n	8003304 <HAL_ADC_ConfigChannel+0x7a4>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e0:	fa93 f3a3 	rbit	r3, r3
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80032ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d101      	bne.n	80032f4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80032f0:	2320      	movs	r3, #32
 80032f2:	e003      	b.n	80032fc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	3301      	adds	r3, #1
 80032fe:	069b      	lsls	r3, r3, #26
 8003300:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x7c4>
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	3301      	adds	r3, #1
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2101      	movs	r1, #1
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	e017      	b.n	8003354 <HAL_ADC_ConfigChannel+0x7f4>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	61bb      	str	r3, [r7, #24]
  return result;
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003336:	6a3b      	ldr	r3, [r7, #32]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800333c:	2320      	movs	r3, #32
 800333e:	e003      	b.n	8003348 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	3301      	adds	r3, #1
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2101      	movs	r1, #1
 8003350:	fa01 f303 	lsl.w	r3, r1, r3
 8003354:	ea42 0103 	orr.w	r1, r2, r3
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10d      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x820>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	0e9b      	lsrs	r3, r3, #26
 800336a:	3301      	adds	r3, #1
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	4613      	mov	r3, r2
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	4413      	add	r3, r2
 8003376:	3b1e      	subs	r3, #30
 8003378:	051b      	lsls	r3, r3, #20
 800337a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800337e:	e01b      	b.n	80033b8 <HAL_ADC_ConfigChannel+0x858>
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	fa93 f3a3 	rbit	r3, r3
 800338c:	60fb      	str	r3, [r7, #12]
  return result;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8003398:	2320      	movs	r3, #32
 800339a:	e003      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f003 021f 	and.w	r2, r3, #31
 80033aa:	4613      	mov	r3, r2
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4413      	add	r3, r2
 80033b0:	3b1e      	subs	r3, #30
 80033b2:	051b      	lsls	r3, r3, #20
 80033b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033b8:	430b      	orrs	r3, r1
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	4619      	mov	r1, r3
 80033c0:	f7ff f8d2 	bl	8002568 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f280 80d7 	bge.w	800357c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a06      	ldr	r2, [pc, #24]	; (80033ec <HAL_ADC_ConfigChannel+0x88c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_ADC_ConfigChannel+0x882>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <HAL_ADC_ConfigChannel+0x890>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10a      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x898>
 80033e2:	4b04      	ldr	r3, [pc, #16]	; (80033f4 <HAL_ADC_ConfigChannel+0x894>)
 80033e4:	e009      	b.n	80033fa <HAL_ADC_ConfigChannel+0x89a>
 80033e6:	bf00      	nop
 80033e8:	47ff0000 	.word	0x47ff0000
 80033ec:	40022000 	.word	0x40022000
 80033f0:	40022100 	.word	0x40022100
 80033f4:	40022300 	.word	0x40022300
 80033f8:	4b65      	ldr	r3, [pc, #404]	; (8003590 <HAL_ADC_ConfigChannel+0xa30>)
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe ff88 	bl	8002310 <LL_ADC_GetCommonPathInternalCh>
 8003400:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a62      	ldr	r2, [pc, #392]	; (8003594 <HAL_ADC_ConfigChannel+0xa34>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_ADC_ConfigChannel+0x8b8>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a61      	ldr	r2, [pc, #388]	; (8003598 <HAL_ADC_ConfigChannel+0xa38>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d10e      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x8d6>
 8003418:	485e      	ldr	r0, [pc, #376]	; (8003594 <HAL_ADC_ConfigChannel+0xa34>)
 800341a:	f7ff f95f 	bl	80026dc <LL_ADC_IsEnabled>
 800341e:	4604      	mov	r4, r0
 8003420:	485d      	ldr	r0, [pc, #372]	; (8003598 <HAL_ADC_ConfigChannel+0xa38>)
 8003422:	f7ff f95b 	bl	80026dc <LL_ADC_IsEnabled>
 8003426:	4603      	mov	r3, r0
 8003428:	4323      	orrs	r3, r4
 800342a:	2b00      	cmp	r3, #0
 800342c:	bf0c      	ite	eq
 800342e:	2301      	moveq	r3, #1
 8003430:	2300      	movne	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	e008      	b.n	8003448 <HAL_ADC_ConfigChannel+0x8e8>
 8003436:	4859      	ldr	r0, [pc, #356]	; (800359c <HAL_ADC_ConfigChannel+0xa3c>)
 8003438:	f7ff f950 	bl	80026dc <LL_ADC_IsEnabled>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	bf0c      	ite	eq
 8003442:	2301      	moveq	r3, #1
 8003444:	2300      	movne	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8084 	beq.w	8003556 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a53      	ldr	r2, [pc, #332]	; (80035a0 <HAL_ADC_ConfigChannel+0xa40>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d132      	bne.n	80034be <HAL_ADC_ConfigChannel+0x95e>
 8003458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800345c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d12c      	bne.n	80034be <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a4c      	ldr	r2, [pc, #304]	; (800359c <HAL_ADC_ConfigChannel+0xa3c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	f040 8086 	bne.w	800357c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a47      	ldr	r2, [pc, #284]	; (8003594 <HAL_ADC_ConfigChannel+0xa34>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d004      	beq.n	8003484 <HAL_ADC_ConfigChannel+0x924>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a46      	ldr	r2, [pc, #280]	; (8003598 <HAL_ADC_ConfigChannel+0xa38>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d101      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x928>
 8003484:	4a47      	ldr	r2, [pc, #284]	; (80035a4 <HAL_ADC_ConfigChannel+0xa44>)
 8003486:	e000      	b.n	800348a <HAL_ADC_ConfigChannel+0x92a>
 8003488:	4a41      	ldr	r2, [pc, #260]	; (8003590 <HAL_ADC_ConfigChannel+0xa30>)
 800348a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800348e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003492:	4619      	mov	r1, r3
 8003494:	4610      	mov	r0, r2
 8003496:	f7fe ff28 	bl	80022ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800349a:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <HAL_ADC_ConfigChannel+0xa48>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	099b      	lsrs	r3, r3, #6
 80034a0:	4a42      	ldr	r2, [pc, #264]	; (80035ac <HAL_ADC_ConfigChannel+0xa4c>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	099b      	lsrs	r3, r3, #6
 80034a8:	3301      	adds	r3, #1
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80034ae:	e002      	b.n	80034b6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1f9      	bne.n	80034b0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034bc:	e05e      	b.n	800357c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a3b      	ldr	r2, [pc, #236]	; (80035b0 <HAL_ADC_ConfigChannel+0xa50>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d120      	bne.n	800350a <HAL_ADC_ConfigChannel+0x9aa>
 80034c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d11a      	bne.n	800350a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a30      	ldr	r2, [pc, #192]	; (800359c <HAL_ADC_ConfigChannel+0xa3c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d14e      	bne.n	800357c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2c      	ldr	r2, [pc, #176]	; (8003594 <HAL_ADC_ConfigChannel+0xa34>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_ADC_ConfigChannel+0x992>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <HAL_ADC_ConfigChannel+0xa38>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d101      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x996>
 80034f2:	4a2c      	ldr	r2, [pc, #176]	; (80035a4 <HAL_ADC_ConfigChannel+0xa44>)
 80034f4:	e000      	b.n	80034f8 <HAL_ADC_ConfigChannel+0x998>
 80034f6:	4a26      	ldr	r2, [pc, #152]	; (8003590 <HAL_ADC_ConfigChannel+0xa30>)
 80034f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003500:	4619      	mov	r1, r3
 8003502:	4610      	mov	r0, r2
 8003504:	f7fe fef1 	bl	80022ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003508:	e038      	b.n	800357c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a29      	ldr	r2, [pc, #164]	; (80035b4 <HAL_ADC_ConfigChannel+0xa54>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d133      	bne.n	800357c <HAL_ADC_ConfigChannel+0xa1c>
 8003514:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d12d      	bne.n	800357c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a1d      	ldr	r2, [pc, #116]	; (800359c <HAL_ADC_ConfigChannel+0xa3c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d128      	bne.n	800357c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a19      	ldr	r2, [pc, #100]	; (8003594 <HAL_ADC_ConfigChannel+0xa34>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d004      	beq.n	800353e <HAL_ADC_ConfigChannel+0x9de>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a17      	ldr	r2, [pc, #92]	; (8003598 <HAL_ADC_ConfigChannel+0xa38>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_ADC_ConfigChannel+0x9e2>
 800353e:	4a19      	ldr	r2, [pc, #100]	; (80035a4 <HAL_ADC_ConfigChannel+0xa44>)
 8003540:	e000      	b.n	8003544 <HAL_ADC_ConfigChannel+0x9e4>
 8003542:	4a13      	ldr	r2, [pc, #76]	; (8003590 <HAL_ADC_ConfigChannel+0xa30>)
 8003544:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7fe fecb 	bl	80022ea <LL_ADC_SetCommonPathInternalCh>
 8003554:	e012      	b.n	800357c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800355a:	f043 0220 	orr.w	r2, r3, #32
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003568:	e008      	b.n	800357c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	f043 0220 	orr.w	r2, r3, #32
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003584:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8003588:	4618      	mov	r0, r3
 800358a:	37e4      	adds	r7, #228	; 0xe4
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	58026300 	.word	0x58026300
 8003594:	40022000 	.word	0x40022000
 8003598:	40022100 	.word	0x40022100
 800359c:	58026000 	.word	0x58026000
 80035a0:	c7520000 	.word	0xc7520000
 80035a4:	40022300 	.word	0x40022300
 80035a8:	24000000 	.word	0x24000000
 80035ac:	053e2d63 	.word	0x053e2d63
 80035b0:	c3210000 	.word	0xc3210000
 80035b4:	cb840000 	.word	0xcb840000

080035b8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a6c      	ldr	r2, [pc, #432]	; (8003778 <ADC_ConfigureBoostMode+0x1c0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <ADC_ConfigureBoostMode+0x1c>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a6b      	ldr	r2, [pc, #428]	; (800377c <ADC_ConfigureBoostMode+0x1c4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d109      	bne.n	80035e8 <ADC_ConfigureBoostMode+0x30>
 80035d4:	4b6a      	ldr	r3, [pc, #424]	; (8003780 <ADC_ConfigureBoostMode+0x1c8>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf14      	ite	ne
 80035e0:	2301      	movne	r3, #1
 80035e2:	2300      	moveq	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	e008      	b.n	80035fa <ADC_ConfigureBoostMode+0x42>
 80035e8:	4b66      	ldr	r3, [pc, #408]	; (8003784 <ADC_ConfigureBoostMode+0x1cc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf14      	ite	ne
 80035f4:	2301      	movne	r3, #1
 80035f6:	2300      	moveq	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d01c      	beq.n	8003638 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80035fe:	f002 ff33 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 8003602:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800360c:	d010      	beq.n	8003630 <ADC_ConfigureBoostMode+0x78>
 800360e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003612:	d873      	bhi.n	80036fc <ADC_ConfigureBoostMode+0x144>
 8003614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003618:	d002      	beq.n	8003620 <ADC_ConfigureBoostMode+0x68>
 800361a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800361e:	d16d      	bne.n	80036fc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	60fb      	str	r3, [r7, #12]
        break;
 800362e:	e068      	b.n	8003702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	089b      	lsrs	r3, r3, #2
 8003634:	60fb      	str	r3, [r7, #12]
        break;
 8003636:	e064      	b.n	8003702 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003638:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800363c:	f04f 0100 	mov.w	r1, #0
 8003640:	f004 f90e 	bl	8007860 <HAL_RCCEx_GetPeriphCLKFreq>
 8003644:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800364e:	d051      	beq.n	80036f4 <ADC_ConfigureBoostMode+0x13c>
 8003650:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003654:	d854      	bhi.n	8003700 <ADC_ConfigureBoostMode+0x148>
 8003656:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800365a:	d047      	beq.n	80036ec <ADC_ConfigureBoostMode+0x134>
 800365c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003660:	d84e      	bhi.n	8003700 <ADC_ConfigureBoostMode+0x148>
 8003662:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003666:	d03d      	beq.n	80036e4 <ADC_ConfigureBoostMode+0x12c>
 8003668:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800366c:	d848      	bhi.n	8003700 <ADC_ConfigureBoostMode+0x148>
 800366e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003672:	d033      	beq.n	80036dc <ADC_ConfigureBoostMode+0x124>
 8003674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003678:	d842      	bhi.n	8003700 <ADC_ConfigureBoostMode+0x148>
 800367a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800367e:	d029      	beq.n	80036d4 <ADC_ConfigureBoostMode+0x11c>
 8003680:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003684:	d83c      	bhi.n	8003700 <ADC_ConfigureBoostMode+0x148>
 8003686:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800368a:	d01a      	beq.n	80036c2 <ADC_ConfigureBoostMode+0x10a>
 800368c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003690:	d836      	bhi.n	8003700 <ADC_ConfigureBoostMode+0x148>
 8003692:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003696:	d014      	beq.n	80036c2 <ADC_ConfigureBoostMode+0x10a>
 8003698:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800369c:	d830      	bhi.n	8003700 <ADC_ConfigureBoostMode+0x148>
 800369e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a2:	d00e      	beq.n	80036c2 <ADC_ConfigureBoostMode+0x10a>
 80036a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036a8:	d82a      	bhi.n	8003700 <ADC_ConfigureBoostMode+0x148>
 80036aa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036ae:	d008      	beq.n	80036c2 <ADC_ConfigureBoostMode+0x10a>
 80036b0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80036b4:	d824      	bhi.n	8003700 <ADC_ConfigureBoostMode+0x148>
 80036b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80036ba:	d002      	beq.n	80036c2 <ADC_ConfigureBoostMode+0x10a>
 80036bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036c0:	d11e      	bne.n	8003700 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	0c9b      	lsrs	r3, r3, #18
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d0:	60fb      	str	r3, [r7, #12]
        break;
 80036d2:	e016      	b.n	8003702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	60fb      	str	r3, [r7, #12]
        break;
 80036da:	e012      	b.n	8003702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	60fb      	str	r3, [r7, #12]
        break;
 80036e2:	e00e      	b.n	8003702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	099b      	lsrs	r3, r3, #6
 80036e8:	60fb      	str	r3, [r7, #12]
        break;
 80036ea:	e00a      	b.n	8003702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	09db      	lsrs	r3, r3, #7
 80036f0:	60fb      	str	r3, [r7, #12]
        break;
 80036f2:	e006      	b.n	8003702 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	0a1b      	lsrs	r3, r3, #8
 80036f8:	60fb      	str	r3, [r7, #12]
        break;
 80036fa:	e002      	b.n	8003702 <ADC_ConfigureBoostMode+0x14a>
        break;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003700:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	085b      	lsrs	r3, r3, #1
 8003706:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <ADC_ConfigureBoostMode+0x1d0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d808      	bhi.n	8003722 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800371e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003720:	e025      	b.n	800376e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a19      	ldr	r2, [pc, #100]	; (800378c <ADC_ConfigureBoostMode+0x1d4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d80a      	bhi.n	8003740 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800373c:	609a      	str	r2, [r3, #8]
}
 800373e:	e016      	b.n	800376e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <ADC_ConfigureBoostMode+0x1d8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d80a      	bhi.n	800375e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800375a:	609a      	str	r2, [r3, #8]
}
 800375c:	e007      	b.n	800376e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800376c:	609a      	str	r2, [r3, #8]
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40022000 	.word	0x40022000
 800377c:	40022100 	.word	0x40022100
 8003780:	40022300 	.word	0x40022300
 8003784:	58026300 	.word	0x58026300
 8003788:	005f5e10 	.word	0x005f5e10
 800378c:	00bebc20 	.word	0x00bebc20
 8003790:	017d7840 	.word	0x017d7840

08003794 <LL_ADC_IsEnabled>:
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d101      	bne.n	80037ac <LL_ADC_IsEnabled+0x18>
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <LL_ADC_IsEnabled+0x1a>
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <LL_ADC_REG_IsConversionOngoing>:
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 0304 	and.w	r3, r3, #4
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d101      	bne.n	80037d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80037e0:	b590      	push	{r4, r7, lr}
 80037e2:	b0a3      	sub	sp, #140	; 0x8c
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e0c1      	b.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800380a:	2300      	movs	r3, #0
 800380c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a5e      	ldr	r2, [pc, #376]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d102      	bne.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003818:	4b5d      	ldr	r3, [pc, #372]	; (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800381a:	60fb      	str	r3, [r7, #12]
 800381c:	e001      	b.n	8003822 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0a0      	b.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff ffb9 	bl	80037ba <LL_ADC_REG_IsConversionOngoing>
 8003848:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ffb2 	bl	80037ba <LL_ADC_REG_IsConversionOngoing>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	f040 8081 	bne.w	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800385e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d17c      	bne.n	8003960 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a48      	ldr	r2, [pc, #288]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d004      	beq.n	800387a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a46      	ldr	r2, [pc, #280]	; (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d101      	bne.n	800387e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800387a:	4b46      	ldr	r3, [pc, #280]	; (8003994 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800387c:	e000      	b.n	8003880 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800387e:	4b46      	ldr	r3, [pc, #280]	; (8003998 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003880:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d039      	beq.n	80038fe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800388a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	431a      	orrs	r2, r3
 8003898:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800389a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a3a      	ldr	r2, [pc, #232]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a39      	ldr	r2, [pc, #228]	; (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d10e      	bne.n	80038ce <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80038b0:	4836      	ldr	r0, [pc, #216]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80038b2:	f7ff ff6f 	bl	8003794 <LL_ADC_IsEnabled>
 80038b6:	4604      	mov	r4, r0
 80038b8:	4835      	ldr	r0, [pc, #212]	; (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80038ba:	f7ff ff6b 	bl	8003794 <LL_ADC_IsEnabled>
 80038be:	4603      	mov	r3, r0
 80038c0:	4323      	orrs	r3, r4
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf0c      	ite	eq
 80038c6:	2301      	moveq	r3, #1
 80038c8:	2300      	movne	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	e008      	b.n	80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80038ce:	4833      	ldr	r0, [pc, #204]	; (800399c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80038d0:	f7ff ff60 	bl	8003794 <LL_ADC_IsEnabled>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d047      	beq.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80038e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80038ea:	4013      	ands	r3, r2
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	6811      	ldr	r1, [r2, #0]
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	6892      	ldr	r2, [r2, #8]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	431a      	orrs	r2, r3
 80038f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038fc:	e03a      	b.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80038fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003906:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003908:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1f      	ldr	r2, [pc, #124]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d004      	beq.n	800391e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a1d      	ldr	r2, [pc, #116]	; (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d10e      	bne.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800391e:	481b      	ldr	r0, [pc, #108]	; (800398c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003920:	f7ff ff38 	bl	8003794 <LL_ADC_IsEnabled>
 8003924:	4604      	mov	r4, r0
 8003926:	481a      	ldr	r0, [pc, #104]	; (8003990 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003928:	f7ff ff34 	bl	8003794 <LL_ADC_IsEnabled>
 800392c:	4603      	mov	r3, r0
 800392e:	4323      	orrs	r3, r4
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	e008      	b.n	800394e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800393c:	4817      	ldr	r0, [pc, #92]	; (800399c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800393e:	f7ff ff29 	bl	8003794 <LL_ADC_IsEnabled>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d010      	beq.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003958:	4013      	ands	r3, r2
 800395a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800395c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800395e:	e009      	b.n	8003974 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003972:	e000      	b.n	8003976 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003974:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800397e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003982:	4618      	mov	r0, r3
 8003984:	378c      	adds	r7, #140	; 0x8c
 8003986:	46bd      	mov	sp, r7
 8003988:	bd90      	pop	{r4, r7, pc}
 800398a:	bf00      	nop
 800398c:	40022000 	.word	0x40022000
 8003990:	40022100 	.word	0x40022100
 8003994:	40022300 	.word	0x40022300
 8003998:	58026300 	.word	0x58026300
 800399c:	58026000 	.word	0x58026000
 80039a0:	fffff0e0 	.word	0xfffff0e0

080039a4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e023      	b.n	80039fe <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d106      	bne.n	80039d0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fd fc88 	bl	80012e0 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
	...

08003a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a18:	4b0b      	ldr	r3, [pc, #44]	; (8003a48 <__NVIC_SetPriorityGrouping+0x40>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a24:	4013      	ands	r3, r2
 8003a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a30:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <__NVIC_SetPriorityGrouping+0x44>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a36:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <__NVIC_SetPriorityGrouping+0x40>)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	60d3      	str	r3, [r2, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	3714      	adds	r7, #20
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00
 8003a4c:	05fa0000 	.word	0x05fa0000

08003a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a54:	4b04      	ldr	r3, [pc, #16]	; (8003a68 <__NVIC_GetPriorityGrouping+0x18>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	0a1b      	lsrs	r3, r3, #8
 8003a5a:	f003 0307 	and.w	r3, r3, #7
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	e000ed00 	.word	0xe000ed00

08003a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	6039      	str	r1, [r7, #0]
 8003a76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	db0a      	blt.n	8003a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <__NVIC_SetPriority+0x4c>)
 8003a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a94:	e00a      	b.n	8003aac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4908      	ldr	r1, [pc, #32]	; (8003abc <__NVIC_SetPriority+0x50>)
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	f003 030f 	and.w	r3, r3, #15
 8003aa2:	3b04      	subs	r3, #4
 8003aa4:	0112      	lsls	r2, r2, #4
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	761a      	strb	r2, [r3, #24]
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	e000e100 	.word	0xe000e100
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b089      	sub	sp, #36	; 0x24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f003 0307 	and.w	r3, r3, #7
 8003ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f1c3 0307 	rsb	r3, r3, #7
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	bf28      	it	cs
 8003ade:	2304      	movcs	r3, #4
 8003ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d902      	bls.n	8003af0 <NVIC_EncodePriority+0x30>
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3b03      	subs	r3, #3
 8003aee:	e000      	b.n	8003af2 <NVIC_EncodePriority+0x32>
 8003af0:	2300      	movs	r3, #0
 8003af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003af4:	f04f 32ff 	mov.w	r2, #4294967295
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43da      	mvns	r2, r3
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	401a      	ands	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b08:	f04f 31ff 	mov.w	r1, #4294967295
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	43d9      	mvns	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b18:	4313      	orrs	r3, r2
         );
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
	...

08003b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b38:	d301      	bcc.n	8003b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e00f      	b.n	8003b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b3e:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <SysTick_Config+0x40>)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b46:	210f      	movs	r1, #15
 8003b48:	f04f 30ff 	mov.w	r0, #4294967295
 8003b4c:	f7ff ff8e 	bl	8003a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <SysTick_Config+0x40>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b56:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <SysTick_Config+0x40>)
 8003b58:	2207      	movs	r2, #7
 8003b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	e000e010 	.word	0xe000e010

08003b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f7ff ff47 	bl	8003a08 <__NVIC_SetPriorityGrouping>
}
 8003b7a:	bf00      	nop
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
 8003b8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b90:	f7ff ff5e 	bl	8003a50 <__NVIC_GetPriorityGrouping>
 8003b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68b9      	ldr	r1, [r7, #8]
 8003b9a:	6978      	ldr	r0, [r7, #20]
 8003b9c:	f7ff ff90 	bl	8003ac0 <NVIC_EncodePriority>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff ff5f 	bl	8003a6c <__NVIC_SetPriority>
}
 8003bae:	bf00      	nop
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff ffb2 	bl	8003b28 <SysTick_Config>
 8003bc4:	4603      	mov	r3, r0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
	...

08003bd0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e054      	b.n	8003c8c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	7f5b      	ldrb	r3, [r3, #29]
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d105      	bne.n	8003bf8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd fb96 	bl	8001324 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	791b      	ldrb	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10c      	bne.n	8003c20 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a22      	ldr	r2, [pc, #136]	; (8003c94 <HAL_CRC_Init+0xc4>)
 8003c0c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f022 0218 	bic.w	r2, r2, #24
 8003c1c:	609a      	str	r2, [r3, #8]
 8003c1e:	e00c      	b.n	8003c3a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6899      	ldr	r1, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f834 	bl	8003c98 <HAL_CRCEx_Polynomial_Set>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e028      	b.n	8003c8c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	795b      	ldrb	r3, [r3, #5]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d105      	bne.n	8003c4e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4a:	611a      	str	r2, [r3, #16]
 8003c4c:	e004      	b.n	8003c58 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6912      	ldr	r2, [r2, #16]
 8003c56:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	699a      	ldr	r2, [r3, #24]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	04c11db7 	.word	0x04c11db7

08003c98 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003ca8:	231f      	movs	r3, #31
 8003caa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d102      	bne.n	8003cbc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	75fb      	strb	r3, [r7, #23]
 8003cba:	e063      	b.n	8003d84 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003cbc:	bf00      	nop
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1e5a      	subs	r2, r3, #1
 8003cc2:	613a      	str	r2, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d009      	beq.n	8003cdc <HAL_CRCEx_Polynomial_Set+0x44>
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	f003 031f 	and.w	r3, r3, #31
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d0f0      	beq.n	8003cbe <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b18      	cmp	r3, #24
 8003ce0:	d846      	bhi.n	8003d70 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <HAL_CRCEx_Polynomial_Set+0x50>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003d77 	.word	0x08003d77
 8003cec:	08003d71 	.word	0x08003d71
 8003cf0:	08003d71 	.word	0x08003d71
 8003cf4:	08003d71 	.word	0x08003d71
 8003cf8:	08003d71 	.word	0x08003d71
 8003cfc:	08003d71 	.word	0x08003d71
 8003d00:	08003d71 	.word	0x08003d71
 8003d04:	08003d71 	.word	0x08003d71
 8003d08:	08003d65 	.word	0x08003d65
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003d71 	.word	0x08003d71
 8003d14:	08003d71 	.word	0x08003d71
 8003d18:	08003d71 	.word	0x08003d71
 8003d1c:	08003d71 	.word	0x08003d71
 8003d20:	08003d71 	.word	0x08003d71
 8003d24:	08003d71 	.word	0x08003d71
 8003d28:	08003d59 	.word	0x08003d59
 8003d2c:	08003d71 	.word	0x08003d71
 8003d30:	08003d71 	.word	0x08003d71
 8003d34:	08003d71 	.word	0x08003d71
 8003d38:	08003d71 	.word	0x08003d71
 8003d3c:	08003d71 	.word	0x08003d71
 8003d40:	08003d71 	.word	0x08003d71
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	08003d4d 	.word	0x08003d4d
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d913      	bls.n	8003d7a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003d56:	e010      	b.n	8003d7a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b07      	cmp	r3, #7
 8003d5c:	d90f      	bls.n	8003d7e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003d62:	e00c      	b.n	8003d7e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	2b0f      	cmp	r3, #15
 8003d68:	d90b      	bls.n	8003d82 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003d6e:	e008      	b.n	8003d82 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	75fb      	strb	r3, [r7, #23]
        break;
 8003d74:	e006      	b.n	8003d84 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003d76:	bf00      	nop
 8003d78:	e004      	b.n	8003d84 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003d7a:	bf00      	nop
 8003d7c:	e002      	b.n	8003d84 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003d7e:	bf00      	nop
 8003d80:	e000      	b.n	8003d84 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003d82:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003d84:	7dfb      	ldrb	r3, [r7, #23]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10d      	bne.n	8003da6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f023 0118 	bic.w	r1, r3, #24
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d101      	bne.n	8003dc6 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e033      	b.n	8003e2e <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d106      	bne.n	8003de0 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f7fd fac4 	bl	8001368 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 f854 	bl	8003e94 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f000 f822 	bl	8003e36 <FMAC_Reset>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d10c      	bne.n	8003e12 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	f043 0210 	orr.w	r2, r3, #16
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	22a0      	movs	r2, #160	; 0xa0
 8003e08:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
 8003e10:	e008      	b.n	8003e24 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b084      	sub	sp, #16
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e3e:	f7fe fa11 	bl	8002264 <HAL_GetTick>
 8003e42:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e52:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8003e54:	e00f      	b.n	8003e76 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8003e56:	f7fe fa05 	bl	8002264 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e64:	d907      	bls.n	8003e76 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e00a      	b.n	8003e8c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e8      	bne.n	8003e56 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 f807 	bl	8003eb0 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f81b 	bl	8003ede <FMAC_ResetOutputStateAndDataPointers>
}
 8003ea8:	bf00      	nop
 8003eaa:	3708      	adds	r7, #8
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr

08003ede <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b089      	sub	sp, #36	; 0x24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f1a:	4b86      	ldr	r3, [pc, #536]	; (8004134 <HAL_GPIO_Init+0x228>)
 8003f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f1e:	e18c      	b.n	800423a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	2101      	movs	r1, #1
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 817e 	beq.w	8004234 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d005      	beq.n	8003f50 <HAL_GPIO_Init+0x44>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d130      	bne.n	8003fb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4013      	ands	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f86:	2201      	movs	r2, #1
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	4013      	ands	r3, r2
 8003f94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0201 	and.w	r2, r3, #1
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d017      	beq.n	8003fee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	2203      	movs	r2, #3
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689a      	ldr	r2, [r3, #8]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d123      	bne.n	8004042 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	08da      	lsrs	r2, r3, #3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3208      	adds	r2, #8
 8004002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	220f      	movs	r2, #15
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	691a      	ldr	r2, [r3, #16]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	4313      	orrs	r3, r2
 8004032:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	08da      	lsrs	r2, r3, #3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3208      	adds	r2, #8
 800403c:	69b9      	ldr	r1, [r7, #24]
 800403e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	2203      	movs	r2, #3
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f003 0203 	and.w	r2, r3, #3
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4313      	orrs	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80d8 	beq.w	8004234 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004084:	4b2c      	ldr	r3, [pc, #176]	; (8004138 <HAL_GPIO_Init+0x22c>)
 8004086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800408a:	4a2b      	ldr	r2, [pc, #172]	; (8004138 <HAL_GPIO_Init+0x22c>)
 800408c:	f043 0302 	orr.w	r3, r3, #2
 8004090:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004094:	4b28      	ldr	r3, [pc, #160]	; (8004138 <HAL_GPIO_Init+0x22c>)
 8004096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040a2:	4a26      	ldr	r2, [pc, #152]	; (800413c <HAL_GPIO_Init+0x230>)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	3302      	adds	r3, #2
 80040aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	220f      	movs	r2, #15
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1d      	ldr	r2, [pc, #116]	; (8004140 <HAL_GPIO_Init+0x234>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d04a      	beq.n	8004164 <HAL_GPIO_Init+0x258>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a1c      	ldr	r2, [pc, #112]	; (8004144 <HAL_GPIO_Init+0x238>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d02b      	beq.n	800412e <HAL_GPIO_Init+0x222>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a1b      	ldr	r2, [pc, #108]	; (8004148 <HAL_GPIO_Init+0x23c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d025      	beq.n	800412a <HAL_GPIO_Init+0x21e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a1a      	ldr	r2, [pc, #104]	; (800414c <HAL_GPIO_Init+0x240>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01f      	beq.n	8004126 <HAL_GPIO_Init+0x21a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a19      	ldr	r2, [pc, #100]	; (8004150 <HAL_GPIO_Init+0x244>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d019      	beq.n	8004122 <HAL_GPIO_Init+0x216>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_GPIO_Init+0x248>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d013      	beq.n	800411e <HAL_GPIO_Init+0x212>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a17      	ldr	r2, [pc, #92]	; (8004158 <HAL_GPIO_Init+0x24c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00d      	beq.n	800411a <HAL_GPIO_Init+0x20e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a16      	ldr	r2, [pc, #88]	; (800415c <HAL_GPIO_Init+0x250>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <HAL_GPIO_Init+0x20a>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a15      	ldr	r2, [pc, #84]	; (8004160 <HAL_GPIO_Init+0x254>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_GPIO_Init+0x206>
 800410e:	2309      	movs	r3, #9
 8004110:	e029      	b.n	8004166 <HAL_GPIO_Init+0x25a>
 8004112:	230a      	movs	r3, #10
 8004114:	e027      	b.n	8004166 <HAL_GPIO_Init+0x25a>
 8004116:	2307      	movs	r3, #7
 8004118:	e025      	b.n	8004166 <HAL_GPIO_Init+0x25a>
 800411a:	2306      	movs	r3, #6
 800411c:	e023      	b.n	8004166 <HAL_GPIO_Init+0x25a>
 800411e:	2305      	movs	r3, #5
 8004120:	e021      	b.n	8004166 <HAL_GPIO_Init+0x25a>
 8004122:	2304      	movs	r3, #4
 8004124:	e01f      	b.n	8004166 <HAL_GPIO_Init+0x25a>
 8004126:	2303      	movs	r3, #3
 8004128:	e01d      	b.n	8004166 <HAL_GPIO_Init+0x25a>
 800412a:	2302      	movs	r3, #2
 800412c:	e01b      	b.n	8004166 <HAL_GPIO_Init+0x25a>
 800412e:	2301      	movs	r3, #1
 8004130:	e019      	b.n	8004166 <HAL_GPIO_Init+0x25a>
 8004132:	bf00      	nop
 8004134:	58000080 	.word	0x58000080
 8004138:	58024400 	.word	0x58024400
 800413c:	58000400 	.word	0x58000400
 8004140:	58020000 	.word	0x58020000
 8004144:	58020400 	.word	0x58020400
 8004148:	58020800 	.word	0x58020800
 800414c:	58020c00 	.word	0x58020c00
 8004150:	58021000 	.word	0x58021000
 8004154:	58021400 	.word	0x58021400
 8004158:	58021800 	.word	0x58021800
 800415c:	58021c00 	.word	0x58021c00
 8004160:	58022400 	.word	0x58022400
 8004164:	2300      	movs	r3, #0
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	f002 0203 	and.w	r2, r2, #3
 800416c:	0092      	lsls	r2, r2, #2
 800416e:	4093      	lsls	r3, r2
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4313      	orrs	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004176:	4938      	ldr	r1, [pc, #224]	; (8004258 <HAL_GPIO_Init+0x34c>)
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	089b      	lsrs	r3, r3, #2
 800417c:	3302      	adds	r3, #2
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	43db      	mvns	r3, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4013      	ands	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	43db      	mvns	r3, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4013      	ands	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80041d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	43db      	mvns	r3, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4013      	ands	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d003      	beq.n	800422e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	3301      	adds	r3, #1
 8004238:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	f47f ae6b 	bne.w	8003f20 <HAL_GPIO_Init+0x14>
  }
}
 800424a:	bf00      	nop
 800424c:	bf00      	nop
 800424e:	3724      	adds	r7, #36	; 0x24
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	58000400 	.word	0x58000400

0800425c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	807b      	strh	r3, [r7, #2]
 8004268:	4613      	mov	r3, r2
 800426a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800426c:	787b      	ldrb	r3, [r7, #1]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004272:	887a      	ldrh	r2, [r7, #2]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004278:	e003      	b.n	8004282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800427a:	887b      	ldrh	r3, [r7, #2]
 800427c:	041a      	lsls	r2, r3, #16
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	619a      	str	r2, [r3, #24]
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e07f      	b.n	80043a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fd f878 	bl	80013ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	; 0x24
 80042c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685a      	ldr	r2, [r3, #4]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d107      	bne.n	800430a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004306:	609a      	str	r2, [r3, #8]
 8004308:	e006      	b.n	8004318 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004316:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d104      	bne.n	800432a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004328:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6859      	ldr	r1, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_I2C_Init+0x11c>)
 8004336:	430b      	orrs	r3, r1
 8004338:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004348:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69d9      	ldr	r1, [r3, #28]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	02008000 	.word	0x02008000

080043b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b20      	cmp	r3, #32
 80043c4:	d138      	bne.n	8004438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d101      	bne.n	80043d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043d0:	2302      	movs	r3, #2
 80043d2:	e032      	b.n	800443a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2224      	movs	r2, #36	; 0x24
 80043e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0201 	bic.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6819      	ldr	r1, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004438:	2302      	movs	r3, #2
  }
}
 800443a:	4618      	mov	r0, r3
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004446:	b480      	push	{r7}
 8004448:	b085      	sub	sp, #20
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004456:	b2db      	uxtb	r3, r3
 8004458:	2b20      	cmp	r3, #32
 800445a:	d139      	bne.n	80044d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004466:	2302      	movs	r3, #2
 8004468:	e033      	b.n	80044d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2224      	movs	r2, #36	; 0x24
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0201 	bic.w	r2, r2, #1
 8004488:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004498:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0201 	orr.w	r2, r2, #1
 80044ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	e000      	b.n	80044d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044d0:	2302      	movs	r3, #2
  }
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr

080044de <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b082      	sub	sp, #8
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e031      	b.n	8004554 <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d105      	bne.n	8004508 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fd f932 	bl	800176c <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2203      	movs	r2, #3
 800450c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f823 	bl	800455c <HAL_MMC_InitCard>
 8004516:	4603      	mov	r3, r0
 8004518:	2b01      	cmp	r3, #1
 800451a:	d101      	bne.n	8004520 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e019      	b.n	8004554 <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	4619      	mov	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fb46 	bl	8004bd4 <HAL_MMC_ConfigWideBusOperation>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e000      	b.n	8004554 <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 800455c:	b590      	push	{r4, r7, lr}
 800455e:	b08d      	sub	sp, #52	; 0x34
 8004560:	af02      	add	r7, sp, #8
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004570:	2300      	movs	r3, #0
 8004572:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8004574:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004578:	f04f 0100 	mov.w	r1, #0
 800457c:	f003 f970 	bl	8007860 <HAL_RCCEx_GetPeriphCLKFreq>
 8004580:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004596:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e070      	b.n	800467e <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	0a1b      	lsrs	r3, r3, #8
 80045a0:	4a39      	ldr	r2, [pc, #228]	; (8004688 <HAL_MMC_InitCard+0x12c>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	091b      	lsrs	r3, r3, #4
 80045a8:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681c      	ldr	r4, [r3, #0]
 80045ae:	466a      	mov	r2, sp
 80045b0:	f107 0318 	add.w	r3, r7, #24
 80045b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80045b8:	e882 0003 	stmia.w	r2, {r0, r1}
 80045bc:	f107 030c 	add.w	r3, r7, #12
 80045c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045c2:	4620      	mov	r0, r4
 80045c4:	f006 fe7e 	bl	800b2c4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4618      	mov	r0, r3
 80045ce:	f006 feb0 	bl	800b332 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d005      	beq.n	80045e4 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045de:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80045ea:	4a28      	ldr	r2, [pc, #160]	; (800468c <HAL_MMC_InitCard+0x130>)
 80045ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f2:	3301      	adds	r3, #1
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7fd fe41 	bl	800227c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fcb4 	bl	8004f68 <MMC_PowerON>
 8004600:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e02e      	b.n	800467e <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 fba3 	bl	8004d6c <MMC_InitCard>
 8004626:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	431a      	orrs	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e01b      	b.n	800467e <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800464e:	4618      	mov	r0, r3
 8004650:	f006 ff04 	bl	800b45c <SDMMC_CmdBlockLength>
 8004654:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004656:	6a3b      	ldr	r3, [r7, #32]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00f      	beq.n	800467c <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a0b      	ldr	r2, [pc, #44]	; (8004690 <HAL_MMC_InitCard+0x134>)
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	372c      	adds	r7, #44	; 0x2c
 8004682:	46bd      	mov	sp, r7
 8004684:	bd90      	pop	{r4, r7, pc}
 8004686:	bf00      	nop
 8004688:	014f8b59 	.word	0x014f8b59
 800468c:	00012110 	.word	0x00012110
 8004690:	1fe00fff 	.word	0x1fe00fff

08004694 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a6:	0f9b      	lsrs	r3, r3, #30
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b2:	0e9b      	lsrs	r3, r3, #26
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	b2da      	uxtb	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	0e1b      	lsrs	r3, r3, #24
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	f003 0303 	and.w	r3, r3, #3
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	0c1b      	lsrs	r3, r3, #16
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	0d1b      	lsrs	r3, r3, #20
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	0c1b      	lsrs	r3, r3, #16
 8004706:	b2db      	uxtb	r3, r3
 8004708:	f003 030f 	and.w	r3, r3, #15
 800470c:	b2da      	uxtb	r2, r3
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004716:	0bdb      	lsrs	r3, r3, #15
 8004718:	b2db      	uxtb	r3, r3
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	b2da      	uxtb	r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	0b9b      	lsrs	r3, r3, #14
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	b2da      	uxtb	r2, r3
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	0b5b      	lsrs	r3, r3, #13
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	b2da      	uxtb	r2, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474c:	0b1b      	lsrs	r3, r3, #12
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	b2da      	uxtb	r2, r3
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2200      	movs	r2, #0
 800475e:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 8004760:	f107 010c 	add.w	r1, r7, #12
 8004764:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004768:	22d4      	movs	r2, #212	; 0xd4
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fc4c 	bl	8005008 <MMC_ReadExtCSD>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e129      	b.n	80049ce <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477e:	2b00      	cmp	r3, #0
 8004780:	d163      	bne.n	800484a <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004786:	009a      	lsls	r2, r3, #2
 8004788:	f640 73fc 	movw	r3, #4092	; 0xffc
 800478c:	4013      	ands	r3, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004792:	0f92      	lsrs	r2, r2, #30
 8004794:	431a      	orrs	r2, r3
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800479e:	0edb      	lsrs	r3, r3, #27
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 0307 	and.w	r3, r3, #7
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b0:	0e1b      	lsrs	r3, r3, #24
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047c2:	0d5b      	lsrs	r3, r3, #21
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047d4:	0c9b      	lsrs	r3, r3, #18
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e6:	0bdb      	lsrs	r3, r3, #15
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	f003 0307 	and.w	r3, r3, #7
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	7e1b      	ldrb	r3, [r3, #24]
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	3302      	adds	r3, #2
 800480a:	2201      	movs	r2, #1
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004814:	fb03 f202 	mul.w	r2, r3, r2
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	7a1b      	ldrb	r3, [r3, #8]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	2201      	movs	r2, #1
 8004828:	409a      	lsls	r2, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	649a      	str	r2, [r3, #72]	; 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004836:	0a52      	lsrs	r2, r2, #9
 8004838:	fb03 f202 	mul.w	r2, r3, r2
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004846:	651a      	str	r2, [r3, #80]	; 0x50
 8004848:	e023      	b.n	8004892 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	2b01      	cmp	r3, #1
 8004850:	d10f      	bne.n	8004872 <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004866:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	651a      	str	r2, [r3, #80]	; 0x50
 8004870:	e00f      	b.n	8004892 <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a58      	ldr	r2, [pc, #352]	; (80049d8 <HAL_MMC_GetCardCSD+0x344>)
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800487e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e09d      	b.n	80049ce <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004896:	0b9b      	lsrs	r3, r3, #14
 8004898:	b2db      	uxtb	r3, r3
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	b2da      	uxtb	r2, r3
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a8:	09db      	lsrs	r3, r3, #7
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ca:	0fdb      	lsrs	r3, r3, #31
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048d6:	0f5b      	lsrs	r3, r3, #29
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	f003 0303 	and.w	r3, r3, #3
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e8:	0e9b      	lsrs	r3, r3, #26
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	b2da      	uxtb	r2, r3
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048fa:	0d9b      	lsrs	r3, r3, #22
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	f003 030f 	and.w	r3, r3, #15
 8004902:	b2da      	uxtb	r2, r3
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490c:	0d5b      	lsrs	r3, r3, #21
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	b2da      	uxtb	r2, r3
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	b2da      	uxtb	r2, r3
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493c:	0bdb      	lsrs	r3, r3, #15
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	b2da      	uxtb	r2, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004950:	0b9b      	lsrs	r3, r3, #14
 8004952:	b2db      	uxtb	r3, r3
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	b2da      	uxtb	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004964:	0b5b      	lsrs	r3, r3, #13
 8004966:	b2db      	uxtb	r3, r3
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	b2da      	uxtb	r2, r3
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004978:	0b1b      	lsrs	r3, r3, #12
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f003 0301 	and.w	r3, r3, #1
 8004980:	b2da      	uxtb	r2, r3
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800498c:	0a9b      	lsrs	r3, r3, #10
 800498e:	b2db      	uxtb	r3, r3
 8004990:	f003 0303 	and.w	r3, r3, #3
 8004994:	b2da      	uxtb	r2, r3
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a0:	0a1b      	lsrs	r3, r3, #8
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	1fe00fff 	.word	0x1fe00fff

080049dc <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08e      	sub	sp, #56	; 0x38
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80049e8:	f7fd fc3c 	bl	8002264 <HAL_GetTick>
 80049ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0de      	b.n	8004bc2 <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	f040 80d7 	bne.w	8004bc0 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	635a      	str	r2, [r3, #52]	; 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2200      	movs	r2, #0
 8004a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a30:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 8004a32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a36:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004a38:	2390      	movs	r3, #144	; 0x90
 8004a3a:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004a40:	2300      	movs	r3, #0
 8004a42:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004a44:	2300      	movs	r3, #0
 8004a46:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f107 0210 	add.w	r2, r7, #16
 8004a50:	4611      	mov	r1, r2
 8004a52:	4618      	mov	r0, r3
 8004a54:	f006 fcd6 	bl	800b404 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a66:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f006 fe22 	bl	800b6b8 <SDMMC_CmdSendEXTCSD>
 8004a74:	62b8      	str	r0, [r7, #40]	; 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d045      	beq.n	8004b08 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a52      	ldr	r2, [pc, #328]	; (8004bcc <HAL_MMC_GetCardExtCSD+0x1f0>)
 8004a82:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e092      	b.n	8004bc2 <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d013      	beq.n	8004ad2 <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	637b      	str	r3, [r7, #52]	; 0x34
 8004aae:	e00d      	b.n	8004acc <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f006 fc2f 	bl	800b318 <SDMMC_ReadFIFO>
 8004aba:	4602      	mov	r2, r0
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8004ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	633b      	str	r3, [r7, #48]	; 0x30
        for (count = 0U; count < 8U; count++)
 8004ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac8:	3301      	adds	r3, #1
 8004aca:	637b      	str	r3, [r7, #52]	; 0x34
 8004acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ace:	2b07      	cmp	r3, #7
 8004ad0:	d9ee      	bls.n	8004ab0 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8004ad2:	f7fd fbc7 	bl	8002264 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d902      	bls.n	8004ae8 <HAL_MMC_GetCardExtCSD+0x10c>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10f      	bne.n	8004b08 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a37      	ldr	r2, [pc, #220]	; (8004bcc <HAL_MMC_GetCardExtCSD+0x1f0>)
 8004aee:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	635a      	str	r2, [r3, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e05c      	b.n	8004bc2 <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b0e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d0c2      	beq.n	8004a9c <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b24:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2c:	f003 0308 	and.w	r3, r3, #8
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00f      	beq.n	8004b54 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <HAL_MMC_GetCardExtCSD+0x1f0>)
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b40:	f043 0208 	orr.w	r2, r3, #8
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e036      	b.n	8004bc2 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00f      	beq.n	8004b82 <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <HAL_MMC_GetCardExtCSD+0x1f0>)
 8004b68:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	f043 0202 	orr.w	r2, r3, #2
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e01f      	b.n	8004bc2 <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00f      	beq.n	8004bb0 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a0d      	ldr	r2, [pc, #52]	; (8004bcc <HAL_MMC_GetCardExtCSD+0x1f0>)
 8004b96:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e008      	b.n	8004bc2 <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <HAL_MMC_GetCardExtCSD+0x1f4>)
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3738      	adds	r7, #56	; 0x38
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	1fe00fff 	.word	0x1fe00fff
 8004bd0:	18000f3a 	.word	0x18000f3a

08004bd4 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8004bd4:	b5b0      	push	{r4, r5, r7, lr}
 8004bd6:	b08c      	sub	sp, #48	; 0x30
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8004bde:	2300      	movs	r3, #0
 8004be0:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2203      	movs	r2, #3
 8004be6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d014      	beq.n	8004c22 <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d006      	beq.n	8004c14 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8004c06:	2204      	movs	r2, #4
 8004c08:	6839      	ldr	r1, [r7, #0]
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 faf0 	bl	80051f0 <MMC_PwrClassUpdate>
 8004c10:	6238      	str	r0, [r7, #32]
 8004c12:	e00c      	b.n	8004c2e <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8004c14:	2202      	movs	r2, #2
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fae9 	bl	80051f0 <MMC_PwrClassUpdate>
 8004c1e:	6238      	str	r0, [r7, #32]
 8004c20:	e005      	b.n	8004c2e <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8004c22:	2201      	movs	r2, #1
 8004c24:	6839      	ldr	r1, [r7, #0]
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fae2 	bl	80051f0 <MMC_PwrClassUpdate>
 8004c2c:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d17b      	bne.n	8004d2c <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c3a:	d107      	bne.n	8004c4c <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4946      	ldr	r1, [pc, #280]	; (8004d5c <HAL_MMC_ConfigWideBusOperation+0x188>)
 8004c42:	4618      	mov	r0, r3
 8004c44:	f006 fd15 	bl	800b672 <SDMMC_CmdSwitch>
 8004c48:	6238      	str	r0, [r7, #32]
 8004c4a:	e019      	b.n	8004c80 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c52:	d107      	bne.n	8004c64 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4941      	ldr	r1, [pc, #260]	; (8004d60 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f006 fd09 	bl	800b672 <SDMMC_CmdSwitch>
 8004c60:	6238      	str	r0, [r7, #32]
 8004c62:	e00d      	b.n	8004c80 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d107      	bne.n	8004c7a <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	493d      	ldr	r1, [pc, #244]	; (8004d64 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8004c70:	4618      	mov	r0, r3
 8004c72:	f006 fcfe 	bl	800b672 <SDMMC_CmdSwitch>
 8004c76:	6238      	str	r0, [r7, #32]
 8004c78:	e002      	b.n	8004c80 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8004c7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c7e:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d152      	bne.n	8004d2c <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8004c86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	041b      	lsls	r3, r3, #16
 8004c96:	4619      	mov	r1, r3
 8004c98:	4610      	mov	r0, r2
 8004c9a:	f006 fca7 	bl	800b5ec <SDMMC_CmdSendStatus>
 8004c9e:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d112      	bne.n	8004ccc <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2100      	movs	r1, #0
 8004cac:	4618      	mov	r0, r3
 8004cae:	f006 fb96 	bl	800b3de <SDMMC_GetResponse>
 8004cb2:	61f8      	str	r0, [r7, #28]
        count--;
 8004cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <HAL_MMC_ConfigWideBusOperation+0xfa>
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1e0      	bne.n	8004c8c <HAL_MMC_ConfigWideBusOperation+0xb8>
 8004cca:	e000      	b.n	8004cce <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8004ccc:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d025      	beq.n	8004d20 <HAL_MMC_ConfigWideBusOperation+0x14c>
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d122      	bne.n	8004d20 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004ce4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004ce8:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8004cea:	e01f      	b.n	8004d2c <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f107 0408 	add.w	r4, r7, #8
 8004cf2:	1d1d      	adds	r5, r3, #4
 8004cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681c      	ldr	r4, [r3, #0]
 8004d04:	466a      	mov	r2, sp
 8004d06:	f107 0314 	add.w	r3, r7, #20
 8004d0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d0e:	e882 0003 	stmia.w	r2, {r0, r1}
 8004d12:	f107 0308 	add.w	r3, r7, #8
 8004d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d18:	4620      	mov	r0, r4
 8004d1a:	f006 fad3 	bl	800b2c4 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8004d1e:	e005      	b.n	8004d2c <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d102      	bne.n	8004d2c <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8004d26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d2a:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8004d34:	6a3b      	ldr	r3, [r7, #32]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0a      	ldr	r2, [pc, #40]	; (8004d68 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8004d40:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	431a      	orrs	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3728      	adds	r7, #40	; 0x28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d5c:	03b70200 	.word	0x03b70200
 8004d60:	03b70100 	.word	0x03b70100
 8004d64:	03b70000 	.word	0x03b70000
 8004d68:	1fe00fff 	.word	0x1fe00fff

08004d6c <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8004d6c:	b5b0      	push	{r4, r5, r7, lr}
 8004d6e:	b096      	sub	sp, #88	; 0x58
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8004d74:	2302      	movs	r3, #2
 8004d76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f006 fae8 	bl	800b354 <SDMMC_GetPowerState>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d102      	bne.n	8004d90 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8004d8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004d8e:	e0e6      	b.n	8004f5e <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f006 fbc5 	bl	800b524 <SDMMC_CmdSendCID>
 8004d9a:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8004da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004da4:	e0db      	b.n	8004f5e <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2100      	movs	r1, #0
 8004dac:	4618      	mov	r0, r3
 8004dae:	f006 fb16 	bl	800b3de <SDMMC_GetResponse>
 8004db2:	4602      	mov	r2, r0
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2104      	movs	r1, #4
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f006 fb0d 	bl	800b3de <SDMMC_GetResponse>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2108      	movs	r1, #8
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f006 fb04 	bl	800b3de <SDMMC_GetResponse>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	210c      	movs	r1, #12
 8004de2:	4618      	mov	r0, r3
 8004de4:	f006 fafb 	bl	800b3de <SDMMC_GetResponse>
 8004de8:	4602      	mov	r2, r0
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f006 fbd2 	bl	800b5a2 <SDMMC_CmdSetRelAddMmc>
 8004dfe:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <MMC_InitCard+0x9e>
  {
    return errorstate;
 8004e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e08:	e0a9      	b.n	8004f5e <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8004e0a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	041b      	lsls	r3, r3, #16
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4610      	mov	r0, r2
 8004e20:	f006 fb9f 	bl	800b562 <SDMMC_CmdSendCSD>
 8004e24:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8004e2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e2e:	e096      	b.n	8004f5e <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2100      	movs	r1, #0
 8004e36:	4618      	mov	r0, r3
 8004e38:	f006 fad1 	bl	800b3de <SDMMC_GetResponse>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2104      	movs	r1, #4
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f006 fac8 	bl	800b3de <SDMMC_GetResponse>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2108      	movs	r1, #8
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f006 fabf 	bl	800b3de <SDMMC_GetResponse>
 8004e60:	4602      	mov	r2, r0
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	210c      	movs	r1, #12
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f006 fab6 	bl	800b3de <SDMMC_GetResponse>
 8004e72:	4602      	mov	r2, r0
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2104      	movs	r1, #4
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f006 faad 	bl	800b3de <SDMMC_GetResponse>
 8004e84:	4603      	mov	r3, r0
 8004e86:	0d1a      	lsrs	r2, r3, #20
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	4619      	mov	r1, r3
 8004e98:	4610      	mov	r0, r2
 8004e9a:	f006 fb02 	bl	800b4a2 <SDMMC_CmdSelDesel>
 8004e9e:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004ea0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <MMC_InitCard+0x13e>
  {
    return errorstate;
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea8:	e059      	b.n	8004f5e <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8004eaa:	f107 031c 	add.w	r3, r7, #28
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff fbef 	bl	8004694 <HAL_MMC_GetCardCSD>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec0:	e04d      	b.n	8004f5e <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eca:	041b      	lsls	r3, r3, #16
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f006 fb8c 	bl	800b5ec <SDMMC_CmdSendStatus>
 8004ed4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d005      	beq.n	8004ee8 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	635a      	str	r2, [r3, #52]	; 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3374      	adds	r3, #116	; 0x74
 8004eec:	f04f 32ff 	mov.w	r2, #4294967295
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff fd72 	bl	80049dc <HAL_MMC_GetCardExtCSD>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d002      	beq.n	8004f04 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	e02c      	b.n	8004f5e <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f006 fb6b 	bl	800b5ec <SDMMC_CmdSendStatus>
 8004f16:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f107 0408 	add.w	r4, r7, #8
 8004f30:	1d1d      	adds	r5, r3, #4
 8004f32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f36:	682b      	ldr	r3, [r5, #0]
 8004f38:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681c      	ldr	r4, [r3, #0]
 8004f42:	466a      	mov	r2, sp
 8004f44:	f107 0314 	add.w	r3, r7, #20
 8004f48:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004f4c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004f50:	f107 0308 	add.w	r3, r7, #8
 8004f54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f56:	4620      	mov	r0, r4
 8004f58:	f006 f9b4 	bl	800b2c4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3750      	adds	r7, #80	; 0x50
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004f68 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b086      	sub	sp, #24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f006 fab1 	bl	800b4e8 <SDMMC_CmdGoIdleState>
 8004f86:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d027      	beq.n	8004fde <MMC_PowerON+0x76>
  {
    return errorstate;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	e034      	b.n	8004ffc <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	1c5a      	adds	r2, r3, #1
 8004f96:	60ba      	str	r2, [r7, #8]
 8004f98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d102      	bne.n	8004fa6 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8004fa0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fa4:	e02a      	b.n	8004ffc <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4916      	ldr	r1, [pc, #88]	; (8005004 <MMC_PowerON+0x9c>)
 8004fac:	4618      	mov	r0, r3
 8004fae:	f006 fb40 	bl	800b632 <SDMMC_CmdOpCondition>
 8004fb2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8004fba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004fbe:	e01d      	b.n	8004ffc <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f006 fa09 	bl	800b3de <SDMMC_GetResponse>
 8004fcc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	0fdb      	lsrs	r3, r3, #31
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <MMC_PowerON+0x72>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <MMC_PowerON+0x74>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0d6      	beq.n	8004f92 <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	0e1b      	lsrs	r3, r3, #24
 8004fe8:	2bc0      	cmp	r3, #192	; 0xc0
 8004fea:	d103      	bne.n	8004ff4 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ff2:	e002      	b.n	8004ffa <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_MMC_ERROR_NONE;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	c0ff8000 	.word	0xc0ff8000

08005008 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b090      	sub	sp, #64	; 0x40
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	4613      	mov	r3, r2
 8005016:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005018:	f7fd f924 	bl	8002264 <HAL_GetTick>
 800501c:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 800501e:	2300      	movs	r3, #0
 8005020:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2200      	movs	r2, #0
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005030:	f04f 33ff 	mov.w	r3, #4294967295
 8005034:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 8005036:	f44f 7300 	mov.w	r3, #512	; 0x200
 800503a:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800503c:	2390      	movs	r3, #144	; 0x90
 800503e:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005040:	2302      	movs	r3, #2
 8005042:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005044:	2300      	movs	r3, #0
 8005046:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8005048:	2301      	movs	r3, #1
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f107 0214 	add.w	r2, r7, #20
 8005054:	4611      	mov	r1, r2
 8005056:	4618      	mov	r0, r3
 8005058:	f006 f9d4 	bl	800b404 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f006 fb28 	bl	800b6b8 <SDMMC_CmdSendEXTCSD>
 8005068:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	2b00      	cmp	r3, #0
 800506e:	d04e      	beq.n	800510e <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a5c      	ldr	r2, [pc, #368]	; (80051e8 <MMC_ReadExtCSD+0x1e0>)
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507e:	431a      	orrs	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e0a6      	b.n	80051de <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005096:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d01c      	beq.n	80050d8 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 800509e:	2300      	movs	r3, #0
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a2:	e013      	b.n	80050cc <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f006 f935 	bl	800b318 <SDMMC_ReadFIFO>
 80050ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 80050b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	4413      	add	r3, r2
 80050b6:	88fa      	ldrh	r2, [r7, #6]
 80050b8:	0892      	lsrs	r2, r2, #2
 80050ba:	b292      	uxth	r2, r2
 80050bc:	4293      	cmp	r3, r2
 80050be:	d102      	bne.n	80050c6 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c4:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 80050c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c8:	3301      	adds	r3, #1
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ce:	2b07      	cmp	r3, #7
 80050d0:	d9e8      	bls.n	80050a4 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	3308      	adds	r3, #8
 80050d6:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 80050d8:	f7fd f8c4 	bl	8002264 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d902      	bls.n	80050ee <MMC_ReadExtCSD+0xe6>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10f      	bne.n	800510e <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a3d      	ldr	r2, [pc, #244]	; (80051e8 <MMC_ReadExtCSD+0x1e0>)
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800510a:	2303      	movs	r3, #3
 800510c:	e067      	b.n	80051de <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005114:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0b9      	beq.n	8005090 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00f      	beq.n	800514a <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a2e      	ldr	r2, [pc, #184]	; (80051e8 <MMC_ReadExtCSD+0x1e0>)
 8005130:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005136:	f043 0208 	orr.w	r2, r3, #8
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e049      	b.n	80051de <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005150:	f003 0302 	and.w	r3, r3, #2
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00f      	beq.n	8005178 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a22      	ldr	r2, [pc, #136]	; (80051e8 <MMC_ReadExtCSD+0x1e0>)
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005164:	f043 0202 	orr.w	r2, r3, #2
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e032      	b.n	80051de <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00f      	beq.n	80051a6 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a17      	ldr	r2, [pc, #92]	; (80051e8 <MMC_ReadExtCSD+0x1e0>)
 800518c:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005192:	f043 0220 	orr.w	r2, r3, #32
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e01b      	b.n	80051de <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	041b      	lsls	r3, r3, #16
 80051b0:	4619      	mov	r1, r3
 80051b2:	4610      	mov	r0, r2
 80051b4:	f006 fa1a 	bl	800b5ec <SDMMC_CmdSendStatus>
 80051b8:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 80051ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d005      	beq.n	80051cc <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	431a      	orrs	r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a06      	ldr	r2, [pc, #24]	; (80051ec <MMC_ReadExtCSD+0x1e4>)
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3740      	adds	r7, #64	; 0x40
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	1fe00fff 	.word	0x1fe00fff
 80051ec:	18000f3a 	.word	0x18000f3a

080051f0 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8005200:	2300      	movs	r3, #0
 8005202:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800520a:	d004      	beq.n	8005216 <MMC_PwrClassUpdate+0x26>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005212:	f040 8085 	bne.w	8005320 <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8005216:	2300      	movs	r3, #0
 8005218:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 800521a:	f107 0114 	add.w	r1, r7, #20
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	22bb      	movs	r2, #187	; 0xbb
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f7ff feef 	bl	8005008 <MMC_ReadExtCSD>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d003      	beq.n	8005238 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005230:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	e002      	b.n	800523e <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	0e1b      	lsrs	r3, r3, #24
 800523c:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b04      	cmp	r3, #4
 8005242:	d105      	bne.n	8005250 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800524a:	0e1b      	lsrs	r3, r3, #24
 800524c:	61bb      	str	r3, [r7, #24]
 800524e:	e00e      	b.n	800526e <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d106      	bne.n	8005264 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800525c:	0c1b      	lsrs	r3, r3, #16
 800525e:	b2db      	uxtb	r3, r3
 8005260:	61bb      	str	r3, [r7, #24]
 8005262:	e004      	b.n	800526e <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800526a:	0e1b      	lsrs	r3, r3, #24
 800526c:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d155      	bne.n	8005320 <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800527a:	d102      	bne.n	8005282 <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	091b      	lsrs	r3, r3, #4
 8005280:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	4053      	eors	r3, r2
 8005288:	f003 030f 	and.w	r3, r3, #15
 800528c:	2b00      	cmp	r3, #0
 800528e:	d047      	beq.n	8005320 <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800529c:	4b23      	ldr	r3, [pc, #140]	; (800532c <MMC_PwrClassUpdate+0x13c>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	4619      	mov	r1, r3
 80052a2:	f006 f9e6 	bl	800b672 <SDMMC_CmdSwitch>
 80052a6:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d138      	bne.n	8005320 <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 80052ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	041b      	lsls	r3, r3, #16
 80052be:	4619      	mov	r1, r3
 80052c0:	4610      	mov	r0, r2
 80052c2:	f006 f993 	bl	800b5ec <SDMMC_CmdSendStatus>
 80052c6:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d112      	bne.n	80052f4 <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2100      	movs	r1, #0
 80052d4:	4618      	mov	r0, r3
 80052d6:	f006 f882 	bl	800b3de <SDMMC_GetResponse>
 80052da:	6238      	str	r0, [r7, #32]
            count--;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	3b01      	subs	r3, #1
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <MMC_PwrClassUpdate+0x106>
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e0      	bne.n	80052b4 <MMC_PwrClassUpdate+0xc4>
 80052f2:	e000      	b.n	80052f6 <MMC_PwrClassUpdate+0x106>
              break;
 80052f4:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80052f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00b      	beq.n	8005314 <MMC_PwrClassUpdate+0x124>
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d108      	bne.n	8005314 <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005308:	2b00      	cmp	r3, #0
 800530a:	d009      	beq.n	8005320 <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800530c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005310:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8005312:	e005      	b.n	8005320 <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 8005314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005316:	2b00      	cmp	r3, #0
 8005318:	d102      	bne.n	8005320 <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 800531a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800531e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8005320:	69fb      	ldr	r3, [r7, #28]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3728      	adds	r7, #40	; 0x28
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	03bb0000 	.word	0x03bb0000

08005330 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005332:	b08f      	sub	sp, #60	; 0x3c
 8005334:	af0a      	add	r7, sp, #40	; 0x28
 8005336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e116      	b.n	8005570 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d106      	bne.n	8005362 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7fc fdf1 	bl	8001f44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2203      	movs	r2, #3
 8005366:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800536e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4618      	mov	r0, r3
 8005382:	f006 fbd5 	bl	800bb30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	687e      	ldr	r6, [r7, #4]
 800538e:	466d      	mov	r5, sp
 8005390:	f106 0410 	add.w	r4, r6, #16
 8005394:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005396:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800539a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800539c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80053a4:	1d33      	adds	r3, r6, #4
 80053a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053a8:	6838      	ldr	r0, [r7, #0]
 80053aa:	f006 fb53 	bl	800ba54 <USB_CoreInit>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0d7      	b.n	8005570 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2100      	movs	r1, #0
 80053c6:	4618      	mov	r0, r3
 80053c8:	f006 fbc3 	bl	800bb52 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053cc:	2300      	movs	r3, #0
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	e04a      	b.n	8005468 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80053d2:	7bfa      	ldrb	r2, [r7, #15]
 80053d4:	6879      	ldr	r1, [r7, #4]
 80053d6:	4613      	mov	r3, r2
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	440b      	add	r3, r1
 80053e0:	333d      	adds	r3, #61	; 0x3d
 80053e2:	2201      	movs	r2, #1
 80053e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053e6:	7bfa      	ldrb	r2, [r7, #15]
 80053e8:	6879      	ldr	r1, [r7, #4]
 80053ea:	4613      	mov	r3, r2
 80053ec:	00db      	lsls	r3, r3, #3
 80053ee:	4413      	add	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	440b      	add	r3, r1
 80053f4:	333c      	adds	r3, #60	; 0x3c
 80053f6:	7bfa      	ldrb	r2, [r7, #15]
 80053f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053fa:	7bfa      	ldrb	r2, [r7, #15]
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	b298      	uxth	r0, r3
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	3356      	adds	r3, #86	; 0x56
 800540e:	4602      	mov	r2, r0
 8005410:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005412:	7bfa      	ldrb	r2, [r7, #15]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	3340      	adds	r3, #64	; 0x40
 8005422:	2200      	movs	r2, #0
 8005424:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	6879      	ldr	r1, [r7, #4]
 800542a:	4613      	mov	r3, r2
 800542c:	00db      	lsls	r3, r3, #3
 800542e:	4413      	add	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	440b      	add	r3, r1
 8005434:	3344      	adds	r3, #68	; 0x44
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800543a:	7bfa      	ldrb	r2, [r7, #15]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	00db      	lsls	r3, r3, #3
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	3348      	adds	r3, #72	; 0x48
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800544e:	7bfa      	ldrb	r2, [r7, #15]
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	4613      	mov	r3, r2
 8005454:	00db      	lsls	r3, r3, #3
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	440b      	add	r3, r1
 800545c:	334c      	adds	r3, #76	; 0x4c
 800545e:	2200      	movs	r2, #0
 8005460:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	3301      	adds	r3, #1
 8005466:	73fb      	strb	r3, [r7, #15]
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d3af      	bcc.n	80053d2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005472:	2300      	movs	r3, #0
 8005474:	73fb      	strb	r3, [r7, #15]
 8005476:	e044      	b.n	8005502 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005478:	7bfa      	ldrb	r2, [r7, #15]
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	4613      	mov	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	4413      	add	r3, r2
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	440b      	add	r3, r1
 8005486:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800548e:	7bfa      	ldrb	r2, [r7, #15]
 8005490:	6879      	ldr	r1, [r7, #4]
 8005492:	4613      	mov	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80054a0:	7bfa      	ldrb	r2, [r7, #15]
 80054a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054a4:	7bfa      	ldrb	r2, [r7, #15]
 80054a6:	6879      	ldr	r1, [r7, #4]
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	440b      	add	r3, r1
 80054b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80054ba:	7bfa      	ldrb	r2, [r7, #15]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054d0:	7bfa      	ldrb	r2, [r7, #15]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054e6:	7bfa      	ldrb	r2, [r7, #15]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	00db      	lsls	r3, r3, #3
 80054ee:	4413      	add	r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	3301      	adds	r3, #1
 8005500:	73fb      	strb	r3, [r7, #15]
 8005502:	7bfa      	ldrb	r2, [r7, #15]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	429a      	cmp	r2, r3
 800550a:	d3b5      	bcc.n	8005478 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	687e      	ldr	r6, [r7, #4]
 8005514:	466d      	mov	r5, sp
 8005516:	f106 0410 	add.w	r4, r6, #16
 800551a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800551c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800551e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005520:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005522:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005526:	e885 0003 	stmia.w	r5, {r0, r1}
 800552a:	1d33      	adds	r3, r6, #4
 800552c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800552e:	6838      	ldr	r0, [r7, #0]
 8005530:	f006 fb5c 	bl	800bbec <USB_DevInit>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d005      	beq.n	8005546 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2202      	movs	r2, #2
 800553e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e014      	b.n	8005570 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	2b01      	cmp	r3, #1
 800555c:	d102      	bne.n	8005564 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f80a 	bl	8005578 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4618      	mov	r0, r3
 800556a:	f006 fd1a 	bl	800bfa2 <USB_DevDisconnect>

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005578 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2201      	movs	r2, #1
 800558a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055a6:	4b05      	ldr	r3, [pc, #20]	; (80055bc <HAL_PCDEx_ActivateLPM+0x44>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3714      	adds	r7, #20
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	10000003 	.word	0x10000003

080055c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80055c8:	4b19      	ldr	r3, [pc, #100]	; (8005630 <HAL_PWREx_ConfigSupply+0x70>)
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	d00a      	beq.n	80055ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055d4:	4b16      	ldr	r3, [pc, #88]	; (8005630 <HAL_PWREx_ConfigSupply+0x70>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d001      	beq.n	80055e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e01f      	b.n	8005626 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e01d      	b.n	8005626 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055ea:	4b11      	ldr	r3, [pc, #68]	; (8005630 <HAL_PWREx_ConfigSupply+0x70>)
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f023 0207 	bic.w	r2, r3, #7
 80055f2:	490f      	ldr	r1, [pc, #60]	; (8005630 <HAL_PWREx_ConfigSupply+0x70>)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80055fa:	f7fc fe33 	bl	8002264 <HAL_GetTick>
 80055fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005600:	e009      	b.n	8005616 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005602:	f7fc fe2f 	bl	8002264 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005610:	d901      	bls.n	8005616 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e007      	b.n	8005626 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005616:	4b06      	ldr	r3, [pc, #24]	; (8005630 <HAL_PWREx_ConfigSupply+0x70>)
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800561e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005622:	d1ee      	bne.n	8005602 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	58024800 	.word	0x58024800

08005634 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4a04      	ldr	r2, [pc, #16]	; (8005650 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800563e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005642:	60d3      	str	r3, [r2, #12]
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	58024800 	.word	0x58024800

08005654 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b08c      	sub	sp, #48	; 0x30
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e3c8      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	f000 8087 	beq.w	8005782 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005674:	4b88      	ldr	r3, [pc, #544]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800567c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800567e:	4b86      	ldr	r3, [pc, #536]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005682:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	2b10      	cmp	r3, #16
 8005688:	d007      	beq.n	800569a <HAL_RCC_OscConfig+0x46>
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	2b18      	cmp	r3, #24
 800568e:	d110      	bne.n	80056b2 <HAL_RCC_OscConfig+0x5e>
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b02      	cmp	r3, #2
 8005698:	d10b      	bne.n	80056b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800569a:	4b7f      	ldr	r3, [pc, #508]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d06c      	beq.n	8005780 <HAL_RCC_OscConfig+0x12c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d168      	bne.n	8005780 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e3a2      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056ba:	d106      	bne.n	80056ca <HAL_RCC_OscConfig+0x76>
 80056bc:	4b76      	ldr	r3, [pc, #472]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a75      	ldr	r2, [pc, #468]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80056c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	e02e      	b.n	8005728 <HAL_RCC_OscConfig+0xd4>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10c      	bne.n	80056ec <HAL_RCC_OscConfig+0x98>
 80056d2:	4b71      	ldr	r3, [pc, #452]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a70      	ldr	r2, [pc, #448]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80056d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056dc:	6013      	str	r3, [r2, #0]
 80056de:	4b6e      	ldr	r3, [pc, #440]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a6d      	ldr	r2, [pc, #436]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80056e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80056e8:	6013      	str	r3, [r2, #0]
 80056ea:	e01d      	b.n	8005728 <HAL_RCC_OscConfig+0xd4>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80056f4:	d10c      	bne.n	8005710 <HAL_RCC_OscConfig+0xbc>
 80056f6:	4b68      	ldr	r3, [pc, #416]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a67      	ldr	r2, [pc, #412]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80056fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	4b65      	ldr	r3, [pc, #404]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a64      	ldr	r2, [pc, #400]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	e00b      	b.n	8005728 <HAL_RCC_OscConfig+0xd4>
 8005710:	4b61      	ldr	r3, [pc, #388]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a60      	ldr	r2, [pc, #384]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	4b5e      	ldr	r3, [pc, #376]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a5d      	ldr	r2, [pc, #372]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d013      	beq.n	8005758 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005730:	f7fc fd98 	bl	8002264 <HAL_GetTick>
 8005734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005738:	f7fc fd94 	bl	8002264 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b64      	cmp	r3, #100	; 0x64
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e356      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800574a:	4b53      	ldr	r3, [pc, #332]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0xe4>
 8005756:	e014      	b.n	8005782 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005758:	f7fc fd84 	bl	8002264 <HAL_GetTick>
 800575c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005760:	f7fc fd80 	bl	8002264 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b64      	cmp	r3, #100	; 0x64
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e342      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005772:	4b49      	ldr	r3, [pc, #292]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1f0      	bne.n	8005760 <HAL_RCC_OscConfig+0x10c>
 800577e:	e000      	b.n	8005782 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0302 	and.w	r3, r3, #2
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 808c 	beq.w	80058a8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005790:	4b41      	ldr	r3, [pc, #260]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005798:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800579a:	4b3f      	ldr	r3, [pc, #252]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 800579c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800579e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_RCC_OscConfig+0x162>
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	2b18      	cmp	r3, #24
 80057aa:	d137      	bne.n	800581c <HAL_RCC_OscConfig+0x1c8>
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	f003 0303 	and.w	r3, r3, #3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d132      	bne.n	800581c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057b6:	4b38      	ldr	r3, [pc, #224]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_RCC_OscConfig+0x17a>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e314      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057ce:	4b32      	ldr	r3, [pc, #200]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f023 0219 	bic.w	r2, r3, #25
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	492f      	ldr	r1, [pc, #188]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e0:	f7fc fd40 	bl	8002264 <HAL_GetTick>
 80057e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80057e8:	f7fc fd3c 	bl	8002264 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e2fe      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057fa:	4b27      	ldr	r3, [pc, #156]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005806:	4b24      	ldr	r3, [pc, #144]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	061b      	lsls	r3, r3, #24
 8005814:	4920      	ldr	r1, [pc, #128]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005816:	4313      	orrs	r3, r2
 8005818:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800581a:	e045      	b.n	80058a8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d026      	beq.n	8005872 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005824:	4b1c      	ldr	r3, [pc, #112]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f023 0219 	bic.w	r2, r3, #25
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4919      	ldr	r1, [pc, #100]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005832:	4313      	orrs	r3, r2
 8005834:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005836:	f7fc fd15 	bl	8002264 <HAL_GetTick>
 800583a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800583e:	f7fc fd11 	bl	8002264 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e2d3      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005850:	4b11      	ldr	r3, [pc, #68]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0f0      	beq.n	800583e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585c:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	061b      	lsls	r3, r3, #24
 800586a:	490b      	ldr	r1, [pc, #44]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 800586c:	4313      	orrs	r3, r2
 800586e:	604b      	str	r3, [r1, #4]
 8005870:	e01a      	b.n	80058a8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005872:	4b09      	ldr	r3, [pc, #36]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a08      	ldr	r2, [pc, #32]	; (8005898 <HAL_RCC_OscConfig+0x244>)
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587e:	f7fc fcf1 	bl	8002264 <HAL_GetTick>
 8005882:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005884:	e00a      	b.n	800589c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005886:	f7fc fced 	bl	8002264 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d903      	bls.n	800589c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e2af      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
 8005898:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800589c:	4b96      	ldr	r3, [pc, #600]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1ee      	bne.n	8005886 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0310 	and.w	r3, r3, #16
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d06a      	beq.n	800598a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80058b4:	4b90      	ldr	r3, [pc, #576]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058be:	4b8e      	ldr	r3, [pc, #568]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d007      	beq.n	80058da <HAL_RCC_OscConfig+0x286>
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b18      	cmp	r3, #24
 80058ce:	d11b      	bne.n	8005908 <HAL_RCC_OscConfig+0x2b4>
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	f003 0303 	and.w	r3, r3, #3
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d116      	bne.n	8005908 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058da:	4b87      	ldr	r3, [pc, #540]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_RCC_OscConfig+0x29e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d001      	beq.n	80058f2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e282      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058f2:	4b81      	ldr	r3, [pc, #516]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	061b      	lsls	r3, r3, #24
 8005900:	497d      	ldr	r1, [pc, #500]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005902:	4313      	orrs	r3, r2
 8005904:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005906:	e040      	b.n	800598a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	69db      	ldr	r3, [r3, #28]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d023      	beq.n	8005958 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005910:	4b79      	ldr	r3, [pc, #484]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a78      	ldr	r2, [pc, #480]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800591a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fc fca2 	bl	8002264 <HAL_GetTick>
 8005920:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005922:	e008      	b.n	8005936 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005924:	f7fc fc9e 	bl	8002264 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b02      	cmp	r3, #2
 8005930:	d901      	bls.n	8005936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e260      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005936:	4b70      	ldr	r3, [pc, #448]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800593e:	2b00      	cmp	r3, #0
 8005940:	d0f0      	beq.n	8005924 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005942:	4b6d      	ldr	r3, [pc, #436]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	061b      	lsls	r3, r3, #24
 8005950:	4969      	ldr	r1, [pc, #420]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005952:	4313      	orrs	r3, r2
 8005954:	60cb      	str	r3, [r1, #12]
 8005956:	e018      	b.n	800598a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005958:	4b67      	ldr	r3, [pc, #412]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a66      	ldr	r2, [pc, #408]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005964:	f7fc fc7e 	bl	8002264 <HAL_GetTick>
 8005968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800596a:	e008      	b.n	800597e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800596c:	f7fc fc7a 	bl	8002264 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d901      	bls.n	800597e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e23c      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800597e:	4b5e      	ldr	r3, [pc, #376]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1f0      	bne.n	800596c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d036      	beq.n	8005a04 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d019      	beq.n	80059d2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800599e:	4b56      	ldr	r3, [pc, #344]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 80059a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a2:	4a55      	ldr	r2, [pc, #340]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059aa:	f7fc fc5b 	bl	8002264 <HAL_GetTick>
 80059ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059b0:	e008      	b.n	80059c4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059b2:	f7fc fc57 	bl	8002264 <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d901      	bls.n	80059c4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80059c0:	2303      	movs	r3, #3
 80059c2:	e219      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80059c4:	4b4c      	ldr	r3, [pc, #304]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 80059c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0f0      	beq.n	80059b2 <HAL_RCC_OscConfig+0x35e>
 80059d0:	e018      	b.n	8005a04 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059d2:	4b49      	ldr	r3, [pc, #292]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 80059d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059d6:	4a48      	ldr	r2, [pc, #288]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 80059d8:	f023 0301 	bic.w	r3, r3, #1
 80059dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059de:	f7fc fc41 	bl	8002264 <HAL_GetTick>
 80059e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059e6:	f7fc fc3d 	bl	8002264 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e1ff      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80059f8:	4b3f      	ldr	r3, [pc, #252]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 80059fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1f0      	bne.n	80059e6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0320 	and.w	r3, r3, #32
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d036      	beq.n	8005a7e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d019      	beq.n	8005a4c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a18:	4b37      	ldr	r3, [pc, #220]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a36      	ldr	r2, [pc, #216]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005a1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a22:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a24:	f7fc fc1e 	bl	8002264 <HAL_GetTick>
 8005a28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a2c:	f7fc fc1a 	bl	8002264 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e1dc      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a3e:	4b2e      	ldr	r3, [pc, #184]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d0f0      	beq.n	8005a2c <HAL_RCC_OscConfig+0x3d8>
 8005a4a:	e018      	b.n	8005a7e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005a4c:	4b2a      	ldr	r3, [pc, #168]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a29      	ldr	r2, [pc, #164]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005a52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a58:	f7fc fc04 	bl	8002264 <HAL_GetTick>
 8005a5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a5e:	e008      	b.n	8005a72 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a60:	f7fc fc00 	bl	8002264 <HAL_GetTick>
 8005a64:	4602      	mov	r2, r0
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e1c2      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005a72:	4b21      	ldr	r3, [pc, #132]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f0      	bne.n	8005a60 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8086 	beq.w	8005b98 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005a8c:	4b1b      	ldr	r3, [pc, #108]	; (8005afc <HAL_RCC_OscConfig+0x4a8>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1a      	ldr	r2, [pc, #104]	; (8005afc <HAL_RCC_OscConfig+0x4a8>)
 8005a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a98:	f7fc fbe4 	bl	8002264 <HAL_GetTick>
 8005a9c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a9e:	e008      	b.n	8005ab2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005aa0:	f7fc fbe0 	bl	8002264 <HAL_GetTick>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	1ad3      	subs	r3, r2, r3
 8005aaa:	2b64      	cmp	r3, #100	; 0x64
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e1a2      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ab2:	4b12      	ldr	r3, [pc, #72]	; (8005afc <HAL_RCC_OscConfig+0x4a8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d0f0      	beq.n	8005aa0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d106      	bne.n	8005ad4 <HAL_RCC_OscConfig+0x480>
 8005ac6:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	4a0b      	ldr	r2, [pc, #44]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005acc:	f043 0301 	orr.w	r3, r3, #1
 8005ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad2:	e032      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e6>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d111      	bne.n	8005b00 <HAL_RCC_OscConfig+0x4ac>
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae0:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae8:	4b03      	ldr	r3, [pc, #12]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aec:	4a02      	ldr	r2, [pc, #8]	; (8005af8 <HAL_RCC_OscConfig+0x4a4>)
 8005aee:	f023 0304 	bic.w	r3, r3, #4
 8005af2:	6713      	str	r3, [r2, #112]	; 0x70
 8005af4:	e021      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e6>
 8005af6:	bf00      	nop
 8005af8:	58024400 	.word	0x58024400
 8005afc:	58024800 	.word	0x58024800
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	2b05      	cmp	r3, #5
 8005b06:	d10c      	bne.n	8005b22 <HAL_RCC_OscConfig+0x4ce>
 8005b08:	4b83      	ldr	r3, [pc, #524]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b0c:	4a82      	ldr	r2, [pc, #520]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005b0e:	f043 0304 	orr.w	r3, r3, #4
 8005b12:	6713      	str	r3, [r2, #112]	; 0x70
 8005b14:	4b80      	ldr	r3, [pc, #512]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	4a7f      	ldr	r2, [pc, #508]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005b1a:	f043 0301 	orr.w	r3, r3, #1
 8005b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b20:	e00b      	b.n	8005b3a <HAL_RCC_OscConfig+0x4e6>
 8005b22:	4b7d      	ldr	r3, [pc, #500]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	4a7c      	ldr	r2, [pc, #496]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2e:	4b7a      	ldr	r3, [pc, #488]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	4a79      	ldr	r2, [pc, #484]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005b34:	f023 0304 	bic.w	r3, r3, #4
 8005b38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d015      	beq.n	8005b6e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b42:	f7fc fb8f 	bl	8002264 <HAL_GetTick>
 8005b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b48:	e00a      	b.n	8005b60 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b4a:	f7fc fb8b 	bl	8002264 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d901      	bls.n	8005b60 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e14b      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b60:	4b6d      	ldr	r3, [pc, #436]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0ee      	beq.n	8005b4a <HAL_RCC_OscConfig+0x4f6>
 8005b6c:	e014      	b.n	8005b98 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b6e:	f7fc fb79 	bl	8002264 <HAL_GetTick>
 8005b72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b74:	e00a      	b.n	8005b8c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b76:	f7fc fb75 	bl	8002264 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e135      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005b8c:	4b62      	ldr	r3, [pc, #392]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1ee      	bne.n	8005b76 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 812a 	beq.w	8005df6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005ba2:	4b5d      	ldr	r3, [pc, #372]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005baa:	2b18      	cmp	r3, #24
 8005bac:	f000 80ba 	beq.w	8005d24 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	f040 8095 	bne.w	8005ce4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bba:	4b57      	ldr	r3, [pc, #348]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a56      	ldr	r2, [pc, #344]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005bc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc6:	f7fc fb4d 	bl	8002264 <HAL_GetTick>
 8005bca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005bcc:	e008      	b.n	8005be0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bce:	f7fc fb49 	bl	8002264 <HAL_GetTick>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	1ad3      	subs	r3, r2, r3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d901      	bls.n	8005be0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e10b      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005be0:	4b4d      	ldr	r3, [pc, #308]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1f0      	bne.n	8005bce <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bec:	4b4a      	ldr	r3, [pc, #296]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bf0:	4b4a      	ldr	r3, [pc, #296]	; (8005d1c <HAL_RCC_OscConfig+0x6c8>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005bfc:	0112      	lsls	r2, r2, #4
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	4945      	ldr	r1, [pc, #276]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	628b      	str	r3, [r1, #40]	; 0x28
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c14:	3b01      	subs	r3, #1
 8005c16:	025b      	lsls	r3, r3, #9
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c20:	3b01      	subs	r3, #1
 8005c22:	041b      	lsls	r3, r3, #16
 8005c24:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	061b      	lsls	r3, r3, #24
 8005c32:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c36:	4938      	ldr	r1, [pc, #224]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005c3c:	4b36      	ldr	r3, [pc, #216]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c40:	4a35      	ldr	r2, [pc, #212]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c42:	f023 0301 	bic.w	r3, r3, #1
 8005c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005c48:	4b33      	ldr	r3, [pc, #204]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c4c:	4b34      	ldr	r3, [pc, #208]	; (8005d20 <HAL_RCC_OscConfig+0x6cc>)
 8005c4e:	4013      	ands	r3, r2
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005c54:	00d2      	lsls	r2, r2, #3
 8005c56:	4930      	ldr	r1, [pc, #192]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005c5c:	4b2e      	ldr	r3, [pc, #184]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	f023 020c 	bic.w	r2, r3, #12
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	492b      	ldr	r1, [pc, #172]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005c6e:	4b2a      	ldr	r3, [pc, #168]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	f023 0202 	bic.w	r2, r3, #2
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7a:	4927      	ldr	r1, [pc, #156]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c80:	4b25      	ldr	r3, [pc, #148]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	4a24      	ldr	r2, [pc, #144]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c8c:	4b22      	ldr	r3, [pc, #136]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c90:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005c98:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9c:	4a1e      	ldr	r2, [pc, #120]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005c9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005ca4:	4b1c      	ldr	r3, [pc, #112]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005caa:	f043 0301 	orr.w	r3, r3, #1
 8005cae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005cb0:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cbc:	f7fc fad2 	bl	8002264 <HAL_GetTick>
 8005cc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cc2:	e008      	b.n	8005cd6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc4:	f7fc face 	bl	8002264 <HAL_GetTick>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	1ad3      	subs	r3, r2, r3
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e090      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cd6:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d0f0      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x670>
 8005ce2:	e088      	b.n	8005df6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a0b      	ldr	r2, [pc, #44]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005cea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cf0:	f7fc fab8 	bl	8002264 <HAL_GetTick>
 8005cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cf6:	e008      	b.n	8005d0a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf8:	f7fc fab4 	bl	8002264 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e076      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d0a:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <HAL_RCC_OscConfig+0x6c4>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1f0      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x6a4>
 8005d16:	e06e      	b.n	8005df6 <HAL_RCC_OscConfig+0x7a2>
 8005d18:	58024400 	.word	0x58024400
 8005d1c:	fffffc0c 	.word	0xfffffc0c
 8005d20:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d24:	4b36      	ldr	r3, [pc, #216]	; (8005e00 <HAL_RCC_OscConfig+0x7ac>)
 8005d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d2a:	4b35      	ldr	r3, [pc, #212]	; (8005e00 <HAL_RCC_OscConfig+0x7ac>)
 8005d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d031      	beq.n	8005d9c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d38:	693b      	ldr	r3, [r7, #16]
 8005d3a:	f003 0203 	and.w	r2, r3, #3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d12a      	bne.n	8005d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d122      	bne.n	8005d9c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d60:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d11a      	bne.n	8005d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	0a5b      	lsrs	r3, r3, #9
 8005d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d72:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d111      	bne.n	8005d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	0c1b      	lsrs	r3, r3, #16
 8005d7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d108      	bne.n	8005d9c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	0e1b      	lsrs	r3, r3, #24
 8005d8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d001      	beq.n	8005da0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e02b      	b.n	8005df8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005da0:	4b17      	ldr	r3, [pc, #92]	; (8005e00 <HAL_RCC_OscConfig+0x7ac>)
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	08db      	lsrs	r3, r3, #3
 8005da6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005daa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d01f      	beq.n	8005df6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005db6:	4b12      	ldr	r3, [pc, #72]	; (8005e00 <HAL_RCC_OscConfig+0x7ac>)
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	4a11      	ldr	r2, [pc, #68]	; (8005e00 <HAL_RCC_OscConfig+0x7ac>)
 8005dbc:	f023 0301 	bic.w	r3, r3, #1
 8005dc0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005dc2:	f7fc fa4f 	bl	8002264 <HAL_GetTick>
 8005dc6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005dc8:	bf00      	nop
 8005dca:	f7fc fa4b 	bl	8002264 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d0f9      	beq.n	8005dca <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <HAL_RCC_OscConfig+0x7ac>)
 8005dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <HAL_RCC_OscConfig+0x7b0>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005de2:	00d2      	lsls	r2, r2, #3
 8005de4:	4906      	ldr	r1, [pc, #24]	; (8005e00 <HAL_RCC_OscConfig+0x7ac>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005dea:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <HAL_RCC_OscConfig+0x7ac>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	4a04      	ldr	r2, [pc, #16]	; (8005e00 <HAL_RCC_OscConfig+0x7ac>)
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3730      	adds	r7, #48	; 0x30
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	58024400 	.word	0x58024400
 8005e04:	ffff0007 	.word	0xffff0007

08005e08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e19c      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e1c:	4b8a      	ldr	r3, [pc, #552]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d910      	bls.n	8005e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e2a:	4b87      	ldr	r3, [pc, #540]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f023 020f 	bic.w	r2, r3, #15
 8005e32:	4985      	ldr	r1, [pc, #532]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b83      	ldr	r3, [pc, #524]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e184      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0304 	and.w	r3, r3, #4
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d010      	beq.n	8005e7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	691a      	ldr	r2, [r3, #16]
 8005e5c:	4b7b      	ldr	r3, [pc, #492]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e64:	429a      	cmp	r2, r3
 8005e66:	d908      	bls.n	8005e7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e68:	4b78      	ldr	r3, [pc, #480]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	691b      	ldr	r3, [r3, #16]
 8005e74:	4975      	ldr	r1, [pc, #468]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d010      	beq.n	8005ea8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	4b70      	ldr	r3, [pc, #448]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d908      	bls.n	8005ea8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e96:	4b6d      	ldr	r3, [pc, #436]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	496a      	ldr	r1, [pc, #424]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d010      	beq.n	8005ed6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699a      	ldr	r2, [r3, #24]
 8005eb8:	4b64      	ldr	r3, [pc, #400]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005eba:	69db      	ldr	r3, [r3, #28]
 8005ebc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d908      	bls.n	8005ed6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ec4:	4b61      	ldr	r3, [pc, #388]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	495e      	ldr	r1, [pc, #376]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0320 	and.w	r3, r3, #32
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d010      	beq.n	8005f04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	69da      	ldr	r2, [r3, #28]
 8005ee6:	4b59      	ldr	r3, [pc, #356]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ee8:	6a1b      	ldr	r3, [r3, #32]
 8005eea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d908      	bls.n	8005f04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005ef2:	4b56      	ldr	r3, [pc, #344]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	4953      	ldr	r1, [pc, #332]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d010      	beq.n	8005f32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	68da      	ldr	r2, [r3, #12]
 8005f14:	4b4d      	ldr	r3, [pc, #308]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	f003 030f 	and.w	r3, r3, #15
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d908      	bls.n	8005f32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f20:	4b4a      	ldr	r3, [pc, #296]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f023 020f 	bic.w	r2, r3, #15
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4947      	ldr	r1, [pc, #284]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 0301 	and.w	r3, r3, #1
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d055      	beq.n	8005fea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f3e:	4b43      	ldr	r3, [pc, #268]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	4940      	ldr	r1, [pc, #256]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d107      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f58:	4b3c      	ldr	r3, [pc, #240]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d121      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0f6      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b03      	cmp	r3, #3
 8005f6e:	d107      	bne.n	8005f80 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f70:	4b36      	ldr	r3, [pc, #216]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d115      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e0ea      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f88:	4b30      	ldr	r3, [pc, #192]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d109      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0de      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f98:	4b2c      	ldr	r3, [pc, #176]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e0d6      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fa8:	4b28      	ldr	r3, [pc, #160]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f023 0207 	bic.w	r2, r3, #7
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	4925      	ldr	r1, [pc, #148]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fba:	f7fc f953 	bl	8002264 <HAL_GetTick>
 8005fbe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fc0:	e00a      	b.n	8005fd8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fc2:	f7fc f94f 	bl	8002264 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e0be      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd8:	4b1c      	ldr	r3, [pc, #112]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d1eb      	bne.n	8005fc2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d010      	beq.n	8006018 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	429a      	cmp	r2, r3
 8006004:	d208      	bcs.n	8006018 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006006:	4b11      	ldr	r3, [pc, #68]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f023 020f 	bic.w	r2, r3, #15
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	490e      	ldr	r1, [pc, #56]	; (800604c <HAL_RCC_ClockConfig+0x244>)
 8006014:	4313      	orrs	r3, r2
 8006016:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006018:	4b0b      	ldr	r3, [pc, #44]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	683a      	ldr	r2, [r7, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d214      	bcs.n	8006050 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006026:	4b08      	ldr	r3, [pc, #32]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f023 020f 	bic.w	r2, r3, #15
 800602e:	4906      	ldr	r1, [pc, #24]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	4313      	orrs	r3, r2
 8006034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006036:	4b04      	ldr	r3, [pc, #16]	; (8006048 <HAL_RCC_ClockConfig+0x240>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 030f 	and.w	r3, r3, #15
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	429a      	cmp	r2, r3
 8006042:	d005      	beq.n	8006050 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e086      	b.n	8006156 <HAL_RCC_ClockConfig+0x34e>
 8006048:	52002000 	.word	0x52002000
 800604c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0304 	and.w	r3, r3, #4
 8006058:	2b00      	cmp	r3, #0
 800605a:	d010      	beq.n	800607e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691a      	ldr	r2, [r3, #16]
 8006060:	4b3f      	ldr	r3, [pc, #252]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006068:	429a      	cmp	r2, r3
 800606a:	d208      	bcs.n	800607e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800606c:	4b3c      	ldr	r3, [pc, #240]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	4939      	ldr	r1, [pc, #228]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 800607a:	4313      	orrs	r3, r2
 800607c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	d010      	beq.n	80060ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	695a      	ldr	r2, [r3, #20]
 800608e:	4b34      	ldr	r3, [pc, #208]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006096:	429a      	cmp	r2, r3
 8006098:	d208      	bcs.n	80060ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800609a:	4b31      	ldr	r3, [pc, #196]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	695b      	ldr	r3, [r3, #20]
 80060a6:	492e      	ldr	r1, [pc, #184]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d010      	beq.n	80060da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	699a      	ldr	r2, [r3, #24]
 80060bc:	4b28      	ldr	r3, [pc, #160]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d208      	bcs.n	80060da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060c8:	4b25      	ldr	r3, [pc, #148]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	699b      	ldr	r3, [r3, #24]
 80060d4:	4922      	ldr	r1, [pc, #136]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d010      	beq.n	8006108 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	4b1d      	ldr	r3, [pc, #116]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d208      	bcs.n	8006108 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80060f6:	4b1a      	ldr	r3, [pc, #104]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	4917      	ldr	r1, [pc, #92]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 8006104:	4313      	orrs	r3, r2
 8006106:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006108:	f000 f834 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 800610c:	4602      	mov	r2, r0
 800610e:	4b14      	ldr	r3, [pc, #80]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	0a1b      	lsrs	r3, r3, #8
 8006114:	f003 030f 	and.w	r3, r3, #15
 8006118:	4912      	ldr	r1, [pc, #72]	; (8006164 <HAL_RCC_ClockConfig+0x35c>)
 800611a:	5ccb      	ldrb	r3, [r1, r3]
 800611c:	f003 031f 	and.w	r3, r3, #31
 8006120:	fa22 f303 	lsr.w	r3, r2, r3
 8006124:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <HAL_RCC_ClockConfig+0x358>)
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	4a0d      	ldr	r2, [pc, #52]	; (8006164 <HAL_RCC_ClockConfig+0x35c>)
 8006130:	5cd3      	ldrb	r3, [r2, r3]
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	fa22 f303 	lsr.w	r3, r2, r3
 800613c:	4a0a      	ldr	r2, [pc, #40]	; (8006168 <HAL_RCC_ClockConfig+0x360>)
 800613e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <HAL_RCC_ClockConfig+0x364>)
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006146:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <HAL_RCC_ClockConfig+0x368>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7fc f840 	bl	80021d0 <HAL_InitTick>
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006154:	7bfb      	ldrb	r3, [r7, #15]
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	58024400 	.word	0x58024400
 8006164:	0800c0d8 	.word	0x0800c0d8
 8006168:	24000004 	.word	0x24000004
 800616c:	24000000 	.word	0x24000000
 8006170:	24000008 	.word	0x24000008

08006174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006174:	b480      	push	{r7}
 8006176:	b089      	sub	sp, #36	; 0x24
 8006178:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800617a:	4bb3      	ldr	r3, [pc, #716]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006182:	2b18      	cmp	r3, #24
 8006184:	f200 8155 	bhi.w	8006432 <HAL_RCC_GetSysClockFreq+0x2be>
 8006188:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <HAL_RCC_GetSysClockFreq+0x1c>)
 800618a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618e:	bf00      	nop
 8006190:	080061f5 	.word	0x080061f5
 8006194:	08006433 	.word	0x08006433
 8006198:	08006433 	.word	0x08006433
 800619c:	08006433 	.word	0x08006433
 80061a0:	08006433 	.word	0x08006433
 80061a4:	08006433 	.word	0x08006433
 80061a8:	08006433 	.word	0x08006433
 80061ac:	08006433 	.word	0x08006433
 80061b0:	0800621b 	.word	0x0800621b
 80061b4:	08006433 	.word	0x08006433
 80061b8:	08006433 	.word	0x08006433
 80061bc:	08006433 	.word	0x08006433
 80061c0:	08006433 	.word	0x08006433
 80061c4:	08006433 	.word	0x08006433
 80061c8:	08006433 	.word	0x08006433
 80061cc:	08006433 	.word	0x08006433
 80061d0:	08006221 	.word	0x08006221
 80061d4:	08006433 	.word	0x08006433
 80061d8:	08006433 	.word	0x08006433
 80061dc:	08006433 	.word	0x08006433
 80061e0:	08006433 	.word	0x08006433
 80061e4:	08006433 	.word	0x08006433
 80061e8:	08006433 	.word	0x08006433
 80061ec:	08006433 	.word	0x08006433
 80061f0:	08006227 	.word	0x08006227
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061f4:	4b94      	ldr	r3, [pc, #592]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0320 	and.w	r3, r3, #32
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d009      	beq.n	8006214 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006200:	4b91      	ldr	r3, [pc, #580]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	08db      	lsrs	r3, r3, #3
 8006206:	f003 0303 	and.w	r3, r3, #3
 800620a:	4a90      	ldr	r2, [pc, #576]	; (800644c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800620c:	fa22 f303 	lsr.w	r3, r2, r3
 8006210:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006212:	e111      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006214:	4b8d      	ldr	r3, [pc, #564]	; (800644c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006216:	61bb      	str	r3, [r7, #24]
      break;
 8006218:	e10e      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800621a:	4b8d      	ldr	r3, [pc, #564]	; (8006450 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800621c:	61bb      	str	r3, [r7, #24]
      break;
 800621e:	e10b      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006220:	4b8c      	ldr	r3, [pc, #560]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006222:	61bb      	str	r3, [r7, #24]
      break;
 8006224:	e108      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006226:	4b88      	ldr	r3, [pc, #544]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006230:	4b85      	ldr	r3, [pc, #532]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006234:	091b      	lsrs	r3, r3, #4
 8006236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800623c:	4b82      	ldr	r3, [pc, #520]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006246:	4b80      	ldr	r3, [pc, #512]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624a:	08db      	lsrs	r3, r3, #3
 800624c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	fb02 f303 	mul.w	r3, r2, r3
 8006256:	ee07 3a90 	vmov	s15, r3
 800625a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800625e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80e1 	beq.w	800642c <HAL_RCC_GetSysClockFreq+0x2b8>
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b02      	cmp	r3, #2
 800626e:	f000 8083 	beq.w	8006378 <HAL_RCC_GetSysClockFreq+0x204>
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	2b02      	cmp	r3, #2
 8006276:	f200 80a1 	bhi.w	80063bc <HAL_RCC_GetSysClockFreq+0x248>
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_RCC_GetSysClockFreq+0x114>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d056      	beq.n	8006334 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006286:	e099      	b.n	80063bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006288:	4b6f      	ldr	r3, [pc, #444]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0320 	and.w	r3, r3, #32
 8006290:	2b00      	cmp	r3, #0
 8006292:	d02d      	beq.n	80062f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006294:	4b6c      	ldr	r3, [pc, #432]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	08db      	lsrs	r3, r3, #3
 800629a:	f003 0303 	and.w	r3, r3, #3
 800629e:	4a6b      	ldr	r2, [pc, #428]	; (800644c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062a0:	fa22 f303 	lsr.w	r3, r2, r3
 80062a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	ee07 3a90 	vmov	s15, r3
 80062ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062be:	4b62      	ldr	r3, [pc, #392]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c6:	ee07 3a90 	vmov	s15, r3
 80062ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80062d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80062ee:	e087      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800645c <HAL_RCC_GetSysClockFreq+0x2e8>
 80062fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006302:	4b51      	ldr	r3, [pc, #324]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800630a:	ee07 3a90 	vmov	s15, r3
 800630e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006312:	ed97 6a02 	vldr	s12, [r7, #8]
 8006316:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800631a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006322:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800632a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006332:	e065      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006460 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006346:	4b40      	ldr	r3, [pc, #256]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634e:	ee07 3a90 	vmov	s15, r3
 8006352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006356:	ed97 6a02 	vldr	s12, [r7, #8]
 800635a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006458 <HAL_RCC_GetSysClockFreq+0x2e4>
 800635e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800636a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006376:	e043      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	ee07 3a90 	vmov	s15, r3
 800637e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006382:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006464 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800638a:	4b2f      	ldr	r3, [pc, #188]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800638c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006392:	ee07 3a90 	vmov	s15, r3
 8006396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800639a:	ed97 6a02 	vldr	s12, [r7, #8]
 800639e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063ba:	e021      	b.n	8006400 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006460 <HAL_RCC_GetSysClockFreq+0x2ec>
 80063ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ce:	4b1e      	ldr	r3, [pc, #120]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063de:	ed97 6a02 	vldr	s12, [r7, #8]
 80063e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006458 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80063fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006400:	4b11      	ldr	r3, [pc, #68]	; (8006448 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006404:	0a5b      	lsrs	r3, r3, #9
 8006406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640a:	3301      	adds	r3, #1
 800640c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006418:	edd7 6a07 	vldr	s13, [r7, #28]
 800641c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006420:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006424:	ee17 3a90 	vmov	r3, s15
 8006428:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800642a:	e005      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	61bb      	str	r3, [r7, #24]
      break;
 8006430:	e002      	b.n	8006438 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006434:	61bb      	str	r3, [r7, #24]
      break;
 8006436:	bf00      	nop
  }

  return sysclockfreq;
 8006438:	69bb      	ldr	r3, [r7, #24]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3724      	adds	r7, #36	; 0x24
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	58024400 	.word	0x58024400
 800644c:	03d09000 	.word	0x03d09000
 8006450:	003d0900 	.word	0x003d0900
 8006454:	017d7840 	.word	0x017d7840
 8006458:	46000000 	.word	0x46000000
 800645c:	4c742400 	.word	0x4c742400
 8006460:	4a742400 	.word	0x4a742400
 8006464:	4bbebc20 	.word	0x4bbebc20

08006468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800646e:	f7ff fe81 	bl	8006174 <HAL_RCC_GetSysClockFreq>
 8006472:	4602      	mov	r2, r0
 8006474:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006476:	699b      	ldr	r3, [r3, #24]
 8006478:	0a1b      	lsrs	r3, r3, #8
 800647a:	f003 030f 	and.w	r3, r3, #15
 800647e:	490f      	ldr	r1, [pc, #60]	; (80064bc <HAL_RCC_GetHCLKFreq+0x54>)
 8006480:	5ccb      	ldrb	r3, [r1, r3]
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800648e:	699b      	ldr	r3, [r3, #24]
 8006490:	f003 030f 	and.w	r3, r3, #15
 8006494:	4a09      	ldr	r2, [pc, #36]	; (80064bc <HAL_RCC_GetHCLKFreq+0x54>)
 8006496:	5cd3      	ldrb	r3, [r2, r3]
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	fa22 f303 	lsr.w	r3, r2, r3
 80064a2:	4a07      	ldr	r2, [pc, #28]	; (80064c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80064a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064a6:	4a07      	ldr	r2, [pc, #28]	; (80064c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80064ac:	4b04      	ldr	r3, [pc, #16]	; (80064c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80064ae:	681b      	ldr	r3, [r3, #0]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	58024400 	.word	0x58024400
 80064bc:	0800c0d8 	.word	0x0800c0d8
 80064c0:	24000004 	.word	0x24000004
 80064c4:	24000000 	.word	0x24000000

080064c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80064cc:	f7ff ffcc 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064d0:	4602      	mov	r2, r0
 80064d2:	4b06      	ldr	r3, [pc, #24]	; (80064ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	091b      	lsrs	r3, r3, #4
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	4904      	ldr	r1, [pc, #16]	; (80064f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80064de:	5ccb      	ldrb	r3, [r1, r3]
 80064e0:	f003 031f 	and.w	r3, r3, #31
 80064e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	58024400 	.word	0x58024400
 80064f0:	0800c0d8 	.word	0x0800c0d8

080064f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80064f8:	f7ff ffb6 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 80064fc:	4602      	mov	r2, r0
 80064fe:	4b06      	ldr	r3, [pc, #24]	; (8006518 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	0a1b      	lsrs	r3, r3, #8
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	4904      	ldr	r1, [pc, #16]	; (800651c <HAL_RCC_GetPCLK2Freq+0x28>)
 800650a:	5ccb      	ldrb	r3, [r1, r3]
 800650c:	f003 031f 	and.w	r3, r3, #31
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006514:	4618      	mov	r0, r3
 8006516:	bd80      	pop	{r7, pc}
 8006518:	58024400 	.word	0x58024400
 800651c:	0800c0d8 	.word	0x0800c0d8

08006520 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006524:	b0c6      	sub	sp, #280	; 0x118
 8006526:	af00      	add	r7, sp, #0
 8006528:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800652c:	2300      	movs	r3, #0
 800652e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006532:	2300      	movs	r3, #0
 8006534:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006544:	2500      	movs	r5, #0
 8006546:	ea54 0305 	orrs.w	r3, r4, r5
 800654a:	d049      	beq.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800654c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006556:	d02f      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006558:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800655c:	d828      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800655e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006562:	d01a      	beq.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006564:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006568:	d822      	bhi.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800656e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006572:	d007      	beq.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006574:	e01c      	b.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006576:	4bab      	ldr	r3, [pc, #684]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	4aaa      	ldr	r2, [pc, #680]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800657c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006580:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006582:	e01a      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006588:	3308      	adds	r3, #8
 800658a:	2102      	movs	r1, #2
 800658c:	4618      	mov	r0, r3
 800658e:	f002 fa49 	bl	8008a24 <RCCEx_PLL2_Config>
 8006592:	4603      	mov	r3, r0
 8006594:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006598:	e00f      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800659a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659e:	3328      	adds	r3, #40	; 0x28
 80065a0:	2102      	movs	r1, #2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f002 faf0 	bl	8008b88 <RCCEx_PLL3_Config>
 80065a8:	4603      	mov	r3, r0
 80065aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80065ae:	e004      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065b6:	e000      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80065b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10a      	bne.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065c2:	4b98      	ldr	r3, [pc, #608]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80065ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d0:	4a94      	ldr	r2, [pc, #592]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80065d2:	430b      	orrs	r3, r1
 80065d4:	6513      	str	r3, [r2, #80]	; 0x50
 80065d6:	e003      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065e8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80065ec:	f04f 0900 	mov.w	r9, #0
 80065f0:	ea58 0309 	orrs.w	r3, r8, r9
 80065f4:	d047      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d82a      	bhi.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006600:	a201      	add	r2, pc, #4	; (adr r2, 8006608 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006606:	bf00      	nop
 8006608:	0800661d 	.word	0x0800661d
 800660c:	0800662b 	.word	0x0800662b
 8006610:	08006641 	.word	0x08006641
 8006614:	0800665f 	.word	0x0800665f
 8006618:	0800665f 	.word	0x0800665f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800661c:	4b81      	ldr	r3, [pc, #516]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800661e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006620:	4a80      	ldr	r2, [pc, #512]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006626:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006628:	e01a      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800662a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662e:	3308      	adds	r3, #8
 8006630:	2100      	movs	r1, #0
 8006632:	4618      	mov	r0, r3
 8006634:	f002 f9f6 	bl	8008a24 <RCCEx_PLL2_Config>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800663e:	e00f      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006644:	3328      	adds	r3, #40	; 0x28
 8006646:	2100      	movs	r1, #0
 8006648:	4618      	mov	r0, r3
 800664a:	f002 fa9d 	bl	8008b88 <RCCEx_PLL3_Config>
 800664e:	4603      	mov	r3, r0
 8006650:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006654:	e004      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800665c:	e000      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800665e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006660:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10a      	bne.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006668:	4b6e      	ldr	r3, [pc, #440]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800666a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800666c:	f023 0107 	bic.w	r1, r3, #7
 8006670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006676:	4a6b      	ldr	r2, [pc, #428]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006678:	430b      	orrs	r3, r1
 800667a:	6513      	str	r3, [r2, #80]	; 0x50
 800667c:	e003      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006682:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8006692:	f04f 0b00 	mov.w	fp, #0
 8006696:	ea5a 030b 	orrs.w	r3, sl, fp
 800669a:	d05b      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066a4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80066a8:	d03b      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80066aa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80066ae:	d834      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066b4:	d037      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80066b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066ba:	d82e      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066c0:	d033      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80066c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80066c6:	d828      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066cc:	d01a      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80066ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066d2:	d822      	bhi.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80066d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066dc:	d007      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80066de:	e01c      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e0:	4b50      	ldr	r3, [pc, #320]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4a4f      	ldr	r2, [pc, #316]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80066e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80066ec:	e01e      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f2:	3308      	adds	r3, #8
 80066f4:	2100      	movs	r1, #0
 80066f6:	4618      	mov	r0, r3
 80066f8:	f002 f994 	bl	8008a24 <RCCEx_PLL2_Config>
 80066fc:	4603      	mov	r3, r0
 80066fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006702:	e013      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006704:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006708:	3328      	adds	r3, #40	; 0x28
 800670a:	2100      	movs	r1, #0
 800670c:	4618      	mov	r0, r3
 800670e:	f002 fa3b 	bl	8008b88 <RCCEx_PLL3_Config>
 8006712:	4603      	mov	r3, r0
 8006714:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006718:	e008      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800671a:	2301      	movs	r3, #1
 800671c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006720:	e004      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006722:	bf00      	nop
 8006724:	e002      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006726:	bf00      	nop
 8006728:	e000      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800672a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800672c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10b      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006734:	4b3b      	ldr	r3, [pc, #236]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006738:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800673c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006740:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006744:	4a37      	ldr	r2, [pc, #220]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006746:	430b      	orrs	r3, r1
 8006748:	6593      	str	r3, [r2, #88]	; 0x58
 800674a:	e003      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006750:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006760:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006764:	2300      	movs	r3, #0
 8006766:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800676a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800676e:	460b      	mov	r3, r1
 8006770:	4313      	orrs	r3, r2
 8006772:	d05d      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006778:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800677c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006780:	d03b      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006782:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006786:	d834      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006788:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800678c:	d037      	beq.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800678e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006792:	d82e      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006794:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006798:	d033      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800679a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800679e:	d828      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80067a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067a4:	d01a      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80067a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067aa:	d822      	bhi.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067b4:	d007      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80067b6:	e01c      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067b8:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	4a19      	ldr	r2, [pc, #100]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80067be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067c4:	e01e      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ca:	3308      	adds	r3, #8
 80067cc:	2100      	movs	r1, #0
 80067ce:	4618      	mov	r0, r3
 80067d0:	f002 f928 	bl	8008a24 <RCCEx_PLL2_Config>
 80067d4:	4603      	mov	r3, r0
 80067d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80067da:	e013      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e0:	3328      	adds	r3, #40	; 0x28
 80067e2:	2100      	movs	r1, #0
 80067e4:	4618      	mov	r0, r3
 80067e6:	f002 f9cf 	bl	8008b88 <RCCEx_PLL3_Config>
 80067ea:	4603      	mov	r3, r0
 80067ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067f0:	e008      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80067f8:	e004      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80067fa:	bf00      	nop
 80067fc:	e002      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80067fe:	bf00      	nop
 8006800:	e000      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006804:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10d      	bne.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800680c:	4b05      	ldr	r3, [pc, #20]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800680e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006810:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006818:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800681c:	4a01      	ldr	r2, [pc, #4]	; (8006824 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800681e:	430b      	orrs	r3, r1
 8006820:	6593      	str	r3, [r2, #88]	; 0x58
 8006822:	e005      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006828:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800682c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800683c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006840:	2300      	movs	r3, #0
 8006842:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006846:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800684a:	460b      	mov	r3, r1
 800684c:	4313      	orrs	r3, r2
 800684e:	d03a      	beq.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8006850:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006856:	2b30      	cmp	r3, #48	; 0x30
 8006858:	d01f      	beq.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800685a:	2b30      	cmp	r3, #48	; 0x30
 800685c:	d819      	bhi.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800685e:	2b20      	cmp	r3, #32
 8006860:	d00c      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006862:	2b20      	cmp	r3, #32
 8006864:	d815      	bhi.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d019      	beq.n	800689e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800686a:	2b10      	cmp	r3, #16
 800686c:	d111      	bne.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800686e:	4baa      	ldr	r3, [pc, #680]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	4aa9      	ldr	r2, [pc, #676]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006878:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800687a:	e011      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800687c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006880:	3308      	adds	r3, #8
 8006882:	2102      	movs	r1, #2
 8006884:	4618      	mov	r0, r3
 8006886:	f002 f8cd 	bl	8008a24 <RCCEx_PLL2_Config>
 800688a:	4603      	mov	r3, r0
 800688c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006890:	e006      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006892:	2301      	movs	r3, #1
 8006894:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006898:	e002      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800689e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10a      	bne.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80068a8:	4b9b      	ldr	r3, [pc, #620]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b6:	4a98      	ldr	r2, [pc, #608]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80068b8:	430b      	orrs	r3, r1
 80068ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80068bc:	e003      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068c2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80068c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80068d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068d6:	2300      	movs	r3, #0
 80068d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80068dc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80068e0:	460b      	mov	r3, r1
 80068e2:	4313      	orrs	r3, r2
 80068e4:	d051      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80068e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068f0:	d035      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80068f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068f6:	d82e      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80068f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068fc:	d031      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80068fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006902:	d828      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006904:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006908:	d01a      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800690a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800690e:	d822      	bhi.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006914:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006918:	d007      	beq.n	800692a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800691a:	e01c      	b.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800691c:	4b7e      	ldr	r3, [pc, #504]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	4a7d      	ldr	r2, [pc, #500]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006926:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006928:	e01c      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800692a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800692e:	3308      	adds	r3, #8
 8006930:	2100      	movs	r1, #0
 8006932:	4618      	mov	r0, r3
 8006934:	f002 f876 	bl	8008a24 <RCCEx_PLL2_Config>
 8006938:	4603      	mov	r3, r0
 800693a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800693e:	e011      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006944:	3328      	adds	r3, #40	; 0x28
 8006946:	2100      	movs	r1, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f002 f91d 	bl	8008b88 <RCCEx_PLL3_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006954:	e006      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800695c:	e002      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800695e:	bf00      	nop
 8006960:	e000      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8006962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006964:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10a      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800696c:	4b6a      	ldr	r3, [pc, #424]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800696e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006970:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697a:	4a67      	ldr	r2, [pc, #412]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800697c:	430b      	orrs	r3, r1
 800697e:	6513      	str	r3, [r2, #80]	; 0x50
 8006980:	e003      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006982:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006986:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006992:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006996:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800699a:	2300      	movs	r3, #0
 800699c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069a0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80069a4:	460b      	mov	r3, r1
 80069a6:	4313      	orrs	r3, r2
 80069a8:	d053      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80069aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069b4:	d033      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80069b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80069ba:	d82c      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069c0:	d02f      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80069c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069c6:	d826      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069cc:	d02b      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80069ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80069d2:	d820      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069d8:	d012      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80069da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069de:	d81a      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d022      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80069e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069e8:	d115      	bne.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069ee:	3308      	adds	r3, #8
 80069f0:	2101      	movs	r1, #1
 80069f2:	4618      	mov	r0, r3
 80069f4:	f002 f816 	bl	8008a24 <RCCEx_PLL2_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80069fe:	e015      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a04:	3328      	adds	r3, #40	; 0x28
 8006a06:	2101      	movs	r1, #1
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f002 f8bd 	bl	8008b88 <RCCEx_PLL3_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006a14:	e00a      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a1c:	e006      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a1e:	bf00      	nop
 8006a20:	e004      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a22:	bf00      	nop
 8006a24:	e002      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a26:	bf00      	nop
 8006a28:	e000      	b.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10a      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006a34:	4b38      	ldr	r3, [pc, #224]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a42:	4a35      	ldr	r2, [pc, #212]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6513      	str	r3, [r2, #80]	; 0x50
 8006a48:	e003      	b.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006a62:	2300      	movs	r3, #0
 8006a64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006a68:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	d058      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a7e:	d033      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8006a80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a84:	d82c      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a8a:	d02f      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a90:	d826      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a96:	d02b      	beq.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006a98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a9c:	d820      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa2:	d012      	beq.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aa8:	d81a      	bhi.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d022      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006aae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ab2:	d115      	bne.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab8:	3308      	adds	r3, #8
 8006aba:	2101      	movs	r1, #1
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 ffb1 	bl	8008a24 <RCCEx_PLL2_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ac8:	e015      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ace:	3328      	adds	r3, #40	; 0x28
 8006ad0:	2101      	movs	r1, #1
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f002 f858 	bl	8008b88 <RCCEx_PLL3_Config>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006ade:	e00a      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ae6:	e006      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006ae8:	bf00      	nop
 8006aea:	e004      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006aec:	bf00      	nop
 8006aee:	e002      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006af0:	bf00      	nop
 8006af2:	e000      	b.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006af6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d10e      	bne.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006afe:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b0e:	4a02      	ldr	r2, [pc, #8]	; (8006b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006b10:	430b      	orrs	r3, r1
 8006b12:	6593      	str	r3, [r2, #88]	; 0x58
 8006b14:	e006      	b.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006b16:	bf00      	nop
 8006b18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006b30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b34:	2300      	movs	r3, #0
 8006b36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006b3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4313      	orrs	r3, r2
 8006b42:	d037      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b4e:	d00e      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8006b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b54:	d816      	bhi.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d018      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006b5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b5e:	d111      	bne.n	8006b84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b60:	4bc4      	ldr	r3, [pc, #784]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b64:	4ac3      	ldr	r2, [pc, #780]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b6c:	e00f      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b72:	3308      	adds	r3, #8
 8006b74:	2101      	movs	r1, #1
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 ff54 	bl	8008a24 <RCCEx_PLL2_Config>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006b82:	e004      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b8a:	e000      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006b96:	4bb7      	ldr	r3, [pc, #732]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba4:	4ab3      	ldr	r2, [pc, #716]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	6513      	str	r3, [r2, #80]	; 0x50
 8006baa:	e003      	b.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bbc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006bc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006bce:	460b      	mov	r3, r1
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	d039      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d81c      	bhi.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006bde:	a201      	add	r2, pc, #4	; (adr r2, 8006be4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8006be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be4:	08006c21 	.word	0x08006c21
 8006be8:	08006bf5 	.word	0x08006bf5
 8006bec:	08006c03 	.word	0x08006c03
 8006bf0:	08006c21 	.word	0x08006c21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bf4:	4b9f      	ldr	r3, [pc, #636]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	4a9e      	ldr	r2, [pc, #632]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c00:	e00f      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c06:	3308      	adds	r3, #8
 8006c08:	2102      	movs	r1, #2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 ff0a 	bl	8008a24 <RCCEx_PLL2_Config>
 8006c10:	4603      	mov	r3, r0
 8006c12:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006c16:	e004      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c1e:	e000      	b.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8006c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006c2a:	4b92      	ldr	r3, [pc, #584]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c2e:	f023 0103 	bic.w	r1, r3, #3
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c38:	4a8e      	ldr	r2, [pc, #568]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006c3a:	430b      	orrs	r3, r1
 8006c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c3e:	e003      	b.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006c48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c5e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4313      	orrs	r3, r2
 8006c66:	f000 8099 	beq.w	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c6a:	4b83      	ldr	r3, [pc, #524]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a82      	ldr	r2, [pc, #520]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006c76:	f7fb faf5 	bl	8002264 <HAL_GetTick>
 8006c7a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c7e:	e00b      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c80:	f7fb faf0 	bl	8002264 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b64      	cmp	r3, #100	; 0x64
 8006c8e:	d903      	bls.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c96:	e005      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c98:	4b77      	ldr	r3, [pc, #476]	; (8006e78 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d0ed      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006ca4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d173      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006cac:	4b71      	ldr	r3, [pc, #452]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cb4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cb8:	4053      	eors	r3, r2
 8006cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d015      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cc2:	4b6c      	ldr	r3, [pc, #432]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006cce:	4b69      	ldr	r3, [pc, #420]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd2:	4a68      	ldr	r2, [pc, #416]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006cda:	4b66      	ldr	r3, [pc, #408]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cde:	4a65      	ldr	r2, [pc, #404]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006ce6:	4a63      	ldr	r2, [pc, #396]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006ce8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006cec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cfa:	d118      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fb fab2 	bl	8002264 <HAL_GetTick>
 8006d00:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d04:	e00d      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d06:	f7fb faad 	bl	8002264 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006d10:	1ad2      	subs	r2, r2, r3
 8006d12:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d903      	bls.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006d20:	e005      	b.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d22:	4b54      	ldr	r3, [pc, #336]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0eb      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8006d2e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d129      	bne.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d46:	d10e      	bne.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006d48:	4b4a      	ldr	r3, [pc, #296]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8006d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d58:	091a      	lsrs	r2, r3, #4
 8006d5a:	4b48      	ldr	r3, [pc, #288]	; (8006e7c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	4a45      	ldr	r2, [pc, #276]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d60:	430b      	orrs	r3, r1
 8006d62:	6113      	str	r3, [r2, #16]
 8006d64:	e005      	b.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006d66:	4b43      	ldr	r3, [pc, #268]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	4a42      	ldr	r2, [pc, #264]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006d70:	6113      	str	r3, [r2, #16]
 8006d72:	4b40      	ldr	r3, [pc, #256]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d74:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d82:	4a3c      	ldr	r2, [pc, #240]	; (8006e74 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006d84:	430b      	orrs	r3, r1
 8006d86:	6713      	str	r3, [r2, #112]	; 0x70
 8006d88:	e008      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006d8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006d92:	e003      	b.n	8006d9c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da4:	f002 0301 	and.w	r3, r2, #1
 8006da8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dac:	2300      	movs	r3, #0
 8006dae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006db2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006db6:	460b      	mov	r3, r1
 8006db8:	4313      	orrs	r3, r2
 8006dba:	f000 808f 	beq.w	8006edc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dc4:	2b28      	cmp	r3, #40	; 0x28
 8006dc6:	d871      	bhi.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8006dc8:	a201      	add	r2, pc, #4	; (adr r2, 8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8006dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dce:	bf00      	nop
 8006dd0:	08006eb5 	.word	0x08006eb5
 8006dd4:	08006ead 	.word	0x08006ead
 8006dd8:	08006ead 	.word	0x08006ead
 8006ddc:	08006ead 	.word	0x08006ead
 8006de0:	08006ead 	.word	0x08006ead
 8006de4:	08006ead 	.word	0x08006ead
 8006de8:	08006ead 	.word	0x08006ead
 8006dec:	08006ead 	.word	0x08006ead
 8006df0:	08006e81 	.word	0x08006e81
 8006df4:	08006ead 	.word	0x08006ead
 8006df8:	08006ead 	.word	0x08006ead
 8006dfc:	08006ead 	.word	0x08006ead
 8006e00:	08006ead 	.word	0x08006ead
 8006e04:	08006ead 	.word	0x08006ead
 8006e08:	08006ead 	.word	0x08006ead
 8006e0c:	08006ead 	.word	0x08006ead
 8006e10:	08006e97 	.word	0x08006e97
 8006e14:	08006ead 	.word	0x08006ead
 8006e18:	08006ead 	.word	0x08006ead
 8006e1c:	08006ead 	.word	0x08006ead
 8006e20:	08006ead 	.word	0x08006ead
 8006e24:	08006ead 	.word	0x08006ead
 8006e28:	08006ead 	.word	0x08006ead
 8006e2c:	08006ead 	.word	0x08006ead
 8006e30:	08006eb5 	.word	0x08006eb5
 8006e34:	08006ead 	.word	0x08006ead
 8006e38:	08006ead 	.word	0x08006ead
 8006e3c:	08006ead 	.word	0x08006ead
 8006e40:	08006ead 	.word	0x08006ead
 8006e44:	08006ead 	.word	0x08006ead
 8006e48:	08006ead 	.word	0x08006ead
 8006e4c:	08006ead 	.word	0x08006ead
 8006e50:	08006eb5 	.word	0x08006eb5
 8006e54:	08006ead 	.word	0x08006ead
 8006e58:	08006ead 	.word	0x08006ead
 8006e5c:	08006ead 	.word	0x08006ead
 8006e60:	08006ead 	.word	0x08006ead
 8006e64:	08006ead 	.word	0x08006ead
 8006e68:	08006ead 	.word	0x08006ead
 8006e6c:	08006ead 	.word	0x08006ead
 8006e70:	08006eb5 	.word	0x08006eb5
 8006e74:	58024400 	.word	0x58024400
 8006e78:	58024800 	.word	0x58024800
 8006e7c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e84:	3308      	adds	r3, #8
 8006e86:	2101      	movs	r1, #1
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 fdcb 	bl	8008a24 <RCCEx_PLL2_Config>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006e94:	e00f      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e9a:	3328      	adds	r3, #40	; 0x28
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f001 fe72 	bl	8008b88 <RCCEx_PLL3_Config>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006eaa:	e004      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006eb2:	e000      	b.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10a      	bne.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ebe:	4bbf      	ldr	r3, [pc, #764]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ec2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8006ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ecc:	4abb      	ldr	r2, [pc, #748]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ece:	430b      	orrs	r3, r1
 8006ed0:	6553      	str	r3, [r2, #84]	; 0x54
 8006ed2:	e003      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ed8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee4:	f002 0302 	and.w	r3, r2, #2
 8006ee8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006eec:	2300      	movs	r3, #0
 8006eee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006ef2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	d041      	beq.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006efc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d824      	bhi.n	8006f50 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006f06:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f59 	.word	0x08006f59
 8006f10:	08006f25 	.word	0x08006f25
 8006f14:	08006f3b 	.word	0x08006f3b
 8006f18:	08006f59 	.word	0x08006f59
 8006f1c:	08006f59 	.word	0x08006f59
 8006f20:	08006f59 	.word	0x08006f59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f28:	3308      	adds	r3, #8
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f001 fd79 	bl	8008a24 <RCCEx_PLL2_Config>
 8006f32:	4603      	mov	r3, r0
 8006f34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f38:	e00f      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f3e:	3328      	adds	r3, #40	; 0x28
 8006f40:	2101      	movs	r1, #1
 8006f42:	4618      	mov	r0, r3
 8006f44:	f001 fe20 	bl	8008b88 <RCCEx_PLL3_Config>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006f4e:	e004      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f56:	e000      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006f58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d10a      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f62:	4b96      	ldr	r3, [pc, #600]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f66:	f023 0107 	bic.w	r1, r3, #7
 8006f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f70:	4a92      	ldr	r2, [pc, #584]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006f72:	430b      	orrs	r3, r1
 8006f74:	6553      	str	r3, [r2, #84]	; 0x54
 8006f76:	e003      	b.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f002 0304 	and.w	r3, r2, #4
 8006f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f90:	2300      	movs	r3, #0
 8006f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006f96:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f9a:	460b      	mov	r3, r1
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	d044      	beq.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa8:	2b05      	cmp	r3, #5
 8006faa:	d825      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006fac:	a201      	add	r2, pc, #4	; (adr r2, 8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb2:	bf00      	nop
 8006fb4:	08007001 	.word	0x08007001
 8006fb8:	08006fcd 	.word	0x08006fcd
 8006fbc:	08006fe3 	.word	0x08006fe3
 8006fc0:	08007001 	.word	0x08007001
 8006fc4:	08007001 	.word	0x08007001
 8006fc8:	08007001 	.word	0x08007001
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f001 fd25 	bl	8008a24 <RCCEx_PLL2_Config>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006fe0:	e00f      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe6:	3328      	adds	r3, #40	; 0x28
 8006fe8:	2101      	movs	r1, #1
 8006fea:	4618      	mov	r0, r3
 8006fec:	f001 fdcc 	bl	8008b88 <RCCEx_PLL3_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ff6:	e004      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ffe:	e000      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8007000:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007002:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800700a:	4b6c      	ldr	r3, [pc, #432]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800700c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700e:	f023 0107 	bic.w	r1, r3, #7
 8007012:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701a:	4a68      	ldr	r2, [pc, #416]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800701c:	430b      	orrs	r3, r1
 800701e:	6593      	str	r3, [r2, #88]	; 0x58
 8007020:	e003      	b.n	800702a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007022:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007026:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800702a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f002 0320 	and.w	r3, r2, #32
 8007036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800703a:	2300      	movs	r3, #0
 800703c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007040:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007044:	460b      	mov	r3, r1
 8007046:	4313      	orrs	r3, r2
 8007048:	d055      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800704a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800704e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007056:	d033      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8007058:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800705c:	d82c      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800705e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007062:	d02f      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8007064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007068:	d826      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800706a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800706e:	d02b      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8007070:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007074:	d820      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800707a:	d012      	beq.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800707c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007080:	d81a      	bhi.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007082:	2b00      	cmp	r3, #0
 8007084:	d022      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8007086:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800708a:	d115      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800708c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007090:	3308      	adds	r3, #8
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f001 fcc5 	bl	8008a24 <RCCEx_PLL2_Config>
 800709a:	4603      	mov	r3, r0
 800709c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80070a0:	e015      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80070a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a6:	3328      	adds	r3, #40	; 0x28
 80070a8:	2102      	movs	r1, #2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f001 fd6c 	bl	8008b88 <RCCEx_PLL3_Config>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80070b6:	e00a      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80070be:	e006      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070c0:	bf00      	nop
 80070c2:	e004      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070c4:	bf00      	nop
 80070c6:	e002      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070c8:	bf00      	nop
 80070ca:	e000      	b.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80070cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10b      	bne.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070d6:	4b39      	ldr	r3, [pc, #228]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80070de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070e6:	4a35      	ldr	r2, [pc, #212]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6553      	str	r3, [r2, #84]	; 0x54
 80070ec:	e003      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007102:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007106:	2300      	movs	r3, #0
 8007108:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800710c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007110:	460b      	mov	r3, r1
 8007112:	4313      	orrs	r3, r2
 8007114:	d058      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800711a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800711e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007122:	d033      	beq.n	800718c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8007124:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007128:	d82c      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800712a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800712e:	d02f      	beq.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8007130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007134:	d826      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007136:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800713a:	d02b      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800713c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007140:	d820      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8007142:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007146:	d012      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8007148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714c:	d81a      	bhi.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d022      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8007152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007156:	d115      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800715c:	3308      	adds	r3, #8
 800715e:	2100      	movs	r1, #0
 8007160:	4618      	mov	r0, r3
 8007162:	f001 fc5f 	bl	8008a24 <RCCEx_PLL2_Config>
 8007166:	4603      	mov	r3, r0
 8007168:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800716c:	e015      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800716e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007172:	3328      	adds	r3, #40	; 0x28
 8007174:	2102      	movs	r1, #2
 8007176:	4618      	mov	r0, r3
 8007178:	f001 fd06 	bl	8008b88 <RCCEx_PLL3_Config>
 800717c:	4603      	mov	r3, r0
 800717e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007182:	e00a      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800718a:	e006      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800718c:	bf00      	nop
 800718e:	e004      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007190:	bf00      	nop
 8007192:	e002      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007194:	bf00      	nop
 8007196:	e000      	b.n	800719a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8007198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800719a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10e      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80071a2:	4b06      	ldr	r3, [pc, #24]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80071aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80071b2:	4a02      	ldr	r2, [pc, #8]	; (80071bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80071b4:	430b      	orrs	r3, r1
 80071b6:	6593      	str	r3, [r2, #88]	; 0x58
 80071b8:	e006      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80071ba:	bf00      	nop
 80071bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80071c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80071d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071d8:	2300      	movs	r3, #0
 80071da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80071de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80071e2:	460b      	mov	r3, r1
 80071e4:	4313      	orrs	r3, r2
 80071e6:	d055      	beq.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80071e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80071f4:	d033      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80071f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80071fa:	d82c      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80071fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007200:	d02f      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8007202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007206:	d826      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007208:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800720c:	d02b      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800720e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007212:	d820      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007218:	d012      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800721a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800721e:	d81a      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8007220:	2b00      	cmp	r3, #0
 8007222:	d022      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8007224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007228:	d115      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800722a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800722e:	3308      	adds	r3, #8
 8007230:	2100      	movs	r1, #0
 8007232:	4618      	mov	r0, r3
 8007234:	f001 fbf6 	bl	8008a24 <RCCEx_PLL2_Config>
 8007238:	4603      	mov	r3, r0
 800723a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800723e:	e015      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007244:	3328      	adds	r3, #40	; 0x28
 8007246:	2102      	movs	r1, #2
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fc9d 	bl	8008b88 <RCCEx_PLL3_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007254:	e00a      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800725c:	e006      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800725e:	bf00      	nop
 8007260:	e004      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007262:	bf00      	nop
 8007264:	e002      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800726a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10b      	bne.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007274:	4ba0      	ldr	r3, [pc, #640]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007278:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800727c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007280:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007284:	4a9c      	ldr	r2, [pc, #624]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007286:	430b      	orrs	r3, r1
 8007288:	6593      	str	r3, [r2, #88]	; 0x58
 800728a:	e003      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007290:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007294:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	f002 0308 	and.w	r3, r2, #8
 80072a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80072a4:	2300      	movs	r3, #0
 80072a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80072aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80072ae:	460b      	mov	r3, r1
 80072b0:	4313      	orrs	r3, r2
 80072b2:	d01e      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c0:	d10c      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80072c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072c6:	3328      	adds	r3, #40	; 0x28
 80072c8:	2102      	movs	r1, #2
 80072ca:	4618      	mov	r0, r3
 80072cc:	f001 fc5c 	bl	8008b88 <RCCEx_PLL3_Config>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80072dc:	4b86      	ldr	r3, [pc, #536]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ec:	4a82      	ldr	r2, [pc, #520]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80072ee:	430b      	orrs	r3, r1
 80072f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80072f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f002 0310 	and.w	r3, r2, #16
 80072fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007302:	2300      	movs	r3, #0
 8007304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007308:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800730c:	460b      	mov	r3, r1
 800730e:	4313      	orrs	r3, r2
 8007310:	d01e      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800731a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800731e:	d10c      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007320:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007324:	3328      	adds	r3, #40	; 0x28
 8007326:	2102      	movs	r1, #2
 8007328:	4618      	mov	r0, r3
 800732a:	f001 fc2d 	bl	8008b88 <RCCEx_PLL3_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d002      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800733a:	4b6f      	ldr	r3, [pc, #444]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800733c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007342:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800734a:	4a6b      	ldr	r2, [pc, #428]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800734c:	430b      	orrs	r3, r1
 800734e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007358:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800735c:	67bb      	str	r3, [r7, #120]	; 0x78
 800735e:	2300      	movs	r3, #0
 8007360:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007362:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007366:	460b      	mov	r3, r1
 8007368:	4313      	orrs	r3, r2
 800736a:	d03e      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007378:	d022      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800737a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800737e:	d81b      	bhi.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8007384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007388:	d00b      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800738a:	e015      	b.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800738c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007390:	3308      	adds	r3, #8
 8007392:	2100      	movs	r1, #0
 8007394:	4618      	mov	r0, r3
 8007396:	f001 fb45 	bl	8008a24 <RCCEx_PLL2_Config>
 800739a:	4603      	mov	r3, r0
 800739c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80073a0:	e00f      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073a6:	3328      	adds	r3, #40	; 0x28
 80073a8:	2102      	movs	r1, #2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f001 fbec 	bl	8008b88 <RCCEx_PLL3_Config>
 80073b0:	4603      	mov	r3, r0
 80073b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80073b6:	e004      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073b8:	2301      	movs	r3, #1
 80073ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80073be:	e000      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80073c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d10b      	bne.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80073ca:	4b4b      	ldr	r3, [pc, #300]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80073d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073da:	4a47      	ldr	r2, [pc, #284]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80073dc:	430b      	orrs	r3, r1
 80073de:	6593      	str	r3, [r2, #88]	; 0x58
 80073e0:	e003      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80073e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80073f6:	673b      	str	r3, [r7, #112]	; 0x70
 80073f8:	2300      	movs	r3, #0
 80073fa:	677b      	str	r3, [r7, #116]	; 0x74
 80073fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007400:	460b      	mov	r3, r1
 8007402:	4313      	orrs	r3, r2
 8007404:	d03b      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800740a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800740e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007412:	d01f      	beq.n	8007454 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007414:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007418:	d818      	bhi.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800741a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800741e:	d003      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8007420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007424:	d007      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8007426:	e011      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007428:	4b33      	ldr	r3, [pc, #204]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800742a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800742c:	4a32      	ldr	r2, [pc, #200]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800742e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007432:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007434:	e00f      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800743a:	3328      	adds	r3, #40	; 0x28
 800743c:	2101      	movs	r1, #1
 800743e:	4618      	mov	r0, r3
 8007440:	f001 fba2 	bl	8008b88 <RCCEx_PLL3_Config>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800744a:	e004      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007452:	e000      	b.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8007454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007456:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800745a:	2b00      	cmp	r3, #0
 800745c:	d10b      	bne.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800745e:	4b26      	ldr	r3, [pc, #152]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007462:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800746a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800746e:	4a22      	ldr	r2, [pc, #136]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8007470:	430b      	orrs	r3, r1
 8007472:	6553      	str	r3, [r2, #84]	; 0x54
 8007474:	e003      	b.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007476:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800747a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007486:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800748a:	66bb      	str	r3, [r7, #104]	; 0x68
 800748c:	2300      	movs	r3, #0
 800748e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007490:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007494:	460b      	mov	r3, r1
 8007496:	4313      	orrs	r3, r2
 8007498:	d034      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800749a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800749e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d003      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80074a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074a8:	d007      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80074aa:	e011      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074ac:	4b12      	ldr	r3, [pc, #72]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	4a11      	ldr	r2, [pc, #68]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074b8:	e00e      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80074ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074be:	3308      	adds	r3, #8
 80074c0:	2102      	movs	r1, #2
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 faae 	bl	8008a24 <RCCEx_PLL2_Config>
 80074c8:	4603      	mov	r3, r0
 80074ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80074ce:	e003      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80074d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10d      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80074e0:	4b05      	ldr	r3, [pc, #20]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ee:	4a02      	ldr	r2, [pc, #8]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80074f0:	430b      	orrs	r3, r1
 80074f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074f4:	e006      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80074f6:	bf00      	nop
 80074f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007500:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8007510:	663b      	str	r3, [r7, #96]	; 0x60
 8007512:	2300      	movs	r3, #0
 8007514:	667b      	str	r3, [r7, #100]	; 0x64
 8007516:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800751a:	460b      	mov	r3, r1
 800751c:	4313      	orrs	r3, r2
 800751e:	d00c      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007524:	3328      	adds	r3, #40	; 0x28
 8007526:	2102      	movs	r1, #2
 8007528:	4618      	mov	r0, r3
 800752a:	f001 fb2d 	bl	8008b88 <RCCEx_PLL3_Config>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800753a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007546:	65bb      	str	r3, [r7, #88]	; 0x58
 8007548:	2300      	movs	r3, #0
 800754a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800754c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8007550:	460b      	mov	r3, r1
 8007552:	4313      	orrs	r3, r2
 8007554:	d036      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800755a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800755c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007560:	d018      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8007562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007566:	d811      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800756c:	d014      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800756e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007572:	d80b      	bhi.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007574:	2b00      	cmp	r3, #0
 8007576:	d011      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800757c:	d106      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757e:	4bb7      	ldr	r3, [pc, #732]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007582:	4ab6      	ldr	r2, [pc, #728]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007588:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800758a:	e008      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8007592:	e004      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007594:	bf00      	nop
 8007596:	e002      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007598:	bf00      	nop
 800759a:	e000      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800759c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800759e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d10a      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075a6:	4bad      	ldr	r3, [pc, #692]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80075ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075b4:	4aa9      	ldr	r2, [pc, #676]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075b6:	430b      	orrs	r3, r1
 80075b8:	6553      	str	r3, [r2, #84]	; 0x54
 80075ba:	e003      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80075c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80075c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075cc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80075d0:	653b      	str	r3, [r7, #80]	; 0x50
 80075d2:	2300      	movs	r3, #0
 80075d4:	657b      	str	r3, [r7, #84]	; 0x54
 80075d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80075da:	460b      	mov	r3, r1
 80075dc:	4313      	orrs	r3, r2
 80075de:	d009      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80075e0:	4b9e      	ldr	r3, [pc, #632]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80075e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ee:	4a9b      	ldr	r2, [pc, #620]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80075f0:	430b      	orrs	r3, r1
 80075f2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80075f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8007600:	64bb      	str	r3, [r7, #72]	; 0x48
 8007602:	2300      	movs	r3, #0
 8007604:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007606:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800760a:	460b      	mov	r3, r1
 800760c:	4313      	orrs	r3, r2
 800760e:	d009      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007610:	4b92      	ldr	r3, [pc, #584]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007614:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800761c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800761e:	4a8f      	ldr	r2, [pc, #572]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007620:	430b      	orrs	r3, r1
 8007622:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8007630:	643b      	str	r3, [r7, #64]	; 0x40
 8007632:	2300      	movs	r3, #0
 8007634:	647b      	str	r3, [r7, #68]	; 0x44
 8007636:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800763a:	460b      	mov	r3, r1
 800763c:	4313      	orrs	r3, r2
 800763e:	d00e      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007640:	4b86      	ldr	r3, [pc, #536]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	4a85      	ldr	r2, [pc, #532]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007646:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800764a:	6113      	str	r3, [r2, #16]
 800764c:	4b83      	ldr	r3, [pc, #524]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800764e:	6919      	ldr	r1, [r3, #16]
 8007650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007654:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007658:	4a80      	ldr	r2, [pc, #512]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800765a:	430b      	orrs	r3, r1
 800765c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800765e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007666:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800766a:	63bb      	str	r3, [r7, #56]	; 0x38
 800766c:	2300      	movs	r3, #0
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007670:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007674:	460b      	mov	r3, r1
 8007676:	4313      	orrs	r3, r2
 8007678:	d009      	beq.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800767a:	4b78      	ldr	r3, [pc, #480]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800767c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800767e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007682:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007688:	4a74      	ldr	r2, [pc, #464]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800768a:	430b      	orrs	r3, r1
 800768c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800768e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007696:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800769a:	633b      	str	r3, [r7, #48]	; 0x30
 800769c:	2300      	movs	r3, #0
 800769e:	637b      	str	r3, [r7, #52]	; 0x34
 80076a0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80076a4:	460b      	mov	r3, r1
 80076a6:	4313      	orrs	r3, r2
 80076a8:	d00a      	beq.n	80076c0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076aa:	4b6c      	ldr	r3, [pc, #432]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80076b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	4a68      	ldr	r2, [pc, #416]	; (800785c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80076bc:	430b      	orrs	r3, r1
 80076be:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80076c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c8:	2100      	movs	r1, #0
 80076ca:	62b9      	str	r1, [r7, #40]	; 0x28
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076d2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80076d6:	460b      	mov	r3, r1
 80076d8:	4313      	orrs	r3, r2
 80076da:	d011      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80076dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80076e0:	3308      	adds	r3, #8
 80076e2:	2100      	movs	r1, #0
 80076e4:	4618      	mov	r0, r3
 80076e6:	f001 f99d 	bl	8008a24 <RCCEx_PLL2_Config>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80076f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80076fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007708:	2100      	movs	r1, #0
 800770a:	6239      	str	r1, [r7, #32]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	627b      	str	r3, [r7, #36]	; 0x24
 8007712:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007716:	460b      	mov	r3, r1
 8007718:	4313      	orrs	r3, r2
 800771a:	d011      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800771c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007720:	3308      	adds	r3, #8
 8007722:	2101      	movs	r1, #1
 8007724:	4618      	mov	r0, r3
 8007726:	f001 f97d 	bl	8008a24 <RCCEx_PLL2_Config>
 800772a:	4603      	mov	r3, r0
 800772c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007730:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007734:	2b00      	cmp	r3, #0
 8007736:	d003      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007738:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800773c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	2100      	movs	r1, #0
 800774a:	61b9      	str	r1, [r7, #24]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	61fb      	str	r3, [r7, #28]
 8007752:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007756:	460b      	mov	r3, r1
 8007758:	4313      	orrs	r3, r2
 800775a:	d011      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800775c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007760:	3308      	adds	r3, #8
 8007762:	2102      	movs	r1, #2
 8007764:	4618      	mov	r0, r3
 8007766:	f001 f95d 	bl	8008a24 <RCCEx_PLL2_Config>
 800776a:	4603      	mov	r3, r0
 800776c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007770:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007774:	2b00      	cmp	r3, #0
 8007776:	d003      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007778:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800777c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007788:	2100      	movs	r1, #0
 800778a:	6139      	str	r1, [r7, #16]
 800778c:	f003 0308 	and.w	r3, r3, #8
 8007790:	617b      	str	r3, [r7, #20]
 8007792:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007796:	460b      	mov	r3, r1
 8007798:	4313      	orrs	r3, r2
 800779a:	d011      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800779c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077a0:	3328      	adds	r3, #40	; 0x28
 80077a2:	2100      	movs	r1, #0
 80077a4:	4618      	mov	r0, r3
 80077a6:	f001 f9ef 	bl	8008b88 <RCCEx_PLL3_Config>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80077b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d003      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80077c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	2100      	movs	r1, #0
 80077ca:	60b9      	str	r1, [r7, #8]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80077d6:	460b      	mov	r3, r1
 80077d8:	4313      	orrs	r3, r2
 80077da:	d011      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80077dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80077e0:	3328      	adds	r3, #40	; 0x28
 80077e2:	2101      	movs	r1, #1
 80077e4:	4618      	mov	r0, r3
 80077e6:	f001 f9cf 	bl	8008b88 <RCCEx_PLL3_Config>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80077f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d003      	beq.n	8007800 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80077fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007808:	2100      	movs	r1, #0
 800780a:	6039      	str	r1, [r7, #0]
 800780c:	f003 0320 	and.w	r3, r3, #32
 8007810:	607b      	str	r3, [r7, #4]
 8007812:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007816:	460b      	mov	r3, r1
 8007818:	4313      	orrs	r3, r2
 800781a:	d011      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800781c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007820:	3328      	adds	r3, #40	; 0x28
 8007822:	2102      	movs	r1, #2
 8007824:	4618      	mov	r0, r3
 8007826:	f001 f9af 	bl	8008b88 <RCCEx_PLL3_Config>
 800782a:	4603      	mov	r3, r0
 800782c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8007830:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007838:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800783c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8007840:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007848:	2300      	movs	r3, #0
 800784a:	e000      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800784c:	2301      	movs	r3, #1
}
 800784e:	4618      	mov	r0, r3
 8007850:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007854:	46bd      	mov	sp, r7
 8007856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800785a:	bf00      	nop
 800785c:	58024400 	.word	0x58024400

08007860 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b090      	sub	sp, #64	; 0x40
 8007864:	af00      	add	r7, sp, #0
 8007866:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800786a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800786e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007872:	430b      	orrs	r3, r1
 8007874:	f040 8094 	bne.w	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8007878:	4b9b      	ldr	r3, [pc, #620]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800787a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787c:	f003 0307 	and.w	r3, r3, #7
 8007880:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	2b04      	cmp	r3, #4
 8007886:	f200 8087 	bhi.w	8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800788a:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800788c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007890:	080078a5 	.word	0x080078a5
 8007894:	080078cd 	.word	0x080078cd
 8007898:	080078f5 	.word	0x080078f5
 800789c:	08007991 	.word	0x08007991
 80078a0:	0800791d 	.word	0x0800791d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80078a4:	4b90      	ldr	r3, [pc, #576]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078b0:	d108      	bne.n	80078c4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 ff62 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078c0:	f000 bc93 	b.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078c4:	2300      	movs	r3, #0
 80078c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078c8:	f000 bc8f 	b.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80078cc:	4b86      	ldr	r3, [pc, #536]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80078d8:	d108      	bne.n	80078ec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078da:	f107 0318 	add.w	r3, r7, #24
 80078de:	4618      	mov	r0, r3
 80078e0:	f000 fca6 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80078e8:	f000 bc7f 	b.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80078f0:	f000 bc7b 	b.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80078f4:	4b7c      	ldr	r3, [pc, #496]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007900:	d108      	bne.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007902:	f107 030c 	add.w	r3, r7, #12
 8007906:	4618      	mov	r0, r3
 8007908:	f000 fde6 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007910:	f000 bc6b 	b.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007918:	f000 bc67 	b.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800791c:	4b72      	ldr	r3, [pc, #456]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800791e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007920:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007924:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007926:	4b70      	ldr	r3, [pc, #448]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0304 	and.w	r3, r3, #4
 800792e:	2b04      	cmp	r3, #4
 8007930:	d10c      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007934:	2b00      	cmp	r3, #0
 8007936:	d109      	bne.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007938:	4b6b      	ldr	r3, [pc, #428]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	08db      	lsrs	r3, r3, #3
 800793e:	f003 0303 	and.w	r3, r3, #3
 8007942:	4a6a      	ldr	r2, [pc, #424]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007944:	fa22 f303 	lsr.w	r3, r2, r3
 8007948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800794a:	e01f      	b.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800794c:	4b66      	ldr	r3, [pc, #408]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007958:	d106      	bne.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800795a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007960:	d102      	bne.n	8007968 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007962:	4b63      	ldr	r3, [pc, #396]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007964:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007966:	e011      	b.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007968:	4b5f      	ldr	r3, [pc, #380]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007970:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007974:	d106      	bne.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8007976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007978:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800797c:	d102      	bne.n	8007984 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800797e:	4b5d      	ldr	r3, [pc, #372]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007982:	e003      	b.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007984:	2300      	movs	r3, #0
 8007986:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007988:	f000 bc2f 	b.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800798c:	f000 bc2d 	b.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007990:	4b59      	ldr	r3, [pc, #356]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007992:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007994:	f000 bc29 	b.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007998:	2300      	movs	r3, #0
 800799a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800799c:	f000 bc25 	b.w	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80079a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80079a8:	430b      	orrs	r3, r1
 80079aa:	f040 80a7 	bne.w	8007afc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80079ae:	4b4e      	ldr	r3, [pc, #312]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 80079b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80079b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80079b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079be:	d054      	beq.n	8007a6a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079c6:	f200 808b 	bhi.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079d0:	f000 8083 	beq.w	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80079da:	f200 8081 	bhi.w	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80079de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079e4:	d02f      	beq.n	8007a46 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80079e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ec:	d878      	bhi.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80079ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80079fa:	d012      	beq.n	8007a22 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 80079fc:	e070      	b.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80079fe:	4b3a      	ldr	r3, [pc, #232]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a0a:	d107      	bne.n	8007a1c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a10:	4618      	mov	r0, r3
 8007a12:	f000 feb5 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a1a:	e3e6      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a20:	e3e3      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007a22:	4b31      	ldr	r3, [pc, #196]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a2e:	d107      	bne.n	8007a40 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a30:	f107 0318 	add.w	r3, r7, #24
 8007a34:	4618      	mov	r0, r3
 8007a36:	f000 fbfb 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a3e:	e3d4      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a40:	2300      	movs	r3, #0
 8007a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a44:	e3d1      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007a46:	4b28      	ldr	r3, [pc, #160]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a52:	d107      	bne.n	8007a64 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007a54:	f107 030c 	add.w	r3, r7, #12
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f000 fd3d 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007a62:	e3c2      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007a68:	e3bf      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007a6a:	4b1f      	ldr	r3, [pc, #124]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007a72:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007a74:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d10c      	bne.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8007a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d109      	bne.n	8007a9a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a86:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	08db      	lsrs	r3, r3, #3
 8007a8c:	f003 0303 	and.w	r3, r3, #3
 8007a90:	4a16      	ldr	r2, [pc, #88]	; (8007aec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8007a92:	fa22 f303 	lsr.w	r3, r2, r3
 8007a96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a98:	e01e      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007a9a:	4b13      	ldr	r3, [pc, #76]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007aa6:	d106      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8007aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007aae:	d102      	bne.n	8007ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007ab0:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8007ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ab4:	e010      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007ab6:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ac2:	d106      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8007ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007aca:	d102      	bne.n	8007ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007acc:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8007ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ad0:	e002      	b.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007ad6:	e388      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ad8:	e387      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007ada:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ade:	e384      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ae4:	e381      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007ae6:	bf00      	nop
 8007ae8:	58024400 	.word	0x58024400
 8007aec:	03d09000 	.word	0x03d09000
 8007af0:	003d0900 	.word	0x003d0900
 8007af4:	017d7840 	.word	0x017d7840
 8007af8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007afc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b00:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007b04:	430b      	orrs	r3, r1
 8007b06:	f040 809c 	bne.w	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8007b0a:	4b9e      	ldr	r3, [pc, #632]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b0e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8007b12:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b1a:	d054      	beq.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b22:	f200 808b 	bhi.w	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b2c:	f000 8083 	beq.w	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8007b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007b36:	f200 8081 	bhi.w	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b40:	d02f      	beq.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b48:	d878      	bhi.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007b56:	d012      	beq.n	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8007b58:	e070      	b.n	8007c3c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007b5a:	4b8a      	ldr	r3, [pc, #552]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b66:	d107      	bne.n	8007b78 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f000 fe07 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b76:	e338      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b7c:	e335      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007b7e:	4b81      	ldr	r3, [pc, #516]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b8a:	d107      	bne.n	8007b9c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b8c:	f107 0318 	add.w	r3, r7, #24
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fb4d 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007b9a:	e326      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ba0:	e323      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007ba2:	4b78      	ldr	r3, [pc, #480]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007baa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bae:	d107      	bne.n	8007bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bb0:	f107 030c 	add.w	r3, r7, #12
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fc8f 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007bbe:	e314      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bc4:	e311      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007bc6:	4b6f      	ldr	r3, [pc, #444]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007bce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007bd0:	4b6c      	ldr	r3, [pc, #432]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	d10c      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d109      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007be2:	4b68      	ldr	r3, [pc, #416]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	08db      	lsrs	r3, r3, #3
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	4a66      	ldr	r2, [pc, #408]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007bee:	fa22 f303 	lsr.w	r3, r2, r3
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007bf4:	e01e      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007bf6:	4b63      	ldr	r3, [pc, #396]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c02:	d106      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c0a:	d102      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007c0c:	4b5f      	ldr	r3, [pc, #380]	; (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c10:	e010      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007c12:	4b5c      	ldr	r3, [pc, #368]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c1e:	d106      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8007c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c26:	d102      	bne.n	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007c28:	4b59      	ldr	r3, [pc, #356]	; (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c2c:	e002      	b.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007c32:	e2da      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007c34:	e2d9      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007c36:	4b57      	ldr	r3, [pc, #348]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c3a:	e2d6      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007c40:	e2d3      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8007c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c46:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007c4a:	430b      	orrs	r3, r1
 8007c4c:	f040 80a7 	bne.w	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8007c50:	4b4c      	ldr	r3, [pc, #304]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c54:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007c58:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c60:	d055      	beq.n	8007d0e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c68:	f200 8096 	bhi.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c72:	f000 8084 	beq.w	8007d7e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8007c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c7c:	f200 808c 	bhi.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c86:	d030      	beq.n	8007cea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c8e:	f200 8083 	bhi.w	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d004      	beq.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c9e:	d012      	beq.n	8007cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007ca0:	e07a      	b.n	8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007ca2:	4b38      	ldr	r3, [pc, #224]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cae:	d107      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f000 fd63 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007cbe:	e294      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007cc4:	e291      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007cc6:	4b2f      	ldr	r3, [pc, #188]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007cce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cd2:	d107      	bne.n	8007ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cd4:	f107 0318 	add.w	r3, r7, #24
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 faa9 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ce2:	e282      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ce8:	e27f      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007cea:	4b26      	ldr	r3, [pc, #152]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007cf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cf6:	d107      	bne.n	8007d08 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007cf8:	f107 030c 	add.w	r3, r7, #12
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f000 fbeb 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007d06:	e270      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d0c:	e26d      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007d0e:	4b1d      	ldr	r3, [pc, #116]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d12:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d16:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007d18:	4b1a      	ldr	r3, [pc, #104]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d10c      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d109      	bne.n	8007d3e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007d2a:	4b16      	ldr	r3, [pc, #88]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	08db      	lsrs	r3, r3, #3
 8007d30:	f003 0303 	and.w	r3, r3, #3
 8007d34:	4a14      	ldr	r2, [pc, #80]	; (8007d88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8007d36:	fa22 f303 	lsr.w	r3, r2, r3
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d3c:	e01e      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007d3e:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d4a:	d106      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 8007d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d52:	d102      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007d54:	4b0d      	ldr	r3, [pc, #52]	; (8007d8c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d58:	e010      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007d5a:	4b0a      	ldr	r3, [pc, #40]	; (8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d66:	d106      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d6e:	d102      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007d70:	4b07      	ldr	r3, [pc, #28]	; (8007d90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8007d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d74:	e002      	b.n	8007d7c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007d76:	2300      	movs	r3, #0
 8007d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007d7a:	e236      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d7c:	e235      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8007d7e:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8007d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d82:	e232      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007d84:	58024400 	.word	0x58024400
 8007d88:	03d09000 	.word	0x03d09000
 8007d8c:	003d0900 	.word	0x003d0900
 8007d90:	017d7840 	.word	0x017d7840
 8007d94:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d9c:	e225      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007da6:	430b      	orrs	r3, r1
 8007da8:	f040 8085 	bne.w	8007eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007dac:	4b9c      	ldr	r3, [pc, #624]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007db4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dbc:	d06b      	beq.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007dc4:	d874      	bhi.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dcc:	d056      	beq.n	8007e7c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007dd4:	d86c      	bhi.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ddc:	d03b      	beq.n	8007e56 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007de4:	d864      	bhi.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dec:	d021      	beq.n	8007e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007df4:	d85c      	bhi.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d004      	beq.n	8007e06 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e02:	d004      	beq.n	8007e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007e04:	e054      	b.n	8007eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8007e06:	f7fe fb5f 	bl	80064c8 <HAL_RCC_GetPCLK1Freq>
 8007e0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007e0c:	e1ed      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007e0e:	4b84      	ldr	r3, [pc, #528]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e1a:	d107      	bne.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e1c:	f107 0318 	add.w	r3, r7, #24
 8007e20:	4618      	mov	r0, r3
 8007e22:	f000 fa05 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e2a:	e1de      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e30:	e1db      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007e32:	4b7b      	ldr	r3, [pc, #492]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e3e:	d107      	bne.n	8007e50 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e40:	f107 030c 	add.w	r3, r7, #12
 8007e44:	4618      	mov	r0, r3
 8007e46:	f000 fb47 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e4e:	e1cc      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e50:	2300      	movs	r3, #0
 8007e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e54:	e1c9      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007e56:	4b72      	ldr	r3, [pc, #456]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0304 	and.w	r3, r3, #4
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d109      	bne.n	8007e76 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e62:	4b6f      	ldr	r3, [pc, #444]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	08db      	lsrs	r3, r3, #3
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	4a6d      	ldr	r2, [pc, #436]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e74:	e1b9      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e7a:	e1b6      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007e7c:	4b68      	ldr	r3, [pc, #416]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e88:	d102      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 8007e8a:	4b67      	ldr	r3, [pc, #412]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007e8e:	e1ac      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007e90:	2300      	movs	r3, #0
 8007e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007e94:	e1a9      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007e96:	4b62      	ldr	r3, [pc, #392]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ea2:	d102      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007ea4:	4b61      	ldr	r3, [pc, #388]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007ea8:	e19f      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eae:	e19c      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007eb4:	e199      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007eb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eba:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007ebe:	430b      	orrs	r3, r1
 8007ec0:	d173      	bne.n	8007faa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007ec2:	4b57      	ldr	r3, [pc, #348]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007eca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed2:	d02f      	beq.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eda:	d863      	bhi.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d004      	beq.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ee8:	d012      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 8007eea:	e05b      	b.n	8007fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007eec:	4b4c      	ldr	r3, [pc, #304]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ef8:	d107      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007efa:	f107 0318 	add.w	r3, r7, #24
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 f996 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f08:	e16f      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f0e:	e16c      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007f10:	4b43      	ldr	r3, [pc, #268]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f1c:	d107      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f1e:	f107 030c 	add.w	r3, r7, #12
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 fad8 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007f2c:	e15d      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007f32:	e15a      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f34:	4b3a      	ldr	r3, [pc, #232]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f3e:	4b38      	ldr	r3, [pc, #224]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0304 	and.w	r3, r3, #4
 8007f46:	2b04      	cmp	r3, #4
 8007f48:	d10c      	bne.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8007f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d109      	bne.n	8007f64 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007f50:	4b33      	ldr	r3, [pc, #204]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	08db      	lsrs	r3, r3, #3
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	4a32      	ldr	r2, [pc, #200]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 8007f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f62:	e01e      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007f64:	4b2e      	ldr	r3, [pc, #184]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f70:	d106      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8007f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f78:	d102      	bne.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8007f7a:	4b2b      	ldr	r3, [pc, #172]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f7e:	e010      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8007f80:	4b27      	ldr	r3, [pc, #156]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f8c:	d106      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f94:	d102      	bne.n	8007f9c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8007f96:	4b25      	ldr	r3, [pc, #148]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 8007f98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f9a:	e002      	b.n	8007fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007fa0:	e123      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007fa2:	e122      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007fa8:	e11f      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fae:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007fb2:	430b      	orrs	r3, r1
 8007fb4:	d13c      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007fb6:	4b1a      	ldr	r3, [pc, #104]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fbe:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d004      	beq.n	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fcc:	d012      	beq.n	8007ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007fce:	e023      	b.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007fd0:	4b13      	ldr	r3, [pc, #76]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fdc:	d107      	bne.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fbcc 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007fec:	e0fd      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007ff2:	e0fa      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ff4:	4b0a      	ldr	r3, [pc, #40]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008000:	d107      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008002:	f107 0318 	add.w	r3, r7, #24
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f912 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800800c:	6a3b      	ldr	r3, [r7, #32]
 800800e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008010:	e0eb      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008016:	e0e8      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8008018:	2300      	movs	r3, #0
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800801c:	e0e5      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800801e:	bf00      	nop
 8008020:	58024400 	.word	0x58024400
 8008024:	03d09000 	.word	0x03d09000
 8008028:	003d0900 	.word	0x003d0900
 800802c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008030:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008034:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8008038:	430b      	orrs	r3, r1
 800803a:	f040 8085 	bne.w	8008148 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800803e:	4b6d      	ldr	r3, [pc, #436]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008042:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008046:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800804e:	d06b      	beq.n	8008128 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008056:	d874      	bhi.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800805e:	d056      	beq.n	800810e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008066:	d86c      	bhi.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800806e:	d03b      	beq.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 8008070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008072:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008076:	d864      	bhi.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800807e:	d021      	beq.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008086:	d85c      	bhi.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808a:	2b00      	cmp	r3, #0
 800808c:	d004      	beq.n	8008098 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008094:	d004      	beq.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 8008096:	e054      	b.n	8008142 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8008098:	f000 f8b4 	bl	8008204 <HAL_RCCEx_GetD3PCLK1Freq>
 800809c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800809e:	e0a4      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80080a0:	4b54      	ldr	r3, [pc, #336]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080ac:	d107      	bne.n	80080be <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ae:	f107 0318 	add.w	r3, r7, #24
 80080b2:	4618      	mov	r0, r3
 80080b4:	f000 f8bc 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080bc:	e095      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080c2:	e092      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80080c4:	4b4b      	ldr	r3, [pc, #300]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80080cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d0:	d107      	bne.n	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080d2:	f107 030c 	add.w	r3, r7, #12
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 f9fe 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80080e0:	e083      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80080e6:	e080      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080e8:	4b42      	ldr	r3, [pc, #264]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0304 	and.w	r3, r3, #4
 80080f0:	2b04      	cmp	r3, #4
 80080f2:	d109      	bne.n	8008108 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80080f4:	4b3f      	ldr	r3, [pc, #252]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	08db      	lsrs	r3, r3, #3
 80080fa:	f003 0303 	and.w	r3, r3, #3
 80080fe:	4a3e      	ldr	r2, [pc, #248]	; (80081f8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8008100:	fa22 f303 	lsr.w	r3, r2, r3
 8008104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008106:	e070      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008108:	2300      	movs	r3, #0
 800810a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800810c:	e06d      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800810e:	4b39      	ldr	r3, [pc, #228]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800811a:	d102      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800811c:	4b37      	ldr	r3, [pc, #220]	; (80081fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800811e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008120:	e063      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008122:	2300      	movs	r3, #0
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008126:	e060      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008128:	4b32      	ldr	r3, [pc, #200]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008134:	d102      	bne.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 8008136:	4b32      	ldr	r3, [pc, #200]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8008138:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800813a:	e056      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800813c:	2300      	movs	r3, #0
 800813e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008140:	e053      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8008142:	2300      	movs	r3, #0
 8008144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008146:	e050      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800814c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8008150:	430b      	orrs	r3, r1
 8008152:	d148      	bne.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008154:	4b27      	ldr	r3, [pc, #156]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800815c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008164:	d02a      	beq.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 8008166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008168:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800816c:	d838      	bhi.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800816e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8008174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008176:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800817a:	d00d      	beq.n	8008198 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800817c:	e030      	b.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800817e:	4b1d      	ldr	r3, [pc, #116]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008186:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800818a:	d102      	bne.n	8008192 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800818c:	4b1c      	ldr	r3, [pc, #112]	; (8008200 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800818e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008190:	e02b      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8008192:	2300      	movs	r3, #0
 8008194:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008196:	e028      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008198:	4b16      	ldr	r3, [pc, #88]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081a4:	d107      	bne.n	80081b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80081a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 fae8 	bl	8008780 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081b4:	e019      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081b6:	2300      	movs	r3, #0
 80081b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081ba:	e016      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80081bc:	4b0d      	ldr	r3, [pc, #52]	; (80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80081c8:	d107      	bne.n	80081da <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081ca:	f107 0318 	add.w	r3, r7, #24
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 f82e 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80081d4:	69fb      	ldr	r3, [r7, #28]
 80081d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80081d8:	e007      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081de:	e004      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 80081e0:	2300      	movs	r3, #0
 80081e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80081e4:	e001      	b.n	80081ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80081ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3740      	adds	r7, #64	; 0x40
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	58024400 	.word	0x58024400
 80081f8:	03d09000 	.word	0x03d09000
 80081fc:	003d0900 	.word	0x003d0900
 8008200:	017d7840 	.word	0x017d7840

08008204 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008208:	f7fe f92e 	bl	8006468 <HAL_RCC_GetHCLKFreq>
 800820c:	4602      	mov	r2, r0
 800820e:	4b06      	ldr	r3, [pc, #24]	; (8008228 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008210:	6a1b      	ldr	r3, [r3, #32]
 8008212:	091b      	lsrs	r3, r3, #4
 8008214:	f003 0307 	and.w	r3, r3, #7
 8008218:	4904      	ldr	r1, [pc, #16]	; (800822c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800821a:	5ccb      	ldrb	r3, [r1, r3]
 800821c:	f003 031f 	and.w	r3, r3, #31
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008224:	4618      	mov	r0, r3
 8008226:	bd80      	pop	{r7, pc}
 8008228:	58024400 	.word	0x58024400
 800822c:	0800c0d8 	.word	0x0800c0d8

08008230 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008230:	b480      	push	{r7}
 8008232:	b089      	sub	sp, #36	; 0x24
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008238:	4ba1      	ldr	r3, [pc, #644]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008242:	4b9f      	ldr	r3, [pc, #636]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008246:	0b1b      	lsrs	r3, r3, #12
 8008248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800824c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800824e:	4b9c      	ldr	r3, [pc, #624]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	091b      	lsrs	r3, r3, #4
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800825a:	4b99      	ldr	r3, [pc, #612]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800825c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825e:	08db      	lsrs	r3, r3, #3
 8008260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	fb02 f303 	mul.w	r3, r2, r3
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 8111 	beq.w	80084a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	2b02      	cmp	r3, #2
 8008282:	f000 8083 	beq.w	800838c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	2b02      	cmp	r3, #2
 800828a:	f200 80a1 	bhi.w	80083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d003      	beq.n	800829c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008294:	69bb      	ldr	r3, [r7, #24]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d056      	beq.n	8008348 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800829a:	e099      	b.n	80083d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800829c:	4b88      	ldr	r3, [pc, #544]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f003 0320 	and.w	r3, r3, #32
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d02d      	beq.n	8008304 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082a8:	4b85      	ldr	r3, [pc, #532]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	08db      	lsrs	r3, r3, #3
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	4a84      	ldr	r2, [pc, #528]	; (80084c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80082b4:	fa22 f303 	lsr.w	r3, r2, r3
 80082b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	ee07 3a90 	vmov	s15, r3
 80082c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	ee07 3a90 	vmov	s15, r3
 80082ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082d2:	4b7b      	ldr	r3, [pc, #492]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082da:	ee07 3a90 	vmov	s15, r3
 80082de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80082e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008302:	e087      	b.n	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800830e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80084cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008316:	4b6a      	ldr	r3, [pc, #424]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008326:	ed97 6a03 	vldr	s12, [r7, #12]
 800832a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800832e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800833a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800833e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008342:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008346:	e065      	b.n	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008352:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800835a:	4b59      	ldr	r3, [pc, #356]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800835c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008362:	ee07 3a90 	vmov	s15, r3
 8008366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800836a:	ed97 6a03 	vldr	s12, [r7, #12]
 800836e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800837a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800837e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800838a:	e043      	b.n	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008396:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80084d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800839a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800839e:	4b48      	ldr	r3, [pc, #288]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083a6:	ee07 3a90 	vmov	s15, r3
 80083aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80083b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ce:	e021      	b.n	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80084d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e2:	4b37      	ldr	r3, [pc, #220]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80084c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008412:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008414:	4b2a      	ldr	r3, [pc, #168]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	0a5b      	lsrs	r3, r3, #9
 800841a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800842a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800843a:	ee17 2a90 	vmov	r2, s15
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008442:	4b1f      	ldr	r3, [pc, #124]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008446:	0c1b      	lsrs	r3, r3, #16
 8008448:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800844c:	ee07 3a90 	vmov	s15, r3
 8008450:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008454:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008458:	ee37 7a87 	vadd.f32	s14, s15, s14
 800845c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008460:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008468:	ee17 2a90 	vmov	r2, s15
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008470:	4b13      	ldr	r3, [pc, #76]	; (80084c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008474:	0e1b      	lsrs	r3, r3, #24
 8008476:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800847a:	ee07 3a90 	vmov	s15, r3
 800847e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800848a:	edd7 6a07 	vldr	s13, [r7, #28]
 800848e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008496:	ee17 2a90 	vmov	r2, s15
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800849e:	e008      	b.n	80084b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	609a      	str	r2, [r3, #8]
}
 80084b2:	bf00      	nop
 80084b4:	3724      	adds	r7, #36	; 0x24
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	58024400 	.word	0x58024400
 80084c4:	03d09000 	.word	0x03d09000
 80084c8:	46000000 	.word	0x46000000
 80084cc:	4c742400 	.word	0x4c742400
 80084d0:	4a742400 	.word	0x4a742400
 80084d4:	4bbebc20 	.word	0x4bbebc20

080084d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80084d8:	b480      	push	{r7}
 80084da:	b089      	sub	sp, #36	; 0x24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084e0:	4ba1      	ldr	r3, [pc, #644]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e4:	f003 0303 	and.w	r3, r3, #3
 80084e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80084ea:	4b9f      	ldr	r3, [pc, #636]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	0d1b      	lsrs	r3, r3, #20
 80084f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80084f6:	4b9c      	ldr	r3, [pc, #624]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	0a1b      	lsrs	r3, r3, #8
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008502:	4b99      	ldr	r3, [pc, #612]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008506:	08db      	lsrs	r3, r3, #3
 8008508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800850c:	693a      	ldr	r2, [r7, #16]
 800850e:	fb02 f303 	mul.w	r3, r2, r3
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8111 	beq.w	8008748 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	2b02      	cmp	r3, #2
 800852a:	f000 8083 	beq.w	8008634 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b02      	cmp	r3, #2
 8008532:	f200 80a1 	bhi.w	8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d056      	beq.n	80085f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008542:	e099      	b.n	8008678 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008544:	4b88      	ldr	r3, [pc, #544]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b00      	cmp	r3, #0
 800854e:	d02d      	beq.n	80085ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008550:	4b85      	ldr	r3, [pc, #532]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	08db      	lsrs	r3, r3, #3
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	4a84      	ldr	r2, [pc, #528]	; (800876c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800855c:	fa22 f303 	lsr.w	r3, r2, r3
 8008560:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857a:	4b7b      	ldr	r3, [pc, #492]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800857c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858a:	ed97 6a03 	vldr	s12, [r7, #12]
 800858e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800859e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80085aa:	e087      	b.n	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008774 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80085ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085be:	4b6a      	ldr	r3, [pc, #424]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80085d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085ee:	e065      	b.n	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	ee07 3a90 	vmov	s15, r3
 80085f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008602:	4b59      	ldr	r3, [pc, #356]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008612:	ed97 6a03 	vldr	s12, [r7, #12]
 8008616:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800861a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800862a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008632:	e043      	b.n	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800877c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008646:	4b48      	ldr	r3, [pc, #288]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800864a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008656:	ed97 6a03 	vldr	s12, [r7, #12]
 800865a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800865e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800866a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008676:	e021      	b.n	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008682:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008778 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868a:	4b37      	ldr	r3, [pc, #220]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869a:	ed97 6a03 	vldr	s12, [r7, #12]
 800869e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008770 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80086bc:	4b2a      	ldr	r3, [pc, #168]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c0:	0a5b      	lsrs	r3, r3, #9
 80086c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80086da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e2:	ee17 2a90 	vmov	r2, s15
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80086ea:	4b1f      	ldr	r3, [pc, #124]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ee:	0c1b      	lsrs	r3, r3, #16
 80086f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086f4:	ee07 3a90 	vmov	s15, r3
 80086f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008700:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008704:	edd7 6a07 	vldr	s13, [r7, #28]
 8008708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800870c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008710:	ee17 2a90 	vmov	r2, s15
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008718:	4b13      	ldr	r3, [pc, #76]	; (8008768 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800871c:	0e1b      	lsrs	r3, r3, #24
 800871e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008722:	ee07 3a90 	vmov	s15, r3
 8008726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800872a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800872e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008732:	edd7 6a07 	vldr	s13, [r7, #28]
 8008736:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800873a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800873e:	ee17 2a90 	vmov	r2, s15
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008746:	e008      	b.n	800875a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	609a      	str	r2, [r3, #8]
}
 800875a:	bf00      	nop
 800875c:	3724      	adds	r7, #36	; 0x24
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	58024400 	.word	0x58024400
 800876c:	03d09000 	.word	0x03d09000
 8008770:	46000000 	.word	0x46000000
 8008774:	4c742400 	.word	0x4c742400
 8008778:	4a742400 	.word	0x4a742400
 800877c:	4bbebc20 	.word	0x4bbebc20

08008780 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008780:	b480      	push	{r7}
 8008782:	b089      	sub	sp, #36	; 0x24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008788:	4ba0      	ldr	r3, [pc, #640]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	f003 0303 	and.w	r3, r3, #3
 8008790:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008792:	4b9e      	ldr	r3, [pc, #632]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008796:	091b      	lsrs	r3, r3, #4
 8008798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800879c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800879e:	4b9b      	ldr	r3, [pc, #620]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a2:	f003 0301 	and.w	r3, r3, #1
 80087a6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087a8:	4b98      	ldr	r3, [pc, #608]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ac:	08db      	lsrs	r3, r3, #3
 80087ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	fb02 f303 	mul.w	r3, r2, r3
 80087b8:	ee07 3a90 	vmov	s15, r3
 80087bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087c0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 8111 	beq.w	80089ee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	f000 8083 	beq.w	80088da <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	f200 80a1 	bhi.w	800891e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80087e2:	69bb      	ldr	r3, [r7, #24]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d056      	beq.n	8008896 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80087e8:	e099      	b.n	800891e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087ea:	4b88      	ldr	r3, [pc, #544]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f003 0320 	and.w	r3, r3, #32
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d02d      	beq.n	8008852 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087f6:	4b85      	ldr	r3, [pc, #532]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	08db      	lsrs	r3, r3, #3
 80087fc:	f003 0303 	and.w	r3, r3, #3
 8008800:	4a83      	ldr	r2, [pc, #524]	; (8008a10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8008802:	fa22 f303 	lsr.w	r3, r2, r3
 8008806:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	ee07 3a90 	vmov	s15, r3
 800880e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	ee07 3a90 	vmov	s15, r3
 8008818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008820:	4b7a      	ldr	r3, [pc, #488]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008828:	ee07 3a90 	vmov	s15, r3
 800882c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008830:	ed97 6a03 	vldr	s12, [r7, #12]
 8008834:	eddf 5a77 	vldr	s11, [pc, #476]	; 8008a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008850:	e087      	b.n	8008962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	ee07 3a90 	vmov	s15, r3
 8008858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8008860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008864:	4b69      	ldr	r3, [pc, #420]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886c:	ee07 3a90 	vmov	s15, r3
 8008870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008874:	ed97 6a03 	vldr	s12, [r7, #12]
 8008878:	eddf 5a66 	vldr	s11, [pc, #408]	; 8008a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800887c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008890:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008894:	e065      	b.n	8008962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	ee07 3a90 	vmov	s15, r3
 800889c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8008a1c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80088a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a8:	4b58      	ldr	r3, [pc, #352]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b0:	ee07 3a90 	vmov	s15, r3
 80088b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80088bc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8008a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80088c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088d8:	e043      	b.n	8008962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	ee07 3a90 	vmov	s15, r3
 80088e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088e4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80088e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ec:	4b47      	ldr	r3, [pc, #284]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80088ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f4:	ee07 3a90 	vmov	s15, r3
 80088f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8008900:	eddf 5a44 	vldr	s11, [pc, #272]	; 8008a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800890c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008918:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800891c:	e021      	b.n	8008962 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	ee07 3a90 	vmov	s15, r3
 8008924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008928:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8008a18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800892c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008930:	4b36      	ldr	r3, [pc, #216]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008938:	ee07 3a90 	vmov	s15, r3
 800893c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008940:	ed97 6a03 	vldr	s12, [r7, #12]
 8008944:	eddf 5a33 	vldr	s11, [pc, #204]	; 8008a14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8008948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008960:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008962:	4b2a      	ldr	r3, [pc, #168]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	0a5b      	lsrs	r3, r3, #9
 8008968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800896c:	ee07 3a90 	vmov	s15, r3
 8008970:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008974:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008978:	ee37 7a87 	vadd.f32	s14, s15, s14
 800897c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008980:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008988:	ee17 2a90 	vmov	r2, s15
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008990:	4b1e      	ldr	r3, [pc, #120]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	0c1b      	lsrs	r3, r3, #16
 8008996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899a:	ee07 3a90 	vmov	s15, r3
 800899e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80089ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b6:	ee17 2a90 	vmov	r2, s15
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80089be:	4b13      	ldr	r3, [pc, #76]	; (8008a0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80089c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c2:	0e1b      	lsrs	r3, r3, #24
 80089c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c8:	ee07 3a90 	vmov	s15, r3
 80089cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089e4:	ee17 2a90 	vmov	r2, s15
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80089ec:	e008      	b.n	8008a00 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	609a      	str	r2, [r3, #8]
}
 8008a00:	bf00      	nop
 8008a02:	3724      	adds	r7, #36	; 0x24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	58024400 	.word	0x58024400
 8008a10:	03d09000 	.word	0x03d09000
 8008a14:	46000000 	.word	0x46000000
 8008a18:	4c742400 	.word	0x4c742400
 8008a1c:	4a742400 	.word	0x4a742400
 8008a20:	4bbebc20 	.word	0x4bbebc20

08008a24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a32:	4b53      	ldr	r3, [pc, #332]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d101      	bne.n	8008a42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	e099      	b.n	8008b76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a42:	4b4f      	ldr	r3, [pc, #316]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a4e      	ldr	r2, [pc, #312]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008a48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a4e:	f7f9 fc09 	bl	8002264 <HAL_GetTick>
 8008a52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a54:	e008      	b.n	8008a68 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a56:	f7f9 fc05 	bl	8002264 <HAL_GetTick>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	1ad3      	subs	r3, r2, r3
 8008a60:	2b02      	cmp	r3, #2
 8008a62:	d901      	bls.n	8008a68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	e086      	b.n	8008b76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a68:	4b45      	ldr	r3, [pc, #276]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d1f0      	bne.n	8008a56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a74:	4b42      	ldr	r3, [pc, #264]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	031b      	lsls	r3, r3, #12
 8008a82:	493f      	ldr	r1, [pc, #252]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008a84:	4313      	orrs	r3, r2
 8008a86:	628b      	str	r3, [r1, #40]	; 0x28
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	3b01      	subs	r3, #1
 8008a8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	025b      	lsls	r3, r3, #9
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	431a      	orrs	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	3b01      	subs	r3, #1
 8008aa4:	041b      	lsls	r3, r3, #16
 8008aa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008aaa:	431a      	orrs	r2, r3
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	691b      	ldr	r3, [r3, #16]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	061b      	lsls	r3, r3, #24
 8008ab4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ab8:	4931      	ldr	r1, [pc, #196]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008abe:	4b30      	ldr	r3, [pc, #192]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	492d      	ldr	r1, [pc, #180]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008ad0:	4b2b      	ldr	r3, [pc, #172]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad4:	f023 0220 	bic.w	r2, r3, #32
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	4928      	ldr	r1, [pc, #160]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ae2:	4b27      	ldr	r3, [pc, #156]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae6:	4a26      	ldr	r2, [pc, #152]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008ae8:	f023 0310 	bic.w	r3, r3, #16
 8008aec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008aee:	4b24      	ldr	r3, [pc, #144]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008af0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008af2:	4b24      	ldr	r3, [pc, #144]	; (8008b84 <RCCEx_PLL2_Config+0x160>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	69d2      	ldr	r2, [r2, #28]
 8008afa:	00d2      	lsls	r2, r2, #3
 8008afc:	4920      	ldr	r1, [pc, #128]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008b02:	4b1f      	ldr	r3, [pc, #124]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b06:	4a1e      	ldr	r2, [pc, #120]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b08:	f043 0310 	orr.w	r3, r3, #16
 8008b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d106      	bne.n	8008b22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b14:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b18:	4a19      	ldr	r2, [pc, #100]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b20:	e00f      	b.n	8008b42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d106      	bne.n	8008b36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b28:	4b15      	ldr	r3, [pc, #84]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b2c:	4a14      	ldr	r2, [pc, #80]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b34:	e005      	b.n	8008b42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b36:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3a:	4a11      	ldr	r2, [pc, #68]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b42:	4b0f      	ldr	r3, [pc, #60]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a0e      	ldr	r2, [pc, #56]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b4e:	f7f9 fb89 	bl	8002264 <HAL_GetTick>
 8008b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b54:	e008      	b.n	8008b68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b56:	f7f9 fb85 	bl	8002264 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d901      	bls.n	8008b68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e006      	b.n	8008b76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <RCCEx_PLL2_Config+0x15c>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0f0      	beq.n	8008b56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	58024400 	.word	0x58024400
 8008b84:	ffff0007 	.word	0xffff0007

08008b88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b92:	2300      	movs	r3, #0
 8008b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b96:	4b53      	ldr	r3, [pc, #332]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	2b03      	cmp	r3, #3
 8008ba0:	d101      	bne.n	8008ba6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e099      	b.n	8008cda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ba6:	4b4f      	ldr	r3, [pc, #316]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a4e      	ldr	r2, [pc, #312]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bb2:	f7f9 fb57 	bl	8002264 <HAL_GetTick>
 8008bb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bb8:	e008      	b.n	8008bcc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008bba:	f7f9 fb53 	bl	8002264 <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d901      	bls.n	8008bcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e086      	b.n	8008cda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bcc:	4b45      	ldr	r3, [pc, #276]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1f0      	bne.n	8008bba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008bd8:	4b42      	ldr	r3, [pc, #264]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	051b      	lsls	r3, r3, #20
 8008be6:	493f      	ldr	r1, [pc, #252]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	628b      	str	r3, [r1, #40]	; 0x28
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	025b      	lsls	r3, r3, #9
 8008bfe:	b29b      	uxth	r3, r3
 8008c00:	431a      	orrs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	3b01      	subs	r3, #1
 8008c08:	041b      	lsls	r3, r3, #16
 8008c0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c0e:	431a      	orrs	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	3b01      	subs	r3, #1
 8008c16:	061b      	lsls	r3, r3, #24
 8008c18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c1c:	4931      	ldr	r1, [pc, #196]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c22:	4b30      	ldr	r3, [pc, #192]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	492d      	ldr	r1, [pc, #180]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c30:	4313      	orrs	r3, r2
 8008c32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c34:	4b2b      	ldr	r3, [pc, #172]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	699b      	ldr	r3, [r3, #24]
 8008c40:	4928      	ldr	r1, [pc, #160]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c46:	4b27      	ldr	r3, [pc, #156]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4a:	4a26      	ldr	r2, [pc, #152]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c52:	4b24      	ldr	r3, [pc, #144]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c56:	4b24      	ldr	r3, [pc, #144]	; (8008ce8 <RCCEx_PLL3_Config+0x160>)
 8008c58:	4013      	ands	r3, r2
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	69d2      	ldr	r2, [r2, #28]
 8008c5e:	00d2      	lsls	r2, r2, #3
 8008c60:	4920      	ldr	r1, [pc, #128]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c66:	4b1f      	ldr	r3, [pc, #124]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	4a1e      	ldr	r2, [pc, #120]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d106      	bne.n	8008c86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c78:	4b1a      	ldr	r3, [pc, #104]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7c:	4a19      	ldr	r2, [pc, #100]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c84:	e00f      	b.n	8008ca6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d106      	bne.n	8008c9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c8c:	4b15      	ldr	r3, [pc, #84]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c90:	4a14      	ldr	r2, [pc, #80]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c98:	e005      	b.n	8008ca6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c9a:	4b12      	ldr	r3, [pc, #72]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9e:	4a11      	ldr	r2, [pc, #68]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008ca0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ca6:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4a0e      	ldr	r2, [pc, #56]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cb2:	f7f9 fad7 	bl	8002264 <HAL_GetTick>
 8008cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cb8:	e008      	b.n	8008ccc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008cba:	f7f9 fad3 	bl	8002264 <HAL_GetTick>
 8008cbe:	4602      	mov	r2, r0
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	d901      	bls.n	8008ccc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e006      	b.n	8008cda <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ccc:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <RCCEx_PLL3_Config+0x15c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d0f0      	beq.n	8008cba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	58024400 	.word	0x58024400
 8008ce8:	ffff0007 	.word	0xffff0007

08008cec <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008cfa:	2301      	movs	r3, #1
 8008cfc:	e092      	b.n	8008e24 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	7a5b      	ldrb	r3, [r3, #9]
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d105      	bne.n	8008d14 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f7f8 fcf2 	bl	80016f8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f022 0204 	bic.w	r2, r2, #4
 8008d28:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	4b3e      	ldr	r3, [pc, #248]	; (8008e2c <HAL_RNG_Init+0x140>)
 8008d32:	4013      	ands	r3, r2
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	6852      	ldr	r2, [r2, #4]
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008d42:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a39      	ldr	r2, [pc, #228]	; (8008e30 <HAL_RNG_Init+0x144>)
 8008d4a:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f247 2274 	movw	r2, #29300	; 0x7274
 8008d54:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8008d64:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008d66:	f7f9 fa7d 	bl	8002264 <HAL_GetTick>
 8008d6a:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008d6c:	e016      	b.n	8008d9c <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008d6e:	f7f9 fa79 	bl	8002264 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d90f      	bls.n	8008d9c <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d8a:	d107      	bne.n	8008d9c <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2202      	movs	r2, #2
 8008d96:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e043      	b.n	8008e24 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008daa:	d0e0      	beq.n	8008d6e <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f042 0204 	orr.w	r2, r2, #4
 8008dba:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dc6:	2b40      	cmp	r3, #64	; 0x40
 8008dc8:	d104      	bne.n	8008dd4 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2204      	movs	r2, #4
 8008dce:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e027      	b.n	8008e24 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008dd4:	f7f9 fa46 	bl	8002264 <HAL_GetTick>
 8008dd8:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008dda:	e015      	b.n	8008e08 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008ddc:	f7f9 fa42 	bl	8002264 <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d90e      	bls.n	8008e08 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	f003 0304 	and.w	r3, r3, #4
 8008df4:	2b04      	cmp	r3, #4
 8008df6:	d107      	bne.n	8008e08 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2202      	movs	r2, #2
 8008e02:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8008e04:	2301      	movs	r3, #1
 8008e06:	e00d      	b.n	8008e24 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f003 0304 	and.w	r3, r3, #4
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	d0e2      	beq.n	8008ddc <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8008e22:	2300      	movs	r3, #0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	bfffffdf 	.word	0xbfffffdf
 8008e30:	17590abc 	.word	0x17590abc

08008e34 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d101      	bne.n	8008e46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e10f      	b.n	8009066 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a87      	ldr	r2, [pc, #540]	; (8009070 <HAL_SPI_Init+0x23c>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d00f      	beq.n	8008e76 <HAL_SPI_Init+0x42>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a86      	ldr	r2, [pc, #536]	; (8009074 <HAL_SPI_Init+0x240>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00a      	beq.n	8008e76 <HAL_SPI_Init+0x42>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a84      	ldr	r2, [pc, #528]	; (8009078 <HAL_SPI_Init+0x244>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d005      	beq.n	8008e76 <HAL_SPI_Init+0x42>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	2b0f      	cmp	r3, #15
 8008e70:	d901      	bls.n	8008e76 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	e0f7      	b.n	8009066 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f900 	bl	800907c <SPI_GetPacketSize>
 8008e7c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a7b      	ldr	r2, [pc, #492]	; (8009070 <HAL_SPI_Init+0x23c>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d00c      	beq.n	8008ea2 <HAL_SPI_Init+0x6e>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a79      	ldr	r2, [pc, #484]	; (8009074 <HAL_SPI_Init+0x240>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d007      	beq.n	8008ea2 <HAL_SPI_Init+0x6e>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a78      	ldr	r2, [pc, #480]	; (8009078 <HAL_SPI_Init+0x244>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d002      	beq.n	8008ea2 <HAL_SPI_Init+0x6e>
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b08      	cmp	r3, #8
 8008ea0:	d811      	bhi.n	8008ec6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008ea6:	4a72      	ldr	r2, [pc, #456]	; (8009070 <HAL_SPI_Init+0x23c>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d009      	beq.n	8008ec0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a70      	ldr	r2, [pc, #448]	; (8009074 <HAL_SPI_Init+0x240>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d004      	beq.n	8008ec0 <HAL_SPI_Init+0x8c>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a6f      	ldr	r2, [pc, #444]	; (8009078 <HAL_SPI_Init+0x244>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d104      	bne.n	8008eca <HAL_SPI_Init+0x96>
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b10      	cmp	r3, #16
 8008ec4:	d901      	bls.n	8008eca <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e0cd      	b.n	8009066 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d106      	bne.n	8008ee4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7f8 fcb0 	bl	8001844 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0201 	bic.w	r2, r2, #1
 8008efa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	689b      	ldr	r3, [r3, #8]
 8008f02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008f06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f10:	d119      	bne.n	8008f46 <HAL_SPI_Init+0x112>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f1a:	d103      	bne.n	8008f24 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d008      	beq.n	8008f36 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10c      	bne.n	8008f46 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f34:	d107      	bne.n	8008f46 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00f      	beq.n	8008f72 <HAL_SPI_Init+0x13e>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d90b      	bls.n	8008f72 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	e007      	b.n	8008f82 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	681a      	ldr	r2, [r3, #0]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f80:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69da      	ldr	r2, [r3, #28]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f94:	ea42 0103 	orr.w	r1, r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68da      	ldr	r2, [r3, #12]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	430a      	orrs	r2, r1
 8008fa2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	431a      	orrs	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	695b      	ldr	r3, [r3, #20]
 8008fc4:	431a      	orrs	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	431a      	orrs	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd6:	431a      	orrs	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fe2:	ea42 0103 	orr.w	r1, r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	430a      	orrs	r2, r1
 8008ff0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d113      	bne.n	8009022 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800900c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009020:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0201 	bic.w	r2, r2, #1
 8009030:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00a      	beq.n	8009054 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	40013000 	.word	0x40013000
 8009074:	40003800 	.word	0x40003800
 8009078:	40003c00 	.word	0x40003c00

0800907c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009088:	095b      	lsrs	r3, r3, #5
 800908a:	3301      	adds	r3, #1
 800908c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	3301      	adds	r3, #1
 8009094:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	3307      	adds	r3, #7
 800909a:	08db      	lsrs	r3, r3, #3
 800909c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b082      	sub	sp, #8
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e042      	b.n	800914a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d106      	bne.n	80090dc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2200      	movs	r2, #0
 80090d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f7f8 fecc 	bl	8001e74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2224      	movs	r2, #36	; 0x24
 80090e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0201 	bic.w	r2, r2, #1
 80090f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f91d 	bl	8009334 <UART_SetConfig>
 80090fa:	4603      	mov	r3, r0
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d101      	bne.n	8009104 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e022      	b.n	800914a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009108:	2b00      	cmp	r3, #0
 800910a:	d002      	beq.n	8009112 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 ff7d 	bl	800a00c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009120:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689a      	ldr	r2, [r3, #8]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009130:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0201 	orr.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f001 f804 	bl	800a150 <UART_CheckIdleState>
 8009148:	4603      	mov	r3, r0
}
 800914a:	4618      	mov	r0, r3
 800914c:	3708      	adds	r7, #8
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b08a      	sub	sp, #40	; 0x28
 8009156:	af02      	add	r7, sp, #8
 8009158:	60f8      	str	r0, [r7, #12]
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	603b      	str	r3, [r7, #0]
 800915e:	4613      	mov	r3, r2
 8009160:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009168:	2b20      	cmp	r3, #32
 800916a:	d17b      	bne.n	8009264 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <HAL_UART_Transmit+0x26>
 8009172:	88fb      	ldrh	r3, [r7, #6]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d101      	bne.n	800917c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	e074      	b.n	8009266 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2221      	movs	r2, #33	; 0x21
 8009188:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800918c:	f7f9 f86a 	bl	8002264 <HAL_GetTick>
 8009190:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	88fa      	ldrh	r2, [r7, #6]
 8009196:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	88fa      	ldrh	r2, [r7, #6]
 800919e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091aa:	d108      	bne.n	80091be <HAL_UART_Transmit+0x6c>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d104      	bne.n	80091be <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80091b4:	2300      	movs	r3, #0
 80091b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	61bb      	str	r3, [r7, #24]
 80091bc:	e003      	b.n	80091c6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091c2:	2300      	movs	r3, #0
 80091c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091c6:	e030      	b.n	800922a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	9300      	str	r3, [sp, #0]
 80091cc:	697b      	ldr	r3, [r7, #20]
 80091ce:	2200      	movs	r2, #0
 80091d0:	2180      	movs	r1, #128	; 0x80
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f001 f866 	bl	800a2a4 <UART_WaitOnFlagUntilTimeout>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d005      	beq.n	80091ea <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e03d      	b.n	8009266 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10b      	bne.n	8009208 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	881b      	ldrh	r3, [r3, #0]
 80091f4:	461a      	mov	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	3302      	adds	r3, #2
 8009204:	61bb      	str	r3, [r7, #24]
 8009206:	e007      	b.n	8009218 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	781a      	ldrb	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	3301      	adds	r3, #1
 8009216:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800921e:	b29b      	uxth	r3, r3
 8009220:	3b01      	subs	r3, #1
 8009222:	b29a      	uxth	r2, r3
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009230:	b29b      	uxth	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1c8      	bne.n	80091c8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	9300      	str	r3, [sp, #0]
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	2200      	movs	r2, #0
 800923e:	2140      	movs	r1, #64	; 0x40
 8009240:	68f8      	ldr	r0, [r7, #12]
 8009242:	f001 f82f 	bl	800a2a4 <UART_WaitOnFlagUntilTimeout>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d005      	beq.n	8009258 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2220      	movs	r2, #32
 8009250:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e006      	b.n	8009266 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2220      	movs	r2, #32
 800925c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	e000      	b.n	8009266 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009264:	2302      	movs	r3, #2
  }
}
 8009266:	4618      	mov	r0, r3
 8009268:	3720      	adds	r7, #32
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
	...

08009270 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08a      	sub	sp, #40	; 0x28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	4613      	mov	r3, r2
 800927c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009284:	2b20      	cmp	r3, #32
 8009286:	d137      	bne.n	80092f8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d002      	beq.n	8009294 <HAL_UART_Receive_IT+0x24>
 800928e:	88fb      	ldrh	r3, [r7, #6]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d101      	bne.n	8009298 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e030      	b.n	80092fa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2200      	movs	r2, #0
 800929c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a18      	ldr	r2, [pc, #96]	; (8009304 <HAL_UART_Receive_IT+0x94>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d01f      	beq.n	80092e8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d018      	beq.n	80092e8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	e853 3f00 	ldrex	r3, [r3]
 80092c2:	613b      	str	r3, [r7, #16]
   return(result);
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092ca:	627b      	str	r3, [r7, #36]	; 0x24
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	461a      	mov	r2, r3
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	623b      	str	r3, [r7, #32]
 80092d6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	69f9      	ldr	r1, [r7, #28]
 80092da:	6a3a      	ldr	r2, [r7, #32]
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80092e2:	69bb      	ldr	r3, [r7, #24]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e6      	bne.n	80092b6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80092e8:	88fb      	ldrh	r3, [r7, #6]
 80092ea:	461a      	mov	r2, r3
 80092ec:	68b9      	ldr	r1, [r7, #8]
 80092ee:	68f8      	ldr	r0, [r7, #12]
 80092f0:	f001 f840 	bl	800a374 <UART_Start_Receive_IT>
 80092f4:	4603      	mov	r3, r0
 80092f6:	e000      	b.n	80092fa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80092f8:	2302      	movs	r3, #2
  }
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3728      	adds	r7, #40	; 0x28
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	58000c00 	.word	0x58000c00

08009308 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009308:	b480      	push	{r7}
 800930a:	b083      	sub	sp, #12
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009310:	bf00      	nop
 8009312:	370c      	adds	r7, #12
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800931c:	b480      	push	{r7}
 800931e:	b083      	sub	sp, #12
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	460b      	mov	r3, r1
 8009326:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009338:	b092      	sub	sp, #72	; 0x48
 800933a:	af00      	add	r7, sp, #0
 800933c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800933e:	2300      	movs	r3, #0
 8009340:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	689a      	ldr	r2, [r3, #8]
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	691b      	ldr	r3, [r3, #16]
 800934c:	431a      	orrs	r2, r3
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	431a      	orrs	r2, r3
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	4313      	orrs	r3, r2
 800935a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	4bbe      	ldr	r3, [pc, #760]	; (800965c <UART_SetConfig+0x328>)
 8009364:	4013      	ands	r3, r2
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	6812      	ldr	r2, [r2, #0]
 800936a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800936c:	430b      	orrs	r3, r1
 800936e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	68da      	ldr	r2, [r3, #12]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4ab3      	ldr	r2, [pc, #716]	; (8009660 <UART_SetConfig+0x32c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d004      	beq.n	80093a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800939c:	4313      	orrs	r3, r2
 800939e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689a      	ldr	r2, [r3, #8]
 80093a6:	4baf      	ldr	r3, [pc, #700]	; (8009664 <UART_SetConfig+0x330>)
 80093a8:	4013      	ands	r3, r2
 80093aa:	697a      	ldr	r2, [r7, #20]
 80093ac:	6812      	ldr	r2, [r2, #0]
 80093ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093b0:	430b      	orrs	r3, r1
 80093b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	f023 010f 	bic.w	r1, r3, #15
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4aa6      	ldr	r2, [pc, #664]	; (8009668 <UART_SetConfig+0x334>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d177      	bne.n	80094c4 <UART_SetConfig+0x190>
 80093d4:	4ba5      	ldr	r3, [pc, #660]	; (800966c <UART_SetConfig+0x338>)
 80093d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093dc:	2b28      	cmp	r3, #40	; 0x28
 80093de:	d86d      	bhi.n	80094bc <UART_SetConfig+0x188>
 80093e0:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <UART_SetConfig+0xb4>)
 80093e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e6:	bf00      	nop
 80093e8:	0800948d 	.word	0x0800948d
 80093ec:	080094bd 	.word	0x080094bd
 80093f0:	080094bd 	.word	0x080094bd
 80093f4:	080094bd 	.word	0x080094bd
 80093f8:	080094bd 	.word	0x080094bd
 80093fc:	080094bd 	.word	0x080094bd
 8009400:	080094bd 	.word	0x080094bd
 8009404:	080094bd 	.word	0x080094bd
 8009408:	08009495 	.word	0x08009495
 800940c:	080094bd 	.word	0x080094bd
 8009410:	080094bd 	.word	0x080094bd
 8009414:	080094bd 	.word	0x080094bd
 8009418:	080094bd 	.word	0x080094bd
 800941c:	080094bd 	.word	0x080094bd
 8009420:	080094bd 	.word	0x080094bd
 8009424:	080094bd 	.word	0x080094bd
 8009428:	0800949d 	.word	0x0800949d
 800942c:	080094bd 	.word	0x080094bd
 8009430:	080094bd 	.word	0x080094bd
 8009434:	080094bd 	.word	0x080094bd
 8009438:	080094bd 	.word	0x080094bd
 800943c:	080094bd 	.word	0x080094bd
 8009440:	080094bd 	.word	0x080094bd
 8009444:	080094bd 	.word	0x080094bd
 8009448:	080094a5 	.word	0x080094a5
 800944c:	080094bd 	.word	0x080094bd
 8009450:	080094bd 	.word	0x080094bd
 8009454:	080094bd 	.word	0x080094bd
 8009458:	080094bd 	.word	0x080094bd
 800945c:	080094bd 	.word	0x080094bd
 8009460:	080094bd 	.word	0x080094bd
 8009464:	080094bd 	.word	0x080094bd
 8009468:	080094ad 	.word	0x080094ad
 800946c:	080094bd 	.word	0x080094bd
 8009470:	080094bd 	.word	0x080094bd
 8009474:	080094bd 	.word	0x080094bd
 8009478:	080094bd 	.word	0x080094bd
 800947c:	080094bd 	.word	0x080094bd
 8009480:	080094bd 	.word	0x080094bd
 8009484:	080094bd 	.word	0x080094bd
 8009488:	080094b5 	.word	0x080094b5
 800948c:	2301      	movs	r3, #1
 800948e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009492:	e326      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009494:	2304      	movs	r3, #4
 8009496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800949a:	e322      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 800949c:	2308      	movs	r3, #8
 800949e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094a2:	e31e      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80094a4:	2310      	movs	r3, #16
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094aa:	e31a      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80094ac:	2320      	movs	r3, #32
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094b2:	e316      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80094b4:	2340      	movs	r3, #64	; 0x40
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ba:	e312      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80094bc:	2380      	movs	r3, #128	; 0x80
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094c2:	e30e      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	4a69      	ldr	r2, [pc, #420]	; (8009670 <UART_SetConfig+0x33c>)
 80094ca:	4293      	cmp	r3, r2
 80094cc:	d130      	bne.n	8009530 <UART_SetConfig+0x1fc>
 80094ce:	4b67      	ldr	r3, [pc, #412]	; (800966c <UART_SetConfig+0x338>)
 80094d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094d2:	f003 0307 	and.w	r3, r3, #7
 80094d6:	2b05      	cmp	r3, #5
 80094d8:	d826      	bhi.n	8009528 <UART_SetConfig+0x1f4>
 80094da:	a201      	add	r2, pc, #4	; (adr r2, 80094e0 <UART_SetConfig+0x1ac>)
 80094dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e0:	080094f9 	.word	0x080094f9
 80094e4:	08009501 	.word	0x08009501
 80094e8:	08009509 	.word	0x08009509
 80094ec:	08009511 	.word	0x08009511
 80094f0:	08009519 	.word	0x08009519
 80094f4:	08009521 	.word	0x08009521
 80094f8:	2300      	movs	r3, #0
 80094fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fe:	e2f0      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009500:	2304      	movs	r3, #4
 8009502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009506:	e2ec      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009508:	2308      	movs	r3, #8
 800950a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800950e:	e2e8      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009510:	2310      	movs	r3, #16
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009516:	e2e4      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009518:	2320      	movs	r3, #32
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951e:	e2e0      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009520:	2340      	movs	r3, #64	; 0x40
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009526:	e2dc      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009528:	2380      	movs	r3, #128	; 0x80
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800952e:	e2d8      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009530:	697b      	ldr	r3, [r7, #20]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a4f      	ldr	r2, [pc, #316]	; (8009674 <UART_SetConfig+0x340>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d130      	bne.n	800959c <UART_SetConfig+0x268>
 800953a:	4b4c      	ldr	r3, [pc, #304]	; (800966c <UART_SetConfig+0x338>)
 800953c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800953e:	f003 0307 	and.w	r3, r3, #7
 8009542:	2b05      	cmp	r3, #5
 8009544:	d826      	bhi.n	8009594 <UART_SetConfig+0x260>
 8009546:	a201      	add	r2, pc, #4	; (adr r2, 800954c <UART_SetConfig+0x218>)
 8009548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954c:	08009565 	.word	0x08009565
 8009550:	0800956d 	.word	0x0800956d
 8009554:	08009575 	.word	0x08009575
 8009558:	0800957d 	.word	0x0800957d
 800955c:	08009585 	.word	0x08009585
 8009560:	0800958d 	.word	0x0800958d
 8009564:	2300      	movs	r3, #0
 8009566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956a:	e2ba      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 800956c:	2304      	movs	r3, #4
 800956e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009572:	e2b6      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009574:	2308      	movs	r3, #8
 8009576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800957a:	e2b2      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 800957c:	2310      	movs	r3, #16
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009582:	e2ae      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009584:	2320      	movs	r3, #32
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800958a:	e2aa      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 800958c:	2340      	movs	r3, #64	; 0x40
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009592:	e2a6      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009594:	2380      	movs	r3, #128	; 0x80
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800959a:	e2a2      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a35      	ldr	r2, [pc, #212]	; (8009678 <UART_SetConfig+0x344>)
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d130      	bne.n	8009608 <UART_SetConfig+0x2d4>
 80095a6:	4b31      	ldr	r3, [pc, #196]	; (800966c <UART_SetConfig+0x338>)
 80095a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095aa:	f003 0307 	and.w	r3, r3, #7
 80095ae:	2b05      	cmp	r3, #5
 80095b0:	d826      	bhi.n	8009600 <UART_SetConfig+0x2cc>
 80095b2:	a201      	add	r2, pc, #4	; (adr r2, 80095b8 <UART_SetConfig+0x284>)
 80095b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095b8:	080095d1 	.word	0x080095d1
 80095bc:	080095d9 	.word	0x080095d9
 80095c0:	080095e1 	.word	0x080095e1
 80095c4:	080095e9 	.word	0x080095e9
 80095c8:	080095f1 	.word	0x080095f1
 80095cc:	080095f9 	.word	0x080095f9
 80095d0:	2300      	movs	r3, #0
 80095d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d6:	e284      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80095d8:	2304      	movs	r3, #4
 80095da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095de:	e280      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80095e0:	2308      	movs	r3, #8
 80095e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095e6:	e27c      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80095e8:	2310      	movs	r3, #16
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ee:	e278      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80095f0:	2320      	movs	r3, #32
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f6:	e274      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80095f8:	2340      	movs	r3, #64	; 0x40
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095fe:	e270      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009600:	2380      	movs	r3, #128	; 0x80
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009606:	e26c      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a1b      	ldr	r2, [pc, #108]	; (800967c <UART_SetConfig+0x348>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d142      	bne.n	8009698 <UART_SetConfig+0x364>
 8009612:	4b16      	ldr	r3, [pc, #88]	; (800966c <UART_SetConfig+0x338>)
 8009614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009616:	f003 0307 	and.w	r3, r3, #7
 800961a:	2b05      	cmp	r3, #5
 800961c:	d838      	bhi.n	8009690 <UART_SetConfig+0x35c>
 800961e:	a201      	add	r2, pc, #4	; (adr r2, 8009624 <UART_SetConfig+0x2f0>)
 8009620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009624:	0800963d 	.word	0x0800963d
 8009628:	08009645 	.word	0x08009645
 800962c:	0800964d 	.word	0x0800964d
 8009630:	08009655 	.word	0x08009655
 8009634:	08009681 	.word	0x08009681
 8009638:	08009689 	.word	0x08009689
 800963c:	2300      	movs	r3, #0
 800963e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009642:	e24e      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009644:	2304      	movs	r3, #4
 8009646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800964a:	e24a      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 800964c:	2308      	movs	r3, #8
 800964e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009652:	e246      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009654:	2310      	movs	r3, #16
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965a:	e242      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 800965c:	cfff69f3 	.word	0xcfff69f3
 8009660:	58000c00 	.word	0x58000c00
 8009664:	11fff4ff 	.word	0x11fff4ff
 8009668:	40011000 	.word	0x40011000
 800966c:	58024400 	.word	0x58024400
 8009670:	40004400 	.word	0x40004400
 8009674:	40004800 	.word	0x40004800
 8009678:	40004c00 	.word	0x40004c00
 800967c:	40005000 	.word	0x40005000
 8009680:	2320      	movs	r3, #32
 8009682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009686:	e22c      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009688:	2340      	movs	r3, #64	; 0x40
 800968a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800968e:	e228      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009690:	2380      	movs	r3, #128	; 0x80
 8009692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009696:	e224      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4ab1      	ldr	r2, [pc, #708]	; (8009964 <UART_SetConfig+0x630>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d176      	bne.n	8009790 <UART_SetConfig+0x45c>
 80096a2:	4bb1      	ldr	r3, [pc, #708]	; (8009968 <UART_SetConfig+0x634>)
 80096a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096aa:	2b28      	cmp	r3, #40	; 0x28
 80096ac:	d86c      	bhi.n	8009788 <UART_SetConfig+0x454>
 80096ae:	a201      	add	r2, pc, #4	; (adr r2, 80096b4 <UART_SetConfig+0x380>)
 80096b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b4:	08009759 	.word	0x08009759
 80096b8:	08009789 	.word	0x08009789
 80096bc:	08009789 	.word	0x08009789
 80096c0:	08009789 	.word	0x08009789
 80096c4:	08009789 	.word	0x08009789
 80096c8:	08009789 	.word	0x08009789
 80096cc:	08009789 	.word	0x08009789
 80096d0:	08009789 	.word	0x08009789
 80096d4:	08009761 	.word	0x08009761
 80096d8:	08009789 	.word	0x08009789
 80096dc:	08009789 	.word	0x08009789
 80096e0:	08009789 	.word	0x08009789
 80096e4:	08009789 	.word	0x08009789
 80096e8:	08009789 	.word	0x08009789
 80096ec:	08009789 	.word	0x08009789
 80096f0:	08009789 	.word	0x08009789
 80096f4:	08009769 	.word	0x08009769
 80096f8:	08009789 	.word	0x08009789
 80096fc:	08009789 	.word	0x08009789
 8009700:	08009789 	.word	0x08009789
 8009704:	08009789 	.word	0x08009789
 8009708:	08009789 	.word	0x08009789
 800970c:	08009789 	.word	0x08009789
 8009710:	08009789 	.word	0x08009789
 8009714:	08009771 	.word	0x08009771
 8009718:	08009789 	.word	0x08009789
 800971c:	08009789 	.word	0x08009789
 8009720:	08009789 	.word	0x08009789
 8009724:	08009789 	.word	0x08009789
 8009728:	08009789 	.word	0x08009789
 800972c:	08009789 	.word	0x08009789
 8009730:	08009789 	.word	0x08009789
 8009734:	08009779 	.word	0x08009779
 8009738:	08009789 	.word	0x08009789
 800973c:	08009789 	.word	0x08009789
 8009740:	08009789 	.word	0x08009789
 8009744:	08009789 	.word	0x08009789
 8009748:	08009789 	.word	0x08009789
 800974c:	08009789 	.word	0x08009789
 8009750:	08009789 	.word	0x08009789
 8009754:	08009781 	.word	0x08009781
 8009758:	2301      	movs	r3, #1
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975e:	e1c0      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009760:	2304      	movs	r3, #4
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009766:	e1bc      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009768:	2308      	movs	r3, #8
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800976e:	e1b8      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009770:	2310      	movs	r3, #16
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009776:	e1b4      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009778:	2320      	movs	r3, #32
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800977e:	e1b0      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009780:	2340      	movs	r3, #64	; 0x40
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009786:	e1ac      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009788:	2380      	movs	r3, #128	; 0x80
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978e:	e1a8      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a75      	ldr	r2, [pc, #468]	; (800996c <UART_SetConfig+0x638>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d130      	bne.n	80097fc <UART_SetConfig+0x4c8>
 800979a:	4b73      	ldr	r3, [pc, #460]	; (8009968 <UART_SetConfig+0x634>)
 800979c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800979e:	f003 0307 	and.w	r3, r3, #7
 80097a2:	2b05      	cmp	r3, #5
 80097a4:	d826      	bhi.n	80097f4 <UART_SetConfig+0x4c0>
 80097a6:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <UART_SetConfig+0x478>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	080097c5 	.word	0x080097c5
 80097b0:	080097cd 	.word	0x080097cd
 80097b4:	080097d5 	.word	0x080097d5
 80097b8:	080097dd 	.word	0x080097dd
 80097bc:	080097e5 	.word	0x080097e5
 80097c0:	080097ed 	.word	0x080097ed
 80097c4:	2300      	movs	r3, #0
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ca:	e18a      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80097cc:	2304      	movs	r3, #4
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d2:	e186      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80097d4:	2308      	movs	r3, #8
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097da:	e182      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80097dc:	2310      	movs	r3, #16
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e2:	e17e      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80097e4:	2320      	movs	r3, #32
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ea:	e17a      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80097ec:	2340      	movs	r3, #64	; 0x40
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f2:	e176      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80097f4:	2380      	movs	r3, #128	; 0x80
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e172      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a5b      	ldr	r2, [pc, #364]	; (8009970 <UART_SetConfig+0x63c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d130      	bne.n	8009868 <UART_SetConfig+0x534>
 8009806:	4b58      	ldr	r3, [pc, #352]	; (8009968 <UART_SetConfig+0x634>)
 8009808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980a:	f003 0307 	and.w	r3, r3, #7
 800980e:	2b05      	cmp	r3, #5
 8009810:	d826      	bhi.n	8009860 <UART_SetConfig+0x52c>
 8009812:	a201      	add	r2, pc, #4	; (adr r2, 8009818 <UART_SetConfig+0x4e4>)
 8009814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009818:	08009831 	.word	0x08009831
 800981c:	08009839 	.word	0x08009839
 8009820:	08009841 	.word	0x08009841
 8009824:	08009849 	.word	0x08009849
 8009828:	08009851 	.word	0x08009851
 800982c:	08009859 	.word	0x08009859
 8009830:	2300      	movs	r3, #0
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009836:	e154      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009838:	2304      	movs	r3, #4
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983e:	e150      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009840:	2308      	movs	r3, #8
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009846:	e14c      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009848:	2310      	movs	r3, #16
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984e:	e148      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009850:	2320      	movs	r3, #32
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009856:	e144      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009858:	2340      	movs	r3, #64	; 0x40
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e140      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009860:	2380      	movs	r3, #128	; 0x80
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009866:	e13c      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a41      	ldr	r2, [pc, #260]	; (8009974 <UART_SetConfig+0x640>)
 800986e:	4293      	cmp	r3, r2
 8009870:	f040 8082 	bne.w	8009978 <UART_SetConfig+0x644>
 8009874:	4b3c      	ldr	r3, [pc, #240]	; (8009968 <UART_SetConfig+0x634>)
 8009876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009878:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800987c:	2b28      	cmp	r3, #40	; 0x28
 800987e:	d86d      	bhi.n	800995c <UART_SetConfig+0x628>
 8009880:	a201      	add	r2, pc, #4	; (adr r2, 8009888 <UART_SetConfig+0x554>)
 8009882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009886:	bf00      	nop
 8009888:	0800992d 	.word	0x0800992d
 800988c:	0800995d 	.word	0x0800995d
 8009890:	0800995d 	.word	0x0800995d
 8009894:	0800995d 	.word	0x0800995d
 8009898:	0800995d 	.word	0x0800995d
 800989c:	0800995d 	.word	0x0800995d
 80098a0:	0800995d 	.word	0x0800995d
 80098a4:	0800995d 	.word	0x0800995d
 80098a8:	08009935 	.word	0x08009935
 80098ac:	0800995d 	.word	0x0800995d
 80098b0:	0800995d 	.word	0x0800995d
 80098b4:	0800995d 	.word	0x0800995d
 80098b8:	0800995d 	.word	0x0800995d
 80098bc:	0800995d 	.word	0x0800995d
 80098c0:	0800995d 	.word	0x0800995d
 80098c4:	0800995d 	.word	0x0800995d
 80098c8:	0800993d 	.word	0x0800993d
 80098cc:	0800995d 	.word	0x0800995d
 80098d0:	0800995d 	.word	0x0800995d
 80098d4:	0800995d 	.word	0x0800995d
 80098d8:	0800995d 	.word	0x0800995d
 80098dc:	0800995d 	.word	0x0800995d
 80098e0:	0800995d 	.word	0x0800995d
 80098e4:	0800995d 	.word	0x0800995d
 80098e8:	08009945 	.word	0x08009945
 80098ec:	0800995d 	.word	0x0800995d
 80098f0:	0800995d 	.word	0x0800995d
 80098f4:	0800995d 	.word	0x0800995d
 80098f8:	0800995d 	.word	0x0800995d
 80098fc:	0800995d 	.word	0x0800995d
 8009900:	0800995d 	.word	0x0800995d
 8009904:	0800995d 	.word	0x0800995d
 8009908:	0800994d 	.word	0x0800994d
 800990c:	0800995d 	.word	0x0800995d
 8009910:	0800995d 	.word	0x0800995d
 8009914:	0800995d 	.word	0x0800995d
 8009918:	0800995d 	.word	0x0800995d
 800991c:	0800995d 	.word	0x0800995d
 8009920:	0800995d 	.word	0x0800995d
 8009924:	0800995d 	.word	0x0800995d
 8009928:	08009955 	.word	0x08009955
 800992c:	2301      	movs	r3, #1
 800992e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009932:	e0d6      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009934:	2304      	movs	r3, #4
 8009936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800993a:	e0d2      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 800993c:	2308      	movs	r3, #8
 800993e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009942:	e0ce      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009944:	2310      	movs	r3, #16
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800994a:	e0ca      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 800994c:	2320      	movs	r3, #32
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009952:	e0c6      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009954:	2340      	movs	r3, #64	; 0x40
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995a:	e0c2      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 800995c:	2380      	movs	r3, #128	; 0x80
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009962:	e0be      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009964:	40011400 	.word	0x40011400
 8009968:	58024400 	.word	0x58024400
 800996c:	40007800 	.word	0x40007800
 8009970:	40007c00 	.word	0x40007c00
 8009974:	40011800 	.word	0x40011800
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4aad      	ldr	r2, [pc, #692]	; (8009c34 <UART_SetConfig+0x900>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d176      	bne.n	8009a70 <UART_SetConfig+0x73c>
 8009982:	4bad      	ldr	r3, [pc, #692]	; (8009c38 <UART_SetConfig+0x904>)
 8009984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009986:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800998a:	2b28      	cmp	r3, #40	; 0x28
 800998c:	d86c      	bhi.n	8009a68 <UART_SetConfig+0x734>
 800998e:	a201      	add	r2, pc, #4	; (adr r2, 8009994 <UART_SetConfig+0x660>)
 8009990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009994:	08009a39 	.word	0x08009a39
 8009998:	08009a69 	.word	0x08009a69
 800999c:	08009a69 	.word	0x08009a69
 80099a0:	08009a69 	.word	0x08009a69
 80099a4:	08009a69 	.word	0x08009a69
 80099a8:	08009a69 	.word	0x08009a69
 80099ac:	08009a69 	.word	0x08009a69
 80099b0:	08009a69 	.word	0x08009a69
 80099b4:	08009a41 	.word	0x08009a41
 80099b8:	08009a69 	.word	0x08009a69
 80099bc:	08009a69 	.word	0x08009a69
 80099c0:	08009a69 	.word	0x08009a69
 80099c4:	08009a69 	.word	0x08009a69
 80099c8:	08009a69 	.word	0x08009a69
 80099cc:	08009a69 	.word	0x08009a69
 80099d0:	08009a69 	.word	0x08009a69
 80099d4:	08009a49 	.word	0x08009a49
 80099d8:	08009a69 	.word	0x08009a69
 80099dc:	08009a69 	.word	0x08009a69
 80099e0:	08009a69 	.word	0x08009a69
 80099e4:	08009a69 	.word	0x08009a69
 80099e8:	08009a69 	.word	0x08009a69
 80099ec:	08009a69 	.word	0x08009a69
 80099f0:	08009a69 	.word	0x08009a69
 80099f4:	08009a51 	.word	0x08009a51
 80099f8:	08009a69 	.word	0x08009a69
 80099fc:	08009a69 	.word	0x08009a69
 8009a00:	08009a69 	.word	0x08009a69
 8009a04:	08009a69 	.word	0x08009a69
 8009a08:	08009a69 	.word	0x08009a69
 8009a0c:	08009a69 	.word	0x08009a69
 8009a10:	08009a69 	.word	0x08009a69
 8009a14:	08009a59 	.word	0x08009a59
 8009a18:	08009a69 	.word	0x08009a69
 8009a1c:	08009a69 	.word	0x08009a69
 8009a20:	08009a69 	.word	0x08009a69
 8009a24:	08009a69 	.word	0x08009a69
 8009a28:	08009a69 	.word	0x08009a69
 8009a2c:	08009a69 	.word	0x08009a69
 8009a30:	08009a69 	.word	0x08009a69
 8009a34:	08009a61 	.word	0x08009a61
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3e:	e050      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009a40:	2304      	movs	r3, #4
 8009a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a46:	e04c      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009a48:	2308      	movs	r3, #8
 8009a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4e:	e048      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009a50:	2310      	movs	r3, #16
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a56:	e044      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009a58:	2320      	movs	r3, #32
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5e:	e040      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009a60:	2340      	movs	r3, #64	; 0x40
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a66:	e03c      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009a68:	2380      	movs	r3, #128	; 0x80
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6e:	e038      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a71      	ldr	r2, [pc, #452]	; (8009c3c <UART_SetConfig+0x908>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d130      	bne.n	8009adc <UART_SetConfig+0x7a8>
 8009a7a:	4b6f      	ldr	r3, [pc, #444]	; (8009c38 <UART_SetConfig+0x904>)
 8009a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b05      	cmp	r3, #5
 8009a84:	d826      	bhi.n	8009ad4 <UART_SetConfig+0x7a0>
 8009a86:	a201      	add	r2, pc, #4	; (adr r2, 8009a8c <UART_SetConfig+0x758>)
 8009a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8c:	08009aa5 	.word	0x08009aa5
 8009a90:	08009aad 	.word	0x08009aad
 8009a94:	08009ab5 	.word	0x08009ab5
 8009a98:	08009abd 	.word	0x08009abd
 8009a9c:	08009ac5 	.word	0x08009ac5
 8009aa0:	08009acd 	.word	0x08009acd
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aaa:	e01a      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009aac:	2304      	movs	r3, #4
 8009aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab2:	e016      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009ab4:	2308      	movs	r3, #8
 8009ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aba:	e012      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009abc:	2310      	movs	r3, #16
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac2:	e00e      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009ac4:	2320      	movs	r3, #32
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aca:	e00a      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009acc:	2340      	movs	r3, #64	; 0x40
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad2:	e006      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009ad4:	2380      	movs	r3, #128	; 0x80
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ada:	e002      	b.n	8009ae2 <UART_SetConfig+0x7ae>
 8009adc:	2380      	movs	r3, #128	; 0x80
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	4a55      	ldr	r2, [pc, #340]	; (8009c3c <UART_SetConfig+0x908>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	f040 80f8 	bne.w	8009cde <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009aee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	dc46      	bgt.n	8009b84 <UART_SetConfig+0x850>
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	db75      	blt.n	8009be6 <UART_SetConfig+0x8b2>
 8009afa:	3b02      	subs	r3, #2
 8009afc:	2b1e      	cmp	r3, #30
 8009afe:	d872      	bhi.n	8009be6 <UART_SetConfig+0x8b2>
 8009b00:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <UART_SetConfig+0x7d4>)
 8009b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b06:	bf00      	nop
 8009b08:	08009b8b 	.word	0x08009b8b
 8009b0c:	08009be7 	.word	0x08009be7
 8009b10:	08009b93 	.word	0x08009b93
 8009b14:	08009be7 	.word	0x08009be7
 8009b18:	08009be7 	.word	0x08009be7
 8009b1c:	08009be7 	.word	0x08009be7
 8009b20:	08009ba3 	.word	0x08009ba3
 8009b24:	08009be7 	.word	0x08009be7
 8009b28:	08009be7 	.word	0x08009be7
 8009b2c:	08009be7 	.word	0x08009be7
 8009b30:	08009be7 	.word	0x08009be7
 8009b34:	08009be7 	.word	0x08009be7
 8009b38:	08009be7 	.word	0x08009be7
 8009b3c:	08009be7 	.word	0x08009be7
 8009b40:	08009bb3 	.word	0x08009bb3
 8009b44:	08009be7 	.word	0x08009be7
 8009b48:	08009be7 	.word	0x08009be7
 8009b4c:	08009be7 	.word	0x08009be7
 8009b50:	08009be7 	.word	0x08009be7
 8009b54:	08009be7 	.word	0x08009be7
 8009b58:	08009be7 	.word	0x08009be7
 8009b5c:	08009be7 	.word	0x08009be7
 8009b60:	08009be7 	.word	0x08009be7
 8009b64:	08009be7 	.word	0x08009be7
 8009b68:	08009be7 	.word	0x08009be7
 8009b6c:	08009be7 	.word	0x08009be7
 8009b70:	08009be7 	.word	0x08009be7
 8009b74:	08009be7 	.word	0x08009be7
 8009b78:	08009be7 	.word	0x08009be7
 8009b7c:	08009be7 	.word	0x08009be7
 8009b80:	08009bd9 	.word	0x08009bd9
 8009b84:	2b40      	cmp	r3, #64	; 0x40
 8009b86:	d02a      	beq.n	8009bde <UART_SetConfig+0x8aa>
 8009b88:	e02d      	b.n	8009be6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009b8a:	f7fe fb3b 	bl	8008204 <HAL_RCCEx_GetD3PCLK1Freq>
 8009b8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b90:	e02f      	b.n	8009bf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7fe fb4a 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ba0:	e027      	b.n	8009bf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ba2:	f107 0318 	add.w	r3, r7, #24
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	f7fe fc96 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb0:	e01f      	b.n	8009bf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bb2:	4b21      	ldr	r3, [pc, #132]	; (8009c38 <UART_SetConfig+0x904>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f003 0320 	and.w	r3, r3, #32
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d009      	beq.n	8009bd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bbe:	4b1e      	ldr	r3, [pc, #120]	; (8009c38 <UART_SetConfig+0x904>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	08db      	lsrs	r3, r3, #3
 8009bc4:	f003 0303 	and.w	r3, r3, #3
 8009bc8:	4a1d      	ldr	r2, [pc, #116]	; (8009c40 <UART_SetConfig+0x90c>)
 8009bca:	fa22 f303 	lsr.w	r3, r2, r3
 8009bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009bd0:	e00f      	b.n	8009bf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009bd2:	4b1b      	ldr	r3, [pc, #108]	; (8009c40 <UART_SetConfig+0x90c>)
 8009bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bd6:	e00c      	b.n	8009bf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bd8:	4b1a      	ldr	r3, [pc, #104]	; (8009c44 <UART_SetConfig+0x910>)
 8009bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bdc:	e009      	b.n	8009bf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009be2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009be4:	e005      	b.n	8009bf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009bf0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	f000 81ee 	beq.w	8009fd6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfe:	4a12      	ldr	r2, [pc, #72]	; (8009c48 <UART_SetConfig+0x914>)
 8009c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c04:	461a      	mov	r2, r3
 8009c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c0c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	685a      	ldr	r2, [r3, #4]
 8009c12:	4613      	mov	r3, r2
 8009c14:	005b      	lsls	r3, r3, #1
 8009c16:	4413      	add	r3, r2
 8009c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d305      	bcc.n	8009c2a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d910      	bls.n	8009c4c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c30:	e1d1      	b.n	8009fd6 <UART_SetConfig+0xca2>
 8009c32:	bf00      	nop
 8009c34:	40011c00 	.word	0x40011c00
 8009c38:	58024400 	.word	0x58024400
 8009c3c:	58000c00 	.word	0x58000c00
 8009c40:	03d09000 	.word	0x03d09000
 8009c44:	003d0900 	.word	0x003d0900
 8009c48:	0800c0e8 	.word	0x0800c0e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c4e:	2200      	movs	r2, #0
 8009c50:	60bb      	str	r3, [r7, #8]
 8009c52:	60fa      	str	r2, [r7, #12]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c58:	4ac0      	ldr	r2, [pc, #768]	; (8009f5c <UART_SetConfig+0xc28>)
 8009c5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	2200      	movs	r2, #0
 8009c62:	603b      	str	r3, [r7, #0]
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c6a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c6e:	f7f6 fb4d 	bl	800030c <__aeabi_uldivmod>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	4610      	mov	r0, r2
 8009c78:	4619      	mov	r1, r3
 8009c7a:	f04f 0200 	mov.w	r2, #0
 8009c7e:	f04f 0300 	mov.w	r3, #0
 8009c82:	020b      	lsls	r3, r1, #8
 8009c84:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c88:	0202      	lsls	r2, r0, #8
 8009c8a:	6979      	ldr	r1, [r7, #20]
 8009c8c:	6849      	ldr	r1, [r1, #4]
 8009c8e:	0849      	lsrs	r1, r1, #1
 8009c90:	2000      	movs	r0, #0
 8009c92:	460c      	mov	r4, r1
 8009c94:	4605      	mov	r5, r0
 8009c96:	eb12 0804 	adds.w	r8, r2, r4
 8009c9a:	eb43 0905 	adc.w	r9, r3, r5
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	469a      	mov	sl, r3
 8009ca6:	4693      	mov	fp, r2
 8009ca8:	4652      	mov	r2, sl
 8009caa:	465b      	mov	r3, fp
 8009cac:	4640      	mov	r0, r8
 8009cae:	4649      	mov	r1, r9
 8009cb0:	f7f6 fb2c 	bl	800030c <__aeabi_uldivmod>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	4613      	mov	r3, r2
 8009cba:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cc2:	d308      	bcc.n	8009cd6 <UART_SetConfig+0x9a2>
 8009cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cca:	d204      	bcs.n	8009cd6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cd2:	60da      	str	r2, [r3, #12]
 8009cd4:	e17f      	b.n	8009fd6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009cdc:	e17b      	b.n	8009fd6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ce6:	f040 80bd 	bne.w	8009e64 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009cea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009cee:	2b20      	cmp	r3, #32
 8009cf0:	dc48      	bgt.n	8009d84 <UART_SetConfig+0xa50>
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	db7b      	blt.n	8009dee <UART_SetConfig+0xaba>
 8009cf6:	2b20      	cmp	r3, #32
 8009cf8:	d879      	bhi.n	8009dee <UART_SetConfig+0xaba>
 8009cfa:	a201      	add	r2, pc, #4	; (adr r2, 8009d00 <UART_SetConfig+0x9cc>)
 8009cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d00:	08009d8b 	.word	0x08009d8b
 8009d04:	08009d93 	.word	0x08009d93
 8009d08:	08009def 	.word	0x08009def
 8009d0c:	08009def 	.word	0x08009def
 8009d10:	08009d9b 	.word	0x08009d9b
 8009d14:	08009def 	.word	0x08009def
 8009d18:	08009def 	.word	0x08009def
 8009d1c:	08009def 	.word	0x08009def
 8009d20:	08009dab 	.word	0x08009dab
 8009d24:	08009def 	.word	0x08009def
 8009d28:	08009def 	.word	0x08009def
 8009d2c:	08009def 	.word	0x08009def
 8009d30:	08009def 	.word	0x08009def
 8009d34:	08009def 	.word	0x08009def
 8009d38:	08009def 	.word	0x08009def
 8009d3c:	08009def 	.word	0x08009def
 8009d40:	08009dbb 	.word	0x08009dbb
 8009d44:	08009def 	.word	0x08009def
 8009d48:	08009def 	.word	0x08009def
 8009d4c:	08009def 	.word	0x08009def
 8009d50:	08009def 	.word	0x08009def
 8009d54:	08009def 	.word	0x08009def
 8009d58:	08009def 	.word	0x08009def
 8009d5c:	08009def 	.word	0x08009def
 8009d60:	08009def 	.word	0x08009def
 8009d64:	08009def 	.word	0x08009def
 8009d68:	08009def 	.word	0x08009def
 8009d6c:	08009def 	.word	0x08009def
 8009d70:	08009def 	.word	0x08009def
 8009d74:	08009def 	.word	0x08009def
 8009d78:	08009def 	.word	0x08009def
 8009d7c:	08009def 	.word	0x08009def
 8009d80:	08009de1 	.word	0x08009de1
 8009d84:	2b40      	cmp	r3, #64	; 0x40
 8009d86:	d02e      	beq.n	8009de6 <UART_SetConfig+0xab2>
 8009d88:	e031      	b.n	8009dee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d8a:	f7fc fb9d 	bl	80064c8 <HAL_RCC_GetPCLK1Freq>
 8009d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d90:	e033      	b.n	8009dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d92:	f7fc fbaf 	bl	80064f4 <HAL_RCC_GetPCLK2Freq>
 8009d96:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d98:	e02f      	b.n	8009dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7fe fa46 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009da8:	e027      	b.n	8009dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009daa:	f107 0318 	add.w	r3, r7, #24
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7fe fb92 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009db8:	e01f      	b.n	8009dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dba:	4b69      	ldr	r3, [pc, #420]	; (8009f60 <UART_SetConfig+0xc2c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 0320 	and.w	r3, r3, #32
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d009      	beq.n	8009dda <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dc6:	4b66      	ldr	r3, [pc, #408]	; (8009f60 <UART_SetConfig+0xc2c>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	08db      	lsrs	r3, r3, #3
 8009dcc:	f003 0303 	and.w	r3, r3, #3
 8009dd0:	4a64      	ldr	r2, [pc, #400]	; (8009f64 <UART_SetConfig+0xc30>)
 8009dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dd8:	e00f      	b.n	8009dfa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009dda:	4b62      	ldr	r3, [pc, #392]	; (8009f64 <UART_SetConfig+0xc30>)
 8009ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dde:	e00c      	b.n	8009dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009de0:	4b61      	ldr	r3, [pc, #388]	; (8009f68 <UART_SetConfig+0xc34>)
 8009de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009de4:	e009      	b.n	8009dfa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dec:	e005      	b.n	8009dfa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009dee:	2300      	movs	r3, #0
 8009df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009df8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	f000 80ea 	beq.w	8009fd6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e06:	4a55      	ldr	r2, [pc, #340]	; (8009f5c <UART_SetConfig+0xc28>)
 8009e08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e10:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e14:	005a      	lsls	r2, r3, #1
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	085b      	lsrs	r3, r3, #1
 8009e1c:	441a      	add	r2, r3
 8009e1e:	697b      	ldr	r3, [r7, #20]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e26:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2a:	2b0f      	cmp	r3, #15
 8009e2c:	d916      	bls.n	8009e5c <UART_SetConfig+0xb28>
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e34:	d212      	bcs.n	8009e5c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	f023 030f 	bic.w	r3, r3, #15
 8009e3e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	085b      	lsrs	r3, r3, #1
 8009e44:	b29b      	uxth	r3, r3
 8009e46:	f003 0307 	and.w	r3, r3, #7
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009e58:	60da      	str	r2, [r3, #12]
 8009e5a:	e0bc      	b.n	8009fd6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e62:	e0b8      	b.n	8009fd6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e68:	2b20      	cmp	r3, #32
 8009e6a:	dc4b      	bgt.n	8009f04 <UART_SetConfig+0xbd0>
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	f2c0 8087 	blt.w	8009f80 <UART_SetConfig+0xc4c>
 8009e72:	2b20      	cmp	r3, #32
 8009e74:	f200 8084 	bhi.w	8009f80 <UART_SetConfig+0xc4c>
 8009e78:	a201      	add	r2, pc, #4	; (adr r2, 8009e80 <UART_SetConfig+0xb4c>)
 8009e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7e:	bf00      	nop
 8009e80:	08009f0b 	.word	0x08009f0b
 8009e84:	08009f13 	.word	0x08009f13
 8009e88:	08009f81 	.word	0x08009f81
 8009e8c:	08009f81 	.word	0x08009f81
 8009e90:	08009f1b 	.word	0x08009f1b
 8009e94:	08009f81 	.word	0x08009f81
 8009e98:	08009f81 	.word	0x08009f81
 8009e9c:	08009f81 	.word	0x08009f81
 8009ea0:	08009f2b 	.word	0x08009f2b
 8009ea4:	08009f81 	.word	0x08009f81
 8009ea8:	08009f81 	.word	0x08009f81
 8009eac:	08009f81 	.word	0x08009f81
 8009eb0:	08009f81 	.word	0x08009f81
 8009eb4:	08009f81 	.word	0x08009f81
 8009eb8:	08009f81 	.word	0x08009f81
 8009ebc:	08009f81 	.word	0x08009f81
 8009ec0:	08009f3b 	.word	0x08009f3b
 8009ec4:	08009f81 	.word	0x08009f81
 8009ec8:	08009f81 	.word	0x08009f81
 8009ecc:	08009f81 	.word	0x08009f81
 8009ed0:	08009f81 	.word	0x08009f81
 8009ed4:	08009f81 	.word	0x08009f81
 8009ed8:	08009f81 	.word	0x08009f81
 8009edc:	08009f81 	.word	0x08009f81
 8009ee0:	08009f81 	.word	0x08009f81
 8009ee4:	08009f81 	.word	0x08009f81
 8009ee8:	08009f81 	.word	0x08009f81
 8009eec:	08009f81 	.word	0x08009f81
 8009ef0:	08009f81 	.word	0x08009f81
 8009ef4:	08009f81 	.word	0x08009f81
 8009ef8:	08009f81 	.word	0x08009f81
 8009efc:	08009f81 	.word	0x08009f81
 8009f00:	08009f73 	.word	0x08009f73
 8009f04:	2b40      	cmp	r3, #64	; 0x40
 8009f06:	d037      	beq.n	8009f78 <UART_SetConfig+0xc44>
 8009f08:	e03a      	b.n	8009f80 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f0a:	f7fc fadd 	bl	80064c8 <HAL_RCC_GetPCLK1Freq>
 8009f0e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f10:	e03c      	b.n	8009f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f12:	f7fc faef 	bl	80064f4 <HAL_RCC_GetPCLK2Freq>
 8009f16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f18:	e038      	b.n	8009f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f7fe f986 	bl	8008230 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f28:	e030      	b.n	8009f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f2a:	f107 0318 	add.w	r3, r7, #24
 8009f2e:	4618      	mov	r0, r3
 8009f30:	f7fe fad2 	bl	80084d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f38:	e028      	b.n	8009f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f3a:	4b09      	ldr	r3, [pc, #36]	; (8009f60 <UART_SetConfig+0xc2c>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0320 	and.w	r3, r3, #32
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d012      	beq.n	8009f6c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f46:	4b06      	ldr	r3, [pc, #24]	; (8009f60 <UART_SetConfig+0xc2c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	08db      	lsrs	r3, r3, #3
 8009f4c:	f003 0303 	and.w	r3, r3, #3
 8009f50:	4a04      	ldr	r2, [pc, #16]	; (8009f64 <UART_SetConfig+0xc30>)
 8009f52:	fa22 f303 	lsr.w	r3, r2, r3
 8009f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f58:	e018      	b.n	8009f8c <UART_SetConfig+0xc58>
 8009f5a:	bf00      	nop
 8009f5c:	0800c0e8 	.word	0x0800c0e8
 8009f60:	58024400 	.word	0x58024400
 8009f64:	03d09000 	.word	0x03d09000
 8009f68:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009f6c:	4b24      	ldr	r3, [pc, #144]	; (800a000 <UART_SetConfig+0xccc>)
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f70:	e00c      	b.n	8009f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f72:	4b24      	ldr	r3, [pc, #144]	; (800a004 <UART_SetConfig+0xcd0>)
 8009f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f76:	e009      	b.n	8009f8c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f7e:	e005      	b.n	8009f8c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009f84:	2301      	movs	r3, #1
 8009f86:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009f8a:	bf00      	nop
    }

    if (pclk != 0U)
 8009f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d021      	beq.n	8009fd6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	4a1c      	ldr	r2, [pc, #112]	; (800a008 <UART_SetConfig+0xcd4>)
 8009f98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa0:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	085b      	lsrs	r3, r3, #1
 8009faa:	441a      	add	r2, r3
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fb4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb8:	2b0f      	cmp	r3, #15
 8009fba:	d909      	bls.n	8009fd0 <UART_SetConfig+0xc9c>
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc2:	d205      	bcs.n	8009fd0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc6:	b29a      	uxth	r2, r3
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	60da      	str	r2, [r3, #12]
 8009fce:	e002      	b.n	8009fd6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fd6:	697b      	ldr	r3, [r7, #20]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	2200      	movs	r2, #0
 8009ff0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009ff2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3748      	adds	r7, #72	; 0x48
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a000:	03d09000 	.word	0x03d09000
 800a004:	003d0900 	.word	0x003d0900
 800a008:	0800c0e8 	.word	0x0800c0e8

0800a00c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a018:	f003 0301 	and.w	r3, r3, #1
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00a      	beq.n	800a036 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a03a:	f003 0302 	and.w	r3, r3, #2
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d00a      	beq.n	800a058 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	430a      	orrs	r2, r1
 800a056:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05c:	f003 0304 	and.w	r3, r3, #4
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00a      	beq.n	800a07a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a07e:	f003 0308 	and.w	r3, r3, #8
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00a      	beq.n	800a09c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	430a      	orrs	r2, r1
 800a09a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a0:	f003 0310 	and.w	r3, r3, #16
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00a      	beq.n	800a0be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0c2:	f003 0320 	and.w	r3, r3, #32
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d00a      	beq.n	800a0e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	430a      	orrs	r2, r1
 800a0de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d01a      	beq.n	800a122 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	430a      	orrs	r2, r1
 800a100:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a10a:	d10a      	bne.n	800a122 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00a      	beq.n	800a144 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	430a      	orrs	r2, r1
 800a142:	605a      	str	r2, [r3, #4]
  }
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b098      	sub	sp, #96	; 0x60
 800a154:	af02      	add	r7, sp, #8
 800a156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a160:	f7f8 f880 	bl	8002264 <HAL_GetTick>
 800a164:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	f003 0308 	and.w	r3, r3, #8
 800a170:	2b08      	cmp	r3, #8
 800a172:	d12f      	bne.n	800a1d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a174:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a17c:	2200      	movs	r2, #0
 800a17e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f88e 	bl	800a2a4 <UART_WaitOnFlagUntilTimeout>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d022      	beq.n	800a1d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a19e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1a2:	653b      	str	r3, [r7, #80]	; 0x50
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1ac:	647b      	str	r3, [r7, #68]	; 0x44
 800a1ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e6      	bne.n	800a18e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e063      	b.n	800a29c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f003 0304 	and.w	r3, r3, #4
 800a1de:	2b04      	cmp	r3, #4
 800a1e0:	d149      	bne.n	800a276 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1e6:	9300      	str	r3, [sp, #0]
 800a1e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f857 	bl	800a2a4 <UART_WaitOnFlagUntilTimeout>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d03c      	beq.n	800a276 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	e853 3f00 	ldrex	r3, [r3]
 800a208:	623b      	str	r3, [r7, #32]
   return(result);
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a210:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	461a      	mov	r2, r3
 800a218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a21a:	633b      	str	r3, [r7, #48]	; 0x30
 800a21c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a222:	e841 2300 	strex	r3, r2, [r1]
 800a226:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1e6      	bne.n	800a1fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	3308      	adds	r3, #8
 800a234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	e853 3f00 	ldrex	r3, [r3]
 800a23c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f023 0301 	bic.w	r3, r3, #1
 800a244:	64bb      	str	r3, [r7, #72]	; 0x48
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3308      	adds	r3, #8
 800a24c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a24e:	61fa      	str	r2, [r7, #28]
 800a250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a252:	69b9      	ldr	r1, [r7, #24]
 800a254:	69fa      	ldr	r2, [r7, #28]
 800a256:	e841 2300 	strex	r3, r2, [r1]
 800a25a:	617b      	str	r3, [r7, #20]
   return(result);
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1e5      	bne.n	800a22e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2220      	movs	r2, #32
 800a266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e012      	b.n	800a29c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2220      	movs	r2, #32
 800a282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3758      	adds	r7, #88	; 0x58
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	603b      	str	r3, [r7, #0]
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2b4:	e049      	b.n	800a34a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2bc:	d045      	beq.n	800a34a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2be:	f7f7 ffd1 	bl	8002264 <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	69ba      	ldr	r2, [r7, #24]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d302      	bcc.n	800a2d4 <UART_WaitOnFlagUntilTimeout+0x30>
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e048      	b.n	800a36a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 0304 	and.w	r3, r3, #4
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d031      	beq.n	800a34a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	f003 0308 	and.w	r3, r3, #8
 800a2f0:	2b08      	cmp	r3, #8
 800a2f2:	d110      	bne.n	800a316 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	2208      	movs	r2, #8
 800a2fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 f95b 	bl	800a5b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2208      	movs	r2, #8
 800a306:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e029      	b.n	800a36a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	69db      	ldr	r3, [r3, #28]
 800a31c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a320:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a324:	d111      	bne.n	800a34a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a32e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 f941 	bl	800a5b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2220      	movs	r2, #32
 800a33a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a346:	2303      	movs	r3, #3
 800a348:	e00f      	b.n	800a36a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	69da      	ldr	r2, [r3, #28]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	4013      	ands	r3, r2
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	429a      	cmp	r2, r3
 800a358:	bf0c      	ite	eq
 800a35a:	2301      	moveq	r3, #1
 800a35c:	2300      	movne	r3, #0
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	461a      	mov	r2, r3
 800a362:	79fb      	ldrb	r3, [r7, #7]
 800a364:	429a      	cmp	r2, r3
 800a366:	d0a6      	beq.n	800a2b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}
	...

0800a374 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a374:	b480      	push	{r7}
 800a376:	b0a3      	sub	sp, #140	; 0x8c
 800a378:	af00      	add	r7, sp, #0
 800a37a:	60f8      	str	r0, [r7, #12]
 800a37c:	60b9      	str	r1, [r7, #8]
 800a37e:	4613      	mov	r3, r2
 800a380:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	68ba      	ldr	r2, [r7, #8]
 800a386:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	88fa      	ldrh	r2, [r7, #6]
 800a38c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	88fa      	ldrh	r2, [r7, #6]
 800a394:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	689b      	ldr	r3, [r3, #8]
 800a3a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3a6:	d10e      	bne.n	800a3c6 <UART_Start_Receive_IT+0x52>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	691b      	ldr	r3, [r3, #16]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d105      	bne.n	800a3bc <UART_Start_Receive_IT+0x48>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a3b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3ba:	e02d      	b.n	800a418 <UART_Start_Receive_IT+0xa4>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	22ff      	movs	r2, #255	; 0xff
 800a3c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3c4:	e028      	b.n	800a418 <UART_Start_Receive_IT+0xa4>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10d      	bne.n	800a3ea <UART_Start_Receive_IT+0x76>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d104      	bne.n	800a3e0 <UART_Start_Receive_IT+0x6c>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	22ff      	movs	r2, #255	; 0xff
 800a3da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3de:	e01b      	b.n	800a418 <UART_Start_Receive_IT+0xa4>
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	227f      	movs	r2, #127	; 0x7f
 800a3e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3e8:	e016      	b.n	800a418 <UART_Start_Receive_IT+0xa4>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3f2:	d10d      	bne.n	800a410 <UART_Start_Receive_IT+0x9c>
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	691b      	ldr	r3, [r3, #16]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d104      	bne.n	800a406 <UART_Start_Receive_IT+0x92>
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	227f      	movs	r2, #127	; 0x7f
 800a400:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a404:	e008      	b.n	800a418 <UART_Start_Receive_IT+0xa4>
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	223f      	movs	r2, #63	; 0x3f
 800a40a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a40e:	e003      	b.n	800a418 <UART_Start_Receive_IT+0xa4>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2200      	movs	r2, #0
 800a414:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2222      	movs	r2, #34	; 0x22
 800a424:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	3308      	adds	r3, #8
 800a42e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a432:	e853 3f00 	ldrex	r3, [r3]
 800a436:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a438:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a43a:	f043 0301 	orr.w	r3, r3, #1
 800a43e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3308      	adds	r3, #8
 800a448:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a44c:	673a      	str	r2, [r7, #112]	; 0x70
 800a44e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a450:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a452:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a454:	e841 2300 	strex	r3, r2, [r1]
 800a458:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a45a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e3      	bne.n	800a428 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a468:	d14f      	bne.n	800a50a <UART_Start_Receive_IT+0x196>
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a470:	88fa      	ldrh	r2, [r7, #6]
 800a472:	429a      	cmp	r2, r3
 800a474:	d349      	bcc.n	800a50a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a47e:	d107      	bne.n	800a490 <UART_Start_Receive_IT+0x11c>
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	691b      	ldr	r3, [r3, #16]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d103      	bne.n	800a490 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	4a47      	ldr	r2, [pc, #284]	; (800a5a8 <UART_Start_Receive_IT+0x234>)
 800a48c:	675a      	str	r2, [r3, #116]	; 0x74
 800a48e:	e002      	b.n	800a496 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4a46      	ldr	r2, [pc, #280]	; (800a5ac <UART_Start_Receive_IT+0x238>)
 800a494:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	691b      	ldr	r3, [r3, #16]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d01a      	beq.n	800a4d4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4a6:	e853 3f00 	ldrex	r3, [r3]
 800a4aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a4ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4c2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4c6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a4ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e4      	bne.n	800a49e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	3308      	adds	r3, #8
 800a4da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4ea:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a4f4:	64ba      	str	r2, [r7, #72]	; 0x48
 800a4f6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a4fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4fc:	e841 2300 	strex	r3, r2, [r1]
 800a500:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a502:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e5      	bne.n	800a4d4 <UART_Start_Receive_IT+0x160>
 800a508:	e046      	b.n	800a598 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a512:	d107      	bne.n	800a524 <UART_Start_Receive_IT+0x1b0>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	691b      	ldr	r3, [r3, #16]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d103      	bne.n	800a524 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	4a24      	ldr	r2, [pc, #144]	; (800a5b0 <UART_Start_Receive_IT+0x23c>)
 800a520:	675a      	str	r2, [r3, #116]	; 0x74
 800a522:	e002      	b.n	800a52a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4a23      	ldr	r2, [pc, #140]	; (800a5b4 <UART_Start_Receive_IT+0x240>)
 800a528:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d019      	beq.n	800a566 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a53a:	e853 3f00 	ldrex	r3, [r3]
 800a53e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a546:	677b      	str	r3, [r7, #116]	; 0x74
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	461a      	mov	r2, r3
 800a54e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a550:	637b      	str	r3, [r7, #52]	; 0x34
 800a552:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a554:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a556:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a558:	e841 2300 	strex	r3, r2, [r1]
 800a55c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a560:	2b00      	cmp	r3, #0
 800a562:	d1e6      	bne.n	800a532 <UART_Start_Receive_IT+0x1be>
 800a564:	e018      	b.n	800a598 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	e853 3f00 	ldrex	r3, [r3]
 800a572:	613b      	str	r3, [r7, #16]
   return(result);
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	f043 0320 	orr.w	r3, r3, #32
 800a57a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	461a      	mov	r2, r3
 800a582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a584:	623b      	str	r3, [r7, #32]
 800a586:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a588:	69f9      	ldr	r1, [r7, #28]
 800a58a:	6a3a      	ldr	r2, [r7, #32]
 800a58c:	e841 2300 	strex	r3, r2, [r1]
 800a590:	61bb      	str	r3, [r7, #24]
   return(result);
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1e6      	bne.n	800a566 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a598:	2300      	movs	r3, #0
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	378c      	adds	r7, #140	; 0x8c
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	0800ad55 	.word	0x0800ad55
 800a5ac:	0800a9f5 	.word	0x0800a9f5
 800a5b0:	0800a83d 	.word	0x0800a83d
 800a5b4:	0800a685 	.word	0x0800a685

0800a5b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b095      	sub	sp, #84	; 0x54
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5c8:	e853 3f00 	ldrex	r3, [r3]
 800a5cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5de:	643b      	str	r3, [r7, #64]	; 0x40
 800a5e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5e6:	e841 2300 	strex	r3, r2, [r1]
 800a5ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d1e6      	bne.n	800a5c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3308      	adds	r3, #8
 800a5f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5fa:	6a3b      	ldr	r3, [r7, #32]
 800a5fc:	e853 3f00 	ldrex	r3, [r3]
 800a600:	61fb      	str	r3, [r7, #28]
   return(result);
 800a602:	69fa      	ldr	r2, [r7, #28]
 800a604:	4b1e      	ldr	r3, [pc, #120]	; (800a680 <UART_EndRxTransfer+0xc8>)
 800a606:	4013      	ands	r3, r2
 800a608:	64bb      	str	r3, [r7, #72]	; 0x48
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	3308      	adds	r3, #8
 800a610:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a612:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a614:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a61a:	e841 2300 	strex	r3, r2, [r1]
 800a61e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1e5      	bne.n	800a5f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d118      	bne.n	800a660 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	e853 3f00 	ldrex	r3, [r3]
 800a63a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f023 0310 	bic.w	r3, r3, #16
 800a642:	647b      	str	r3, [r7, #68]	; 0x44
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	461a      	mov	r2, r3
 800a64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a64c:	61bb      	str	r3, [r7, #24]
 800a64e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a650:	6979      	ldr	r1, [r7, #20]
 800a652:	69ba      	ldr	r2, [r7, #24]
 800a654:	e841 2300 	strex	r3, r2, [r1]
 800a658:	613b      	str	r3, [r7, #16]
   return(result);
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d1e6      	bne.n	800a62e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2220      	movs	r2, #32
 800a664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2200      	movs	r2, #0
 800a66c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2200      	movs	r2, #0
 800a672:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a674:	bf00      	nop
 800a676:	3754      	adds	r7, #84	; 0x54
 800a678:	46bd      	mov	sp, r7
 800a67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67e:	4770      	bx	lr
 800a680:	effffffe 	.word	0xeffffffe

0800a684 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b09c      	sub	sp, #112	; 0x70
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a692:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a69c:	2b22      	cmp	r3, #34	; 0x22
 800a69e:	f040 80be 	bne.w	800a81e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800a6ac:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a6b0:	b2d9      	uxtb	r1, r3
 800a6b2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6bc:	400a      	ands	r2, r1
 800a6be:	b2d2      	uxtb	r2, r2
 800a6c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c6:	1c5a      	adds	r2, r3, #1
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f040 80a1 	bne.w	800a82e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6f4:	e853 3f00 	ldrex	r3, [r3]
 800a6f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a700:	66bb      	str	r3, [r7, #104]	; 0x68
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	461a      	mov	r2, r3
 800a708:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a70a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a70c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a70e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a710:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a712:	e841 2300 	strex	r3, r2, [r1]
 800a716:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d1e6      	bne.n	800a6ec <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	3308      	adds	r3, #8
 800a724:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a728:	e853 3f00 	ldrex	r3, [r3]
 800a72c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a730:	f023 0301 	bic.w	r3, r3, #1
 800a734:	667b      	str	r3, [r7, #100]	; 0x64
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3308      	adds	r3, #8
 800a73c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a73e:	647a      	str	r2, [r7, #68]	; 0x44
 800a740:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a742:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a744:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a746:	e841 2300 	strex	r3, r2, [r1]
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d1e5      	bne.n	800a71e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2220      	movs	r2, #32
 800a756:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a33      	ldr	r2, [pc, #204]	; (800a838 <UART_RxISR_8BIT+0x1b4>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d01f      	beq.n	800a7b0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685b      	ldr	r3, [r3, #4]
 800a776:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d018      	beq.n	800a7b0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a786:	e853 3f00 	ldrex	r3, [r3]
 800a78a:	623b      	str	r3, [r7, #32]
   return(result);
 800a78c:	6a3b      	ldr	r3, [r7, #32]
 800a78e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a792:	663b      	str	r3, [r7, #96]	; 0x60
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	461a      	mov	r2, r3
 800a79a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a79c:	633b      	str	r3, [r7, #48]	; 0x30
 800a79e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7a4:	e841 2300 	strex	r3, r2, [r1]
 800a7a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d1e6      	bne.n	800a77e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d12e      	bne.n	800a816 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	e853 3f00 	ldrex	r3, [r3]
 800a7ca:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f023 0310 	bic.w	r3, r3, #16
 800a7d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	461a      	mov	r2, r3
 800a7da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7dc:	61fb      	str	r3, [r7, #28]
 800a7de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e0:	69b9      	ldr	r1, [r7, #24]
 800a7e2:	69fa      	ldr	r2, [r7, #28]
 800a7e4:	e841 2300 	strex	r3, r2, [r1]
 800a7e8:	617b      	str	r3, [r7, #20]
   return(result);
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1e6      	bne.n	800a7be <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	69db      	ldr	r3, [r3, #28]
 800a7f6:	f003 0310 	and.w	r3, r3, #16
 800a7fa:	2b10      	cmp	r3, #16
 800a7fc:	d103      	bne.n	800a806 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2210      	movs	r2, #16
 800a804:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a80c:	4619      	mov	r1, r3
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f7fe fd84 	bl	800931c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a814:	e00b      	b.n	800a82e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7f6 fbc8 	bl	8000fac <HAL_UART_RxCpltCallback>
}
 800a81c:	e007      	b.n	800a82e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	699a      	ldr	r2, [r3, #24]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f042 0208 	orr.w	r2, r2, #8
 800a82c:	619a      	str	r2, [r3, #24]
}
 800a82e:	bf00      	nop
 800a830:	3770      	adds	r7, #112	; 0x70
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}
 800a836:	bf00      	nop
 800a838:	58000c00 	.word	0x58000c00

0800a83c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b09c      	sub	sp, #112	; 0x70
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a84a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a854:	2b22      	cmp	r3, #34	; 0x22
 800a856:	f040 80be 	bne.w	800a9d6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a868:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800a86a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800a86e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800a872:	4013      	ands	r3, r2
 800a874:	b29a      	uxth	r2, r3
 800a876:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a878:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a87e:	1c9a      	adds	r2, r3, #2
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	3b01      	subs	r3, #1
 800a88e:	b29a      	uxth	r2, r3
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f040 80a1 	bne.w	800a9e6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ac:	e853 3f00 	ldrex	r3, [r3]
 800a8b0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a8b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a8b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8b8:	667b      	str	r3, [r7, #100]	; 0x64
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	461a      	mov	r2, r3
 800a8c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8c2:	657b      	str	r3, [r7, #84]	; 0x54
 800a8c4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a8c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a8ca:	e841 2300 	strex	r3, r2, [r1]
 800a8ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a8d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d1e6      	bne.n	800a8a4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3308      	adds	r3, #8
 800a8dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e0:	e853 3f00 	ldrex	r3, [r3]
 800a8e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8e8:	f023 0301 	bic.w	r3, r3, #1
 800a8ec:	663b      	str	r3, [r7, #96]	; 0x60
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	3308      	adds	r3, #8
 800a8f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8f6:	643a      	str	r2, [r7, #64]	; 0x40
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a8fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e5      	bne.n	800a8d6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2220      	movs	r2, #32
 800a90e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	4a33      	ldr	r2, [pc, #204]	; (800a9f0 <UART_RxISR_16BIT+0x1b4>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d01f      	beq.n	800a968 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d018      	beq.n	800a968 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	e853 3f00 	ldrex	r3, [r3]
 800a942:	61fb      	str	r3, [r7, #28]
   return(result);
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a94a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	461a      	mov	r2, r3
 800a952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a954:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a956:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a95a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a95c:	e841 2300 	strex	r3, r2, [r1]
 800a960:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	2b00      	cmp	r3, #0
 800a966:	d1e6      	bne.n	800a936 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d12e      	bne.n	800a9ce <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	e853 3f00 	ldrex	r3, [r3]
 800a982:	60bb      	str	r3, [r7, #8]
   return(result);
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	f023 0310 	bic.w	r3, r3, #16
 800a98a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	461a      	mov	r2, r3
 800a992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a994:	61bb      	str	r3, [r7, #24]
 800a996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a998:	6979      	ldr	r1, [r7, #20]
 800a99a:	69ba      	ldr	r2, [r7, #24]
 800a99c:	e841 2300 	strex	r3, r2, [r1]
 800a9a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d1e6      	bne.n	800a976 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f003 0310 	and.w	r3, r3, #16
 800a9b2:	2b10      	cmp	r3, #16
 800a9b4:	d103      	bne.n	800a9be <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2210      	movs	r2, #16
 800a9bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f7fe fca8 	bl	800931c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a9cc:	e00b      	b.n	800a9e6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7f6 faec 	bl	8000fac <HAL_UART_RxCpltCallback>
}
 800a9d4:	e007      	b.n	800a9e6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	699a      	ldr	r2, [r3, #24]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f042 0208 	orr.w	r2, r2, #8
 800a9e4:	619a      	str	r2, [r3, #24]
}
 800a9e6:	bf00      	nop
 800a9e8:	3770      	adds	r7, #112	; 0x70
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	58000c00 	.word	0x58000c00

0800a9f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b0ac      	sub	sp, #176	; 0xb0
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa02:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	69db      	ldr	r3, [r3, #28]
 800aa0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa2a:	2b22      	cmp	r3, #34	; 0x22
 800aa2c:	f040 8180 	bne.w	800ad30 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aa36:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aa3a:	e123      	b.n	800ac84 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa42:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aa46:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800aa4a:	b2d9      	uxtb	r1, r3
 800aa4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa56:	400a      	ands	r2, r1
 800aa58:	b2d2      	uxtb	r2, r2
 800aa5a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa60:	1c5a      	adds	r2, r3, #1
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	3b01      	subs	r3, #1
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aa82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa86:	f003 0307 	and.w	r3, r3, #7
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d053      	beq.n	800ab36 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa92:	f003 0301 	and.w	r3, r3, #1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d011      	beq.n	800aabe <UART_RxISR_8BIT_FIFOEN+0xca>
 800aa9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aa9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00b      	beq.n	800aabe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aab4:	f043 0201 	orr.w	r2, r3, #1
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aabe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aac2:	f003 0302 	and.w	r3, r3, #2
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d011      	beq.n	800aaee <UART_RxISR_8BIT_FIFOEN+0xfa>
 800aaca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00b      	beq.n	800aaee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2202      	movs	r2, #2
 800aadc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aae4:	f043 0204 	orr.w	r2, r3, #4
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aaf2:	f003 0304 	and.w	r3, r3, #4
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d011      	beq.n	800ab1e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800aafa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aafe:	f003 0301 	and.w	r3, r3, #1
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d00b      	beq.n	800ab1e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2204      	movs	r2, #4
 800ab0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab14:	f043 0202 	orr.w	r2, r3, #2
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d006      	beq.n	800ab36 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f7fe fbed 	bl	8009308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f040 80a0 	bne.w	800ac84 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ab4c:	e853 3f00 	ldrex	r3, [r3]
 800ab50:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800ab52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	461a      	mov	r2, r3
 800ab62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab66:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab68:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ab6c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ab6e:	e841 2300 	strex	r3, r2, [r1]
 800ab72:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800ab74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1e4      	bne.n	800ab44 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	3308      	adds	r3, #8
 800ab80:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab84:	e853 3f00 	ldrex	r3, [r3]
 800ab88:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800ab8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab8c:	4b6e      	ldr	r3, [pc, #440]	; (800ad48 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800ab8e:	4013      	ands	r3, r2
 800ab90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3308      	adds	r3, #8
 800ab9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ab9e:	66ba      	str	r2, [r7, #104]	; 0x68
 800aba0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800aba4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aba6:	e841 2300 	strex	r3, r2, [r1]
 800abaa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800abac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1e3      	bne.n	800ab7a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2220      	movs	r2, #32
 800abb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	4a60      	ldr	r2, [pc, #384]	; (800ad4c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d021      	beq.n	800ac14 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d01a      	beq.n	800ac14 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abe4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abe6:	e853 3f00 	ldrex	r3, [r3]
 800abea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800abec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800abf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	461a      	mov	r2, r3
 800abfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac00:	657b      	str	r3, [r7, #84]	; 0x54
 800ac02:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ac06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ac08:	e841 2300 	strex	r3, r2, [r1]
 800ac0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ac0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d1e4      	bne.n	800abde <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d130      	bne.n	800ac7e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac2a:	e853 3f00 	ldrex	r3, [r3]
 800ac2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac32:	f023 0310 	bic.w	r3, r3, #16
 800ac36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac44:	643b      	str	r3, [r7, #64]	; 0x40
 800ac46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac4c:	e841 2300 	strex	r3, r2, [r1]
 800ac50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1e4      	bne.n	800ac22 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	69db      	ldr	r3, [r3, #28]
 800ac5e:	f003 0310 	and.w	r3, r3, #16
 800ac62:	2b10      	cmp	r3, #16
 800ac64:	d103      	bne.n	800ac6e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2210      	movs	r2, #16
 800ac6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac74:	4619      	mov	r1, r3
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7fe fb50 	bl	800931c <HAL_UARTEx_RxEventCallback>
 800ac7c:	e002      	b.n	800ac84 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7f6 f994 	bl	8000fac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ac84:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d006      	beq.n	800ac9a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800ac8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ac90:	f003 0320 	and.w	r3, r3, #32
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f47f aed1 	bne.w	800aa3c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aca0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800aca4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d049      	beq.n	800ad40 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800acb2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d242      	bcs.n	800ad40 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3308      	adds	r3, #8
 800acc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	e853 3f00 	ldrex	r3, [r3]
 800acc8:	61fb      	str	r3, [r7, #28]
   return(result);
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800acd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3308      	adds	r3, #8
 800acda:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800acde:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ace0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ace2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ace4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ace6:	e841 2300 	strex	r3, r2, [r1]
 800acea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1e3      	bne.n	800acba <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	4a16      	ldr	r2, [pc, #88]	; (800ad50 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800acf6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	e853 3f00 	ldrex	r3, [r3]
 800ad04:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	f043 0320 	orr.w	r3, r3, #32
 800ad0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	461a      	mov	r2, r3
 800ad16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad1a:	61bb      	str	r3, [r7, #24]
 800ad1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1e:	6979      	ldr	r1, [r7, #20]
 800ad20:	69ba      	ldr	r2, [r7, #24]
 800ad22:	e841 2300 	strex	r3, r2, [r1]
 800ad26:	613b      	str	r3, [r7, #16]
   return(result);
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d1e4      	bne.n	800acf8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad2e:	e007      	b.n	800ad40 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	699a      	ldr	r2, [r3, #24]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f042 0208 	orr.w	r2, r2, #8
 800ad3e:	619a      	str	r2, [r3, #24]
}
 800ad40:	bf00      	nop
 800ad42:	37b0      	adds	r7, #176	; 0xb0
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}
 800ad48:	effffffe 	.word	0xeffffffe
 800ad4c:	58000c00 	.word	0x58000c00
 800ad50:	0800a685 	.word	0x0800a685

0800ad54 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b0ae      	sub	sp, #184	; 0xb8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad62:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	69db      	ldr	r3, [r3, #28]
 800ad6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad8a:	2b22      	cmp	r3, #34	; 0x22
 800ad8c:	f040 8184 	bne.w	800b098 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ad96:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ad9a:	e127      	b.n	800afec <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800adae:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800adb2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800adb6:	4013      	ands	r3, r2
 800adb8:	b29a      	uxth	r2, r3
 800adba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800adbe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800adc4:	1c9a      	adds	r2, r3, #2
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800add0:	b29b      	uxth	r3, r3
 800add2:	3b01      	subs	r3, #1
 800add4:	b29a      	uxth	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	69db      	ldr	r3, [r3, #28]
 800ade2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ade6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800adea:	f003 0307 	and.w	r3, r3, #7
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d053      	beq.n	800ae9a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800adf6:	f003 0301 	and.w	r3, r3, #1
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d011      	beq.n	800ae22 <UART_RxISR_16BIT_FIFOEN+0xce>
 800adfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00b      	beq.n	800ae22 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae18:	f043 0201 	orr.w	r2, r3, #1
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae22:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ae26:	f003 0302 	and.w	r3, r3, #2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d011      	beq.n	800ae52 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ae2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae32:	f003 0301 	and.w	r3, r3, #1
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00b      	beq.n	800ae52 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2202      	movs	r2, #2
 800ae40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae48:	f043 0204 	orr.w	r2, r3, #4
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ae56:	f003 0304 	and.w	r3, r3, #4
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d011      	beq.n	800ae82 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800ae5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae62:	f003 0301 	and.w	r3, r3, #1
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00b      	beq.n	800ae82 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2204      	movs	r2, #4
 800ae70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae78:	f043 0202 	orr.w	r2, r3, #2
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d006      	beq.n	800ae9a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae8c:	6878      	ldr	r0, [r7, #4]
 800ae8e:	f7fe fa3b 	bl	8009308 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f040 80a2 	bne.w	800afec <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aeb0:	e853 3f00 	ldrex	r3, [r3]
 800aeb4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aeb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aeb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aebc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	461a      	mov	r2, r3
 800aec6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aeca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aece:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aed0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aed2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aed6:	e841 2300 	strex	r3, r2, [r1]
 800aeda:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aedc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d1e2      	bne.n	800aea8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	3308      	adds	r3, #8
 800aee8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aeec:	e853 3f00 	ldrex	r3, [r3]
 800aef0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aef2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aef4:	4b6e      	ldr	r3, [pc, #440]	; (800b0b0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800aef6:	4013      	ands	r3, r2
 800aef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	3308      	adds	r3, #8
 800af02:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800af06:	66fa      	str	r2, [r7, #108]	; 0x6c
 800af08:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800af0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af0e:	e841 2300 	strex	r3, r2, [r1]
 800af12:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800af14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af16:	2b00      	cmp	r3, #0
 800af18:	d1e3      	bne.n	800aee2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2220      	movs	r2, #32
 800af1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	2200      	movs	r2, #0
 800af26:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a60      	ldr	r2, [pc, #384]	; (800b0b4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800af34:	4293      	cmp	r3, r2
 800af36:	d021      	beq.n	800af7c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af42:	2b00      	cmp	r3, #0
 800af44:	d01a      	beq.n	800af7c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af4e:	e853 3f00 	ldrex	r3, [r3]
 800af52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800af54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	461a      	mov	r2, r3
 800af64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800af68:	65bb      	str	r3, [r7, #88]	; 0x58
 800af6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af70:	e841 2300 	strex	r3, r2, [r1]
 800af74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d1e4      	bne.n	800af46 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af80:	2b01      	cmp	r3, #1
 800af82:	d130      	bne.n	800afe6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af92:	e853 3f00 	ldrex	r3, [r3]
 800af96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af9a:	f023 0310 	bic.w	r3, r3, #16
 800af9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afac:	647b      	str	r3, [r7, #68]	; 0x44
 800afae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afb4:	e841 2300 	strex	r3, r2, [r1]
 800afb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d1e4      	bne.n	800af8a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	69db      	ldr	r3, [r3, #28]
 800afc6:	f003 0310 	and.w	r3, r3, #16
 800afca:	2b10      	cmp	r3, #16
 800afcc:	d103      	bne.n	800afd6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2210      	movs	r2, #16
 800afd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f7fe f99c 	bl	800931c <HAL_UARTEx_RxEventCallback>
 800afe4:	e002      	b.n	800afec <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7f5 ffe0 	bl	8000fac <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800afec:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d006      	beq.n	800b002 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800aff4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aff8:	f003 0320 	and.w	r3, r3, #32
 800affc:	2b00      	cmp	r3, #0
 800affe:	f47f aecd 	bne.w	800ad9c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b008:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b00c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b010:	2b00      	cmp	r3, #0
 800b012:	d049      	beq.n	800b0a8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b01a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b01e:	429a      	cmp	r2, r3
 800b020:	d242      	bcs.n	800b0a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	623b      	str	r3, [r7, #32]
   return(result);
 800b032:	6a3b      	ldr	r3, [r7, #32]
 800b034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b038:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	3308      	adds	r3, #8
 800b042:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b046:	633a      	str	r2, [r7, #48]	; 0x30
 800b048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b04a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b04e:	e841 2300 	strex	r3, r2, [r1]
 800b052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1e3      	bne.n	800b022 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a16      	ldr	r2, [pc, #88]	; (800b0b8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b05e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	e853 3f00 	ldrex	r3, [r3]
 800b06c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f043 0320 	orr.w	r3, r3, #32
 800b074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	461a      	mov	r2, r3
 800b07e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b082:	61fb      	str	r3, [r7, #28]
 800b084:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b086:	69b9      	ldr	r1, [r7, #24]
 800b088:	69fa      	ldr	r2, [r7, #28]
 800b08a:	e841 2300 	strex	r3, r2, [r1]
 800b08e:	617b      	str	r3, [r7, #20]
   return(result);
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d1e4      	bne.n	800b060 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b096:	e007      	b.n	800b0a8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699a      	ldr	r2, [r3, #24]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f042 0208 	orr.w	r2, r2, #8
 800b0a6:	619a      	str	r2, [r3, #24]
}
 800b0a8:	bf00      	nop
 800b0aa:	37b8      	adds	r7, #184	; 0xb8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}
 800b0b0:	effffffe 	.word	0xeffffffe
 800b0b4:	58000c00 	.word	0x58000c00
 800b0b8:	0800a83d 	.word	0x0800a83d

0800b0bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d101      	bne.n	800b0d2 <HAL_UARTEx_DisableFifoMode+0x16>
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	e027      	b.n	800b122 <HAL_UARTEx_DisableFifoMode+0x66>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2201      	movs	r2, #1
 800b0d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2224      	movs	r2, #36	; 0x24
 800b0de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	681a      	ldr	r2, [r3, #0]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f022 0201 	bic.w	r2, r2, #1
 800b0f8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b100:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	68fa      	ldr	r2, [r7, #12]
 800b10e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2220      	movs	r2, #32
 800b114:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3714      	adds	r7, #20
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b084      	sub	sp, #16
 800b132:	af00      	add	r7, sp, #0
 800b134:	6078      	str	r0, [r7, #4]
 800b136:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d101      	bne.n	800b146 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b142:	2302      	movs	r3, #2
 800b144:	e02d      	b.n	800b1a2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2201      	movs	r2, #1
 800b14a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2224      	movs	r2, #36	; 0x24
 800b152:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f022 0201 	bic.w	r2, r2, #1
 800b16c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	430a      	orrs	r2, r1
 800b180:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f850 	bl	800b228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2220      	movs	r2, #32
 800b194:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2200      	movs	r2, #0
 800b19c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b1a0:	2300      	movs	r3, #0
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}

0800b1aa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b1aa:	b580      	push	{r7, lr}
 800b1ac:	b084      	sub	sp, #16
 800b1ae:	af00      	add	r7, sp, #0
 800b1b0:	6078      	str	r0, [r7, #4]
 800b1b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d101      	bne.n	800b1c2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b1be:	2302      	movs	r3, #2
 800b1c0:	e02d      	b.n	800b21e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2224      	movs	r2, #36	; 0x24
 800b1ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	681a      	ldr	r2, [r3, #0]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f022 0201 	bic.w	r2, r2, #1
 800b1e8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	689b      	ldr	r3, [r3, #8]
 800b1f0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	430a      	orrs	r2, r1
 800b1fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f000 f812 	bl	800b228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2220      	movs	r2, #32
 800b210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2200      	movs	r2, #0
 800b218:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}
	...

0800b228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b228:	b480      	push	{r7}
 800b22a:	b085      	sub	sp, #20
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b234:	2b00      	cmp	r3, #0
 800b236:	d108      	bne.n	800b24a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2201      	movs	r2, #1
 800b23c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2201      	movs	r2, #1
 800b244:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b248:	e031      	b.n	800b2ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b24a:	2310      	movs	r3, #16
 800b24c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b24e:	2310      	movs	r3, #16
 800b250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	689b      	ldr	r3, [r3, #8]
 800b258:	0e5b      	lsrs	r3, r3, #25
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	f003 0307 	and.w	r3, r3, #7
 800b260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	0f5b      	lsrs	r3, r3, #29
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	f003 0307 	and.w	r3, r3, #7
 800b270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b272:	7bbb      	ldrb	r3, [r7, #14]
 800b274:	7b3a      	ldrb	r2, [r7, #12]
 800b276:	4911      	ldr	r1, [pc, #68]	; (800b2bc <UARTEx_SetNbDataToProcess+0x94>)
 800b278:	5c8a      	ldrb	r2, [r1, r2]
 800b27a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b27e:	7b3a      	ldrb	r2, [r7, #12]
 800b280:	490f      	ldr	r1, [pc, #60]	; (800b2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b284:	fb93 f3f2 	sdiv	r3, r3, r2
 800b288:	b29a      	uxth	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b290:	7bfb      	ldrb	r3, [r7, #15]
 800b292:	7b7a      	ldrb	r2, [r7, #13]
 800b294:	4909      	ldr	r1, [pc, #36]	; (800b2bc <UARTEx_SetNbDataToProcess+0x94>)
 800b296:	5c8a      	ldrb	r2, [r1, r2]
 800b298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b29c:	7b7a      	ldrb	r2, [r7, #13]
 800b29e:	4908      	ldr	r1, [pc, #32]	; (800b2c0 <UARTEx_SetNbDataToProcess+0x98>)
 800b2a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b2a2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b2a6:	b29a      	uxth	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b2ae:	bf00      	nop
 800b2b0:	3714      	adds	r7, #20
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr
 800b2ba:	bf00      	nop
 800b2bc:	0800c100 	.word	0x0800c100
 800b2c0:	0800c108 	.word	0x0800c108

0800b2c4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b2c4:	b084      	sub	sp, #16
 800b2c6:	b480      	push	{r7}
 800b2c8:	b085      	sub	sp, #20
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
 800b2ce:	f107 001c 	add.w	r0, r7, #28
 800b2d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b2da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800b2de:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800b2e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800b2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800b2e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800b2ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	685a      	ldr	r2, [r3, #4]
 800b2f6:	4b07      	ldr	r3, [pc, #28]	; (800b314 <SDMMC_Init+0x50>)
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	431a      	orrs	r2, r3
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	b004      	add	sp, #16
 800b310:	4770      	bx	lr
 800b312:	bf00      	nop
 800b314:	ffc02c00 	.word	0xffc02c00

0800b318 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b326:	4618      	mov	r0, r3
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b332:	b480      	push	{r7}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f043 0203 	orr.w	r2, r3, #3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	370c      	adds	r7, #12
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b354:	b480      	push	{r7}
 800b356:	b083      	sub	sp, #12
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 0303 	and.w	r3, r3, #3
}
 800b364:	4618      	mov	r0, r3
 800b366:	370c      	adds	r7, #12
 800b368:	46bd      	mov	sp, r7
 800b36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36e:	4770      	bx	lr

0800b370 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b370:	b480      	push	{r7}
 800b372:	b085      	sub	sp, #20
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	681a      	ldr	r2, [r3, #0]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b38e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800b394:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800b39a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	68da      	ldr	r2, [r3, #12]
 800b3a6:	4b06      	ldr	r3, [pc, #24]	; (800b3c0 <SDMMC_SendCommand+0x50>)
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	431a      	orrs	r2, r3
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	fffee0c0 	.word	0xfffee0c0

0800b3c4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b083      	sub	sp, #12
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	b2db      	uxtb	r3, r3
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b085      	sub	sp, #20
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	3314      	adds	r3, #20
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
}
 800b3f8:	4618      	mov	r0, r3
 800b3fa:	3714      	adds	r7, #20
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b42a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800b430:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800b436:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b442:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	431a      	orrs	r2, r3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b44e:	2300      	movs	r3, #0

}
 800b450:	4618      	mov	r0, r3
 800b452:	3714      	adds	r7, #20
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b088      	sub	sp, #32
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b46a:	2310      	movs	r3, #16
 800b46c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b46e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b472:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b474:	2300      	movs	r3, #0
 800b476:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b47c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b47e:	f107 0308 	add.w	r3, r7, #8
 800b482:	4619      	mov	r1, r3
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f7ff ff73 	bl	800b370 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b48a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b48e:	2110      	movs	r1, #16
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f000 f935 	bl	800b700 <SDMMC_GetCmdResp1>
 800b496:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b498:	69fb      	ldr	r3, [r7, #28]
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3720      	adds	r7, #32
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}

0800b4a2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b088      	sub	sp, #32
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
 800b4aa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b4b0:	2307      	movs	r3, #7
 800b4b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4c4:	f107 0308 	add.w	r3, r7, #8
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7ff ff50 	bl	800b370 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b4d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4d4:	2107      	movs	r1, #7
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f912 	bl	800b700 <SDMMC_GetCmdResp1>
 800b4dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4de:	69fb      	ldr	r3, [r7, #28]
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3720      	adds	r7, #32
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}

0800b4e8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b088      	sub	sp, #32
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b504:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b506:	f107 0308 	add.w	r3, r7, #8
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff ff2f 	bl	800b370 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fa70 	bl	800b9f8 <SDMMC_GetCmdError>
 800b518:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b51a:	69fb      	ldr	r3, [r7, #28]
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3720      	adds	r7, #32
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b088      	sub	sp, #32
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b52c:	2300      	movs	r3, #0
 800b52e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b530:	2302      	movs	r3, #2
 800b532:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b534:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b538:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b53e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b542:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b544:	f107 0308 	add.w	r3, r7, #8
 800b548:	4619      	mov	r1, r3
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7ff ff10 	bl	800b370 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b550:	6878      	ldr	r0, [r7, #4]
 800b552:	f000 f9c7 	bl	800b8e4 <SDMMC_GetCmdResp2>
 800b556:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b558:	69fb      	ldr	r3, [r7, #28]
}
 800b55a:	4618      	mov	r0, r3
 800b55c:	3720      	adds	r7, #32
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}

0800b562 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b562:	b580      	push	{r7, lr}
 800b564:	b088      	sub	sp, #32
 800b566:	af00      	add	r7, sp, #0
 800b568:	6078      	str	r0, [r7, #4]
 800b56a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b570:	2309      	movs	r3, #9
 800b572:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b574:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b57a:	2300      	movs	r3, #0
 800b57c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b57e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b582:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b584:	f107 0308 	add.w	r3, r7, #8
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff fef0 	bl	800b370 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b590:	6878      	ldr	r0, [r7, #4]
 800b592:	f000 f9a7 	bl	800b8e4 <SDMMC_GetCmdResp2>
 800b596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b598:	69fb      	ldr	r3, [r7, #28]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3720      	adds	r7, #32
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b088      	sub	sp, #32
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 800b5ae:	887b      	ldrh	r3, [r7, #2]
 800b5b0:	041b      	lsls	r3, r3, #16
 800b5b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5c8:	f107 0308 	add.w	r3, r7, #8
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7ff fece 	bl	800b370 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 800b5d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5d8:	2103      	movs	r1, #3
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f890 	bl	800b700 <SDMMC_GetCmdResp1>
 800b5e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3720      	adds	r7, #32
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b5fa:	230d      	movs	r3, #13
 800b5fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b602:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b604:	2300      	movs	r3, #0
 800b606:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b608:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b60c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b60e:	f107 0308 	add.w	r3, r7, #8
 800b612:	4619      	mov	r1, r3
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f7ff feab 	bl	800b370 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b61a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b61e:	210d      	movs	r1, #13
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f86d 	bl	800b700 <SDMMC_GetCmdResp1>
 800b626:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b628:	69fb      	ldr	r3, [r7, #28]
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3720      	adds	r7, #32
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b088      	sub	sp, #32
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 800b640:	2301      	movs	r3, #1
 800b642:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b644:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b64a:	2300      	movs	r3, #0
 800b64c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b64e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b652:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b654:	f107 0308 	add.w	r3, r7, #8
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff fe88 	bl	800b370 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f989 	bl	800b978 <SDMMC_GetCmdResp3>
 800b666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b668:	69fb      	ldr	r3, [r7, #28]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3720      	adds	r7, #32
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b088      	sub	sp, #32
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
 800b67a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800b680:	2306      	movs	r3, #6
 800b682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b684:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b68a:	2300      	movs	r3, #0
 800b68c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b68e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b692:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b694:	f107 0308 	add.w	r3, r7, #8
 800b698:	4619      	mov	r1, r3
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f7ff fe68 	bl	800b370 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800b6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6a4:	2106      	movs	r1, #6
 800b6a6:	6878      	ldr	r0, [r7, #4]
 800b6a8:	f000 f82a 	bl	800b700 <SDMMC_GetCmdResp1>
 800b6ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6ae:	69fb      	ldr	r3, [r7, #28]
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3720      	adds	r7, #32
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b088      	sub	sp, #32
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b6c6:	2308      	movs	r3, #8
 800b6c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6da:	f107 0308 	add.w	r3, r7, #8
 800b6de:	4619      	mov	r1, r3
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7ff fe45 	bl	800b370 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 800b6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b6ea:	2108      	movs	r1, #8
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f807 	bl	800b700 <SDMMC_GetCmdResp1>
 800b6f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3720      	adds	r7, #32
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
	...

0800b700 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b088      	sub	sp, #32
 800b704:	af00      	add	r7, sp, #0
 800b706:	60f8      	str	r0, [r7, #12]
 800b708:	460b      	mov	r3, r1
 800b70a:	607a      	str	r2, [r7, #4]
 800b70c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b70e:	4b70      	ldr	r3, [pc, #448]	; (800b8d0 <SDMMC_GetCmdResp1+0x1d0>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	4a70      	ldr	r2, [pc, #448]	; (800b8d4 <SDMMC_GetCmdResp1+0x1d4>)
 800b714:	fba2 2303 	umull	r2, r3, r2, r3
 800b718:	0a5a      	lsrs	r2, r3, #9
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	fb02 f303 	mul.w	r3, r2, r3
 800b720:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	1e5a      	subs	r2, r3, #1
 800b726:	61fa      	str	r2, [r7, #28]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d102      	bne.n	800b732 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b72c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b730:	e0c9      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b736:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b738:	69ba      	ldr	r2, [r7, #24]
 800b73a:	4b67      	ldr	r3, [pc, #412]	; (800b8d8 <SDMMC_GetCmdResp1+0x1d8>)
 800b73c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d0ef      	beq.n	800b722 <SDMMC_GetCmdResp1+0x22>
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d1ea      	bne.n	800b722 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b750:	f003 0304 	and.w	r3, r3, #4
 800b754:	2b00      	cmp	r3, #0
 800b756:	d004      	beq.n	800b762 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	2204      	movs	r2, #4
 800b75c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b75e:	2304      	movs	r3, #4
 800b760:	e0b1      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b766:	f003 0301 	and.w	r3, r3, #1
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d004      	beq.n	800b778 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	2201      	movs	r2, #1
 800b772:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b774:	2301      	movs	r3, #1
 800b776:	e0a6      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	4a58      	ldr	r2, [pc, #352]	; (800b8dc <SDMMC_GetCmdResp1+0x1dc>)
 800b77c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b77e:	68f8      	ldr	r0, [r7, #12]
 800b780:	f7ff fe20 	bl	800b3c4 <SDMMC_GetCommandResponse>
 800b784:	4603      	mov	r3, r0
 800b786:	461a      	mov	r2, r3
 800b788:	7afb      	ldrb	r3, [r7, #11]
 800b78a:	4293      	cmp	r3, r2
 800b78c:	d001      	beq.n	800b792 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b78e:	2301      	movs	r3, #1
 800b790:	e099      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b792:	2100      	movs	r1, #0
 800b794:	68f8      	ldr	r0, [r7, #12]
 800b796:	f7ff fe22 	bl	800b3de <SDMMC_GetResponse>
 800b79a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b79c:	697a      	ldr	r2, [r7, #20]
 800b79e:	4b50      	ldr	r3, [pc, #320]	; (800b8e0 <SDMMC_GetCmdResp1+0x1e0>)
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d101      	bne.n	800b7aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	e08d      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	da02      	bge.n	800b7b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b7b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b7b4:	e087      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d001      	beq.n	800b7c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b7c0:	2340      	movs	r3, #64	; 0x40
 800b7c2:	e080      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b7c4:	697b      	ldr	r3, [r7, #20]
 800b7c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d001      	beq.n	800b7d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b7ce:	2380      	movs	r3, #128	; 0x80
 800b7d0:	e079      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d002      	beq.n	800b7e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b7dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7e0:	e071      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b7ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7f0:	e069      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d002      	beq.n	800b802 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b7fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b800:	e061      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d002      	beq.n	800b812 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b80c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b810:	e059      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d002      	beq.n	800b822 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b81c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b820:	e051      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d002      	beq.n	800b832 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b82c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b830:	e049      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b83c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b840:	e041      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d002      	beq.n	800b852 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b84c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b850:	e039      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b85c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b860:	e031      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b862:	697b      	ldr	r3, [r7, #20]
 800b864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d002      	beq.n	800b872 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b86c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b870:	e029      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d002      	beq.n	800b882 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b87c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b880:	e021      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b882:	697b      	ldr	r3, [r7, #20]
 800b884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b88c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b890:	e019      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d002      	beq.n	800b8a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b89c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b8a0:	e011      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d002      	beq.n	800b8b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b8ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b8b0:	e009      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	f003 0308 	and.w	r3, r3, #8
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d002      	beq.n	800b8c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b8bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b8c0:	e001      	b.n	800b8c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b8c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3720      	adds	r7, #32
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	24000000 	.word	0x24000000
 800b8d4:	10624dd3 	.word	0x10624dd3
 800b8d8:	00200045 	.word	0x00200045
 800b8dc:	002000c5 	.word	0x002000c5
 800b8e0:	fdffe008 	.word	0xfdffe008

0800b8e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b8ec:	4b1f      	ldr	r3, [pc, #124]	; (800b96c <SDMMC_GetCmdResp2+0x88>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a1f      	ldr	r2, [pc, #124]	; (800b970 <SDMMC_GetCmdResp2+0x8c>)
 800b8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f6:	0a5b      	lsrs	r3, r3, #9
 800b8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8fc:	fb02 f303 	mul.w	r3, r2, r3
 800b900:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	1e5a      	subs	r2, r3, #1
 800b906:	60fa      	str	r2, [r7, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d102      	bne.n	800b912 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b90c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b910:	e026      	b.n	800b960 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b916:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d0ef      	beq.n	800b902 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d1ea      	bne.n	800b902 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b930:	f003 0304 	and.w	r3, r3, #4
 800b934:	2b00      	cmp	r3, #0
 800b936:	d004      	beq.n	800b942 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2204      	movs	r2, #4
 800b93c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b93e:	2304      	movs	r3, #4
 800b940:	e00e      	b.n	800b960 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b946:	f003 0301 	and.w	r3, r3, #1
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d004      	beq.n	800b958 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b954:	2301      	movs	r3, #1
 800b956:	e003      	b.n	800b960 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a06      	ldr	r2, [pc, #24]	; (800b974 <SDMMC_GetCmdResp2+0x90>)
 800b95c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b95e:	2300      	movs	r3, #0
}
 800b960:	4618      	mov	r0, r3
 800b962:	3714      	adds	r7, #20
 800b964:	46bd      	mov	sp, r7
 800b966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96a:	4770      	bx	lr
 800b96c:	24000000 	.word	0x24000000
 800b970:	10624dd3 	.word	0x10624dd3
 800b974:	002000c5 	.word	0x002000c5

0800b978 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b978:	b480      	push	{r7}
 800b97a:	b085      	sub	sp, #20
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b980:	4b1a      	ldr	r3, [pc, #104]	; (800b9ec <SDMMC_GetCmdResp3+0x74>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	4a1a      	ldr	r2, [pc, #104]	; (800b9f0 <SDMMC_GetCmdResp3+0x78>)
 800b986:	fba2 2303 	umull	r2, r3, r2, r3
 800b98a:	0a5b      	lsrs	r3, r3, #9
 800b98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b990:	fb02 f303 	mul.w	r3, r2, r3
 800b994:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	1e5a      	subs	r2, r3, #1
 800b99a:	60fa      	str	r2, [r7, #12]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d102      	bne.n	800b9a6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9a4:	e01b      	b.n	800b9de <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9aa:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0ef      	beq.n	800b996 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1ea      	bne.n	800b996 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d004      	beq.n	800b9d6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2204      	movs	r2, #4
 800b9d0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b9d2:	2304      	movs	r3, #4
 800b9d4:	e003      	b.n	800b9de <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a06      	ldr	r2, [pc, #24]	; (800b9f4 <SDMMC_GetCmdResp3+0x7c>)
 800b9da:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b9dc:	2300      	movs	r3, #0
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	24000000 	.word	0x24000000
 800b9f0:	10624dd3 	.word	0x10624dd3
 800b9f4:	002000c5 	.word	0x002000c5

0800b9f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800ba00:	4b11      	ldr	r3, [pc, #68]	; (800ba48 <SDMMC_GetCmdError+0x50>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a11      	ldr	r2, [pc, #68]	; (800ba4c <SDMMC_GetCmdError+0x54>)
 800ba06:	fba2 2303 	umull	r2, r3, r2, r3
 800ba0a:	0a5b      	lsrs	r3, r3, #9
 800ba0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba10:	fb02 f303 	mul.w	r3, r2, r3
 800ba14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	1e5a      	subs	r2, r3, #1
 800ba1a:	60fa      	str	r2, [r7, #12]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d102      	bne.n	800ba26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba24:	e009      	b.n	800ba3a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d0f1      	beq.n	800ba16 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	4a06      	ldr	r2, [pc, #24]	; (800ba50 <SDMMC_GetCmdError+0x58>)
 800ba36:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3714      	adds	r7, #20
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr
 800ba46:	bf00      	nop
 800ba48:	24000000 	.word	0x24000000
 800ba4c:	10624dd3 	.word	0x10624dd3
 800ba50:	002000c5 	.word	0x002000c5

0800ba54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ba54:	b084      	sub	sp, #16
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b084      	sub	sp, #16
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	f107 001c 	add.w	r0, r7, #28
 800ba62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d120      	bne.n	800baae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	68da      	ldr	r2, [r3, #12]
 800ba7c:	4b2a      	ldr	r3, [pc, #168]	; (800bb28 <USB_CoreInit+0xd4>)
 800ba7e:	4013      	ands	r3, r2
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	68db      	ldr	r3, [r3, #12]
 800ba88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ba90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba92:	2b01      	cmp	r3, #1
 800ba94:	d105      	bne.n	800baa2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 faac 	bl	800c000 <USB_CoreReset>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73fb      	strb	r3, [r7, #15]
 800baac:	e01a      	b.n	800bae4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 faa0 	bl	800c000 <USB_CoreReset>
 800bac0:	4603      	mov	r3, r0
 800bac2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d106      	bne.n	800bad8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bace:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	639a      	str	r2, [r3, #56]	; 0x38
 800bad6:	e005      	b.n	800bae4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800badc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d116      	bne.n	800bb18 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baee:	b29a      	uxth	r2, r3
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800baf8:	4b0c      	ldr	r3, [pc, #48]	; (800bb2c <USB_CoreInit+0xd8>)
 800bafa:	4313      	orrs	r3, r2
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	689b      	ldr	r3, [r3, #8]
 800bb04:	f043 0206 	orr.w	r2, r3, #6
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	689b      	ldr	r3, [r3, #8]
 800bb10:	f043 0220 	orr.w	r2, r3, #32
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3710      	adds	r7, #16
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb24:	b004      	add	sp, #16
 800bb26:	4770      	bx	lr
 800bb28:	ffbdffbf 	.word	0xffbdffbf
 800bb2c:	03ee0000 	.word	0x03ee0000

0800bb30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	689b      	ldr	r3, [r3, #8]
 800bb3c:	f023 0201 	bic.w	r2, r3, #1
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	370c      	adds	r7, #12
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b084      	sub	sp, #16
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	68db      	ldr	r3, [r3, #12]
 800bb66:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bb6e:	78fb      	ldrb	r3, [r7, #3]
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d115      	bne.n	800bba0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bb80:	2001      	movs	r0, #1
 800bb82:	f7f6 fb7b 	bl	800227c <HAL_Delay>
      ms++;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 fa29 	bl	800bfe4 <USB_GetMode>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d01e      	beq.n	800bbd6 <USB_SetCurrentMode+0x84>
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2b31      	cmp	r3, #49	; 0x31
 800bb9c:	d9f0      	bls.n	800bb80 <USB_SetCurrentMode+0x2e>
 800bb9e:	e01a      	b.n	800bbd6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bba0:	78fb      	ldrb	r3, [r7, #3]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d115      	bne.n	800bbd2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	f7f6 fb62 	bl	800227c <HAL_Delay>
      ms++;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 fa10 	bl	800bfe4 <USB_GetMode>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d005      	beq.n	800bbd6 <USB_SetCurrentMode+0x84>
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	2b31      	cmp	r3, #49	; 0x31
 800bbce:	d9f0      	bls.n	800bbb2 <USB_SetCurrentMode+0x60>
 800bbd0:	e001      	b.n	800bbd6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e005      	b.n	800bbe2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	2b32      	cmp	r3, #50	; 0x32
 800bbda:	d101      	bne.n	800bbe0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	e000      	b.n	800bbe2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
	...

0800bbec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bbec:	b084      	sub	sp, #16
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b086      	sub	sp, #24
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
 800bbf6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bbfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bc06:	2300      	movs	r3, #0
 800bc08:	613b      	str	r3, [r7, #16]
 800bc0a:	e009      	b.n	800bc20 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	3340      	adds	r3, #64	; 0x40
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	2200      	movs	r2, #0
 800bc18:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	3301      	adds	r3, #1
 800bc1e:	613b      	str	r3, [r7, #16]
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	2b0e      	cmp	r3, #14
 800bc24:	d9f2      	bls.n	800bc0c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800bc26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d11c      	bne.n	800bc66 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	68fa      	ldr	r2, [r7, #12]
 800bc36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc3a:	f043 0302 	orr.w	r3, r3, #2
 800bc3e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc44:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	601a      	str	r2, [r3, #0]
 800bc64:	e005      	b.n	800bc72 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc78:	461a      	mov	r2, r3
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc84:	4619      	mov	r1, r3
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	680b      	ldr	r3, [r1, #0]
 800bc90:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d10c      	bne.n	800bcb2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800bc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d104      	bne.n	800bca8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800bc9e:	2100      	movs	r1, #0
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 f965 	bl	800bf70 <USB_SetDevSpeed>
 800bca6:	e008      	b.n	800bcba <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800bca8:	2101      	movs	r1, #1
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f960 	bl	800bf70 <USB_SetDevSpeed>
 800bcb0:	e003      	b.n	800bcba <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800bcb2:	2103      	movs	r1, #3
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f95b 	bl	800bf70 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bcba:	2110      	movs	r1, #16
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 f8f3 	bl	800bea8 <USB_FlushTxFifo>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d001      	beq.n	800bccc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 f91f 	bl	800bf10 <USB_FlushRxFifo>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d001      	beq.n	800bcdc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800bcd8:	2301      	movs	r3, #1
 800bcda:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce2:	461a      	mov	r2, r3
 800bce4:	2300      	movs	r3, #0
 800bce6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcee:	461a      	mov	r2, r3
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd00:	2300      	movs	r3, #0
 800bd02:	613b      	str	r3, [r7, #16]
 800bd04:	e043      	b.n	800bd8e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bd06:	693b      	ldr	r3, [r7, #16]
 800bd08:	015a      	lsls	r2, r3, #5
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bd18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bd1c:	d118      	bne.n	800bd50 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d10a      	bne.n	800bd3a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	015a      	lsls	r2, r3, #5
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd30:	461a      	mov	r2, r3
 800bd32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bd36:	6013      	str	r3, [r2, #0]
 800bd38:	e013      	b.n	800bd62 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	015a      	lsls	r2, r3, #5
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	4413      	add	r3, r2
 800bd42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd46:	461a      	mov	r2, r3
 800bd48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	e008      	b.n	800bd62 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5c:	461a      	mov	r2, r3
 800bd5e:	2300      	movs	r3, #0
 800bd60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	015a      	lsls	r2, r3, #5
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	4413      	add	r3, r2
 800bd6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd6e:	461a      	mov	r2, r3
 800bd70:	2300      	movs	r3, #0
 800bd72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	015a      	lsls	r2, r3, #5
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd80:	461a      	mov	r2, r3
 800bd82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800bd86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd88:	693b      	ldr	r3, [r7, #16]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	613b      	str	r3, [r7, #16]
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d3b7      	bcc.n	800bd06 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800bd96:	2300      	movs	r3, #0
 800bd98:	613b      	str	r3, [r7, #16]
 800bd9a:	e043      	b.n	800be24 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bd9c:	693b      	ldr	r3, [r7, #16]
 800bd9e:	015a      	lsls	r2, r3, #5
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bdb2:	d118      	bne.n	800bde6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d10a      	bne.n	800bdd0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	015a      	lsls	r2, r3, #5
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800bdcc:	6013      	str	r3, [r2, #0]
 800bdce:	e013      	b.n	800bdf8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	015a      	lsls	r2, r3, #5
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bddc:	461a      	mov	r2, r3
 800bdde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800bde2:	6013      	str	r3, [r2, #0]
 800bde4:	e008      	b.n	800bdf8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	015a      	lsls	r2, r3, #5
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	4413      	add	r3, r2
 800bdee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	015a      	lsls	r2, r3, #5
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	4413      	add	r3, r2
 800be00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be04:	461a      	mov	r2, r3
 800be06:	2300      	movs	r3, #0
 800be08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	015a      	lsls	r2, r3, #5
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	4413      	add	r3, r2
 800be12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be16:	461a      	mov	r2, r3
 800be18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800be1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	3301      	adds	r3, #1
 800be22:	613b      	str	r3, [r7, #16]
 800be24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be26:	693a      	ldr	r2, [r7, #16]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d3b7      	bcc.n	800bd9c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800be4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d105      	bne.n	800be60 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	f043 0210 	orr.w	r2, r3, #16
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	699a      	ldr	r2, [r3, #24]
 800be64:	4b0e      	ldr	r3, [pc, #56]	; (800bea0 <USB_DevInit+0x2b4>)
 800be66:	4313      	orrs	r3, r2
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800be6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d005      	beq.n	800be7e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	f043 0208 	orr.w	r2, r3, #8
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800be7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be80:	2b01      	cmp	r3, #1
 800be82:	d105      	bne.n	800be90 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	699a      	ldr	r2, [r3, #24]
 800be88:	4b06      	ldr	r3, [pc, #24]	; (800bea4 <USB_DevInit+0x2b8>)
 800be8a:	4313      	orrs	r3, r2
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800be90:	7dfb      	ldrb	r3, [r7, #23]
}
 800be92:	4618      	mov	r0, r3
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800be9c:	b004      	add	sp, #16
 800be9e:	4770      	bx	lr
 800bea0:	803c3800 	.word	0x803c3800
 800bea4:	40000004 	.word	0x40000004

0800bea8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bea8:	b480      	push	{r7}
 800beaa:	b085      	sub	sp, #20
 800beac:	af00      	add	r7, sp, #0
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800beb2:	2300      	movs	r3, #0
 800beb4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3301      	adds	r3, #1
 800beba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	4a13      	ldr	r2, [pc, #76]	; (800bf0c <USB_FlushTxFifo+0x64>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d901      	bls.n	800bec8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bec4:	2303      	movs	r3, #3
 800bec6:	e01b      	b.n	800bf00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	daf2      	bge.n	800beb6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bed0:	2300      	movs	r3, #0
 800bed2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	019b      	lsls	r3, r3, #6
 800bed8:	f043 0220 	orr.w	r2, r3, #32
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	3301      	adds	r3, #1
 800bee4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	4a08      	ldr	r2, [pc, #32]	; (800bf0c <USB_FlushTxFifo+0x64>)
 800beea:	4293      	cmp	r3, r2
 800beec:	d901      	bls.n	800bef2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800beee:	2303      	movs	r3, #3
 800bef0:	e006      	b.n	800bf00 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	f003 0320 	and.w	r3, r3, #32
 800befa:	2b20      	cmp	r3, #32
 800befc:	d0f0      	beq.n	800bee0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800befe:	2300      	movs	r3, #0
}
 800bf00:	4618      	mov	r0, r3
 800bf02:	3714      	adds	r7, #20
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	00030d40 	.word	0x00030d40

0800bf10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	4a11      	ldr	r2, [pc, #68]	; (800bf6c <USB_FlushRxFifo+0x5c>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d901      	bls.n	800bf2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bf2a:	2303      	movs	r3, #3
 800bf2c:	e018      	b.n	800bf60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	daf2      	bge.n	800bf1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bf36:	2300      	movs	r3, #0
 800bf38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2210      	movs	r2, #16
 800bf3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3301      	adds	r3, #1
 800bf44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4a08      	ldr	r2, [pc, #32]	; (800bf6c <USB_FlushRxFifo+0x5c>)
 800bf4a:	4293      	cmp	r3, r2
 800bf4c:	d901      	bls.n	800bf52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bf4e:	2303      	movs	r3, #3
 800bf50:	e006      	b.n	800bf60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	f003 0310 	and.w	r3, r3, #16
 800bf5a:	2b10      	cmp	r3, #16
 800bf5c:	d0f0      	beq.n	800bf40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	3714      	adds	r7, #20
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr
 800bf6c:	00030d40 	.word	0x00030d40

0800bf70 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bf70:	b480      	push	{r7}
 800bf72:	b085      	sub	sp, #20
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	460b      	mov	r3, r1
 800bf7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	78fb      	ldrb	r3, [r7, #3]
 800bf8a:	68f9      	ldr	r1, [r7, #12]
 800bf8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf90:	4313      	orrs	r3, r2
 800bf92:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bf94:	2300      	movs	r3, #0
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3714      	adds	r7, #20
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa0:	4770      	bx	lr

0800bfa2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bfa2:	b480      	push	{r7}
 800bfa4:	b085      	sub	sp, #20
 800bfa6:	af00      	add	r7, sp, #0
 800bfa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfbc:	f023 0303 	bic.w	r3, r3, #3
 800bfc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	68fa      	ldr	r2, [r7, #12]
 800bfcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfd0:	f043 0302 	orr.w	r3, r3, #2
 800bfd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	695b      	ldr	r3, [r3, #20]
 800bff0:	f003 0301 	and.w	r3, r3, #1
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	370c      	adds	r7, #12
 800bff8:	46bd      	mov	sp, r7
 800bffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffe:	4770      	bx	lr

0800c000 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c000:	b480      	push	{r7}
 800c002:	b085      	sub	sp, #20
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c008:	2300      	movs	r3, #0
 800c00a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3301      	adds	r3, #1
 800c010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	4a13      	ldr	r2, [pc, #76]	; (800c064 <USB_CoreReset+0x64>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d901      	bls.n	800c01e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c01a:	2303      	movs	r3, #3
 800c01c:	e01b      	b.n	800c056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	691b      	ldr	r3, [r3, #16]
 800c022:	2b00      	cmp	r3, #0
 800c024:	daf2      	bge.n	800c00c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c026:	2300      	movs	r3, #0
 800c028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	691b      	ldr	r3, [r3, #16]
 800c02e:	f043 0201 	orr.w	r2, r3, #1
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	3301      	adds	r3, #1
 800c03a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4a09      	ldr	r2, [pc, #36]	; (800c064 <USB_CoreReset+0x64>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d901      	bls.n	800c048 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c044:	2303      	movs	r3, #3
 800c046:	e006      	b.n	800c056 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	f003 0301 	and.w	r3, r3, #1
 800c050:	2b01      	cmp	r3, #1
 800c052:	d0f0      	beq.n	800c036 <USB_CoreReset+0x36>

  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr
 800c062:	bf00      	nop
 800c064:	00030d40 	.word	0x00030d40

0800c068 <memset>:
 800c068:	4402      	add	r2, r0
 800c06a:	4603      	mov	r3, r0
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d100      	bne.n	800c072 <memset+0xa>
 800c070:	4770      	bx	lr
 800c072:	f803 1b01 	strb.w	r1, [r3], #1
 800c076:	e7f9      	b.n	800c06c <memset+0x4>

0800c078 <__libc_init_array>:
 800c078:	b570      	push	{r4, r5, r6, lr}
 800c07a:	4d0d      	ldr	r5, [pc, #52]	; (800c0b0 <__libc_init_array+0x38>)
 800c07c:	4c0d      	ldr	r4, [pc, #52]	; (800c0b4 <__libc_init_array+0x3c>)
 800c07e:	1b64      	subs	r4, r4, r5
 800c080:	10a4      	asrs	r4, r4, #2
 800c082:	2600      	movs	r6, #0
 800c084:	42a6      	cmp	r6, r4
 800c086:	d109      	bne.n	800c09c <__libc_init_array+0x24>
 800c088:	4d0b      	ldr	r5, [pc, #44]	; (800c0b8 <__libc_init_array+0x40>)
 800c08a:	4c0c      	ldr	r4, [pc, #48]	; (800c0bc <__libc_init_array+0x44>)
 800c08c:	f000 f818 	bl	800c0c0 <_init>
 800c090:	1b64      	subs	r4, r4, r5
 800c092:	10a4      	asrs	r4, r4, #2
 800c094:	2600      	movs	r6, #0
 800c096:	42a6      	cmp	r6, r4
 800c098:	d105      	bne.n	800c0a6 <__libc_init_array+0x2e>
 800c09a:	bd70      	pop	{r4, r5, r6, pc}
 800c09c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0a0:	4798      	blx	r3
 800c0a2:	3601      	adds	r6, #1
 800c0a4:	e7ee      	b.n	800c084 <__libc_init_array+0xc>
 800c0a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c0aa:	4798      	blx	r3
 800c0ac:	3601      	adds	r6, #1
 800c0ae:	e7f2      	b.n	800c096 <__libc_init_array+0x1e>
 800c0b0:	0800c118 	.word	0x0800c118
 800c0b4:	0800c118 	.word	0x0800c118
 800c0b8:	0800c118 	.word	0x0800c118
 800c0bc:	0800c11c 	.word	0x0800c11c

0800c0c0 <_init>:
 800c0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c2:	bf00      	nop
 800c0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0c6:	bc08      	pop	{r3}
 800c0c8:	469e      	mov	lr, r3
 800c0ca:	4770      	bx	lr

0800c0cc <_fini>:
 800c0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ce:	bf00      	nop
 800c0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0d2:	bc08      	pop	{r3}
 800c0d4:	469e      	mov	lr, r3
 800c0d6:	4770      	bx	lr
