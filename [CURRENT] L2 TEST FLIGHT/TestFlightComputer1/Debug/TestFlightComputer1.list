
TestFlightComputer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000de54  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  0800e124  0800e124  0001e124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e278  0800e278  0001e278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e280  0800e280  0001e280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e284  0800e284  0001e284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000060  24000000  0800e288  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000efc  24000060  0800e2e8  00020060  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24000f5c  0800e2e8  00020f5c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 11 .debug_info   000292bc  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005104  00000000  00000000  0004938d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002220  00000000  00000000  0004e498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001a5e  00000000  00000000  000506b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003aed2  00000000  00000000  00052116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000309b2  00000000  00000000  0008cfe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016b11a  00000000  00000000  000bd99a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00009728  00000000  00000000  00228ab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000098  00000000  00000000  002321dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000060 	.word	0x24000060
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800e10c 	.word	0x0800e10c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000064 	.word	0x24000064
 800030c:	0800e10c 	.word	0x0800e10c

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b0:	f001 fe1c 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b4:	f000 f82a 	bl	800070c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006b8:	f000 f89a 	bl	80007f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006bc:	f000 fcf0 	bl	80010a0 <MX_GPIO_Init>
  MX_CORDIC_Init();
 80006c0:	f000 f944 	bl	800094c <MX_CORDIC_Init>
  MX_CRC_Init();
 80006c4:	f000 f956 	bl	8000974 <MX_CRC_Init>
  MX_FMAC_Init();
 80006c8:	f000 f976 	bl	80009b8 <MX_FMAC_Init>
  MX_I2C1_Init();
 80006cc:	f000 f988 	bl	80009e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80006d0:	f000 f9c6 	bl	8000a60 <MX_I2C2_Init>
  MX_I2C3_Init();
 80006d4:	f000 fa04 	bl	8000ae0 <MX_I2C3_Init>
  MX_I2C4_Init();
 80006d8:	f000 fa42 	bl	8000b60 <MX_I2C4_Init>
  MX_RNG_Init();
 80006dc:	f000 fa80 	bl	8000be0 <MX_RNG_Init>
  MX_SDMMC1_SD_Init();
 80006e0:	f000 fa94 	bl	8000c0c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80006e4:	f000 fab0 	bl	8000c48 <MX_SPI1_Init>
  MX_SPI2_Init();
 80006e8:	f000 fb04 	bl	8000cf4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80006ec:	f000 fb58 	bl	8000da0 <MX_SPI3_Init>
  MX_SPI4_Init();
 80006f0:	f000 fbac 	bl	8000e4c <MX_SPI4_Init>
  MX_SPI6_Init();
 80006f4:	f000 fc00 	bl	8000ef8 <MX_SPI6_Init>
  MX_USB_OTG_HS_PCD_Init();
 80006f8:	f000 fca0 	bl	800103c <MX_USB_OTG_HS_PCD_Init>
  MX_ADC1_Init();
 80006fc:	f000 f8ae 	bl	800085c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000700:	f000 fc50 	bl	8000fa4 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8000704:	f00b fad8 	bl	800bcb8 <MX_FATFS_Init>

  /* USER CODE SD BEGIN 2 */

  /* USER CODE SD END 2 */

  while (1)
 8000708:	e7fe      	b.n	8000708 <main+0x5c>
	...

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b09c      	sub	sp, #112	; 0x70
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000716:	224c      	movs	r2, #76	; 0x4c
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f00d f90c 	bl	800d938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	2220      	movs	r2, #32
 8000724:	2100      	movs	r1, #0
 8000726:	4618      	mov	r0, r3
 8000728:	f00d f906 	bl	800d938 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800072c:	2002      	movs	r0, #2
 800072e:	f004 f901 	bl	8004934 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b2d      	ldr	r3, [pc, #180]	; (80007ec <SystemClock_Config+0xe0>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800073e:	4a2b      	ldr	r2, [pc, #172]	; (80007ec <SystemClock_Config+0xe0>)
 8000740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000744:	6193      	str	r3, [r2, #24]
 8000746:	4b29      	ldr	r3, [pc, #164]	; (80007ec <SystemClock_Config+0xe0>)
 8000748:	699b      	ldr	r3, [r3, #24]
 800074a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000752:	bf00      	nop
 8000754:	4b25      	ldr	r3, [pc, #148]	; (80007ec <SystemClock_Config+0xe0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800075c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000760:	d1f8      	bne.n	8000754 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000762:	2322      	movs	r3, #34	; 0x22
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000766:	2301      	movs	r3, #1
 8000768:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800076a:	2340      	movs	r3, #64	; 0x40
 800076c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800076e:	2301      	movs	r3, #1
 8000770:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000776:	2300      	movs	r3, #0
 8000778:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800077a:	2304      	movs	r3, #4
 800077c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800077e:	230c      	movs	r3, #12
 8000780:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8000786:	2301      	movs	r3, #1
 8000788:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078a:	2302      	movs	r3, #2
 800078c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800078e:	230c      	movs	r3, #12
 8000790:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000792:	2300      	movs	r3, #0
 8000794:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	4618      	mov	r0, r3
 80007a0:	f004 f912 	bl	80049c8 <HAL_RCC_OscConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007aa:	f000 fd3f 	bl	800122c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ae:	233f      	movs	r3, #63	; 0x3f
 80007b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b2:	2303      	movs	r3, #3
 80007b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80007c2:	2350      	movs	r3, #80	; 0x50
 80007c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ca:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 80007cc:	2350      	movs	r3, #80	; 0x50
 80007ce:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 fcd1 	bl	800517c <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80007e0:	f000 fd24 	bl	800122c <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3770      	adds	r7, #112	; 0x70
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	58024800 	.word	0x58024800

080007f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b0ae      	sub	sp, #184	; 0xb8
 80007f4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	22b8      	movs	r2, #184	; 0xb8
 80007fa:	2100      	movs	r1, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f00d f89b 	bl	800d938 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <PeriphCommonClock_Config+0x68>)
 8000804:	f04f 0300 	mov.w	r3, #0
 8000808:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000810:	230c      	movs	r3, #12
 8000812:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000818:	2302      	movs	r3, #2
 800081a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800081c:	2302      	movs	r3, #2
 800081e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000820:	23c0      	movs	r3, #192	; 0xc0
 8000822:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000824:	2300      	movs	r3, #0
 8000826:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800082c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000832:	2300      	movs	r3, #0
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000836:	2300      	movs	r3, #0
 8000838:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083c:	463b      	mov	r3, r7
 800083e:	4618      	mov	r0, r3
 8000840:	f005 f828 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800084a:	f000 fcef 	bl	800122c <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	37b8      	adds	r7, #184	; 0xb8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	80090000 	.word	0x80090000

0800085c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08c      	sub	sp, #48	; 0x30
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2224      	movs	r2, #36	; 0x24
 8000872:	2100      	movs	r1, #0
 8000874:	4618      	mov	r0, r3
 8000876:	f00d f85f 	bl	800d938 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800087a:	4b31      	ldr	r3, [pc, #196]	; (8000940 <MX_ADC1_Init+0xe4>)
 800087c:	4a31      	ldr	r2, [pc, #196]	; (8000944 <MX_ADC1_Init+0xe8>)
 800087e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000880:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MX_ADC1_Init+0xe4>)
 8000882:	2200      	movs	r2, #0
 8000884:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000886:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <MX_ADC1_Init+0xe4>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800088c:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_ADC1_Init+0xe4>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000892:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <MX_ADC1_Init+0xe4>)
 8000894:	2204      	movs	r2, #4
 8000896:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000898:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_ADC1_Init+0xe4>)
 800089a:	2200      	movs	r2, #0
 800089c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800089e:	4b28      	ldr	r3, [pc, #160]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80008a4:	4b26      	ldr	r3, [pc, #152]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008a6:	2201      	movs	r2, #1
 80008a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008aa:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b2:	4b23      	ldr	r3, [pc, #140]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008b8:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d8:	4819      	ldr	r0, [pc, #100]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008da:	f002 f803 	bl	80028e4 <HAL_ADC_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80008e4:	f000 fca2 	bl	800122c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	4813      	ldr	r0, [pc, #76]	; (8000940 <MX_ADC1_Init+0xe4>)
 80008f4:	f003 f83e 	bl	8003974 <HAL_ADCEx_MultiModeConfigChannel>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80008fe:	f000 fc95 	bl	800122c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000902:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_ADC1_Init+0xec>)
 8000904:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000906:	2306      	movs	r3, #6
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800090e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000912:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000914:	2304      	movs	r3, #4
 8000916:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_ADC1_Init+0xe4>)
 8000928:	f002 f9e4 	bl	8002cf4 <HAL_ADC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8000932:	f000 fc7b 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	; 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	2400007c 	.word	0x2400007c
 8000944:	40022000 	.word	0x40022000
 8000948:	10c00010 	.word	0x10c00010

0800094c <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_CORDIC_Init+0x20>)
 8000952:	4a07      	ldr	r2, [pc, #28]	; (8000970 <MX_CORDIC_Init+0x24>)
 8000954:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_CORDIC_Init+0x20>)
 8000958:	f003 f8ee 	bl	8003b38 <HAL_CORDIC_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000962:	f000 fc63 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	240000ec 	.word	0x240000ec
 8000970:	48024400 	.word	0x48024400

08000974 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000978:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_CRC_Init+0x3c>)
 800097a:	4a0e      	ldr	r2, [pc, #56]	; (80009b4 <MX_CRC_Init+0x40>)
 800097c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800097e:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <MX_CRC_Init+0x3c>)
 8000980:	2200      	movs	r2, #0
 8000982:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <MX_CRC_Init+0x3c>)
 8000986:	2200      	movs	r2, #0
 8000988:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800098a:	4b09      	ldr	r3, [pc, #36]	; (80009b0 <MX_CRC_Init+0x3c>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000990:	4b07      	ldr	r3, [pc, #28]	; (80009b0 <MX_CRC_Init+0x3c>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000996:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <MX_CRC_Init+0x3c>)
 8000998:	2201      	movs	r2, #1
 800099a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800099c:	4804      	ldr	r0, [pc, #16]	; (80009b0 <MX_CRC_Init+0x3c>)
 800099e:	f003 f9e1 	bl	8003d64 <HAL_CRC_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80009a8:	f000 fc40 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24000114 	.word	0x24000114
 80009b4:	58024c00 	.word	0x58024c00

080009b8 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_FMAC_Init+0x20>)
 80009be:	4a07      	ldr	r2, [pc, #28]	; (80009dc <MX_FMAC_Init+0x24>)
 80009c0:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_FMAC_Init+0x20>)
 80009c4:	f003 fac0 	bl	8003f48 <HAL_FMAC_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80009ce:	f000 fc2d 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	24000138 	.word	0x24000138
 80009dc:	48024000 	.word	0x48024000

080009e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009e6:	4a1c      	ldr	r2, [pc, #112]	; (8000a58 <MX_I2C1_Init+0x78>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80009ea:	4b1a      	ldr	r3, [pc, #104]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <MX_I2C1_Init+0x7c>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f0:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b17      	ldr	r3, [pc, #92]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b15      	ldr	r3, [pc, #84]	; (8000a54 <MX_I2C1_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1a:	480e      	ldr	r0, [pc, #56]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a1c:	f003 fd1a 	bl	8004454 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 fc01 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4809      	ldr	r0, [pc, #36]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a2e:	f003 fda1 	bl	8004574 <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 fbf8 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_I2C1_Init+0x74>)
 8000a40:	f003 fde3 	bl	800460a <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 fbef 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	24000170 	.word	0x24000170
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	20303e5d 	.word	0x20303e5d

08000a60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a64:	4b1b      	ldr	r3, [pc, #108]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <MX_I2C2_Init+0x78>)
 8000a68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a6c:	4a1b      	ldr	r2, [pc, #108]	; (8000adc <MX_I2C2_Init+0x7c>)
 8000a6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a70:	4b18      	ldr	r3, [pc, #96]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a76:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a7c:	4b15      	ldr	r3, [pc, #84]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a9a:	480e      	ldr	r0, [pc, #56]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000a9c:	f003 fcda 	bl	8004454 <HAL_I2C_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aa6:	f000 fbc1 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000aae:	f003 fd61 	bl	8004574 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ab8:	f000 fbb8 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000abc:	2100      	movs	r1, #0
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_I2C2_Init+0x74>)
 8000ac0:	f003 fda3 	bl	800460a <HAL_I2CEx_ConfigDigitalFilter>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aca:	f000 fbaf 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	240001c4 	.word	0x240001c4
 8000ad8:	40005800 	.word	0x40005800
 8000adc:	20303e5d 	.word	0x20303e5d

08000ae0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <MX_I2C3_Init+0x78>)
 8000ae8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8000aea:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000aec:	4a1b      	ldr	r2, [pc, #108]	; (8000b5c <MX_I2C3_Init+0x7c>)
 8000aee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000af8:	2201      	movs	r2, #1
 8000afa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b1a:	480e      	ldr	r0, [pc, #56]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b1c:	f003 fc9a 	bl	8004454 <HAL_I2C_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000b26:	f000 fb81 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b2e:	f003 fd21 	bl	8004574 <HAL_I2CEx_ConfigAnalogFilter>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000b38:	f000 fb78 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_I2C3_Init+0x74>)
 8000b40:	f003 fd63 	bl	800460a <HAL_I2CEx_ConfigDigitalFilter>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000b4a:	f000 fb6f 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	24000218 	.word	0x24000218
 8000b58:	40005c00 	.word	0x40005c00
 8000b5c:	20303e5d 	.word	0x20303e5d

08000b60 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <MX_I2C4_Init+0x78>)
 8000b68:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000b6c:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <MX_I2C4_Init+0x7c>)
 8000b6e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000b70:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000b9a:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000b9c:	f003 fc5a 	bl	8004454 <HAL_I2C_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000ba6:	f000 fb41 	bl	800122c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000baa:	2100      	movs	r1, #0
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000bae:	f003 fce1 	bl	8004574 <HAL_I2CEx_ConfigAnalogFilter>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000bb8:	f000 fb38 	bl	800122c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_I2C4_Init+0x74>)
 8000bc0:	f003 fd23 	bl	800460a <HAL_I2CEx_ConfigDigitalFilter>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000bca:	f000 fb2f 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	2400026c 	.word	0x2400026c
 8000bd8:	58001c00 	.word	0x58001c00
 8000bdc:	20303e5d 	.word	0x20303e5d

08000be0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <MX_RNG_Init+0x24>)
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <MX_RNG_Init+0x28>)
 8000be8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_RNG_Init+0x24>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000bf0:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_RNG_Init+0x24>)
 8000bf2:	f007 fa35 	bl	8008060 <HAL_RNG_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000bfc:	f000 fb16 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	240002c0 	.word	0x240002c0
 8000c08:	48021800 	.word	0x48021800

08000c0c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c10:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_SDMMC1_SD_Init+0x34>)
 8000c12:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <MX_SDMMC1_SD_Init+0x38>)
 8000c14:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_SDMMC1_SD_Init+0x34>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_SDMMC1_SD_Init+0x34>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_SDMMC1_SD_Init+0x34>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <MX_SDMMC1_SD_Init+0x34>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c2e:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <MX_SDMMC1_SD_Init+0x34>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	240002d4 	.word	0x240002d4
 8000c44:	52007000 	.word	0x52007000

08000c48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c4e:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <MX_SPI1_Init+0xa8>)
 8000c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c52:	4b26      	ldr	r3, [pc, #152]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c54:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c5a:	4b24      	ldr	r3, [pc, #144]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c62:	2203      	movs	r2, #3
 8000c64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c74:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000c78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c8c:	4b17      	ldr	r3, [pc, #92]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c92:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c9e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ca0:	4b12      	ldr	r3, [pc, #72]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_SPI1_Init+0xa4>)
 8000cd8:	f008 fc50 	bl	800957c <HAL_SPI_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000ce2:	f000 faa3 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	24000350 	.word	0x24000350
 8000cf0:	40013000 	.word	0x40013000

08000cf4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cf8:	4b27      	ldr	r3, [pc, #156]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000cfa:	4a28      	ldr	r2, [pc, #160]	; (8000d9c <MX_SPI2_Init+0xa8>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cfe:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d04:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d06:	4b24      	ldr	r3, [pc, #144]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d0e:	2203      	movs	r2, #3
 8000d10:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d20:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d24:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d26:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d2c:	4b1a      	ldr	r3, [pc, #104]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d32:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d6a:	4b0b      	ldr	r3, [pc, #44]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d76:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_SPI2_Init+0xa4>)
 8000d84:	f008 fbfa 	bl	800957c <HAL_SPI_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8000d8e:	f000 fa4d 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	240003d8 	.word	0x240003d8
 8000d9c:	40003800 	.word	0x40003800

08000da0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000da4:	4b27      	ldr	r3, [pc, #156]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000da6:	4a28      	ldr	r2, [pc, #160]	; (8000e48 <MX_SPI3_Init+0xa8>)
 8000da8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000daa:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000dac:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000db0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000db2:	4b24      	ldr	r3, [pc, #144]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000db8:	4b22      	ldr	r3, [pc, #136]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000dba:	2203      	movs	r2, #3
 8000dbc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000dc4:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000dca:	4b1e      	ldr	r3, [pc, #120]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000dcc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000dd0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000dea:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000df0:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e10:	4b0c      	ldr	r3, [pc, #48]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e16:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e22:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_SPI3_Init+0xa4>)
 8000e30:	f008 fba4 	bl	800957c <HAL_SPI_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000e3a:	f000 f9f7 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	24000460 	.word	0x24000460
 8000e48:	40003c00 	.word	0x40003c00

08000e4c <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000e50:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e52:	4a28      	ldr	r2, [pc, #160]	; (8000ef4 <MX_SPI4_Init+0xa8>)
 8000e54:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000e56:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e58:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000e5c:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e5e:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e64:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e66:	2203      	movs	r2, #3
 8000e68:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e76:	4b1e      	ldr	r3, [pc, #120]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e78:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000e7c:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e90:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e9c:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000ec8:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ece:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000eda:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_SPI4_Init+0xa4>)
 8000edc:	f008 fb4e 	bl	800957c <HAL_SPI_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000ee6:	f000 f9a1 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	240004e8 	.word	0x240004e8
 8000ef4:	40013400 	.word	0x40013400

08000ef8 <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 8000efc:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000efe:	4a28      	ldr	r2, [pc, #160]	; (8000fa0 <MX_SPI6_Init+0xa8>)
 8000f00:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f08:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f10:	4b22      	ldr	r3, [pc, #136]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f12:	2203      	movs	r2, #3
 8000f14:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f24:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000f28:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f4e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_SPI6_Init+0xa4>)
 8000f88:	f008 faf8 	bl	800957c <HAL_SPI_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8000f92:	f000 f94b 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	24000570 	.word	0x24000570
 8000fa0:	58001400 	.word	0x58001400

08000fa4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000faa:	4a23      	ldr	r2, [pc, #140]	; (8001038 <MX_USART2_UART_Init+0x94>)
 8000fac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb6:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fbc:	4b1d      	ldr	r3, [pc, #116]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fca:	220c      	movs	r2, #12
 8000fcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fec:	4811      	ldr	r0, [pc, #68]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8000fee:	f008 fc04 	bl	80097fa <HAL_UART_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ff8:	f000 f918 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8001000:	f009 fd0b 	bl	800aa1a <HAL_UARTEx_SetTxFifoThreshold>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800100a:	f000 f90f 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800100e:	2100      	movs	r1, #0
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8001012:	f009 fd40 	bl	800aa96 <HAL_UARTEx_SetRxFifoThreshold>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800101c:	f000 f906 	bl	800122c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001020:	4804      	ldr	r0, [pc, #16]	; (8001034 <MX_USART2_UART_Init+0x90>)
 8001022:	f009 fcc1 	bl	800a9a8 <HAL_UARTEx_DisableFifoMode>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800102c:	f000 f8fe 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	240005f8 	.word	0x240005f8
 8001038:	40004400 	.word	0x40004400

0800103c <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <MX_USB_OTG_HS_PCD_Init+0x60>)
 8001044:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001048:	2209      	movs	r2, #9
 800104a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800104c:	4b12      	ldr	r3, [pc, #72]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800104e:	2202      	movs	r2, #2
 8001050:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8001058:	4b0f      	ldr	r3, [pc, #60]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800105a:	2202      	movs	r2, #2
 800105c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800106c:	2200      	movs	r2, #0
 800106e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001070:	4b09      	ldr	r3, [pc, #36]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001072:	2200      	movs	r2, #0
 8001074:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001078:	2200      	movs	r2, #0
 800107a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800107e:	2200      	movs	r2, #0
 8001080:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001082:	4805      	ldr	r0, [pc, #20]	; (8001098 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8001084:	f003 fb0d 	bl	80046a2 <HAL_PCD_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 800108e:	f000 f8cd 	bl	800122c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	2400068c 	.word	0x2400068c
 800109c:	40040000 	.word	0x40040000

080010a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a6:	f107 031c 	add.w	r3, r7, #28
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b57      	ldr	r3, [pc, #348]	; (8001214 <MX_GPIO_Init+0x174>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	4a55      	ldr	r2, [pc, #340]	; (8001214 <MX_GPIO_Init+0x174>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c6:	4b53      	ldr	r3, [pc, #332]	; (8001214 <MX_GPIO_Init+0x174>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010d4:	4b4f      	ldr	r3, [pc, #316]	; (8001214 <MX_GPIO_Init+0x174>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4a4e      	ldr	r2, [pc, #312]	; (8001214 <MX_GPIO_Init+0x174>)
 80010dc:	f043 0310 	orr.w	r3, r3, #16
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4b4b      	ldr	r3, [pc, #300]	; (8001214 <MX_GPIO_Init+0x174>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0310 	and.w	r3, r3, #16
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	4b48      	ldr	r3, [pc, #288]	; (8001214 <MX_GPIO_Init+0x174>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f8:	4a46      	ldr	r2, [pc, #280]	; (8001214 <MX_GPIO_Init+0x174>)
 80010fa:	f043 0302 	orr.w	r3, r3, #2
 80010fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001102:	4b44      	ldr	r3, [pc, #272]	; (8001214 <MX_GPIO_Init+0x174>)
 8001104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001110:	4b40      	ldr	r3, [pc, #256]	; (8001214 <MX_GPIO_Init+0x174>)
 8001112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001116:	4a3f      	ldr	r2, [pc, #252]	; (8001214 <MX_GPIO_Init+0x174>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001120:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <MX_GPIO_Init+0x174>)
 8001122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112e:	4b39      	ldr	r3, [pc, #228]	; (8001214 <MX_GPIO_Init+0x174>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	4a37      	ldr	r2, [pc, #220]	; (8001214 <MX_GPIO_Init+0x174>)
 8001136:	f043 0308 	orr.w	r3, r3, #8
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800113e:	4b35      	ldr	r3, [pc, #212]	; (8001214 <MX_GPIO_Init+0x174>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	f003 0308 	and.w	r3, r3, #8
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800114c:	4b31      	ldr	r3, [pc, #196]	; (8001214 <MX_GPIO_Init+0x174>)
 800114e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001152:	4a30      	ldr	r2, [pc, #192]	; (8001214 <MX_GPIO_Init+0x174>)
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115c:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <MX_GPIO_Init+0x174>)
 800115e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001170:	4829      	ldr	r0, [pc, #164]	; (8001218 <MX_GPIO_Init+0x178>)
 8001172:	f003 f955 	bl	8004420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_10
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 415f 	mov.w	r1, #57088	; 0xdf00
 800117c:	4827      	ldr	r0, [pc, #156]	; (800121c <MX_GPIO_Init+0x17c>)
 800117e:	f003 f94f 	bl	8004420 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001186:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001188:	2301      	movs	r3, #1
 800118a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	481f      	ldr	r0, [pc, #124]	; (8001218 <MX_GPIO_Init+0x178>)
 800119c:	f002 ff80 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_7;
 80011a0:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 80011a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a6:	2300      	movs	r3, #0
 80011a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4619      	mov	r1, r3
 80011b4:	481a      	ldr	r0, [pc, #104]	; (8001220 <MX_GPIO_Init+0x180>)
 80011b6:	f002 ff73 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD11 PD14 PD10
                           PD9 PD8 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_10
 80011ba:	f44f 435f 	mov.w	r3, #57088	; 0xdf00
 80011be:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c0:	2301      	movs	r3, #1
 80011c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4812      	ldr	r0, [pc, #72]	; (800121c <MX_GPIO_Init+0x17c>)
 80011d4:	f002 ff64 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_12;
 80011d8:	f243 0303 	movw	r3, #12291	; 0x3003
 80011dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e6:	f107 031c 	add.w	r3, r7, #28
 80011ea:	4619      	mov	r1, r3
 80011ec:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_GPIO_Init+0x184>)
 80011ee:	f002 ff57 	bl	80040a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE12 PE9 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_13;
 80011f2:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001200:	f107 031c 	add.w	r3, r7, #28
 8001204:	4619      	mov	r1, r3
 8001206:	4808      	ldr	r0, [pc, #32]	; (8001228 <MX_GPIO_Init+0x188>)
 8001208:	f002 ff4a 	bl	80040a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800120c:	bf00      	nop
 800120e:	3730      	adds	r7, #48	; 0x30
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58024400 	.word	0x58024400
 8001218:	58020800 	.word	0x58020800
 800121c:	58020c00 	.word	0x58020c00
 8001220:	58020000 	.word	0x58020000
 8001224:	58020400 	.word	0x58020400
 8001228:	58021000 	.word	0x58021000

0800122c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001230:	b672      	cpsid	i
}
 8001232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001234:	e7fe      	b.n	8001234 <Error_Handler+0x8>
	...

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <HAL_MspInit+0x30>)
 8001240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001244:	4a08      	ldr	r2, [pc, #32]	; (8001268 <HAL_MspInit+0x30>)
 8001246:	f043 0302 	orr.w	r3, r3, #2
 800124a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_MspInit+0x30>)
 8001250:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	58024400 	.word	0x58024400

0800126c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a18      	ldr	r2, [pc, #96]	; (80012ec <HAL_ADC_MspInit+0x80>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d129      	bne.n	80012e2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800128e:	4b18      	ldr	r3, [pc, #96]	; (80012f0 <HAL_ADC_MspInit+0x84>)
 8001290:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001294:	4a16      	ldr	r2, [pc, #88]	; (80012f0 <HAL_ADC_MspInit+0x84>)
 8001296:	f043 0320 	orr.w	r3, r3, #32
 800129a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800129e:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <HAL_ADC_MspInit+0x84>)
 80012a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80012a4:	f003 0320 	and.w	r3, r3, #32
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <HAL_ADC_MspInit+0x84>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b2:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <HAL_ADC_MspInit+0x84>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <HAL_ADC_MspInit+0x84>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c2:	f003 0304 	and.w	r3, r3, #4
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|BATADC1_Pin;
 80012ca:	2311      	movs	r3, #17
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ce:	2303      	movs	r3, #3
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <HAL_ADC_MspInit+0x88>)
 80012de:	f002 fedf 	bl	80040a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e2:	bf00      	nop
 80012e4:	3728      	adds	r7, #40	; 0x28
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40022000 	.word	0x40022000
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58020800 	.word	0x58020800

080012f8 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_CORDIC_MspInit+0x3c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d10e      	bne.n	8001328 <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_CORDIC_MspInit+0x40>)
 800130c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001310:	4a09      	ldr	r2, [pc, #36]	; (8001338 <HAL_CORDIC_MspInit+0x40>)
 8001312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001316:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <HAL_CORDIC_MspInit+0x40>)
 800131c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	48024400 	.word	0x48024400
 8001338:	58024400 	.word	0x58024400

0800133c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <HAL_CRC_MspInit+0x3c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d10e      	bne.n	800136c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_CRC_MspInit+0x40>)
 8001350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001354:	4a09      	ldr	r2, [pc, #36]	; (800137c <HAL_CRC_MspInit+0x40>)
 8001356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800135a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <HAL_CRC_MspInit+0x40>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3714      	adds	r7, #20
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	58024c00 	.word	0x58024c00
 800137c:	58024400 	.word	0x58024400

08001380 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_FMAC_MspInit+0x3c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10e      	bne.n	80013b0 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_FMAC_MspInit+0x40>)
 8001394:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_FMAC_MspInit+0x40>)
 800139a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800139e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_FMAC_MspInit+0x40>)
 80013a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	48024000 	.word	0x48024000
 80013c0:	58024400 	.word	0x58024400

080013c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0c0      	sub	sp, #256	; 0x100
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013e0:	22b8      	movs	r2, #184	; 0xb8
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f00c faa7 	bl	800d938 <memset>
  if(hi2c->Instance==I2C1)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4abf      	ldr	r2, [pc, #764]	; (80016ec <HAL_I2C_MspInit+0x328>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d147      	bne.n	8001484 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013f4:	f04f 0208 	mov.w	r2, #8
 80013f8:	f04f 0300 	mov.w	r3, #0
 80013fc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001406:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800140a:	4618      	mov	r0, r3
 800140c:	f004 fa42 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001416:	f7ff ff09 	bl	800122c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	4bb5      	ldr	r3, [pc, #724]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 800141c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001420:	4ab3      	ldr	r2, [pc, #716]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001422:	f043 0302 	orr.w	r3, r3, #2
 8001426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142a:	4bb1      	ldr	r3, [pc, #708]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 800142c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001438:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800143c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001440:	2312      	movs	r3, #18
 8001442:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001452:	2304      	movs	r3, #4
 8001454:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800145c:	4619      	mov	r1, r3
 800145e:	48a5      	ldr	r0, [pc, #660]	; (80016f4 <HAL_I2C_MspInit+0x330>)
 8001460:	f002 fe1e 	bl	80040a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001464:	4ba2      	ldr	r3, [pc, #648]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001466:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800146a:	4aa1      	ldr	r2, [pc, #644]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 800146c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001470:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001474:	4b9e      	ldr	r3, [pc, #632]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001476:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800147a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001480:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001482:	e12e      	b.n	80016e2 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C2)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a9b      	ldr	r2, [pc, #620]	; (80016f8 <HAL_I2C_MspInit+0x334>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d147      	bne.n	800151e <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800148e:	f04f 0208 	mov.w	r2, #8
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 f9f5 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80014b0:	f7ff febc 	bl	800122c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b8e      	ldr	r3, [pc, #568]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	4a8d      	ldr	r2, [pc, #564]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c4:	4b8a      	ldr	r3, [pc, #552]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	627b      	str	r3, [r7, #36]	; 0x24
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80014d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80014d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014da:	2312      	movs	r3, #18
 80014dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80014ec:	2304      	movs	r3, #4
 80014ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80014f6:	4619      	mov	r1, r3
 80014f8:	487e      	ldr	r0, [pc, #504]	; (80016f4 <HAL_I2C_MspInit+0x330>)
 80014fa:	f002 fdd1 	bl	80040a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014fe:	4b7c      	ldr	r3, [pc, #496]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001500:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001504:	4a7a      	ldr	r2, [pc, #488]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001506:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800150a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800150e:	4b78      	ldr	r3, [pc, #480]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001510:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001518:	623b      	str	r3, [r7, #32]
 800151a:	6a3b      	ldr	r3, [r7, #32]
}
 800151c:	e0e1      	b.n	80016e2 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C3)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a76      	ldr	r2, [pc, #472]	; (80016fc <HAL_I2C_MspInit+0x338>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d16c      	bne.n	8001602 <HAL_I2C_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001528:	f04f 0208 	mov.w	r2, #8
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800153e:	4618      	mov	r0, r3
 8001540:	f004 f9a8 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 800154a:	f7ff fe6f 	bl	800122c <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001554:	4a66      	ldr	r2, [pc, #408]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155e:	4b64      	ldr	r3, [pc, #400]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	61fb      	str	r3, [r7, #28]
 800156a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156c:	4b60      	ldr	r3, [pc, #384]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 800156e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001572:	4a5f      	ldr	r2, [pc, #380]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157c:	4b5c      	ldr	r3, [pc, #368]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 800157e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	61bb      	str	r3, [r7, #24]
 8001588:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800158a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800158e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001592:	2312      	movs	r3, #18
 8001594:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015a4:	2304      	movs	r3, #4
 80015a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015ae:	4619      	mov	r1, r3
 80015b0:	4853      	ldr	r0, [pc, #332]	; (8001700 <HAL_I2C_MspInit+0x33c>)
 80015b2:	f002 fd75 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015be:	2312      	movs	r3, #18
 80015c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015d0:	2304      	movs	r3, #4
 80015d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015da:	4619      	mov	r1, r3
 80015dc:	4849      	ldr	r0, [pc, #292]	; (8001704 <HAL_I2C_MspInit+0x340>)
 80015de:	f002 fd5f 	bl	80040a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015e2:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 80015e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015e8:	4a41      	ldr	r2, [pc, #260]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 80015ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015f2:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 80015f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
}
 8001600:	e06f      	b.n	80016e2 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C4)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a40      	ldr	r2, [pc, #256]	; (8001708 <HAL_I2C_MspInit+0x344>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d16a      	bne.n	80016e2 <HAL_I2C_MspInit+0x31e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800160c:	f04f 0210 	mov.w	r2, #16
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001618:	2300      	movs	r3, #0
 800161a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800161e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001622:	4618      	mov	r0, r3
 8001624:	f004 f936 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_MspInit+0x26e>
      Error_Handler();
 800162e:	f7ff fdfd 	bl	800122c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4b2f      	ldr	r3, [pc, #188]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001638:	4a2d      	ldr	r2, [pc, #180]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001642:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001650:	4b27      	ldr	r3, [pc, #156]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001656:	4a26      	ldr	r2, [pc, #152]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001660:	4b23      	ldr	r3, [pc, #140]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800166e:	2340      	movs	r3, #64	; 0x40
 8001670:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001674:	2312      	movs	r3, #18
 8001676:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8001686:	2306      	movs	r3, #6
 8001688:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001690:	4619      	mov	r1, r3
 8001692:	4818      	ldr	r0, [pc, #96]	; (80016f4 <HAL_I2C_MspInit+0x330>)
 8001694:	f002 fd04 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800169c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a0:	2312      	movs	r3, #18
 80016a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80016b2:	2304      	movs	r3, #4
 80016b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016bc:	4619      	mov	r1, r3
 80016be:	4813      	ldr	r0, [pc, #76]	; (800170c <HAL_I2C_MspInit+0x348>)
 80016c0:	f002 fcee 	bl	80040a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 80016c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016ca:	4a09      	ldr	r2, [pc, #36]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 80016cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_I2C_MspInit+0x32c>)
 80016d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
}
 80016e2:	bf00      	nop
 80016e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40005400 	.word	0x40005400
 80016f0:	58024400 	.word	0x58024400
 80016f4:	58020400 	.word	0x58020400
 80016f8:	40005800 	.word	0x40005800
 80016fc:	40005c00 	.word	0x40005c00
 8001700:	58020000 	.word	0x58020000
 8001704:	58020800 	.word	0x58020800
 8001708:	58001c00 	.word	0x58001c00
 800170c:	58020c00 	.word	0x58020c00

08001710 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b0b2      	sub	sp, #200	; 0xc8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	22b8      	movs	r2, #184	; 0xb8
 800171e:	2100      	movs	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f00c f909 	bl	800d938 <memset>
  if(hrng->Instance==RNG)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a14      	ldr	r2, [pc, #80]	; (800177c <HAL_RNG_MspInit+0x6c>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d121      	bne.n	8001774 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8001730:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800173c:	2300      	movs	r3, #0
 800173e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4618      	mov	r0, r3
 8001748:	f004 f8a4 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8001752:	f7ff fd6b 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001756:	4b0a      	ldr	r3, [pc, #40]	; (8001780 <HAL_RNG_MspInit+0x70>)
 8001758:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800175c:	4a08      	ldr	r2, [pc, #32]	; (8001780 <HAL_RNG_MspInit+0x70>)
 800175e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001762:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_RNG_MspInit+0x70>)
 8001768:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800176c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001770:	60fb      	str	r3, [r7, #12]
 8001772:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001774:	bf00      	nop
 8001776:	37c8      	adds	r7, #200	; 0xc8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	48021800 	.word	0x48021800
 8001780:	58024400 	.word	0x58024400

08001784 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2a      	ldr	r2, [pc, #168]	; (800184c <HAL_SD_MspInit+0xc8>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d14d      	bne.n	8001842 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_SD_MspInit+0xcc>)
 80017a8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017ac:	4a28      	ldr	r2, [pc, #160]	; (8001850 <HAL_SD_MspInit+0xcc>)
 80017ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <HAL_SD_MspInit+0xcc>)
 80017b8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80017bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <HAL_SD_MspInit+0xcc>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ca:	4a21      	ldr	r2, [pc, #132]	; (8001850 <HAL_SD_MspInit+0xcc>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <HAL_SD_MspInit+0xcc>)
 80017d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e2:	4b1b      	ldr	r3, [pc, #108]	; (8001850 <HAL_SD_MspInit+0xcc>)
 80017e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017e8:	4a19      	ldr	r2, [pc, #100]	; (8001850 <HAL_SD_MspInit+0xcc>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <HAL_SD_MspInit+0xcc>)
 80017f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PD2     ------> SDMMC1_CMD
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001800:	2304      	movs	r3, #4
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001810:	230c      	movs	r3, #12
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	4619      	mov	r1, r3
 800181a:	480e      	ldr	r0, [pc, #56]	; (8001854 <HAL_SD_MspInit+0xd0>)
 800181c:	f002 fc40 	bl	80040a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8001820:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8001824:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001826:	2302      	movs	r3, #2
 8001828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001832:	230c      	movs	r3, #12
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <HAL_SD_MspInit+0xd4>)
 800183e:	f002 fc2f 	bl	80040a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001842:	bf00      	nop
 8001844:	3728      	adds	r7, #40	; 0x28
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	52007000 	.word	0x52007000
 8001850:	58024400 	.word	0x58024400
 8001854:	58020c00 	.word	0x58020c00
 8001858:	58020800 	.word	0x58020800

0800185c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b0c8      	sub	sp, #288	; 0x120
 8001860:	af00      	add	r7, sp, #0
 8001862:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001866:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800186a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	605a      	str	r2, [r3, #4]
 8001876:	609a      	str	r2, [r3, #8]
 8001878:	60da      	str	r2, [r3, #12]
 800187a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800187c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001880:	22b8      	movs	r2, #184	; 0xb8
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f00c f857 	bl	800d938 <memset>
  if(hspi->Instance==SPI1)
 800188a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800188e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a98      	ldr	r2, [pc, #608]	; (8001af8 <HAL_SPI_MspInit+0x29c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	f040 8091 	bne.w	80019c0 <HAL_SPI_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800189e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80018aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80018b6:	4618      	mov	r0, r3
 80018b8:	f003 ffec 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <HAL_SPI_MspInit+0x6a>
    {
      Error_Handler();
 80018c2:	f7ff fcb3 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018c6:	4b8d      	ldr	r3, [pc, #564]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 80018c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018cc:	4a8b      	ldr	r2, [pc, #556]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 80018ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018d6:	4b89      	ldr	r3, [pc, #548]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 80018d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e4:	4b85      	ldr	r3, [pc, #532]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 80018e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ea:	4a84      	ldr	r2, [pc, #528]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018f4:	4b81      	ldr	r3, [pc, #516]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 80018f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4b7e      	ldr	r3, [pc, #504]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001908:	4a7c      	ldr	r2, [pc, #496]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001912:	4b7a      	ldr	r3, [pc, #488]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	647b      	str	r3, [r7, #68]	; 0x44
 800191e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001920:	4b76      	ldr	r3, [pc, #472]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001926:	4a75      	ldr	r2, [pc, #468]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001928:	f043 0308 	orr.w	r3, r3, #8
 800192c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001930:	4b72      	ldr	r3, [pc, #456]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001936:	f003 0308 	and.w	r3, r3, #8
 800193a:	643b      	str	r3, [r7, #64]	; 0x40
 800193c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    PB4(NJTRST)     ------> SPI1_MISO
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800193e:	2318      	movs	r3, #24
 8001940:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001950:	2300      	movs	r3, #0
 8001952:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001956:	2305      	movs	r3, #5
 8001958:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001960:	4619      	mov	r1, r3
 8001962:	4867      	ldr	r0, [pc, #412]	; (8001b00 <HAL_SPI_MspInit+0x2a4>)
 8001964:	f002 fb9c 	bl	80040a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001968:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800196c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001982:	2305      	movs	r3, #5
 8001984:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800198c:	4619      	mov	r1, r3
 800198e:	485d      	ldr	r0, [pc, #372]	; (8001b04 <HAL_SPI_MspInit+0x2a8>)
 8001990:	f002 fb86 	bl	80040a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019ac:	2305      	movs	r3, #5
 80019ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80019b6:	4619      	mov	r1, r3
 80019b8:	4853      	ldr	r0, [pc, #332]	; (8001b08 <HAL_SPI_MspInit+0x2ac>)
 80019ba:	f002 fb71 	bl	80040a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 80019be:	e24d      	b.n	8001e5c <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI2)
 80019c0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80019c4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a4f      	ldr	r2, [pc, #316]	; (8001b0c <HAL_SPI_MspInit+0x2b0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	f040 80a0 	bne.w	8001b14 <HAL_SPI_MspInit+0x2b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80019d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 80019e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 ff51 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_SPI_MspInit+0x1a0>
      Error_Handler();
 80019f8:	f7ff fc18 	bl	800122c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019fc:	4b3f      	ldr	r3, [pc, #252]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 80019fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a02:	4a3e      	ldr	r2, [pc, #248]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a0c:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	4b38      	ldr	r3, [pc, #224]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a20:	4a36      	ldr	r2, [pc, #216]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a22:	f043 0302 	orr.w	r3, r3, #2
 8001a26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2a:	4b34      	ldr	r3, [pc, #208]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a38:	4b30      	ldr	r3, [pc, #192]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3e:	4a2f      	ldr	r2, [pc, #188]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a48:	4b2c      	ldr	r3, [pc, #176]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a4e:	f003 0308 	and.w	r3, r3, #8
 8001a52:	637b      	str	r3, [r7, #52]	; 0x34
 8001a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	4b29      	ldr	r3, [pc, #164]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5c:	4a27      	ldr	r2, [pc, #156]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a5e:	f043 0304 	orr.w	r3, r3, #4
 8001a62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a66:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_SPI_MspInit+0x2a0>)
 8001a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a78:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a8e:	2305      	movs	r3, #5
 8001a90:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4819      	ldr	r0, [pc, #100]	; (8001b00 <HAL_SPI_MspInit+0x2a4>)
 8001a9c:	f002 fb00 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ab8:	2305      	movs	r3, #5
 8001aba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001abe:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4810      	ldr	r0, [pc, #64]	; (8001b08 <HAL_SPI_MspInit+0x2ac>)
 8001ac6:	f002 faeb 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aca:	230c      	movs	r3, #12
 8001acc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ae2:	2305      	movs	r3, #5
 8001ae4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4808      	ldr	r0, [pc, #32]	; (8001b10 <HAL_SPI_MspInit+0x2b4>)
 8001af0:	f002 fad6 	bl	80040a0 <HAL_GPIO_Init>
}
 8001af4:	e1b2      	b.n	8001e5c <HAL_SPI_MspInit+0x600>
 8001af6:	bf00      	nop
 8001af8:	40013000 	.word	0x40013000
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58020400 	.word	0x58020400
 8001b04:	58020000 	.word	0x58020000
 8001b08:	58020c00 	.word	0x58020c00
 8001b0c:	40003800 	.word	0x40003800
 8001b10:	58020800 	.word	0x58020800
  else if(hspi->Instance==SPI3)
 8001b14:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001b18:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4ad1      	ldr	r2, [pc, #836]	; (8001e68 <HAL_SPI_MspInit+0x60c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	f040 8099 	bne.w	8001c5a <HAL_SPI_MspInit+0x3fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001b28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b2c:	f04f 0300 	mov.w	r3, #0
 8001b30:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8001b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b40:	4618      	mov	r0, r3
 8001b42:	f003 fea7 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <HAL_SPI_MspInit+0x2f4>
      Error_Handler();
 8001b4c:	f7ff fb6e 	bl	800122c <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b50:	4bc6      	ldr	r3, [pc, #792]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001b52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b56:	4ac5      	ldr	r2, [pc, #788]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001b58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b60:	4bc2      	ldr	r3, [pc, #776]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001b62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6e:	4bbf      	ldr	r3, [pc, #764]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b74:	4abd      	ldr	r2, [pc, #756]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001b76:	f043 0304 	orr.w	r3, r3, #4
 8001b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b7e:	4bbb      	ldr	r3, [pc, #748]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b8c:	4bb7      	ldr	r3, [pc, #732]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b92:	4ab6      	ldr	r2, [pc, #728]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001b94:	f043 0308 	orr.w	r3, r3, #8
 8001b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b9c:	4bb3      	ldr	r3, [pc, #716]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4bb0      	ldr	r3, [pc, #704]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb0:	4aae      	ldr	r2, [pc, #696]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bba:	4bac      	ldr	r3, [pc, #688]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc0:	f003 0201 	and.w	r2, r3, #1
 8001bc4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001bc8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001bd2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001bd6:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8001bd8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001bdc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bf2:	2306      	movs	r3, #6
 8001bf4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	489c      	ldr	r0, [pc, #624]	; (8001e70 <HAL_SPI_MspInit+0x614>)
 8001c00:	f002 fa4e 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c04:	2340      	movs	r3, #64	; 0x40
 8001c06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001c1c:	2305      	movs	r3, #5
 8001c1e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c22:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001c26:	4619      	mov	r1, r3
 8001c28:	4892      	ldr	r0, [pc, #584]	; (8001e74 <HAL_SPI_MspInit+0x618>)
 8001c2a:	f002 fa39 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c2e:	2310      	movs	r3, #16
 8001c30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c46:	2306      	movs	r3, #6
 8001c48:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001c50:	4619      	mov	r1, r3
 8001c52:	4889      	ldr	r0, [pc, #548]	; (8001e78 <HAL_SPI_MspInit+0x61c>)
 8001c54:	f002 fa24 	bl	80040a0 <HAL_GPIO_Init>
}
 8001c58:	e100      	b.n	8001e5c <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI4)
 8001c5a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c5e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a85      	ldr	r2, [pc, #532]	; (8001e7c <HAL_SPI_MspInit+0x620>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d156      	bne.n	8001d1a <HAL_SPI_MspInit+0x4be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8001c6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c82:	4618      	mov	r0, r3
 8001c84:	f003 fe06 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <HAL_SPI_MspInit+0x436>
      Error_Handler();
 8001c8e:	f7ff facd 	bl	800122c <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c92:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c98:	4a74      	ldr	r2, [pc, #464]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001c9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ca2:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001cac:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001cb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001cba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001cbe:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc6:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001cc8:	f043 0310 	orr.w	r3, r3, #16
 8001ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd0:	4b66      	ldr	r3, [pc, #408]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd6:	f003 0210 	and.w	r2, r3, #16
 8001cda:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001cde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001cec:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001cee:	2374      	movs	r3, #116	; 0x74
 8001cf0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001d06:	2305      	movs	r3, #5
 8001d08:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d0c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001d10:	4619      	mov	r1, r3
 8001d12:	485b      	ldr	r0, [pc, #364]	; (8001e80 <HAL_SPI_MspInit+0x624>)
 8001d14:	f002 f9c4 	bl	80040a0 <HAL_GPIO_Init>
}
 8001d18:	e0a0      	b.n	8001e5c <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI6)
 8001d1a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d1e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a57      	ldr	r2, [pc, #348]	; (8001e84 <HAL_SPI_MspInit+0x628>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	f040 8097 	bne.w	8001e5c <HAL_SPI_MspInit+0x600>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8001d2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d32:	f04f 0300 	mov.w	r3, #0
 8001d36:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 fda5 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_SPI_MspInit+0x4f8>
      Error_Handler();
 8001d50:	f7ff fa6c 	bl	800122c <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8001d54:	4b45      	ldr	r3, [pc, #276]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d5a:	4a44      	ldr	r2, [pc, #272]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001d5c:	f043 0320 	orr.w	r3, r3, #32
 8001d60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d64:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001d66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d6a:	f003 0220 	and.w	r2, r3, #32
 8001d6e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d72:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001d7c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001d80:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d82:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	4a38      	ldr	r2, [pc, #224]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d92:	4b36      	ldr	r3, [pc, #216]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d98:	f003 0202 	and.w	r2, r3, #2
 8001d9c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001da0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001daa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001dae:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db0:	4b2e      	ldr	r3, [pc, #184]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db6:	4a2d      	ldr	r2, [pc, #180]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_SPI_MspInit+0x610>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc6:	f003 0201 	and.w	r2, r3, #1
 8001dca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001dce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001dd8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ddc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dde:	2320      	movs	r3, #32
 8001de0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001df6:	2308      	movs	r3, #8
 8001df8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001e00:	4619      	mov	r1, r3
 8001e02:	4821      	ldr	r0, [pc, #132]	; (8001e88 <HAL_SPI_MspInit+0x62c>)
 8001e04:	f002 f94c 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 8001e20:	2305      	movs	r3, #5
 8001e22:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4812      	ldr	r0, [pc, #72]	; (8001e78 <HAL_SPI_MspInit+0x61c>)
 8001e2e:	f002 f937 	bl	80040a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e32:	2360      	movs	r3, #96	; 0x60
 8001e34:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2300      	movs	r3, #0
 8001e46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 8001e4a:	2308      	movs	r3, #8
 8001e4c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001e54:	4619      	mov	r1, r3
 8001e56:	4808      	ldr	r0, [pc, #32]	; (8001e78 <HAL_SPI_MspInit+0x61c>)
 8001e58:	f002 f922 	bl	80040a0 <HAL_GPIO_Init>
}
 8001e5c:	bf00      	nop
 8001e5e:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40003c00 	.word	0x40003c00
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	58020800 	.word	0x58020800
 8001e74:	58020c00 	.word	0x58020c00
 8001e78:	58020000 	.word	0x58020000
 8001e7c:	40013400 	.word	0x40013400
 8001e80:	58021000 	.word	0x58021000
 8001e84:	58001400 	.word	0x58001400
 8001e88:	58020400 	.word	0x58020400

08001e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b0b8      	sub	sp, #224	; 0xe0
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	22b8      	movs	r2, #184	; 0xb8
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f00b fd43 	bl	800d938 <memset>
  if(huart->Instance==USART2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <HAL_UART_MspInit+0xc4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d145      	bne.n	8001f48 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ebc:	f04f 0202 	mov.w	r2, #2
 8001ec0:	f04f 0300 	mov.w	r3, #0
 8001ec4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 fcde 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001ede:	f7ff f9a5 	bl	800122c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <HAL_UART_MspInit+0xc8>)
 8001ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ee8:	4a1a      	ldr	r2, [pc, #104]	; (8001f54 <HAL_UART_MspInit+0xc8>)
 8001eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <HAL_UART_MspInit+0xc8>)
 8001ef4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	4b14      	ldr	r3, [pc, #80]	; (8001f54 <HAL_UART_MspInit+0xc8>)
 8001f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f06:	4a13      	ldr	r2, [pc, #76]	; (8001f54 <HAL_UART_MspInit+0xc8>)
 8001f08:	f043 0301 	orr.w	r3, r3, #1
 8001f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f10:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <HAL_UART_MspInit+0xc8>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f1e:	230c      	movs	r3, #12
 8001f20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f36:	2307      	movs	r3, #7
 8001f38:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f40:	4619      	mov	r1, r3
 8001f42:	4805      	ldr	r0, [pc, #20]	; (8001f58 <HAL_UART_MspInit+0xcc>)
 8001f44:	f002 f8ac 	bl	80040a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f48:	bf00      	nop
 8001f4a:	37e0      	adds	r7, #224	; 0xe0
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40004400 	.word	0x40004400
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58020000 	.word	0x58020000

08001f5c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0b2      	sub	sp, #200	; 0xc8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	22b8      	movs	r2, #184	; 0xb8
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f00b fce3 	bl	800d938 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a16      	ldr	r2, [pc, #88]	; (8001fd0 <HAL_PCD_MspInit+0x74>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d124      	bne.n	8001fc6 <HAL_PCD_MspInit+0x6a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001f7c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f88:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001f8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 fc7d 	bl	8005894 <HAL_RCCEx_PeriphCLKConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8001fa0:	f7ff f944 	bl	800122c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001fa4:	f002 fd00 	bl	80049a8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_PCD_MspInit+0x78>)
 8001faa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <HAL_PCD_MspInit+0x78>)
 8001fb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fb4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_PCD_MspInit+0x78>)
 8001fba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	37c8      	adds	r7, #200	; 0xc8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40040000 	.word	0x40040000
 8001fd4:	58024400 	.word	0x58024400

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fdc:	e7fe      	b.n	8001fdc <NMI_Handler+0x4>

08001fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <HardFault_Handler+0x4>

08001fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <MemManage_Handler+0x4>

08001fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fee:	e7fe      	b.n	8001fee <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002024:	f000 f9d4 	bl	80023d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002034:	4a14      	ldr	r2, [pc, #80]	; (8002088 <_sbrk+0x5c>)
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <_sbrk+0x60>)
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d102      	bne.n	800204e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <_sbrk+0x64>)
 800204a:	4a12      	ldr	r2, [pc, #72]	; (8002094 <_sbrk+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800204e:	4b10      	ldr	r3, [pc, #64]	; (8002090 <_sbrk+0x64>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	429a      	cmp	r2, r3
 800205a:	d207      	bcs.n	800206c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800205c:	f00b fc98 	bl	800d990 <__errno>
 8002060:	4603      	mov	r3, r0
 8002062:	220c      	movs	r2, #12
 8002064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002066:	f04f 33ff 	mov.w	r3, #4294967295
 800206a:	e009      	b.n	8002080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <_sbrk+0x64>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002072:	4b07      	ldr	r3, [pc, #28]	; (8002090 <_sbrk+0x64>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4413      	add	r3, r2
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <_sbrk+0x64>)
 800207c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800207e:	68fb      	ldr	r3, [r7, #12]
}
 8002080:	4618      	mov	r0, r3
 8002082:	3718      	adds	r7, #24
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	24050000 	.word	0x24050000
 800208c:	00000800 	.word	0x00000800
 8002090:	24000b98 	.word	0x24000b98
 8002094:	24000f60 	.word	0x24000f60

08002098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800209c:	4b32      	ldr	r3, [pc, #200]	; (8002168 <SystemInit+0xd0>)
 800209e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a2:	4a31      	ldr	r2, [pc, #196]	; (8002168 <SystemInit+0xd0>)
 80020a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020ac:	4b2f      	ldr	r3, [pc, #188]	; (800216c <SystemInit+0xd4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 030f 	and.w	r3, r3, #15
 80020b4:	2b06      	cmp	r3, #6
 80020b6:	d807      	bhi.n	80020c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020b8:	4b2c      	ldr	r3, [pc, #176]	; (800216c <SystemInit+0xd4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f023 030f 	bic.w	r3, r3, #15
 80020c0:	4a2a      	ldr	r2, [pc, #168]	; (800216c <SystemInit+0xd4>)
 80020c2:	f043 0307 	orr.w	r3, r3, #7
 80020c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020c8:	4b29      	ldr	r3, [pc, #164]	; (8002170 <SystemInit+0xd8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a28      	ldr	r2, [pc, #160]	; (8002170 <SystemInit+0xd8>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020d4:	4b26      	ldr	r3, [pc, #152]	; (8002170 <SystemInit+0xd8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020da:	4b25      	ldr	r3, [pc, #148]	; (8002170 <SystemInit+0xd8>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4924      	ldr	r1, [pc, #144]	; (8002170 <SystemInit+0xd8>)
 80020e0:	4b24      	ldr	r3, [pc, #144]	; (8002174 <SystemInit+0xdc>)
 80020e2:	4013      	ands	r3, r2
 80020e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020e6:	4b21      	ldr	r3, [pc, #132]	; (800216c <SystemInit+0xd4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0308 	and.w	r3, r3, #8
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d007      	beq.n	8002102 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020f2:	4b1e      	ldr	r3, [pc, #120]	; (800216c <SystemInit+0xd4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 030f 	bic.w	r3, r3, #15
 80020fa:	4a1c      	ldr	r2, [pc, #112]	; (800216c <SystemInit+0xd4>)
 80020fc:	f043 0307 	orr.w	r3, r3, #7
 8002100:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002102:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <SystemInit+0xd8>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002108:	4b19      	ldr	r3, [pc, #100]	; (8002170 <SystemInit+0xd8>)
 800210a:	2200      	movs	r2, #0
 800210c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <SystemInit+0xd8>)
 8002110:	2200      	movs	r2, #0
 8002112:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002114:	4b16      	ldr	r3, [pc, #88]	; (8002170 <SystemInit+0xd8>)
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <SystemInit+0xe0>)
 8002118:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <SystemInit+0xd8>)
 800211c:	4a17      	ldr	r2, [pc, #92]	; (800217c <SystemInit+0xe4>)
 800211e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002120:	4b13      	ldr	r3, [pc, #76]	; (8002170 <SystemInit+0xd8>)
 8002122:	4a17      	ldr	r2, [pc, #92]	; (8002180 <SystemInit+0xe8>)
 8002124:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <SystemInit+0xd8>)
 8002128:	2200      	movs	r2, #0
 800212a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800212c:	4b10      	ldr	r3, [pc, #64]	; (8002170 <SystemInit+0xd8>)
 800212e:	4a14      	ldr	r2, [pc, #80]	; (8002180 <SystemInit+0xe8>)
 8002130:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <SystemInit+0xd8>)
 8002134:	2200      	movs	r2, #0
 8002136:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002138:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <SystemInit+0xd8>)
 800213a:	4a11      	ldr	r2, [pc, #68]	; (8002180 <SystemInit+0xe8>)
 800213c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <SystemInit+0xd8>)
 8002140:	2200      	movs	r2, #0
 8002142:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002144:	4b0a      	ldr	r3, [pc, #40]	; (8002170 <SystemInit+0xd8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a09      	ldr	r2, [pc, #36]	; (8002170 <SystemInit+0xd8>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002150:	4b07      	ldr	r3, [pc, #28]	; (8002170 <SystemInit+0xd8>)
 8002152:	2200      	movs	r2, #0
 8002154:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <SystemInit+0xec>)
 8002158:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800215c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800215e:	bf00      	nop
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00
 800216c:	52002000 	.word	0x52002000
 8002170:	58024400 	.word	0x58024400
 8002174:	eaf6ed7f 	.word	0xeaf6ed7f
 8002178:	02020200 	.word	0x02020200
 800217c:	01ff0000 	.word	0x01ff0000
 8002180:	01010280 	.word	0x01010280
 8002184:	52004000 	.word	0x52004000

08002188 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002188:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800218c:	f7ff ff84 	bl	8002098 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002190:	480c      	ldr	r0, [pc, #48]	; (80021c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002192:	490d      	ldr	r1, [pc, #52]	; (80021c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002198:	e002      	b.n	80021a0 <LoopCopyDataInit>

0800219a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800219a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800219c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800219e:	3304      	adds	r3, #4

080021a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021a4:	d3f9      	bcc.n	800219a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a8:	4c0a      	ldr	r4, [pc, #40]	; (80021d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021ac:	e001      	b.n	80021b2 <LoopFillZerobss>

080021ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b0:	3204      	adds	r2, #4

080021b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021b4:	d3fb      	bcc.n	80021ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021b6:	f00b fbf1 	bl	800d99c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ba:	f7fe fa77 	bl	80006ac <main>
  bx  lr
 80021be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80021c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80021c8:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 80021cc:	0800e288 	.word	0x0800e288
  ldr r2, =_sbss
 80021d0:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 80021d4:	24000f5c 	.word	0x24000f5c

080021d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d8:	e7fe      	b.n	80021d8 <ADC3_IRQHandler>

080021da <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021e2:	f3ef 8310 	mrs	r3, PRIMASK
 80021e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80021e8:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80021f2:	b672      	cpsid	i
}
 80021f4:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021f6:	f3bf 8f4f 	dsb	sy
}
 80021fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021fc:	f3bf 8f6f 	isb	sy
}
 8002200:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8002208:	b672      	cpsid	i
}
 800220a:	bf00      	nop
 800220c:	f7ff f80e 	bl	800122c <Error_Handler>
 8002210:	e7fe      	b.n	8002210 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d103      	bne.n	8002222 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7bfa      	ldrb	r2, [r7, #15]
 800221e:	701a      	strb	r2, [r3, #0]
 8002220:	e008      	b.n	8002234 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	785b      	ldrb	r3, [r3, #1]
 8002226:	2bff      	cmp	r3, #255	; 0xff
 8002228:	d104      	bne.n	8002234 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800222a:	b672      	cpsid	i
}
 800222c:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800222e:	f7fe fffd 	bl	800122c <Error_Handler>
 8002232:	e7fe      	b.n	8002232 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	785b      	ldrb	r3, [r3, #1]
 8002238:	3301      	adds	r3, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	705a      	strb	r2, [r3, #1]
}
 8002240:	bf00      	nop
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d104      	bne.n	8002260 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002256:	b672      	cpsid	i
}
 8002258:	bf00      	nop
 800225a:	f7fe ffe7 	bl	800122c <Error_Handler>
 800225e:	e7fe      	b.n	800225e <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d104      	bne.n	8002272 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800226c:	f7fe ffde 	bl	800122c <Error_Handler>
 8002270:	e7fe      	b.n	8002270 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	3b01      	subs	r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <stm32_lock_release+0x4a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 800228e:	b662      	cpsie	i
}
 8002290:	bf00      	nop
  {
    __enable_irq();
  }
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d104      	bne.n	80022b2 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80022a8:	b672      	cpsid	i
}
 80022aa:	bf00      	nop
 80022ac:	f7fe ffbe 	bl	800122c <Error_Handler>
 80022b0:	e7fe      	b.n	80022b0 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff90 	bl	80021da <stm32_lock_acquire>
}
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d104      	bne.n	80022da <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80022d0:	b672      	cpsid	i
}
 80022d2:	bf00      	nop
 80022d4:	f7fe ffaa 	bl	800122c <Error_Handler>
 80022d8:	e7fe      	b.n	80022d8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ffb3 	bl	8002248 <stm32_lock_release>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022f2:	2003      	movs	r0, #3
 80022f4:	f001 fd04 	bl	8003d00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80022f8:	f003 f8f6 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_Init+0x68>)
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	4913      	ldr	r1, [pc, #76]	; (8002358 <HAL_Init+0x6c>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	f003 031f 	and.w	r3, r3, #31
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
 8002314:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_Init+0x68>)
 8002318:	699b      	ldr	r3, [r3, #24]
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	4a0e      	ldr	r2, [pc, #56]	; (8002358 <HAL_Init+0x6c>)
 8002320:	5cd3      	ldrb	r3, [r2, r3]
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	fa22 f303 	lsr.w	r3, r2, r3
 800232c:	4a0b      	ldr	r2, [pc, #44]	; (800235c <HAL_Init+0x70>)
 800232e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002330:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <HAL_Init+0x74>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002336:	200f      	movs	r0, #15
 8002338:	f000 f814 	bl	8002364 <HAL_InitTick>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e002      	b.n	800234c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002346:	f7fe ff77 	bl	8001238 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	58024400 	.word	0x58024400
 8002358:	0800e178 	.word	0x0800e178
 800235c:	24000004 	.word	0x24000004
 8002360:	24000000 	.word	0x24000000

08002364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <HAL_InitTick+0x60>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e021      	b.n	80023bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_InitTick+0x64>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <HAL_InitTick+0x60>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4619      	mov	r1, r3
 8002382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002386:	fbb3 f3f1 	udiv	r3, r3, r1
 800238a:	fbb2 f3f3 	udiv	r3, r2, r3
 800238e:	4618      	mov	r0, r3
 8002390:	f001 fcdb 	bl	8003d4a <HAL_SYSTICK_Config>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e00e      	b.n	80023bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b0f      	cmp	r3, #15
 80023a2:	d80a      	bhi.n	80023ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023a4:	2200      	movs	r2, #0
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f001 fcb3 	bl	8003d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023b0:	4a06      	ldr	r2, [pc, #24]	; (80023cc <HAL_InitTick+0x68>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
 80023b8:	e000      	b.n	80023bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	2400000c 	.word	0x2400000c
 80023c8:	24000000 	.word	0x24000000
 80023cc:	24000008 	.word	0x24000008

080023d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_IncTick+0x20>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_IncTick+0x24>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4413      	add	r3, r2
 80023e0:	4a04      	ldr	r2, [pc, #16]	; (80023f4 <HAL_IncTick+0x24>)
 80023e2:	6013      	str	r3, [r2, #0]
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	2400000c 	.word	0x2400000c
 80023f4:	24000ba0 	.word	0x24000ba0

080023f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  return uwTick;
 80023fc:	4b03      	ldr	r3, [pc, #12]	; (800240c <HAL_GetTick+0x14>)
 80023fe:	681b      	ldr	r3, [r3, #0]
}
 8002400:	4618      	mov	r0, r3
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	24000ba0 	.word	0x24000ba0

08002410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f7ff ffee 	bl	80023f8 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d005      	beq.n	8002436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <HAL_Delay+0x44>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4413      	add	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002436:	bf00      	nop
 8002438:	f7ff ffde 	bl	80023f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	429a      	cmp	r2, r3
 8002446:	d8f7      	bhi.n	8002438 <HAL_Delay+0x28>
  {
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	2400000c 	.word	0x2400000c

08002458 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	609a      	str	r2, [r3, #8]
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
 8002486:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	609a      	str	r2, [r3, #8]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr

080024a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3360      	adds	r3, #96	; 0x60
 80024d2:	461a      	mov	r2, r3
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a10      	ldr	r2, [pc, #64]	; (8002520 <LL_ADC_SetOffset+0x60>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d10b      	bne.n	80024fc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80024fa:	e00b      	b.n	8002514 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	430b      	orrs	r3, r1
 800250e:	431a      	orrs	r2, r3
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	601a      	str	r2, [r3, #0]
}
 8002514:	bf00      	nop
 8002516:	371c      	adds	r7, #28
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	58026000 	.word	0x58026000

08002524 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3360      	adds	r3, #96	; 0x60
 8002532:	461a      	mov	r2, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 031f 	and.w	r3, r3, #31
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	fa01 f303 	lsl.w	r3, r1, r3
 8002570:	431a      	orrs	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	611a      	str	r2, [r3, #16]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a0c      	ldr	r2, [pc, #48]	; (80025c4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d00e      	beq.n	80025b6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3360      	adds	r3, #96	; 0x60
 800259c:	461a      	mov	r2, r3
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	431a      	orrs	r2, r3
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	601a      	str	r2, [r3, #0]
  }
}
 80025b6:	bf00      	nop
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	58026000 	.word	0x58026000

080025c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a0c      	ldr	r2, [pc, #48]	; (8002608 <LL_ADC_SetOffsetSaturation+0x40>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d10e      	bne.n	80025fa <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	3360      	adds	r3, #96	; 0x60
 80025e0:	461a      	mov	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80025fa:	bf00      	nop
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	58026000 	.word	0x58026000

0800260c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4a0c      	ldr	r2, [pc, #48]	; (800264c <LL_ADC_SetOffsetSign+0x40>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d10e      	bne.n	800263e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	3360      	adds	r3, #96	; 0x60
 8002624:	461a      	mov	r2, r3
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	431a      	orrs	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800263e:	bf00      	nop
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	58026000 	.word	0x58026000

08002650 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002650:	b480      	push	{r7}
 8002652:	b087      	sub	sp, #28
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3360      	adds	r3, #96	; 0x60
 8002660:	461a      	mov	r2, r3
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4413      	add	r3, r2
 8002668:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <LL_ADC_SetOffsetState+0x50>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d108      	bne.n	8002684 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	431a      	orrs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002682:	e007      	b.n	8002694 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	431a      	orrs	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	601a      	str	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	371c      	adds	r7, #28
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	58026000 	.word	0x58026000

080026a4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	60f8      	str	r0, [r7, #12]
 80026ac:	60b9      	str	r1, [r7, #8]
 80026ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3330      	adds	r3, #48	; 0x30
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	0a1b      	lsrs	r3, r3, #8
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	4413      	add	r3, r2
 80026c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	211f      	movs	r1, #31
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	401a      	ands	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	0e9b      	lsrs	r3, r3, #26
 80026dc:	f003 011f 	and.w	r1, r3, #31
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	431a      	orrs	r2, r3
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026f0:	bf00      	nop
 80026f2:	371c      	adds	r7, #28
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	3314      	adds	r3, #20
 800270c:	461a      	mov	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	0e5b      	lsrs	r3, r3, #25
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	4413      	add	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	0d1b      	lsrs	r3, r3, #20
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	2107      	movs	r1, #7
 800272a:	fa01 f303 	lsl.w	r3, r1, r3
 800272e:	43db      	mvns	r3, r3
 8002730:	401a      	ands	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	0d1b      	lsrs	r3, r3, #20
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	fa01 f303 	lsl.w	r3, r1, r3
 8002740:	431a      	orrs	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002746:	bf00      	nop
 8002748:	371c      	adds	r7, #28
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
	...

08002754 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a1a      	ldr	r2, [pc, #104]	; (80027cc <LL_ADC_SetChannelSingleDiff+0x78>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d115      	bne.n	8002794 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002774:	43db      	mvns	r3, r3
 8002776:	401a      	ands	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f003 0318 	and.w	r3, r3, #24
 800277e:	4914      	ldr	r1, [pc, #80]	; (80027d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8002780:	40d9      	lsrs	r1, r3
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	400b      	ands	r3, r1
 8002786:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800278a:	431a      	orrs	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002792:	e014      	b.n	80027be <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027a0:	43db      	mvns	r3, r3
 80027a2:	401a      	ands	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f003 0318 	and.w	r3, r3, #24
 80027aa:	4909      	ldr	r1, [pc, #36]	; (80027d0 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80027ac:	40d9      	lsrs	r1, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	400b      	ands	r3, r1
 80027b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027b6:	431a      	orrs	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	58026000 	.word	0x58026000
 80027d0:	000fffff 	.word	0x000fffff

080027d4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80027e2:	4013      	ands	r3, r2
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6093      	str	r3, [r2, #8]
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f2:	4770      	bx	lr
 80027f4:	5fffffc0 	.word	0x5fffffc0

080027f8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800280c:	d101      	bne.n	8002812 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	4b05      	ldr	r3, [pc, #20]	; (8002844 <LL_ADC_EnableInternalRegulator+0x24>)
 800282e:	4013      	ands	r3, r2
 8002830:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr
 8002844:	6fffffc0 	.word	0x6fffffc0

08002848 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800285c:	d101      	bne.n	8002862 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800285e:	2301      	movs	r3, #1
 8002860:	e000      	b.n	8002864 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <LL_ADC_IsEnabled+0x18>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <LL_ADC_IsEnabled+0x1a>
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d101      	bne.n	80028ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d101      	bne.n	80028d4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e1ee      	b.n	8002cdc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002908:	2b00      	cmp	r3, #0
 800290a:	d109      	bne.n	8002920 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7fe fcad 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff67 	bl	80027f8 <LL_ADC_IsDeepPowerDownEnabled>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d004      	beq.n	800293a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff4d 	bl	80027d4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff82 	bl	8002848 <LL_ADC_IsInternalRegulatorEnabled>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d114      	bne.n	8002974 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff ff66 	bl	8002820 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002954:	4b8e      	ldr	r3, [pc, #568]	; (8002b90 <HAL_ADC_Init+0x2ac>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	099b      	lsrs	r3, r3, #6
 800295a:	4a8e      	ldr	r2, [pc, #568]	; (8002b94 <HAL_ADC_Init+0x2b0>)
 800295c:	fba2 2303 	umull	r2, r3, r2, r3
 8002960:	099b      	lsrs	r3, r3, #6
 8002962:	3301      	adds	r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002966:	e002      	b.n	800296e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	3b01      	subs	r3, #1
 800296c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f9      	bne.n	8002968 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff65 	bl	8002848 <LL_ADC_IsInternalRegulatorEnabled>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10d      	bne.n	80029a0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002988:	f043 0210 	orr.w	r2, r3, #16
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002994:	f043 0201 	orr.w	r2, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff76 	bl	8002896 <LL_ADC_REG_IsConversionOngoing>
 80029aa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b0:	f003 0310 	and.w	r3, r3, #16
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 8188 	bne.w	8002cca <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 8184 	bne.w	8002cca <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80029ca:	f043 0202 	orr.w	r2, r3, #2
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff4a 	bl	8002870 <LL_ADC_IsEnabled>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d136      	bne.n	8002a50 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6c      	ldr	r2, [pc, #432]	; (8002b98 <HAL_ADC_Init+0x2b4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d004      	beq.n	80029f6 <HAL_ADC_Init+0x112>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6a      	ldr	r2, [pc, #424]	; (8002b9c <HAL_ADC_Init+0x2b8>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d10e      	bne.n	8002a14 <HAL_ADC_Init+0x130>
 80029f6:	4868      	ldr	r0, [pc, #416]	; (8002b98 <HAL_ADC_Init+0x2b4>)
 80029f8:	f7ff ff3a 	bl	8002870 <LL_ADC_IsEnabled>
 80029fc:	4604      	mov	r4, r0
 80029fe:	4867      	ldr	r0, [pc, #412]	; (8002b9c <HAL_ADC_Init+0x2b8>)
 8002a00:	f7ff ff36 	bl	8002870 <LL_ADC_IsEnabled>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4323      	orrs	r3, r4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	bf0c      	ite	eq
 8002a0c:	2301      	moveq	r3, #1
 8002a0e:	2300      	movne	r3, #0
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	e008      	b.n	8002a26 <HAL_ADC_Init+0x142>
 8002a14:	4862      	ldr	r0, [pc, #392]	; (8002ba0 <HAL_ADC_Init+0x2bc>)
 8002a16:	f7ff ff2b 	bl	8002870 <LL_ADC_IsEnabled>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf0c      	ite	eq
 8002a20:	2301      	moveq	r3, #1
 8002a22:	2300      	movne	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d012      	beq.n	8002a50 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a5a      	ldr	r2, [pc, #360]	; (8002b98 <HAL_ADC_Init+0x2b4>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d004      	beq.n	8002a3e <HAL_ADC_Init+0x15a>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a58      	ldr	r2, [pc, #352]	; (8002b9c <HAL_ADC_Init+0x2b8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_ADC_Init+0x15e>
 8002a3e:	4a59      	ldr	r2, [pc, #356]	; (8002ba4 <HAL_ADC_Init+0x2c0>)
 8002a40:	e000      	b.n	8002a44 <HAL_ADC_Init+0x160>
 8002a42:	4a59      	ldr	r2, [pc, #356]	; (8002ba8 <HAL_ADC_Init+0x2c4>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f7ff fd04 	bl	8002458 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_ADC_Init+0x2bc>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d129      	bne.n	8002aae <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	7e5b      	ldrb	r3, [r3, #25]
 8002a5e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002a64:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002a6a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d013      	beq.n	8002a9c <HAL_ADC_Init+0x1b8>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	d00d      	beq.n	8002a98 <HAL_ADC_Init+0x1b4>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b1c      	cmp	r3, #28
 8002a82:	d007      	beq.n	8002a94 <HAL_ADC_Init+0x1b0>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b18      	cmp	r3, #24
 8002a8a:	d101      	bne.n	8002a90 <HAL_ADC_Init+0x1ac>
 8002a8c:	2318      	movs	r3, #24
 8002a8e:	e006      	b.n	8002a9e <HAL_ADC_Init+0x1ba>
 8002a90:	2300      	movs	r3, #0
 8002a92:	e004      	b.n	8002a9e <HAL_ADC_Init+0x1ba>
 8002a94:	2310      	movs	r3, #16
 8002a96:	e002      	b.n	8002a9e <HAL_ADC_Init+0x1ba>
 8002a98:	2308      	movs	r3, #8
 8002a9a:	e000      	b.n	8002a9e <HAL_ADC_Init+0x1ba>
 8002a9c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002a9e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aa6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
 8002aac:	e00e      	b.n	8002acc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7e5b      	ldrb	r3, [r3, #25]
 8002ab2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ab8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002abe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d106      	bne.n	8002ae4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	3b01      	subs	r3, #1
 8002adc:	045b      	lsls	r3, r3, #17
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d009      	beq.n	8002b00 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a26      	ldr	r2, [pc, #152]	; (8002ba0 <HAL_ADC_Init+0x2bc>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d115      	bne.n	8002b36 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68da      	ldr	r2, [r3, #12]
 8002b10:	4b26      	ldr	r3, [pc, #152]	; (8002bac <HAL_ADC_Init+0x2c8>)
 8002b12:	4013      	ands	r3, r2
 8002b14:	687a      	ldr	r2, [r7, #4]
 8002b16:	6812      	ldr	r2, [r2, #0]
 8002b18:	69b9      	ldr	r1, [r7, #24]
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	611a      	str	r2, [r3, #16]
 8002b34:	e009      	b.n	8002b4a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	4b1c      	ldr	r3, [pc, #112]	; (8002bb0 <HAL_ADC_Init+0x2cc>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	69b9      	ldr	r1, [r7, #24]
 8002b46:	430b      	orrs	r3, r1
 8002b48:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff fea1 	bl	8002896 <LL_ADC_REG_IsConversionOngoing>
 8002b54:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff feae 	bl	80028bc <LL_ADC_INJ_IsConversionOngoing>
 8002b60:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 808e 	bne.w	8002c86 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f040 808a 	bne.w	8002c86 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <HAL_ADC_Init+0x2bc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	7e1b      	ldrb	r3, [r3, #24]
 8002b80:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b88:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	e018      	b.n	8002bc2 <HAL_ADC_Init+0x2de>
 8002b90:	24000000 	.word	0x24000000
 8002b94:	053e2d63 	.word	0x053e2d63
 8002b98:	40022000 	.word	0x40022000
 8002b9c:	40022100 	.word	0x40022100
 8002ba0:	58026000 	.word	0x58026000
 8002ba4:	40022300 	.word	0x40022300
 8002ba8:	58026300 	.word	0x58026300
 8002bac:	fff04007 	.word	0xfff04007
 8002bb0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7e1b      	ldrb	r3, [r3, #24]
 8002bb8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_ADC_Init+0x400>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6812      	ldr	r2, [r2, #0]
 8002bd0:	69b9      	ldr	r1, [r7, #24]
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d137      	bne.n	8002c50 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a3f      	ldr	r2, [pc, #252]	; (8002ce8 <HAL_ADC_Init+0x404>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d116      	bne.n	8002c1e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	4b3d      	ldr	r3, [pc, #244]	; (8002cec <HAL_ADC_Init+0x408>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c02:	4311      	orrs	r1, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c08:	4311      	orrs	r1, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	611a      	str	r2, [r3, #16]
 8002c1c:	e020      	b.n	8002c60 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <HAL_ADC_Init+0x40c>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c2c:	3a01      	subs	r2, #1
 8002c2e:	0411      	lsls	r1, r2, #16
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c40:	430a      	orrs	r2, r1
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	611a      	str	r2, [r3, #16]
 8002c4e:	e007      	b.n	8002c60 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691a      	ldr	r2, [r3, #16]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a1b      	ldr	r2, [pc, #108]	; (8002ce8 <HAL_ADC_Init+0x404>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d002      	beq.n	8002c86 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fd63 	bl	800374c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d10c      	bne.n	8002ca8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f023 010f 	bic.w	r1, r3, #15
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ca6:	e007      	b.n	8002cb8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 020f 	bic.w	r2, r2, #15
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbc:	f023 0303 	bic.w	r3, r3, #3
 8002cc0:	f043 0201 	orr.w	r2, r3, #1
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	661a      	str	r2, [r3, #96]	; 0x60
 8002cc8:	e007      	b.n	8002cda <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cce:	f043 0210 	orr.w	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cda:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3724      	adds	r7, #36	; 0x24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd90      	pop	{r4, r7, pc}
 8002ce4:	ffffbffc 	.word	0xffffbffc
 8002ce8:	58026000 	.word	0x58026000
 8002cec:	fc00f81f 	.word	0xfc00f81f
 8002cf0:	fc00f81e 	.word	0xfc00f81e

08002cf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b0b9      	sub	sp, #228	; 0xe4
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d0e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4aa9      	ldr	r2, [pc, #676]	; (8002fbc <HAL_ADC_ConfigChannel+0x2c8>)
 8002d16:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x34>
 8002d22:	2302      	movs	r3, #2
 8002d24:	f000 bcfa 	b.w	800371c <HAL_ADC_ConfigChannel+0xa28>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fdae 	bl	8002896 <LL_ADC_REG_IsConversionOngoing>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f040 84de 	bne.w	80036fe <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a9e      	ldr	r2, [pc, #632]	; (8002fc0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d033      	beq.n	8002db4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d108      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x76>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	0e9b      	lsrs	r3, r3, #26
 8002d5e:	f003 031f 	and.w	r3, r3, #31
 8002d62:	2201      	movs	r2, #1
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	e01d      	b.n	8002da6 <HAL_ADC_ConfigChannel+0xb2>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e004      	b.n	8002d9c <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002d92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f003 031f 	and.w	r3, r3, #31
 8002da0:	2201      	movs	r2, #1
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	69d1      	ldr	r1, [r2, #28]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6812      	ldr	r2, [r2, #0]
 8002db0:	430b      	orrs	r3, r1
 8002db2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6818      	ldr	r0, [r3, #0]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	6859      	ldr	r1, [r3, #4]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	f7ff fc6f 	bl	80026a4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7ff fd63 	bl	8002896 <LL_ADC_REG_IsConversionOngoing>
 8002dd0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fd6f 	bl	80028bc <LL_ADC_INJ_IsConversionOngoing>
 8002dde:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 8270 	bne.w	80032cc <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f040 826b 	bne.w	80032cc <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6818      	ldr	r0, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	461a      	mov	r2, r3
 8002e04:	f7ff fc7a 	bl	80026fc <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a6c      	ldr	r2, [pc, #432]	; (8002fc0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d10d      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	08db      	lsrs	r3, r3, #3
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e2c:	e032      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e2e:	4b65      	ldr	r3, [pc, #404]	; (8002fc4 <HAL_ADC_ConfigChannel+0x2d0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e3a:	d10b      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x160>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	695a      	ldr	r2, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	089b      	lsrs	r3, r3, #2
 8002e48:	f003 0307 	and.w	r3, r3, #7
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	e01d      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x19c>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <HAL_ADC_ConfigChannel+0x186>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	089b      	lsrs	r3, r3, #2
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	e00a      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x19c>
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	089b      	lsrs	r3, r3, #2
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d048      	beq.n	8002f2e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6919      	ldr	r1, [r3, #16]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eac:	f7ff fb08 	bl	80024c0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a42      	ldr	r2, [pc, #264]	; (8002fc0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d119      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f7ff fba0 	bl	800260c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	6919      	ldr	r1, [r3, #16]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d102      	bne.n	8002ee4 <HAL_ADC_ConfigChannel+0x1f0>
 8002ede:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ee2:	e000      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x1f2>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f7ff fb6e 	bl	80025c8 <LL_ADC_SetOffsetSaturation>
 8002eec:	e1ee      	b.n	80032cc <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6919      	ldr	r1, [r3, #16]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d102      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x212>
 8002f00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f04:	e000      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x214>
 8002f06:	2300      	movs	r3, #0
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f7ff fb3b 	bl	8002584 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	7e1b      	ldrb	r3, [r3, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d102      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x230>
 8002f1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f22:	e000      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x232>
 8002f24:	2300      	movs	r3, #0
 8002f26:	461a      	mov	r2, r3
 8002f28:	f7ff fb12 	bl	8002550 <LL_ADC_SetDataRightShift>
 8002f2c:	e1ce      	b.n	80032cc <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a23      	ldr	r2, [pc, #140]	; (8002fc0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	f040 8181 	bne.w	800323c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2100      	movs	r1, #0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff faef 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d10a      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x272>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2100      	movs	r1, #0
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fae4 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	0e9b      	lsrs	r3, r3, #26
 8002f60:	f003 021f 	and.w	r2, r3, #31
 8002f64:	e01e      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x2b0>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff fad9 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002f84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002f8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002f94:	2320      	movs	r3, #32
 8002f96:	e004      	b.n	8002fa2 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002f98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10b      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x2d4>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	0e9b      	lsrs	r3, r3, #26
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	e01e      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x306>
 8002fbc:	47ff0000 	.word	0x47ff0000
 8002fc0:	58026000 	.word	0x58026000
 8002fc4:	5c001000 	.word	0x5c001000
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002fdc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002fec:	2320      	movs	r3, #32
 8002fee:	e004      	b.n	8002ffa <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8002ff0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d106      	bne.n	800300c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2200      	movs	r2, #0
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff fb22 	bl	8002650 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff fa86 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8003018:	4603      	mov	r3, r0
 800301a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10a      	bne.n	8003038 <HAL_ADC_ConfigChannel+0x344>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2101      	movs	r1, #1
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff fa7b 	bl	8002524 <LL_ADC_GetOffsetChannel>
 800302e:	4603      	mov	r3, r0
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	f003 021f 	and.w	r2, r3, #31
 8003036:	e01e      	b.n	8003076 <HAL_ADC_ConfigChannel+0x382>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2101      	movs	r1, #1
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fa70 	bl	8002524 <LL_ADC_GetOffsetChannel>
 8003044:	4603      	mov	r3, r0
 8003046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003056:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800305a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800305e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003066:	2320      	movs	r3, #32
 8003068:	e004      	b.n	8003074 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800306a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	461a      	mov	r2, r3
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_ADC_ConfigChannel+0x39a>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	0e9b      	lsrs	r3, r3, #26
 8003088:	f003 031f 	and.w	r3, r3, #31
 800308c:	e018      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x3cc>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003096:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800309a:	fa93 f3a3 	rbit	r3, r3
 800309e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80030a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80030aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80030b2:	2320      	movs	r3, #32
 80030b4:	e004      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80030b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ba:	fab3 f383 	clz	r3, r3
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d106      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	2101      	movs	r1, #1
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff fabf 	bl	8002650 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2102      	movs	r1, #2
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fa23 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80030de:	4603      	mov	r3, r0
 80030e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10a      	bne.n	80030fe <HAL_ADC_ConfigChannel+0x40a>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2102      	movs	r1, #2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff fa18 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80030f4:	4603      	mov	r3, r0
 80030f6:	0e9b      	lsrs	r3, r3, #26
 80030f8:	f003 021f 	and.w	r2, r3, #31
 80030fc:	e01e      	b.n	800313c <HAL_ADC_ConfigChannel+0x448>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2102      	movs	r1, #2
 8003104:	4618      	mov	r0, r3
 8003106:	f7ff fa0d 	bl	8002524 <LL_ADC_GetOffsetChannel>
 800310a:	4603      	mov	r3, r0
 800310c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003110:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003114:	fa93 f3a3 	rbit	r3, r3
 8003118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800311c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003120:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003124:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800312c:	2320      	movs	r3, #32
 800312e:	e004      	b.n	800313a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003134:	fab3 f383 	clz	r3, r3
 8003138:	b2db      	uxtb	r3, r3
 800313a:	461a      	mov	r2, r3
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003144:	2b00      	cmp	r3, #0
 8003146:	d105      	bne.n	8003154 <HAL_ADC_ConfigChannel+0x460>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0e9b      	lsrs	r3, r3, #26
 800314e:	f003 031f 	and.w	r3, r3, #31
 8003152:	e014      	b.n	800317e <HAL_ADC_ConfigChannel+0x48a>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003168:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003170:	2320      	movs	r3, #32
 8003172:	e004      	b.n	800317e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
 800317e:	429a      	cmp	r2, r3
 8003180:	d106      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	2102      	movs	r1, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fa60 	bl	8002650 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2103      	movs	r1, #3
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff f9c4 	bl	8002524 <LL_ADC_GetOffsetChannel>
 800319c:	4603      	mov	r3, r0
 800319e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x4c8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2103      	movs	r1, #3
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f9b9 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	0e9b      	lsrs	r3, r3, #26
 80031b6:	f003 021f 	and.w	r2, r3, #31
 80031ba:	e017      	b.n	80031ec <HAL_ADC_ConfigChannel+0x4f8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2103      	movs	r1, #3
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f9ae 	bl	8002524 <LL_ADC_GetOffsetChannel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80031d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80031de:	2320      	movs	r3, #32
 80031e0:	e003      	b.n	80031ea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80031e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031e4:	fab3 f383 	clz	r3, r3
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	461a      	mov	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x510>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	0e9b      	lsrs	r3, r3, #26
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	e011      	b.n	8003228 <HAL_ADC_ConfigChannel+0x534>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003212:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003214:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003216:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800321c:	2320      	movs	r3, #32
 800321e:	e003      	b.n	8003228 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003222:	fab3 f383 	clz	r3, r3
 8003226:	b2db      	uxtb	r3, r3
 8003228:	429a      	cmp	r2, r3
 800322a:	d14f      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2200      	movs	r2, #0
 8003232:	2103      	movs	r1, #3
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff fa0b 	bl	8002650 <LL_ADC_SetOffsetState>
 800323a:	e047      	b.n	80032cc <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003242:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	069b      	lsls	r3, r3, #26
 800324c:	429a      	cmp	r2, r3
 800324e:	d107      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800325e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003266:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	069b      	lsls	r3, r3, #26
 8003270:	429a      	cmp	r2, r3
 8003272:	d107      	bne.n	8003284 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003282:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800328a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	069b      	lsls	r3, r3, #26
 8003294:	429a      	cmp	r2, r3
 8003296:	d107      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032a6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	069b      	lsls	r3, r3, #26
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d107      	bne.n	80032cc <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ca:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff facd 	bl	8002870 <LL_ADC_IsEnabled>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f040 8219 	bne.w	8003710 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f7ff fa32 	bl	8002754 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4aa1      	ldr	r2, [pc, #644]	; (800357c <HAL_ADC_ConfigChannel+0x888>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	f040 812e 	bne.w	8003558 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x630>
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0e9b      	lsrs	r3, r3, #26
 8003312:	3301      	adds	r3, #1
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2b09      	cmp	r3, #9
 800331a:	bf94      	ite	ls
 800331c:	2301      	movls	r3, #1
 800331e:	2300      	movhi	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e019      	b.n	8003358 <HAL_ADC_ConfigChannel+0x664>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003334:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800333c:	2320      	movs	r3, #32
 800333e:	e003      	b.n	8003348 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	3301      	adds	r3, #1
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	2b09      	cmp	r3, #9
 8003350:	bf94      	ite	ls
 8003352:	2301      	movls	r3, #1
 8003354:	2300      	movhi	r3, #0
 8003356:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003358:	2b00      	cmp	r3, #0
 800335a:	d079      	beq.n	8003450 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x684>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	0e9b      	lsrs	r3, r3, #26
 800336e:	3301      	adds	r3, #1
 8003370:	069b      	lsls	r3, r3, #26
 8003372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003376:	e015      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x6b0>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003380:	fa93 f3a3 	rbit	r3, r3
 8003384:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003388:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800338a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8003390:	2320      	movs	r3, #32
 8003392:	e003      	b.n	800339c <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8003394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	3301      	adds	r3, #1
 800339e:	069b      	lsls	r3, r3, #26
 80033a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_ADC_ConfigChannel+0x6d0>
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	0e9b      	lsrs	r3, r3, #26
 80033b6:	3301      	adds	r3, #1
 80033b8:	f003 031f 	and.w	r3, r3, #31
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	e017      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x700>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033cc:	fa93 f3a3 	rbit	r3, r3
 80033d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80033d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80033d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80033dc:	2320      	movs	r3, #32
 80033de:	e003      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80033e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e2:	fab3 f383 	clz	r3, r3
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2101      	movs	r1, #1
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	ea42 0103 	orr.w	r1, r2, r3
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_ADC_ConfigChannel+0x726>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	0e9b      	lsrs	r3, r3, #26
 800340a:	3301      	adds	r3, #1
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	051b      	lsls	r3, r3, #20
 8003418:	e018      	b.n	800344c <HAL_ADC_ConfigChannel+0x758>
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003432:	2320      	movs	r3, #32
 8003434:	e003      	b.n	800343e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	b2db      	uxtb	r3, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f003 021f 	and.w	r2, r3, #31
 8003444:	4613      	mov	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	4413      	add	r3, r2
 800344a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800344c:	430b      	orrs	r3, r1
 800344e:	e07e      	b.n	800354e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003458:	2b00      	cmp	r3, #0
 800345a:	d107      	bne.n	800346c <HAL_ADC_ConfigChannel+0x778>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	0e9b      	lsrs	r3, r3, #26
 8003462:	3301      	adds	r3, #1
 8003464:	069b      	lsls	r3, r3, #26
 8003466:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800346a:	e015      	b.n	8003498 <HAL_ADC_ConfigChannel+0x7a4>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800347e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003484:	2320      	movs	r3, #32
 8003486:	e003      	b.n	8003490 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8003488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	3301      	adds	r3, #1
 8003492:	069b      	lsls	r3, r3, #26
 8003494:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d109      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x7c4>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	0e9b      	lsrs	r3, r3, #26
 80034aa:	3301      	adds	r3, #1
 80034ac:	f003 031f 	and.w	r3, r3, #31
 80034b0:	2101      	movs	r1, #1
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	e017      	b.n	80034e8 <HAL_ADC_ConfigChannel+0x7f4>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	61bb      	str	r3, [r7, #24]
  return result;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80034d0:	2320      	movs	r3, #32
 80034d2:	e003      	b.n	80034dc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80034d4:	6a3b      	ldr	r3, [r7, #32]
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3301      	adds	r3, #1
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2101      	movs	r1, #1
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	ea42 0103 	orr.w	r1, r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10d      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x820>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	0e9b      	lsrs	r3, r3, #26
 80034fe:	3301      	adds	r3, #1
 8003500:	f003 021f 	and.w	r2, r3, #31
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	3b1e      	subs	r3, #30
 800350c:	051b      	lsls	r3, r3, #20
 800350e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003512:	e01b      	b.n	800354c <HAL_ADC_ConfigChannel+0x858>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	fa93 f3a3 	rbit	r3, r3
 8003520:	60fb      	str	r3, [r7, #12]
  return result;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800352c:	2320      	movs	r3, #32
 800352e:	e003      	b.n	8003538 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fab3 f383 	clz	r3, r3
 8003536:	b2db      	uxtb	r3, r3
 8003538:	3301      	adds	r3, #1
 800353a:	f003 021f 	and.w	r2, r3, #31
 800353e:	4613      	mov	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	4413      	add	r3, r2
 8003544:	3b1e      	subs	r3, #30
 8003546:	051b      	lsls	r3, r3, #20
 8003548:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800354c:	430b      	orrs	r3, r1
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	6892      	ldr	r2, [r2, #8]
 8003552:	4619      	mov	r1, r3
 8003554:	f7ff f8d2 	bl	80026fc <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	f280 80d7 	bge.w	8003710 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a06      	ldr	r2, [pc, #24]	; (8003580 <HAL_ADC_ConfigChannel+0x88c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x882>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_ADC_ConfigChannel+0x890>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10a      	bne.n	800358c <HAL_ADC_ConfigChannel+0x898>
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <HAL_ADC_ConfigChannel+0x894>)
 8003578:	e009      	b.n	800358e <HAL_ADC_ConfigChannel+0x89a>
 800357a:	bf00      	nop
 800357c:	47ff0000 	.word	0x47ff0000
 8003580:	40022000 	.word	0x40022000
 8003584:	40022100 	.word	0x40022100
 8003588:	40022300 	.word	0x40022300
 800358c:	4b65      	ldr	r3, [pc, #404]	; (8003724 <HAL_ADC_ConfigChannel+0xa30>)
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe ff88 	bl	80024a4 <LL_ADC_GetCommonPathInternalCh>
 8003594:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a62      	ldr	r2, [pc, #392]	; (8003728 <HAL_ADC_ConfigChannel+0xa34>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d004      	beq.n	80035ac <HAL_ADC_ConfigChannel+0x8b8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a61      	ldr	r2, [pc, #388]	; (800372c <HAL_ADC_ConfigChannel+0xa38>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d10e      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x8d6>
 80035ac:	485e      	ldr	r0, [pc, #376]	; (8003728 <HAL_ADC_ConfigChannel+0xa34>)
 80035ae:	f7ff f95f 	bl	8002870 <LL_ADC_IsEnabled>
 80035b2:	4604      	mov	r4, r0
 80035b4:	485d      	ldr	r0, [pc, #372]	; (800372c <HAL_ADC_ConfigChannel+0xa38>)
 80035b6:	f7ff f95b 	bl	8002870 <LL_ADC_IsEnabled>
 80035ba:	4603      	mov	r3, r0
 80035bc:	4323      	orrs	r3, r4
 80035be:	2b00      	cmp	r3, #0
 80035c0:	bf0c      	ite	eq
 80035c2:	2301      	moveq	r3, #1
 80035c4:	2300      	movne	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	e008      	b.n	80035dc <HAL_ADC_ConfigChannel+0x8e8>
 80035ca:	4859      	ldr	r0, [pc, #356]	; (8003730 <HAL_ADC_ConfigChannel+0xa3c>)
 80035cc:	f7ff f950 	bl	8002870 <LL_ADC_IsEnabled>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf0c      	ite	eq
 80035d6:	2301      	moveq	r3, #1
 80035d8:	2300      	movne	r3, #0
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8084 	beq.w	80036ea <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a53      	ldr	r2, [pc, #332]	; (8003734 <HAL_ADC_ConfigChannel+0xa40>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d132      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x95e>
 80035ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d12c      	bne.n	8003652 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a4c      	ldr	r2, [pc, #304]	; (8003730 <HAL_ADC_ConfigChannel+0xa3c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	f040 8086 	bne.w	8003710 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a47      	ldr	r2, [pc, #284]	; (8003728 <HAL_ADC_ConfigChannel+0xa34>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_ADC_ConfigChannel+0x924>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a46      	ldr	r2, [pc, #280]	; (800372c <HAL_ADC_ConfigChannel+0xa38>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d101      	bne.n	800361c <HAL_ADC_ConfigChannel+0x928>
 8003618:	4a47      	ldr	r2, [pc, #284]	; (8003738 <HAL_ADC_ConfigChannel+0xa44>)
 800361a:	e000      	b.n	800361e <HAL_ADC_ConfigChannel+0x92a>
 800361c:	4a41      	ldr	r2, [pc, #260]	; (8003724 <HAL_ADC_ConfigChannel+0xa30>)
 800361e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003622:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003626:	4619      	mov	r1, r3
 8003628:	4610      	mov	r0, r2
 800362a:	f7fe ff28 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800362e:	4b43      	ldr	r3, [pc, #268]	; (800373c <HAL_ADC_ConfigChannel+0xa48>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	099b      	lsrs	r3, r3, #6
 8003634:	4a42      	ldr	r2, [pc, #264]	; (8003740 <HAL_ADC_ConfigChannel+0xa4c>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	099b      	lsrs	r3, r3, #6
 800363c:	3301      	adds	r3, #1
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003642:	e002      	b.n	800364a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	3b01      	subs	r3, #1
 8003648:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f9      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003650:	e05e      	b.n	8003710 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3b      	ldr	r2, [pc, #236]	; (8003744 <HAL_ADC_ConfigChannel+0xa50>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d120      	bne.n	800369e <HAL_ADC_ConfigChannel+0x9aa>
 800365c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003660:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d11a      	bne.n	800369e <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a30      	ldr	r2, [pc, #192]	; (8003730 <HAL_ADC_ConfigChannel+0xa3c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d14e      	bne.n	8003710 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2c      	ldr	r2, [pc, #176]	; (8003728 <HAL_ADC_ConfigChannel+0xa34>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d004      	beq.n	8003686 <HAL_ADC_ConfigChannel+0x992>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2a      	ldr	r2, [pc, #168]	; (800372c <HAL_ADC_ConfigChannel+0xa38>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d101      	bne.n	800368a <HAL_ADC_ConfigChannel+0x996>
 8003686:	4a2c      	ldr	r2, [pc, #176]	; (8003738 <HAL_ADC_ConfigChannel+0xa44>)
 8003688:	e000      	b.n	800368c <HAL_ADC_ConfigChannel+0x998>
 800368a:	4a26      	ldr	r2, [pc, #152]	; (8003724 <HAL_ADC_ConfigChannel+0xa30>)
 800368c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003690:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003694:	4619      	mov	r1, r3
 8003696:	4610      	mov	r0, r2
 8003698:	f7fe fef1 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800369c:	e038      	b.n	8003710 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a29      	ldr	r2, [pc, #164]	; (8003748 <HAL_ADC_ConfigChannel+0xa54>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d133      	bne.n	8003710 <HAL_ADC_ConfigChannel+0xa1c>
 80036a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d12d      	bne.n	8003710 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1d      	ldr	r2, [pc, #116]	; (8003730 <HAL_ADC_ConfigChannel+0xa3c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d128      	bne.n	8003710 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a19      	ldr	r2, [pc, #100]	; (8003728 <HAL_ADC_ConfigChannel+0xa34>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_ADC_ConfigChannel+0x9de>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a17      	ldr	r2, [pc, #92]	; (800372c <HAL_ADC_ConfigChannel+0xa38>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x9e2>
 80036d2:	4a19      	ldr	r2, [pc, #100]	; (8003738 <HAL_ADC_ConfigChannel+0xa44>)
 80036d4:	e000      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x9e4>
 80036d6:	4a13      	ldr	r2, [pc, #76]	; (8003724 <HAL_ADC_ConfigChannel+0xa30>)
 80036d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036e0:	4619      	mov	r1, r3
 80036e2:	4610      	mov	r0, r2
 80036e4:	f7fe fecb 	bl	800247e <LL_ADC_SetCommonPathInternalCh>
 80036e8:	e012      	b.n	8003710 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80036fc:	e008      	b.n	8003710 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003718:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800371c:	4618      	mov	r0, r3
 800371e:	37e4      	adds	r7, #228	; 0xe4
 8003720:	46bd      	mov	sp, r7
 8003722:	bd90      	pop	{r4, r7, pc}
 8003724:	58026300 	.word	0x58026300
 8003728:	40022000 	.word	0x40022000
 800372c:	40022100 	.word	0x40022100
 8003730:	58026000 	.word	0x58026000
 8003734:	c7520000 	.word	0xc7520000
 8003738:	40022300 	.word	0x40022300
 800373c:	24000000 	.word	0x24000000
 8003740:	053e2d63 	.word	0x053e2d63
 8003744:	c3210000 	.word	0xc3210000
 8003748:	cb840000 	.word	0xcb840000

0800374c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a6c      	ldr	r2, [pc, #432]	; (800390c <ADC_ConfigureBoostMode+0x1c0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d004      	beq.n	8003768 <ADC_ConfigureBoostMode+0x1c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a6b      	ldr	r2, [pc, #428]	; (8003910 <ADC_ConfigureBoostMode+0x1c4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d109      	bne.n	800377c <ADC_ConfigureBoostMode+0x30>
 8003768:	4b6a      	ldr	r3, [pc, #424]	; (8003914 <ADC_ConfigureBoostMode+0x1c8>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf14      	ite	ne
 8003774:	2301      	movne	r3, #1
 8003776:	2300      	moveq	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e008      	b.n	800378e <ADC_ConfigureBoostMode+0x42>
 800377c:	4b66      	ldr	r3, [pc, #408]	; (8003918 <ADC_ConfigureBoostMode+0x1cc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003784:	2b00      	cmp	r3, #0
 8003786:	bf14      	ite	ne
 8003788:	2301      	movne	r3, #1
 800378a:	2300      	moveq	r3, #0
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d01c      	beq.n	80037cc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003792:	f002 f823 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 8003796:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037a0:	d010      	beq.n	80037c4 <ADC_ConfigureBoostMode+0x78>
 80037a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80037a6:	d873      	bhi.n	8003890 <ADC_ConfigureBoostMode+0x144>
 80037a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ac:	d002      	beq.n	80037b4 <ADC_ConfigureBoostMode+0x68>
 80037ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037b2:	d16d      	bne.n	8003890 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	0c1b      	lsrs	r3, r3, #16
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	60fb      	str	r3, [r7, #12]
        break;
 80037c2:	e068      	b.n	8003896 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	60fb      	str	r3, [r7, #12]
        break;
 80037ca:	e064      	b.n	8003896 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80037cc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	f003 f9fe 	bl	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq>
 80037d8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80037e2:	d051      	beq.n	8003888 <ADC_ConfigureBoostMode+0x13c>
 80037e4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80037e8:	d854      	bhi.n	8003894 <ADC_ConfigureBoostMode+0x148>
 80037ea:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80037ee:	d047      	beq.n	8003880 <ADC_ConfigureBoostMode+0x134>
 80037f0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80037f4:	d84e      	bhi.n	8003894 <ADC_ConfigureBoostMode+0x148>
 80037f6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80037fa:	d03d      	beq.n	8003878 <ADC_ConfigureBoostMode+0x12c>
 80037fc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003800:	d848      	bhi.n	8003894 <ADC_ConfigureBoostMode+0x148>
 8003802:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003806:	d033      	beq.n	8003870 <ADC_ConfigureBoostMode+0x124>
 8003808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800380c:	d842      	bhi.n	8003894 <ADC_ConfigureBoostMode+0x148>
 800380e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003812:	d029      	beq.n	8003868 <ADC_ConfigureBoostMode+0x11c>
 8003814:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003818:	d83c      	bhi.n	8003894 <ADC_ConfigureBoostMode+0x148>
 800381a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800381e:	d01a      	beq.n	8003856 <ADC_ConfigureBoostMode+0x10a>
 8003820:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003824:	d836      	bhi.n	8003894 <ADC_ConfigureBoostMode+0x148>
 8003826:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800382a:	d014      	beq.n	8003856 <ADC_ConfigureBoostMode+0x10a>
 800382c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003830:	d830      	bhi.n	8003894 <ADC_ConfigureBoostMode+0x148>
 8003832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003836:	d00e      	beq.n	8003856 <ADC_ConfigureBoostMode+0x10a>
 8003838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800383c:	d82a      	bhi.n	8003894 <ADC_ConfigureBoostMode+0x148>
 800383e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003842:	d008      	beq.n	8003856 <ADC_ConfigureBoostMode+0x10a>
 8003844:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003848:	d824      	bhi.n	8003894 <ADC_ConfigureBoostMode+0x148>
 800384a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800384e:	d002      	beq.n	8003856 <ADC_ConfigureBoostMode+0x10a>
 8003850:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003854:	d11e      	bne.n	8003894 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	0c9b      	lsrs	r3, r3, #18
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	60fb      	str	r3, [r7, #12]
        break;
 8003866:	e016      	b.n	8003896 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	091b      	lsrs	r3, r3, #4
 800386c:	60fb      	str	r3, [r7, #12]
        break;
 800386e:	e012      	b.n	8003896 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	60fb      	str	r3, [r7, #12]
        break;
 8003876:	e00e      	b.n	8003896 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	099b      	lsrs	r3, r3, #6
 800387c:	60fb      	str	r3, [r7, #12]
        break;
 800387e:	e00a      	b.n	8003896 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	09db      	lsrs	r3, r3, #7
 8003884:	60fb      	str	r3, [r7, #12]
        break;
 8003886:	e006      	b.n	8003896 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	0a1b      	lsrs	r3, r3, #8
 800388c:	60fb      	str	r3, [r7, #12]
        break;
 800388e:	e002      	b.n	8003896 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003890:	bf00      	nop
 8003892:	e000      	b.n	8003896 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003894:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a1f      	ldr	r2, [pc, #124]	; (800391c <ADC_ConfigureBoostMode+0x1d0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d808      	bhi.n	80038b6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80038b2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80038b4:	e025      	b.n	8003902 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a19      	ldr	r2, [pc, #100]	; (8003920 <ADC_ConfigureBoostMode+0x1d4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d80a      	bhi.n	80038d4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038d0:	609a      	str	r2, [r3, #8]
}
 80038d2:	e016      	b.n	8003902 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a13      	ldr	r2, [pc, #76]	; (8003924 <ADC_ConfigureBoostMode+0x1d8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d80a      	bhi.n	80038f2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ee:	609a      	str	r2, [r3, #8]
}
 80038f0:	e007      	b.n	8003902 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003900:	609a      	str	r2, [r3, #8]
}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40022000 	.word	0x40022000
 8003910:	40022100 	.word	0x40022100
 8003914:	40022300 	.word	0x40022300
 8003918:	58026300 	.word	0x58026300
 800391c:	005f5e10 	.word	0x005f5e10
 8003920:	00bebc20 	.word	0x00bebc20
 8003924:	017d7840 	.word	0x017d7840

08003928 <LL_ADC_IsEnabled>:
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <LL_ADC_IsEnabled+0x18>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <LL_ADC_IsEnabled+0x1a>
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <LL_ADC_REG_IsConversionOngoing>:
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b04      	cmp	r3, #4
 8003960:	d101      	bne.n	8003966 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003974:	b590      	push	{r4, r7, lr}
 8003976:	b0a3      	sub	sp, #140	; 0x8c
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800398e:	2302      	movs	r3, #2
 8003990:	e0c1      	b.n	8003b16 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800399a:	2300      	movs	r3, #0
 800399c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800399e:	2300      	movs	r3, #0
 80039a0:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a5e      	ldr	r2, [pc, #376]	; (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d102      	bne.n	80039b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039ac:	4b5d      	ldr	r3, [pc, #372]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	e001      	b.n	80039b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	f043 0220 	orr.w	r2, r3, #32
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e0a0      	b.n	8003b16 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff ffb9 	bl	800394e <LL_ADC_REG_IsConversionOngoing>
 80039dc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f7ff ffb2 	bl	800394e <LL_ADC_REG_IsConversionOngoing>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f040 8081 	bne.w	8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d17c      	bne.n	8003af4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a48      	ldr	r2, [pc, #288]	; (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a46      	ldr	r2, [pc, #280]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d101      	bne.n	8003a12 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003a0e:	4b46      	ldr	r3, [pc, #280]	; (8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a10:	e000      	b.n	8003a14 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003a12:	4b46      	ldr	r3, [pc, #280]	; (8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a14:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d039      	beq.n	8003a92 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a1e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a3a      	ldr	r2, [pc, #232]	; (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d004      	beq.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a39      	ldr	r2, [pc, #228]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d10e      	bne.n	8003a62 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003a44:	4836      	ldr	r0, [pc, #216]	; (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a46:	f7ff ff6f 	bl	8003928 <LL_ADC_IsEnabled>
 8003a4a:	4604      	mov	r4, r0
 8003a4c:	4835      	ldr	r0, [pc, #212]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a4e:	f7ff ff6b 	bl	8003928 <LL_ADC_IsEnabled>
 8003a52:	4603      	mov	r3, r0
 8003a54:	4323      	orrs	r3, r4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bf0c      	ite	eq
 8003a5a:	2301      	moveq	r3, #1
 8003a5c:	2300      	movne	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	e008      	b.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003a62:	4833      	ldr	r0, [pc, #204]	; (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003a64:	f7ff ff60 	bl	8003928 <LL_ADC_IsEnabled>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	bf0c      	ite	eq
 8003a6e:	2301      	moveq	r3, #1
 8003a70:	2300      	movne	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d047      	beq.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	4b2d      	ldr	r3, [pc, #180]	; (8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	6811      	ldr	r1, [r2, #0]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	6892      	ldr	r2, [r2, #8]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a8e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a90:	e03a      	b.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003a92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a9c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d004      	beq.n	8003ab2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d10e      	bne.n	8003ad0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003ab2:	481b      	ldr	r0, [pc, #108]	; (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ab4:	f7ff ff38 	bl	8003928 <LL_ADC_IsEnabled>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	481a      	ldr	r0, [pc, #104]	; (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003abc:	f7ff ff34 	bl	8003928 <LL_ADC_IsEnabled>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	4323      	orrs	r3, r4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e008      	b.n	8003ae2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003ad0:	4817      	ldr	r0, [pc, #92]	; (8003b30 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003ad2:	f7ff ff29 	bl	8003928 <LL_ADC_IsEnabled>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	bf0c      	ite	eq
 8003adc:	2301      	moveq	r3, #1
 8003ade:	2300      	movne	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d010      	beq.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ae6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003af0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003af2:	e009      	b.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003af8:	f043 0220 	orr.w	r2, r3, #32
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003b06:	e000      	b.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b08:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003b12:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	378c      	adds	r7, #140	; 0x8c
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd90      	pop	{r4, r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	40022000 	.word	0x40022000
 8003b24:	40022100 	.word	0x40022100
 8003b28:	40022300 	.word	0x40022300
 8003b2c:	58026300 	.word	0x58026300
 8003b30:	58026000 	.word	0x58026000
 8003b34:	fffff0e0 	.word	0xfffff0e0

08003b38 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e023      	b.n	8003b92 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fd fbca 	bl	80012f8 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3708      	adds	r7, #8
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bac:	4b0b      	ldr	r3, [pc, #44]	; (8003bdc <__NVIC_SetPriorityGrouping+0x40>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bca:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <__NVIC_SetPriorityGrouping+0x40>)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	60d3      	str	r3, [r2, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000ed00 	.word	0xe000ed00
 8003be0:	05fa0000 	.word	0x05fa0000

08003be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be8:	4b04      	ldr	r3, [pc, #16]	; (8003bfc <__NVIC_GetPriorityGrouping+0x18>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	f003 0307 	and.w	r3, r3, #7
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	db0a      	blt.n	8003c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	490c      	ldr	r1, [pc, #48]	; (8003c4c <__NVIC_SetPriority+0x4c>)
 8003c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1e:	0112      	lsls	r2, r2, #4
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	440b      	add	r3, r1
 8003c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c28:	e00a      	b.n	8003c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4908      	ldr	r1, [pc, #32]	; (8003c50 <__NVIC_SetPriority+0x50>)
 8003c30:	88fb      	ldrh	r3, [r7, #6]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	3b04      	subs	r3, #4
 8003c38:	0112      	lsls	r2, r2, #4
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	761a      	strb	r2, [r3, #24]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	e000e100 	.word	0xe000e100
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	; 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f1c3 0307 	rsb	r3, r3, #7
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	bf28      	it	cs
 8003c72:	2304      	movcs	r3, #4
 8003c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d902      	bls.n	8003c84 <NVIC_EncodePriority+0x30>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3b03      	subs	r3, #3
 8003c82:	e000      	b.n	8003c86 <NVIC_EncodePriority+0x32>
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43da      	mvns	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	401a      	ands	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	43d9      	mvns	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cac:	4313      	orrs	r3, r2
         );
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3724      	adds	r7, #36	; 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ccc:	d301      	bcc.n	8003cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e00f      	b.n	8003cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <SysTick_Config+0x40>)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cda:	210f      	movs	r1, #15
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f7ff ff8e 	bl	8003c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <SysTick_Config+0x40>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cea:	4b04      	ldr	r3, [pc, #16]	; (8003cfc <SysTick_Config+0x40>)
 8003cec:	2207      	movs	r2, #7
 8003cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	e000e010 	.word	0xe000e010

08003d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7ff ff47 	bl	8003b9c <__NVIC_SetPriorityGrouping>
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b086      	sub	sp, #24
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
 8003d22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d24:	f7ff ff5e 	bl	8003be4 <__NVIC_GetPriorityGrouping>
 8003d28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	6978      	ldr	r0, [r7, #20]
 8003d30:	f7ff ff90 	bl	8003c54 <NVIC_EncodePriority>
 8003d34:	4602      	mov	r2, r0
 8003d36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff5f 	bl	8003c00 <__NVIC_SetPriority>
}
 8003d42:	bf00      	nop
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ffb2 	bl	8003cbc <SysTick_Config>
 8003d58:	4603      	mov	r3, r0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e054      	b.n	8003e20 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	7f5b      	ldrb	r3, [r3, #29]
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7fd fad8 	bl	800133c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	791b      	ldrb	r3, [r3, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10c      	bne.n	8003db4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <HAL_CRC_Init+0xc4>)
 8003da0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0218 	bic.w	r2, r2, #24
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	e00c      	b.n	8003dce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6899      	ldr	r1, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f834 	bl	8003e2c <HAL_CRCEx_Polynomial_Set>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e028      	b.n	8003e20 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	795b      	ldrb	r3, [r3, #5]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f04f 32ff 	mov.w	r2, #4294967295
 8003dde:	611a      	str	r2, [r3, #16]
 8003de0:	e004      	b.n	8003dec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6912      	ldr	r2, [r2, #16]
 8003dea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695a      	ldr	r2, [r3, #20]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	04c11db7 	.word	0x04c11db7

08003e2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003e3c:	231f      	movs	r3, #31
 8003e3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	75fb      	strb	r3, [r7, #23]
 8003e4e:	e063      	b.n	8003f18 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003e50:	bf00      	nop
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	613a      	str	r2, [r7, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d009      	beq.n	8003e70 <HAL_CRCEx_Polynomial_Set+0x44>
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
 8003e68:	f003 0301 	and.w	r3, r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b18      	cmp	r3, #24
 8003e74:	d846      	bhi.n	8003f04 <HAL_CRCEx_Polynomial_Set+0xd8>
 8003e76:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <HAL_CRCEx_Polynomial_Set+0x50>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003f0b 	.word	0x08003f0b
 8003e80:	08003f05 	.word	0x08003f05
 8003e84:	08003f05 	.word	0x08003f05
 8003e88:	08003f05 	.word	0x08003f05
 8003e8c:	08003f05 	.word	0x08003f05
 8003e90:	08003f05 	.word	0x08003f05
 8003e94:	08003f05 	.word	0x08003f05
 8003e98:	08003f05 	.word	0x08003f05
 8003e9c:	08003ef9 	.word	0x08003ef9
 8003ea0:	08003f05 	.word	0x08003f05
 8003ea4:	08003f05 	.word	0x08003f05
 8003ea8:	08003f05 	.word	0x08003f05
 8003eac:	08003f05 	.word	0x08003f05
 8003eb0:	08003f05 	.word	0x08003f05
 8003eb4:	08003f05 	.word	0x08003f05
 8003eb8:	08003f05 	.word	0x08003f05
 8003ebc:	08003eed 	.word	0x08003eed
 8003ec0:	08003f05 	.word	0x08003f05
 8003ec4:	08003f05 	.word	0x08003f05
 8003ec8:	08003f05 	.word	0x08003f05
 8003ecc:	08003f05 	.word	0x08003f05
 8003ed0:	08003f05 	.word	0x08003f05
 8003ed4:	08003f05 	.word	0x08003f05
 8003ed8:	08003f05 	.word	0x08003f05
 8003edc:	08003ee1 	.word	0x08003ee1
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	2b06      	cmp	r3, #6
 8003ee4:	d913      	bls.n	8003f0e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003eea:	e010      	b.n	8003f0e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b07      	cmp	r3, #7
 8003ef0:	d90f      	bls.n	8003f12 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003ef6:	e00c      	b.n	8003f12 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b0f      	cmp	r3, #15
 8003efc:	d90b      	bls.n	8003f16 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003f02:	e008      	b.n	8003f16 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
        break;
 8003f08:	e006      	b.n	8003f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e004      	b.n	8003f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003f0e:	bf00      	nop
 8003f10:	e002      	b.n	8003f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003f12:	bf00      	nop
 8003f14:	e000      	b.n	8003f18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003f16:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10d      	bne.n	8003f3a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	f023 0118 	bic.w	r1, r3, #24
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	371c      	adds	r7, #28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr

08003f48 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e033      	b.n	8003fc2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d106      	bne.n	8003f74 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd fa06 	bl	8001380 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f854 	bl	8004028 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f822 	bl	8003fca <FMAC_Reset>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	f043 0210 	orr.w	r2, r3, #16
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	22a0      	movs	r2, #160	; 0xa0
 8003f9c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
 8003fa4:	e008      	b.n	8003fb8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2220      	movs	r2, #32
 8003fb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003fd2:	f7fe fa11 	bl	80023f8 <HAL_GetTick>
 8003fd6:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fe6:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8003fe8:	e00f      	b.n	800400a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8003fea:	f7fe fa05 	bl	80023f8 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003ff8:	d907      	bls.n	800400a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ffe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e00a      	b.n	8004020 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1e8      	bne.n	8003fea <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f807 	bl	8004044 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f81b 	bl	8004072 <FMAC_ResetOutputStateAndDataPointers>
}
 800403c:	bf00      	nop
 800403e:	3708      	adds	r7, #8
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8004066:	bf00      	nop
 8004068:	370c      	adds	r7, #12
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr

08004072 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b089      	sub	sp, #36	; 0x24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80040ae:	4b86      	ldr	r3, [pc, #536]	; (80042c8 <HAL_GPIO_Init+0x228>)
 80040b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80040b2:	e18c      	b.n	80043ce <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 817e 	beq.w	80043c8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_GPIO_Init+0x44>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4013      	ands	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	69ba      	ldr	r2, [r7, #24]
 800410a:	4313      	orrs	r3, r2
 800410c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411a:	2201      	movs	r2, #1
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	4013      	ands	r3, r2
 8004128:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 0201 	and.w	r2, r3, #1
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b03      	cmp	r3, #3
 8004150:	d017      	beq.n	8004182 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4013      	ands	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d123      	bne.n	80041d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	08da      	lsrs	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	220f      	movs	r2, #15
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	69b9      	ldr	r1, [r7, #24]
 80041d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	4013      	ands	r3, r2
 80041ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 0203 	and.w	r2, r3, #3
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4313      	orrs	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 80d8 	beq.w	80043c8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004218:	4b2c      	ldr	r3, [pc, #176]	; (80042cc <HAL_GPIO_Init+0x22c>)
 800421a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800421e:	4a2b      	ldr	r2, [pc, #172]	; (80042cc <HAL_GPIO_Init+0x22c>)
 8004220:	f043 0302 	orr.w	r3, r3, #2
 8004224:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004228:	4b28      	ldr	r3, [pc, #160]	; (80042cc <HAL_GPIO_Init+0x22c>)
 800422a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004236:	4a26      	ldr	r2, [pc, #152]	; (80042d0 <HAL_GPIO_Init+0x230>)
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	089b      	lsrs	r3, r3, #2
 800423c:	3302      	adds	r3, #2
 800423e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004242:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	220f      	movs	r2, #15
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43db      	mvns	r3, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4013      	ands	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <HAL_GPIO_Init+0x234>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d04a      	beq.n	80042f8 <HAL_GPIO_Init+0x258>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <HAL_GPIO_Init+0x238>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d02b      	beq.n	80042c2 <HAL_GPIO_Init+0x222>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_GPIO_Init+0x23c>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d025      	beq.n	80042be <HAL_GPIO_Init+0x21e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_GPIO_Init+0x240>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d01f      	beq.n	80042ba <HAL_GPIO_Init+0x21a>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a19      	ldr	r2, [pc, #100]	; (80042e4 <HAL_GPIO_Init+0x244>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d019      	beq.n	80042b6 <HAL_GPIO_Init+0x216>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <HAL_GPIO_Init+0x248>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d013      	beq.n	80042b2 <HAL_GPIO_Init+0x212>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a17      	ldr	r2, [pc, #92]	; (80042ec <HAL_GPIO_Init+0x24c>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d00d      	beq.n	80042ae <HAL_GPIO_Init+0x20e>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a16      	ldr	r2, [pc, #88]	; (80042f0 <HAL_GPIO_Init+0x250>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d007      	beq.n	80042aa <HAL_GPIO_Init+0x20a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a15      	ldr	r2, [pc, #84]	; (80042f4 <HAL_GPIO_Init+0x254>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_GPIO_Init+0x206>
 80042a2:	2309      	movs	r3, #9
 80042a4:	e029      	b.n	80042fa <HAL_GPIO_Init+0x25a>
 80042a6:	230a      	movs	r3, #10
 80042a8:	e027      	b.n	80042fa <HAL_GPIO_Init+0x25a>
 80042aa:	2307      	movs	r3, #7
 80042ac:	e025      	b.n	80042fa <HAL_GPIO_Init+0x25a>
 80042ae:	2306      	movs	r3, #6
 80042b0:	e023      	b.n	80042fa <HAL_GPIO_Init+0x25a>
 80042b2:	2305      	movs	r3, #5
 80042b4:	e021      	b.n	80042fa <HAL_GPIO_Init+0x25a>
 80042b6:	2304      	movs	r3, #4
 80042b8:	e01f      	b.n	80042fa <HAL_GPIO_Init+0x25a>
 80042ba:	2303      	movs	r3, #3
 80042bc:	e01d      	b.n	80042fa <HAL_GPIO_Init+0x25a>
 80042be:	2302      	movs	r3, #2
 80042c0:	e01b      	b.n	80042fa <HAL_GPIO_Init+0x25a>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e019      	b.n	80042fa <HAL_GPIO_Init+0x25a>
 80042c6:	bf00      	nop
 80042c8:	58000080 	.word	0x58000080
 80042cc:	58024400 	.word	0x58024400
 80042d0:	58000400 	.word	0x58000400
 80042d4:	58020000 	.word	0x58020000
 80042d8:	58020400 	.word	0x58020400
 80042dc:	58020800 	.word	0x58020800
 80042e0:	58020c00 	.word	0x58020c00
 80042e4:	58021000 	.word	0x58021000
 80042e8:	58021400 	.word	0x58021400
 80042ec:	58021800 	.word	0x58021800
 80042f0:	58021c00 	.word	0x58021c00
 80042f4:	58022400 	.word	0x58022400
 80042f8:	2300      	movs	r3, #0
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	f002 0203 	and.w	r2, r2, #3
 8004300:	0092      	lsls	r2, r2, #2
 8004302:	4093      	lsls	r3, r2
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800430a:	4938      	ldr	r1, [pc, #224]	; (80043ec <HAL_GPIO_Init+0x34c>)
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	3302      	adds	r3, #2
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	43db      	mvns	r3, r3
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	4013      	ands	r3, r2
 8004328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	4313      	orrs	r3, r2
 800433c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800433e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	43db      	mvns	r3, r3
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d003      	beq.n	800436c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	4313      	orrs	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800436c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	43db      	mvns	r3, r3
 800437e:	69ba      	ldr	r2, [r7, #24]
 8004380:	4013      	ands	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	43db      	mvns	r3, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4013      	ands	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	3301      	adds	r3, #1
 80043cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	fa22 f303 	lsr.w	r3, r2, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f47f ae6b 	bne.w	80040b4 <HAL_GPIO_Init+0x14>
  }
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	3724      	adds	r7, #36	; 0x24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	58000400 	.word	0x58000400

080043f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	e001      	b.n	8004412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
 800442c:	4613      	mov	r3, r2
 800442e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004430:	787b      	ldrb	r3, [r7, #1]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004436:	887a      	ldrh	r2, [r7, #2]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800443c:	e003      	b.n	8004446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800443e:	887b      	ldrh	r3, [r7, #2]
 8004440:	041a      	lsls	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	619a      	str	r2, [r3, #24]
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e07f      	b.n	8004566 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc ffa2 	bl	80013c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689a      	ldr	r2, [r3, #8]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ca:	609a      	str	r2, [r3, #8]
 80044cc:	e006      	b.n	80044dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80044da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d104      	bne.n	80044ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6859      	ldr	r1, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <HAL_I2C_Init+0x11c>)
 80044fa:	430b      	orrs	r3, r1
 80044fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800450c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69d9      	ldr	r1, [r3, #28]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1a      	ldr	r2, [r3, #32]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	430a      	orrs	r2, r1
 8004536:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3708      	adds	r7, #8
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	02008000 	.word	0x02008000

08004574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b20      	cmp	r3, #32
 8004588:	d138      	bne.n	80045fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004590:	2b01      	cmp	r3, #1
 8004592:	d101      	bne.n	8004598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004594:	2302      	movs	r3, #2
 8004596:	e032      	b.n	80045fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2224      	movs	r2, #36	; 0x24
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 0201 	bic.w	r2, r2, #1
 80045b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6819      	ldr	r1, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	e000      	b.n	80045fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045fc:	2302      	movs	r3, #2
  }
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800460a:	b480      	push	{r7}
 800460c:	b085      	sub	sp, #20
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b20      	cmp	r3, #32
 800461e:	d139      	bne.n	8004694 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800462a:	2302      	movs	r3, #2
 800462c:	e033      	b.n	8004696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2224      	movs	r2, #36	; 0x24
 800463a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0201 	bic.w	r2, r2, #1
 800464c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800465c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2220      	movs	r2, #32
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	e000      	b.n	8004696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004694:	2302      	movs	r3, #2
  }
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80046a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046a4:	b08f      	sub	sp, #60	; 0x3c
 80046a6:	af0a      	add	r7, sp, #40	; 0x28
 80046a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e116      	b.n	80048e2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fd fc44 	bl	8001f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2203      	movs	r2, #3
 80046d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d102      	bne.n	80046ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4618      	mov	r0, r3
 80046f4:	f007 f844 	bl	800b780 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	603b      	str	r3, [r7, #0]
 80046fe:	687e      	ldr	r6, [r7, #4]
 8004700:	466d      	mov	r5, sp
 8004702:	f106 0410 	add.w	r4, r6, #16
 8004706:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004708:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800470a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800470c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800470e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004712:	e885 0003 	stmia.w	r5, {r0, r1}
 8004716:	1d33      	adds	r3, r6, #4
 8004718:	cb0e      	ldmia	r3, {r1, r2, r3}
 800471a:	6838      	ldr	r0, [r7, #0]
 800471c:	f006 ffc2 	bl	800b6a4 <USB_CoreInit>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e0d7      	b.n	80048e2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f007 f832 	bl	800b7a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800473e:	2300      	movs	r3, #0
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e04a      	b.n	80047da <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004744:	7bfa      	ldrb	r2, [r7, #15]
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	333d      	adds	r3, #61	; 0x3d
 8004754:	2201      	movs	r2, #1
 8004756:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004758:	7bfa      	ldrb	r2, [r7, #15]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	333c      	adds	r3, #60	; 0x3c
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800476c:	7bfa      	ldrb	r2, [r7, #15]
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	b298      	uxth	r0, r3
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	3356      	adds	r3, #86	; 0x56
 8004780:	4602      	mov	r2, r0
 8004782:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004784:	7bfa      	ldrb	r2, [r7, #15]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4413      	add	r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	3340      	adds	r3, #64	; 0x40
 8004794:	2200      	movs	r2, #0
 8004796:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004798:	7bfa      	ldrb	r2, [r7, #15]
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	3344      	adds	r3, #68	; 0x44
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80047ac:	7bfa      	ldrb	r2, [r7, #15]
 80047ae:	6879      	ldr	r1, [r7, #4]
 80047b0:	4613      	mov	r3, r2
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	3348      	adds	r3, #72	; 0x48
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80047c0:	7bfa      	ldrb	r2, [r7, #15]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	334c      	adds	r3, #76	; 0x4c
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047d4:	7bfb      	ldrb	r3, [r7, #15]
 80047d6:	3301      	adds	r3, #1
 80047d8:	73fb      	strb	r3, [r7, #15]
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d3af      	bcc.n	8004744 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047e4:	2300      	movs	r3, #0
 80047e6:	73fb      	strb	r3, [r7, #15]
 80047e8:	e044      	b.n	8004874 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047ea:	7bfa      	ldrb	r2, [r7, #15]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004800:	7bfa      	ldrb	r2, [r7, #15]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004816:	7bfa      	ldrb	r2, [r7, #15]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004828:	2200      	movs	r2, #0
 800482a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800482c:	7bfa      	ldrb	r2, [r7, #15]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004842:	7bfa      	ldrb	r2, [r7, #15]
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	4413      	add	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	440b      	add	r3, r1
 8004850:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004858:	7bfa      	ldrb	r2, [r7, #15]
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	4613      	mov	r3, r2
 800485e:	00db      	lsls	r3, r3, #3
 8004860:	4413      	add	r3, r2
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	440b      	add	r3, r1
 8004866:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	3301      	adds	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
 8004874:	7bfa      	ldrb	r2, [r7, #15]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	429a      	cmp	r2, r3
 800487c:	d3b5      	bcc.n	80047ea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	687e      	ldr	r6, [r7, #4]
 8004886:	466d      	mov	r5, sp
 8004888:	f106 0410 	add.w	r4, r6, #16
 800488c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800488e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004894:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004898:	e885 0003 	stmia.w	r5, {r0, r1}
 800489c:	1d33      	adds	r3, r6, #4
 800489e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048a0:	6838      	ldr	r0, [r7, #0]
 80048a2:	f006 ffcb 	bl	800b83c <USB_DevInit>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e014      	b.n	80048e2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d102      	bne.n	80048d6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 f80b 	bl	80048ec <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f007 f989 	bl	800bbf2 <USB_DevDisconnect>

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080048ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_PCDEx_ActivateLPM+0x44>)
 800491c:	4313      	orrs	r3, r2
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	10000003 	.word	0x10000003

08004934 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800493c:	4b19      	ldr	r3, [pc, #100]	; (80049a4 <HAL_PWREx_ConfigSupply+0x70>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b04      	cmp	r3, #4
 8004946:	d00a      	beq.n	800495e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004948:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <HAL_PWREx_ConfigSupply+0x70>)
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	429a      	cmp	r2, r3
 8004954:	d001      	beq.n	800495a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e01f      	b.n	800499a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800495a:	2300      	movs	r3, #0
 800495c:	e01d      	b.n	800499a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800495e:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <HAL_PWREx_ConfigSupply+0x70>)
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f023 0207 	bic.w	r2, r3, #7
 8004966:	490f      	ldr	r1, [pc, #60]	; (80049a4 <HAL_PWREx_ConfigSupply+0x70>)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4313      	orrs	r3, r2
 800496c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800496e:	f7fd fd43 	bl	80023f8 <HAL_GetTick>
 8004972:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004974:	e009      	b.n	800498a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004976:	f7fd fd3f 	bl	80023f8 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004984:	d901      	bls.n	800498a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e007      	b.n	800499a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800498a:	4b06      	ldr	r3, [pc, #24]	; (80049a4 <HAL_PWREx_ConfigSupply+0x70>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004996:	d1ee      	bne.n	8004976 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	58024800 	.word	0x58024800

080049a8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80049ac:	4b05      	ldr	r3, [pc, #20]	; (80049c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a04      	ldr	r2, [pc, #16]	; (80049c4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80049b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b6:	60d3      	str	r3, [r2, #12]
}
 80049b8:	bf00      	nop
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	58024800 	.word	0x58024800

080049c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08c      	sub	sp, #48	; 0x30
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e3c8      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 8087 	beq.w	8004af6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049e8:	4b88      	ldr	r3, [pc, #544]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049f2:	4b86      	ldr	r3, [pc, #536]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 80049f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80049f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d007      	beq.n	8004a0e <HAL_RCC_OscConfig+0x46>
 80049fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a00:	2b18      	cmp	r3, #24
 8004a02:	d110      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5e>
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d10b      	bne.n	8004a26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a0e:	4b7f      	ldr	r3, [pc, #508]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d06c      	beq.n	8004af4 <HAL_RCC_OscConfig+0x12c>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d168      	bne.n	8004af4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e3a2      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a2e:	d106      	bne.n	8004a3e <HAL_RCC_OscConfig+0x76>
 8004a30:	4b76      	ldr	r3, [pc, #472]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a75      	ldr	r2, [pc, #468]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3a:	6013      	str	r3, [r2, #0]
 8004a3c:	e02e      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x98>
 8004a46:	4b71      	ldr	r3, [pc, #452]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a70      	ldr	r2, [pc, #448]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	4b6e      	ldr	r3, [pc, #440]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a6d      	ldr	r2, [pc, #436]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	e01d      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a68:	d10c      	bne.n	8004a84 <HAL_RCC_OscConfig+0xbc>
 8004a6a:	4b68      	ldr	r3, [pc, #416]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a67      	ldr	r2, [pc, #412]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	4b65      	ldr	r3, [pc, #404]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a64      	ldr	r2, [pc, #400]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	e00b      	b.n	8004a9c <HAL_RCC_OscConfig+0xd4>
 8004a84:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a60      	ldr	r2, [pc, #384]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a8e:	6013      	str	r3, [r2, #0]
 8004a90:	4b5e      	ldr	r3, [pc, #376]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a5d      	ldr	r2, [pc, #372]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004a96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d013      	beq.n	8004acc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa4:	f7fd fca8 	bl	80023f8 <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004aac:	f7fd fca4 	bl	80023f8 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b64      	cmp	r3, #100	; 0x64
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e356      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004abe:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0xe4>
 8004aca:	e014      	b.n	8004af6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004acc:	f7fd fc94 	bl	80023f8 <HAL_GetTick>
 8004ad0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fd fc90 	bl	80023f8 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e342      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ae6:	4b49      	ldr	r3, [pc, #292]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1f0      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x10c>
 8004af2:	e000      	b.n	8004af6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 808c 	beq.w	8004c1c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b04:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b0c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004b0e:	4b3f      	ldr	r3, [pc, #252]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <HAL_RCC_OscConfig+0x162>
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	2b18      	cmp	r3, #24
 8004b1e:	d137      	bne.n	8004b90 <HAL_RCC_OscConfig+0x1c8>
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d132      	bne.n	8004b90 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b2a:	4b38      	ldr	r3, [pc, #224]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <HAL_RCC_OscConfig+0x17a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e314      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b42:	4b32      	ldr	r3, [pc, #200]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 0219 	bic.w	r2, r3, #25
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	492f      	ldr	r1, [pc, #188]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd fc50 	bl	80023f8 <HAL_GetTick>
 8004b58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5c:	f7fd fc4c 	bl	80023f8 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e2fe      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004b6e:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	061b      	lsls	r3, r3, #24
 8004b88:	4920      	ldr	r1, [pc, #128]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b8e:	e045      	b.n	8004c1c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d026      	beq.n	8004be6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004b98:	4b1c      	ldr	r3, [pc, #112]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 0219 	bic.w	r2, r3, #25
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	4919      	ldr	r1, [pc, #100]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fd fc25 	bl	80023f8 <HAL_GetTick>
 8004bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7fd fc21 	bl	80023f8 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e2d3      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004bc4:	4b11      	ldr	r3, [pc, #68]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd0:	4b0e      	ldr	r3, [pc, #56]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	061b      	lsls	r3, r3, #24
 8004bde:	490b      	ldr	r1, [pc, #44]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
 8004be4:	e01a      	b.n	8004c1c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <HAL_RCC_OscConfig+0x244>)
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf2:	f7fd fc01 	bl	80023f8 <HAL_GetTick>
 8004bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bfa:	f7fd fbfd 	bl	80023f8 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d903      	bls.n	8004c10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e2af      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
 8004c0c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004c10:	4b96      	ldr	r3, [pc, #600]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ee      	bne.n	8004bfa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d06a      	beq.n	8004cfe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c28:	4b90      	ldr	r3, [pc, #576]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c30:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004c32:	4b8e      	ldr	r3, [pc, #568]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d007      	beq.n	8004c4e <HAL_RCC_OscConfig+0x286>
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	2b18      	cmp	r3, #24
 8004c42:	d11b      	bne.n	8004c7c <HAL_RCC_OscConfig+0x2b4>
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d116      	bne.n	8004c7c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c4e:	4b87      	ldr	r3, [pc, #540]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <HAL_RCC_OscConfig+0x29e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69db      	ldr	r3, [r3, #28]
 8004c5e:	2b80      	cmp	r3, #128	; 0x80
 8004c60:	d001      	beq.n	8004c66 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e282      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004c66:	4b81      	ldr	r3, [pc, #516]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	497d      	ldr	r1, [pc, #500]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004c7a:	e040      	b.n	8004cfe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d023      	beq.n	8004ccc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004c84:	4b79      	ldr	r3, [pc, #484]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a78      	ldr	r2, [pc, #480]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004c8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c90:	f7fd fbb2 	bl	80023f8 <HAL_GetTick>
 8004c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004c98:	f7fd fbae 	bl	80023f8 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e260      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004caa:	4b70      	ldr	r3, [pc, #448]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d0f0      	beq.n	8004c98 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	061b      	lsls	r3, r3, #24
 8004cc4:	4969      	ldr	r1, [pc, #420]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60cb      	str	r3, [r1, #12]
 8004cca:	e018      	b.n	8004cfe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004ccc:	4b67      	ldr	r3, [pc, #412]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a66      	ldr	r2, [pc, #408]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004cd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fd fb8e 	bl	80023f8 <HAL_GetTick>
 8004cdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ce0:	f7fd fb8a 	bl	80023f8 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e23c      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004cf2:	4b5e      	ldr	r3, [pc, #376]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d036      	beq.n	8004d78 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d019      	beq.n	8004d46 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d12:	4b56      	ldr	r3, [pc, #344]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d16:	4a55      	ldr	r2, [pc, #340]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1e:	f7fd fb6b 	bl	80023f8 <HAL_GetTick>
 8004d22:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d26:	f7fd fb67 	bl	80023f8 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e219      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004d38:	4b4c      	ldr	r3, [pc, #304]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCC_OscConfig+0x35e>
 8004d44:	e018      	b.n	8004d78 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d46:	4b49      	ldr	r3, [pc, #292]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d4a:	4a48      	ldr	r2, [pc, #288]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d52:	f7fd fb51 	bl	80023f8 <HAL_GetTick>
 8004d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d5a:	f7fd fb4d 	bl	80023f8 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e1ff      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004d6c:	4b3f      	ldr	r3, [pc, #252]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f0      	bne.n	8004d5a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d036      	beq.n	8004df2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d019      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d8c:	4b37      	ldr	r3, [pc, #220]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a36      	ldr	r2, [pc, #216]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004d92:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d96:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004d98:	f7fd fb2e 	bl	80023f8 <HAL_GetTick>
 8004d9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004d9e:	e008      	b.n	8004db2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004da0:	f7fd fb2a 	bl	80023f8 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e1dc      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004db2:	4b2e      	ldr	r3, [pc, #184]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f0      	beq.n	8004da0 <HAL_RCC_OscConfig+0x3d8>
 8004dbe:	e018      	b.n	8004df2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004dc0:	4b2a      	ldr	r3, [pc, #168]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a29      	ldr	r2, [pc, #164]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004dcc:	f7fd fb14 	bl	80023f8 <HAL_GetTick>
 8004dd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dd4:	f7fd fb10 	bl	80023f8 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e1c2      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004de6:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0304 	and.w	r3, r3, #4
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8086 	beq.w	8004f0c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e00:	4b1b      	ldr	r3, [pc, #108]	; (8004e70 <HAL_RCC_OscConfig+0x4a8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1a      	ldr	r2, [pc, #104]	; (8004e70 <HAL_RCC_OscConfig+0x4a8>)
 8004e06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e0c:	f7fd faf4 	bl	80023f8 <HAL_GetTick>
 8004e10:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e14:	f7fd faf0 	bl	80023f8 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b64      	cmp	r3, #100	; 0x64
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e1a2      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e26:	4b12      	ldr	r3, [pc, #72]	; (8004e70 <HAL_RCC_OscConfig+0x4a8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d106      	bne.n	8004e48 <HAL_RCC_OscConfig+0x480>
 8004e3a:	4b0c      	ldr	r3, [pc, #48]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	4a0b      	ldr	r2, [pc, #44]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	6713      	str	r3, [r2, #112]	; 0x70
 8004e46:	e032      	b.n	8004eae <HAL_RCC_OscConfig+0x4e6>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d111      	bne.n	8004e74 <HAL_RCC_OscConfig+0x4ac>
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	4a05      	ldr	r2, [pc, #20]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	4a02      	ldr	r2, [pc, #8]	; (8004e6c <HAL_RCC_OscConfig+0x4a4>)
 8004e62:	f023 0304 	bic.w	r3, r3, #4
 8004e66:	6713      	str	r3, [r2, #112]	; 0x70
 8004e68:	e021      	b.n	8004eae <HAL_RCC_OscConfig+0x4e6>
 8004e6a:	bf00      	nop
 8004e6c:	58024400 	.word	0x58024400
 8004e70:	58024800 	.word	0x58024800
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b05      	cmp	r3, #5
 8004e7a:	d10c      	bne.n	8004e96 <HAL_RCC_OscConfig+0x4ce>
 8004e7c:	4b83      	ldr	r3, [pc, #524]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a82      	ldr	r2, [pc, #520]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004e82:	f043 0304 	orr.w	r3, r3, #4
 8004e86:	6713      	str	r3, [r2, #112]	; 0x70
 8004e88:	4b80      	ldr	r3, [pc, #512]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8c:	4a7f      	ldr	r2, [pc, #508]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	6713      	str	r3, [r2, #112]	; 0x70
 8004e94:	e00b      	b.n	8004eae <HAL_RCC_OscConfig+0x4e6>
 8004e96:	4b7d      	ldr	r3, [pc, #500]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	4a7c      	ldr	r2, [pc, #496]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea2:	4b7a      	ldr	r3, [pc, #488]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea6:	4a79      	ldr	r2, [pc, #484]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004ea8:	f023 0304 	bic.w	r3, r3, #4
 8004eac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d015      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb6:	f7fd fa9f 	bl	80023f8 <HAL_GetTick>
 8004eba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fd fa9b 	bl	80023f8 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e14b      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ed4:	4b6d      	ldr	r3, [pc, #436]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d0ee      	beq.n	8004ebe <HAL_RCC_OscConfig+0x4f6>
 8004ee0:	e014      	b.n	8004f0c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee2:	f7fd fa89 	bl	80023f8 <HAL_GetTick>
 8004ee6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004ee8:	e00a      	b.n	8004f00 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eea:	f7fd fa85 	bl	80023f8 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d901      	bls.n	8004f00 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e135      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004f00:	4b62      	ldr	r3, [pc, #392]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f04:	f003 0302 	and.w	r3, r3, #2
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1ee      	bne.n	8004eea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 812a 	beq.w	800516a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004f16:	4b5d      	ldr	r3, [pc, #372]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f1e:	2b18      	cmp	r3, #24
 8004f20:	f000 80ba 	beq.w	8005098 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	f040 8095 	bne.w	8005058 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2e:	4b57      	ldr	r3, [pc, #348]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a56      	ldr	r2, [pc, #344]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004f34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3a:	f7fd fa5d 	bl	80023f8 <HAL_GetTick>
 8004f3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f42:	f7fd fa59 	bl	80023f8 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e10b      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004f54:	4b4d      	ldr	r3, [pc, #308]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1f0      	bne.n	8004f42 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f60:	4b4a      	ldr	r3, [pc, #296]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f64:	4b4a      	ldr	r3, [pc, #296]	; (8005090 <HAL_RCC_OscConfig+0x6c8>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f70:	0112      	lsls	r2, r2, #4
 8004f72:	430a      	orrs	r2, r1
 8004f74:	4945      	ldr	r1, [pc, #276]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	628b      	str	r3, [r1, #40]	; 0x28
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	025b      	lsls	r3, r3, #9
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f94:	3b01      	subs	r3, #1
 8004f96:	041b      	lsls	r3, r3, #16
 8004f98:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	061b      	lsls	r3, r3, #24
 8004fa6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004faa:	4938      	ldr	r1, [pc, #224]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004fb0:	4b36      	ldr	r3, [pc, #216]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb4:	4a35      	ldr	r2, [pc, #212]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004fb6:	f023 0301 	bic.w	r3, r3, #1
 8004fba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fbc:	4b33      	ldr	r3, [pc, #204]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fc0:	4b34      	ldr	r3, [pc, #208]	; (8005094 <HAL_RCC_OscConfig+0x6cc>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004fc8:	00d2      	lsls	r2, r2, #3
 8004fca:	4930      	ldr	r1, [pc, #192]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004fd0:	4b2e      	ldr	r3, [pc, #184]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd4:	f023 020c 	bic.w	r2, r3, #12
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	492b      	ldr	r1, [pc, #172]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004fe2:	4b2a      	ldr	r3, [pc, #168]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	f023 0202 	bic.w	r2, r3, #2
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	4927      	ldr	r1, [pc, #156]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ff4:	4b25      	ldr	r3, [pc, #148]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	4a24      	ldr	r2, [pc, #144]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8004ffa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ffe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005000:	4b22      	ldr	r3, [pc, #136]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8005002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005004:	4a21      	ldr	r2, [pc, #132]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8005006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800500a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800500c:	4b1f      	ldr	r3, [pc, #124]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	4a1e      	ldr	r2, [pc, #120]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8005012:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005016:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005018:	4b1c      	ldr	r3, [pc, #112]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	4a1b      	ldr	r2, [pc, #108]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005024:	4b19      	ldr	r3, [pc, #100]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a18      	ldr	r2, [pc, #96]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 800502a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800502e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005030:	f7fd f9e2 	bl	80023f8 <HAL_GetTick>
 8005034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005036:	e008      	b.n	800504a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005038:	f7fd f9de 	bl	80023f8 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d901      	bls.n	800504a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	e090      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800504a:	4b10      	ldr	r3, [pc, #64]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0f0      	beq.n	8005038 <HAL_RCC_OscConfig+0x670>
 8005056:	e088      	b.n	800516a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005058:	4b0c      	ldr	r3, [pc, #48]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a0b      	ldr	r2, [pc, #44]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 800505e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005064:	f7fd f9c8 	bl	80023f8 <HAL_GetTick>
 8005068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506c:	f7fd f9c4 	bl	80023f8 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b02      	cmp	r3, #2
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e076      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800507e:	4b03      	ldr	r3, [pc, #12]	; (800508c <HAL_RCC_OscConfig+0x6c4>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d1f0      	bne.n	800506c <HAL_RCC_OscConfig+0x6a4>
 800508a:	e06e      	b.n	800516a <HAL_RCC_OscConfig+0x7a2>
 800508c:	58024400 	.word	0x58024400
 8005090:	fffffc0c 	.word	0xfffffc0c
 8005094:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005098:	4b36      	ldr	r3, [pc, #216]	; (8005174 <HAL_RCC_OscConfig+0x7ac>)
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800509e:	4b35      	ldr	r3, [pc, #212]	; (8005174 <HAL_RCC_OscConfig+0x7ac>)
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d031      	beq.n	8005110 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f003 0203 	and.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d12a      	bne.n	8005110 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	091b      	lsrs	r3, r3, #4
 80050be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d122      	bne.n	8005110 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d11a      	bne.n	8005110 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	0a5b      	lsrs	r3, r3, #9
 80050de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d111      	bne.n	8005110 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d108      	bne.n	8005110 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	0e1b      	lsrs	r3, r3, #24
 8005102:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e02b      	b.n	800516c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005114:	4b17      	ldr	r3, [pc, #92]	; (8005174 <HAL_RCC_OscConfig+0x7ac>)
 8005116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005118:	08db      	lsrs	r3, r3, #3
 800511a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800511e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	429a      	cmp	r2, r3
 8005128:	d01f      	beq.n	800516a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800512a:	4b12      	ldr	r3, [pc, #72]	; (8005174 <HAL_RCC_OscConfig+0x7ac>)
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	4a11      	ldr	r2, [pc, #68]	; (8005174 <HAL_RCC_OscConfig+0x7ac>)
 8005130:	f023 0301 	bic.w	r3, r3, #1
 8005134:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005136:	f7fd f95f 	bl	80023f8 <HAL_GetTick>
 800513a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800513c:	bf00      	nop
 800513e:	f7fd f95b 	bl	80023f8 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	4293      	cmp	r3, r2
 8005148:	d0f9      	beq.n	800513e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800514a:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <HAL_RCC_OscConfig+0x7ac>)
 800514c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514e:	4b0a      	ldr	r3, [pc, #40]	; (8005178 <HAL_RCC_OscConfig+0x7b0>)
 8005150:	4013      	ands	r3, r2
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005156:	00d2      	lsls	r2, r2, #3
 8005158:	4906      	ldr	r1, [pc, #24]	; (8005174 <HAL_RCC_OscConfig+0x7ac>)
 800515a:	4313      	orrs	r3, r2
 800515c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_RCC_OscConfig+0x7ac>)
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	4a04      	ldr	r2, [pc, #16]	; (8005174 <HAL_RCC_OscConfig+0x7ac>)
 8005164:	f043 0301 	orr.w	r3, r3, #1
 8005168:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3730      	adds	r7, #48	; 0x30
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	58024400 	.word	0x58024400
 8005178:	ffff0007 	.word	0xffff0007

0800517c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e19c      	b.n	80054ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005190:	4b8a      	ldr	r3, [pc, #552]	; (80053bc <HAL_RCC_ClockConfig+0x240>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d910      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b87      	ldr	r3, [pc, #540]	; (80053bc <HAL_RCC_ClockConfig+0x240>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 020f 	bic.w	r2, r3, #15
 80051a6:	4985      	ldr	r1, [pc, #532]	; (80053bc <HAL_RCC_ClockConfig+0x240>)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b83      	ldr	r3, [pc, #524]	; (80053bc <HAL_RCC_ClockConfig+0x240>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e184      	b.n	80054ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d010      	beq.n	80051ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	4b7b      	ldr	r3, [pc, #492]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051d8:	429a      	cmp	r2, r3
 80051da:	d908      	bls.n	80051ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051dc:	4b78      	ldr	r3, [pc, #480]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	4975      	ldr	r1, [pc, #468]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0308 	and.w	r3, r3, #8
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d010      	beq.n	800521c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	695a      	ldr	r2, [r3, #20]
 80051fe:	4b70      	ldr	r3, [pc, #448]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 8005200:	69db      	ldr	r3, [r3, #28]
 8005202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005206:	429a      	cmp	r2, r3
 8005208:	d908      	bls.n	800521c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800520a:	4b6d      	ldr	r3, [pc, #436]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	496a      	ldr	r1, [pc, #424]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 8005218:	4313      	orrs	r3, r2
 800521a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b00      	cmp	r3, #0
 8005226:	d010      	beq.n	800524a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	699a      	ldr	r2, [r3, #24]
 800522c:	4b64      	ldr	r3, [pc, #400]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005234:	429a      	cmp	r2, r3
 8005236:	d908      	bls.n	800524a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005238:	4b61      	ldr	r3, [pc, #388]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	495e      	ldr	r1, [pc, #376]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 8005246:	4313      	orrs	r3, r2
 8005248:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d010      	beq.n	8005278 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69da      	ldr	r2, [r3, #28]
 800525a:	4b59      	ldr	r3, [pc, #356]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005262:	429a      	cmp	r2, r3
 8005264:	d908      	bls.n	8005278 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005266:	4b56      	ldr	r3, [pc, #344]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	69db      	ldr	r3, [r3, #28]
 8005272:	4953      	ldr	r1, [pc, #332]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 8005274:	4313      	orrs	r3, r2
 8005276:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b00      	cmp	r3, #0
 8005282:	d010      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	4b4d      	ldr	r3, [pc, #308]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	429a      	cmp	r2, r3
 8005292:	d908      	bls.n	80052a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005294:	4b4a      	ldr	r3, [pc, #296]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f023 020f 	bic.w	r2, r3, #15
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	4947      	ldr	r1, [pc, #284]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d055      	beq.n	800535e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80052b2:	4b43      	ldr	r3, [pc, #268]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	4940      	ldr	r1, [pc, #256]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d107      	bne.n	80052dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052cc:	4b3c      	ldr	r3, [pc, #240]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d121      	bne.n	800531c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0f6      	b.n	80054ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b03      	cmp	r3, #3
 80052e2:	d107      	bne.n	80052f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052e4:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d115      	bne.n	800531c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e0ea      	b.n	80054ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d107      	bne.n	800530c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80052fc:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005304:	2b00      	cmp	r3, #0
 8005306:	d109      	bne.n	800531c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e0de      	b.n	80054ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800530c:	4b2c      	ldr	r3, [pc, #176]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0d6      	b.n	80054ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800531c:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f023 0207 	bic.w	r2, r3, #7
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4925      	ldr	r1, [pc, #148]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 800532a:	4313      	orrs	r3, r2
 800532c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800532e:	f7fd f863 	bl	80023f8 <HAL_GetTick>
 8005332:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005334:	e00a      	b.n	800534c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005336:	f7fd f85f 	bl	80023f8 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	f241 3288 	movw	r2, #5000	; 0x1388
 8005344:	4293      	cmp	r3, r2
 8005346:	d901      	bls.n	800534c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e0be      	b.n	80054ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800534c:	4b1c      	ldr	r3, [pc, #112]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	429a      	cmp	r2, r3
 800535c:	d1eb      	bne.n	8005336 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d010      	beq.n	800538c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	4b14      	ldr	r3, [pc, #80]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	429a      	cmp	r2, r3
 8005378:	d208      	bcs.n	800538c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800537a:	4b11      	ldr	r3, [pc, #68]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f023 020f 	bic.w	r2, r3, #15
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	490e      	ldr	r1, [pc, #56]	; (80053c0 <HAL_RCC_ClockConfig+0x244>)
 8005388:	4313      	orrs	r3, r2
 800538a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCC_ClockConfig+0x240>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d214      	bcs.n	80053c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <HAL_RCC_ClockConfig+0x240>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 020f 	bic.w	r2, r3, #15
 80053a2:	4906      	ldr	r1, [pc, #24]	; (80053bc <HAL_RCC_ClockConfig+0x240>)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053aa:	4b04      	ldr	r3, [pc, #16]	; (80053bc <HAL_RCC_ClockConfig+0x240>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d005      	beq.n	80053c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e086      	b.n	80054ca <HAL_RCC_ClockConfig+0x34e>
 80053bc:	52002000 	.word	0x52002000
 80053c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d010      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	4b3f      	ldr	r3, [pc, #252]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80053dc:	429a      	cmp	r2, r3
 80053de:	d208      	bcs.n	80053f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80053e0:	4b3c      	ldr	r3, [pc, #240]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	4939      	ldr	r1, [pc, #228]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d010      	beq.n	8005420 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	4b34      	ldr	r3, [pc, #208]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800540a:	429a      	cmp	r2, r3
 800540c:	d208      	bcs.n	8005420 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800540e:	4b31      	ldr	r3, [pc, #196]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	492e      	ldr	r1, [pc, #184]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 800541c:	4313      	orrs	r3, r2
 800541e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b00      	cmp	r3, #0
 800542a:	d010      	beq.n	800544e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699a      	ldr	r2, [r3, #24]
 8005430:	4b28      	ldr	r3, [pc, #160]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005438:	429a      	cmp	r2, r3
 800543a:	d208      	bcs.n	800544e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 800543e:	69db      	ldr	r3, [r3, #28]
 8005440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	4922      	ldr	r1, [pc, #136]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 800544a:	4313      	orrs	r3, r2
 800544c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b00      	cmp	r3, #0
 8005458:	d010      	beq.n	800547c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	4b1d      	ldr	r3, [pc, #116]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005466:	429a      	cmp	r2, r3
 8005468:	d208      	bcs.n	800547c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800546a:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4917      	ldr	r1, [pc, #92]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 8005478:	4313      	orrs	r3, r2
 800547a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800547c:	f000 f834 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 8005480:	4602      	mov	r2, r0
 8005482:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	0a1b      	lsrs	r3, r3, #8
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	4912      	ldr	r1, [pc, #72]	; (80054d8 <HAL_RCC_ClockConfig+0x35c>)
 800548e:	5ccb      	ldrb	r3, [r1, r3]
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	fa22 f303 	lsr.w	r3, r2, r3
 8005498:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800549a:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <HAL_RCC_ClockConfig+0x358>)
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	4a0d      	ldr	r2, [pc, #52]	; (80054d8 <HAL_RCC_ClockConfig+0x35c>)
 80054a4:	5cd3      	ldrb	r3, [r2, r3]
 80054a6:	f003 031f 	and.w	r3, r3, #31
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
 80054b0:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <HAL_RCC_ClockConfig+0x360>)
 80054b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80054b4:	4a0a      	ldr	r2, [pc, #40]	; (80054e0 <HAL_RCC_ClockConfig+0x364>)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80054ba:	4b0a      	ldr	r3, [pc, #40]	; (80054e4 <HAL_RCC_ClockConfig+0x368>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fc ff50 	bl	8002364 <HAL_InitTick>
 80054c4:	4603      	mov	r3, r0
 80054c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80054c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	58024400 	.word	0x58024400
 80054d8:	0800e178 	.word	0x0800e178
 80054dc:	24000004 	.word	0x24000004
 80054e0:	24000000 	.word	0x24000000
 80054e4:	24000008 	.word	0x24000008

080054e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054ee:	4bb3      	ldr	r3, [pc, #716]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054f6:	2b18      	cmp	r3, #24
 80054f8:	f200 8155 	bhi.w	80057a6 <HAL_RCC_GetSysClockFreq+0x2be>
 80054fc:	a201      	add	r2, pc, #4	; (adr r2, 8005504 <HAL_RCC_GetSysClockFreq+0x1c>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005569 	.word	0x08005569
 8005508:	080057a7 	.word	0x080057a7
 800550c:	080057a7 	.word	0x080057a7
 8005510:	080057a7 	.word	0x080057a7
 8005514:	080057a7 	.word	0x080057a7
 8005518:	080057a7 	.word	0x080057a7
 800551c:	080057a7 	.word	0x080057a7
 8005520:	080057a7 	.word	0x080057a7
 8005524:	0800558f 	.word	0x0800558f
 8005528:	080057a7 	.word	0x080057a7
 800552c:	080057a7 	.word	0x080057a7
 8005530:	080057a7 	.word	0x080057a7
 8005534:	080057a7 	.word	0x080057a7
 8005538:	080057a7 	.word	0x080057a7
 800553c:	080057a7 	.word	0x080057a7
 8005540:	080057a7 	.word	0x080057a7
 8005544:	08005595 	.word	0x08005595
 8005548:	080057a7 	.word	0x080057a7
 800554c:	080057a7 	.word	0x080057a7
 8005550:	080057a7 	.word	0x080057a7
 8005554:	080057a7 	.word	0x080057a7
 8005558:	080057a7 	.word	0x080057a7
 800555c:	080057a7 	.word	0x080057a7
 8005560:	080057a7 	.word	0x080057a7
 8005564:	0800559b 	.word	0x0800559b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005568:	4b94      	ldr	r3, [pc, #592]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d009      	beq.n	8005588 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005574:	4b91      	ldr	r3, [pc, #580]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	08db      	lsrs	r3, r3, #3
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	4a90      	ldr	r2, [pc, #576]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005580:	fa22 f303 	lsr.w	r3, r2, r3
 8005584:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005586:	e111      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005588:	4b8d      	ldr	r3, [pc, #564]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800558a:	61bb      	str	r3, [r7, #24]
      break;
 800558c:	e10e      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800558e:	4b8d      	ldr	r3, [pc, #564]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005590:	61bb      	str	r3, [r7, #24]
      break;
 8005592:	e10b      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005594:	4b8c      	ldr	r3, [pc, #560]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005596:	61bb      	str	r3, [r7, #24]
      break;
 8005598:	e108      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800559a:	4b88      	ldr	r3, [pc, #544]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800559c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800559e:	f003 0303 	and.w	r3, r3, #3
 80055a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80055a4:	4b85      	ldr	r3, [pc, #532]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80055b0:	4b82      	ldr	r3, [pc, #520]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80055ba:	4b80      	ldr	r3, [pc, #512]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055be:	08db      	lsrs	r3, r3, #3
 80055c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	fb02 f303 	mul.w	r3, r2, r3
 80055ca:	ee07 3a90 	vmov	s15, r3
 80055ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80e1 	beq.w	80057a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	f000 8083 	beq.w	80056ec <HAL_RCC_GetSysClockFreq+0x204>
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	2b02      	cmp	r3, #2
 80055ea:	f200 80a1 	bhi.w	8005730 <HAL_RCC_GetSysClockFreq+0x248>
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <HAL_RCC_GetSysClockFreq+0x114>
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d056      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80055fa:	e099      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055fc:	4b6f      	ldr	r3, [pc, #444]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d02d      	beq.n	8005664 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005608:	4b6c      	ldr	r3, [pc, #432]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	08db      	lsrs	r3, r3, #3
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	4a6b      	ldr	r2, [pc, #428]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
 8005618:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	ee07 3a90 	vmov	s15, r3
 8005620:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005632:	4b62      	ldr	r3, [pc, #392]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800563a:	ee07 3a90 	vmov	s15, r3
 800563e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005642:	ed97 6a02 	vldr	s12, [r7, #8]
 8005646:	eddf 5a61 	vldr	s11, [pc, #388]	; 80057cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800564a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005652:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800565a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005662:	e087      	b.n	8005774 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	ee07 3a90 	vmov	s15, r3
 800566a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80057d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005676:	4b51      	ldr	r3, [pc, #324]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567e:	ee07 3a90 	vmov	s15, r3
 8005682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005686:	ed97 6a02 	vldr	s12, [r7, #8]
 800568a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80057cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800568e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800569a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056a6:	e065      	b.n	8005774 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	ee07 3a90 	vmov	s15, r3
 80056ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80057d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80056b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056ba:	4b40      	ldr	r3, [pc, #256]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c2:	ee07 3a90 	vmov	s15, r3
 80056c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ce:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80057cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80056d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80056ea:	e043      	b.n	8005774 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	ee07 3a90 	vmov	s15, r3
 80056f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f6:	eddf 6a38 	vldr	s13, [pc, #224]	; 80057d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80056fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fe:	4b2f      	ldr	r3, [pc, #188]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005712:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80057cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800572e:	e021      	b.n	8005774 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80057d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800573e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005742:	4b1e      	ldr	r3, [pc, #120]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005752:	ed97 6a02 	vldr	s12, [r7, #8]
 8005756:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80057cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800575a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005772:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005774:	4b11      	ldr	r3, [pc, #68]	; (80057bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005778:	0a5b      	lsrs	r3, r3, #9
 800577a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577e:	3301      	adds	r3, #1
 8005780:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800578c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005798:	ee17 3a90 	vmov	r3, s15
 800579c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800579e:	e005      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61bb      	str	r3, [r7, #24]
      break;
 80057a4:	e002      	b.n	80057ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80057a6:	4b07      	ldr	r3, [pc, #28]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057a8:	61bb      	str	r3, [r7, #24]
      break;
 80057aa:	bf00      	nop
  }

  return sysclockfreq;
 80057ac:	69bb      	ldr	r3, [r7, #24]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3724      	adds	r7, #36	; 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	58024400 	.word	0x58024400
 80057c0:	03d09000 	.word	0x03d09000
 80057c4:	003d0900 	.word	0x003d0900
 80057c8:	017d7840 	.word	0x017d7840
 80057cc:	46000000 	.word	0x46000000
 80057d0:	4c742400 	.word	0x4c742400
 80057d4:	4a742400 	.word	0x4a742400
 80057d8:	4bbebc20 	.word	0x4bbebc20

080057dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80057e2:	f7ff fe81 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 80057e6:	4602      	mov	r2, r0
 80057e8:	4b10      	ldr	r3, [pc, #64]	; (800582c <HAL_RCC_GetHCLKFreq+0x50>)
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	490f      	ldr	r1, [pc, #60]	; (8005830 <HAL_RCC_GetHCLKFreq+0x54>)
 80057f4:	5ccb      	ldrb	r3, [r1, r3]
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	fa22 f303 	lsr.w	r3, r2, r3
 80057fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005800:	4b0a      	ldr	r3, [pc, #40]	; (800582c <HAL_RCC_GetHCLKFreq+0x50>)
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	4a09      	ldr	r2, [pc, #36]	; (8005830 <HAL_RCC_GetHCLKFreq+0x54>)
 800580a:	5cd3      	ldrb	r3, [r2, r3]
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	fa22 f303 	lsr.w	r3, r2, r3
 8005816:	4a07      	ldr	r2, [pc, #28]	; (8005834 <HAL_RCC_GetHCLKFreq+0x58>)
 8005818:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800581a:	4a07      	ldr	r2, [pc, #28]	; (8005838 <HAL_RCC_GetHCLKFreq+0x5c>)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005820:	4b04      	ldr	r3, [pc, #16]	; (8005834 <HAL_RCC_GetHCLKFreq+0x58>)
 8005822:	681b      	ldr	r3, [r3, #0]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	58024400 	.word	0x58024400
 8005830:	0800e178 	.word	0x0800e178
 8005834:	24000004 	.word	0x24000004
 8005838:	24000000 	.word	0x24000000

0800583c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005840:	f7ff ffcc 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 8005844:	4602      	mov	r2, r0
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	091b      	lsrs	r3, r3, #4
 800584c:	f003 0307 	and.w	r3, r3, #7
 8005850:	4904      	ldr	r1, [pc, #16]	; (8005864 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005852:	5ccb      	ldrb	r3, [r1, r3]
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800585c:	4618      	mov	r0, r3
 800585e:	bd80      	pop	{r7, pc}
 8005860:	58024400 	.word	0x58024400
 8005864:	0800e178 	.word	0x0800e178

08005868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800586c:	f7ff ffb6 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 8005870:	4602      	mov	r2, r0
 8005872:	4b06      	ldr	r3, [pc, #24]	; (800588c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	0a1b      	lsrs	r3, r3, #8
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	4904      	ldr	r1, [pc, #16]	; (8005890 <HAL_RCC_GetPCLK2Freq+0x28>)
 800587e:	5ccb      	ldrb	r3, [r1, r3]
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005888:	4618      	mov	r0, r3
 800588a:	bd80      	pop	{r7, pc}
 800588c:	58024400 	.word	0x58024400
 8005890:	0800e178 	.word	0x0800e178

08005894 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005898:	b0c6      	sub	sp, #280	; 0x118
 800589a:	af00      	add	r7, sp, #0
 800589c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058a0:	2300      	movs	r3, #0
 80058a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058a6:	2300      	movs	r3, #0
 80058a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80058b8:	2500      	movs	r5, #0
 80058ba:	ea54 0305 	orrs.w	r3, r4, r5
 80058be:	d049      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80058c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058ca:	d02f      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80058cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80058d0:	d828      	bhi.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058d6:	d01a      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80058d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058dc:	d822      	bhi.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d003      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80058e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e6:	d007      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80058e8:	e01c      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ea:	4bab      	ldr	r3, [pc, #684]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	4aaa      	ldr	r2, [pc, #680]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80058f6:	e01a      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80058f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fc:	3308      	adds	r3, #8
 80058fe:	2102      	movs	r1, #2
 8005900:	4618      	mov	r0, r3
 8005902:	f002 fa49 	bl	8007d98 <RCCEx_PLL2_Config>
 8005906:	4603      	mov	r3, r0
 8005908:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800590c:	e00f      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800590e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005912:	3328      	adds	r3, #40	; 0x28
 8005914:	2102      	movs	r1, #2
 8005916:	4618      	mov	r0, r3
 8005918:	f002 faf0 	bl	8007efc <RCCEx_PLL3_Config>
 800591c:	4603      	mov	r3, r0
 800591e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005922:	e004      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800592a:	e000      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800592c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800592e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10a      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005936:	4b98      	ldr	r3, [pc, #608]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800593e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005944:	4a94      	ldr	r2, [pc, #592]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005946:	430b      	orrs	r3, r1
 8005948:	6513      	str	r3, [r2, #80]	; 0x50
 800594a:	e003      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005950:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005960:	f04f 0900 	mov.w	r9, #0
 8005964:	ea58 0309 	orrs.w	r3, r8, r9
 8005968:	d047      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800596e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005970:	2b04      	cmp	r3, #4
 8005972:	d82a      	bhi.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005974:	a201      	add	r2, pc, #4	; (adr r2, 800597c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	08005991 	.word	0x08005991
 8005980:	0800599f 	.word	0x0800599f
 8005984:	080059b5 	.word	0x080059b5
 8005988:	080059d3 	.word	0x080059d3
 800598c:	080059d3 	.word	0x080059d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005990:	4b81      	ldr	r3, [pc, #516]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	4a80      	ldr	r2, [pc, #512]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800599a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800599c:	e01a      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800599e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059a2:	3308      	adds	r3, #8
 80059a4:	2100      	movs	r1, #0
 80059a6:	4618      	mov	r0, r3
 80059a8:	f002 f9f6 	bl	8007d98 <RCCEx_PLL2_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059b2:	e00f      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b8:	3328      	adds	r3, #40	; 0x28
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f002 fa9d 	bl	8007efc <RCCEx_PLL3_Config>
 80059c2:	4603      	mov	r3, r0
 80059c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059c8:	e004      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80059d0:	e000      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80059d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059dc:	4b6e      	ldr	r3, [pc, #440]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e0:	f023 0107 	bic.w	r1, r3, #7
 80059e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ea:	4a6b      	ldr	r2, [pc, #428]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059ec:	430b      	orrs	r3, r1
 80059ee:	6513      	str	r3, [r2, #80]	; 0x50
 80059f0:	e003      	b.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059f6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80059fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a02:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005a06:	f04f 0b00 	mov.w	fp, #0
 8005a0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a0e:	d05b      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005a10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a18:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005a1c:	d03b      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005a1e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005a22:	d834      	bhi.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a28:	d037      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005a2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005a2e:	d82e      	bhi.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a34:	d033      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005a36:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005a3a:	d828      	bhi.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a40:	d01a      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005a42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a46:	d822      	bhi.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d003      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a50:	d007      	beq.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005a52:	e01c      	b.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a54:	4b50      	ldr	r3, [pc, #320]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a58:	4a4f      	ldr	r2, [pc, #316]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a60:	e01e      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a66:	3308      	adds	r3, #8
 8005a68:	2100      	movs	r1, #0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f002 f994 	bl	8007d98 <RCCEx_PLL2_Config>
 8005a70:	4603      	mov	r3, r0
 8005a72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a76:	e013      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a7c:	3328      	adds	r3, #40	; 0x28
 8005a7e:	2100      	movs	r1, #0
 8005a80:	4618      	mov	r0, r3
 8005a82:	f002 fa3b 	bl	8007efc <RCCEx_PLL3_Config>
 8005a86:	4603      	mov	r3, r0
 8005a88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005a94:	e004      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005a96:	bf00      	nop
 8005a98:	e002      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005a9a:	bf00      	nop
 8005a9c:	e000      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10b      	bne.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005aa8:	4b3b      	ldr	r3, [pc, #236]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aac:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ab4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ab8:	4a37      	ldr	r2, [pc, #220]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005aba:	430b      	orrs	r3, r1
 8005abc:	6593      	str	r3, [r2, #88]	; 0x58
 8005abe:	e003      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ac4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005ad4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ad8:	2300      	movs	r3, #0
 8005ada:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ade:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	d05d      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005aec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005af0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005af4:	d03b      	beq.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005af6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005afa:	d834      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005afc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b00:	d037      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005b02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b06:	d82e      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b0c:	d033      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005b0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b12:	d828      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b18:	d01a      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b1e:	d822      	bhi.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b28:	d007      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005b2a:	e01c      	b.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b2c:	4b1a      	ldr	r3, [pc, #104]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	4a19      	ldr	r2, [pc, #100]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b38:	e01e      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3e:	3308      	adds	r3, #8
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f002 f928 	bl	8007d98 <RCCEx_PLL2_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005b4e:	e013      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b54:	3328      	adds	r3, #40	; 0x28
 8005b56:	2100      	movs	r1, #0
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f002 f9cf 	bl	8007efc <RCCEx_PLL3_Config>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005b64:	e008      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b6c:	e004      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005b6e:	bf00      	nop
 8005b70:	e002      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005b72:	bf00      	nop
 8005b74:	e000      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005b76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10d      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005b80:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b84:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b90:	4a01      	ldr	r2, [pc, #4]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005b92:	430b      	orrs	r3, r1
 8005b94:	6593      	str	r3, [r2, #88]	; 0x58
 8005b96:	e005      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005b98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ba0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005bb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005bba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	d03a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bca:	2b30      	cmp	r3, #48	; 0x30
 8005bcc:	d01f      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005bce:	2b30      	cmp	r3, #48	; 0x30
 8005bd0:	d819      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005bd2:	2b20      	cmp	r3, #32
 8005bd4:	d00c      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d815      	bhi.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d019      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005bde:	2b10      	cmp	r3, #16
 8005be0:	d111      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be2:	4baa      	ldr	r3, [pc, #680]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	4aa9      	ldr	r2, [pc, #676]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005bee:	e011      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f002 f8cd 	bl	8007d98 <RCCEx_PLL2_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005c04:	e006      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c0c:	e002      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c1c:	4b9b      	ldr	r3, [pc, #620]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c20:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c2a:	4a98      	ldr	r2, [pc, #608]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c36:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c50:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005c54:	460b      	mov	r3, r1
 8005c56:	4313      	orrs	r3, r2
 8005c58:	d051      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c64:	d035      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005c66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c6a:	d82e      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005c6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c70:	d031      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005c72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c76:	d828      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7c:	d01a      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c82:	d822      	bhi.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8c:	d007      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005c8e:	e01c      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c90:	4b7e      	ldr	r3, [pc, #504]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c94:	4a7d      	ldr	r2, [pc, #500]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c9c:	e01c      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ca2:	3308      	adds	r3, #8
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f002 f876 	bl	8007d98 <RCCEx_PLL2_Config>
 8005cac:	4603      	mov	r3, r0
 8005cae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cb2:	e011      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cb8:	3328      	adds	r3, #40	; 0x28
 8005cba:	2100      	movs	r1, #0
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f002 f91d 	bl	8007efc <RCCEx_PLL3_Config>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005cc8:	e006      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005cd0:	e002      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005cd2:	bf00      	nop
 8005cd4:	e000      	b.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005cd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005ce0:	4b6a      	ldr	r3, [pc, #424]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ce4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005ce8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cee:	4a67      	ldr	r2, [pc, #412]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cf0:	430b      	orrs	r3, r1
 8005cf2:	6513      	str	r3, [r2, #80]	; 0x50
 8005cf4:	e003      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cfa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005d0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d14:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	d053      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d28:	d033      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005d2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d2e:	d82c      	bhi.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d34:	d02f      	beq.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005d36:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d3a:	d826      	bhi.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d3c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d40:	d02b      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005d42:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005d46:	d820      	bhi.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d4c:	d012      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005d4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d52:	d81a      	bhi.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d022      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5c:	d115      	bne.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d62:	3308      	adds	r3, #8
 8005d64:	2101      	movs	r1, #1
 8005d66:	4618      	mov	r0, r3
 8005d68:	f002 f816 	bl	8007d98 <RCCEx_PLL2_Config>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d72:	e015      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d78:	3328      	adds	r3, #40	; 0x28
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f002 f8bd 	bl	8007efc <RCCEx_PLL3_Config>
 8005d82:	4603      	mov	r3, r0
 8005d84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005d88:	e00a      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d90:	e006      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005d92:	bf00      	nop
 8005d94:	e004      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005d96:	bf00      	nop
 8005d98:	e002      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005d9a:	bf00      	nop
 8005d9c:	e000      	b.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005da0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005da8:	4b38      	ldr	r3, [pc, #224]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dac:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005db6:	4a35      	ldr	r2, [pc, #212]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005db8:	430b      	orrs	r3, r1
 8005dba:	6513      	str	r3, [r2, #80]	; 0x50
 8005dbc:	e003      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005dc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005ddc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005de0:	460b      	mov	r3, r1
 8005de2:	4313      	orrs	r3, r2
 8005de4:	d058      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005dee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005df2:	d033      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005df8:	d82c      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005dfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfe:	d02f      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d826      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e0a:	d02b      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005e0c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e10:	d820      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e16:	d012      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e1c:	d81a      	bhi.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d022      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e26:	d115      	bne.n	8005e54 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 ffb1 	bl	8007d98 <RCCEx_PLL2_Config>
 8005e36:	4603      	mov	r3, r0
 8005e38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e3c:	e015      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e42:	3328      	adds	r3, #40	; 0x28
 8005e44:	2101      	movs	r1, #1
 8005e46:	4618      	mov	r0, r3
 8005e48:	f002 f858 	bl	8007efc <RCCEx_PLL3_Config>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005e52:	e00a      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005e5a:	e006      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e5c:	bf00      	nop
 8005e5e:	e004      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e60:	bf00      	nop
 8005e62:	e002      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e64:	bf00      	nop
 8005e66:	e000      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10e      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e76:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005e82:	4a02      	ldr	r2, [pc, #8]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005e84:	430b      	orrs	r3, r1
 8005e86:	6593      	str	r3, [r2, #88]	; 0x58
 8005e88:	e006      	b.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005e8a:	bf00      	nop
 8005e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005ea4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005eae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	d037      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005eb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec2:	d00e      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ec8:	d816      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d018      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ed2:	d111      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed4:	4bc4      	ldr	r3, [pc, #784]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4ac3      	ldr	r2, [pc, #780]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ede:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ee0:	e00f      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	2101      	movs	r1, #1
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 ff54 	bl	8007d98 <RCCEx_PLL2_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ef6:	e004      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005efe:	e000      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10a      	bne.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005f0a:	4bb7      	ldr	r3, [pc, #732]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f18:	4ab3      	ldr	r2, [pc, #716]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	6513      	str	r3, [r2, #80]	; 0x50
 8005f1e:	e003      	b.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f24:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005f28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f30:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005f34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f42:	460b      	mov	r3, r1
 8005f44:	4313      	orrs	r3, r2
 8005f46:	d039      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005f48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4e:	2b03      	cmp	r3, #3
 8005f50:	d81c      	bhi.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005f52:	a201      	add	r2, pc, #4	; (adr r2, 8005f58 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f95 	.word	0x08005f95
 8005f5c:	08005f69 	.word	0x08005f69
 8005f60:	08005f77 	.word	0x08005f77
 8005f64:	08005f95 	.word	0x08005f95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f68:	4b9f      	ldr	r3, [pc, #636]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6c:	4a9e      	ldr	r2, [pc, #632]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f74:	e00f      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	2102      	movs	r1, #2
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f001 ff0a 	bl	8007d98 <RCCEx_PLL2_Config>
 8005f84:	4603      	mov	r3, r0
 8005f86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005f8a:	e004      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f92:	e000      	b.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005f94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d10a      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005f9e:	4b92      	ldr	r3, [pc, #584]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa2:	f023 0103 	bic.w	r1, r3, #3
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fac:	4a8e      	ldr	r2, [pc, #568]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005fb2:	e003      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fd2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f000 8099 	beq.w	8006110 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fde:	4b83      	ldr	r3, [pc, #524]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a82      	ldr	r2, [pc, #520]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fe8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005fea:	f7fc fa05 	bl	80023f8 <HAL_GetTick>
 8005fee:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ff2:	e00b      	b.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ff4:	f7fc fa00 	bl	80023f8 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	2b64      	cmp	r3, #100	; 0x64
 8006002:	d903      	bls.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800600a:	e005      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800600c:	4b77      	ldr	r3, [pc, #476]	; (80061ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006014:	2b00      	cmp	r3, #0
 8006016:	d0ed      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006018:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800601c:	2b00      	cmp	r3, #0
 800601e:	d173      	bne.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006020:	4b71      	ldr	r3, [pc, #452]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006022:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800602c:	4053      	eors	r3, r2
 800602e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006032:	2b00      	cmp	r3, #0
 8006034:	d015      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006036:	4b6c      	ldr	r3, [pc, #432]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006042:	4b69      	ldr	r3, [pc, #420]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006046:	4a68      	ldr	r2, [pc, #416]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800604c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800604e:	4b66      	ldr	r3, [pc, #408]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	4a65      	ldr	r2, [pc, #404]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006058:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800605a:	4a63      	ldr	r2, [pc, #396]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800605c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006060:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006062:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800606a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800606e:	d118      	bne.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fc f9c2 	bl	80023f8 <HAL_GetTick>
 8006074:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006078:	e00d      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607a:	f7fc f9bd 	bl	80023f8 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006084:	1ad2      	subs	r2, r2, r3
 8006086:	f241 3388 	movw	r3, #5000	; 0x1388
 800608a:	429a      	cmp	r2, r3
 800608c:	d903      	bls.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8006094:	e005      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006096:	4b54      	ldr	r3, [pc, #336]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0eb      	beq.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 80060a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d129      	bne.n	80060fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060ba:	d10e      	bne.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x846>
 80060bc:	4b4a      	ldr	r3, [pc, #296]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80060c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060cc:	091a      	lsrs	r2, r3, #4
 80060ce:	4b48      	ldr	r3, [pc, #288]	; (80061f0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80060d0:	4013      	ands	r3, r2
 80060d2:	4a45      	ldr	r2, [pc, #276]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060d4:	430b      	orrs	r3, r1
 80060d6:	6113      	str	r3, [r2, #16]
 80060d8:	e005      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80060da:	4b43      	ldr	r3, [pc, #268]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	4a42      	ldr	r2, [pc, #264]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060e0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80060e4:	6113      	str	r3, [r2, #16]
 80060e6:	4b40      	ldr	r3, [pc, #256]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060e8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80060ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060f6:	4a3c      	ldr	r2, [pc, #240]	; (80061e8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80060f8:	430b      	orrs	r3, r1
 80060fa:	6713      	str	r3, [r2, #112]	; 0x70
 80060fc:	e008      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006102:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8006106:	e003      	b.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006108:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800610c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006118:	f002 0301 	and.w	r3, r2, #1
 800611c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006120:	2300      	movs	r3, #0
 8006122:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006126:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800612a:	460b      	mov	r3, r1
 800612c:	4313      	orrs	r3, r2
 800612e:	f000 808f 	beq.w	8006250 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006138:	2b28      	cmp	r3, #40	; 0x28
 800613a:	d871      	bhi.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006229 	.word	0x08006229
 8006148:	08006221 	.word	0x08006221
 800614c:	08006221 	.word	0x08006221
 8006150:	08006221 	.word	0x08006221
 8006154:	08006221 	.word	0x08006221
 8006158:	08006221 	.word	0x08006221
 800615c:	08006221 	.word	0x08006221
 8006160:	08006221 	.word	0x08006221
 8006164:	080061f5 	.word	0x080061f5
 8006168:	08006221 	.word	0x08006221
 800616c:	08006221 	.word	0x08006221
 8006170:	08006221 	.word	0x08006221
 8006174:	08006221 	.word	0x08006221
 8006178:	08006221 	.word	0x08006221
 800617c:	08006221 	.word	0x08006221
 8006180:	08006221 	.word	0x08006221
 8006184:	0800620b 	.word	0x0800620b
 8006188:	08006221 	.word	0x08006221
 800618c:	08006221 	.word	0x08006221
 8006190:	08006221 	.word	0x08006221
 8006194:	08006221 	.word	0x08006221
 8006198:	08006221 	.word	0x08006221
 800619c:	08006221 	.word	0x08006221
 80061a0:	08006221 	.word	0x08006221
 80061a4:	08006229 	.word	0x08006229
 80061a8:	08006221 	.word	0x08006221
 80061ac:	08006221 	.word	0x08006221
 80061b0:	08006221 	.word	0x08006221
 80061b4:	08006221 	.word	0x08006221
 80061b8:	08006221 	.word	0x08006221
 80061bc:	08006221 	.word	0x08006221
 80061c0:	08006221 	.word	0x08006221
 80061c4:	08006229 	.word	0x08006229
 80061c8:	08006221 	.word	0x08006221
 80061cc:	08006221 	.word	0x08006221
 80061d0:	08006221 	.word	0x08006221
 80061d4:	08006221 	.word	0x08006221
 80061d8:	08006221 	.word	0x08006221
 80061dc:	08006221 	.word	0x08006221
 80061e0:	08006221 	.word	0x08006221
 80061e4:	08006229 	.word	0x08006229
 80061e8:	58024400 	.word	0x58024400
 80061ec:	58024800 	.word	0x58024800
 80061f0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f8:	3308      	adds	r3, #8
 80061fa:	2101      	movs	r1, #1
 80061fc:	4618      	mov	r0, r3
 80061fe:	f001 fdcb 	bl	8007d98 <RCCEx_PLL2_Config>
 8006202:	4603      	mov	r3, r0
 8006204:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006208:	e00f      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800620a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620e:	3328      	adds	r3, #40	; 0x28
 8006210:	2101      	movs	r1, #1
 8006212:	4618      	mov	r0, r3
 8006214:	f001 fe72 	bl	8007efc <RCCEx_PLL3_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800621e:	e004      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006226:	e000      	b.n	800622a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006228:	bf00      	nop
    }

    if (ret == HAL_OK)
 800622a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006232:	4bbf      	ldr	r3, [pc, #764]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800623a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800623e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006240:	4abb      	ldr	r2, [pc, #748]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006242:	430b      	orrs	r3, r1
 8006244:	6553      	str	r3, [r2, #84]	; 0x54
 8006246:	e003      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006248:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800624c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006258:	f002 0302 	and.w	r3, r2, #2
 800625c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006260:	2300      	movs	r3, #0
 8006262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006266:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800626a:	460b      	mov	r3, r1
 800626c:	4313      	orrs	r3, r2
 800626e:	d041      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006274:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006276:	2b05      	cmp	r3, #5
 8006278:	d824      	bhi.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	080062cd 	.word	0x080062cd
 8006284:	08006299 	.word	0x08006299
 8006288:	080062af 	.word	0x080062af
 800628c:	080062cd 	.word	0x080062cd
 8006290:	080062cd 	.word	0x080062cd
 8006294:	080062cd 	.word	0x080062cd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800629c:	3308      	adds	r3, #8
 800629e:	2101      	movs	r1, #1
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 fd79 	bl	8007d98 <RCCEx_PLL2_Config>
 80062a6:	4603      	mov	r3, r0
 80062a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80062ac:	e00f      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b2:	3328      	adds	r3, #40	; 0x28
 80062b4:	2101      	movs	r1, #1
 80062b6:	4618      	mov	r0, r3
 80062b8:	f001 fe20 	bl	8007efc <RCCEx_PLL3_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80062c2:	e004      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80062ca:	e000      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 80062cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10a      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80062d6:	4b96      	ldr	r3, [pc, #600]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062da:	f023 0107 	bic.w	r1, r3, #7
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e4:	4a92      	ldr	r2, [pc, #584]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062e6:	430b      	orrs	r3, r1
 80062e8:	6553      	str	r3, [r2, #84]	; 0x54
 80062ea:	e003      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	f002 0304 	and.w	r3, r2, #4
 8006300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006304:	2300      	movs	r3, #0
 8006306:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800630a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800630e:	460b      	mov	r3, r1
 8006310:	4313      	orrs	r3, r2
 8006312:	d044      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006314:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631c:	2b05      	cmp	r3, #5
 800631e:	d825      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006320:	a201      	add	r2, pc, #4	; (adr r2, 8006328 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006326:	bf00      	nop
 8006328:	08006375 	.word	0x08006375
 800632c:	08006341 	.word	0x08006341
 8006330:	08006357 	.word	0x08006357
 8006334:	08006375 	.word	0x08006375
 8006338:	08006375 	.word	0x08006375
 800633c:	08006375 	.word	0x08006375
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006344:	3308      	adds	r3, #8
 8006346:	2101      	movs	r1, #1
 8006348:	4618      	mov	r0, r3
 800634a:	f001 fd25 	bl	8007d98 <RCCEx_PLL2_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006354:	e00f      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635a:	3328      	adds	r3, #40	; 0x28
 800635c:	2101      	movs	r1, #1
 800635e:	4618      	mov	r0, r3
 8006360:	f001 fdcc 	bl	8007efc <RCCEx_PLL3_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800636a:	e004      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006372:	e000      	b.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006376:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800637a:	2b00      	cmp	r3, #0
 800637c:	d10b      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800637e:	4b6c      	ldr	r3, [pc, #432]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006382:	f023 0107 	bic.w	r1, r3, #7
 8006386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	4a68      	ldr	r2, [pc, #416]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006390:	430b      	orrs	r3, r1
 8006392:	6593      	str	r3, [r2, #88]	; 0x58
 8006394:	e003      	b.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006396:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800639a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800639e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f002 0320 	and.w	r3, r2, #32
 80063aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063ae:	2300      	movs	r3, #0
 80063b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4313      	orrs	r3, r2
 80063bc:	d055      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80063be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063ca:	d033      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80063cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80063d0:	d82c      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80063d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d6:	d02f      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80063d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063dc:	d826      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80063de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063e2:	d02b      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80063e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80063e8:	d820      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80063ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ee:	d012      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80063f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063f4:	d81a      	bhi.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d022      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80063fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063fe:	d115      	bne.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006404:	3308      	adds	r3, #8
 8006406:	2100      	movs	r1, #0
 8006408:	4618      	mov	r0, r3
 800640a:	f001 fcc5 	bl	8007d98 <RCCEx_PLL2_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006414:	e015      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800641a:	3328      	adds	r3, #40	; 0x28
 800641c:	2102      	movs	r1, #2
 800641e:	4618      	mov	r0, r3
 8006420:	f001 fd6c 	bl	8007efc <RCCEx_PLL3_Config>
 8006424:	4603      	mov	r3, r0
 8006426:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800642a:	e00a      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006432:	e006      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006434:	bf00      	nop
 8006436:	e004      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006438:	bf00      	nop
 800643a:	e002      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800643c:	bf00      	nop
 800643e:	e000      	b.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006442:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10b      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800644a:	4b39      	ldr	r3, [pc, #228]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006456:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800645a:	4a35      	ldr	r2, [pc, #212]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800645c:	430b      	orrs	r3, r1
 800645e:	6553      	str	r3, [r2, #84]	; 0x54
 8006460:	e003      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006462:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006466:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800646a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006472:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006476:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800647a:	2300      	movs	r3, #0
 800647c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006480:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006484:	460b      	mov	r3, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	d058      	beq.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006492:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006496:	d033      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006498:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800649c:	d82c      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800649e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a2:	d02f      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a8:	d826      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ae:	d02b      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80064b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064b4:	d820      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ba:	d012      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80064bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064c0:	d81a      	bhi.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d022      	beq.n	800650c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80064c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ca:	d115      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064d0:	3308      	adds	r3, #8
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fc5f 	bl	8007d98 <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064e0:	e015      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e6:	3328      	adds	r3, #40	; 0x28
 80064e8:	2102      	movs	r1, #2
 80064ea:	4618      	mov	r0, r3
 80064ec:	f001 fd06 	bl	8007efc <RCCEx_PLL3_Config>
 80064f0:	4603      	mov	r3, r0
 80064f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80064f6:	e00a      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064fe:	e006      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006500:	bf00      	nop
 8006502:	e004      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006504:	bf00      	nop
 8006506:	e002      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006508:	bf00      	nop
 800650a:	e000      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800650c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800650e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10e      	bne.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006516:	4b06      	ldr	r3, [pc, #24]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006526:	4a02      	ldr	r2, [pc, #8]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006528:	430b      	orrs	r3, r1
 800652a:	6593      	str	r3, [r2, #88]	; 0x58
 800652c:	e006      	b.n	800653c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800652e:	bf00      	nop
 8006530:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006534:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006538:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800653c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006544:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006548:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800654c:	2300      	movs	r3, #0
 800654e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006552:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006556:	460b      	mov	r3, r1
 8006558:	4313      	orrs	r3, r2
 800655a:	d055      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800655c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006560:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006564:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006568:	d033      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800656a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800656e:	d82c      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006574:	d02f      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800657a:	d826      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800657c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006580:	d02b      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006582:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006586:	d820      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006588:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800658c:	d012      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800658e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006592:	d81a      	bhi.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006594:	2b00      	cmp	r3, #0
 8006596:	d022      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006598:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800659c:	d115      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800659e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a2:	3308      	adds	r3, #8
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 fbf6 	bl	8007d98 <RCCEx_PLL2_Config>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80065b2:	e015      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065b8:	3328      	adds	r3, #40	; 0x28
 80065ba:	2102      	movs	r1, #2
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fc9d 	bl	8007efc <RCCEx_PLL3_Config>
 80065c2:	4603      	mov	r3, r0
 80065c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80065c8:	e00a      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065d0:	e006      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80065d2:	bf00      	nop
 80065d4:	e004      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80065d6:	bf00      	nop
 80065d8:	e002      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80065da:	bf00      	nop
 80065dc:	e000      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80065de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80065e8:	4ba0      	ldr	r3, [pc, #640]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ec:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80065f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065f8:	4a9c      	ldr	r2, [pc, #624]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065fa:	430b      	orrs	r3, r1
 80065fc:	6593      	str	r3, [r2, #88]	; 0x58
 80065fe:	e003      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006600:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006604:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f002 0308 	and.w	r3, r2, #8
 8006614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006618:	2300      	movs	r3, #0
 800661a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800661e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006622:	460b      	mov	r3, r1
 8006624:	4313      	orrs	r3, r2
 8006626:	d01e      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800662c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006634:	d10c      	bne.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006636:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800663a:	3328      	adds	r3, #40	; 0x28
 800663c:	2102      	movs	r1, #2
 800663e:	4618      	mov	r0, r3
 8006640:	f001 fc5c 	bl	8007efc <RCCEx_PLL3_Config>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006650:	4b86      	ldr	r3, [pc, #536]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006654:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800665c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006660:	4a82      	ldr	r2, [pc, #520]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006662:	430b      	orrs	r3, r1
 8006664:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f002 0310 	and.w	r3, r2, #16
 8006672:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006676:	2300      	movs	r3, #0
 8006678:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800667c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006680:	460b      	mov	r3, r1
 8006682:	4313      	orrs	r3, r2
 8006684:	d01e      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800668e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006692:	d10c      	bne.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006698:	3328      	adds	r3, #40	; 0x28
 800669a:	2102      	movs	r1, #2
 800669c:	4618      	mov	r0, r3
 800669e:	f001 fc2d 	bl	8007efc <RCCEx_PLL3_Config>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066ae:	4b6f      	ldr	r3, [pc, #444]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066be:	4a6b      	ldr	r2, [pc, #428]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066cc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80066d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80066d2:	2300      	movs	r3, #0
 80066d4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80066d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80066da:	460b      	mov	r3, r1
 80066dc:	4313      	orrs	r3, r2
 80066de:	d03e      	beq.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80066e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ec:	d022      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80066ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066f2:	d81b      	bhi.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80066f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fc:	d00b      	beq.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80066fe:	e015      	b.n	800672c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006704:	3308      	adds	r3, #8
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fb45 	bl	8007d98 <RCCEx_PLL2_Config>
 800670e:	4603      	mov	r3, r0
 8006710:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006714:	e00f      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800671a:	3328      	adds	r3, #40	; 0x28
 800671c:	2102      	movs	r1, #2
 800671e:	4618      	mov	r0, r3
 8006720:	f001 fbec 	bl	8007efc <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800672a:	e004      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006732:	e000      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006734:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006736:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800673e:	4b4b      	ldr	r3, [pc, #300]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006742:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006746:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800674a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800674e:	4a47      	ldr	r2, [pc, #284]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006750:	430b      	orrs	r3, r1
 8006752:	6593      	str	r3, [r2, #88]	; 0x58
 8006754:	e003      	b.n	800675e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006756:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800675a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800675e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006766:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800676a:	673b      	str	r3, [r7, #112]	; 0x70
 800676c:	2300      	movs	r3, #0
 800676e:	677b      	str	r3, [r7, #116]	; 0x74
 8006770:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006774:	460b      	mov	r3, r1
 8006776:	4313      	orrs	r3, r2
 8006778:	d03b      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800677a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800677e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006782:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006786:	d01f      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006788:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800678c:	d818      	bhi.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800678e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006792:	d003      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006794:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006798:	d007      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800679a:	e011      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800679c:	4b33      	ldr	r3, [pc, #204]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	4a32      	ldr	r2, [pc, #200]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80067a8:	e00f      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ae:	3328      	adds	r3, #40	; 0x28
 80067b0:	2101      	movs	r1, #1
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 fba2 	bl	8007efc <RCCEx_PLL3_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80067be:	e004      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80067c6:	e000      	b.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80067c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10b      	bne.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067d2:	4b26      	ldr	r3, [pc, #152]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80067da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e2:	4a22      	ldr	r2, [pc, #136]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80067e4:	430b      	orrs	r3, r1
 80067e6:	6553      	str	r3, [r2, #84]	; 0x54
 80067e8:	e003      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80067fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006800:	2300      	movs	r3, #0
 8006802:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006804:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006808:	460b      	mov	r3, r1
 800680a:	4313      	orrs	r3, r2
 800680c:	d034      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800680e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006814:	2b00      	cmp	r3, #0
 8006816:	d003      	beq.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800681c:	d007      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800681e:	e011      	b.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006820:	4b12      	ldr	r3, [pc, #72]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006824:	4a11      	ldr	r2, [pc, #68]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800682a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800682c:	e00e      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800682e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006832:	3308      	adds	r3, #8
 8006834:	2102      	movs	r1, #2
 8006836:	4618      	mov	r0, r3
 8006838:	f001 faae 	bl	8007d98 <RCCEx_PLL2_Config>
 800683c:	4603      	mov	r3, r0
 800683e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006842:	e003      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800684a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800684c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10d      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006854:	4b05      	ldr	r3, [pc, #20]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006858:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800685c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006862:	4a02      	ldr	r2, [pc, #8]	; (800686c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006864:	430b      	orrs	r3, r1
 8006866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006868:	e006      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800686a:	bf00      	nop
 800686c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006870:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006874:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006884:	663b      	str	r3, [r7, #96]	; 0x60
 8006886:	2300      	movs	r3, #0
 8006888:	667b      	str	r3, [r7, #100]	; 0x64
 800688a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800688e:	460b      	mov	r3, r1
 8006890:	4313      	orrs	r3, r2
 8006892:	d00c      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006898:	3328      	adds	r3, #40	; 0x28
 800689a:	2102      	movs	r1, #2
 800689c:	4618      	mov	r0, r3
 800689e:	f001 fb2d 	bl	8007efc <RCCEx_PLL3_Config>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80068ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80068ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80068bc:	2300      	movs	r3, #0
 80068be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068c0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80068c4:	460b      	mov	r3, r1
 80068c6:	4313      	orrs	r3, r2
 80068c8:	d036      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068d4:	d018      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80068d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068da:	d811      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80068dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e0:	d014      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80068e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068e6:	d80b      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d011      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80068ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068f0:	d106      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068f2:	4bb7      	ldr	r3, [pc, #732]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	4ab6      	ldr	r2, [pc, #728]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80068fe:	e008      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006906:	e004      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006908:	bf00      	nop
 800690a:	e002      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800690c:	bf00      	nop
 800690e:	e000      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006910:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006912:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800691a:	4bad      	ldr	r3, [pc, #692]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800691c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800691e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006922:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006926:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006928:	4aa9      	ldr	r2, [pc, #676]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800692a:	430b      	orrs	r3, r1
 800692c:	6553      	str	r3, [r2, #84]	; 0x54
 800692e:	e003      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006930:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006934:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800693c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006940:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006944:	653b      	str	r3, [r7, #80]	; 0x50
 8006946:	2300      	movs	r3, #0
 8006948:	657b      	str	r3, [r7, #84]	; 0x54
 800694a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800694e:	460b      	mov	r3, r1
 8006950:	4313      	orrs	r3, r2
 8006952:	d009      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006954:	4b9e      	ldr	r3, [pc, #632]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006958:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006962:	4a9b      	ldr	r2, [pc, #620]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006964:	430b      	orrs	r3, r1
 8006966:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006974:	64bb      	str	r3, [r7, #72]	; 0x48
 8006976:	2300      	movs	r3, #0
 8006978:	64fb      	str	r3, [r7, #76]	; 0x4c
 800697a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800697e:	460b      	mov	r3, r1
 8006980:	4313      	orrs	r3, r2
 8006982:	d009      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006984:	4b92      	ldr	r3, [pc, #584]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006988:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006992:	4a8f      	ldr	r2, [pc, #572]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006994:	430b      	orrs	r3, r1
 8006996:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800699c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80069a4:	643b      	str	r3, [r7, #64]	; 0x40
 80069a6:	2300      	movs	r3, #0
 80069a8:	647b      	str	r3, [r7, #68]	; 0x44
 80069aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80069ae:	460b      	mov	r3, r1
 80069b0:	4313      	orrs	r3, r2
 80069b2:	d00e      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069b4:	4b86      	ldr	r3, [pc, #536]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	4a85      	ldr	r2, [pc, #532]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069be:	6113      	str	r3, [r2, #16]
 80069c0:	4b83      	ldr	r3, [pc, #524]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069c2:	6919      	ldr	r1, [r3, #16]
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80069cc:	4a80      	ldr	r2, [pc, #512]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069ce:	430b      	orrs	r3, r1
 80069d0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80069de:	63bb      	str	r3, [r7, #56]	; 0x38
 80069e0:	2300      	movs	r3, #0
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d009      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80069ee:	4b78      	ldr	r3, [pc, #480]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80069f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069fc:	4a74      	ldr	r2, [pc, #464]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80069fe:	430b      	orrs	r3, r1
 8006a00:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006a0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a10:	2300      	movs	r3, #0
 8006a12:	637b      	str	r3, [r7, #52]	; 0x34
 8006a14:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006a18:	460b      	mov	r3, r1
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	d00a      	beq.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006a1e:	4b6c      	ldr	r3, [pc, #432]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a22:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2e:	4a68      	ldr	r2, [pc, #416]	; (8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006a30:	430b      	orrs	r3, r1
 8006a32:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a46:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	d011      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a54:	3308      	adds	r3, #8
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 f99d 	bl	8007d98 <RCCEx_PLL2_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006a64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6239      	str	r1, [r7, #32]
 8006a80:	f003 0302 	and.w	r3, r3, #2
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24
 8006a86:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	d011      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a94:	3308      	adds	r3, #8
 8006a96:	2101      	movs	r1, #1
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 f97d 	bl	8007d98 <RCCEx_PLL2_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006aa4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ab0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006ab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	2100      	movs	r1, #0
 8006abe:	61b9      	str	r1, [r7, #24]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	61fb      	str	r3, [r7, #28]
 8006ac6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006aca:	460b      	mov	r3, r1
 8006acc:	4313      	orrs	r3, r2
 8006ace:	d011      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	2102      	movs	r1, #2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 f95d 	bl	8007d98 <RCCEx_PLL2_Config>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006ae4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006af0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afc:	2100      	movs	r1, #0
 8006afe:	6139      	str	r1, [r7, #16]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	617b      	str	r3, [r7, #20]
 8006b06:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	d011      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b14:	3328      	adds	r3, #40	; 0x28
 8006b16:	2100      	movs	r1, #0
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 f9ef 	bl	8007efc <RCCEx_PLL3_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006b24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d003      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006b34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	60b9      	str	r1, [r7, #8]
 8006b40:	f003 0310 	and.w	r3, r3, #16
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	d011      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006b50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b54:	3328      	adds	r3, #40	; 0x28
 8006b56:	2101      	movs	r1, #1
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 f9cf 	bl	8007efc <RCCEx_PLL3_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006b64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	6039      	str	r1, [r7, #0]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	d011      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b94:	3328      	adds	r3, #40	; 0x28
 8006b96:	2102      	movs	r1, #2
 8006b98:	4618      	mov	r0, r3
 8006b9a:	f001 f9af 	bl	8007efc <RCCEx_PLL3_Config>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006ba4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8006bb4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bce:	bf00      	nop
 8006bd0:	58024400 	.word	0x58024400

08006bd4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b090      	sub	sp, #64	; 0x40
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006bde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006be6:	430b      	orrs	r3, r1
 8006be8:	f040 8094 	bne.w	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8006bec:	4b9b      	ldr	r3, [pc, #620]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	2b04      	cmp	r3, #4
 8006bfa:	f200 8087 	bhi.w	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8006bfe:	a201      	add	r2, pc, #4	; (adr r2, 8006c04 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8006c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c04:	08006c19 	.word	0x08006c19
 8006c08:	08006c41 	.word	0x08006c41
 8006c0c:	08006c69 	.word	0x08006c69
 8006c10:	08006d05 	.word	0x08006d05
 8006c14:	08006c91 	.word	0x08006c91
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006c18:	4b90      	ldr	r3, [pc, #576]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006c24:	d108      	bne.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f000 ff62 	bl	8007af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c34:	f000 bc93 	b.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c3c:	f000 bc8f 	b.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006c40:	4b86      	ldr	r3, [pc, #536]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c4c:	d108      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c4e:	f107 0318 	add.w	r3, r7, #24
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fca6 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c5c:	f000 bc7f 	b.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c60:	2300      	movs	r3, #0
 8006c62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c64:	f000 bc7b 	b.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006c68:	4b7c      	ldr	r3, [pc, #496]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c74:	d108      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006c76:	f107 030c 	add.w	r3, r7, #12
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fde6 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006c84:	f000 bc6b 	b.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006c8c:	f000 bc67 	b.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006c90:	4b72      	ldr	r3, [pc, #456]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006c9a:	4b70      	ldr	r3, [pc, #448]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0304 	and.w	r3, r3, #4
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	d10c      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d109      	bne.n	8006cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006cac:	4b6b      	ldr	r3, [pc, #428]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	08db      	lsrs	r3, r3, #3
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	4a6a      	ldr	r2, [pc, #424]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cbe:	e01f      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006cc0:	4b66      	ldr	r3, [pc, #408]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ccc:	d106      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8006cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cd0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cd4:	d102      	bne.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006cd6:	4b63      	ldr	r3, [pc, #396]	; (8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cda:	e011      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006cdc:	4b5f      	ldr	r3, [pc, #380]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ce8:	d106      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8006cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cf0:	d102      	bne.n	8006cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006cf2:	4b5d      	ldr	r3, [pc, #372]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf6:	e003      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006cfc:	f000 bc2f 	b.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006d00:	f000 bc2d 	b.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006d04:	4b59      	ldr	r3, [pc, #356]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d08:	f000 bc29 	b.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d10:	f000 bc25 	b.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d18:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	f040 80a7 	bne.w	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8006d22:	4b4e      	ldr	r3, [pc, #312]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d26:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006d2a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d32:	d054      	beq.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006d3a:	f200 808b 	bhi.w	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d44:	f000 8083 	beq.w	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006d4e:	f200 8081 	bhi.w	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d58:	d02f      	beq.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8006d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d60:	d878      	bhi.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d004      	beq.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 8006d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d6e:	d012      	beq.n	8006d96 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 8006d70:	e070      	b.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006d72:	4b3a      	ldr	r3, [pc, #232]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d7e:	d107      	bne.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 feb5 	bl	8007af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006d8e:	e3e6      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d94:	e3e3      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006d96:	4b31      	ldr	r3, [pc, #196]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006d9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006da2:	d107      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006da4:	f107 0318 	add.w	r3, r7, #24
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fbfb 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006db2:	e3d4      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006db8:	e3d1      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006dba:	4b28      	ldr	r3, [pc, #160]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006dc2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dc6:	d107      	bne.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dc8:	f107 030c 	add.w	r3, r7, #12
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f000 fd3d 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006dd6:	e3c2      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ddc:	e3bf      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006dde:	4b1f      	ldr	r3, [pc, #124]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006de8:	4b1c      	ldr	r3, [pc, #112]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0304 	and.w	r3, r3, #4
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	d10c      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 8006df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d109      	bne.n	8006e0e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006dfa:	4b18      	ldr	r3, [pc, #96]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	08db      	lsrs	r3, r3, #3
 8006e00:	f003 0303 	and.w	r3, r3, #3
 8006e04:	4a16      	ldr	r2, [pc, #88]	; (8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8006e06:	fa22 f303 	lsr.w	r3, r2, r3
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0c:	e01e      	b.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006e0e:	4b13      	ldr	r3, [pc, #76]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e1a:	d106      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e22:	d102      	bne.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006e24:	4b0f      	ldr	r3, [pc, #60]	; (8006e64 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e28:	e010      	b.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006e2a:	4b0c      	ldr	r3, [pc, #48]	; (8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e36:	d106      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8006e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e3e:	d102      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006e40:	4b09      	ldr	r3, [pc, #36]	; (8006e68 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e44:	e002      	b.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006e4a:	e388      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006e4c:	e387      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006e4e:	4b07      	ldr	r3, [pc, #28]	; (8006e6c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e52:	e384      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006e54:	2300      	movs	r3, #0
 8006e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006e58:	e381      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006e5a:	bf00      	nop
 8006e5c:	58024400 	.word	0x58024400
 8006e60:	03d09000 	.word	0x03d09000
 8006e64:	003d0900 	.word	0x003d0900
 8006e68:	017d7840 	.word	0x017d7840
 8006e6c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006e70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e74:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006e78:	430b      	orrs	r3, r1
 8006e7a:	f040 809c 	bne.w	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8006e7e:	4b9e      	ldr	r3, [pc, #632]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006e86:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e8e:	d054      	beq.n	8006f3a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 8006e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e96:	f200 808b 	bhi.w	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ea0:	f000 8083 	beq.w	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 8006ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006eaa:	f200 8081 	bhi.w	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eb4:	d02f      	beq.n	8006f16 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ebc:	d878      	bhi.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8006ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eca:	d012      	beq.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006ecc:	e070      	b.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006ece:	4b8a      	ldr	r3, [pc, #552]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006eda:	d107      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 fe07 	bl	8007af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006eea:	e338      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006ef0:	e335      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006ef2:	4b81      	ldr	r3, [pc, #516]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006efa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006efe:	d107      	bne.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f00:	f107 0318 	add.w	r3, r7, #24
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fb4d 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f0e:	e326      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f10:	2300      	movs	r3, #0
 8006f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f14:	e323      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006f16:	4b78      	ldr	r3, [pc, #480]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f22:	d107      	bne.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f24:	f107 030c 	add.w	r3, r7, #12
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fc8f 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006f32:	e314      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8006f34:	2300      	movs	r3, #0
 8006f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f38:	e311      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8006f3a:	4b6f      	ldr	r3, [pc, #444]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006f44:	4b6c      	ldr	r3, [pc, #432]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d10c      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f56:	4b68      	ldr	r3, [pc, #416]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	08db      	lsrs	r3, r3, #3
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	4a66      	ldr	r2, [pc, #408]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 8006f62:	fa22 f303 	lsr.w	r3, r2, r3
 8006f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f68:	e01e      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006f6a:	4b63      	ldr	r3, [pc, #396]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f76:	d106      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f7e:	d102      	bne.n	8006f86 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8006f80:	4b5f      	ldr	r3, [pc, #380]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 8006f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f84:	e010      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f86:	4b5c      	ldr	r3, [pc, #368]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f92:	d106      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 8006f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f9a:	d102      	bne.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8006f9c:	4b59      	ldr	r3, [pc, #356]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fa0:	e002      	b.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8006fa6:	e2da      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8006fa8:	e2d9      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8006faa:	4b57      	ldr	r3, [pc, #348]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fae:	e2d6      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fb4:	e2d3      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8006fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fba:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006fbe:	430b      	orrs	r3, r1
 8006fc0:	f040 80a7 	bne.w	8007112 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8006fc4:	4b4c      	ldr	r3, [pc, #304]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8006fc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc8:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006fcc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fd4:	d055      	beq.n	8007082 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fdc:	f200 8096 	bhi.w	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fe6:	f000 8084 	beq.w	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 8006fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ff0:	f200 808c 	bhi.w	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8006ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ffa:	d030      	beq.n	800705e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007002:	f200 8083 	bhi.w	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 8007006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007008:	2b00      	cmp	r3, #0
 800700a:	d004      	beq.n	8007016 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800700c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007012:	d012      	beq.n	800703a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 8007014:	e07a      	b.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007016:	4b38      	ldr	r3, [pc, #224]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800701e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007022:	d107      	bne.n	8007034 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007028:	4618      	mov	r0, r3
 800702a:	f000 fd63 	bl	8007af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800702e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007032:	e294      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007034:	2300      	movs	r3, #0
 8007036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007038:	e291      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800703a:	4b2f      	ldr	r3, [pc, #188]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007046:	d107      	bne.n	8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007048:	f107 0318 	add.w	r3, r7, #24
 800704c:	4618      	mov	r0, r3
 800704e:	f000 faa9 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007056:	e282      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007058:	2300      	movs	r3, #0
 800705a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800705c:	e27f      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800705e:	4b26      	ldr	r3, [pc, #152]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800706a:	d107      	bne.n	800707c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800706c:	f107 030c 	add.w	r3, r7, #12
 8007070:	4618      	mov	r0, r3
 8007072:	f000 fbeb 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800707a:	e270      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007080:	e26d      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007082:	4b1d      	ldr	r3, [pc, #116]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8007084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007086:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800708a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800708c:	4b1a      	ldr	r3, [pc, #104]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b04      	cmp	r3, #4
 8007096:	d10c      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 8007098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800709a:	2b00      	cmp	r3, #0
 800709c:	d109      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800709e:	4b16      	ldr	r3, [pc, #88]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	08db      	lsrs	r3, r3, #3
 80070a4:	f003 0303 	and.w	r3, r3, #3
 80070a8:	4a14      	ldr	r2, [pc, #80]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 80070aa:	fa22 f303 	lsr.w	r3, r2, r3
 80070ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070b0:	e01e      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80070b2:	4b11      	ldr	r3, [pc, #68]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070be:	d106      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80070c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070c6:	d102      	bne.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80070c8:	4b0d      	ldr	r3, [pc, #52]	; (8007100 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 80070ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070cc:	e010      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80070ce:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070da:	d106      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 80070dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070e2:	d102      	bne.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80070e4:	4b07      	ldr	r3, [pc, #28]	; (8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80070e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070e8:	e002      	b.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80070ea:	2300      	movs	r3, #0
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80070ee:	e236      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80070f0:	e235      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80070f2:	4b05      	ldr	r3, [pc, #20]	; (8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80070f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f6:	e232      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 80070f8:	58024400 	.word	0x58024400
 80070fc:	03d09000 	.word	0x03d09000
 8007100:	003d0900 	.word	0x003d0900
 8007104:	017d7840 	.word	0x017d7840
 8007108:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800710c:	2300      	movs	r3, #0
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007110:	e225      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8007112:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007116:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800711a:	430b      	orrs	r3, r1
 800711c:	f040 8085 	bne.w	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8007120:	4b9c      	ldr	r3, [pc, #624]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007124:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007128:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007130:	d06b      	beq.n	800720a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 8007132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007138:	d874      	bhi.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800713a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007140:	d056      	beq.n	80071f0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007148:	d86c      	bhi.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800714a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007150:	d03b      	beq.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8007152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007154:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007158:	d864      	bhi.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007160:	d021      	beq.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007168:	d85c      	bhi.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716c:	2b00      	cmp	r3, #0
 800716e:	d004      	beq.n	800717a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 8007170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007176:	d004      	beq.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 8007178:	e054      	b.n	8007224 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800717a:	f7fe fb5f 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 800717e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007180:	e1ed      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007182:	4b84      	ldr	r3, [pc, #528]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800718a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800718e:	d107      	bne.n	80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007190:	f107 0318 	add.w	r3, r7, #24
 8007194:	4618      	mov	r0, r3
 8007196:	f000 fa05 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800719e:	e1de      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071a4:	e1db      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80071a6:	4b7b      	ldr	r3, [pc, #492]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b2:	d107      	bne.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071b4:	f107 030c 	add.w	r3, r7, #12
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fb47 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071c2:	e1cc      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c8:	e1c9      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071ca:	4b72      	ldr	r3, [pc, #456]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d109      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071d6:	4b6f      	ldr	r3, [pc, #444]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	08db      	lsrs	r3, r3, #3
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	4a6d      	ldr	r2, [pc, #436]	; (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80071e2:	fa22 f303 	lsr.w	r3, r2, r3
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80071e8:	e1b9      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80071ea:	2300      	movs	r3, #0
 80071ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ee:	e1b6      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80071f0:	4b68      	ldr	r3, [pc, #416]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071fc:	d102      	bne.n	8007204 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 80071fe:	4b67      	ldr	r3, [pc, #412]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 8007200:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007202:	e1ac      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007208:	e1a9      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800720a:	4b62      	ldr	r3, [pc, #392]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007216:	d102      	bne.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 8007218:	4b61      	ldr	r3, [pc, #388]	; (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800721a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800721c:	e19f      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800721e:	2300      	movs	r3, #0
 8007220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007222:	e19c      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007224:	2300      	movs	r3, #0
 8007226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007228:	e199      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800722a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800722e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007232:	430b      	orrs	r3, r1
 8007234:	d173      	bne.n	800731e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8007236:	4b57      	ldr	r3, [pc, #348]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800723e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007246:	d02f      	beq.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 8007248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800724a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800724e:	d863      	bhi.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 8007250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8007256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800725c:	d012      	beq.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800725e:	e05b      	b.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007260:	4b4c      	ldr	r3, [pc, #304]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800726c:	d107      	bne.n	800727e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800726e:	f107 0318 	add.w	r3, r7, #24
 8007272:	4618      	mov	r0, r3
 8007274:	f000 f996 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800727c:	e16f      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007282:	e16c      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007284:	4b43      	ldr	r3, [pc, #268]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800728c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007290:	d107      	bne.n	80072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007292:	f107 030c 	add.w	r3, r7, #12
 8007296:	4618      	mov	r0, r3
 8007298:	f000 fad8 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80072a0:	e15d      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80072a2:	2300      	movs	r3, #0
 80072a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a6:	e15a      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80072a8:	4b3a      	ldr	r3, [pc, #232]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80072aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072b0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072b2:	4b38      	ldr	r3, [pc, #224]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0304 	and.w	r3, r3, #4
 80072ba:	2b04      	cmp	r3, #4
 80072bc:	d10c      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80072be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80072c4:	4b33      	ldr	r3, [pc, #204]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	08db      	lsrs	r3, r3, #3
 80072ca:	f003 0303 	and.w	r3, r3, #3
 80072ce:	4a32      	ldr	r2, [pc, #200]	; (8007398 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 80072d0:	fa22 f303 	lsr.w	r3, r2, r3
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072d6:	e01e      	b.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072d8:	4b2e      	ldr	r3, [pc, #184]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072e4:	d106      	bne.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 80072e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072ec:	d102      	bne.n	80072f4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80072ee:	4b2b      	ldr	r3, [pc, #172]	; (800739c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 80072f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072f2:	e010      	b.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072f4:	4b27      	ldr	r3, [pc, #156]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007300:	d106      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 8007302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007304:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007308:	d102      	bne.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800730a:	4b25      	ldr	r3, [pc, #148]	; (80073a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800730e:	e002      	b.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8007314:	e123      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007316:	e122      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 8007318:	2300      	movs	r3, #0
 800731a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800731c:	e11f      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800731e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007322:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007326:	430b      	orrs	r3, r1
 8007328:	d13c      	bne.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800732a:	4b1a      	ldr	r3, [pc, #104]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800732c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800732e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007332:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8007334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007336:	2b00      	cmp	r3, #0
 8007338:	d004      	beq.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007340:	d012      	beq.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 8007342:	e023      	b.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007344:	4b13      	ldr	r3, [pc, #76]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800734c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007350:	d107      	bne.n	8007362 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007356:	4618      	mov	r0, r3
 8007358:	f000 fbcc 	bl	8007af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800735c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007360:	e0fd      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007366:	e0fa      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007368:	4b0a      	ldr	r3, [pc, #40]	; (8007394 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007374:	d107      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007376:	f107 0318 	add.w	r3, r7, #24
 800737a:	4618      	mov	r0, r3
 800737c:	f000 f912 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007380:	6a3b      	ldr	r3, [r7, #32]
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007384:	e0eb      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800738a:	e0e8      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800738c:	2300      	movs	r3, #0
 800738e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007390:	e0e5      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8007392:	bf00      	nop
 8007394:	58024400 	.word	0x58024400
 8007398:	03d09000 	.word	0x03d09000
 800739c:	003d0900 	.word	0x003d0900
 80073a0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80073a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073a8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80073ac:	430b      	orrs	r3, r1
 80073ae:	f040 8085 	bne.w	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80073b2:	4b6d      	ldr	r3, [pc, #436]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80073b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80073ba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073c2:	d06b      	beq.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073ca:	d874      	bhi.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80073cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d2:	d056      	beq.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 80073d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073da:	d86c      	bhi.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073e2:	d03b      	beq.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80073ea:	d864      	bhi.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073f2:	d021      	beq.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80073f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073fa:	d85c      	bhi.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d004      	beq.n	800740c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007408:	d004      	beq.n	8007414 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800740a:	e054      	b.n	80074b6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800740c:	f000 f8b4 	bl	8007578 <HAL_RCCEx_GetD3PCLK1Freq>
 8007410:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007412:	e0a4      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007414:	4b54      	ldr	r3, [pc, #336]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800741c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007420:	d107      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007422:	f107 0318 	add.w	r3, r7, #24
 8007426:	4618      	mov	r0, r3
 8007428:	f000 f8bc 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007430:	e095      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007436:	e092      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007438:	4b4b      	ldr	r3, [pc, #300]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007444:	d107      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007446:	f107 030c 	add.w	r3, r7, #12
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f9fe 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007454:	e083      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007456:	2300      	movs	r3, #0
 8007458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800745a:	e080      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800745c:	4b42      	ldr	r3, [pc, #264]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0304 	and.w	r3, r3, #4
 8007464:	2b04      	cmp	r3, #4
 8007466:	d109      	bne.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007468:	4b3f      	ldr	r3, [pc, #252]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	08db      	lsrs	r3, r3, #3
 800746e:	f003 0303 	and.w	r3, r3, #3
 8007472:	4a3e      	ldr	r2, [pc, #248]	; (800756c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800747a:	e070      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007480:	e06d      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007482:	4b39      	ldr	r3, [pc, #228]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800748e:	d102      	bne.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 8007490:	4b37      	ldr	r3, [pc, #220]	; (8007570 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007494:	e063      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800749a:	e060      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800749c:	4b32      	ldr	r3, [pc, #200]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074a8:	d102      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 80074aa:	4b32      	ldr	r3, [pc, #200]	; (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 80074ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80074ae:	e056      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 80074b0:	2300      	movs	r3, #0
 80074b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074b4:	e053      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074ba:	e050      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80074bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074c0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80074c4:	430b      	orrs	r3, r1
 80074c6:	d148      	bne.n	800755a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80074c8:	4b27      	ldr	r3, [pc, #156]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80074ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074d0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80074d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d8:	d02a      	beq.n	8007530 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074e0:	d838      	bhi.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d004      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80074e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074ee:	d00d      	beq.n	800750c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 80074f0:	e030      	b.n	8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80074f2:	4b1d      	ldr	r3, [pc, #116]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074fe:	d102      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 8007500:	4b1c      	ldr	r3, [pc, #112]	; (8007574 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8007502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007504:	e02b      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800750a:	e028      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800750c:	4b16      	ldr	r3, [pc, #88]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007514:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007518:	d107      	bne.n	800752a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800751a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800751e:	4618      	mov	r0, r3
 8007520:	f000 fae8 	bl	8007af4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8007528:	e019      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800752a:	2300      	movs	r3, #0
 800752c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800752e:	e016      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800753c:	d107      	bne.n	800754e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800753e:	f107 0318 	add.w	r3, r7, #24
 8007542:	4618      	mov	r0, r3
 8007544:	f000 f82e 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800754c:	e007      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007552:	e004      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007558:	e001      	b.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800755a:	2300      	movs	r3, #0
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800755e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007560:	4618      	mov	r0, r3
 8007562:	3740      	adds	r7, #64	; 0x40
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	58024400 	.word	0x58024400
 800756c:	03d09000 	.word	0x03d09000
 8007570:	003d0900 	.word	0x003d0900
 8007574:	017d7840 	.word	0x017d7840

08007578 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800757c:	f7fe f92e 	bl	80057dc <HAL_RCC_GetHCLKFreq>
 8007580:	4602      	mov	r2, r0
 8007582:	4b06      	ldr	r3, [pc, #24]	; (800759c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	091b      	lsrs	r3, r3, #4
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	4904      	ldr	r1, [pc, #16]	; (80075a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800758e:	5ccb      	ldrb	r3, [r1, r3]
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007598:	4618      	mov	r0, r3
 800759a:	bd80      	pop	{r7, pc}
 800759c:	58024400 	.word	0x58024400
 80075a0:	0800e178 	.word	0x0800e178

080075a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b089      	sub	sp, #36	; 0x24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075ac:	4ba1      	ldr	r3, [pc, #644]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	f003 0303 	and.w	r3, r3, #3
 80075b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80075b6:	4b9f      	ldr	r3, [pc, #636]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ba:	0b1b      	lsrs	r3, r3, #12
 80075bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075c2:	4b9c      	ldr	r3, [pc, #624]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	091b      	lsrs	r3, r3, #4
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80075ce:	4b99      	ldr	r3, [pc, #612]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d2:	08db      	lsrs	r3, r3, #3
 80075d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	fb02 f303 	mul.w	r3, r2, r3
 80075de:	ee07 3a90 	vmov	s15, r3
 80075e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	f000 8111 	beq.w	8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	f000 8083 	beq.w	8007700 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	f200 80a1 	bhi.w	8007744 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d003      	beq.n	8007610 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d056      	beq.n	80076bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800760e:	e099      	b.n	8007744 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007610:	4b88      	ldr	r3, [pc, #544]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b00      	cmp	r3, #0
 800761a:	d02d      	beq.n	8007678 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800761c:	4b85      	ldr	r3, [pc, #532]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	08db      	lsrs	r3, r3, #3
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	4a84      	ldr	r2, [pc, #528]	; (8007838 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007628:	fa22 f303 	lsr.w	r3, r2, r3
 800762c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	ee07 3a90 	vmov	s15, r3
 8007634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007646:	4b7b      	ldr	r3, [pc, #492]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764e:	ee07 3a90 	vmov	s15, r3
 8007652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007656:	ed97 6a03 	vldr	s12, [r7, #12]
 800765a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800765e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800766a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800766e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007672:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007676:	e087      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	ee07 3a90 	vmov	s15, r3
 800767e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007682:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007840 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800768a:	4b6a      	ldr	r3, [pc, #424]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800768c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007692:	ee07 3a90 	vmov	s15, r3
 8007696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800769a:	ed97 6a03 	vldr	s12, [r7, #12]
 800769e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076ba:	e065      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	ee07 3a90 	vmov	s15, r3
 80076c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80076ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ce:	4b59      	ldr	r3, [pc, #356]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076d6:	ee07 3a90 	vmov	s15, r3
 80076da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076de:	ed97 6a03 	vldr	s12, [r7, #12]
 80076e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076fe:	e043      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	ee07 3a90 	vmov	s15, r3
 8007706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800770a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007848 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800770e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007712:	4b48      	ldr	r3, [pc, #288]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800771a:	ee07 3a90 	vmov	s15, r3
 800771e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007722:	ed97 6a03 	vldr	s12, [r7, #12]
 8007726:	eddf 5a45 	vldr	s11, [pc, #276]	; 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800772a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800772e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800773a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800773e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007742:	e021      	b.n	8007788 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	ee07 3a90 	vmov	s15, r3
 800774a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007844 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007756:	4b37      	ldr	r3, [pc, #220]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007766:	ed97 6a03 	vldr	s12, [r7, #12]
 800776a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800783c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800776e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800777a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007782:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007786:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007788:	4b2a      	ldr	r3, [pc, #168]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800778a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778c:	0a5b      	lsrs	r3, r3, #9
 800778e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007792:	ee07 3a90 	vmov	s15, r3
 8007796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800779a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800779e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80077a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ae:	ee17 2a90 	vmov	r2, s15
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80077b6:	4b1f      	ldr	r3, [pc, #124]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	0c1b      	lsrs	r3, r3, #16
 80077bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c0:	ee07 3a90 	vmov	s15, r3
 80077c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077dc:	ee17 2a90 	vmov	r2, s15
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80077e4:	4b13      	ldr	r3, [pc, #76]	; (8007834 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e8:	0e1b      	lsrs	r3, r3, #24
 80077ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800780a:	ee17 2a90 	vmov	r2, s15
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007812:	e008      	b.n	8007826 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2200      	movs	r2, #0
 8007818:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	609a      	str	r2, [r3, #8]
}
 8007826:	bf00      	nop
 8007828:	3724      	adds	r7, #36	; 0x24
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	58024400 	.word	0x58024400
 8007838:	03d09000 	.word	0x03d09000
 800783c:	46000000 	.word	0x46000000
 8007840:	4c742400 	.word	0x4c742400
 8007844:	4a742400 	.word	0x4a742400
 8007848:	4bbebc20 	.word	0x4bbebc20

0800784c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800784c:	b480      	push	{r7}
 800784e:	b089      	sub	sp, #36	; 0x24
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007854:	4ba1      	ldr	r3, [pc, #644]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007858:	f003 0303 	and.w	r3, r3, #3
 800785c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800785e:	4b9f      	ldr	r3, [pc, #636]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007862:	0d1b      	lsrs	r3, r3, #20
 8007864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007868:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800786a:	4b9c      	ldr	r3, [pc, #624]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800786c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786e:	0a1b      	lsrs	r3, r3, #8
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007876:	4b99      	ldr	r3, [pc, #612]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787a:	08db      	lsrs	r3, r3, #3
 800787c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	fb02 f303 	mul.w	r3, r2, r3
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800788e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8111 	beq.w	8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	2b02      	cmp	r3, #2
 800789e:	f000 8083 	beq.w	80079a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	f200 80a1 	bhi.w	80079ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d056      	beq.n	8007964 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80078b6:	e099      	b.n	80079ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078b8:	4b88      	ldr	r3, [pc, #544]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 0320 	and.w	r3, r3, #32
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d02d      	beq.n	8007920 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80078c4:	4b85      	ldr	r3, [pc, #532]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	08db      	lsrs	r3, r3, #3
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	4a84      	ldr	r2, [pc, #528]	; (8007ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80078d0:	fa22 f303 	lsr.w	r3, r2, r3
 80078d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	ee07 3a90 	vmov	s15, r3
 80078dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	ee07 3a90 	vmov	s15, r3
 80078e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ee:	4b7b      	ldr	r3, [pc, #492]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007902:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800791e:	e087      	b.n	8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800792e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007932:	4b6a      	ldr	r3, [pc, #424]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007942:	ed97 6a03 	vldr	s12, [r7, #12]
 8007946:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800794a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007962:	e065      	b.n	8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007aec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007976:	4b59      	ldr	r3, [pc, #356]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007986:	ed97 6a03 	vldr	s12, [r7, #12]
 800798a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800798e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800799a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079a6:	e043      	b.n	8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	ee07 3a90 	vmov	s15, r3
 80079ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007af0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80079b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ba:	4b48      	ldr	r3, [pc, #288]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079c2:	ee07 3a90 	vmov	s15, r3
 80079c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80079ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80079ea:	e021      	b.n	8007a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	ee07 3a90 	vmov	s15, r3
 80079f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007aec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079fe:	4b37      	ldr	r3, [pc, #220]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a12:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ae4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007a2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007a30:	4b2a      	ldr	r3, [pc, #168]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a34:	0a5b      	lsrs	r3, r3, #9
 8007a36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a3a:	ee07 3a90 	vmov	s15, r3
 8007a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a46:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a4a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a56:	ee17 2a90 	vmov	r2, s15
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007a5e:	4b1f      	ldr	r3, [pc, #124]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	0c1b      	lsrs	r3, r3, #16
 8007a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a68:	ee07 3a90 	vmov	s15, r3
 8007a6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a78:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a84:	ee17 2a90 	vmov	r2, s15
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007a8c:	4b13      	ldr	r3, [pc, #76]	; (8007adc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a90:	0e1b      	lsrs	r3, r3, #24
 8007a92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007aa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007aa6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab2:	ee17 2a90 	vmov	r2, s15
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007aba:	e008      	b.n	8007ace <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	609a      	str	r2, [r3, #8]
}
 8007ace:	bf00      	nop
 8007ad0:	3724      	adds	r7, #36	; 0x24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	58024400 	.word	0x58024400
 8007ae0:	03d09000 	.word	0x03d09000
 8007ae4:	46000000 	.word	0x46000000
 8007ae8:	4c742400 	.word	0x4c742400
 8007aec:	4a742400 	.word	0x4a742400
 8007af0:	4bbebc20 	.word	0x4bbebc20

08007af4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b089      	sub	sp, #36	; 0x24
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007afc:	4ba0      	ldr	r3, [pc, #640]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b00:	f003 0303 	and.w	r3, r3, #3
 8007b04:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8007b06:	4b9e      	ldr	r3, [pc, #632]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0a:	091b      	lsrs	r3, r3, #4
 8007b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b10:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b12:	4b9b      	ldr	r3, [pc, #620]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b1c:	4b98      	ldr	r3, [pc, #608]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b20:	08db      	lsrs	r3, r3, #3
 8007b22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	fb02 f303 	mul.w	r3, r2, r3
 8007b2c:	ee07 3a90 	vmov	s15, r3
 8007b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b34:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f000 8111 	beq.w	8007d62 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	f000 8083 	beq.w	8007c4e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	f200 80a1 	bhi.w	8007c92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d003      	beq.n	8007b5e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d056      	beq.n	8007c0a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007b5c:	e099      	b.n	8007c92 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b5e:	4b88      	ldr	r3, [pc, #544]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d02d      	beq.n	8007bc6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b6a:	4b85      	ldr	r3, [pc, #532]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	08db      	lsrs	r3, r3, #3
 8007b70:	f003 0303 	and.w	r3, r3, #3
 8007b74:	4a83      	ldr	r2, [pc, #524]	; (8007d84 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007b76:	fa22 f303 	lsr.w	r3, r2, r3
 8007b7a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	ee07 3a90 	vmov	s15, r3
 8007b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b94:	4b7a      	ldr	r3, [pc, #488]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9c:	ee07 3a90 	vmov	s15, r3
 8007ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ba8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007d88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007bc4:	e087      	b.n	8007cd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	ee07 3a90 	vmov	s15, r3
 8007bcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd8:	4b69      	ldr	r3, [pc, #420]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be0:	ee07 3a90 	vmov	s15, r3
 8007be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be8:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007d88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c08:	e065      	b.n	8007cd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	ee07 3a90 	vmov	s15, r3
 8007c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c14:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007d90 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1c:	4b58      	ldr	r3, [pc, #352]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c24:	ee07 3a90 	vmov	s15, r3
 8007c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c30:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007d88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c4c:	e043      	b.n	8007cd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	ee07 3a90 	vmov	s15, r3
 8007c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c58:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007d94 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c60:	4b47      	ldr	r3, [pc, #284]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c68:	ee07 3a90 	vmov	s15, r3
 8007c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c70:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c74:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007d88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c90:	e021      	b.n	8007cd6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	ee07 3a90 	vmov	s15, r3
 8007c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c9c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ca4:	4b36      	ldr	r3, [pc, #216]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cac:	ee07 3a90 	vmov	s15, r3
 8007cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cb8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007d88 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cd4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8007cd6:	4b2a      	ldr	r3, [pc, #168]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cda:	0a5b      	lsrs	r3, r3, #9
 8007cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ce0:	ee07 3a90 	vmov	s15, r3
 8007ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cf0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cfc:	ee17 2a90 	vmov	r2, s15
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8007d04:	4b1e      	ldr	r3, [pc, #120]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d08:	0c1b      	lsrs	r3, r3, #16
 8007d0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d2a:	ee17 2a90 	vmov	r2, s15
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8007d32:	4b13      	ldr	r3, [pc, #76]	; (8007d80 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d36:	0e1b      	lsrs	r3, r3, #24
 8007d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d3c:	ee07 3a90 	vmov	s15, r3
 8007d40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d58:	ee17 2a90 	vmov	r2, s15
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007d60:	e008      	b.n	8007d74 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	609a      	str	r2, [r3, #8]
}
 8007d74:	bf00      	nop
 8007d76:	3724      	adds	r7, #36	; 0x24
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	58024400 	.word	0x58024400
 8007d84:	03d09000 	.word	0x03d09000
 8007d88:	46000000 	.word	0x46000000
 8007d8c:	4c742400 	.word	0x4c742400
 8007d90:	4a742400 	.word	0x4a742400
 8007d94:	4bbebc20 	.word	0x4bbebc20

08007d98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007da6:	4b53      	ldr	r3, [pc, #332]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	f003 0303 	and.w	r3, r3, #3
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d101      	bne.n	8007db6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e099      	b.n	8007eea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007db6:	4b4f      	ldr	r3, [pc, #316]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a4e      	ldr	r2, [pc, #312]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007dbc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007dc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dc2:	f7fa fb19 	bl	80023f8 <HAL_GetTick>
 8007dc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dc8:	e008      	b.n	8007ddc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dca:	f7fa fb15 	bl	80023f8 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d901      	bls.n	8007ddc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e086      	b.n	8007eea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ddc:	4b45      	ldr	r3, [pc, #276]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d1f0      	bne.n	8007dca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007de8:	4b42      	ldr	r3, [pc, #264]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	031b      	lsls	r3, r3, #12
 8007df6:	493f      	ldr	r1, [pc, #252]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	628b      	str	r3, [r1, #40]	; 0x28
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	3b01      	subs	r3, #1
 8007e02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	025b      	lsls	r3, r3, #9
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	431a      	orrs	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	041b      	lsls	r3, r3, #16
 8007e1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	061b      	lsls	r3, r3, #24
 8007e28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e2c:	4931      	ldr	r1, [pc, #196]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e32:	4b30      	ldr	r3, [pc, #192]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	492d      	ldr	r1, [pc, #180]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e40:	4313      	orrs	r3, r2
 8007e42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e44:	4b2b      	ldr	r3, [pc, #172]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e48:	f023 0220 	bic.w	r2, r3, #32
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	4928      	ldr	r1, [pc, #160]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e56:	4b27      	ldr	r3, [pc, #156]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e5a:	4a26      	ldr	r2, [pc, #152]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e5c:	f023 0310 	bic.w	r3, r3, #16
 8007e60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e62:	4b24      	ldr	r3, [pc, #144]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e66:	4b24      	ldr	r3, [pc, #144]	; (8007ef8 <RCCEx_PLL2_Config+0x160>)
 8007e68:	4013      	ands	r3, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	69d2      	ldr	r2, [r2, #28]
 8007e6e:	00d2      	lsls	r2, r2, #3
 8007e70:	4920      	ldr	r1, [pc, #128]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e76:	4b1f      	ldr	r3, [pc, #124]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7a:	4a1e      	ldr	r2, [pc, #120]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e7c:	f043 0310 	orr.w	r3, r3, #16
 8007e80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d106      	bne.n	8007e96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e88:	4b1a      	ldr	r3, [pc, #104]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e94:	e00f      	b.n	8007eb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d106      	bne.n	8007eaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e9c:	4b15      	ldr	r3, [pc, #84]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	4a14      	ldr	r2, [pc, #80]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007ea2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ea8:	e005      	b.n	8007eb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007eaa:	4b12      	ldr	r3, [pc, #72]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	4a11      	ldr	r2, [pc, #68]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007eb6:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a0e      	ldr	r2, [pc, #56]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ec2:	f7fa fa99 	bl	80023f8 <HAL_GetTick>
 8007ec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ec8:	e008      	b.n	8007edc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007eca:	f7fa fa95 	bl	80023f8 <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d901      	bls.n	8007edc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e006      	b.n	8007eea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <RCCEx_PLL2_Config+0x15c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d0f0      	beq.n	8007eca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	58024400 	.word	0x58024400
 8007ef8:	ffff0007 	.word	0xffff0007

08007efc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f06:	2300      	movs	r3, #0
 8007f08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f0a:	4b53      	ldr	r3, [pc, #332]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f0e:	f003 0303 	and.w	r3, r3, #3
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d101      	bne.n	8007f1a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e099      	b.n	800804e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f1a:	4b4f      	ldr	r3, [pc, #316]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a4e      	ldr	r2, [pc, #312]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f26:	f7fa fa67 	bl	80023f8 <HAL_GetTick>
 8007f2a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f2c:	e008      	b.n	8007f40 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f2e:	f7fa fa63 	bl	80023f8 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d901      	bls.n	8007f40 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e086      	b.n	800804e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f40:	4b45      	ldr	r3, [pc, #276]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1f0      	bne.n	8007f2e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f4c:	4b42      	ldr	r3, [pc, #264]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f50:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	051b      	lsls	r3, r3, #20
 8007f5a:	493f      	ldr	r1, [pc, #252]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	628b      	str	r3, [r1, #40]	; 0x28
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	3b01      	subs	r3, #1
 8007f66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	025b      	lsls	r3, r3, #9
 8007f72:	b29b      	uxth	r3, r3
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	041b      	lsls	r3, r3, #16
 8007f7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	691b      	ldr	r3, [r3, #16]
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	061b      	lsls	r3, r3, #24
 8007f8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f90:	4931      	ldr	r1, [pc, #196]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f96:	4b30      	ldr	r3, [pc, #192]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	492d      	ldr	r1, [pc, #180]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007fa8:	4b2b      	ldr	r3, [pc, #172]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	4928      	ldr	r1, [pc, #160]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007fba:	4b27      	ldr	r3, [pc, #156]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbe:	4a26      	ldr	r2, [pc, #152]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007fc6:	4b24      	ldr	r3, [pc, #144]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007fc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fca:	4b24      	ldr	r3, [pc, #144]	; (800805c <RCCEx_PLL3_Config+0x160>)
 8007fcc:	4013      	ands	r3, r2
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	69d2      	ldr	r2, [r2, #28]
 8007fd2:	00d2      	lsls	r2, r2, #3
 8007fd4:	4920      	ldr	r1, [pc, #128]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007fda:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fde:	4a1e      	ldr	r2, [pc, #120]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d106      	bne.n	8007ffa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007fec:	4b1a      	ldr	r3, [pc, #104]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff0:	4a19      	ldr	r2, [pc, #100]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8007ff2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ff8:	e00f      	b.n	800801a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d106      	bne.n	800800e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008000:	4b15      	ldr	r3, [pc, #84]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8008002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008004:	4a14      	ldr	r2, [pc, #80]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8008006:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800800a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800800c:	e005      	b.n	800801a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800800e:	4b12      	ldr	r3, [pc, #72]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8008010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008012:	4a11      	ldr	r2, [pc, #68]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8008014:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008018:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800801a:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a0e      	ldr	r2, [pc, #56]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8008020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008026:	f7fa f9e7 	bl	80023f8 <HAL_GetTick>
 800802a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800802c:	e008      	b.n	8008040 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800802e:	f7fa f9e3 	bl	80023f8 <HAL_GetTick>
 8008032:	4602      	mov	r2, r0
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	2b02      	cmp	r3, #2
 800803a:	d901      	bls.n	8008040 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e006      	b.n	800804e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008040:	4b05      	ldr	r3, [pc, #20]	; (8008058 <RCCEx_PLL3_Config+0x15c>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0f0      	beq.n	800802e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800804c:	7bfb      	ldrb	r3, [r7, #15]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3710      	adds	r7, #16
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
 8008056:	bf00      	nop
 8008058:	58024400 	.word	0x58024400
 800805c:	ffff0007 	.word	0xffff0007

08008060 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e092      	b.n	8008198 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	7a5b      	ldrb	r3, [r3, #9]
 8008076:	b2db      	uxtb	r3, r3
 8008078:	2b00      	cmp	r3, #0
 800807a:	d105      	bne.n	8008088 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7f9 fb44 	bl	8001710 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2202      	movs	r2, #2
 800808c:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f022 0204 	bic.w	r2, r2, #4
 800809c:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	4b3e      	ldr	r3, [pc, #248]	; (80081a0 <HAL_RNG_Init+0x140>)
 80080a6:	4013      	ands	r3, r2
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6852      	ldr	r2, [r2, #4]
 80080ac:	431a      	orrs	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80080b6:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a39      	ldr	r2, [pc, #228]	; (80081a4 <HAL_RNG_Init+0x144>)
 80080be:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f247 2274 	movw	r2, #29300	; 0x7274
 80080c8:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80080d8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80080da:	f7fa f98d 	bl	80023f8 <HAL_GetTick>
 80080de:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80080e0:	e016      	b.n	8008110 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80080e2:	f7fa f989 	bl	80023f8 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d90f      	bls.n	8008110 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fe:	d107      	bne.n	8008110 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2202      	movs	r2, #2
 800810a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e043      	b.n	8008198 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800811a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800811e:	d0e0      	beq.n	80080e2 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0204 	orr.w	r2, r2, #4
 800812e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	d104      	bne.n	8008148 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2204      	movs	r2, #4
 8008142:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	e027      	b.n	8008198 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8008148:	f7fa f956 	bl	80023f8 <HAL_GetTick>
 800814c:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800814e:	e015      	b.n	800817c <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8008150:	f7fa f952 	bl	80023f8 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b02      	cmp	r3, #2
 800815c:	d90e      	bls.n	800817c <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	f003 0304 	and.w	r3, r3, #4
 8008168:	2b04      	cmp	r3, #4
 800816a:	d107      	bne.n	800817c <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2204      	movs	r2, #4
 8008170:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2202      	movs	r2, #2
 8008176:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e00d      	b.n	8008198 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f003 0304 	and.w	r3, r3, #4
 8008186:	2b04      	cmp	r3, #4
 8008188:	d0e2      	beq.n	8008150 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3710      	adds	r7, #16
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	bfffffdf 	.word	0xbfffffdf
 80081a4:	17590abc 	.word	0x17590abc

080081a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	; 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e075      	b.n	80082a6 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d105      	bne.n	80081d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7f9 fad9 	bl	8001784 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2204      	movs	r2, #4
 80081d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f868 	bl	80082b0 <HAL_SD_InitCard>
 80081e0:	4603      	mov	r3, r0
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80081e6:	2301      	movs	r3, #1
 80081e8:	e05d      	b.n	80082a6 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80081ea:	f107 0308 	add.w	r3, r7, #8
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fbed 	bl	80089d0 <HAL_SD_GetCardStatus>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e052      	b.n	80082a6 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008200:	7e3b      	ldrb	r3, [r7, #24]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8008206:	7e7b      	ldrb	r3, [r7, #25]
 8008208:	b2db      	uxtb	r3, r3
 800820a:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008210:	2b01      	cmp	r3, #1
 8008212:	d10a      	bne.n	800822a <HAL_SD_Init+0x82>
 8008214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008216:	2b00      	cmp	r3, #0
 8008218:	d102      	bne.n	8008220 <HAL_SD_Init+0x78>
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d004      	beq.n	800822a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008226:	659a      	str	r2, [r3, #88]	; 0x58
 8008228:	e00b      	b.n	8008242 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	2b01      	cmp	r3, #1
 8008230:	d104      	bne.n	800823c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008238:	659a      	str	r2, [r3, #88]	; 0x58
 800823a:	e002      	b.n	8008242 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68db      	ldr	r3, [r3, #12]
 8008246:	4619      	mov	r1, r3
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 fcab 	bl	8008ba4 <HAL_SD_ConfigWideBusOperation>
 800824e:	4603      	mov	r3, r0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e026      	b.n	80082a6 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8008258:	f7fa f8ce 	bl	80023f8 <HAL_GetTick>
 800825c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800825e:	e011      	b.n	8008284 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008260:	f7fa f8ca 	bl	80023f8 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d109      	bne.n	8008284 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008276:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e010      	b.n	80082a6 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fd9f 	bl	8008dc8 <HAL_SD_GetCardState>
 800828a:	4603      	mov	r3, r0
 800828c:	2b04      	cmp	r3, #4
 800828e:	d1e7      	bne.n	8008260 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2200      	movs	r2, #0
 800829a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3728      	adds	r7, #40	; 0x28
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}
	...

080082b0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082b0:	b590      	push	{r4, r7, lr}
 80082b2:	b08d      	sub	sp, #52	; 0x34
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80082b8:	2300      	movs	r3, #0
 80082ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80082bc:	2300      	movs	r3, #0
 80082be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80082c4:	2300      	movs	r3, #0
 80082c6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 80082c8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80082cc:	f04f 0100 	mov.w	r1, #0
 80082d0:	f7fe fc80 	bl	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq>
 80082d4:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80082d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d109      	bne.n	80082f0 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80082ea:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e070      	b.n	80083d2 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	0a1b      	lsrs	r3, r3, #8
 80082f4:	4a39      	ldr	r2, [pc, #228]	; (80083dc <HAL_SD_InitCard+0x12c>)
 80082f6:	fba2 2303 	umull	r2, r3, r2, r3
 80082fa:	091b      	lsrs	r3, r3, #4
 80082fc:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681c      	ldr	r4, [r3, #0]
 8008302:	466a      	mov	r2, sp
 8008304:	f107 0318 	add.w	r3, r7, #24
 8008308:	e893 0003 	ldmia.w	r3, {r0, r1}
 800830c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008310:	f107 030c 	add.w	r3, r7, #12
 8008314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008316:	4620      	mov	r0, r4
 8008318:	f002 fc4a 	bl	800abb0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f002 fc7c 	bl	800ac1e <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d005      	beq.n	8008338 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008332:	fbb2 f3f3 	udiv	r3, r2, r3
 8008336:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8008338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800833a:	2b00      	cmp	r3, #0
 800833c:	d007      	beq.n	800834e <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800833e:	4a28      	ldr	r2, [pc, #160]	; (80083e0 <HAL_SD_InitCard+0x130>)
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008342:	fbb2 f3f3 	udiv	r3, r2, r3
 8008346:	3301      	adds	r3, #1
 8008348:	4618      	mov	r0, r3
 800834a:	f7fa f861 	bl	8002410 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f000 fe28 	bl	8008fa4 <SD_PowerON>
 8008354:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008356:	6a3b      	ldr	r3, [r7, #32]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00b      	beq.n	8008374 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	431a      	orrs	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	e02e      	b.n	80083d2 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fd47 	bl	8008e08 <SD_InitCard>
 800837a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00b      	beq.n	800839a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2201      	movs	r2, #1
 8008386:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	431a      	orrs	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e01b      	b.n	80083d2 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083a2:	4618      	mov	r0, r3
 80083a4:	f002 fcd0 	bl	800ad48 <SDMMC_CmdBlockLength>
 80083a8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00f      	beq.n	80083d0 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a0b      	ldr	r2, [pc, #44]	; (80083e4 <HAL_SD_InitCard+0x134>)
 80083b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	431a      	orrs	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e000      	b.n	80083d2 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	372c      	adds	r7, #44	; 0x2c
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd90      	pop	{r4, r7, pc}
 80083da:	bf00      	nop
 80083dc:	014f8b59 	.word	0x014f8b59
 80083e0:	00012110 	.word	0x00012110
 80083e4:	1fe00fff 	.word	0x1fe00fff

080083e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08c      	sub	sp, #48	; 0x30
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d107      	bne.n	8008410 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008404:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e08d      	b.n	800852c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b01      	cmp	r3, #1
 800841a:	f040 8086 	bne.w	800852a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	441a      	add	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800842e:	429a      	cmp	r2, r3
 8008430:	d907      	bls.n	8008442 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008436:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e074      	b.n	800852c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2203      	movs	r2, #3
 8008446:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2200      	movs	r2, #0
 8008450:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	68ba      	ldr	r2, [r7, #8]
 8008456:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	025a      	lsls	r2, r3, #9
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008464:	2b01      	cmp	r3, #1
 8008466:	d002      	beq.n	800846e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846a:	025b      	lsls	r3, r3, #9
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800846e:	f04f 33ff 	mov.w	r3, #4294967295
 8008472:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	025b      	lsls	r3, r3, #9
 8008478:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800847a:	2390      	movs	r3, #144	; 0x90
 800847c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800847e:	2302      	movs	r3, #2
 8008480:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008482:	2300      	movs	r3, #0
 8008484:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008486:	2300      	movs	r3, #0
 8008488:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f107 0210 	add.w	r2, r7, #16
 8008492:	4611      	mov	r1, r2
 8008494:	4618      	mov	r0, r3
 8008496:	f002 fc2b 	bl	800acf0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084a8:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68ba      	ldr	r2, [r7, #8]
 80084b0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	2201      	movs	r2, #1
 80084b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d90a      	bls.n	80084d6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2282      	movs	r2, #130	; 0x82
 80084c4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084cc:	4618      	mov	r0, r3
 80084ce:	f002 fc81 	bl	800add4 <SDMMC_CmdReadMultiBlock>
 80084d2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80084d4:	e009      	b.n	80084ea <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2281      	movs	r2, #129	; 0x81
 80084da:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084e2:	4618      	mov	r0, r3
 80084e4:	f002 fc53 	bl	800ad8e <SDMMC_CmdReadSingleBlock>
 80084e8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d012      	beq.n	8008516 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a0f      	ldr	r2, [pc, #60]	; (8008534 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80084f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	431a      	orrs	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2200      	movs	r2, #0
 8008510:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008512:	2301      	movs	r3, #1
 8008514:	e00a      	b.n	800852c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008524:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	e000      	b.n	800852c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800852a:	2302      	movs	r3, #2
  }
}
 800852c:	4618      	mov	r0, r3
 800852e:	3730      	adds	r7, #48	; 0x30
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	1fe00fff 	.word	0x1fe00fff

08008538 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b08c      	sub	sp, #48	; 0x30
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	607a      	str	r2, [r7, #4]
 8008544:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d107      	bne.n	8008560 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008554:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e08d      	b.n	800867c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008566:	b2db      	uxtb	r3, r3
 8008568:	2b01      	cmp	r3, #1
 800856a:	f040 8086 	bne.w	800867a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	2200      	movs	r2, #0
 8008572:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	441a      	add	r2, r3
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857e:	429a      	cmp	r2, r3
 8008580:	d907      	bls.n	8008592 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008586:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e074      	b.n	800867c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2203      	movs	r2, #3
 8008596:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2200      	movs	r2, #0
 80085a0:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	025a      	lsls	r2, r3, #9
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d002      	beq.n	80085be <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	025b      	lsls	r3, r3, #9
 80085bc:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085be:	f04f 33ff 	mov.w	r3, #4294967295
 80085c2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	025b      	lsls	r3, r3, #9
 80085c8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80085ca:	2390      	movs	r3, #144	; 0x90
 80085cc:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80085d2:	2300      	movs	r3, #0
 80085d4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f107 0210 	add.w	r2, r7, #16
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f002 fb83 	bl	800acf0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085f8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2201      	movs	r2, #1
 8008608:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	2b01      	cmp	r3, #1
 800860e:	d90a      	bls.n	8008626 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	22a0      	movs	r2, #160	; 0xa0
 8008614:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800861c:	4618      	mov	r0, r3
 800861e:	f002 fc1f 	bl	800ae60 <SDMMC_CmdWriteMultiBlock>
 8008622:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008624:	e009      	b.n	800863a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2290      	movs	r2, #144	; 0x90
 800862a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008632:	4618      	mov	r0, r3
 8008634:	f002 fbf1 	bl	800ae1a <SDMMC_CmdWriteSingleBlock>
 8008638:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	2b00      	cmp	r3, #0
 800863e:	d012      	beq.n	8008666 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a0f      	ldr	r2, [pc, #60]	; (8008684 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008646:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	431a      	orrs	r2, r3
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	e00a      	b.n	800867c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008674:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008676:	2300      	movs	r3, #0
 8008678:	e000      	b.n	800867c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800867a:	2302      	movs	r3, #2
  }
}
 800867c:	4618      	mov	r0, r3
 800867e:	3730      	adds	r7, #48	; 0x30
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	1fe00fff 	.word	0x1fe00fff

08008688 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008696:	0f9b      	lsrs	r3, r3, #30
 8008698:	b2da      	uxtb	r2, r3
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a2:	0e9b      	lsrs	r3, r3, #26
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	f003 030f 	and.w	r3, r3, #15
 80086aa:	b2da      	uxtb	r2, r3
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086b4:	0e1b      	lsrs	r3, r3, #24
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	f003 0303 	and.w	r3, r3, #3
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086c6:	0c1b      	lsrs	r3, r3, #16
 80086c8:	b2da      	uxtb	r2, r3
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d2:	0a1b      	lsrs	r3, r3, #8
 80086d4:	b2da      	uxtb	r2, r3
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e8:	0d1b      	lsrs	r3, r3, #20
 80086ea:	b29a      	uxth	r2, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f4:	0c1b      	lsrs	r3, r3, #16
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 030f 	and.w	r3, r3, #15
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008706:	0bdb      	lsrs	r3, r3, #15
 8008708:	b2db      	uxtb	r3, r3
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	b2da      	uxtb	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008718:	0b9b      	lsrs	r3, r3, #14
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	b2da      	uxtb	r2, r3
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800872a:	0b5b      	lsrs	r3, r3, #13
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0301 	and.w	r3, r3, #1
 8008732:	b2da      	uxtb	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800873c:	0b1b      	lsrs	r3, r3, #12
 800873e:	b2db      	uxtb	r3, r3
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	b2da      	uxtb	r2, r3
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	2200      	movs	r2, #0
 800874e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	2b00      	cmp	r3, #0
 8008756:	d163      	bne.n	8008820 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800875c:	009a      	lsls	r2, r3, #2
 800875e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008762:	4013      	ands	r3, r2
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008768:	0f92      	lsrs	r2, r2, #30
 800876a:	431a      	orrs	r2, r3
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008774:	0edb      	lsrs	r3, r3, #27
 8008776:	b2db      	uxtb	r3, r3
 8008778:	f003 0307 	and.w	r3, r3, #7
 800877c:	b2da      	uxtb	r2, r3
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008786:	0e1b      	lsrs	r3, r3, #24
 8008788:	b2db      	uxtb	r3, r3
 800878a:	f003 0307 	and.w	r3, r3, #7
 800878e:	b2da      	uxtb	r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008798:	0d5b      	lsrs	r3, r3, #21
 800879a:	b2db      	uxtb	r3, r3
 800879c:	f003 0307 	and.w	r3, r3, #7
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087aa:	0c9b      	lsrs	r3, r3, #18
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	b2da      	uxtb	r2, r3
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087bc:	0bdb      	lsrs	r3, r3, #15
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	b2da      	uxtb	r2, r3
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	691b      	ldr	r3, [r3, #16]
 80087ce:	1c5a      	adds	r2, r3, #1
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	7e1b      	ldrb	r3, [r3, #24]
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0307 	and.w	r3, r3, #7
 80087de:	3302      	adds	r3, #2
 80087e0:	2201      	movs	r2, #1
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80087ea:	fb03 f202 	mul.w	r2, r3, r2
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	7a1b      	ldrb	r3, [r3, #8]
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	f003 030f 	and.w	r3, r3, #15
 80087fc:	2201      	movs	r2, #1
 80087fe:	409a      	lsls	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800880c:	0a52      	lsrs	r2, r2, #9
 800880e:	fb03 f202 	mul.w	r2, r3, r2
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800881c:	655a      	str	r2, [r3, #84]	; 0x54
 800881e:	e031      	b.n	8008884 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008824:	2b01      	cmp	r3, #1
 8008826:	d11d      	bne.n	8008864 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800882c:	041b      	lsls	r3, r3, #16
 800882e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008836:	0c1b      	lsrs	r3, r3, #16
 8008838:	431a      	orrs	r2, r3
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	3301      	adds	r3, #1
 8008844:	029a      	lsls	r2, r3, #10
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008858:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	655a      	str	r2, [r3, #84]	; 0x54
 8008862:	e00f      	b.n	8008884 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a58      	ldr	r2, [pc, #352]	; (80089cc <HAL_SD_GetCardCSD+0x344>)
 800886a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008870:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e09d      	b.n	80089c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008888:	0b9b      	lsrs	r3, r3, #14
 800888a:	b2db      	uxtb	r3, r3
 800888c:	f003 0301 	and.w	r3, r3, #1
 8008890:	b2da      	uxtb	r2, r3
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800889a:	09db      	lsrs	r3, r3, #7
 800889c:	b2db      	uxtb	r3, r3
 800889e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088a2:	b2da      	uxtb	r2, r3
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088bc:	0fdb      	lsrs	r3, r3, #31
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088c8:	0f5b      	lsrs	r3, r3, #29
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088da:	0e9b      	lsrs	r3, r3, #26
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	f003 0307 	and.w	r3, r3, #7
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088ec:	0d9b      	lsrs	r3, r3, #22
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80088fe:	0d5b      	lsrs	r3, r3, #21
 8008900:	b2db      	uxtb	r3, r3
 8008902:	f003 0301 	and.w	r3, r3, #1
 8008906:	b2da      	uxtb	r2, r3
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800891a:	0c1b      	lsrs	r3, r3, #16
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	b2da      	uxtb	r2, r3
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800892e:	0bdb      	lsrs	r3, r3, #15
 8008930:	b2db      	uxtb	r3, r3
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	b2da      	uxtb	r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008942:	0b9b      	lsrs	r3, r3, #14
 8008944:	b2db      	uxtb	r3, r3
 8008946:	f003 0301 	and.w	r3, r3, #1
 800894a:	b2da      	uxtb	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008956:	0b5b      	lsrs	r3, r3, #13
 8008958:	b2db      	uxtb	r3, r3
 800895a:	f003 0301 	and.w	r3, r3, #1
 800895e:	b2da      	uxtb	r2, r3
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800896a:	0b1b      	lsrs	r3, r3, #12
 800896c:	b2db      	uxtb	r3, r3
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	b2da      	uxtb	r2, r3
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800897e:	0a9b      	lsrs	r3, r3, #10
 8008980:	b2db      	uxtb	r3, r3
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	b2da      	uxtb	r2, r3
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008992:	0a1b      	lsrs	r3, r3, #8
 8008994:	b2db      	uxtb	r3, r3
 8008996:	f003 0303 	and.w	r3, r3, #3
 800899a:	b2da      	uxtb	r2, r3
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089a6:	085b      	lsrs	r3, r3, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	1fe00fff 	.word	0x1fe00fff

080089d0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b094      	sub	sp, #80	; 0x50
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089e6:	b2db      	uxtb	r3, r3
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d101      	bne.n	80089f0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e0a7      	b.n	8008b40 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 80089f0:	f107 0308 	add.w	r3, r7, #8
 80089f4:	4619      	mov	r1, r3
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fb62 	bl	80090c0 <SD_SendSDStatus>
 80089fc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 80089fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d011      	beq.n	8008a28 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a4f      	ldr	r2, [pc, #316]	; (8008b48 <HAL_SD_GetCardStatus+0x178>)
 8008a0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a12:	431a      	orrs	r2, r3
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008a26:	e070      	b.n	8008b0a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	099b      	lsrs	r3, r3, #6
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	f003 0303 	and.w	r3, r3, #3
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	095b      	lsrs	r3, r3, #5
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	b2da      	uxtb	r2, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	0a1b      	lsrs	r3, r3, #8
 8008a4c:	b29b      	uxth	r3, r3
 8008a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a52:	b29a      	uxth	r2, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	0e1b      	lsrs	r3, r3, #24
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	061a      	lsls	r2, r3, #24
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	021b      	lsls	r3, r3, #8
 8008a6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a6e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	0a1b      	lsrs	r3, r3, #8
 8008a74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a78:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	0e1b      	lsrs	r3, r3, #24
 8008a7e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	b2da      	uxtb	r2, r3
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	0a1b      	lsrs	r3, r3, #8
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	0d1b      	lsrs	r3, r3, #20
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	f003 030f 	and.w	r3, r3, #15
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	0c1b      	lsrs	r3, r3, #16
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ab0:	b29a      	uxth	r2, r3
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	b2db      	uxtb	r3, r3
 8008ab8:	b29b      	uxth	r3, r3
 8008aba:	4313      	orrs	r3, r2
 8008abc:	b29a      	uxth	r2, r3
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	0a9b      	lsrs	r3, r3, #10
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	0a1b      	lsrs	r3, r3, #8
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	f003 0303 	and.w	r3, r3, #3
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	091b      	lsrs	r3, r3, #4
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 030f 	and.w	r3, r3, #15
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	f003 030f 	and.w	r3, r3, #15
 8008afa:	b2da      	uxtb	r2, r3
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	0e1b      	lsrs	r3, r3, #24
 8008b04:	b2da      	uxtb	r2, r3
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008b12:	4618      	mov	r0, r3
 8008b14:	f002 f918 	bl	800ad48 <SDMMC_CmdBlockLength>
 8008b18:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d00d      	beq.n	8008b3c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a08      	ldr	r2, [pc, #32]	; (8008b48 <HAL_SD_GetCardStatus+0x178>)
 8008b26:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b2c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2201      	movs	r2, #1
 8008b32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008b3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3750      	adds	r7, #80	; 0x50
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	1fe00fff 	.word	0x1fe00fff

08008b4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b083      	sub	sp, #12
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008b96:	2300      	movs	r3, #0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008ba4:	b590      	push	{r4, r7, lr}
 8008ba6:	b08d      	sub	sp, #52	; 0x34
 8008ba8:	af02      	add	r7, sp, #8
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	2b03      	cmp	r3, #3
 8008bc2:	d02e      	beq.n	8008c22 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008bca:	d106      	bne.n	8008bda <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bd0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	635a      	str	r2, [r3, #52]	; 0x34
 8008bd8:	e029      	b.n	8008c2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008be0:	d10a      	bne.n	8008bf8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fb64 	bl	80092b0 <SD_WideBus_Enable>
 8008be8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bee:	6a3b      	ldr	r3, [r7, #32]
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	635a      	str	r2, [r3, #52]	; 0x34
 8008bf6:	e01a      	b.n	8008c2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10a      	bne.n	8008c14 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fba1 	bl	8009346 <SD_WideBus_Disable>
 8008c04:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c0a:	6a3b      	ldr	r3, [r7, #32]
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	635a      	str	r2, [r3, #52]	; 0x34
 8008c12:	e00c      	b.n	8008c2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c18:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	635a      	str	r2, [r3, #52]	; 0x34
 8008c20:	e005      	b.n	8008c2e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c26:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d007      	beq.n	8008c46 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a5f      	ldr	r2, [pc, #380]	; (8008db8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008c3c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c44:	e096      	b.n	8008d74 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008c46:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8008c4a:	f04f 0100 	mov.w	r1, #0
 8008c4e:	f7fd ffc1 	bl	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c52:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 8083 	beq.w	8008d62 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	695a      	ldr	r2, [r3, #20]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	4950      	ldr	r1, [pc, #320]	; (8008dbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008c7a:	fba1 1303 	umull	r1, r3, r1, r3
 8008c7e:	0e1b      	lsrs	r3, r3, #24
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d303      	bcc.n	8008c8c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	61bb      	str	r3, [r7, #24]
 8008c8a:	e05a      	b.n	8008d42 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c94:	d103      	bne.n	8008c9e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	61bb      	str	r3, [r7, #24]
 8008c9c:	e051      	b.n	8008d42 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca6:	d126      	bne.n	8008cf6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10e      	bne.n	8008cce <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8008cb0:	69fb      	ldr	r3, [r7, #28]
 8008cb2:	4a43      	ldr	r2, [pc, #268]	; (8008dc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d906      	bls.n	8008cc6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	4a40      	ldr	r2, [pc, #256]	; (8008dbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc0:	0e5b      	lsrs	r3, r3, #25
 8008cc2:	61bb      	str	r3, [r7, #24]
 8008cc4:	e03d      	b.n	8008d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	61bb      	str	r3, [r7, #24]
 8008ccc:	e039      	b.n	8008d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	005b      	lsls	r3, r3, #1
 8008cd4:	69fa      	ldr	r2, [r7, #28]
 8008cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cda:	4a39      	ldr	r2, [pc, #228]	; (8008dc0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d906      	bls.n	8008cee <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	4a36      	ldr	r2, [pc, #216]	; (8008dbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce8:	0e5b      	lsrs	r3, r3, #25
 8008cea:	61bb      	str	r3, [r7, #24]
 8008cec:	e029      	b.n	8008d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	61bb      	str	r3, [r7, #24]
 8008cf4:	e025      	b.n	8008d42 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	695b      	ldr	r3, [r3, #20]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d10e      	bne.n	8008d1c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	4a30      	ldr	r2, [pc, #192]	; (8008dc4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d906      	bls.n	8008d14 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	4a2c      	ldr	r2, [pc, #176]	; (8008dbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d0e:	0e1b      	lsrs	r3, r3, #24
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	e016      	b.n	8008d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	61bb      	str	r3, [r7, #24]
 8008d1a:	e012      	b.n	8008d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	69fa      	ldr	r2, [r7, #28]
 8008d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d28:	4a26      	ldr	r2, [pc, #152]	; (8008dc4 <HAL_SD_ConfigWideBusOperation+0x220>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d906      	bls.n	8008d3c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4a22      	ldr	r2, [pc, #136]	; (8008dbc <HAL_SD_ConfigWideBusOperation+0x218>)
 8008d32:	fba2 2303 	umull	r2, r3, r2, r3
 8008d36:	0e1b      	lsrs	r3, r3, #24
 8008d38:	61bb      	str	r3, [r7, #24]
 8008d3a:	e002      	b.n	8008d42 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681c      	ldr	r4, [r3, #0]
 8008d46:	466a      	mov	r2, sp
 8008d48:	f107 0314 	add.w	r3, r7, #20
 8008d4c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008d50:	e882 0003 	stmia.w	r2, {r0, r1}
 8008d54:	f107 0308 	add.w	r3, r7, #8
 8008d58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	f001 ff28 	bl	800abb0 <SDMMC_Init>
 8008d60:	e008      	b.n	8008d74 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f001 ffe3 	bl	800ad48 <SDMMC_CmdBlockLength>
 8008d82:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00c      	beq.n	8008da4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a0a      	ldr	r2, [pc, #40]	; (8008db8 <HAL_SD_ConfigWideBusOperation+0x214>)
 8008d90:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d96:	6a3b      	ldr	r3, [r7, #32]
 8008d98:	431a      	orrs	r2, r3
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8008dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	372c      	adds	r7, #44	; 0x2c
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd90      	pop	{r4, r7, pc}
 8008db8:	1fe00fff 	.word	0x1fe00fff
 8008dbc:	55e63b89 	.word	0x55e63b89
 8008dc0:	02faf080 	.word	0x02faf080
 8008dc4:	017d7840 	.word	0x017d7840

08008dc8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b086      	sub	sp, #24
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008dd4:	f107 030c 	add.w	r3, r7, #12
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa40 	bl	8009260 <SD_SendStatus>
 8008de0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	0a5b      	lsrs	r3, r3, #9
 8008df8:	f003 030f 	and.w	r3, r3, #15
 8008dfc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008dfe:	693b      	ldr	r3, [r7, #16]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b090      	sub	sp, #64	; 0x40
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8008e14:	f7f9 faf0 	bl	80023f8 <HAL_GetTick>
 8008e18:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f001 ff0e 	bl	800ac40 <SDMMC_GetPowerState>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d102      	bne.n	8008e30 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008e2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008e2e:	e0b5      	b.n	8008f9c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d02e      	beq.n	8008e96 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f002 f91b 	bl	800b078 <SDMMC_CmdSendCID>
 8008e42:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d001      	beq.n	8008e4e <SD_InitCard+0x46>
    {
      return errorstate;
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e4c:	e0a6      	b.n	8008f9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2100      	movs	r1, #0
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 ff38 	bl	800acca <SDMMC_GetResponse>
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	2104      	movs	r1, #4
 8008e66:	4618      	mov	r0, r3
 8008e68:	f001 ff2f 	bl	800acca <SDMMC_GetResponse>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	2108      	movs	r1, #8
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f001 ff26 	bl	800acca <SDMMC_GetResponse>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	210c      	movs	r1, #12
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f001 ff1d 	bl	800acca <SDMMC_GetResponse>
 8008e90:	4602      	mov	r2, r0
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e9a:	2b03      	cmp	r3, #3
 8008e9c:	d01d      	beq.n	8008eda <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8008e9e:	e019      	b.n	8008ed4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f107 020a 	add.w	r2, r7, #10
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f002 f923 	bl	800b0f6 <SDMMC_CmdSetRelAdd>
 8008eb0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8008eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <SD_InitCard+0xb4>
      {
        return errorstate;
 8008eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eba:	e06f      	b.n	8008f9c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8008ebc:	f7f9 fa9c 	bl	80023f8 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	f241 3287 	movw	r2, #4999	; 0x1387
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d902      	bls.n	8008ed4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8008ece:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ed2:	e063      	b.n	8008f9c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8008ed4:	897b      	ldrh	r3, [r7, #10]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d0e2      	beq.n	8008ea0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ede:	2b03      	cmp	r3, #3
 8008ee0:	d036      	beq.n	8008f50 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008ee2:	897b      	ldrh	r3, [r7, #10]
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ef2:	041b      	lsls	r3, r3, #16
 8008ef4:	4619      	mov	r1, r3
 8008ef6:	4610      	mov	r0, r2
 8008ef8:	f002 f8dd 	bl	800b0b6 <SDMMC_CmdSendCSD>
 8008efc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <SD_InitCard+0x100>
    {
      return errorstate;
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	e049      	b.n	8008f9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f001 fedb 	bl	800acca <SDMMC_GetResponse>
 8008f14:	4602      	mov	r2, r0
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	2104      	movs	r1, #4
 8008f20:	4618      	mov	r0, r3
 8008f22:	f001 fed2 	bl	800acca <SDMMC_GetResponse>
 8008f26:	4602      	mov	r2, r0
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2108      	movs	r1, #8
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 fec9 	bl	800acca <SDMMC_GetResponse>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	210c      	movs	r1, #12
 8008f44:	4618      	mov	r0, r3
 8008f46:	f001 fec0 	bl	800acca <SDMMC_GetResponse>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2104      	movs	r1, #4
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 feb7 	bl	800acca <SDMMC_GetResponse>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	0d1a      	lsrs	r2, r3, #20
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008f64:	f107 030c 	add.w	r3, r7, #12
 8008f68:	4619      	mov	r1, r3
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff fb8c 	bl	8008688 <HAL_SD_GetCardCSD>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f7a:	e00f      	b.n	8008f9c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f84:	041b      	lsls	r3, r3, #16
 8008f86:	4619      	mov	r1, r3
 8008f88:	4610      	mov	r0, r2
 8008f8a:	f001 ff8c 	bl	800aea6 <SDMMC_CmdSelDesel>
 8008f8e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8008f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d001      	beq.n	8008f9a <SD_InitCard+0x192>
  {
    return errorstate;
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	e000      	b.n	8008f9c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008f9a:	2300      	movs	r3, #0
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3740      	adds	r7, #64	; 0x40
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b086      	sub	sp, #24
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008fac:	2300      	movs	r3, #0
 8008fae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 ff95 	bl	800aeec <SDMMC_CmdGoIdleState>
 8008fc2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d001      	beq.n	8008fce <SD_PowerON+0x2a>
  {
    return errorstate;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	e072      	b.n	80090b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f001 ffa8 	bl	800af28 <SDMMC_CmdOperCond>
 8008fd8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fe0:	d10d      	bne.n	8008ffe <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	4618      	mov	r0, r3
 8008fee:	f001 ff7d 	bl	800aeec <SDMMC_CmdGoIdleState>
 8008ff2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d004      	beq.n	8009004 <SD_PowerON+0x60>
    {
      return errorstate;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	e05a      	b.n	80090b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2201      	movs	r2, #1
 8009002:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009008:	2b01      	cmp	r3, #1
 800900a:	d137      	bne.n	800907c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2100      	movs	r1, #0
 8009012:	4618      	mov	r0, r3
 8009014:	f001 ffa8 	bl	800af68 <SDMMC_CmdAppCommand>
 8009018:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d02d      	beq.n	800907c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009020:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009024:	e046      	b.n	80090b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2100      	movs	r1, #0
 800902c:	4618      	mov	r0, r3
 800902e:	f001 ff9b 	bl	800af68 <SDMMC_CmdAppCommand>
 8009032:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <SD_PowerON+0x9a>
    {
      return errorstate;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	e03a      	b.n	80090b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	491e      	ldr	r1, [pc, #120]	; (80090bc <SD_PowerON+0x118>)
 8009044:	4618      	mov	r0, r3
 8009046:	f001 ffb2 	bl	800afae <SDMMC_CmdAppOperCommand>
 800904a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d002      	beq.n	8009058 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009052:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009056:	e02d      	b.n	80090b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	2100      	movs	r1, #0
 800905e:	4618      	mov	r0, r3
 8009060:	f001 fe33 	bl	800acca <SDMMC_GetResponse>
 8009064:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	0fdb      	lsrs	r3, r3, #31
 800906a:	2b01      	cmp	r3, #1
 800906c:	d101      	bne.n	8009072 <SD_PowerON+0xce>
 800906e:	2301      	movs	r3, #1
 8009070:	e000      	b.n	8009074 <SD_PowerON+0xd0>
 8009072:	2300      	movs	r3, #0
 8009074:	613b      	str	r3, [r7, #16]

    count++;
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	3301      	adds	r3, #1
 800907a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009082:	4293      	cmp	r3, r2
 8009084:	d802      	bhi.n	800908c <SD_PowerON+0xe8>
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d0cc      	beq.n	8009026 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009092:	4293      	cmp	r3, r2
 8009094:	d902      	bls.n	800909c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009096:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800909a:	e00b      	b.n	80090b4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d002      	beq.n	80090b2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2201      	movs	r2, #1
 80090b0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80090b2:	2300      	movs	r3, #0
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3718      	adds	r7, #24
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}
 80090bc:	c1100000 	.word	0xc1100000

080090c0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b08c      	sub	sp, #48	; 0x30
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80090ca:	f7f9 f995 	bl	80023f8 <HAL_GetTick>
 80090ce:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2100      	movs	r1, #0
 80090da:	4618      	mov	r0, r3
 80090dc:	f001 fdf5 	bl	800acca <SDMMC_GetResponse>
 80090e0:	4603      	mov	r3, r0
 80090e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ea:	d102      	bne.n	80090f2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80090ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80090f0:	e0b0      	b.n	8009254 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2140      	movs	r1, #64	; 0x40
 80090f8:	4618      	mov	r0, r3
 80090fa:	f001 fe25 	bl	800ad48 <SDMMC_CmdBlockLength>
 80090fe:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d005      	beq.n	8009112 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800910e:	6a3b      	ldr	r3, [r7, #32]
 8009110:	e0a0      	b.n	8009254 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800911a:	041b      	lsls	r3, r3, #16
 800911c:	4619      	mov	r1, r3
 800911e:	4610      	mov	r0, r2
 8009120:	f001 ff22 	bl	800af68 <SDMMC_CmdAppCommand>
 8009124:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d005      	beq.n	8009138 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	e08d      	b.n	8009254 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009138:	f04f 33ff 	mov.w	r3, #4294967295
 800913c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800913e:	2340      	movs	r3, #64	; 0x40
 8009140:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8009142:	2360      	movs	r3, #96	; 0x60
 8009144:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009146:	2302      	movs	r3, #2
 8009148:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800914a:	2300      	movs	r3, #0
 800914c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800914e:	2301      	movs	r3, #1
 8009150:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f107 0208 	add.w	r2, r7, #8
 800915a:	4611      	mov	r1, r2
 800915c:	4618      	mov	r0, r3
 800915e:	f001 fdc7 	bl	800acf0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4618      	mov	r0, r3
 8009168:	f002 f80a 	bl	800b180 <SDMMC_CmdStatusRegister>
 800916c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800916e:	6a3b      	ldr	r3, [r7, #32]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d02b      	beq.n	80091cc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800917c:	6a3b      	ldr	r3, [r7, #32]
 800917e:	e069      	b.n	8009254 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800918a:	2b00      	cmp	r3, #0
 800918c:	d013      	beq.n	80091b6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800918e:	2300      	movs	r3, #0
 8009190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009192:	e00d      	b.n	80091b0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f001 fd33 	bl	800ac04 <SDMMC_ReadFIFO>
 800919e:	4602      	mov	r2, r0
 80091a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a2:	601a      	str	r2, [r3, #0]
        pData++;
 80091a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a6:	3304      	adds	r3, #4
 80091a8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	3301      	adds	r3, #1
 80091ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	2b07      	cmp	r3, #7
 80091b4:	d9ee      	bls.n	8009194 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80091b6:	f7f9 f91f 	bl	80023f8 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c4:	d102      	bne.n	80091cc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80091c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80091ca:	e043      	b.n	8009254 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091d2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d0d2      	beq.n	8009180 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e0:	f003 0308 	and.w	r3, r3, #8
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80091e8:	2308      	movs	r3, #8
 80091ea:	e033      	b.n	8009254 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f2:	f003 0302 	and.w	r3, r3, #2
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80091fa:	2302      	movs	r3, #2
 80091fc:	e02a      	b.n	8009254 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009204:	f003 0320 	and.w	r3, r3, #32
 8009208:	2b00      	cmp	r3, #0
 800920a:	d017      	beq.n	800923c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800920c:	2320      	movs	r3, #32
 800920e:	e021      	b.n	8009254 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4618      	mov	r0, r3
 8009216:	f001 fcf5 	bl	800ac04 <SDMMC_ReadFIFO>
 800921a:	4602      	mov	r2, r0
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	601a      	str	r2, [r3, #0]
    pData++;
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	3304      	adds	r3, #4
 8009224:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009226:	f7f9 f8e7 	bl	80023f8 <HAL_GetTick>
 800922a:	4602      	mov	r2, r0
 800922c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922e:	1ad3      	subs	r3, r2, r3
 8009230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009234:	d102      	bne.n	800923c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009236:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800923a:	e00b      	b.n	8009254 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d1e2      	bne.n	8009210 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a03      	ldr	r2, [pc, #12]	; (800925c <SD_SendSDStatus+0x19c>)
 8009250:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3730      	adds	r7, #48	; 0x30
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	18000f3a 	.word	0x18000f3a

08009260 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009270:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009274:	e018      	b.n	80092a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927e:	041b      	lsls	r3, r3, #16
 8009280:	4619      	mov	r1, r3
 8009282:	4610      	mov	r0, r2
 8009284:	f001 ff59 	bl	800b13a <SDMMC_CmdSendStatus>
 8009288:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	e009      	b.n	80092a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2100      	movs	r1, #0
 800929a:	4618      	mov	r0, r3
 800929c:	f001 fd15 	bl	800acca <SDMMC_GetResponse>
 80092a0:	4602      	mov	r2, r0
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	2300      	movs	r3, #0
 80092be:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	2100      	movs	r1, #0
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 fcff 	bl	800acca <SDMMC_GetResponse>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092d6:	d102      	bne.n	80092de <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092dc:	e02f      	b.n	800933e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092de:	f107 030c 	add.w	r3, r7, #12
 80092e2:	4619      	mov	r1, r3
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f879 	bl	80093dc <SD_FindSCR>
 80092ea:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d001      	beq.n	80092f6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	e023      	b.n	800933e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d01c      	beq.n	800933a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681a      	ldr	r2, [r3, #0]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009308:	041b      	lsls	r3, r3, #16
 800930a:	4619      	mov	r1, r3
 800930c:	4610      	mov	r0, r2
 800930e:	f001 fe2b 	bl	800af68 <SDMMC_CmdAppCommand>
 8009312:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d001      	beq.n	800931e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	e00f      	b.n	800933e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2102      	movs	r1, #2
 8009324:	4618      	mov	r0, r3
 8009326:	f001 fe62 	bl	800afee <SDMMC_CmdBusWidth>
 800932a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	e003      	b.n	800933e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009336:	2300      	movs	r3, #0
 8009338:	e001      	b.n	800933e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800933a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b086      	sub	sp, #24
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	2300      	movs	r3, #0
 8009354:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2100      	movs	r1, #0
 800935c:	4618      	mov	r0, r3
 800935e:	f001 fcb4 	bl	800acca <SDMMC_GetResponse>
 8009362:	4603      	mov	r3, r0
 8009364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009368:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800936c:	d102      	bne.n	8009374 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800936e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009372:	e02f      	b.n	80093d4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f82e 	bl	80093dc <SD_FindSCR>
 8009380:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	e023      	b.n	80093d4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d01c      	beq.n	80093d0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939e:	041b      	lsls	r3, r3, #16
 80093a0:	4619      	mov	r1, r3
 80093a2:	4610      	mov	r0, r2
 80093a4:	f001 fde0 	bl	800af68 <SDMMC_CmdAppCommand>
 80093a8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d001      	beq.n	80093b4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80093b0:	697b      	ldr	r3, [r7, #20]
 80093b2:	e00f      	b.n	80093d4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2100      	movs	r1, #0
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 fe17 	bl	800afee <SDMMC_CmdBusWidth>
 80093c0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	e003      	b.n	80093d4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80093cc:	2300      	movs	r3, #0
 80093ce:	e001      	b.n	80093d4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80093d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08e      	sub	sp, #56	; 0x38
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
 80093e4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80093e6:	f7f9 f807 	bl	80023f8 <HAL_GetTick>
 80093ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80093ec:	2300      	movs	r3, #0
 80093ee:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80093f0:	2300      	movs	r3, #0
 80093f2:	60bb      	str	r3, [r7, #8]
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2108      	movs	r1, #8
 8009402:	4618      	mov	r0, r3
 8009404:	f001 fca0 	bl	800ad48 <SDMMC_CmdBlockLength>
 8009408:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800940a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009412:	e0ad      	b.n	8009570 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800941c:	041b      	lsls	r3, r3, #16
 800941e:	4619      	mov	r1, r3
 8009420:	4610      	mov	r0, r2
 8009422:	f001 fda1 	bl	800af68 <SDMMC_CmdAppCommand>
 8009426:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	2b00      	cmp	r3, #0
 800942c:	d001      	beq.n	8009432 <SD_FindSCR+0x56>
  {
    return errorstate;
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	e09e      	b.n	8009570 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009432:	f04f 33ff 	mov.w	r3, #4294967295
 8009436:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009438:	2308      	movs	r3, #8
 800943a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800943c:	2330      	movs	r3, #48	; 0x30
 800943e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009440:	2302      	movs	r3, #2
 8009442:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009444:	2300      	movs	r3, #0
 8009446:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009448:	2301      	movs	r3, #1
 800944a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f107 0210 	add.w	r2, r7, #16
 8009454:	4611      	mov	r1, r2
 8009456:	4618      	mov	r0, r3
 8009458:	f001 fc4a 	bl	800acf0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4618      	mov	r0, r3
 8009462:	f001 fde7 	bl	800b034 <SDMMC_CmdSendSCR>
 8009466:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946a:	2b00      	cmp	r3, #0
 800946c:	d027      	beq.n	80094be <SD_FindSCR+0xe2>
  {
    return errorstate;
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	e07e      	b.n	8009570 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800947c:	2b00      	cmp	r3, #0
 800947e:	d113      	bne.n	80094a8 <SD_FindSCR+0xcc>
 8009480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009482:	2b00      	cmp	r3, #0
 8009484:	d110      	bne.n	80094a8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4618      	mov	r0, r3
 800948c:	f001 fbba 	bl	800ac04 <SDMMC_ReadFIFO>
 8009490:	4603      	mov	r3, r0
 8009492:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4618      	mov	r0, r3
 800949a:	f001 fbb3 	bl	800ac04 <SDMMC_ReadFIFO>
 800949e:	4603      	mov	r3, r0
 80094a0:	60fb      	str	r3, [r7, #12]
      index++;
 80094a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094a4:	3301      	adds	r3, #1
 80094a6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80094a8:	f7f8 ffa6 	bl	80023f8 <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b6:	d102      	bne.n	80094be <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80094b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094bc:	e058      	b.n	8009570 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094c4:	f240 532a 	movw	r3, #1322	; 0x52a
 80094c8:	4013      	ands	r3, r2
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d0d1      	beq.n	8009472 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d4:	f003 0308 	and.w	r3, r3, #8
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2208      	movs	r2, #8
 80094e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80094e4:	2308      	movs	r3, #8
 80094e6:	e043      	b.n	8009570 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d005      	beq.n	8009502 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2202      	movs	r2, #2
 80094fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80094fe:	2302      	movs	r3, #2
 8009500:	e036      	b.n	8009570 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009508:	f003 0320 	and.w	r3, r3, #32
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2220      	movs	r2, #32
 8009516:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009518:	2320      	movs	r3, #32
 800951a:	e029      	b.n	8009570 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a15      	ldr	r2, [pc, #84]	; (8009578 <SD_FindSCR+0x19c>)
 8009522:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	061a      	lsls	r2, r3, #24
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	021b      	lsls	r3, r3, #8
 800952c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009530:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	0a1b      	lsrs	r3, r3, #8
 8009536:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800953a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	0e1b      	lsrs	r3, r3, #24
 8009540:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8009542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009544:	601a      	str	r2, [r3, #0]
    scr++;
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	3304      	adds	r3, #4
 800954a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	061a      	lsls	r2, r3, #24
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	021b      	lsls	r3, r3, #8
 8009554:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009558:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	0a1b      	lsrs	r3, r3, #8
 800955e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009562:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	0e1b      	lsrs	r3, r3, #24
 8009568:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800956a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800956c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3738      	adds	r7, #56	; 0x38
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	18000f3a 	.word	0x18000f3a

0800957c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e10f      	b.n	80097ae <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a87      	ldr	r2, [pc, #540]	; (80097b8 <HAL_SPI_Init+0x23c>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d00f      	beq.n	80095be <HAL_SPI_Init+0x42>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a86      	ldr	r2, [pc, #536]	; (80097bc <HAL_SPI_Init+0x240>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00a      	beq.n	80095be <HAL_SPI_Init+0x42>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a84      	ldr	r2, [pc, #528]	; (80097c0 <HAL_SPI_Init+0x244>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d005      	beq.n	80095be <HAL_SPI_Init+0x42>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	2b0f      	cmp	r3, #15
 80095b8:	d901      	bls.n	80095be <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e0f7      	b.n	80097ae <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f900 	bl	80097c4 <SPI_GetPacketSize>
 80095c4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a7b      	ldr	r2, [pc, #492]	; (80097b8 <HAL_SPI_Init+0x23c>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00c      	beq.n	80095ea <HAL_SPI_Init+0x6e>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a79      	ldr	r2, [pc, #484]	; (80097bc <HAL_SPI_Init+0x240>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d007      	beq.n	80095ea <HAL_SPI_Init+0x6e>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a78      	ldr	r2, [pc, #480]	; (80097c0 <HAL_SPI_Init+0x244>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d002      	beq.n	80095ea <HAL_SPI_Init+0x6e>
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2b08      	cmp	r3, #8
 80095e8:	d811      	bhi.n	800960e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095ee:	4a72      	ldr	r2, [pc, #456]	; (80097b8 <HAL_SPI_Init+0x23c>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d009      	beq.n	8009608 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a70      	ldr	r2, [pc, #448]	; (80097bc <HAL_SPI_Init+0x240>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d004      	beq.n	8009608 <HAL_SPI_Init+0x8c>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a6f      	ldr	r2, [pc, #444]	; (80097c0 <HAL_SPI_Init+0x244>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d104      	bne.n	8009612 <HAL_SPI_Init+0x96>
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	2b10      	cmp	r3, #16
 800960c:	d901      	bls.n	8009612 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e0cd      	b.n	80097ae <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009618:	b2db      	uxtb	r3, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	d106      	bne.n	800962c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f7f8 f918 	bl	800185c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0201 	bic.w	r2, r2, #1
 8009642:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	689b      	ldr	r3, [r3, #8]
 800964a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800964e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009658:	d119      	bne.n	800968e <HAL_SPI_Init+0x112>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	685b      	ldr	r3, [r3, #4]
 800965e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009662:	d103      	bne.n	800966c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009668:	2b00      	cmp	r3, #0
 800966a:	d008      	beq.n	800967e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009670:	2b00      	cmp	r3, #0
 8009672:	d10c      	bne.n	800968e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009678:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800967c:	d107      	bne.n	800968e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800968c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00f      	beq.n	80096ba <HAL_SPI_Init+0x13e>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	68db      	ldr	r3, [r3, #12]
 800969e:	2b06      	cmp	r3, #6
 80096a0:	d90b      	bls.n	80096ba <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	601a      	str	r2, [r3, #0]
 80096b8:	e007      	b.n	80096ca <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80096c8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	69da      	ldr	r2, [r3, #28]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096d2:	431a      	orrs	r2, r3
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	431a      	orrs	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096dc:	ea42 0103 	orr.w	r1, r2, r3
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68da      	ldr	r2, [r3, #12]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	430a      	orrs	r2, r1
 80096ea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fa:	431a      	orrs	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	431a      	orrs	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	691b      	ldr	r3, [r3, #16]
 8009706:	431a      	orrs	r2, r3
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	695b      	ldr	r3, [r3, #20]
 800970c:	431a      	orrs	r2, r3
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	431a      	orrs	r2, r3
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	431a      	orrs	r2, r3
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800971e:	431a      	orrs	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	431a      	orrs	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800972a:	ea42 0103 	orr.w	r1, r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	430a      	orrs	r2, r1
 8009738:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d113      	bne.n	800976a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009754:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009768:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3710      	adds	r7, #16
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	40013000 	.word	0x40013000
 80097bc:	40003800 	.word	0x40003800
 80097c0:	40003c00 	.word	0x40003c00

080097c4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d0:	095b      	lsrs	r3, r3, #5
 80097d2:	3301      	adds	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	68db      	ldr	r3, [r3, #12]
 80097da:	3301      	adds	r3, #1
 80097dc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	3307      	adds	r3, #7
 80097e2:	08db      	lsrs	r3, r3, #3
 80097e4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	68fa      	ldr	r2, [r7, #12]
 80097ea:	fb02 f303 	mul.w	r3, r2, r3
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	3714      	adds	r7, #20
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e042      	b.n	8009892 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7f8 fb34 	bl	8001e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2224      	movs	r2, #36	; 0x24
 8009828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0201 	bic.w	r2, r2, #1
 800983a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f82d 	bl	800989c <UART_SetConfig>
 8009842:	4603      	mov	r3, r0
 8009844:	2b01      	cmp	r3, #1
 8009846:	d101      	bne.n	800984c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e022      	b.n	8009892 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 fe8d 	bl	800a574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009868:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689a      	ldr	r2, [r3, #8]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009878:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f042 0201 	orr.w	r2, r2, #1
 8009888:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 ff14 	bl	800a6b8 <UART_CheckIdleState>
 8009890:	4603      	mov	r3, r0
}
 8009892:	4618      	mov	r0, r3
 8009894:	3708      	adds	r7, #8
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}
	...

0800989c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800989c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098a0:	b092      	sub	sp, #72	; 0x48
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	689a      	ldr	r2, [r3, #8]
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	431a      	orrs	r2, r3
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	431a      	orrs	r2, r3
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	4bbe      	ldr	r3, [pc, #760]	; (8009bc4 <UART_SetConfig+0x328>)
 80098cc:	4013      	ands	r3, r2
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	6812      	ldr	r2, [r2, #0]
 80098d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80098d4:	430b      	orrs	r3, r1
 80098d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	68da      	ldr	r2, [r3, #12]
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4ab3      	ldr	r2, [pc, #716]	; (8009bc8 <UART_SetConfig+0x32c>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d004      	beq.n	8009908 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009904:	4313      	orrs	r3, r2
 8009906:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	689a      	ldr	r2, [r3, #8]
 800990e:	4baf      	ldr	r3, [pc, #700]	; (8009bcc <UART_SetConfig+0x330>)
 8009910:	4013      	ands	r3, r2
 8009912:	697a      	ldr	r2, [r7, #20]
 8009914:	6812      	ldr	r2, [r2, #0]
 8009916:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009918:	430b      	orrs	r3, r1
 800991a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009922:	f023 010f 	bic.w	r1, r3, #15
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	430a      	orrs	r2, r1
 8009930:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4aa6      	ldr	r2, [pc, #664]	; (8009bd0 <UART_SetConfig+0x334>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d177      	bne.n	8009a2c <UART_SetConfig+0x190>
 800993c:	4ba5      	ldr	r3, [pc, #660]	; (8009bd4 <UART_SetConfig+0x338>)
 800993e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009940:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009944:	2b28      	cmp	r3, #40	; 0x28
 8009946:	d86d      	bhi.n	8009a24 <UART_SetConfig+0x188>
 8009948:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <UART_SetConfig+0xb4>)
 800994a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994e:	bf00      	nop
 8009950:	080099f5 	.word	0x080099f5
 8009954:	08009a25 	.word	0x08009a25
 8009958:	08009a25 	.word	0x08009a25
 800995c:	08009a25 	.word	0x08009a25
 8009960:	08009a25 	.word	0x08009a25
 8009964:	08009a25 	.word	0x08009a25
 8009968:	08009a25 	.word	0x08009a25
 800996c:	08009a25 	.word	0x08009a25
 8009970:	080099fd 	.word	0x080099fd
 8009974:	08009a25 	.word	0x08009a25
 8009978:	08009a25 	.word	0x08009a25
 800997c:	08009a25 	.word	0x08009a25
 8009980:	08009a25 	.word	0x08009a25
 8009984:	08009a25 	.word	0x08009a25
 8009988:	08009a25 	.word	0x08009a25
 800998c:	08009a25 	.word	0x08009a25
 8009990:	08009a05 	.word	0x08009a05
 8009994:	08009a25 	.word	0x08009a25
 8009998:	08009a25 	.word	0x08009a25
 800999c:	08009a25 	.word	0x08009a25
 80099a0:	08009a25 	.word	0x08009a25
 80099a4:	08009a25 	.word	0x08009a25
 80099a8:	08009a25 	.word	0x08009a25
 80099ac:	08009a25 	.word	0x08009a25
 80099b0:	08009a0d 	.word	0x08009a0d
 80099b4:	08009a25 	.word	0x08009a25
 80099b8:	08009a25 	.word	0x08009a25
 80099bc:	08009a25 	.word	0x08009a25
 80099c0:	08009a25 	.word	0x08009a25
 80099c4:	08009a25 	.word	0x08009a25
 80099c8:	08009a25 	.word	0x08009a25
 80099cc:	08009a25 	.word	0x08009a25
 80099d0:	08009a15 	.word	0x08009a15
 80099d4:	08009a25 	.word	0x08009a25
 80099d8:	08009a25 	.word	0x08009a25
 80099dc:	08009a25 	.word	0x08009a25
 80099e0:	08009a25 	.word	0x08009a25
 80099e4:	08009a25 	.word	0x08009a25
 80099e8:	08009a25 	.word	0x08009a25
 80099ec:	08009a25 	.word	0x08009a25
 80099f0:	08009a1d 	.word	0x08009a1d
 80099f4:	2301      	movs	r3, #1
 80099f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099fa:	e326      	b.n	800a04a <UART_SetConfig+0x7ae>
 80099fc:	2304      	movs	r3, #4
 80099fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a02:	e322      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a04:	2308      	movs	r3, #8
 8009a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a0a:	e31e      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a0c:	2310      	movs	r3, #16
 8009a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a12:	e31a      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a14:	2320      	movs	r3, #32
 8009a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a1a:	e316      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a1c:	2340      	movs	r3, #64	; 0x40
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a22:	e312      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a24:	2380      	movs	r3, #128	; 0x80
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2a:	e30e      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a69      	ldr	r2, [pc, #420]	; (8009bd8 <UART_SetConfig+0x33c>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d130      	bne.n	8009a98 <UART_SetConfig+0x1fc>
 8009a36:	4b67      	ldr	r3, [pc, #412]	; (8009bd4 <UART_SetConfig+0x338>)
 8009a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	2b05      	cmp	r3, #5
 8009a40:	d826      	bhi.n	8009a90 <UART_SetConfig+0x1f4>
 8009a42:	a201      	add	r2, pc, #4	; (adr r2, 8009a48 <UART_SetConfig+0x1ac>)
 8009a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a48:	08009a61 	.word	0x08009a61
 8009a4c:	08009a69 	.word	0x08009a69
 8009a50:	08009a71 	.word	0x08009a71
 8009a54:	08009a79 	.word	0x08009a79
 8009a58:	08009a81 	.word	0x08009a81
 8009a5c:	08009a89 	.word	0x08009a89
 8009a60:	2300      	movs	r3, #0
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a66:	e2f0      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a68:	2304      	movs	r3, #4
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6e:	e2ec      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a70:	2308      	movs	r3, #8
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a76:	e2e8      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7e:	e2e4      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a80:	2320      	movs	r3, #32
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a86:	e2e0      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a88:	2340      	movs	r3, #64	; 0x40
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8e:	e2dc      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a90:	2380      	movs	r3, #128	; 0x80
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a96:	e2d8      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a4f      	ldr	r2, [pc, #316]	; (8009bdc <UART_SetConfig+0x340>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d130      	bne.n	8009b04 <UART_SetConfig+0x268>
 8009aa2:	4b4c      	ldr	r3, [pc, #304]	; (8009bd4 <UART_SetConfig+0x338>)
 8009aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	2b05      	cmp	r3, #5
 8009aac:	d826      	bhi.n	8009afc <UART_SetConfig+0x260>
 8009aae:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <UART_SetConfig+0x218>)
 8009ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab4:	08009acd 	.word	0x08009acd
 8009ab8:	08009ad5 	.word	0x08009ad5
 8009abc:	08009add 	.word	0x08009add
 8009ac0:	08009ae5 	.word	0x08009ae5
 8009ac4:	08009aed 	.word	0x08009aed
 8009ac8:	08009af5 	.word	0x08009af5
 8009acc:	2300      	movs	r3, #0
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad2:	e2ba      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009ad4:	2304      	movs	r3, #4
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ada:	e2b6      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009adc:	2308      	movs	r3, #8
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e2b2      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009ae4:	2310      	movs	r3, #16
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e2ae      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009aec:	2320      	movs	r3, #32
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e2aa      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009af4:	2340      	movs	r3, #64	; 0x40
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e2a6      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009afc:	2380      	movs	r3, #128	; 0x80
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e2a2      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a35      	ldr	r2, [pc, #212]	; (8009be0 <UART_SetConfig+0x344>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d130      	bne.n	8009b70 <UART_SetConfig+0x2d4>
 8009b0e:	4b31      	ldr	r3, [pc, #196]	; (8009bd4 <UART_SetConfig+0x338>)
 8009b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b12:	f003 0307 	and.w	r3, r3, #7
 8009b16:	2b05      	cmp	r3, #5
 8009b18:	d826      	bhi.n	8009b68 <UART_SetConfig+0x2cc>
 8009b1a:	a201      	add	r2, pc, #4	; (adr r2, 8009b20 <UART_SetConfig+0x284>)
 8009b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b20:	08009b39 	.word	0x08009b39
 8009b24:	08009b41 	.word	0x08009b41
 8009b28:	08009b49 	.word	0x08009b49
 8009b2c:	08009b51 	.word	0x08009b51
 8009b30:	08009b59 	.word	0x08009b59
 8009b34:	08009b61 	.word	0x08009b61
 8009b38:	2300      	movs	r3, #0
 8009b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b3e:	e284      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009b40:	2304      	movs	r3, #4
 8009b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b46:	e280      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009b48:	2308      	movs	r3, #8
 8009b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b4e:	e27c      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009b50:	2310      	movs	r3, #16
 8009b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b56:	e278      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009b58:	2320      	movs	r3, #32
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e274      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009b60:	2340      	movs	r3, #64	; 0x40
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b66:	e270      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009b68:	2380      	movs	r3, #128	; 0x80
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e26c      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009b70:	697b      	ldr	r3, [r7, #20]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a1b      	ldr	r2, [pc, #108]	; (8009be4 <UART_SetConfig+0x348>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d142      	bne.n	8009c00 <UART_SetConfig+0x364>
 8009b7a:	4b16      	ldr	r3, [pc, #88]	; (8009bd4 <UART_SetConfig+0x338>)
 8009b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b7e:	f003 0307 	and.w	r3, r3, #7
 8009b82:	2b05      	cmp	r3, #5
 8009b84:	d838      	bhi.n	8009bf8 <UART_SetConfig+0x35c>
 8009b86:	a201      	add	r2, pc, #4	; (adr r2, 8009b8c <UART_SetConfig+0x2f0>)
 8009b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8c:	08009ba5 	.word	0x08009ba5
 8009b90:	08009bad 	.word	0x08009bad
 8009b94:	08009bb5 	.word	0x08009bb5
 8009b98:	08009bbd 	.word	0x08009bbd
 8009b9c:	08009be9 	.word	0x08009be9
 8009ba0:	08009bf1 	.word	0x08009bf1
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009baa:	e24e      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009bac:	2304      	movs	r3, #4
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb2:	e24a      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bba:	e246      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009bbc:	2310      	movs	r3, #16
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc2:	e242      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009bc4:	cfff69f3 	.word	0xcfff69f3
 8009bc8:	58000c00 	.word	0x58000c00
 8009bcc:	11fff4ff 	.word	0x11fff4ff
 8009bd0:	40011000 	.word	0x40011000
 8009bd4:	58024400 	.word	0x58024400
 8009bd8:	40004400 	.word	0x40004400
 8009bdc:	40004800 	.word	0x40004800
 8009be0:	40004c00 	.word	0x40004c00
 8009be4:	40005000 	.word	0x40005000
 8009be8:	2320      	movs	r3, #32
 8009bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bee:	e22c      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009bf0:	2340      	movs	r3, #64	; 0x40
 8009bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf6:	e228      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009bf8:	2380      	movs	r3, #128	; 0x80
 8009bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfe:	e224      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4ab1      	ldr	r2, [pc, #708]	; (8009ecc <UART_SetConfig+0x630>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d176      	bne.n	8009cf8 <UART_SetConfig+0x45c>
 8009c0a:	4bb1      	ldr	r3, [pc, #708]	; (8009ed0 <UART_SetConfig+0x634>)
 8009c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c12:	2b28      	cmp	r3, #40	; 0x28
 8009c14:	d86c      	bhi.n	8009cf0 <UART_SetConfig+0x454>
 8009c16:	a201      	add	r2, pc, #4	; (adr r2, 8009c1c <UART_SetConfig+0x380>)
 8009c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c1c:	08009cc1 	.word	0x08009cc1
 8009c20:	08009cf1 	.word	0x08009cf1
 8009c24:	08009cf1 	.word	0x08009cf1
 8009c28:	08009cf1 	.word	0x08009cf1
 8009c2c:	08009cf1 	.word	0x08009cf1
 8009c30:	08009cf1 	.word	0x08009cf1
 8009c34:	08009cf1 	.word	0x08009cf1
 8009c38:	08009cf1 	.word	0x08009cf1
 8009c3c:	08009cc9 	.word	0x08009cc9
 8009c40:	08009cf1 	.word	0x08009cf1
 8009c44:	08009cf1 	.word	0x08009cf1
 8009c48:	08009cf1 	.word	0x08009cf1
 8009c4c:	08009cf1 	.word	0x08009cf1
 8009c50:	08009cf1 	.word	0x08009cf1
 8009c54:	08009cf1 	.word	0x08009cf1
 8009c58:	08009cf1 	.word	0x08009cf1
 8009c5c:	08009cd1 	.word	0x08009cd1
 8009c60:	08009cf1 	.word	0x08009cf1
 8009c64:	08009cf1 	.word	0x08009cf1
 8009c68:	08009cf1 	.word	0x08009cf1
 8009c6c:	08009cf1 	.word	0x08009cf1
 8009c70:	08009cf1 	.word	0x08009cf1
 8009c74:	08009cf1 	.word	0x08009cf1
 8009c78:	08009cf1 	.word	0x08009cf1
 8009c7c:	08009cd9 	.word	0x08009cd9
 8009c80:	08009cf1 	.word	0x08009cf1
 8009c84:	08009cf1 	.word	0x08009cf1
 8009c88:	08009cf1 	.word	0x08009cf1
 8009c8c:	08009cf1 	.word	0x08009cf1
 8009c90:	08009cf1 	.word	0x08009cf1
 8009c94:	08009cf1 	.word	0x08009cf1
 8009c98:	08009cf1 	.word	0x08009cf1
 8009c9c:	08009ce1 	.word	0x08009ce1
 8009ca0:	08009cf1 	.word	0x08009cf1
 8009ca4:	08009cf1 	.word	0x08009cf1
 8009ca8:	08009cf1 	.word	0x08009cf1
 8009cac:	08009cf1 	.word	0x08009cf1
 8009cb0:	08009cf1 	.word	0x08009cf1
 8009cb4:	08009cf1 	.word	0x08009cf1
 8009cb8:	08009cf1 	.word	0x08009cf1
 8009cbc:	08009ce9 	.word	0x08009ce9
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cc6:	e1c0      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009cc8:	2304      	movs	r3, #4
 8009cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cce:	e1bc      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009cd0:	2308      	movs	r3, #8
 8009cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cd6:	e1b8      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009cd8:	2310      	movs	r3, #16
 8009cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cde:	e1b4      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e1b0      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009ce8:	2340      	movs	r3, #64	; 0x40
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e1ac      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009cf0:	2380      	movs	r3, #128	; 0x80
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e1a8      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a75      	ldr	r2, [pc, #468]	; (8009ed4 <UART_SetConfig+0x638>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d130      	bne.n	8009d64 <UART_SetConfig+0x4c8>
 8009d02:	4b73      	ldr	r3, [pc, #460]	; (8009ed0 <UART_SetConfig+0x634>)
 8009d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d06:	f003 0307 	and.w	r3, r3, #7
 8009d0a:	2b05      	cmp	r3, #5
 8009d0c:	d826      	bhi.n	8009d5c <UART_SetConfig+0x4c0>
 8009d0e:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <UART_SetConfig+0x478>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009d2d 	.word	0x08009d2d
 8009d18:	08009d35 	.word	0x08009d35
 8009d1c:	08009d3d 	.word	0x08009d3d
 8009d20:	08009d45 	.word	0x08009d45
 8009d24:	08009d4d 	.word	0x08009d4d
 8009d28:	08009d55 	.word	0x08009d55
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d32:	e18a      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009d34:	2304      	movs	r3, #4
 8009d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d3a:	e186      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009d3c:	2308      	movs	r3, #8
 8009d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d42:	e182      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009d44:	2310      	movs	r3, #16
 8009d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d4a:	e17e      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009d4c:	2320      	movs	r3, #32
 8009d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d52:	e17a      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009d54:	2340      	movs	r3, #64	; 0x40
 8009d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d5a:	e176      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009d5c:	2380      	movs	r3, #128	; 0x80
 8009d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d62:	e172      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a5b      	ldr	r2, [pc, #364]	; (8009ed8 <UART_SetConfig+0x63c>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d130      	bne.n	8009dd0 <UART_SetConfig+0x534>
 8009d6e:	4b58      	ldr	r3, [pc, #352]	; (8009ed0 <UART_SetConfig+0x634>)
 8009d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d72:	f003 0307 	and.w	r3, r3, #7
 8009d76:	2b05      	cmp	r3, #5
 8009d78:	d826      	bhi.n	8009dc8 <UART_SetConfig+0x52c>
 8009d7a:	a201      	add	r2, pc, #4	; (adr r2, 8009d80 <UART_SetConfig+0x4e4>)
 8009d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d80:	08009d99 	.word	0x08009d99
 8009d84:	08009da1 	.word	0x08009da1
 8009d88:	08009da9 	.word	0x08009da9
 8009d8c:	08009db1 	.word	0x08009db1
 8009d90:	08009db9 	.word	0x08009db9
 8009d94:	08009dc1 	.word	0x08009dc1
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009d9e:	e154      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009da0:	2304      	movs	r3, #4
 8009da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009da6:	e150      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009da8:	2308      	movs	r3, #8
 8009daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dae:	e14c      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009db0:	2310      	movs	r3, #16
 8009db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009db6:	e148      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009db8:	2320      	movs	r3, #32
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e144      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009dc0:	2340      	movs	r3, #64	; 0x40
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc6:	e140      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dce:	e13c      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a41      	ldr	r2, [pc, #260]	; (8009edc <UART_SetConfig+0x640>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	f040 8082 	bne.w	8009ee0 <UART_SetConfig+0x644>
 8009ddc:	4b3c      	ldr	r3, [pc, #240]	; (8009ed0 <UART_SetConfig+0x634>)
 8009dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009de4:	2b28      	cmp	r3, #40	; 0x28
 8009de6:	d86d      	bhi.n	8009ec4 <UART_SetConfig+0x628>
 8009de8:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <UART_SetConfig+0x554>)
 8009dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dee:	bf00      	nop
 8009df0:	08009e95 	.word	0x08009e95
 8009df4:	08009ec5 	.word	0x08009ec5
 8009df8:	08009ec5 	.word	0x08009ec5
 8009dfc:	08009ec5 	.word	0x08009ec5
 8009e00:	08009ec5 	.word	0x08009ec5
 8009e04:	08009ec5 	.word	0x08009ec5
 8009e08:	08009ec5 	.word	0x08009ec5
 8009e0c:	08009ec5 	.word	0x08009ec5
 8009e10:	08009e9d 	.word	0x08009e9d
 8009e14:	08009ec5 	.word	0x08009ec5
 8009e18:	08009ec5 	.word	0x08009ec5
 8009e1c:	08009ec5 	.word	0x08009ec5
 8009e20:	08009ec5 	.word	0x08009ec5
 8009e24:	08009ec5 	.word	0x08009ec5
 8009e28:	08009ec5 	.word	0x08009ec5
 8009e2c:	08009ec5 	.word	0x08009ec5
 8009e30:	08009ea5 	.word	0x08009ea5
 8009e34:	08009ec5 	.word	0x08009ec5
 8009e38:	08009ec5 	.word	0x08009ec5
 8009e3c:	08009ec5 	.word	0x08009ec5
 8009e40:	08009ec5 	.word	0x08009ec5
 8009e44:	08009ec5 	.word	0x08009ec5
 8009e48:	08009ec5 	.word	0x08009ec5
 8009e4c:	08009ec5 	.word	0x08009ec5
 8009e50:	08009ead 	.word	0x08009ead
 8009e54:	08009ec5 	.word	0x08009ec5
 8009e58:	08009ec5 	.word	0x08009ec5
 8009e5c:	08009ec5 	.word	0x08009ec5
 8009e60:	08009ec5 	.word	0x08009ec5
 8009e64:	08009ec5 	.word	0x08009ec5
 8009e68:	08009ec5 	.word	0x08009ec5
 8009e6c:	08009ec5 	.word	0x08009ec5
 8009e70:	08009eb5 	.word	0x08009eb5
 8009e74:	08009ec5 	.word	0x08009ec5
 8009e78:	08009ec5 	.word	0x08009ec5
 8009e7c:	08009ec5 	.word	0x08009ec5
 8009e80:	08009ec5 	.word	0x08009ec5
 8009e84:	08009ec5 	.word	0x08009ec5
 8009e88:	08009ec5 	.word	0x08009ec5
 8009e8c:	08009ec5 	.word	0x08009ec5
 8009e90:	08009ebd 	.word	0x08009ebd
 8009e94:	2301      	movs	r3, #1
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9a:	e0d6      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009e9c:	2304      	movs	r3, #4
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea2:	e0d2      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009ea4:	2308      	movs	r3, #8
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eaa:	e0ce      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009eac:	2310      	movs	r3, #16
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb2:	e0ca      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009eb4:	2320      	movs	r3, #32
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eba:	e0c6      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009ebc:	2340      	movs	r3, #64	; 0x40
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e0c2      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009ec4:	2380      	movs	r3, #128	; 0x80
 8009ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eca:	e0be      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009ecc:	40011400 	.word	0x40011400
 8009ed0:	58024400 	.word	0x58024400
 8009ed4:	40007800 	.word	0x40007800
 8009ed8:	40007c00 	.word	0x40007c00
 8009edc:	40011800 	.word	0x40011800
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4aad      	ldr	r2, [pc, #692]	; (800a19c <UART_SetConfig+0x900>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d176      	bne.n	8009fd8 <UART_SetConfig+0x73c>
 8009eea:	4bad      	ldr	r3, [pc, #692]	; (800a1a0 <UART_SetConfig+0x904>)
 8009eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ef2:	2b28      	cmp	r3, #40	; 0x28
 8009ef4:	d86c      	bhi.n	8009fd0 <UART_SetConfig+0x734>
 8009ef6:	a201      	add	r2, pc, #4	; (adr r2, 8009efc <UART_SetConfig+0x660>)
 8009ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009efc:	08009fa1 	.word	0x08009fa1
 8009f00:	08009fd1 	.word	0x08009fd1
 8009f04:	08009fd1 	.word	0x08009fd1
 8009f08:	08009fd1 	.word	0x08009fd1
 8009f0c:	08009fd1 	.word	0x08009fd1
 8009f10:	08009fd1 	.word	0x08009fd1
 8009f14:	08009fd1 	.word	0x08009fd1
 8009f18:	08009fd1 	.word	0x08009fd1
 8009f1c:	08009fa9 	.word	0x08009fa9
 8009f20:	08009fd1 	.word	0x08009fd1
 8009f24:	08009fd1 	.word	0x08009fd1
 8009f28:	08009fd1 	.word	0x08009fd1
 8009f2c:	08009fd1 	.word	0x08009fd1
 8009f30:	08009fd1 	.word	0x08009fd1
 8009f34:	08009fd1 	.word	0x08009fd1
 8009f38:	08009fd1 	.word	0x08009fd1
 8009f3c:	08009fb1 	.word	0x08009fb1
 8009f40:	08009fd1 	.word	0x08009fd1
 8009f44:	08009fd1 	.word	0x08009fd1
 8009f48:	08009fd1 	.word	0x08009fd1
 8009f4c:	08009fd1 	.word	0x08009fd1
 8009f50:	08009fd1 	.word	0x08009fd1
 8009f54:	08009fd1 	.word	0x08009fd1
 8009f58:	08009fd1 	.word	0x08009fd1
 8009f5c:	08009fb9 	.word	0x08009fb9
 8009f60:	08009fd1 	.word	0x08009fd1
 8009f64:	08009fd1 	.word	0x08009fd1
 8009f68:	08009fd1 	.word	0x08009fd1
 8009f6c:	08009fd1 	.word	0x08009fd1
 8009f70:	08009fd1 	.word	0x08009fd1
 8009f74:	08009fd1 	.word	0x08009fd1
 8009f78:	08009fd1 	.word	0x08009fd1
 8009f7c:	08009fc1 	.word	0x08009fc1
 8009f80:	08009fd1 	.word	0x08009fd1
 8009f84:	08009fd1 	.word	0x08009fd1
 8009f88:	08009fd1 	.word	0x08009fd1
 8009f8c:	08009fd1 	.word	0x08009fd1
 8009f90:	08009fd1 	.word	0x08009fd1
 8009f94:	08009fd1 	.word	0x08009fd1
 8009f98:	08009fd1 	.word	0x08009fd1
 8009f9c:	08009fc9 	.word	0x08009fc9
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fa6:	e050      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009fa8:	2304      	movs	r3, #4
 8009faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fae:	e04c      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009fb0:	2308      	movs	r3, #8
 8009fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb6:	e048      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009fb8:	2310      	movs	r3, #16
 8009fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fbe:	e044      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009fc0:	2320      	movs	r3, #32
 8009fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc6:	e040      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009fc8:	2340      	movs	r3, #64	; 0x40
 8009fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fce:	e03c      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009fd0:	2380      	movs	r3, #128	; 0x80
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd6:	e038      	b.n	800a04a <UART_SetConfig+0x7ae>
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a71      	ldr	r2, [pc, #452]	; (800a1a4 <UART_SetConfig+0x908>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d130      	bne.n	800a044 <UART_SetConfig+0x7a8>
 8009fe2:	4b6f      	ldr	r3, [pc, #444]	; (800a1a0 <UART_SetConfig+0x904>)
 8009fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe6:	f003 0307 	and.w	r3, r3, #7
 8009fea:	2b05      	cmp	r3, #5
 8009fec:	d826      	bhi.n	800a03c <UART_SetConfig+0x7a0>
 8009fee:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <UART_SetConfig+0x758>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a00d 	.word	0x0800a00d
 8009ff8:	0800a015 	.word	0x0800a015
 8009ffc:	0800a01d 	.word	0x0800a01d
 800a000:	0800a025 	.word	0x0800a025
 800a004:	0800a02d 	.word	0x0800a02d
 800a008:	0800a035 	.word	0x0800a035
 800a00c:	2302      	movs	r3, #2
 800a00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a012:	e01a      	b.n	800a04a <UART_SetConfig+0x7ae>
 800a014:	2304      	movs	r3, #4
 800a016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01a:	e016      	b.n	800a04a <UART_SetConfig+0x7ae>
 800a01c:	2308      	movs	r3, #8
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a022:	e012      	b.n	800a04a <UART_SetConfig+0x7ae>
 800a024:	2310      	movs	r3, #16
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02a:	e00e      	b.n	800a04a <UART_SetConfig+0x7ae>
 800a02c:	2320      	movs	r3, #32
 800a02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a032:	e00a      	b.n	800a04a <UART_SetConfig+0x7ae>
 800a034:	2340      	movs	r3, #64	; 0x40
 800a036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a03a:	e006      	b.n	800a04a <UART_SetConfig+0x7ae>
 800a03c:	2380      	movs	r3, #128	; 0x80
 800a03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a042:	e002      	b.n	800a04a <UART_SetConfig+0x7ae>
 800a044:	2380      	movs	r3, #128	; 0x80
 800a046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a55      	ldr	r2, [pc, #340]	; (800a1a4 <UART_SetConfig+0x908>)
 800a050:	4293      	cmp	r3, r2
 800a052:	f040 80f8 	bne.w	800a246 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a056:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a05a:	2b20      	cmp	r3, #32
 800a05c:	dc46      	bgt.n	800a0ec <UART_SetConfig+0x850>
 800a05e:	2b02      	cmp	r3, #2
 800a060:	db75      	blt.n	800a14e <UART_SetConfig+0x8b2>
 800a062:	3b02      	subs	r3, #2
 800a064:	2b1e      	cmp	r3, #30
 800a066:	d872      	bhi.n	800a14e <UART_SetConfig+0x8b2>
 800a068:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <UART_SetConfig+0x7d4>)
 800a06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06e:	bf00      	nop
 800a070:	0800a0f3 	.word	0x0800a0f3
 800a074:	0800a14f 	.word	0x0800a14f
 800a078:	0800a0fb 	.word	0x0800a0fb
 800a07c:	0800a14f 	.word	0x0800a14f
 800a080:	0800a14f 	.word	0x0800a14f
 800a084:	0800a14f 	.word	0x0800a14f
 800a088:	0800a10b 	.word	0x0800a10b
 800a08c:	0800a14f 	.word	0x0800a14f
 800a090:	0800a14f 	.word	0x0800a14f
 800a094:	0800a14f 	.word	0x0800a14f
 800a098:	0800a14f 	.word	0x0800a14f
 800a09c:	0800a14f 	.word	0x0800a14f
 800a0a0:	0800a14f 	.word	0x0800a14f
 800a0a4:	0800a14f 	.word	0x0800a14f
 800a0a8:	0800a11b 	.word	0x0800a11b
 800a0ac:	0800a14f 	.word	0x0800a14f
 800a0b0:	0800a14f 	.word	0x0800a14f
 800a0b4:	0800a14f 	.word	0x0800a14f
 800a0b8:	0800a14f 	.word	0x0800a14f
 800a0bc:	0800a14f 	.word	0x0800a14f
 800a0c0:	0800a14f 	.word	0x0800a14f
 800a0c4:	0800a14f 	.word	0x0800a14f
 800a0c8:	0800a14f 	.word	0x0800a14f
 800a0cc:	0800a14f 	.word	0x0800a14f
 800a0d0:	0800a14f 	.word	0x0800a14f
 800a0d4:	0800a14f 	.word	0x0800a14f
 800a0d8:	0800a14f 	.word	0x0800a14f
 800a0dc:	0800a14f 	.word	0x0800a14f
 800a0e0:	0800a14f 	.word	0x0800a14f
 800a0e4:	0800a14f 	.word	0x0800a14f
 800a0e8:	0800a141 	.word	0x0800a141
 800a0ec:	2b40      	cmp	r3, #64	; 0x40
 800a0ee:	d02a      	beq.n	800a146 <UART_SetConfig+0x8aa>
 800a0f0:	e02d      	b.n	800a14e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a0f2:	f7fd fa41 	bl	8007578 <HAL_RCCEx_GetD3PCLK1Freq>
 800a0f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a0f8:	e02f      	b.n	800a15a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a0fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fd fa50 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a108:	e027      	b.n	800a15a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a10a:	f107 0318 	add.w	r3, r7, #24
 800a10e:	4618      	mov	r0, r3
 800a110:	f7fd fb9c 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a118:	e01f      	b.n	800a15a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a11a:	4b21      	ldr	r3, [pc, #132]	; (800a1a0 <UART_SetConfig+0x904>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 0320 	and.w	r3, r3, #32
 800a122:	2b00      	cmp	r3, #0
 800a124:	d009      	beq.n	800a13a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a126:	4b1e      	ldr	r3, [pc, #120]	; (800a1a0 <UART_SetConfig+0x904>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	08db      	lsrs	r3, r3, #3
 800a12c:	f003 0303 	and.w	r3, r3, #3
 800a130:	4a1d      	ldr	r2, [pc, #116]	; (800a1a8 <UART_SetConfig+0x90c>)
 800a132:	fa22 f303 	lsr.w	r3, r2, r3
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a138:	e00f      	b.n	800a15a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a13a:	4b1b      	ldr	r3, [pc, #108]	; (800a1a8 <UART_SetConfig+0x90c>)
 800a13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a13e:	e00c      	b.n	800a15a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a140:	4b1a      	ldr	r3, [pc, #104]	; (800a1ac <UART_SetConfig+0x910>)
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a144:	e009      	b.n	800a15a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a14c:	e005      	b.n	800a15a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a158:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 81ee 	beq.w	800a53e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a166:	4a12      	ldr	r2, [pc, #72]	; (800a1b0 <UART_SetConfig+0x914>)
 800a168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a16c:	461a      	mov	r2, r3
 800a16e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a170:	fbb3 f3f2 	udiv	r3, r3, r2
 800a174:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	4613      	mov	r3, r2
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	4413      	add	r3, r2
 800a180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a182:	429a      	cmp	r2, r3
 800a184:	d305      	bcc.n	800a192 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a18c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a18e:	429a      	cmp	r2, r3
 800a190:	d910      	bls.n	800a1b4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800a192:	2301      	movs	r3, #1
 800a194:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a198:	e1d1      	b.n	800a53e <UART_SetConfig+0xca2>
 800a19a:	bf00      	nop
 800a19c:	40011c00 	.word	0x40011c00
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	58000c00 	.word	0x58000c00
 800a1a8:	03d09000 	.word	0x03d09000
 800a1ac:	003d0900 	.word	0x003d0900
 800a1b0:	0800e188 	.word	0x0800e188
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	60bb      	str	r3, [r7, #8]
 800a1ba:	60fa      	str	r2, [r7, #12]
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	4ac0      	ldr	r2, [pc, #768]	; (800a4c4 <UART_SetConfig+0xc28>)
 800a1c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	603b      	str	r3, [r7, #0]
 800a1cc:	607a      	str	r2, [r7, #4]
 800a1ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a1d6:	f7f6 f8eb 	bl	80003b0 <__aeabi_uldivmod>
 800a1da:	4602      	mov	r2, r0
 800a1dc:	460b      	mov	r3, r1
 800a1de:	4610      	mov	r0, r2
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	f04f 0200 	mov.w	r2, #0
 800a1e6:	f04f 0300 	mov.w	r3, #0
 800a1ea:	020b      	lsls	r3, r1, #8
 800a1ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a1f0:	0202      	lsls	r2, r0, #8
 800a1f2:	6979      	ldr	r1, [r7, #20]
 800a1f4:	6849      	ldr	r1, [r1, #4]
 800a1f6:	0849      	lsrs	r1, r1, #1
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	460c      	mov	r4, r1
 800a1fc:	4605      	mov	r5, r0
 800a1fe:	eb12 0804 	adds.w	r8, r2, r4
 800a202:	eb43 0905 	adc.w	r9, r3, r5
 800a206:	697b      	ldr	r3, [r7, #20]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	469a      	mov	sl, r3
 800a20e:	4693      	mov	fp, r2
 800a210:	4652      	mov	r2, sl
 800a212:	465b      	mov	r3, fp
 800a214:	4640      	mov	r0, r8
 800a216:	4649      	mov	r1, r9
 800a218:	f7f6 f8ca 	bl	80003b0 <__aeabi_uldivmod>
 800a21c:	4602      	mov	r2, r0
 800a21e:	460b      	mov	r3, r1
 800a220:	4613      	mov	r3, r2
 800a222:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a22a:	d308      	bcc.n	800a23e <UART_SetConfig+0x9a2>
 800a22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a22e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a232:	d204      	bcs.n	800a23e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a23a:	60da      	str	r2, [r3, #12]
 800a23c:	e17f      	b.n	800a53e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a244:	e17b      	b.n	800a53e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	69db      	ldr	r3, [r3, #28]
 800a24a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a24e:	f040 80bd 	bne.w	800a3cc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800a252:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a256:	2b20      	cmp	r3, #32
 800a258:	dc48      	bgt.n	800a2ec <UART_SetConfig+0xa50>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	db7b      	blt.n	800a356 <UART_SetConfig+0xaba>
 800a25e:	2b20      	cmp	r3, #32
 800a260:	d879      	bhi.n	800a356 <UART_SetConfig+0xaba>
 800a262:	a201      	add	r2, pc, #4	; (adr r2, 800a268 <UART_SetConfig+0x9cc>)
 800a264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a268:	0800a2f3 	.word	0x0800a2f3
 800a26c:	0800a2fb 	.word	0x0800a2fb
 800a270:	0800a357 	.word	0x0800a357
 800a274:	0800a357 	.word	0x0800a357
 800a278:	0800a303 	.word	0x0800a303
 800a27c:	0800a357 	.word	0x0800a357
 800a280:	0800a357 	.word	0x0800a357
 800a284:	0800a357 	.word	0x0800a357
 800a288:	0800a313 	.word	0x0800a313
 800a28c:	0800a357 	.word	0x0800a357
 800a290:	0800a357 	.word	0x0800a357
 800a294:	0800a357 	.word	0x0800a357
 800a298:	0800a357 	.word	0x0800a357
 800a29c:	0800a357 	.word	0x0800a357
 800a2a0:	0800a357 	.word	0x0800a357
 800a2a4:	0800a357 	.word	0x0800a357
 800a2a8:	0800a323 	.word	0x0800a323
 800a2ac:	0800a357 	.word	0x0800a357
 800a2b0:	0800a357 	.word	0x0800a357
 800a2b4:	0800a357 	.word	0x0800a357
 800a2b8:	0800a357 	.word	0x0800a357
 800a2bc:	0800a357 	.word	0x0800a357
 800a2c0:	0800a357 	.word	0x0800a357
 800a2c4:	0800a357 	.word	0x0800a357
 800a2c8:	0800a357 	.word	0x0800a357
 800a2cc:	0800a357 	.word	0x0800a357
 800a2d0:	0800a357 	.word	0x0800a357
 800a2d4:	0800a357 	.word	0x0800a357
 800a2d8:	0800a357 	.word	0x0800a357
 800a2dc:	0800a357 	.word	0x0800a357
 800a2e0:	0800a357 	.word	0x0800a357
 800a2e4:	0800a357 	.word	0x0800a357
 800a2e8:	0800a349 	.word	0x0800a349
 800a2ec:	2b40      	cmp	r3, #64	; 0x40
 800a2ee:	d02e      	beq.n	800a34e <UART_SetConfig+0xab2>
 800a2f0:	e031      	b.n	800a356 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2f2:	f7fb faa3 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 800a2f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2f8:	e033      	b.n	800a362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2fa:	f7fb fab5 	bl	8005868 <HAL_RCC_GetPCLK2Freq>
 800a2fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a300:	e02f      	b.n	800a362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a302:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a306:	4618      	mov	r0, r3
 800a308:	f7fd f94c 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a310:	e027      	b.n	800a362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a312:	f107 0318 	add.w	r3, r7, #24
 800a316:	4618      	mov	r0, r3
 800a318:	f7fd fa98 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a320:	e01f      	b.n	800a362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a322:	4b69      	ldr	r3, [pc, #420]	; (800a4c8 <UART_SetConfig+0xc2c>)
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0320 	and.w	r3, r3, #32
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d009      	beq.n	800a342 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a32e:	4b66      	ldr	r3, [pc, #408]	; (800a4c8 <UART_SetConfig+0xc2c>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	08db      	lsrs	r3, r3, #3
 800a334:	f003 0303 	and.w	r3, r3, #3
 800a338:	4a64      	ldr	r2, [pc, #400]	; (800a4cc <UART_SetConfig+0xc30>)
 800a33a:	fa22 f303 	lsr.w	r3, r2, r3
 800a33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a340:	e00f      	b.n	800a362 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800a342:	4b62      	ldr	r3, [pc, #392]	; (800a4cc <UART_SetConfig+0xc30>)
 800a344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a346:	e00c      	b.n	800a362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a348:	4b61      	ldr	r3, [pc, #388]	; (800a4d0 <UART_SetConfig+0xc34>)
 800a34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a34c:	e009      	b.n	800a362 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a34e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a354:	e005      	b.n	800a362 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800a356:	2300      	movs	r3, #0
 800a358:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a360:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 80ea 	beq.w	800a53e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	4a55      	ldr	r2, [pc, #340]	; (800a4c4 <UART_SetConfig+0xc28>)
 800a370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a374:	461a      	mov	r2, r3
 800a376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a378:	fbb3 f3f2 	udiv	r3, r3, r2
 800a37c:	005a      	lsls	r2, r3, #1
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	085b      	lsrs	r3, r3, #1
 800a384:	441a      	add	r2, r3
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a38e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a392:	2b0f      	cmp	r3, #15
 800a394:	d916      	bls.n	800a3c4 <UART_SetConfig+0xb28>
 800a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a39c:	d212      	bcs.n	800a3c4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	f023 030f 	bic.w	r3, r3, #15
 800a3a6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3aa:	085b      	lsrs	r3, r3, #1
 800a3ac:	b29b      	uxth	r3, r3
 800a3ae:	f003 0307 	and.w	r3, r3, #7
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a3c0:	60da      	str	r2, [r3, #12]
 800a3c2:	e0bc      	b.n	800a53e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a3ca:	e0b8      	b.n	800a53e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a3cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a3d0:	2b20      	cmp	r3, #32
 800a3d2:	dc4b      	bgt.n	800a46c <UART_SetConfig+0xbd0>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f2c0 8087 	blt.w	800a4e8 <UART_SetConfig+0xc4c>
 800a3da:	2b20      	cmp	r3, #32
 800a3dc:	f200 8084 	bhi.w	800a4e8 <UART_SetConfig+0xc4c>
 800a3e0:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <UART_SetConfig+0xb4c>)
 800a3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e6:	bf00      	nop
 800a3e8:	0800a473 	.word	0x0800a473
 800a3ec:	0800a47b 	.word	0x0800a47b
 800a3f0:	0800a4e9 	.word	0x0800a4e9
 800a3f4:	0800a4e9 	.word	0x0800a4e9
 800a3f8:	0800a483 	.word	0x0800a483
 800a3fc:	0800a4e9 	.word	0x0800a4e9
 800a400:	0800a4e9 	.word	0x0800a4e9
 800a404:	0800a4e9 	.word	0x0800a4e9
 800a408:	0800a493 	.word	0x0800a493
 800a40c:	0800a4e9 	.word	0x0800a4e9
 800a410:	0800a4e9 	.word	0x0800a4e9
 800a414:	0800a4e9 	.word	0x0800a4e9
 800a418:	0800a4e9 	.word	0x0800a4e9
 800a41c:	0800a4e9 	.word	0x0800a4e9
 800a420:	0800a4e9 	.word	0x0800a4e9
 800a424:	0800a4e9 	.word	0x0800a4e9
 800a428:	0800a4a3 	.word	0x0800a4a3
 800a42c:	0800a4e9 	.word	0x0800a4e9
 800a430:	0800a4e9 	.word	0x0800a4e9
 800a434:	0800a4e9 	.word	0x0800a4e9
 800a438:	0800a4e9 	.word	0x0800a4e9
 800a43c:	0800a4e9 	.word	0x0800a4e9
 800a440:	0800a4e9 	.word	0x0800a4e9
 800a444:	0800a4e9 	.word	0x0800a4e9
 800a448:	0800a4e9 	.word	0x0800a4e9
 800a44c:	0800a4e9 	.word	0x0800a4e9
 800a450:	0800a4e9 	.word	0x0800a4e9
 800a454:	0800a4e9 	.word	0x0800a4e9
 800a458:	0800a4e9 	.word	0x0800a4e9
 800a45c:	0800a4e9 	.word	0x0800a4e9
 800a460:	0800a4e9 	.word	0x0800a4e9
 800a464:	0800a4e9 	.word	0x0800a4e9
 800a468:	0800a4db 	.word	0x0800a4db
 800a46c:	2b40      	cmp	r3, #64	; 0x40
 800a46e:	d037      	beq.n	800a4e0 <UART_SetConfig+0xc44>
 800a470:	e03a      	b.n	800a4e8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a472:	f7fb f9e3 	bl	800583c <HAL_RCC_GetPCLK1Freq>
 800a476:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a478:	e03c      	b.n	800a4f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a47a:	f7fb f9f5 	bl	8005868 <HAL_RCC_GetPCLK2Freq>
 800a47e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a480:	e038      	b.n	800a4f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a486:	4618      	mov	r0, r3
 800a488:	f7fd f88c 	bl	80075a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a490:	e030      	b.n	800a4f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a492:	f107 0318 	add.w	r3, r7, #24
 800a496:	4618      	mov	r0, r3
 800a498:	f7fd f9d8 	bl	800784c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4a0:	e028      	b.n	800a4f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4a2:	4b09      	ldr	r3, [pc, #36]	; (800a4c8 <UART_SetConfig+0xc2c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0320 	and.w	r3, r3, #32
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d012      	beq.n	800a4d4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a4ae:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <UART_SetConfig+0xc2c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	08db      	lsrs	r3, r3, #3
 800a4b4:	f003 0303 	and.w	r3, r3, #3
 800a4b8:	4a04      	ldr	r2, [pc, #16]	; (800a4cc <UART_SetConfig+0xc30>)
 800a4ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a4be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a4c0:	e018      	b.n	800a4f4 <UART_SetConfig+0xc58>
 800a4c2:	bf00      	nop
 800a4c4:	0800e188 	.word	0x0800e188
 800a4c8:	58024400 	.word	0x58024400
 800a4cc:	03d09000 	.word	0x03d09000
 800a4d0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a4d4:	4b24      	ldr	r3, [pc, #144]	; (800a568 <UART_SetConfig+0xccc>)
 800a4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4d8:	e00c      	b.n	800a4f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a4da:	4b24      	ldr	r3, [pc, #144]	; (800a56c <UART_SetConfig+0xcd0>)
 800a4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4de:	e009      	b.n	800a4f4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4e6:	e005      	b.n	800a4f4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a4f2:	bf00      	nop
    }

    if (pclk != 0U)
 800a4f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d021      	beq.n	800a53e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fe:	4a1c      	ldr	r2, [pc, #112]	; (800a570 <UART_SetConfig+0xcd4>)
 800a500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a504:	461a      	mov	r2, r3
 800a506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a508:	fbb3 f2f2 	udiv	r2, r3, r2
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	685b      	ldr	r3, [r3, #4]
 800a510:	085b      	lsrs	r3, r3, #1
 800a512:	441a      	add	r2, r3
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	fbb2 f3f3 	udiv	r3, r2, r3
 800a51c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a51e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a520:	2b0f      	cmp	r3, #15
 800a522:	d909      	bls.n	800a538 <UART_SetConfig+0xc9c>
 800a524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a52a:	d205      	bcs.n	800a538 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52e:	b29a      	uxth	r2, r3
 800a530:	697b      	ldr	r3, [r7, #20]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	60da      	str	r2, [r3, #12]
 800a536:	e002      	b.n	800a53e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2201      	movs	r2, #1
 800a542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	2201      	movs	r2, #1
 800a54a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2200      	movs	r2, #0
 800a552:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	2200      	movs	r2, #0
 800a558:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a55a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3748      	adds	r7, #72	; 0x48
 800a562:	46bd      	mov	sp, r7
 800a564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a568:	03d09000 	.word	0x03d09000
 800a56c:	003d0900 	.word	0x003d0900
 800a570:	0800e188 	.word	0x0800e188

0800a574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00a      	beq.n	800a59e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5a2:	f003 0302 	and.w	r3, r3, #2
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5c4:	f003 0304 	and.w	r3, r3, #4
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d00a      	beq.n	800a5e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	430a      	orrs	r2, r1
 800a5e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5e6:	f003 0308 	and.w	r3, r3, #8
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d00a      	beq.n	800a604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	430a      	orrs	r2, r1
 800a602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a608:	f003 0310 	and.w	r3, r3, #16
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d00a      	beq.n	800a626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	430a      	orrs	r2, r1
 800a624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	f003 0320 	and.w	r3, r3, #32
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00a      	beq.n	800a648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	430a      	orrs	r2, r1
 800a646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01a      	beq.n	800a68a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	430a      	orrs	r2, r1
 800a668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a66e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a672:	d10a      	bne.n	800a68a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	430a      	orrs	r2, r1
 800a688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a68e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a692:	2b00      	cmp	r3, #0
 800a694:	d00a      	beq.n	800a6ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	605a      	str	r2, [r3, #4]
  }
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b098      	sub	sp, #96	; 0x60
 800a6bc:	af02      	add	r7, sp, #8
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a6c8:	f7f7 fe96 	bl	80023f8 <HAL_GetTick>
 800a6cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f003 0308 	and.w	r3, r3, #8
 800a6d8:	2b08      	cmp	r3, #8
 800a6da:	d12f      	bne.n	800a73c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a6dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 f88e 	bl	800a80c <UART_WaitOnFlagUntilTimeout>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d022      	beq.n	800a73c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6fe:	e853 3f00 	ldrex	r3, [r3]
 800a702:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a70a:	653b      	str	r3, [r7, #80]	; 0x50
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	461a      	mov	r2, r3
 800a712:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a714:	647b      	str	r3, [r7, #68]	; 0x44
 800a716:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a718:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a71a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a71c:	e841 2300 	strex	r3, r2, [r1]
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a724:	2b00      	cmp	r3, #0
 800a726:	d1e6      	bne.n	800a6f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2220      	movs	r2, #32
 800a72c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2200      	movs	r2, #0
 800a734:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a738:	2303      	movs	r3, #3
 800a73a:	e063      	b.n	800a804 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 0304 	and.w	r3, r3, #4
 800a746:	2b04      	cmp	r3, #4
 800a748:	d149      	bne.n	800a7de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a74a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a752:	2200      	movs	r2, #0
 800a754:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f000 f857 	bl	800a80c <UART_WaitOnFlagUntilTimeout>
 800a75e:	4603      	mov	r3, r0
 800a760:	2b00      	cmp	r3, #0
 800a762:	d03c      	beq.n	800a7de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	e853 3f00 	ldrex	r3, [r3]
 800a770:	623b      	str	r3, [r7, #32]
   return(result);
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a778:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a782:	633b      	str	r3, [r7, #48]	; 0x30
 800a784:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e6      	bne.n	800a764 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	3308      	adds	r3, #8
 800a79c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	e853 3f00 	ldrex	r3, [r3]
 800a7a4:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f023 0301 	bic.w	r3, r3, #1
 800a7ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3308      	adds	r3, #8
 800a7b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a7b6:	61fa      	str	r2, [r7, #28]
 800a7b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7ba:	69b9      	ldr	r1, [r7, #24]
 800a7bc:	69fa      	ldr	r2, [r7, #28]
 800a7be:	e841 2300 	strex	r3, r2, [r1]
 800a7c2:	617b      	str	r3, [r7, #20]
   return(result);
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d1e5      	bne.n	800a796 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2220      	movs	r2, #32
 800a7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e012      	b.n	800a804 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	2220      	movs	r2, #32
 800a7e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2220      	movs	r2, #32
 800a7ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3758      	adds	r7, #88	; 0x58
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	603b      	str	r3, [r7, #0]
 800a818:	4613      	mov	r3, r2
 800a81a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a81c:	e049      	b.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a824:	d045      	beq.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a826:	f7f7 fde7 	bl	80023f8 <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	429a      	cmp	r2, r3
 800a834:	d302      	bcc.n	800a83c <UART_WaitOnFlagUntilTimeout+0x30>
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d101      	bne.n	800a840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a83c:	2303      	movs	r3, #3
 800a83e:	e048      	b.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f003 0304 	and.w	r3, r3, #4
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d031      	beq.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	f003 0308 	and.w	r3, r3, #8
 800a858:	2b08      	cmp	r3, #8
 800a85a:	d110      	bne.n	800a87e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2208      	movs	r2, #8
 800a862:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 f839 	bl	800a8dc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2208      	movs	r2, #8
 800a86e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2200      	movs	r2, #0
 800a876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a87a:	2301      	movs	r3, #1
 800a87c:	e029      	b.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a88c:	d111      	bne.n	800a8b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 f81f 	bl	800a8dc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e00f      	b.n	800a8d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69da      	ldr	r2, [r3, #28]
 800a8b8:	68bb      	ldr	r3, [r7, #8]
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	bf0c      	ite	eq
 800a8c2:	2301      	moveq	r3, #1
 800a8c4:	2300      	movne	r3, #0
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	79fb      	ldrb	r3, [r7, #7]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d0a6      	beq.n	800a81e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
	...

0800a8dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b095      	sub	sp, #84	; 0x54
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a8f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a902:	643b      	str	r3, [r7, #64]	; 0x40
 800a904:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a908:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e6      	bne.n	800a8e4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	3308      	adds	r3, #8
 800a91c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a91e:	6a3b      	ldr	r3, [r7, #32]
 800a920:	e853 3f00 	ldrex	r3, [r3]
 800a924:	61fb      	str	r3, [r7, #28]
   return(result);
 800a926:	69fa      	ldr	r2, [r7, #28]
 800a928:	4b1e      	ldr	r3, [pc, #120]	; (800a9a4 <UART_EndRxTransfer+0xc8>)
 800a92a:	4013      	ands	r3, r2
 800a92c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	3308      	adds	r3, #8
 800a934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a936:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a938:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a93a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a93c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a93e:	e841 2300 	strex	r3, r2, [r1]
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	2b00      	cmp	r3, #0
 800a948:	d1e5      	bne.n	800a916 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d118      	bne.n	800a984 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	e853 3f00 	ldrex	r3, [r3]
 800a95e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	f023 0310 	bic.w	r3, r3, #16
 800a966:	647b      	str	r3, [r7, #68]	; 0x44
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	461a      	mov	r2, r3
 800a96e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a970:	61bb      	str	r3, [r7, #24]
 800a972:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a974:	6979      	ldr	r1, [r7, #20]
 800a976:	69ba      	ldr	r2, [r7, #24]
 800a978:	e841 2300 	strex	r3, r2, [r1]
 800a97c:	613b      	str	r3, [r7, #16]
   return(result);
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1e6      	bne.n	800a952 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2220      	movs	r2, #32
 800a988:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a998:	bf00      	nop
 800a99a:	3754      	adds	r7, #84	; 0x54
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	effffffe 	.word	0xeffffffe

0800a9a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a9a8:	b480      	push	{r7}
 800a9aa:	b085      	sub	sp, #20
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d101      	bne.n	800a9be <HAL_UARTEx_DisableFifoMode+0x16>
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	e027      	b.n	800aa0e <HAL_UARTEx_DisableFifoMode+0x66>
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2224      	movs	r2, #36	; 0x24
 800a9ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	681a      	ldr	r2, [r3, #0]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f022 0201 	bic.w	r2, r2, #1
 800a9e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a9ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	68fa      	ldr	r2, [r7, #12]
 800a9fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2220      	movs	r2, #32
 800aa00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa0c:	2300      	movs	r3, #0
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b084      	sub	sp, #16
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
 800aa22:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d101      	bne.n	800aa32 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aa2e:	2302      	movs	r3, #2
 800aa30:	e02d      	b.n	800aa8e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2201      	movs	r2, #1
 800aa36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2224      	movs	r2, #36	; 0x24
 800aa3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	681a      	ldr	r2, [r3, #0]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f022 0201 	bic.w	r2, r2, #1
 800aa58:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f850 	bl	800ab14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2220      	movs	r2, #32
 800aa80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b084      	sub	sp, #16
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d101      	bne.n	800aaae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aaaa:	2302      	movs	r3, #2
 800aaac:	e02d      	b.n	800ab0a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2201      	movs	r2, #1
 800aab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2224      	movs	r2, #36	; 0x24
 800aaba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f022 0201 	bic.w	r2, r2, #1
 800aad4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	683a      	ldr	r2, [r7, #0]
 800aae6:	430a      	orrs	r2, r1
 800aae8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f812 	bl	800ab14 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2220      	movs	r2, #32
 800aafc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
	...

0800ab14 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d108      	bne.n	800ab36 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2201      	movs	r2, #1
 800ab28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ab34:	e031      	b.n	800ab9a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ab36:	2310      	movs	r3, #16
 800ab38:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ab3a:	2310      	movs	r3, #16
 800ab3c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	0e5b      	lsrs	r3, r3, #25
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	f003 0307 	and.w	r3, r3, #7
 800ab4c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	0f5b      	lsrs	r3, r3, #29
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	f003 0307 	and.w	r3, r3, #7
 800ab5c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab5e:	7bbb      	ldrb	r3, [r7, #14]
 800ab60:	7b3a      	ldrb	r2, [r7, #12]
 800ab62:	4911      	ldr	r1, [pc, #68]	; (800aba8 <UARTEx_SetNbDataToProcess+0x94>)
 800ab64:	5c8a      	ldrb	r2, [r1, r2]
 800ab66:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab6a:	7b3a      	ldrb	r2, [r7, #12]
 800ab6c:	490f      	ldr	r1, [pc, #60]	; (800abac <UARTEx_SetNbDataToProcess+0x98>)
 800ab6e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab70:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab7c:	7bfb      	ldrb	r3, [r7, #15]
 800ab7e:	7b7a      	ldrb	r2, [r7, #13]
 800ab80:	4909      	ldr	r1, [pc, #36]	; (800aba8 <UARTEx_SetNbDataToProcess+0x94>)
 800ab82:	5c8a      	ldrb	r2, [r1, r2]
 800ab84:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab88:	7b7a      	ldrb	r2, [r7, #13]
 800ab8a:	4908      	ldr	r1, [pc, #32]	; (800abac <UARTEx_SetNbDataToProcess+0x98>)
 800ab8c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab8e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab92:	b29a      	uxth	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab9a:	bf00      	nop
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
 800aba6:	bf00      	nop
 800aba8:	0800e1a0 	.word	0x0800e1a0
 800abac:	0800e1a8 	.word	0x0800e1a8

0800abb0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800abb0:	b084      	sub	sp, #16
 800abb2:	b480      	push	{r7}
 800abb4:	b085      	sub	sp, #20
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	f107 001c 	add.w	r0, r7, #28
 800abbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800abc6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800abc8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800abca:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800abcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800abce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800abd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800abd2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800abd6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	4313      	orrs	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	4b07      	ldr	r3, [pc, #28]	; (800ac00 <SDMMC_Init+0x50>)
 800abe4:	4013      	ands	r3, r2
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	431a      	orrs	r2, r3
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	b004      	add	sp, #16
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	ffc02c00 	.word	0xffc02c00

0800ac04 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	370c      	adds	r7, #12
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b083      	sub	sp, #12
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f043 0203 	orr.w	r2, r3, #3
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0303 	and.w	r3, r3, #3
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ac7a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800ac80:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800ac86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68da      	ldr	r2, [r3, #12]
 800ac92:	4b06      	ldr	r3, [pc, #24]	; (800acac <SDMMC_SendCommand+0x50>)
 800ac94:	4013      	ands	r3, r2
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	fffee0c0 	.word	0xfffee0c0

0800acb0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	b2db      	uxtb	r3, r3
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800acca:	b480      	push	{r7}
 800accc:	b085      	sub	sp, #20
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3314      	adds	r3, #20
 800acd8:	461a      	mov	r2, r3
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	4413      	add	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ad16:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800ad1c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800ad22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	431a      	orrs	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0

}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ad56:	2310      	movs	r3, #16
 800ad58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad60:	2300      	movs	r3, #0
 800ad62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad6a:	f107 0308 	add.w	r3, r7, #8
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7ff ff73 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ad76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad7a:	2110      	movs	r1, #16
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 fa21 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800ad82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad84:	69fb      	ldr	r3, [r7, #28]
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3720      	adds	r7, #32
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b088      	sub	sp, #32
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ad9c:	2311      	movs	r3, #17
 800ad9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ada0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ada4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adb0:	f107 0308 	add.w	r3, r7, #8
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff ff50 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800adbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc0:	2111      	movs	r1, #17
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f9fe 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800adc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adca:	69fb      	ldr	r3, [r7, #28]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3720      	adds	r7, #32
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ade2:	2312      	movs	r3, #18
 800ade4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ade6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf6:	f107 0308 	add.w	r3, r7, #8
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7ff ff2d 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ae02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae06:	2112      	movs	r1, #18
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 f9db 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800ae0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae10:	69fb      	ldr	r3, [r7, #28]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b088      	sub	sp, #32
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ae28:	2318      	movs	r3, #24
 800ae2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae32:	2300      	movs	r3, #0
 800ae34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae3c:	f107 0308 	add.w	r3, r7, #8
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7ff ff0a 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ae48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae4c:	2118      	movs	r1, #24
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f9b8 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800ae54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae56:	69fb      	ldr	r3, [r7, #28]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3720      	adds	r7, #32
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b088      	sub	sp, #32
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ae6e:	2319      	movs	r3, #25
 800ae70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae72:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae82:	f107 0308 	add.w	r3, r7, #8
 800ae86:	4619      	mov	r1, r3
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f7ff fee7 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ae8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae92:	2119      	movs	r1, #25
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f995 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800ae9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae9c:	69fb      	ldr	r3, [r7, #28]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b088      	sub	sp, #32
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
 800aeae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aeb4:	2307      	movs	r3, #7
 800aeb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aebc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aebe:	2300      	movs	r3, #0
 800aec0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aec6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aec8:	f107 0308 	add.w	r3, r7, #8
 800aecc:	4619      	mov	r1, r3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7ff fec4 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800aed4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aed8:	2107      	movs	r1, #7
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f972 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800aee0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aee2:	69fb      	ldr	r3, [r7, #28]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3720      	adds	r7, #32
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b088      	sub	sp, #32
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aef8:	2300      	movs	r3, #0
 800aefa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800aefc:	2300      	movs	r3, #0
 800aefe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af00:	2300      	movs	r3, #0
 800af02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af0a:	f107 0308 	add.w	r3, r7, #8
 800af0e:	4619      	mov	r1, r3
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f7ff fea3 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 fb96 	bl	800b648 <SDMMC_GetCmdError>
 800af1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af1e:	69fb      	ldr	r3, [r7, #28]
}
 800af20:	4618      	mov	r0, r3
 800af22:	3720      	adds	r7, #32
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}

0800af28 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b088      	sub	sp, #32
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800af30:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800af34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af36:	2308      	movs	r3, #8
 800af38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af40:	2300      	movs	r3, #0
 800af42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af4a:	f107 0308 	add.w	r3, r7, #8
 800af4e:	4619      	mov	r1, r3
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f7ff fe83 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fb28 	bl	800b5ac <SDMMC_GetCmdResp7>
 800af5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af5e:	69fb      	ldr	r3, [r7, #28]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3720      	adds	r7, #32
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b088      	sub	sp, #32
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800af76:	2337      	movs	r3, #55	; 0x37
 800af78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af80:	2300      	movs	r3, #0
 800af82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800af88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af8a:	f107 0308 	add.w	r3, r7, #8
 800af8e:	4619      	mov	r1, r3
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff fe63 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af96:	f241 3288 	movw	r2, #5000	; 0x1388
 800af9a:	2137      	movs	r1, #55	; 0x37
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f000 f911 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800afa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afa4:	69fb      	ldr	r3, [r7, #28]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3720      	adds	r7, #32
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b088      	sub	sp, #32
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800afbc:	2329      	movs	r3, #41	; 0x29
 800afbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afc6:	2300      	movs	r3, #0
 800afc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afd0:	f107 0308 	add.w	r3, r7, #8
 800afd4:	4619      	mov	r1, r3
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f7ff fe40 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 fa2d 	bl	800b43c <SDMMC_GetCmdResp3>
 800afe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afe4:	69fb      	ldr	r3, [r7, #28]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3720      	adds	r7, #32
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800afee:	b580      	push	{r7, lr}
 800aff0:	b088      	sub	sp, #32
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
 800aff6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800affc:	2306      	movs	r3, #6
 800affe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b000:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b004:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b006:	2300      	movs	r3, #0
 800b008:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b00a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b00e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b010:	f107 0308 	add.w	r3, r7, #8
 800b014:	4619      	mov	r1, r3
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7ff fe20 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b01c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b020:	2106      	movs	r1, #6
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 f8ce 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800b028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b02a:	69fb      	ldr	r3, [r7, #28]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3720      	adds	r7, #32
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b088      	sub	sp, #32
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b03c:	2300      	movs	r3, #0
 800b03e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b040:	2333      	movs	r3, #51	; 0x33
 800b042:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b044:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b048:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b04a:	2300      	movs	r3, #0
 800b04c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b04e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b052:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b054:	f107 0308 	add.w	r3, r7, #8
 800b058:	4619      	mov	r1, r3
 800b05a:	6878      	ldr	r0, [r7, #4]
 800b05c:	f7ff fdfe 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b060:	f241 3288 	movw	r2, #5000	; 0x1388
 800b064:	2133      	movs	r1, #51	; 0x33
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f8ac 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800b06c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b06e:	69fb      	ldr	r3, [r7, #28]
}
 800b070:	4618      	mov	r0, r3
 800b072:	3720      	adds	r7, #32
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}

0800b078 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b088      	sub	sp, #32
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b080:	2300      	movs	r3, #0
 800b082:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b084:	2302      	movs	r3, #2
 800b086:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b088:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b08c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b08e:	2300      	movs	r3, #0
 800b090:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b096:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b098:	f107 0308 	add.w	r3, r7, #8
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7ff fddc 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f97f 	bl	800b3a8 <SDMMC_GetCmdResp2>
 800b0aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0ac:	69fb      	ldr	r3, [r7, #28]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3720      	adds	r7, #32
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}

0800b0b6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0b6:	b580      	push	{r7, lr}
 800b0b8:	b088      	sub	sp, #32
 800b0ba:	af00      	add	r7, sp, #0
 800b0bc:	6078      	str	r0, [r7, #4]
 800b0be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b0c4:	2309      	movs	r3, #9
 800b0c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b0c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b0cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b0d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0d8:	f107 0308 	add.w	r3, r7, #8
 800b0dc:	4619      	mov	r1, r3
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f7ff fdbc 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f95f 	bl	800b3a8 <SDMMC_GetCmdResp2>
 800b0ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0ec:	69fb      	ldr	r3, [r7, #28]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3720      	adds	r7, #32
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b088      	sub	sp, #32
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b100:	2300      	movs	r3, #0
 800b102:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b104:	2303      	movs	r3, #3
 800b106:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b108:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b10c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b10e:	2300      	movs	r3, #0
 800b110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b116:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b118:	f107 0308 	add.w	r3, r7, #8
 800b11c:	4619      	mov	r1, r3
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	f7ff fd9c 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b124:	683a      	ldr	r2, [r7, #0]
 800b126:	2103      	movs	r1, #3
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f000 f9c7 	bl	800b4bc <SDMMC_GetCmdResp6>
 800b12e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b130:	69fb      	ldr	r3, [r7, #28]
}
 800b132:	4618      	mov	r0, r3
 800b134:	3720      	adds	r7, #32
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}

0800b13a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b13a:	b580      	push	{r7, lr}
 800b13c:	b088      	sub	sp, #32
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
 800b142:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b148:	230d      	movs	r3, #13
 800b14a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b14c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b150:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b152:	2300      	movs	r3, #0
 800b154:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b15a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b15c:	f107 0308 	add.w	r3, r7, #8
 800b160:	4619      	mov	r1, r3
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f7ff fd7a 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b168:	f241 3288 	movw	r2, #5000	; 0x1388
 800b16c:	210d      	movs	r1, #13
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f828 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800b174:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b176:	69fb      	ldr	r3, [r7, #28]
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3720      	adds	r7, #32
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b188:	2300      	movs	r3, #0
 800b18a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b18c:	230d      	movs	r3, #13
 800b18e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b190:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b196:	2300      	movs	r3, #0
 800b198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b19a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b19e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b1a0:	f107 0308 	add.w	r3, r7, #8
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	6878      	ldr	r0, [r7, #4]
 800b1a8:	f7ff fd58 	bl	800ac5c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b1ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1b0:	210d      	movs	r1, #13
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f806 	bl	800b1c4 <SDMMC_GetCmdResp1>
 800b1b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b1ba:	69fb      	ldr	r3, [r7, #28]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3720      	adds	r7, #32
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b088      	sub	sp, #32
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	607a      	str	r2, [r7, #4]
 800b1d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b1d2:	4b70      	ldr	r3, [pc, #448]	; (800b394 <SDMMC_GetCmdResp1+0x1d0>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4a70      	ldr	r2, [pc, #448]	; (800b398 <SDMMC_GetCmdResp1+0x1d4>)
 800b1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1dc:	0a5a      	lsrs	r2, r3, #9
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	fb02 f303 	mul.w	r3, r2, r3
 800b1e4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b1e6:	69fb      	ldr	r3, [r7, #28]
 800b1e8:	1e5a      	subs	r2, r3, #1
 800b1ea:	61fa      	str	r2, [r7, #28]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d102      	bne.n	800b1f6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1f4:	e0c9      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1fa:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b1fc:	69ba      	ldr	r2, [r7, #24]
 800b1fe:	4b67      	ldr	r3, [pc, #412]	; (800b39c <SDMMC_GetCmdResp1+0x1d8>)
 800b200:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0ef      	beq.n	800b1e6 <SDMMC_GetCmdResp1+0x22>
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1ea      	bne.n	800b1e6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d004      	beq.n	800b226 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2204      	movs	r2, #4
 800b220:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b222:	2304      	movs	r3, #4
 800b224:	e0b1      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22a:	f003 0301 	and.w	r3, r3, #1
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d004      	beq.n	800b23c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2201      	movs	r2, #1
 800b236:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b238:	2301      	movs	r3, #1
 800b23a:	e0a6      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4a58      	ldr	r2, [pc, #352]	; (800b3a0 <SDMMC_GetCmdResp1+0x1dc>)
 800b240:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7ff fd34 	bl	800acb0 <SDMMC_GetCommandResponse>
 800b248:	4603      	mov	r3, r0
 800b24a:	461a      	mov	r2, r3
 800b24c:	7afb      	ldrb	r3, [r7, #11]
 800b24e:	4293      	cmp	r3, r2
 800b250:	d001      	beq.n	800b256 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b252:	2301      	movs	r3, #1
 800b254:	e099      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b256:	2100      	movs	r1, #0
 800b258:	68f8      	ldr	r0, [r7, #12]
 800b25a:	f7ff fd36 	bl	800acca <SDMMC_GetResponse>
 800b25e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b260:	697a      	ldr	r2, [r7, #20]
 800b262:	4b50      	ldr	r3, [pc, #320]	; (800b3a4 <SDMMC_GetCmdResp1+0x1e0>)
 800b264:	4013      	ands	r3, r2
 800b266:	2b00      	cmp	r3, #0
 800b268:	d101      	bne.n	800b26e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b26a:	2300      	movs	r3, #0
 800b26c:	e08d      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	da02      	bge.n	800b27a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b278:	e087      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d001      	beq.n	800b288 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b284:	2340      	movs	r3, #64	; 0x40
 800b286:	e080      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b292:	2380      	movs	r3, #128	; 0x80
 800b294:	e079      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b2a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2a4:	e071      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d002      	beq.n	800b2b6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b2b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2b4:	e069      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b2b6:	697b      	ldr	r3, [r7, #20]
 800b2b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b2c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2c4:	e061      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d002      	beq.n	800b2d6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b2d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2d4:	e059      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2e4:	e051      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d002      	beq.n	800b2f6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2f4:	e049      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2f6:	697b      	ldr	r3, [r7, #20]
 800b2f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b300:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b304:	e041      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d002      	beq.n	800b316 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b310:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b314:	e039      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b316:	697b      	ldr	r3, [r7, #20]
 800b318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d002      	beq.n	800b326 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b320:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b324:	e031      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d002      	beq.n	800b336 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b330:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b334:	e029      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b340:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b344:	e021      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d002      	beq.n	800b356 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b350:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b354:	e019      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d002      	beq.n	800b366 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b360:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b364:	e011      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d002      	beq.n	800b376 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b370:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b374:	e009      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	f003 0308 	and.w	r3, r3, #8
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d002      	beq.n	800b386 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b380:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b384:	e001      	b.n	800b38a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3720      	adds	r7, #32
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	24000000 	.word	0x24000000
 800b398:	10624dd3 	.word	0x10624dd3
 800b39c:	00200045 	.word	0x00200045
 800b3a0:	002000c5 	.word	0x002000c5
 800b3a4:	fdffe008 	.word	0xfdffe008

0800b3a8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b085      	sub	sp, #20
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b3b0:	4b1f      	ldr	r3, [pc, #124]	; (800b430 <SDMMC_GetCmdResp2+0x88>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a1f      	ldr	r2, [pc, #124]	; (800b434 <SDMMC_GetCmdResp2+0x8c>)
 800b3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ba:	0a5b      	lsrs	r3, r3, #9
 800b3bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3c0:	fb02 f303 	mul.w	r3, r2, r3
 800b3c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	1e5a      	subs	r2, r3, #1
 800b3ca:	60fa      	str	r2, [r7, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d102      	bne.n	800b3d6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3d4:	e026      	b.n	800b424 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d0ef      	beq.n	800b3c6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1ea      	bne.n	800b3c6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f4:	f003 0304 	and.w	r3, r3, #4
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d004      	beq.n	800b406 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2204      	movs	r2, #4
 800b400:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b402:	2304      	movs	r3, #4
 800b404:	e00e      	b.n	800b424 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b40a:	f003 0301 	and.w	r3, r3, #1
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d004      	beq.n	800b41c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b418:	2301      	movs	r3, #1
 800b41a:	e003      	b.n	800b424 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a06      	ldr	r2, [pc, #24]	; (800b438 <SDMMC_GetCmdResp2+0x90>)
 800b420:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b422:	2300      	movs	r3, #0
}
 800b424:	4618      	mov	r0, r3
 800b426:	3714      	adds	r7, #20
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr
 800b430:	24000000 	.word	0x24000000
 800b434:	10624dd3 	.word	0x10624dd3
 800b438:	002000c5 	.word	0x002000c5

0800b43c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b444:	4b1a      	ldr	r3, [pc, #104]	; (800b4b0 <SDMMC_GetCmdResp3+0x74>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a1a      	ldr	r2, [pc, #104]	; (800b4b4 <SDMMC_GetCmdResp3+0x78>)
 800b44a:	fba2 2303 	umull	r2, r3, r2, r3
 800b44e:	0a5b      	lsrs	r3, r3, #9
 800b450:	f241 3288 	movw	r2, #5000	; 0x1388
 800b454:	fb02 f303 	mul.w	r3, r2, r3
 800b458:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	1e5a      	subs	r2, r3, #1
 800b45e:	60fa      	str	r2, [r7, #12]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d102      	bne.n	800b46a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b464:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b468:	e01b      	b.n	800b4a2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b476:	2b00      	cmp	r3, #0
 800b478:	d0ef      	beq.n	800b45a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1ea      	bne.n	800b45a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b488:	f003 0304 	and.w	r3, r3, #4
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d004      	beq.n	800b49a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2204      	movs	r2, #4
 800b494:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b496:	2304      	movs	r3, #4
 800b498:	e003      	b.n	800b4a2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	4a06      	ldr	r2, [pc, #24]	; (800b4b8 <SDMMC_GetCmdResp3+0x7c>)
 800b49e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3714      	adds	r7, #20
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	24000000 	.word	0x24000000
 800b4b4:	10624dd3 	.word	0x10624dd3
 800b4b8:	002000c5 	.word	0x002000c5

0800b4bc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b088      	sub	sp, #32
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	460b      	mov	r3, r1
 800b4c6:	607a      	str	r2, [r7, #4]
 800b4c8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b4ca:	4b35      	ldr	r3, [pc, #212]	; (800b5a0 <SDMMC_GetCmdResp6+0xe4>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	4a35      	ldr	r2, [pc, #212]	; (800b5a4 <SDMMC_GetCmdResp6+0xe8>)
 800b4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800b4d4:	0a5b      	lsrs	r3, r3, #9
 800b4d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4da:	fb02 f303 	mul.w	r3, r2, r3
 800b4de:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	1e5a      	subs	r2, r3, #1
 800b4e4:	61fa      	str	r2, [r7, #28]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d102      	bne.n	800b4f0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4ea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4ee:	e052      	b.n	800b596 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4f4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0ef      	beq.n	800b4e0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1ea      	bne.n	800b4e0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b50e:	f003 0304 	and.w	r3, r3, #4
 800b512:	2b00      	cmp	r3, #0
 800b514:	d004      	beq.n	800b520 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2204      	movs	r2, #4
 800b51a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b51c:	2304      	movs	r3, #4
 800b51e:	e03a      	b.n	800b596 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b524:	f003 0301 	and.w	r3, r3, #1
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d004      	beq.n	800b536 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2201      	movs	r2, #1
 800b530:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b532:	2301      	movs	r3, #1
 800b534:	e02f      	b.n	800b596 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f7ff fbba 	bl	800acb0 <SDMMC_GetCommandResponse>
 800b53c:	4603      	mov	r3, r0
 800b53e:	461a      	mov	r2, r3
 800b540:	7afb      	ldrb	r3, [r7, #11]
 800b542:	4293      	cmp	r3, r2
 800b544:	d001      	beq.n	800b54a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b546:	2301      	movs	r3, #1
 800b548:	e025      	b.n	800b596 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	4a16      	ldr	r2, [pc, #88]	; (800b5a8 <SDMMC_GetCmdResp6+0xec>)
 800b54e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b550:	2100      	movs	r1, #0
 800b552:	68f8      	ldr	r0, [r7, #12]
 800b554:	f7ff fbb9 	bl	800acca <SDMMC_GetResponse>
 800b558:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b560:	2b00      	cmp	r3, #0
 800b562:	d106      	bne.n	800b572 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	0c1b      	lsrs	r3, r3, #16
 800b568:	b29a      	uxth	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b56e:	2300      	movs	r3, #0
 800b570:	e011      	b.n	800b596 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d002      	beq.n	800b582 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b57c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b580:	e009      	b.n	800b596 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d002      	beq.n	800b592 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b58c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b590:	e001      	b.n	800b596 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b596:	4618      	mov	r0, r3
 800b598:	3720      	adds	r7, #32
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	24000000 	.word	0x24000000
 800b5a4:	10624dd3 	.word	0x10624dd3
 800b5a8:	002000c5 	.word	0x002000c5

0800b5ac <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b5b4:	4b22      	ldr	r3, [pc, #136]	; (800b640 <SDMMC_GetCmdResp7+0x94>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a22      	ldr	r2, [pc, #136]	; (800b644 <SDMMC_GetCmdResp7+0x98>)
 800b5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800b5be:	0a5b      	lsrs	r3, r3, #9
 800b5c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5c4:	fb02 f303 	mul.w	r3, r2, r3
 800b5c8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	1e5a      	subs	r2, r3, #1
 800b5ce:	60fa      	str	r2, [r7, #12]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d102      	bne.n	800b5da <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5d8:	e02c      	b.n	800b634 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5de:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d0ef      	beq.n	800b5ca <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d1ea      	bne.n	800b5ca <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f8:	f003 0304 	and.w	r3, r3, #4
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d004      	beq.n	800b60a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2204      	movs	r2, #4
 800b604:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b606:	2304      	movs	r3, #4
 800b608:	e014      	b.n	800b634 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2201      	movs	r2, #1
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b61c:	2301      	movs	r3, #1
 800b61e:	e009      	b.n	800b634 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2240      	movs	r2, #64	; 0x40
 800b630:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b632:	2300      	movs	r3, #0

}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr
 800b640:	24000000 	.word	0x24000000
 800b644:	10624dd3 	.word	0x10624dd3

0800b648 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b648:	b480      	push	{r7}
 800b64a:	b085      	sub	sp, #20
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800b650:	4b11      	ldr	r3, [pc, #68]	; (800b698 <SDMMC_GetCmdError+0x50>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a11      	ldr	r2, [pc, #68]	; (800b69c <SDMMC_GetCmdError+0x54>)
 800b656:	fba2 2303 	umull	r2, r3, r2, r3
 800b65a:	0a5b      	lsrs	r3, r3, #9
 800b65c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b660:	fb02 f303 	mul.w	r3, r2, r3
 800b664:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	1e5a      	subs	r2, r3, #1
 800b66a:	60fa      	str	r2, [r7, #12]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b670:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b674:	e009      	b.n	800b68a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b67a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d0f1      	beq.n	800b666 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	4a06      	ldr	r2, [pc, #24]	; (800b6a0 <SDMMC_GetCmdError+0x58>)
 800b686:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr
 800b696:	bf00      	nop
 800b698:	24000000 	.word	0x24000000
 800b69c:	10624dd3 	.word	0x10624dd3
 800b6a0:	002000c5 	.word	0x002000c5

0800b6a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b6a4:	b084      	sub	sp, #16
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b084      	sub	sp, #16
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	f107 001c 	add.w	r0, r7, #28
 800b6b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d120      	bne.n	800b6fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	68da      	ldr	r2, [r3, #12]
 800b6cc:	4b2a      	ldr	r3, [pc, #168]	; (800b778 <USB_CoreInit+0xd4>)
 800b6ce:	4013      	ands	r3, r2
 800b6d0:	687a      	ldr	r2, [r7, #4]
 800b6d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b6e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d105      	bne.n	800b6f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 faac 	bl	800bc50 <USB_CoreReset>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	73fb      	strb	r3, [r7, #15]
 800b6fc:	e01a      	b.n	800b734 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 faa0 	bl	800bc50 <USB_CoreReset>
 800b710:	4603      	mov	r3, r0
 800b712:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b716:	2b00      	cmp	r3, #0
 800b718:	d106      	bne.n	800b728 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	639a      	str	r2, [r3, #56]	; 0x38
 800b726:	e005      	b.n	800b734 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b736:	2b01      	cmp	r3, #1
 800b738:	d116      	bne.n	800b768 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b73e:	b29a      	uxth	r2, r3
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b748:	4b0c      	ldr	r3, [pc, #48]	; (800b77c <USB_CoreInit+0xd8>)
 800b74a:	4313      	orrs	r3, r2
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	689b      	ldr	r3, [r3, #8]
 800b754:	f043 0206 	orr.w	r2, r3, #6
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	689b      	ldr	r3, [r3, #8]
 800b760:	f043 0220 	orr.w	r2, r3, #32
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b768:	7bfb      	ldrb	r3, [r7, #15]
}
 800b76a:	4618      	mov	r0, r3
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b774:	b004      	add	sp, #16
 800b776:	4770      	bx	lr
 800b778:	ffbdffbf 	.word	0xffbdffbf
 800b77c:	03ee0000 	.word	0x03ee0000

0800b780 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b780:	b480      	push	{r7}
 800b782:	b083      	sub	sp, #12
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f023 0201 	bic.w	r2, r3, #1
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b794:	2300      	movs	r3, #0
}
 800b796:	4618      	mov	r0, r3
 800b798:	370c      	adds	r7, #12
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b084      	sub	sp, #16
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b7be:	78fb      	ldrb	r3, [r7, #3]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d115      	bne.n	800b7f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68db      	ldr	r3, [r3, #12]
 800b7c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b7d0:	2001      	movs	r0, #1
 800b7d2:	f7f6 fe1d 	bl	8002410 <HAL_Delay>
      ms++;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f000 fa29 	bl	800bc34 <USB_GetMode>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b01      	cmp	r3, #1
 800b7e6:	d01e      	beq.n	800b826 <USB_SetCurrentMode+0x84>
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2b31      	cmp	r3, #49	; 0x31
 800b7ec:	d9f0      	bls.n	800b7d0 <USB_SetCurrentMode+0x2e>
 800b7ee:	e01a      	b.n	800b826 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b7f0:	78fb      	ldrb	r3, [r7, #3]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d115      	bne.n	800b822 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b802:	2001      	movs	r0, #1
 800b804:	f7f6 fe04 	bl	8002410 <HAL_Delay>
      ms++;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	3301      	adds	r3, #1
 800b80c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fa10 	bl	800bc34 <USB_GetMode>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d005      	beq.n	800b826 <USB_SetCurrentMode+0x84>
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	2b31      	cmp	r3, #49	; 0x31
 800b81e:	d9f0      	bls.n	800b802 <USB_SetCurrentMode+0x60>
 800b820:	e001      	b.n	800b826 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	e005      	b.n	800b832 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	2b32      	cmp	r3, #50	; 0x32
 800b82a:	d101      	bne.n	800b830 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e000      	b.n	800b832 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b830:	2300      	movs	r3, #0
}
 800b832:	4618      	mov	r0, r3
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
	...

0800b83c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b83c:	b084      	sub	sp, #16
 800b83e:	b580      	push	{r7, lr}
 800b840:	b086      	sub	sp, #24
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b84a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b84e:	2300      	movs	r3, #0
 800b850:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b856:	2300      	movs	r3, #0
 800b858:	613b      	str	r3, [r7, #16]
 800b85a:	e009      	b.n	800b870 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	3340      	adds	r3, #64	; 0x40
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	2200      	movs	r2, #0
 800b868:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	3301      	adds	r3, #1
 800b86e:	613b      	str	r3, [r7, #16]
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2b0e      	cmp	r3, #14
 800b874:	d9f2      	bls.n	800b85c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d11c      	bne.n	800b8b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	68fa      	ldr	r2, [r7, #12]
 800b886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b88a:	f043 0302 	orr.w	r3, r3, #2
 800b88e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b894:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	601a      	str	r2, [r3, #0]
 800b8b4:	e005      	b.n	800b8c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8c8:	461a      	mov	r2, r3
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8dc:	461a      	mov	r2, r3
 800b8de:	680b      	ldr	r3, [r1, #0]
 800b8e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d10c      	bne.n	800b902 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d104      	bne.n	800b8f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 f965 	bl	800bbc0 <USB_SetDevSpeed>
 800b8f6:	e008      	b.n	800b90a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b8f8:	2101      	movs	r1, #1
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 f960 	bl	800bbc0 <USB_SetDevSpeed>
 800b900:	e003      	b.n	800b90a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b902:	2103      	movs	r1, #3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 f95b 	bl	800bbc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b90a:	2110      	movs	r1, #16
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f8f3 	bl	800baf8 <USB_FlushTxFifo>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d001      	beq.n	800b91c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b918:	2301      	movs	r3, #1
 800b91a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 f91f 	bl	800bb60 <USB_FlushRxFifo>
 800b922:	4603      	mov	r3, r0
 800b924:	2b00      	cmp	r3, #0
 800b926:	d001      	beq.n	800b92c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b928:	2301      	movs	r3, #1
 800b92a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b932:	461a      	mov	r2, r3
 800b934:	2300      	movs	r3, #0
 800b936:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b93e:	461a      	mov	r2, r3
 800b940:	2300      	movs	r3, #0
 800b942:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b94a:	461a      	mov	r2, r3
 800b94c:	2300      	movs	r3, #0
 800b94e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b950:	2300      	movs	r3, #0
 800b952:	613b      	str	r3, [r7, #16]
 800b954:	e043      	b.n	800b9de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	015a      	lsls	r2, r3, #5
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	4413      	add	r3, r2
 800b95e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b968:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b96c:	d118      	bne.n	800b9a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10a      	bne.n	800b98a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b974:	693b      	ldr	r3, [r7, #16]
 800b976:	015a      	lsls	r2, r3, #5
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	4413      	add	r3, r2
 800b97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b980:	461a      	mov	r2, r3
 800b982:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b986:	6013      	str	r3, [r2, #0]
 800b988:	e013      	b.n	800b9b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	015a      	lsls	r2, r3, #5
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	4413      	add	r3, r2
 800b992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b996:	461a      	mov	r2, r3
 800b998:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b99c:	6013      	str	r3, [r2, #0]
 800b99e:	e008      	b.n	800b9b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	015a      	lsls	r2, r3, #5
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	4413      	add	r3, r2
 800b9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ac:	461a      	mov	r2, r3
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	015a      	lsls	r2, r3, #5
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9be:	461a      	mov	r2, r3
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	015a      	lsls	r2, r3, #5
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	4413      	add	r3, r2
 800b9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b9d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	613b      	str	r3, [r7, #16]
 800b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e0:	693a      	ldr	r2, [r7, #16]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d3b7      	bcc.n	800b956 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	613b      	str	r3, [r7, #16]
 800b9ea:	e043      	b.n	800ba74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	015a      	lsls	r2, r3, #5
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba02:	d118      	bne.n	800ba36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10a      	bne.n	800ba20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	015a      	lsls	r2, r3, #5
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	4413      	add	r3, r2
 800ba12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba16:	461a      	mov	r2, r3
 800ba18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	e013      	b.n	800ba48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	015a      	lsls	r2, r3, #5
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4413      	add	r3, r2
 800ba28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba2c:	461a      	mov	r2, r3
 800ba2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba32:	6013      	str	r3, [r2, #0]
 800ba34:	e008      	b.n	800ba48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ba36:	693b      	ldr	r3, [r7, #16]
 800ba38:	015a      	lsls	r2, r3, #5
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	4413      	add	r3, r2
 800ba3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba42:	461a      	mov	r2, r3
 800ba44:	2300      	movs	r3, #0
 800ba46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	015a      	lsls	r2, r3, #5
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	4413      	add	r3, r2
 800ba50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba54:	461a      	mov	r2, r3
 800ba56:	2300      	movs	r3, #0
 800ba58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	015a      	lsls	r2, r3, #5
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	4413      	add	r3, r2
 800ba62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba66:	461a      	mov	r2, r3
 800ba68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	3301      	adds	r3, #1
 800ba72:	613b      	str	r3, [r7, #16]
 800ba74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba76:	693a      	ldr	r2, [r7, #16]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d3b7      	bcc.n	800b9ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba82:	691b      	ldr	r3, [r3, #16]
 800ba84:	68fa      	ldr	r2, [r7, #12]
 800ba86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ba9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ba9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d105      	bne.n	800bab0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	699b      	ldr	r3, [r3, #24]
 800baa8:	f043 0210 	orr.w	r2, r3, #16
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	699a      	ldr	r2, [r3, #24]
 800bab4:	4b0e      	ldr	r3, [pc, #56]	; (800baf0 <USB_DevInit+0x2b4>)
 800bab6:	4313      	orrs	r3, r2
 800bab8:	687a      	ldr	r2, [r7, #4]
 800baba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800babc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d005      	beq.n	800bace <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	699b      	ldr	r3, [r3, #24]
 800bac6:	f043 0208 	orr.w	r2, r3, #8
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d105      	bne.n	800bae0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	699a      	ldr	r2, [r3, #24]
 800bad8:	4b06      	ldr	r3, [pc, #24]	; (800baf4 <USB_DevInit+0x2b8>)
 800bada:	4313      	orrs	r3, r2
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3718      	adds	r7, #24
 800bae6:	46bd      	mov	sp, r7
 800bae8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800baec:	b004      	add	sp, #16
 800baee:	4770      	bx	lr
 800baf0:	803c3800 	.word	0x803c3800
 800baf4:	40000004 	.word	0x40000004

0800baf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bb02:	2300      	movs	r3, #0
 800bb04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4a13      	ldr	r2, [pc, #76]	; (800bb5c <USB_FlushTxFifo+0x64>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d901      	bls.n	800bb18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bb14:	2303      	movs	r3, #3
 800bb16:	e01b      	b.n	800bb50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	691b      	ldr	r3, [r3, #16]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	daf2      	bge.n	800bb06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bb20:	2300      	movs	r3, #0
 800bb22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	019b      	lsls	r3, r3, #6
 800bb28:	f043 0220 	orr.w	r2, r3, #32
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	3301      	adds	r3, #1
 800bb34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	4a08      	ldr	r2, [pc, #32]	; (800bb5c <USB_FlushTxFifo+0x64>)
 800bb3a:	4293      	cmp	r3, r2
 800bb3c:	d901      	bls.n	800bb42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bb3e:	2303      	movs	r3, #3
 800bb40:	e006      	b.n	800bb50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	f003 0320 	and.w	r3, r3, #32
 800bb4a:	2b20      	cmp	r3, #32
 800bb4c:	d0f0      	beq.n	800bb30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bb4e:	2300      	movs	r3, #0
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr
 800bb5c:	00030d40 	.word	0x00030d40

0800bb60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb60:	b480      	push	{r7}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	3301      	adds	r3, #1
 800bb70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	4a11      	ldr	r2, [pc, #68]	; (800bbbc <USB_FlushRxFifo+0x5c>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d901      	bls.n	800bb7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e018      	b.n	800bbb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	691b      	ldr	r3, [r3, #16]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	daf2      	bge.n	800bb6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2210      	movs	r2, #16
 800bb8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	3301      	adds	r3, #1
 800bb94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4a08      	ldr	r2, [pc, #32]	; (800bbbc <USB_FlushRxFifo+0x5c>)
 800bb9a:	4293      	cmp	r3, r2
 800bb9c:	d901      	bls.n	800bba2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e006      	b.n	800bbb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	f003 0310 	and.w	r3, r3, #16
 800bbaa:	2b10      	cmp	r3, #16
 800bbac:	d0f0      	beq.n	800bb90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr
 800bbbc:	00030d40 	.word	0x00030d40

0800bbc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	78fb      	ldrb	r3, [r7, #3]
 800bbda:	68f9      	ldr	r1, [r7, #12]
 800bbdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bc0c:	f023 0303 	bic.w	r3, r3, #3
 800bc10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	68fa      	ldr	r2, [r7, #12]
 800bc1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc20:	f043 0302 	orr.w	r3, r3, #2
 800bc24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc26:	2300      	movs	r3, #0
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3714      	adds	r7, #20
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc32:	4770      	bx	lr

0800bc34 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	695b      	ldr	r3, [r3, #20]
 800bc40:	f003 0301 	and.w	r3, r3, #1
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr

0800bc50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc50:	b480      	push	{r7}
 800bc52:	b085      	sub	sp, #20
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	4a13      	ldr	r2, [pc, #76]	; (800bcb4 <USB_CoreReset+0x64>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d901      	bls.n	800bc6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e01b      	b.n	800bca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	daf2      	bge.n	800bc5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bc76:	2300      	movs	r3, #0
 800bc78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	f043 0201 	orr.w	r2, r3, #1
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	3301      	adds	r3, #1
 800bc8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	4a09      	ldr	r2, [pc, #36]	; (800bcb4 <USB_CoreReset+0x64>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d901      	bls.n	800bc98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bc94:	2303      	movs	r3, #3
 800bc96:	e006      	b.n	800bca6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	691b      	ldr	r3, [r3, #16]
 800bc9c:	f003 0301 	and.w	r3, r3, #1
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	d0f0      	beq.n	800bc86 <USB_CoreReset+0x36>

  return HAL_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3714      	adds	r7, #20
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	00030d40 	.word	0x00030d40

0800bcb8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b08e      	sub	sp, #56	; 0x38
 800bcbc:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800bcbe:	491e      	ldr	r1, [pc, #120]	; (800bd38 <MX_FATFS_Init+0x80>)
 800bcc0:	481e      	ldr	r0, [pc, #120]	; (800bd3c <MX_FATFS_Init+0x84>)
 800bcc2:	f001 fd49 	bl	800d758 <FATFS_LinkDriver>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	461a      	mov	r2, r3
 800bcca:	4b1d      	ldr	r3, [pc, #116]	; (800bd40 <MX_FATFS_Init+0x88>)
 800bccc:	701a      	strb	r2, [r3, #0]
  f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 800bcce:	2200      	movs	r2, #0
 800bcd0:	4919      	ldr	r1, [pc, #100]	; (800bd38 <MX_FATFS_Init+0x80>)
 800bcd2:	481c      	ldr	r0, [pc, #112]	; (800bd44 <MX_FATFS_Init+0x8c>)
 800bcd4:	f001 fc74 	bl	800d5c0 <f_mount>
  FILINFO fno;
  FRESULT result;
  for(int idx = 0; idx < 100; idx++)
 800bcd8:	2300      	movs	r3, #0
 800bcda:	637b      	str	r3, [r7, #52]	; 0x34
 800bcdc:	e024      	b.n	800bd28 <MX_FATFS_Init+0x70>
  {

	char path[20];
	snprintf(path, 20, "FILENAME%d.txt", idx);
 800bcde:	1d38      	adds	r0, r7, #4
 800bce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bce2:	4a19      	ldr	r2, [pc, #100]	; (800bd48 <MX_FATFS_Init+0x90>)
 800bce4:	2114      	movs	r1, #20
 800bce6:	f001 fdf3 	bl	800d8d0 <sniprintf>
	result = f_stat(path, &fno);
 800bcea:	f107 0218 	add.w	r2, r7, #24
 800bcee:	1d3b      	adds	r3, r7, #4
 800bcf0:	4611      	mov	r1, r2
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f001 fcaa 	bl	800d64c <f_stat>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	if (result != FR_OK)
 800bcfe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <MX_FATFS_Init+0x54>
	{
		Error_Handler();
 800bd06:	f7f5 fa91 	bl	800122c <Error_Handler>
 800bd0a:	e00a      	b.n	800bd22 <MX_FATFS_Init+0x6a>
	} else if (result == FR_NO_FILE)
 800bd0c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bd10:	2b04      	cmp	r3, #4
 800bd12:	d106      	bne.n	800bd22 <MX_FATFS_Init+0x6a>
	{
		strncpy(path, path, 20);
 800bd14:	1d39      	adds	r1, r7, #4
 800bd16:	1d3b      	adds	r3, r7, #4
 800bd18:	2214      	movs	r2, #20
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f001 fe14 	bl	800d948 <strncpy>
  }

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bd20:	e005      	b.n	800bd2e <MX_FATFS_Init+0x76>
  for(int idx = 0; idx < 100; idx++)
 800bd22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd24:	3301      	adds	r3, #1
 800bd26:	637b      	str	r3, [r7, #52]	; 0x34
 800bd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd2a:	2b63      	cmp	r3, #99	; 0x63
 800bd2c:	ddd7      	ble.n	800bcde <MX_FATFS_Init+0x26>
}
 800bd2e:	bf00      	nop
 800bd30:	3738      	adds	r7, #56	; 0x38
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	24000ba8 	.word	0x24000ba8
 800bd3c:	0800e1b0 	.word	0x0800e1b0
 800bd40:	24000ba4 	.word	0x24000ba4
 800bd44:	24000bac 	.word	0x24000bac
 800bd48:	0800e124 	.word	0x0800e124

0800bd4c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800bd52:	2300      	movs	r3, #0
 800bd54:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800bd56:	f000 f863 	bl	800be20 <BSP_SD_IsDetected>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d001      	beq.n	800bd64 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800bd60:	2302      	movs	r3, #2
 800bd62:	e005      	b.n	800bd70 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800bd64:	4804      	ldr	r0, [pc, #16]	; (800bd78 <BSP_SD_Init+0x2c>)
 800bd66:	f7fc fa1f 	bl	80081a8 <HAL_SD_Init>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800bd6e:	79fb      	ldrb	r3, [r7, #7]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}
 800bd78:	240002d4 	.word	0x240002d4

0800bd7c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	68ba      	ldr	r2, [r7, #8]
 800bd90:	68f9      	ldr	r1, [r7, #12]
 800bd92:	4806      	ldr	r0, [pc, #24]	; (800bdac <BSP_SD_ReadBlocks_DMA+0x30>)
 800bd94:	f7fc fb28 	bl	80083e8 <HAL_SD_ReadBlocks_DMA>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d001      	beq.n	800bda2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}
 800bdac:	240002d4 	.word	0x240002d4

0800bdb0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b086      	sub	sp, #24
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	68f9      	ldr	r1, [r7, #12]
 800bdc6:	4806      	ldr	r0, [pc, #24]	; (800bde0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800bdc8:	f7fc fbb6 	bl	8008538 <HAL_SD_WriteBlocks_DMA>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d001      	beq.n	800bdd6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800bdd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3718      	adds	r7, #24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}
 800bde0:	240002d4 	.word	0x240002d4

0800bde4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800bde8:	4805      	ldr	r0, [pc, #20]	; (800be00 <BSP_SD_GetCardState+0x1c>)
 800bdea:	f7fc ffed 	bl	8008dc8 <HAL_SD_GetCardState>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	2b04      	cmp	r3, #4
 800bdf2:	bf14      	ite	ne
 800bdf4:	2301      	movne	r3, #1
 800bdf6:	2300      	moveq	r3, #0
 800bdf8:	b2db      	uxtb	r3, r3
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	240002d4 	.word	0x240002d4

0800be04 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800be0c:	6879      	ldr	r1, [r7, #4]
 800be0e:	4803      	ldr	r0, [pc, #12]	; (800be1c <BSP_SD_GetCardInfo+0x18>)
 800be10:	f7fc fe9c 	bl	8008b4c <HAL_SD_GetCardInfo>
}
 800be14:	bf00      	nop
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	240002d4 	.word	0x240002d4

0800be20 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800be26:	2301      	movs	r3, #1
 800be28:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800be2a:	f000 f80b 	bl	800be44 <BSP_PlatformIsDetected>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d101      	bne.n	800be38 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800be34:	2300      	movs	r3, #0
 800be36:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800be38:	79fb      	ldrb	r3, [r7, #7]
 800be3a:	b2db      	uxtb	r3, r3
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3708      	adds	r7, #8
 800be40:	46bd      	mov	sp, r7
 800be42:	bd80      	pop	{r7, pc}

0800be44 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800be44:	b580      	push	{r7, lr}
 800be46:	b082      	sub	sp, #8
 800be48:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800be4a:	2301      	movs	r3, #1
 800be4c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800be4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800be52:	4806      	ldr	r0, [pc, #24]	; (800be6c <BSP_PlatformIsDetected+0x28>)
 800be54:	f7f8 facc 	bl	80043f0 <HAL_GPIO_ReadPin>
 800be58:	4603      	mov	r3, r0
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d001      	beq.n	800be62 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800be5e:	2300      	movs	r3, #0
 800be60:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800be62:	79fb      	ldrb	r3, [r7, #7]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3708      	adds	r7, #8
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	58021000 	.word	0x58021000

0800be70 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800be78:	f7f6 fabe 	bl	80023f8 <HAL_GetTick>
 800be7c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800be7e:	e006      	b.n	800be8e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800be80:	f7ff ffb0 	bl	800bde4 <BSP_SD_GetCardState>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800be8a:	2300      	movs	r3, #0
 800be8c:	e009      	b.n	800bea2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800be8e:	f7f6 fab3 	bl	80023f8 <HAL_GetTick>
 800be92:	4602      	mov	r2, r0
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	1ad3      	subs	r3, r2, r3
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d8f0      	bhi.n	800be80 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800be9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3710      	adds	r7, #16
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
	...

0800beac <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	4603      	mov	r3, r0
 800beb4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800beb6:	4b0b      	ldr	r3, [pc, #44]	; (800bee4 <SD_CheckStatus+0x38>)
 800beb8:	2201      	movs	r2, #1
 800beba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800bebc:	f7ff ff92 	bl	800bde4 <BSP_SD_GetCardState>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d107      	bne.n	800bed6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800bec6:	4b07      	ldr	r3, [pc, #28]	; (800bee4 <SD_CheckStatus+0x38>)
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	f023 0301 	bic.w	r3, r3, #1
 800bed0:	b2da      	uxtb	r2, r3
 800bed2:	4b04      	ldr	r3, [pc, #16]	; (800bee4 <SD_CheckStatus+0x38>)
 800bed4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800bed6:	4b03      	ldr	r3, [pc, #12]	; (800bee4 <SD_CheckStatus+0x38>)
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	b2db      	uxtb	r3, r3
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	2400000d 	.word	0x2400000d

0800bee8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	4603      	mov	r3, r0
 800bef0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800bef2:	f7ff ff2b 	bl	800bd4c <BSP_SD_Init>
 800bef6:	4603      	mov	r3, r0
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d107      	bne.n	800bf0c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800befc:	79fb      	ldrb	r3, [r7, #7]
 800befe:	4618      	mov	r0, r3
 800bf00:	f7ff ffd4 	bl	800beac <SD_CheckStatus>
 800bf04:	4603      	mov	r3, r0
 800bf06:	461a      	mov	r2, r3
 800bf08:	4b04      	ldr	r3, [pc, #16]	; (800bf1c <SD_initialize+0x34>)
 800bf0a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bf0c:	4b03      	ldr	r3, [pc, #12]	; (800bf1c <SD_initialize+0x34>)
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	b2db      	uxtb	r3, r3
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	2400000d 	.word	0x2400000d

0800bf20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	4603      	mov	r3, r0
 800bf28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800bf2a:	79fb      	ldrb	r3, [r7, #7]
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f7ff ffbd 	bl	800beac <SD_CheckStatus>
 800bf32:	4603      	mov	r3, r0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60b9      	str	r1, [r7, #8]
 800bf44:	607a      	str	r2, [r7, #4]
 800bf46:	603b      	str	r3, [r7, #0]
 800bf48:	4603      	mov	r3, r0
 800bf4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bf50:	f247 5030 	movw	r0, #30000	; 0x7530
 800bf54:	f7ff ff8c 	bl	800be70 <SD_CheckStatusWithTimeout>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	da01      	bge.n	800bf62 <SD_read+0x26>
  {
    return res;
 800bf5e:	7dfb      	ldrb	r3, [r7, #23]
 800bf60:	e03b      	b.n	800bfda <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bf62:	683a      	ldr	r2, [r7, #0]
 800bf64:	6879      	ldr	r1, [r7, #4]
 800bf66:	68b8      	ldr	r0, [r7, #8]
 800bf68:	f7ff ff08 	bl	800bd7c <BSP_SD_ReadBlocks_DMA>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d132      	bne.n	800bfd8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bf72:	4b1c      	ldr	r3, [pc, #112]	; (800bfe4 <SD_read+0xa8>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bf78:	f7f6 fa3e 	bl	80023f8 <HAL_GetTick>
 800bf7c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bf7e:	bf00      	nop
 800bf80:	4b18      	ldr	r3, [pc, #96]	; (800bfe4 <SD_read+0xa8>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d108      	bne.n	800bf9a <SD_read+0x5e>
 800bf88:	f7f6 fa36 	bl	80023f8 <HAL_GetTick>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	f247 522f 	movw	r2, #29999	; 0x752f
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d9f2      	bls.n	800bf80 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800bf9a:	4b12      	ldr	r3, [pc, #72]	; (800bfe4 <SD_read+0xa8>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d102      	bne.n	800bfa8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	75fb      	strb	r3, [r7, #23]
 800bfa6:	e017      	b.n	800bfd8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bfa8:	4b0e      	ldr	r3, [pc, #56]	; (800bfe4 <SD_read+0xa8>)
 800bfaa:	2200      	movs	r2, #0
 800bfac:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bfae:	f7f6 fa23 	bl	80023f8 <HAL_GetTick>
 800bfb2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bfb4:	e007      	b.n	800bfc6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bfb6:	f7ff ff15 	bl	800bde4 <BSP_SD_GetCardState>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d102      	bne.n	800bfc6 <SD_read+0x8a>
          {
            res = RES_OK;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bfc4:	e008      	b.n	800bfd8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bfc6:	f7f6 fa17 	bl	80023f8 <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	f247 522f 	movw	r2, #29999	; 0x752f
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d9ee      	bls.n	800bfb6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bfd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3718      	adds	r7, #24
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	24000de0 	.word	0x24000de0

0800bfe8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60b9      	str	r1, [r7, #8]
 800bff0:	607a      	str	r2, [r7, #4]
 800bff2:	603b      	str	r3, [r7, #0]
 800bff4:	4603      	mov	r3, r0
 800bff6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bffc:	4b24      	ldr	r3, [pc, #144]	; (800c090 <SD_write+0xa8>)
 800bffe:	2200      	movs	r2, #0
 800c000:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c002:	f247 5030 	movw	r0, #30000	; 0x7530
 800c006:	f7ff ff33 	bl	800be70 <SD_CheckStatusWithTimeout>
 800c00a:	4603      	mov	r3, r0
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	da01      	bge.n	800c014 <SD_write+0x2c>
  {
    return res;
 800c010:	7dfb      	ldrb	r3, [r7, #23]
 800c012:	e038      	b.n	800c086 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	6879      	ldr	r1, [r7, #4]
 800c018:	68b8      	ldr	r0, [r7, #8]
 800c01a:	f7ff fec9 	bl	800bdb0 <BSP_SD_WriteBlocks_DMA>
 800c01e:	4603      	mov	r3, r0
 800c020:	2b00      	cmp	r3, #0
 800c022:	d12f      	bne.n	800c084 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c024:	f7f6 f9e8 	bl	80023f8 <HAL_GetTick>
 800c028:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c02a:	bf00      	nop
 800c02c:	4b18      	ldr	r3, [pc, #96]	; (800c090 <SD_write+0xa8>)
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d108      	bne.n	800c046 <SD_write+0x5e>
 800c034:	f7f6 f9e0 	bl	80023f8 <HAL_GetTick>
 800c038:	4602      	mov	r2, r0
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	f247 522f 	movw	r2, #29999	; 0x752f
 800c042:	4293      	cmp	r3, r2
 800c044:	d9f2      	bls.n	800c02c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c046:	4b12      	ldr	r3, [pc, #72]	; (800c090 <SD_write+0xa8>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d102      	bne.n	800c054 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c04e:	2301      	movs	r3, #1
 800c050:	75fb      	strb	r3, [r7, #23]
 800c052:	e017      	b.n	800c084 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c054:	4b0e      	ldr	r3, [pc, #56]	; (800c090 <SD_write+0xa8>)
 800c056:	2200      	movs	r2, #0
 800c058:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c05a:	f7f6 f9cd 	bl	80023f8 <HAL_GetTick>
 800c05e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c060:	e007      	b.n	800c072 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c062:	f7ff febf 	bl	800bde4 <BSP_SD_GetCardState>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d102      	bne.n	800c072 <SD_write+0x8a>
          {
            res = RES_OK;
 800c06c:	2300      	movs	r3, #0
 800c06e:	75fb      	strb	r3, [r7, #23]
            break;
 800c070:	e008      	b.n	800c084 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c072:	f7f6 f9c1 	bl	80023f8 <HAL_GetTick>
 800c076:	4602      	mov	r2, r0
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c080:	4293      	cmp	r3, r2
 800c082:	d9ee      	bls.n	800c062 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c084:	7dfb      	ldrb	r3, [r7, #23]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3718      	adds	r7, #24
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	24000ddc 	.word	0x24000ddc

0800c094 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b08c      	sub	sp, #48	; 0x30
 800c098:	af00      	add	r7, sp, #0
 800c09a:	4603      	mov	r3, r0
 800c09c:	603a      	str	r2, [r7, #0]
 800c09e:	71fb      	strb	r3, [r7, #7]
 800c0a0:	460b      	mov	r3, r1
 800c0a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c0aa:	4b25      	ldr	r3, [pc, #148]	; (800c140 <SD_ioctl+0xac>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	b2db      	uxtb	r3, r3
 800c0b0:	f003 0301 	and.w	r3, r3, #1
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d001      	beq.n	800c0bc <SD_ioctl+0x28>
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e03c      	b.n	800c136 <SD_ioctl+0xa2>

  switch (cmd)
 800c0bc:	79bb      	ldrb	r3, [r7, #6]
 800c0be:	2b03      	cmp	r3, #3
 800c0c0:	d834      	bhi.n	800c12c <SD_ioctl+0x98>
 800c0c2:	a201      	add	r2, pc, #4	; (adr r2, 800c0c8 <SD_ioctl+0x34>)
 800c0c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0c8:	0800c0d9 	.word	0x0800c0d9
 800c0cc:	0800c0e1 	.word	0x0800c0e1
 800c0d0:	0800c0f9 	.word	0x0800c0f9
 800c0d4:	0800c113 	.word	0x0800c113
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0de:	e028      	b.n	800c132 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0e0:	f107 0308 	add.w	r3, r7, #8
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7ff fe8d 	bl	800be04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c0ea:	6a3a      	ldr	r2, [r7, #32]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c0f6:	e01c      	b.n	800c132 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c0f8:	f107 0308 	add.w	r3, r7, #8
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f7ff fe81 	bl	800be04 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c104:	b29a      	uxth	r2, r3
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c10a:	2300      	movs	r3, #0
 800c10c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c110:	e00f      	b.n	800c132 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c112:	f107 0308 	add.w	r3, r7, #8
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff fe74 	bl	800be04 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11e:	0a5a      	lsrs	r2, r3, #9
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c124:	2300      	movs	r3, #0
 800c126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c12a:	e002      	b.n	800c132 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c12c:	2304      	movs	r3, #4
 800c12e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c132:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c136:	4618      	mov	r0, r3
 800c138:	3730      	adds	r7, #48	; 0x30
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	2400000d 	.word	0x2400000d

0800c144 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	4603      	mov	r3, r0
 800c14c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	4a08      	ldr	r2, [pc, #32]	; (800c174 <disk_status+0x30>)
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	79fa      	ldrb	r2, [r7, #7]
 800c15c:	4905      	ldr	r1, [pc, #20]	; (800c174 <disk_status+0x30>)
 800c15e:	440a      	add	r2, r1
 800c160:	7a12      	ldrb	r2, [r2, #8]
 800c162:	4610      	mov	r0, r2
 800c164:	4798      	blx	r3
 800c166:	4603      	mov	r3, r0
 800c168:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	24000e0c 	.word	0x24000e0c

0800c178 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b084      	sub	sp, #16
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	4603      	mov	r3, r0
 800c180:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c182:	2300      	movs	r3, #0
 800c184:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c186:	79fb      	ldrb	r3, [r7, #7]
 800c188:	4a0d      	ldr	r2, [pc, #52]	; (800c1c0 <disk_initialize+0x48>)
 800c18a:	5cd3      	ldrb	r3, [r2, r3]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d111      	bne.n	800c1b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800c190:	79fb      	ldrb	r3, [r7, #7]
 800c192:	4a0b      	ldr	r2, [pc, #44]	; (800c1c0 <disk_initialize+0x48>)
 800c194:	2101      	movs	r1, #1
 800c196:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c198:	79fb      	ldrb	r3, [r7, #7]
 800c19a:	4a09      	ldr	r2, [pc, #36]	; (800c1c0 <disk_initialize+0x48>)
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	79fa      	ldrb	r2, [r7, #7]
 800c1a6:	4906      	ldr	r1, [pc, #24]	; (800c1c0 <disk_initialize+0x48>)
 800c1a8:	440a      	add	r2, r1
 800c1aa:	7a12      	ldrb	r2, [r2, #8]
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	4798      	blx	r3
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800c1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3710      	adds	r7, #16
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	24000e0c 	.word	0x24000e0c

0800c1c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c1c4:	b590      	push	{r4, r7, lr}
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60b9      	str	r1, [r7, #8]
 800c1cc:	607a      	str	r2, [r7, #4]
 800c1ce:	603b      	str	r3, [r7, #0]
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	4a0a      	ldr	r2, [pc, #40]	; (800c200 <disk_read+0x3c>)
 800c1d8:	009b      	lsls	r3, r3, #2
 800c1da:	4413      	add	r3, r2
 800c1dc:	685b      	ldr	r3, [r3, #4]
 800c1de:	689c      	ldr	r4, [r3, #8]
 800c1e0:	7bfb      	ldrb	r3, [r7, #15]
 800c1e2:	4a07      	ldr	r2, [pc, #28]	; (800c200 <disk_read+0x3c>)
 800c1e4:	4413      	add	r3, r2
 800c1e6:	7a18      	ldrb	r0, [r3, #8]
 800c1e8:	683b      	ldr	r3, [r7, #0]
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	68b9      	ldr	r1, [r7, #8]
 800c1ee:	47a0      	blx	r4
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800c1f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	371c      	adds	r7, #28
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	bd90      	pop	{r4, r7, pc}
 800c1fe:	bf00      	nop
 800c200:	24000e0c 	.word	0x24000e0c

0800c204 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c204:	b590      	push	{r4, r7, lr}
 800c206:	b087      	sub	sp, #28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60b9      	str	r1, [r7, #8]
 800c20c:	607a      	str	r2, [r7, #4]
 800c20e:	603b      	str	r3, [r7, #0]
 800c210:	4603      	mov	r3, r0
 800c212:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c214:	7bfb      	ldrb	r3, [r7, #15]
 800c216:	4a0a      	ldr	r2, [pc, #40]	; (800c240 <disk_write+0x3c>)
 800c218:	009b      	lsls	r3, r3, #2
 800c21a:	4413      	add	r3, r2
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	68dc      	ldr	r4, [r3, #12]
 800c220:	7bfb      	ldrb	r3, [r7, #15]
 800c222:	4a07      	ldr	r2, [pc, #28]	; (800c240 <disk_write+0x3c>)
 800c224:	4413      	add	r3, r2
 800c226:	7a18      	ldrb	r0, [r3, #8]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	68b9      	ldr	r1, [r7, #8]
 800c22e:	47a0      	blx	r4
 800c230:	4603      	mov	r3, r0
 800c232:	75fb      	strb	r3, [r7, #23]
  return res;
 800c234:	7dfb      	ldrb	r3, [r7, #23]
}
 800c236:	4618      	mov	r0, r3
 800c238:	371c      	adds	r7, #28
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd90      	pop	{r4, r7, pc}
 800c23e:	bf00      	nop
 800c240:	24000e0c 	.word	0x24000e0c

0800c244 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	3301      	adds	r3, #1
 800c250:	781b      	ldrb	r3, [r3, #0]
 800c252:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c254:	89fb      	ldrh	r3, [r7, #14]
 800c256:	021b      	lsls	r3, r3, #8
 800c258:	b21a      	sxth	r2, r3
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	b21b      	sxth	r3, r3
 800c260:	4313      	orrs	r3, r2
 800c262:	b21b      	sxth	r3, r3
 800c264:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c266:	89fb      	ldrh	r3, [r7, #14]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3714      	adds	r7, #20
 800c26c:	46bd      	mov	sp, r7
 800c26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c272:	4770      	bx	lr

0800c274 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	3303      	adds	r3, #3
 800c280:	781b      	ldrb	r3, [r3, #0]
 800c282:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	021b      	lsls	r3, r3, #8
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	3202      	adds	r2, #2
 800c28c:	7812      	ldrb	r2, [r2, #0]
 800c28e:	4313      	orrs	r3, r2
 800c290:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	021b      	lsls	r3, r3, #8
 800c296:	687a      	ldr	r2, [r7, #4]
 800c298:	3201      	adds	r2, #1
 800c29a:	7812      	ldrb	r2, [r2, #0]
 800c29c:	4313      	orrs	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	021b      	lsls	r3, r3, #8
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	7812      	ldrb	r2, [r2, #0]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	60fb      	str	r3, [r7, #12]
	return rv;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
}
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3714      	adds	r7, #20
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b8:	4770      	bx	lr

0800c2ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c2ba:	b480      	push	{r7}
 800c2bc:	b083      	sub	sp, #12
 800c2be:	af00      	add	r7, sp, #0
 800c2c0:	6078      	str	r0, [r7, #4]
 800c2c2:	460b      	mov	r3, r1
 800c2c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	1c5a      	adds	r2, r3, #1
 800c2ca:	607a      	str	r2, [r7, #4]
 800c2cc:	887a      	ldrh	r2, [r7, #2]
 800c2ce:	b2d2      	uxtb	r2, r2
 800c2d0:	701a      	strb	r2, [r3, #0]
 800c2d2:	887b      	ldrh	r3, [r7, #2]
 800c2d4:	0a1b      	lsrs	r3, r3, #8
 800c2d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	1c5a      	adds	r2, r3, #1
 800c2dc:	607a      	str	r2, [r7, #4]
 800c2de:	887a      	ldrh	r2, [r7, #2]
 800c2e0:	b2d2      	uxtb	r2, r2
 800c2e2:	701a      	strb	r2, [r3, #0]
}
 800c2e4:	bf00      	nop
 800c2e6:	370c      	adds	r7, #12
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b083      	sub	sp, #12
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	1c5a      	adds	r2, r3, #1
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	683a      	ldr	r2, [r7, #0]
 800c302:	b2d2      	uxtb	r2, r2
 800c304:	701a      	strb	r2, [r3, #0]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	0a1b      	lsrs	r3, r3, #8
 800c30a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	1c5a      	adds	r2, r3, #1
 800c310:	607a      	str	r2, [r7, #4]
 800c312:	683a      	ldr	r2, [r7, #0]
 800c314:	b2d2      	uxtb	r2, r2
 800c316:	701a      	strb	r2, [r3, #0]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	0a1b      	lsrs	r3, r3, #8
 800c31c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	1c5a      	adds	r2, r3, #1
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	b2d2      	uxtb	r2, r2
 800c328:	701a      	strb	r2, [r3, #0]
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	0a1b      	lsrs	r3, r3, #8
 800c32e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	1c5a      	adds	r2, r3, #1
 800c334:	607a      	str	r2, [r7, #4]
 800c336:	683a      	ldr	r2, [r7, #0]
 800c338:	b2d2      	uxtb	r2, r2
 800c33a:	701a      	strb	r2, [r3, #0]
}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c348:	b480      	push	{r7}
 800c34a:	b087      	sub	sp, #28
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	60f8      	str	r0, [r7, #12]
 800c350:	60b9      	str	r1, [r7, #8]
 800c352:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	1c5a      	adds	r2, r3, #1
 800c35c:	617a      	str	r2, [r7, #20]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	b2d2      	uxtb	r2, r2
 800c362:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	3b01      	subs	r3, #1
 800c368:	607b      	str	r3, [r7, #4]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d1f3      	bne.n	800c358 <mem_set+0x10>
}
 800c370:	bf00      	nop
 800c372:	bf00      	nop
 800c374:	371c      	adds	r7, #28
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c37e:	b480      	push	{r7}
 800c380:	b089      	sub	sp, #36	; 0x24
 800c382:	af00      	add	r7, sp, #0
 800c384:	60f8      	str	r0, [r7, #12]
 800c386:	60b9      	str	r1, [r7, #8]
 800c388:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	61fb      	str	r3, [r7, #28]
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c396:	69fb      	ldr	r3, [r7, #28]
 800c398:	1c5a      	adds	r2, r3, #1
 800c39a:	61fa      	str	r2, [r7, #28]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	4619      	mov	r1, r3
 800c3a0:	69bb      	ldr	r3, [r7, #24]
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	61ba      	str	r2, [r7, #24]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	1acb      	subs	r3, r1, r3
 800c3aa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	3b01      	subs	r3, #1
 800c3b0:	607b      	str	r3, [r7, #4]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <mem_cmp+0x40>
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d0eb      	beq.n	800c396 <mem_cmp+0x18>

	return r;
 800c3be:	697b      	ldr	r3, [r7, #20]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3724      	adds	r7, #36	; 0x24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c3d6:	e002      	b.n	800c3de <chk_chr+0x12>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	3301      	adds	r3, #1
 800c3dc:	607b      	str	r3, [r7, #4]
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d005      	beq.n	800c3f2 <chk_chr+0x26>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d1f2      	bne.n	800c3d8 <chk_chr+0xc>
	return *str;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	781b      	ldrb	r3, [r3, #0]
}
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
	...

0800c404 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c40c:	2300      	movs	r3, #0
 800c40e:	60fb      	str	r3, [r7, #12]
 800c410:	e010      	b.n	800c434 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c412:	4a0d      	ldr	r2, [pc, #52]	; (800c448 <clear_lock+0x44>)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	011b      	lsls	r3, r3, #4
 800c418:	4413      	add	r3, r2
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d105      	bne.n	800c42e <clear_lock+0x2a>
 800c422:	4a09      	ldr	r2, [pc, #36]	; (800c448 <clear_lock+0x44>)
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	011b      	lsls	r3, r3, #4
 800c428:	4413      	add	r3, r2
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	3301      	adds	r3, #1
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d9eb      	bls.n	800c412 <clear_lock+0xe>
	}
}
 800c43a:	bf00      	nop
 800c43c:	bf00      	nop
 800c43e:	3714      	adds	r7, #20
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr
 800c448:	24000dec 	.word	0x24000dec

0800c44c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b086      	sub	sp, #24
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c454:	2300      	movs	r3, #0
 800c456:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	78db      	ldrb	r3, [r3, #3]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d034      	beq.n	800c4ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c464:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	7858      	ldrb	r0, [r3, #1]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c470:	2301      	movs	r3, #1
 800c472:	697a      	ldr	r2, [r7, #20]
 800c474:	f7ff fec6 	bl	800c204 <disk_write>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d002      	beq.n	800c484 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c47e:	2301      	movs	r3, #1
 800c480:	73fb      	strb	r3, [r7, #15]
 800c482:	e022      	b.n	800c4ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	697a      	ldr	r2, [r7, #20]
 800c490:	1ad2      	subs	r2, r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	699b      	ldr	r3, [r3, #24]
 800c496:	429a      	cmp	r2, r3
 800c498:	d217      	bcs.n	800c4ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	789b      	ldrb	r3, [r3, #2]
 800c49e:	613b      	str	r3, [r7, #16]
 800c4a0:	e010      	b.n	800c4c4 <sync_window+0x78>
					wsect += fs->fsize;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	699b      	ldr	r3, [r3, #24]
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	7858      	ldrb	r0, [r3, #1]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c4b6:	2301      	movs	r3, #1
 800c4b8:	697a      	ldr	r2, [r7, #20]
 800c4ba:	f7ff fea3 	bl	800c204 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c4be:	693b      	ldr	r3, [r7, #16]
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	613b      	str	r3, [r7, #16]
 800c4c4:	693b      	ldr	r3, [r7, #16]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d8eb      	bhi.n	800c4a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e6:	683a      	ldr	r2, [r7, #0]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d01b      	beq.n	800c524 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f7ff ffad 	bl	800c44c <sync_window>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d113      	bne.n	800c524 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	7858      	ldrb	r0, [r3, #1]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c506:	2301      	movs	r3, #1
 800c508:	683a      	ldr	r2, [r7, #0]
 800c50a:	f7ff fe5b 	bl	800c1c4 <disk_read>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d004      	beq.n	800c51e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c514:	f04f 33ff 	mov.w	r3, #4294967295
 800c518:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c51a:	2301      	movs	r3, #1
 800c51c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	683a      	ldr	r2, [r7, #0]
 800c522:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800c524:	7bfb      	ldrb	r3, [r7, #15]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c52e:	b480      	push	{r7}
 800c530:	b083      	sub	sp, #12
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	3b02      	subs	r3, #2
 800c53c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	695b      	ldr	r3, [r3, #20]
 800c542:	3b02      	subs	r3, #2
 800c544:	683a      	ldr	r2, [r7, #0]
 800c546:	429a      	cmp	r2, r3
 800c548:	d301      	bcc.n	800c54e <clust2sect+0x20>
 800c54a:	2300      	movs	r3, #0
 800c54c:	e008      	b.n	800c560 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	895b      	ldrh	r3, [r3, #10]
 800c552:	461a      	mov	r2, r3
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	fb03 f202 	mul.w	r2, r3, r2
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c55e:	4413      	add	r3, r2
}
 800c560:	4618      	mov	r0, r3
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b086      	sub	sp, #24
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	2b01      	cmp	r3, #1
 800c580:	d904      	bls.n	800c58c <get_fat+0x20>
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	695b      	ldr	r3, [r3, #20]
 800c586:	683a      	ldr	r2, [r7, #0]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d302      	bcc.n	800c592 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c58c:	2301      	movs	r3, #1
 800c58e:	617b      	str	r3, [r7, #20]
 800c590:	e08f      	b.n	800c6b2 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c592:	f04f 33ff 	mov.w	r3, #4294967295
 800c596:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	2b03      	cmp	r3, #3
 800c59e:	d062      	beq.n	800c666 <get_fat+0xfa>
 800c5a0:	2b03      	cmp	r3, #3
 800c5a2:	dc7c      	bgt.n	800c69e <get_fat+0x132>
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d002      	beq.n	800c5ae <get_fat+0x42>
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d042      	beq.n	800c632 <get_fat+0xc6>
 800c5ac:	e077      	b.n	800c69e <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	60fb      	str	r3, [r7, #12]
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	085b      	lsrs	r3, r3, #1
 800c5b6:	68fa      	ldr	r2, [r7, #12]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	6a1a      	ldr	r2, [r3, #32]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	0a5b      	lsrs	r3, r3, #9
 800c5c4:	4413      	add	r3, r2
 800c5c6:	4619      	mov	r1, r3
 800c5c8:	6938      	ldr	r0, [r7, #16]
 800c5ca:	f7ff ff83 	bl	800c4d4 <move_window>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d167      	bne.n	800c6a4 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	1c5a      	adds	r2, r3, #1
 800c5d8:	60fa      	str	r2, [r7, #12]
 800c5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5de:	693a      	ldr	r2, [r7, #16]
 800c5e0:	4413      	add	r3, r2
 800c5e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c5e6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	6a1a      	ldr	r2, [r3, #32]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	0a5b      	lsrs	r3, r3, #9
 800c5f0:	4413      	add	r3, r2
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	6938      	ldr	r0, [r7, #16]
 800c5f6:	f7ff ff6d 	bl	800c4d4 <move_window>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d153      	bne.n	800c6a8 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	4413      	add	r3, r2
 800c60a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c60e:	021b      	lsls	r3, r3, #8
 800c610:	461a      	mov	r2, r3
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	4313      	orrs	r3, r2
 800c616:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	f003 0301 	and.w	r3, r3, #1
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d002      	beq.n	800c628 <get_fat+0xbc>
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	091b      	lsrs	r3, r3, #4
 800c626:	e002      	b.n	800c62e <get_fat+0xc2>
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c62e:	617b      	str	r3, [r7, #20]
			break;
 800c630:	e03f      	b.n	800c6b2 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	6a1a      	ldr	r2, [r3, #32]
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	0a1b      	lsrs	r3, r3, #8
 800c63a:	4413      	add	r3, r2
 800c63c:	4619      	mov	r1, r3
 800c63e:	6938      	ldr	r0, [r7, #16]
 800c640:	f7ff ff48 	bl	800c4d4 <move_window>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d130      	bne.n	800c6ac <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	005b      	lsls	r3, r3, #1
 800c654:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c658:	4413      	add	r3, r2
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7ff fdf2 	bl	800c244 <ld_word>
 800c660:	4603      	mov	r3, r0
 800c662:	617b      	str	r3, [r7, #20]
			break;
 800c664:	e025      	b.n	800c6b2 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	6a1a      	ldr	r2, [r3, #32]
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	09db      	lsrs	r3, r3, #7
 800c66e:	4413      	add	r3, r2
 800c670:	4619      	mov	r1, r3
 800c672:	6938      	ldr	r0, [r7, #16]
 800c674:	f7ff ff2e 	bl	800c4d4 <move_window>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d118      	bne.n	800c6b0 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c68c:	4413      	add	r3, r2
 800c68e:	4618      	mov	r0, r3
 800c690:	f7ff fdf0 	bl	800c274 <ld_dword>
 800c694:	4603      	mov	r3, r0
 800c696:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c69a:	617b      	str	r3, [r7, #20]
			break;
 800c69c:	e009      	b.n	800c6b2 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c69e:	2301      	movs	r3, #1
 800c6a0:	617b      	str	r3, [r7, #20]
 800c6a2:	e006      	b.n	800c6b2 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6a4:	bf00      	nop
 800c6a6:	e004      	b.n	800c6b2 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c6a8:	bf00      	nop
 800c6aa:	e002      	b.n	800c6b2 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c6ac:	bf00      	nop
 800c6ae:	e000      	b.n	800c6b2 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c6b0:	bf00      	nop
		}
	}

	return val;
 800c6b2:	697b      	ldr	r3, [r7, #20]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3718      	adds	r7, #24
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c6bc:	b590      	push	{r4, r7, lr}
 800c6be:	b089      	sub	sp, #36	; 0x24
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c6c8:	2302      	movs	r3, #2
 800c6ca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	f240 80d9 	bls.w	800c886 <put_fat+0x1ca>
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	695b      	ldr	r3, [r3, #20]
 800c6d8:	68ba      	ldr	r2, [r7, #8]
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	f080 80d3 	bcs.w	800c886 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	781b      	ldrb	r3, [r3, #0]
 800c6e4:	2b03      	cmp	r3, #3
 800c6e6:	f000 8096 	beq.w	800c816 <put_fat+0x15a>
 800c6ea:	2b03      	cmp	r3, #3
 800c6ec:	f300 80cb 	bgt.w	800c886 <put_fat+0x1ca>
 800c6f0:	2b01      	cmp	r3, #1
 800c6f2:	d002      	beq.n	800c6fa <put_fat+0x3e>
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d06e      	beq.n	800c7d6 <put_fat+0x11a>
 800c6f8:	e0c5      	b.n	800c886 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c6fa:	68bb      	ldr	r3, [r7, #8]
 800c6fc:	61bb      	str	r3, [r7, #24]
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	085b      	lsrs	r3, r3, #1
 800c702:	69ba      	ldr	r2, [r7, #24]
 800c704:	4413      	add	r3, r2
 800c706:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	6a1a      	ldr	r2, [r3, #32]
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	0a5b      	lsrs	r3, r3, #9
 800c710:	4413      	add	r3, r2
 800c712:	4619      	mov	r1, r3
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f7ff fedd 	bl	800c4d4 <move_window>
 800c71a:	4603      	mov	r3, r0
 800c71c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c71e:	7ffb      	ldrb	r3, [r7, #31]
 800c720:	2b00      	cmp	r3, #0
 800c722:	f040 80a9 	bne.w	800c878 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	1c59      	adds	r1, r3, #1
 800c730:	61b9      	str	r1, [r7, #24]
 800c732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c736:	4413      	add	r3, r2
 800c738:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	d00d      	beq.n	800c760 <put_fat+0xa4>
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	b25b      	sxtb	r3, r3
 800c74a:	f003 030f 	and.w	r3, r3, #15
 800c74e:	b25a      	sxtb	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	b2db      	uxtb	r3, r3
 800c754:	011b      	lsls	r3, r3, #4
 800c756:	b25b      	sxtb	r3, r3
 800c758:	4313      	orrs	r3, r2
 800c75a:	b25b      	sxtb	r3, r3
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	e001      	b.n	800c764 <put_fat+0xa8>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	b2db      	uxtb	r3, r3
 800c764:	697a      	ldr	r2, [r7, #20]
 800c766:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2201      	movs	r2, #1
 800c76c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	6a1a      	ldr	r2, [r3, #32]
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	0a5b      	lsrs	r3, r3, #9
 800c776:	4413      	add	r3, r2
 800c778:	4619      	mov	r1, r3
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	f7ff feaa 	bl	800c4d4 <move_window>
 800c780:	4603      	mov	r3, r0
 800c782:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c784:	7ffb      	ldrb	r3, [r7, #31]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d178      	bne.n	800c87c <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c796:	4413      	add	r3, r2
 800c798:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	f003 0301 	and.w	r3, r3, #1
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d003      	beq.n	800c7ac <put_fat+0xf0>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	091b      	lsrs	r3, r3, #4
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	e00e      	b.n	800c7ca <put_fat+0x10e>
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	b25b      	sxtb	r3, r3
 800c7b2:	f023 030f 	bic.w	r3, r3, #15
 800c7b6:	b25a      	sxtb	r2, r3
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	0a1b      	lsrs	r3, r3, #8
 800c7bc:	b25b      	sxtb	r3, r3
 800c7be:	f003 030f 	and.w	r3, r3, #15
 800c7c2:	b25b      	sxtb	r3, r3
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	b25b      	sxtb	r3, r3
 800c7c8:	b2db      	uxtb	r3, r3
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	70da      	strb	r2, [r3, #3]
			break;
 800c7d4:	e057      	b.n	800c886 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	6a1a      	ldr	r2, [r3, #32]
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	0a1b      	lsrs	r3, r3, #8
 800c7de:	4413      	add	r3, r2
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f7ff fe76 	bl	800c4d4 <move_window>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c7ec:	7ffb      	ldrb	r3, [r7, #31]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d146      	bne.n	800c880 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	005b      	lsls	r3, r3, #1
 800c7fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800c800:	4413      	add	r3, r2
 800c802:	687a      	ldr	r2, [r7, #4]
 800c804:	b292      	uxth	r2, r2
 800c806:	4611      	mov	r1, r2
 800c808:	4618      	mov	r0, r3
 800c80a:	f7ff fd56 	bl	800c2ba <st_word>
			fs->wflag = 1;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2201      	movs	r2, #1
 800c812:	70da      	strb	r2, [r3, #3]
			break;
 800c814:	e037      	b.n	800c886 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6a1a      	ldr	r2, [r3, #32]
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	09db      	lsrs	r3, r3, #7
 800c81e:	4413      	add	r3, r2
 800c820:	4619      	mov	r1, r3
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f7ff fe56 	bl	800c4d4 <move_window>
 800c828:	4603      	mov	r3, r0
 800c82a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c82c:	7ffb      	ldrb	r3, [r7, #31]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d128      	bne.n	800c884 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c846:	4413      	add	r3, r2
 800c848:	4618      	mov	r0, r3
 800c84a:	f7ff fd13 	bl	800c274 <ld_dword>
 800c84e:	4603      	mov	r3, r0
 800c850:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c854:	4323      	orrs	r3, r4
 800c856:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800c866:	4413      	add	r3, r2
 800c868:	6879      	ldr	r1, [r7, #4]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff fd40 	bl	800c2f0 <st_dword>
			fs->wflag = 1;
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	2201      	movs	r2, #1
 800c874:	70da      	strb	r2, [r3, #3]
			break;
 800c876:	e006      	b.n	800c886 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c878:	bf00      	nop
 800c87a:	e004      	b.n	800c886 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c87c:	bf00      	nop
 800c87e:	e002      	b.n	800c886 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c880:	bf00      	nop
 800c882:	e000      	b.n	800c886 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800c884:	bf00      	nop
		}
	}
	return res;
 800c886:	7ffb      	ldrb	r3, [r7, #31]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3724      	adds	r7, #36	; 0x24
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd90      	pop	{r4, r7, pc}

0800c890 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b088      	sub	sp, #32
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d10d      	bne.n	800c8c2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d004      	beq.n	800c8bc <create_chain+0x2c>
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	69ba      	ldr	r2, [r7, #24]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d31b      	bcc.n	800c8f4 <create_chain+0x64>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	61bb      	str	r3, [r7, #24]
 800c8c0:	e018      	b.n	800c8f4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f7ff fe51 	bl	800c56c <get_fat>
 800c8ca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b01      	cmp	r3, #1
 800c8d0:	d801      	bhi.n	800c8d6 <create_chain+0x46>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	e070      	b.n	800c9b8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8dc:	d101      	bne.n	800c8e2 <create_chain+0x52>
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	e06a      	b.n	800c9b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	695b      	ldr	r3, [r3, #20]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d201      	bcs.n	800c8f0 <create_chain+0x60>
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	e063      	b.n	800c9b8 <create_chain+0x128>
		scl = clst;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	695b      	ldr	r3, [r3, #20]
 800c902:	69fa      	ldr	r2, [r7, #28]
 800c904:	429a      	cmp	r2, r3
 800c906:	d307      	bcc.n	800c918 <create_chain+0x88>
				ncl = 2;
 800c908:	2302      	movs	r3, #2
 800c90a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c90c:	69fa      	ldr	r2, [r7, #28]
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	429a      	cmp	r2, r3
 800c912:	d901      	bls.n	800c918 <create_chain+0x88>
 800c914:	2300      	movs	r3, #0
 800c916:	e04f      	b.n	800c9b8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c918:	69f9      	ldr	r1, [r7, #28]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7ff fe26 	bl	800c56c <get_fat>
 800c920:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d00e      	beq.n	800c946 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2b01      	cmp	r3, #1
 800c92c:	d003      	beq.n	800c936 <create_chain+0xa6>
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c934:	d101      	bne.n	800c93a <create_chain+0xaa>
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	e03e      	b.n	800c9b8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c93a:	69fa      	ldr	r2, [r7, #28]
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d1da      	bne.n	800c8f8 <create_chain+0x68>
 800c942:	2300      	movs	r3, #0
 800c944:	e038      	b.n	800c9b8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c946:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c948:	f04f 32ff 	mov.w	r2, #4294967295
 800c94c:	69f9      	ldr	r1, [r7, #28]
 800c94e:	6938      	ldr	r0, [r7, #16]
 800c950:	f7ff feb4 	bl	800c6bc <put_fat>
 800c954:	4603      	mov	r3, r0
 800c956:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c958:	7dfb      	ldrb	r3, [r7, #23]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d109      	bne.n	800c972 <create_chain+0xe2>
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d006      	beq.n	800c972 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c964:	69fa      	ldr	r2, [r7, #28]
 800c966:	6839      	ldr	r1, [r7, #0]
 800c968:	6938      	ldr	r0, [r7, #16]
 800c96a:	f7ff fea7 	bl	800c6bc <put_fat>
 800c96e:	4603      	mov	r3, r0
 800c970:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c972:	7dfb      	ldrb	r3, [r7, #23]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d116      	bne.n	800c9a6 <create_chain+0x116>
		fs->last_clst = ncl;
 800c978:	693b      	ldr	r3, [r7, #16]
 800c97a:	69fa      	ldr	r2, [r7, #28]
 800c97c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	691a      	ldr	r2, [r3, #16]
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	3b02      	subs	r3, #2
 800c988:	429a      	cmp	r2, r3
 800c98a:	d804      	bhi.n	800c996 <create_chain+0x106>
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	1e5a      	subs	r2, r3, #1
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	791b      	ldrb	r3, [r3, #4]
 800c99a:	f043 0301 	orr.w	r3, r3, #1
 800c99e:	b2da      	uxtb	r2, r3
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	711a      	strb	r2, [r3, #4]
 800c9a4:	e007      	b.n	800c9b6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d102      	bne.n	800c9b2 <create_chain+0x122>
 800c9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800c9b0:	e000      	b.n	800c9b4 <create_chain+0x124>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c9b6:	69fb      	ldr	r3, [r7, #28]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3720      	adds	r7, #32
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c9d6:	d204      	bcs.n	800c9e2 <dir_sdi+0x22>
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	f003 031f 	and.w	r3, r3, #31
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d001      	beq.n	800c9e6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c9e2:	2302      	movs	r3, #2
 800c9e4:	e063      	b.n	800caae <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	683a      	ldr	r2, [r7, #0]
 800c9ea:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	689b      	ldr	r3, [r3, #8]
 800c9f0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d106      	bne.n	800ca06 <dir_sdi+0x46>
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d902      	bls.n	800ca06 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca04:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d10c      	bne.n	800ca26 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	095b      	lsrs	r3, r3, #5
 800ca10:	693a      	ldr	r2, [r7, #16]
 800ca12:	8912      	ldrh	r2, [r2, #8]
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d301      	bcc.n	800ca1c <dir_sdi+0x5c>
 800ca18:	2302      	movs	r3, #2
 800ca1a:	e048      	b.n	800caae <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	61da      	str	r2, [r3, #28]
 800ca24:	e029      	b.n	800ca7a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	895b      	ldrh	r3, [r3, #10]
 800ca2a:	025b      	lsls	r3, r3, #9
 800ca2c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ca2e:	e019      	b.n	800ca64 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6979      	ldr	r1, [r7, #20]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f7ff fd99 	bl	800c56c <get_fat>
 800ca3a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ca3c:	697b      	ldr	r3, [r7, #20]
 800ca3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca42:	d101      	bne.n	800ca48 <dir_sdi+0x88>
 800ca44:	2301      	movs	r3, #1
 800ca46:	e032      	b.n	800caae <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d904      	bls.n	800ca58 <dir_sdi+0x98>
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	695b      	ldr	r3, [r3, #20]
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d301      	bcc.n	800ca5c <dir_sdi+0x9c>
 800ca58:	2302      	movs	r3, #2
 800ca5a:	e028      	b.n	800caae <dir_sdi+0xee>
			ofs -= csz;
 800ca5c:	683a      	ldr	r2, [r7, #0]
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	1ad3      	subs	r3, r2, r3
 800ca62:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ca64:	683a      	ldr	r2, [r7, #0]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d2e1      	bcs.n	800ca30 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ca6c:	6979      	ldr	r1, [r7, #20]
 800ca6e:	6938      	ldr	r0, [r7, #16]
 800ca70:	f7ff fd5d 	bl	800c52e <clust2sect>
 800ca74:	4602      	mov	r2, r0
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	697a      	ldr	r2, [r7, #20]
 800ca7e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	69db      	ldr	r3, [r3, #28]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <dir_sdi+0xcc>
 800ca88:	2302      	movs	r3, #2
 800ca8a:	e010      	b.n	800caae <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	69da      	ldr	r2, [r3, #28]
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	0a5b      	lsrs	r3, r3, #9
 800ca94:	441a      	add	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa6:	441a      	add	r2, r3
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3718      	adds	r7, #24
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b086      	sub	sp, #24
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6078      	str	r0, [r7, #4]
 800cabe:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	695b      	ldr	r3, [r3, #20]
 800caca:	3320      	adds	r3, #32
 800cacc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	69db      	ldr	r3, [r3, #28]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d003      	beq.n	800cade <dir_next+0x28>
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cadc:	d301      	bcc.n	800cae2 <dir_next+0x2c>
 800cade:	2304      	movs	r3, #4
 800cae0:	e0aa      	b.n	800cc38 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f040 8098 	bne.w	800cc1e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	1c5a      	adds	r2, r3, #1
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	699b      	ldr	r3, [r3, #24]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d10b      	bne.n	800cb18 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	095b      	lsrs	r3, r3, #5
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	8912      	ldrh	r2, [r2, #8]
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	f0c0 8088 	bcc.w	800cc1e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	61da      	str	r2, [r3, #28]
 800cb14:	2304      	movs	r3, #4
 800cb16:	e08f      	b.n	800cc38 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	0a5b      	lsrs	r3, r3, #9
 800cb1c:	68fa      	ldr	r2, [r7, #12]
 800cb1e:	8952      	ldrh	r2, [r2, #10]
 800cb20:	3a01      	subs	r2, #1
 800cb22:	4013      	ands	r3, r2
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d17a      	bne.n	800cc1e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	4610      	mov	r0, r2
 800cb32:	f7ff fd1b 	bl	800c56c <get_fat>
 800cb36:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	2b01      	cmp	r3, #1
 800cb3c:	d801      	bhi.n	800cb42 <dir_next+0x8c>
 800cb3e:	2302      	movs	r3, #2
 800cb40:	e07a      	b.n	800cc38 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb48:	d101      	bne.n	800cb4e <dir_next+0x98>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e074      	b.n	800cc38 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	695b      	ldr	r3, [r3, #20]
 800cb52:	697a      	ldr	r2, [r7, #20]
 800cb54:	429a      	cmp	r2, r3
 800cb56:	d358      	bcc.n	800cc0a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d104      	bne.n	800cb68 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	2200      	movs	r2, #0
 800cb62:	61da      	str	r2, [r3, #28]
 800cb64:	2304      	movs	r3, #4
 800cb66:	e067      	b.n	800cc38 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	4619      	mov	r1, r3
 800cb70:	4610      	mov	r0, r2
 800cb72:	f7ff fe8d 	bl	800c890 <create_chain>
 800cb76:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cb78:	697b      	ldr	r3, [r7, #20]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <dir_next+0xcc>
 800cb7e:	2307      	movs	r3, #7
 800cb80:	e05a      	b.n	800cc38 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d101      	bne.n	800cb8c <dir_next+0xd6>
 800cb88:	2302      	movs	r3, #2
 800cb8a:	e055      	b.n	800cc38 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb92:	d101      	bne.n	800cb98 <dir_next+0xe2>
 800cb94:	2301      	movs	r3, #1
 800cb96:	e04f      	b.n	800cc38 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f7ff fc57 	bl	800c44c <sync_window>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d001      	beq.n	800cba8 <dir_next+0xf2>
 800cba4:	2301      	movs	r3, #1
 800cba6:	e047      	b.n	800cc38 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	3330      	adds	r3, #48	; 0x30
 800cbac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7ff fbc8 	bl	800c348 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cbb8:	2300      	movs	r3, #0
 800cbba:	613b      	str	r3, [r7, #16]
 800cbbc:	6979      	ldr	r1, [r7, #20]
 800cbbe:	68f8      	ldr	r0, [r7, #12]
 800cbc0:	f7ff fcb5 	bl	800c52e <clust2sect>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	62da      	str	r2, [r3, #44]	; 0x2c
 800cbca:	e012      	b.n	800cbf2 <dir_next+0x13c>
						fs->wflag = 1;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f7ff fc3a 	bl	800c44c <sync_window>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d001      	beq.n	800cbe2 <dir_next+0x12c>
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e02a      	b.n	800cc38 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cbe2:	693b      	ldr	r3, [r7, #16]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	613b      	str	r3, [r7, #16]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	1c5a      	adds	r2, r3, #1
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	62da      	str	r2, [r3, #44]	; 0x2c
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	895b      	ldrh	r3, [r3, #10]
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d3e6      	bcc.n	800cbcc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc02:	693b      	ldr	r3, [r7, #16]
 800cc04:	1ad2      	subs	r2, r2, r3
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	697a      	ldr	r2, [r7, #20]
 800cc0e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cc10:	6979      	ldr	r1, [r7, #20]
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f7ff fc8b 	bl	800c52e <clust2sect>
 800cc18:	4602      	mov	r2, r0
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc30:	441a      	add	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cc36:	2300      	movs	r3, #0
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3718      	adds	r7, #24
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}

0800cc40 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	331a      	adds	r3, #26
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f7ff faf8 	bl	800c244 <ld_word>
 800cc54:	4603      	mov	r3, r0
 800cc56:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	2b03      	cmp	r3, #3
 800cc5e:	d109      	bne.n	800cc74 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	3314      	adds	r3, #20
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7ff faed 	bl	800c244 <ld_word>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	041b      	lsls	r3, r3, #16
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	4313      	orrs	r3, r2
 800cc72:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cc74:	68fb      	ldr	r3, [r7, #12]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b086      	sub	sp, #24
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800cc8c:	2100      	movs	r1, #0
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff fe96 	bl	800c9c0 <dir_sdi>
 800cc94:	4603      	mov	r3, r0
 800cc96:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <dir_find+0x24>
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	e03e      	b.n	800cd20 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	69db      	ldr	r3, [r3, #28]
 800cca6:	4619      	mov	r1, r3
 800cca8:	6938      	ldr	r0, [r7, #16]
 800ccaa:	f7ff fc13 	bl	800c4d4 <move_window>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ccb2:	7dfb      	ldrb	r3, [r7, #23]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d12f      	bne.n	800cd18 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6a1b      	ldr	r3, [r3, #32]
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d102      	bne.n	800cccc <dir_find+0x4e>
 800ccc6:	2304      	movs	r3, #4
 800ccc8:	75fb      	strb	r3, [r7, #23]
 800ccca:	e028      	b.n	800cd1e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6a1b      	ldr	r3, [r3, #32]
 800ccd0:	330b      	adds	r3, #11
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccd8:	b2da      	uxtb	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6a1b      	ldr	r3, [r3, #32]
 800cce2:	330b      	adds	r3, #11
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	f003 0308 	and.w	r3, r3, #8
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d10a      	bne.n	800cd04 <dir_find+0x86>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6a18      	ldr	r0, [r3, #32]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	3324      	adds	r3, #36	; 0x24
 800ccf6:	220b      	movs	r2, #11
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	f7ff fb40 	bl	800c37e <mem_cmp>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d00b      	beq.n	800cd1c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cd04:	2100      	movs	r1, #0
 800cd06:	6878      	ldr	r0, [r7, #4]
 800cd08:	f7ff fed5 	bl	800cab6 <dir_next>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800cd10:	7dfb      	ldrb	r3, [r7, #23]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d0c5      	beq.n	800cca2 <dir_find+0x24>
 800cd16:	e002      	b.n	800cd1e <dir_find+0xa0>
		if (res != FR_OK) break;
 800cd18:	bf00      	nop
 800cd1a:	e000      	b.n	800cd1e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800cd1c:	bf00      	nop

	return res;
 800cd1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3718      	adds	r7, #24
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b086      	sub	sp, #24
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	6078      	str	r0, [r7, #4]
 800cd30:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	2200      	movs	r2, #0
 800cd36:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	69db      	ldr	r3, [r3, #28]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d04e      	beq.n	800cdde <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800cd40:	2300      	movs	r3, #0
 800cd42:	613b      	str	r3, [r7, #16]
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800cd48:	e021      	b.n	800cd8e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a1a      	ldr	r2, [r3, #32]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	1c59      	adds	r1, r3, #1
 800cd52:	6179      	str	r1, [r7, #20]
 800cd54:	4413      	add	r3, r2
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	2b20      	cmp	r3, #32
 800cd5e:	d100      	bne.n	800cd62 <get_fileinfo+0x3a>
 800cd60:	e015      	b.n	800cd8e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800cd62:	7bfb      	ldrb	r3, [r7, #15]
 800cd64:	2b05      	cmp	r3, #5
 800cd66:	d101      	bne.n	800cd6c <get_fileinfo+0x44>
 800cd68:	23e5      	movs	r3, #229	; 0xe5
 800cd6a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	2b09      	cmp	r3, #9
 800cd70:	d106      	bne.n	800cd80 <get_fileinfo+0x58>
 800cd72:	693b      	ldr	r3, [r7, #16]
 800cd74:	1c5a      	adds	r2, r3, #1
 800cd76:	613a      	str	r2, [r7, #16]
 800cd78:	683a      	ldr	r2, [r7, #0]
 800cd7a:	4413      	add	r3, r2
 800cd7c:	222e      	movs	r2, #46	; 0x2e
 800cd7e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	1c5a      	adds	r2, r3, #1
 800cd84:	613a      	str	r2, [r7, #16]
 800cd86:	683a      	ldr	r2, [r7, #0]
 800cd88:	4413      	add	r3, r2
 800cd8a:	7bfa      	ldrb	r2, [r7, #15]
 800cd8c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	2b0a      	cmp	r3, #10
 800cd92:	d9da      	bls.n	800cd4a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800cd94:	683a      	ldr	r2, [r7, #0]
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	4413      	add	r3, r2
 800cd9a:	3309      	adds	r3, #9
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	6a1b      	ldr	r3, [r3, #32]
 800cda4:	7ada      	ldrb	r2, [r3, #11]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6a1b      	ldr	r3, [r3, #32]
 800cdae:	331c      	adds	r3, #28
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7ff fa5f 	bl	800c274 <ld_dword>
 800cdb6:	4602      	mov	r2, r0
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6a1b      	ldr	r3, [r3, #32]
 800cdc0:	3316      	adds	r3, #22
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7ff fa56 	bl	800c274 <ld_dword>
 800cdc8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	80da      	strh	r2, [r3, #6]
 800cdd2:	68bb      	ldr	r3, [r7, #8]
 800cdd4:	0c1b      	lsrs	r3, r3, #16
 800cdd6:	b29a      	uxth	r2, r3
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	809a      	strh	r2, [r3, #4]
 800cddc:	e000      	b.n	800cde0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800cdde:	bf00      	nop
}
 800cde0:	3718      	adds	r7, #24
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
	...

0800cde8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b088      	sub	sp, #32
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	60fb      	str	r3, [r7, #12]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	3324      	adds	r3, #36	; 0x24
 800cdfc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cdfe:	220b      	movs	r2, #11
 800ce00:	2120      	movs	r1, #32
 800ce02:	68b8      	ldr	r0, [r7, #8]
 800ce04:	f7ff faa0 	bl	800c348 <mem_set>
	si = i = 0; ni = 8;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	613b      	str	r3, [r7, #16]
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	61fb      	str	r3, [r7, #28]
 800ce10:	2308      	movs	r3, #8
 800ce12:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	61fa      	str	r2, [r7, #28]
 800ce1a:	68fa      	ldr	r2, [r7, #12]
 800ce1c:	4413      	add	r3, r2
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ce22:	7efb      	ldrb	r3, [r7, #27]
 800ce24:	2b20      	cmp	r3, #32
 800ce26:	d94e      	bls.n	800cec6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ce28:	7efb      	ldrb	r3, [r7, #27]
 800ce2a:	2b2f      	cmp	r3, #47	; 0x2f
 800ce2c:	d006      	beq.n	800ce3c <create_name+0x54>
 800ce2e:	7efb      	ldrb	r3, [r7, #27]
 800ce30:	2b5c      	cmp	r3, #92	; 0x5c
 800ce32:	d110      	bne.n	800ce56 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ce34:	e002      	b.n	800ce3c <create_name+0x54>
 800ce36:	69fb      	ldr	r3, [r7, #28]
 800ce38:	3301      	adds	r3, #1
 800ce3a:	61fb      	str	r3, [r7, #28]
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	4413      	add	r3, r2
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b2f      	cmp	r3, #47	; 0x2f
 800ce46:	d0f6      	beq.n	800ce36 <create_name+0x4e>
 800ce48:	68fa      	ldr	r2, [r7, #12]
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	781b      	ldrb	r3, [r3, #0]
 800ce50:	2b5c      	cmp	r3, #92	; 0x5c
 800ce52:	d0f0      	beq.n	800ce36 <create_name+0x4e>
			break;
 800ce54:	e038      	b.n	800cec8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ce56:	7efb      	ldrb	r3, [r7, #27]
 800ce58:	2b2e      	cmp	r3, #46	; 0x2e
 800ce5a:	d003      	beq.n	800ce64 <create_name+0x7c>
 800ce5c:	693a      	ldr	r2, [r7, #16]
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	429a      	cmp	r2, r3
 800ce62:	d30c      	bcc.n	800ce7e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	2b0b      	cmp	r3, #11
 800ce68:	d002      	beq.n	800ce70 <create_name+0x88>
 800ce6a:	7efb      	ldrb	r3, [r7, #27]
 800ce6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ce6e:	d001      	beq.n	800ce74 <create_name+0x8c>
 800ce70:	2306      	movs	r3, #6
 800ce72:	e044      	b.n	800cefe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ce74:	2308      	movs	r3, #8
 800ce76:	613b      	str	r3, [r7, #16]
 800ce78:	230b      	movs	r3, #11
 800ce7a:	617b      	str	r3, [r7, #20]
			continue;
 800ce7c:	e022      	b.n	800cec4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ce7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	da04      	bge.n	800ce90 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ce86:	7efb      	ldrb	r3, [r7, #27]
 800ce88:	3b80      	subs	r3, #128	; 0x80
 800ce8a:	4a1f      	ldr	r2, [pc, #124]	; (800cf08 <create_name+0x120>)
 800ce8c:	5cd3      	ldrb	r3, [r2, r3]
 800ce8e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ce90:	7efb      	ldrb	r3, [r7, #27]
 800ce92:	4619      	mov	r1, r3
 800ce94:	481d      	ldr	r0, [pc, #116]	; (800cf0c <create_name+0x124>)
 800ce96:	f7ff fa99 	bl	800c3cc <chk_chr>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d001      	beq.n	800cea4 <create_name+0xbc>
 800cea0:	2306      	movs	r3, #6
 800cea2:	e02c      	b.n	800cefe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cea4:	7efb      	ldrb	r3, [r7, #27]
 800cea6:	2b60      	cmp	r3, #96	; 0x60
 800cea8:	d905      	bls.n	800ceb6 <create_name+0xce>
 800ceaa:	7efb      	ldrb	r3, [r7, #27]
 800ceac:	2b7a      	cmp	r3, #122	; 0x7a
 800ceae:	d802      	bhi.n	800ceb6 <create_name+0xce>
 800ceb0:	7efb      	ldrb	r3, [r7, #27]
 800ceb2:	3b20      	subs	r3, #32
 800ceb4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	1c5a      	adds	r2, r3, #1
 800ceba:	613a      	str	r2, [r7, #16]
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	4413      	add	r3, r2
 800cec0:	7efa      	ldrb	r2, [r7, #27]
 800cec2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cec4:	e7a6      	b.n	800ce14 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cec6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	441a      	add	r2, r3
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d101      	bne.n	800cedc <create_name+0xf4>
 800ced8:	2306      	movs	r3, #6
 800ceda:	e010      	b.n	800cefe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	2be5      	cmp	r3, #229	; 0xe5
 800cee2:	d102      	bne.n	800ceea <create_name+0x102>
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	2205      	movs	r2, #5
 800cee8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ceea:	7efb      	ldrb	r3, [r7, #27]
 800ceec:	2b20      	cmp	r3, #32
 800ceee:	d801      	bhi.n	800cef4 <create_name+0x10c>
 800cef0:	2204      	movs	r2, #4
 800cef2:	e000      	b.n	800cef6 <create_name+0x10e>
 800cef4:	2200      	movs	r2, #0
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	330b      	adds	r3, #11
 800cefa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cefc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3720      	adds	r7, #32
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}
 800cf06:	bf00      	nop
 800cf08:	0800e1c4 	.word	0x0800e1c4
 800cf0c:	0800e134 	.word	0x0800e134

0800cf10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cf1e:	693b      	ldr	r3, [r7, #16]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cf24:	e002      	b.n	800cf2c <follow_path+0x1c>
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	3301      	adds	r3, #1
 800cf2a:	603b      	str	r3, [r7, #0]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	2b2f      	cmp	r3, #47	; 0x2f
 800cf32:	d0f8      	beq.n	800cf26 <follow_path+0x16>
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	2b5c      	cmp	r3, #92	; 0x5c
 800cf3a:	d0f4      	beq.n	800cf26 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	781b      	ldrb	r3, [r3, #0]
 800cf46:	2b1f      	cmp	r3, #31
 800cf48:	d80a      	bhi.n	800cf60 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2280      	movs	r2, #128	; 0x80
 800cf4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cf52:	2100      	movs	r1, #0
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7ff fd33 	bl	800c9c0 <dir_sdi>
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	75fb      	strb	r3, [r7, #23]
 800cf5e:	e043      	b.n	800cfe8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cf60:	463b      	mov	r3, r7
 800cf62:	4619      	mov	r1, r3
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f7ff ff3f 	bl	800cde8 <create_name>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cf6e:	7dfb      	ldrb	r3, [r7, #23]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d134      	bne.n	800cfde <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f7ff fe82 	bl	800cc7e <dir_find>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf84:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cf86:	7dfb      	ldrb	r3, [r7, #23]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00a      	beq.n	800cfa2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cf8c:	7dfb      	ldrb	r3, [r7, #23]
 800cf8e:	2b04      	cmp	r3, #4
 800cf90:	d127      	bne.n	800cfe2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cf92:	7afb      	ldrb	r3, [r7, #11]
 800cf94:	f003 0304 	and.w	r3, r3, #4
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d122      	bne.n	800cfe2 <follow_path+0xd2>
 800cf9c:	2305      	movs	r3, #5
 800cf9e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cfa0:	e01f      	b.n	800cfe2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cfa2:	7afb      	ldrb	r3, [r7, #11]
 800cfa4:	f003 0304 	and.w	r3, r3, #4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d11c      	bne.n	800cfe6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	799b      	ldrb	r3, [r3, #6]
 800cfb0:	f003 0310 	and.w	r3, r3, #16
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d102      	bne.n	800cfbe <follow_path+0xae>
				res = FR_NO_PATH; break;
 800cfb8:	2305      	movs	r3, #5
 800cfba:	75fb      	strb	r3, [r7, #23]
 800cfbc:	e014      	b.n	800cfe8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	695b      	ldr	r3, [r3, #20]
 800cfc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfcc:	4413      	add	r3, r2
 800cfce:	4619      	mov	r1, r3
 800cfd0:	68f8      	ldr	r0, [r7, #12]
 800cfd2:	f7ff fe35 	bl	800cc40 <ld_clust>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cfdc:	e7c0      	b.n	800cf60 <follow_path+0x50>
			if (res != FR_OK) break;
 800cfde:	bf00      	nop
 800cfe0:	e002      	b.n	800cfe8 <follow_path+0xd8>
				break;
 800cfe2:	bf00      	nop
 800cfe4:	e000      	b.n	800cfe8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cfe6:	bf00      	nop
			}
		}
	}

	return res;
 800cfe8:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3718      	adds	r7, #24
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cff2:	b480      	push	{r7}
 800cff4:	b087      	sub	sp, #28
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cffa:	f04f 33ff 	mov.w	r3, #4294967295
 800cffe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2b00      	cmp	r3, #0
 800d006:	d031      	beq.n	800d06c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	617b      	str	r3, [r7, #20]
 800d00e:	e002      	b.n	800d016 <get_ldnumber+0x24>
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	3301      	adds	r3, #1
 800d014:	617b      	str	r3, [r7, #20]
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b20      	cmp	r3, #32
 800d01c:	d903      	bls.n	800d026 <get_ldnumber+0x34>
 800d01e:	697b      	ldr	r3, [r7, #20]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	2b3a      	cmp	r3, #58	; 0x3a
 800d024:	d1f4      	bne.n	800d010 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	2b3a      	cmp	r3, #58	; 0x3a
 800d02c:	d11c      	bne.n	800d068 <get_ldnumber+0x76>
			tp = *path;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	1c5a      	adds	r2, r3, #1
 800d038:	60fa      	str	r2, [r7, #12]
 800d03a:	781b      	ldrb	r3, [r3, #0]
 800d03c:	3b30      	subs	r3, #48	; 0x30
 800d03e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2b09      	cmp	r3, #9
 800d044:	d80e      	bhi.n	800d064 <get_ldnumber+0x72>
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d10a      	bne.n	800d064 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d107      	bne.n	800d064 <get_ldnumber+0x72>
					vol = (int)i;
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	3301      	adds	r3, #1
 800d05c:	617b      	str	r3, [r7, #20]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	697a      	ldr	r2, [r7, #20]
 800d062:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	e002      	b.n	800d06e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d068:	2300      	movs	r3, #0
 800d06a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d06c:	693b      	ldr	r3, [r7, #16]
}
 800d06e:	4618      	mov	r0, r3
 800d070:	371c      	adds	r7, #28
 800d072:	46bd      	mov	sp, r7
 800d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d078:	4770      	bx	lr
	...

0800d07c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	70da      	strb	r2, [r3, #3]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f04f 32ff 	mov.w	r2, #4294967295
 800d092:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d094:	6839      	ldr	r1, [r7, #0]
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f7ff fa1c 	bl	800c4d4 <move_window>
 800d09c:	4603      	mov	r3, r0
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d001      	beq.n	800d0a6 <check_fs+0x2a>
 800d0a2:	2304      	movs	r3, #4
 800d0a4:	e038      	b.n	800d118 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	3330      	adds	r3, #48	; 0x30
 800d0aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f7ff f8c8 	bl	800c244 <ld_word>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	461a      	mov	r2, r3
 800d0b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d001      	beq.n	800d0c4 <check_fs+0x48>
 800d0c0:	2303      	movs	r3, #3
 800d0c2:	e029      	b.n	800d118 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0ca:	2be9      	cmp	r3, #233	; 0xe9
 800d0cc:	d009      	beq.n	800d0e2 <check_fs+0x66>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d0d4:	2beb      	cmp	r3, #235	; 0xeb
 800d0d6:	d11e      	bne.n	800d116 <check_fs+0x9a>
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800d0de:	2b90      	cmp	r3, #144	; 0x90
 800d0e0:	d119      	bne.n	800d116 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	3330      	adds	r3, #48	; 0x30
 800d0e6:	3336      	adds	r3, #54	; 0x36
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7ff f8c3 	bl	800c274 <ld_dword>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d0f4:	4a0a      	ldr	r2, [pc, #40]	; (800d120 <check_fs+0xa4>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d101      	bne.n	800d0fe <check_fs+0x82>
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	e00c      	b.n	800d118 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	3330      	adds	r3, #48	; 0x30
 800d102:	3352      	adds	r3, #82	; 0x52
 800d104:	4618      	mov	r0, r3
 800d106:	f7ff f8b5 	bl	800c274 <ld_dword>
 800d10a:	4603      	mov	r3, r0
 800d10c:	4a05      	ldr	r2, [pc, #20]	; (800d124 <check_fs+0xa8>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d101      	bne.n	800d116 <check_fs+0x9a>
 800d112:	2300      	movs	r3, #0
 800d114:	e000      	b.n	800d118 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d116:	2302      	movs	r3, #2
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3708      	adds	r7, #8
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}
 800d120:	00544146 	.word	0x00544146
 800d124:	33544146 	.word	0x33544146

0800d128 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b096      	sub	sp, #88	; 0x58
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	4613      	mov	r3, r2
 800d134:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d136:	68bb      	ldr	r3, [r7, #8]
 800d138:	2200      	movs	r2, #0
 800d13a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f7ff ff58 	bl	800cff2 <get_ldnumber>
 800d142:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d146:	2b00      	cmp	r3, #0
 800d148:	da01      	bge.n	800d14e <find_volume+0x26>
 800d14a:	230b      	movs	r3, #11
 800d14c:	e22d      	b.n	800d5aa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d14e:	4aa1      	ldr	r2, [pc, #644]	; (800d3d4 <find_volume+0x2ac>)
 800d150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d156:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <find_volume+0x3a>
 800d15e:	230c      	movs	r3, #12
 800d160:	e223      	b.n	800d5aa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d166:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	f023 0301 	bic.w	r3, r3, #1
 800d16e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d01a      	beq.n	800d1ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17a:	785b      	ldrb	r3, [r3, #1]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fe ffe1 	bl	800c144 <disk_status>
 800d182:	4603      	mov	r3, r0
 800d184:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d188:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d18c:	f003 0301 	and.w	r3, r3, #1
 800d190:	2b00      	cmp	r3, #0
 800d192:	d10c      	bne.n	800d1ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d194:	79fb      	ldrb	r3, [r7, #7]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d007      	beq.n	800d1aa <find_volume+0x82>
 800d19a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d19e:	f003 0304 	and.w	r3, r3, #4
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d001      	beq.n	800d1aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d1a6:	230a      	movs	r3, #10
 800d1a8:	e1ff      	b.n	800d5aa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	e1fd      	b.n	800d5aa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b6:	b2da      	uxtb	r2, r3
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1be:	785b      	ldrb	r3, [r3, #1]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fe ffd9 	bl	800c178 <disk_initialize>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d1cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1d0:	f003 0301 	and.w	r3, r3, #1
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d001      	beq.n	800d1dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d1d8:	2303      	movs	r3, #3
 800d1da:	e1e6      	b.n	800d5aa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d1dc:	79fb      	ldrb	r3, [r7, #7]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d007      	beq.n	800d1f2 <find_volume+0xca>
 800d1e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1e6:	f003 0304 	and.w	r3, r3, #4
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d001      	beq.n	800d1f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d1ee:	230a      	movs	r3, #10
 800d1f0:	e1db      	b.n	800d5aa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d1f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d1fa:	f7ff ff3f 	bl	800d07c <check_fs>
 800d1fe:	4603      	mov	r3, r0
 800d200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d204:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d149      	bne.n	800d2a0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d20c:	2300      	movs	r3, #0
 800d20e:	643b      	str	r3, [r7, #64]	; 0x40
 800d210:	e01e      	b.n	800d250 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d214:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d21a:	011b      	lsls	r3, r3, #4
 800d21c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d220:	4413      	add	r3, r2
 800d222:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d226:	3304      	adds	r3, #4
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d006      	beq.n	800d23c <find_volume+0x114>
 800d22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d230:	3308      	adds	r3, #8
 800d232:	4618      	mov	r0, r3
 800d234:	f7ff f81e 	bl	800c274 <ld_dword>
 800d238:	4602      	mov	r2, r0
 800d23a:	e000      	b.n	800d23e <find_volume+0x116>
 800d23c:	2200      	movs	r2, #0
 800d23e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d240:	009b      	lsls	r3, r3, #2
 800d242:	3358      	adds	r3, #88	; 0x58
 800d244:	443b      	add	r3, r7
 800d246:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d24a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d24c:	3301      	adds	r3, #1
 800d24e:	643b      	str	r3, [r7, #64]	; 0x40
 800d250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d252:	2b03      	cmp	r3, #3
 800d254:	d9dd      	bls.n	800d212 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d256:	2300      	movs	r3, #0
 800d258:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800d25a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d002      	beq.n	800d266 <find_volume+0x13e>
 800d260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d262:	3b01      	subs	r3, #1
 800d264:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	3358      	adds	r3, #88	; 0x58
 800d26c:	443b      	add	r3, r7
 800d26e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d272:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d276:	2b00      	cmp	r3, #0
 800d278:	d005      	beq.n	800d286 <find_volume+0x15e>
 800d27a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d27c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d27e:	f7ff fefd 	bl	800d07c <check_fs>
 800d282:	4603      	mov	r3, r0
 800d284:	e000      	b.n	800d288 <find_volume+0x160>
 800d286:	2303      	movs	r3, #3
 800d288:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d28c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d290:	2b01      	cmp	r3, #1
 800d292:	d905      	bls.n	800d2a0 <find_volume+0x178>
 800d294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d296:	3301      	adds	r3, #1
 800d298:	643b      	str	r3, [r7, #64]	; 0x40
 800d29a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d29c:	2b03      	cmp	r3, #3
 800d29e:	d9e2      	bls.n	800d266 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d2a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2a4:	2b04      	cmp	r3, #4
 800d2a6:	d101      	bne.n	800d2ac <find_volume+0x184>
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	e17e      	b.n	800d5aa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d2ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d901      	bls.n	800d2b8 <find_volume+0x190>
 800d2b4:	230d      	movs	r3, #13
 800d2b6:	e178      	b.n	800d5aa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ba:	3330      	adds	r3, #48	; 0x30
 800d2bc:	330b      	adds	r3, #11
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe ffc0 	bl	800c244 <ld_word>
 800d2c4:	4603      	mov	r3, r0
 800d2c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2ca:	d001      	beq.n	800d2d0 <find_volume+0x1a8>
 800d2cc:	230d      	movs	r3, #13
 800d2ce:	e16c      	b.n	800d5aa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d2:	3330      	adds	r3, #48	; 0x30
 800d2d4:	3316      	adds	r3, #22
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fe ffb4 	bl	800c244 <ld_word>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d2e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <find_volume+0x1cc>
 800d2e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2e8:	3330      	adds	r3, #48	; 0x30
 800d2ea:	3324      	adds	r3, #36	; 0x24
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	f7fe ffc1 	bl	800c274 <ld_dword>
 800d2f2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2f8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800d300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d302:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d306:	789b      	ldrb	r3, [r3, #2]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d005      	beq.n	800d318 <find_volume+0x1f0>
 800d30c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d30e:	789b      	ldrb	r3, [r3, #2]
 800d310:	2b02      	cmp	r3, #2
 800d312:	d001      	beq.n	800d318 <find_volume+0x1f0>
 800d314:	230d      	movs	r3, #13
 800d316:	e148      	b.n	800d5aa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31a:	789b      	ldrb	r3, [r3, #2]
 800d31c:	461a      	mov	r2, r3
 800d31e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d320:	fb02 f303 	mul.w	r3, r2, r3
 800d324:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d330:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d334:	895b      	ldrh	r3, [r3, #10]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d008      	beq.n	800d34c <find_volume+0x224>
 800d33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d33c:	895b      	ldrh	r3, [r3, #10]
 800d33e:	461a      	mov	r2, r3
 800d340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d342:	895b      	ldrh	r3, [r3, #10]
 800d344:	3b01      	subs	r3, #1
 800d346:	4013      	ands	r3, r2
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <find_volume+0x228>
 800d34c:	230d      	movs	r3, #13
 800d34e:	e12c      	b.n	800d5aa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d352:	3330      	adds	r3, #48	; 0x30
 800d354:	3311      	adds	r3, #17
 800d356:	4618      	mov	r0, r3
 800d358:	f7fe ff74 	bl	800c244 <ld_word>
 800d35c:	4603      	mov	r3, r0
 800d35e:	461a      	mov	r2, r3
 800d360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d362:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d366:	891b      	ldrh	r3, [r3, #8]
 800d368:	f003 030f 	and.w	r3, r3, #15
 800d36c:	b29b      	uxth	r3, r3
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <find_volume+0x24e>
 800d372:	230d      	movs	r3, #13
 800d374:	e119      	b.n	800d5aa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d378:	3330      	adds	r3, #48	; 0x30
 800d37a:	3313      	adds	r3, #19
 800d37c:	4618      	mov	r0, r3
 800d37e:	f7fe ff61 	bl	800c244 <ld_word>
 800d382:	4603      	mov	r3, r0
 800d384:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d106      	bne.n	800d39a <find_volume+0x272>
 800d38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d38e:	3330      	adds	r3, #48	; 0x30
 800d390:	3320      	adds	r3, #32
 800d392:	4618      	mov	r0, r3
 800d394:	f7fe ff6e 	bl	800c274 <ld_dword>
 800d398:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39c:	3330      	adds	r3, #48	; 0x30
 800d39e:	330e      	adds	r3, #14
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f7fe ff4f 	bl	800c244 <ld_word>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d3aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d101      	bne.n	800d3b4 <find_volume+0x28c>
 800d3b0:	230d      	movs	r3, #13
 800d3b2:	e0fa      	b.n	800d5aa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d3b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3b8:	4413      	add	r3, r2
 800d3ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3bc:	8912      	ldrh	r2, [r2, #8]
 800d3be:	0912      	lsrs	r2, r2, #4
 800d3c0:	b292      	uxth	r2, r2
 800d3c2:	4413      	add	r3, r2
 800d3c4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d3c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d204      	bcs.n	800d3d8 <find_volume+0x2b0>
 800d3ce:	230d      	movs	r3, #13
 800d3d0:	e0eb      	b.n	800d5aa <find_volume+0x482>
 800d3d2:	bf00      	nop
 800d3d4:	24000de4 	.word	0x24000de4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d3d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3dc:	1ad3      	subs	r3, r2, r3
 800d3de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d3e0:	8952      	ldrh	r2, [r2, #10]
 800d3e2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d3e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <find_volume+0x2ca>
 800d3ee:	230d      	movs	r3, #13
 800d3f0:	e0db      	b.n	800d5aa <find_volume+0x482>
		fmt = FS_FAT32;
 800d3f2:	2303      	movs	r3, #3
 800d3f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3fa:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d3fe:	4293      	cmp	r3, r2
 800d400:	d802      	bhi.n	800d408 <find_volume+0x2e0>
 800d402:	2302      	movs	r3, #2
 800d404:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d40e:	4293      	cmp	r3, r2
 800d410:	d802      	bhi.n	800d418 <find_volume+0x2f0>
 800d412:	2301      	movs	r3, #1
 800d414:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41a:	1c9a      	adds	r2, r3, #2
 800d41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d41e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d422:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d424:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d426:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d428:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d42a:	441a      	add	r2, r3
 800d42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d42e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d430:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d434:	441a      	add	r2, r3
 800d436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d438:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800d43a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d43e:	2b03      	cmp	r3, #3
 800d440:	d11e      	bne.n	800d480 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d444:	3330      	adds	r3, #48	; 0x30
 800d446:	332a      	adds	r3, #42	; 0x2a
 800d448:	4618      	mov	r0, r3
 800d44a:	f7fe fefb 	bl	800c244 <ld_word>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d001      	beq.n	800d458 <find_volume+0x330>
 800d454:	230d      	movs	r3, #13
 800d456:	e0a8      	b.n	800d5aa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d45a:	891b      	ldrh	r3, [r3, #8]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d001      	beq.n	800d464 <find_volume+0x33c>
 800d460:	230d      	movs	r3, #13
 800d462:	e0a2      	b.n	800d5aa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d466:	3330      	adds	r3, #48	; 0x30
 800d468:	332c      	adds	r3, #44	; 0x2c
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fe ff02 	bl	800c274 <ld_dword>
 800d470:	4602      	mov	r2, r0
 800d472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d474:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d478:	695b      	ldr	r3, [r3, #20]
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	647b      	str	r3, [r7, #68]	; 0x44
 800d47e:	e01f      	b.n	800d4c0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d482:	891b      	ldrh	r3, [r3, #8]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <find_volume+0x364>
 800d488:	230d      	movs	r3, #13
 800d48a:	e08e      	b.n	800d5aa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48e:	6a1a      	ldr	r2, [r3, #32]
 800d490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d492:	441a      	add	r2, r3
 800d494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d496:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d498:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d49c:	2b02      	cmp	r3, #2
 800d49e:	d103      	bne.n	800d4a8 <find_volume+0x380>
 800d4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4a2:	695b      	ldr	r3, [r3, #20]
 800d4a4:	005b      	lsls	r3, r3, #1
 800d4a6:	e00a      	b.n	800d4be <find_volume+0x396>
 800d4a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4aa:	695a      	ldr	r2, [r3, #20]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	005b      	lsls	r3, r3, #1
 800d4b0:	4413      	add	r3, r2
 800d4b2:	085a      	lsrs	r2, r3, #1
 800d4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4b6:	695b      	ldr	r3, [r3, #20]
 800d4b8:	f003 0301 	and.w	r3, r3, #1
 800d4bc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d4be:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4c2:	699a      	ldr	r2, [r3, #24]
 800d4c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4c6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800d4ca:	0a5b      	lsrs	r3, r3, #9
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d201      	bcs.n	800d4d4 <find_volume+0x3ac>
 800d4d0:	230d      	movs	r3, #13
 800d4d2:	e06a      	b.n	800d5aa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800d4da:	611a      	str	r2, [r3, #16]
 800d4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4de:	691a      	ldr	r2, [r3, #16]
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e6:	2280      	movs	r2, #128	; 0x80
 800d4e8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d4ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d4ee:	2b03      	cmp	r3, #3
 800d4f0:	d149      	bne.n	800d586 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4f4:	3330      	adds	r3, #48	; 0x30
 800d4f6:	3330      	adds	r3, #48	; 0x30
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fe fea3 	bl	800c244 <ld_word>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b01      	cmp	r3, #1
 800d502:	d140      	bne.n	800d586 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d506:	3301      	adds	r3, #1
 800d508:	4619      	mov	r1, r3
 800d50a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d50c:	f7fe ffe2 	bl	800c4d4 <move_window>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d137      	bne.n	800d586 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d518:	2200      	movs	r2, #0
 800d51a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d51c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51e:	3330      	adds	r3, #48	; 0x30
 800d520:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d524:	4618      	mov	r0, r3
 800d526:	f7fe fe8d 	bl	800c244 <ld_word>
 800d52a:	4603      	mov	r3, r0
 800d52c:	461a      	mov	r2, r3
 800d52e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d532:	429a      	cmp	r2, r3
 800d534:	d127      	bne.n	800d586 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d538:	3330      	adds	r3, #48	; 0x30
 800d53a:	4618      	mov	r0, r3
 800d53c:	f7fe fe9a 	bl	800c274 <ld_dword>
 800d540:	4603      	mov	r3, r0
 800d542:	4a1c      	ldr	r2, [pc, #112]	; (800d5b4 <find_volume+0x48c>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d11e      	bne.n	800d586 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d54a:	3330      	adds	r3, #48	; 0x30
 800d54c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d550:	4618      	mov	r0, r3
 800d552:	f7fe fe8f 	bl	800c274 <ld_dword>
 800d556:	4603      	mov	r3, r0
 800d558:	4a17      	ldr	r2, [pc, #92]	; (800d5b8 <find_volume+0x490>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d113      	bne.n	800d586 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d560:	3330      	adds	r3, #48	; 0x30
 800d562:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d566:	4618      	mov	r0, r3
 800d568:	f7fe fe84 	bl	800c274 <ld_dword>
 800d56c:	4602      	mov	r2, r0
 800d56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d570:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d574:	3330      	adds	r3, #48	; 0x30
 800d576:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7fe fe7a 	bl	800c274 <ld_dword>
 800d580:	4602      	mov	r2, r0
 800d582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d584:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d588:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d58c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d58e:	4b0b      	ldr	r3, [pc, #44]	; (800d5bc <find_volume+0x494>)
 800d590:	881b      	ldrh	r3, [r3, #0]
 800d592:	3301      	adds	r3, #1
 800d594:	b29a      	uxth	r2, r3
 800d596:	4b09      	ldr	r3, [pc, #36]	; (800d5bc <find_volume+0x494>)
 800d598:	801a      	strh	r2, [r3, #0]
 800d59a:	4b08      	ldr	r3, [pc, #32]	; (800d5bc <find_volume+0x494>)
 800d59c:	881a      	ldrh	r2, [r3, #0]
 800d59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d5a0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d5a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d5a4:	f7fe ff2e 	bl	800c404 <clear_lock>
#endif
	return FR_OK;
 800d5a8:	2300      	movs	r3, #0
}
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	3758      	adds	r7, #88	; 0x58
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	bd80      	pop	{r7, pc}
 800d5b2:	bf00      	nop
 800d5b4:	41615252 	.word	0x41615252
 800d5b8:	61417272 	.word	0x61417272
 800d5bc:	24000de8 	.word	0x24000de8

0800d5c0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b088      	sub	sp, #32
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d5d2:	f107 0310 	add.w	r3, r7, #16
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7ff fd0b 	bl	800cff2 <get_ldnumber>
 800d5dc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	da01      	bge.n	800d5e8 <f_mount+0x28>
 800d5e4:	230b      	movs	r3, #11
 800d5e6:	e02b      	b.n	800d640 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d5e8:	4a17      	ldr	r2, [pc, #92]	; (800d648 <f_mount+0x88>)
 800d5ea:	69fb      	ldr	r3, [r7, #28]
 800d5ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5f0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d5f2:	69bb      	ldr	r3, [r7, #24]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d005      	beq.n	800d604 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d5f8:	69b8      	ldr	r0, [r7, #24]
 800d5fa:	f7fe ff03 	bl	800c404 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d5fe:	69bb      	ldr	r3, [r7, #24]
 800d600:	2200      	movs	r2, #0
 800d602:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d002      	beq.n	800d610 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	2200      	movs	r2, #0
 800d60e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d610:	68fa      	ldr	r2, [r7, #12]
 800d612:	490d      	ldr	r1, [pc, #52]	; (800d648 <f_mount+0x88>)
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d002      	beq.n	800d626 <f_mount+0x66>
 800d620:	79fb      	ldrb	r3, [r7, #7]
 800d622:	2b01      	cmp	r3, #1
 800d624:	d001      	beq.n	800d62a <f_mount+0x6a>
 800d626:	2300      	movs	r3, #0
 800d628:	e00a      	b.n	800d640 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d62a:	f107 010c 	add.w	r1, r7, #12
 800d62e:	f107 0308 	add.w	r3, r7, #8
 800d632:	2200      	movs	r2, #0
 800d634:	4618      	mov	r0, r3
 800d636:	f7ff fd77 	bl	800d128 <find_volume>
 800d63a:	4603      	mov	r3, r0
 800d63c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d63e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d640:	4618      	mov	r0, r3
 800d642:	3720      	adds	r7, #32
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}
 800d648:	24000de4 	.word	0x24000de4

0800d64c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b090      	sub	sp, #64	; 0x40
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800d656:	f107 010c 	add.w	r1, r7, #12
 800d65a:	1d3b      	adds	r3, r7, #4
 800d65c:	2200      	movs	r2, #0
 800d65e:	4618      	mov	r0, r3
 800d660:	f7ff fd62 	bl	800d128 <find_volume>
 800d664:	4603      	mov	r3, r0
 800d666:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800d66a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d11f      	bne.n	800d6b2 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	f107 030c 	add.w	r3, r7, #12
 800d678:	4611      	mov	r1, r2
 800d67a:	4618      	mov	r0, r3
 800d67c:	f7ff fc48 	bl	800cf10 <follow_path>
 800d680:	4603      	mov	r3, r0
 800d682:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800d686:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d111      	bne.n	800d6b2 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800d68e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d692:	b25b      	sxtb	r3, r3
 800d694:	2b00      	cmp	r3, #0
 800d696:	da03      	bge.n	800d6a0 <f_stat+0x54>
				res = FR_INVALID_NAME;
 800d698:	2306      	movs	r3, #6
 800d69a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d69e:	e008      	b.n	800d6b2 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d005      	beq.n	800d6b2 <f_stat+0x66>
 800d6a6:	f107 030c 	add.w	r3, r7, #12
 800d6aa:	6839      	ldr	r1, [r7, #0]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7ff fb3b 	bl	800cd28 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800d6b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3740      	adds	r7, #64	; 0x40
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
	...

0800d6c0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b087      	sub	sp, #28
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60f8      	str	r0, [r7, #12]
 800d6c8:	60b9      	str	r1, [r7, #8]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d6d6:	4b1f      	ldr	r3, [pc, #124]	; (800d754 <FATFS_LinkDriverEx+0x94>)
 800d6d8:	7a5b      	ldrb	r3, [r3, #9]
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d131      	bne.n	800d744 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d6e0:	4b1c      	ldr	r3, [pc, #112]	; (800d754 <FATFS_LinkDriverEx+0x94>)
 800d6e2:	7a5b      	ldrb	r3, [r3, #9]
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	461a      	mov	r2, r3
 800d6e8:	4b1a      	ldr	r3, [pc, #104]	; (800d754 <FATFS_LinkDriverEx+0x94>)
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d6ee:	4b19      	ldr	r3, [pc, #100]	; (800d754 <FATFS_LinkDriverEx+0x94>)
 800d6f0:	7a5b      	ldrb	r3, [r3, #9]
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	4a17      	ldr	r2, [pc, #92]	; (800d754 <FATFS_LinkDriverEx+0x94>)
 800d6f6:	009b      	lsls	r3, r3, #2
 800d6f8:	4413      	add	r3, r2
 800d6fa:	68fa      	ldr	r2, [r7, #12]
 800d6fc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d6fe:	4b15      	ldr	r3, [pc, #84]	; (800d754 <FATFS_LinkDriverEx+0x94>)
 800d700:	7a5b      	ldrb	r3, [r3, #9]
 800d702:	b2db      	uxtb	r3, r3
 800d704:	461a      	mov	r2, r3
 800d706:	4b13      	ldr	r3, [pc, #76]	; (800d754 <FATFS_LinkDriverEx+0x94>)
 800d708:	4413      	add	r3, r2
 800d70a:	79fa      	ldrb	r2, [r7, #7]
 800d70c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d70e:	4b11      	ldr	r3, [pc, #68]	; (800d754 <FATFS_LinkDriverEx+0x94>)
 800d710:	7a5b      	ldrb	r3, [r3, #9]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	1c5a      	adds	r2, r3, #1
 800d716:	b2d1      	uxtb	r1, r2
 800d718:	4a0e      	ldr	r2, [pc, #56]	; (800d754 <FATFS_LinkDriverEx+0x94>)
 800d71a:	7251      	strb	r1, [r2, #9]
 800d71c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d71e:	7dbb      	ldrb	r3, [r7, #22]
 800d720:	3330      	adds	r3, #48	; 0x30
 800d722:	b2da      	uxtb	r2, r3
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	3301      	adds	r3, #1
 800d72c:	223a      	movs	r2, #58	; 0x3a
 800d72e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	3302      	adds	r3, #2
 800d734:	222f      	movs	r2, #47	; 0x2f
 800d736:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d738:	68bb      	ldr	r3, [r7, #8]
 800d73a:	3303      	adds	r3, #3
 800d73c:	2200      	movs	r2, #0
 800d73e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d740:	2300      	movs	r3, #0
 800d742:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d744:	7dfb      	ldrb	r3, [r7, #23]
}
 800d746:	4618      	mov	r0, r3
 800d748:	371c      	adds	r7, #28
 800d74a:	46bd      	mov	sp, r7
 800d74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d750:	4770      	bx	lr
 800d752:	bf00      	nop
 800d754:	24000e0c 	.word	0x24000e0c

0800d758 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d762:	2200      	movs	r2, #0
 800d764:	6839      	ldr	r1, [r7, #0]
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff ffaa 	bl	800d6c0 <FATFS_LinkDriverEx>
 800d76c:	4603      	mov	r3, r0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
	...

0800d778 <sbrk_aligned>:
 800d778:	b570      	push	{r4, r5, r6, lr}
 800d77a:	4e0e      	ldr	r6, [pc, #56]	; (800d7b4 <sbrk_aligned+0x3c>)
 800d77c:	460c      	mov	r4, r1
 800d77e:	6831      	ldr	r1, [r6, #0]
 800d780:	4605      	mov	r5, r0
 800d782:	b911      	cbnz	r1, 800d78a <sbrk_aligned+0x12>
 800d784:	f000 f8f4 	bl	800d970 <_sbrk_r>
 800d788:	6030      	str	r0, [r6, #0]
 800d78a:	4621      	mov	r1, r4
 800d78c:	4628      	mov	r0, r5
 800d78e:	f000 f8ef 	bl	800d970 <_sbrk_r>
 800d792:	1c43      	adds	r3, r0, #1
 800d794:	d00a      	beq.n	800d7ac <sbrk_aligned+0x34>
 800d796:	1cc4      	adds	r4, r0, #3
 800d798:	f024 0403 	bic.w	r4, r4, #3
 800d79c:	42a0      	cmp	r0, r4
 800d79e:	d007      	beq.n	800d7b0 <sbrk_aligned+0x38>
 800d7a0:	1a21      	subs	r1, r4, r0
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	f000 f8e4 	bl	800d970 <_sbrk_r>
 800d7a8:	3001      	adds	r0, #1
 800d7aa:	d101      	bne.n	800d7b0 <sbrk_aligned+0x38>
 800d7ac:	f04f 34ff 	mov.w	r4, #4294967295
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	bd70      	pop	{r4, r5, r6, pc}
 800d7b4:	24000e1c 	.word	0x24000e1c

0800d7b8 <_malloc_r>:
 800d7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7bc:	1ccd      	adds	r5, r1, #3
 800d7be:	f025 0503 	bic.w	r5, r5, #3
 800d7c2:	3508      	adds	r5, #8
 800d7c4:	2d0c      	cmp	r5, #12
 800d7c6:	bf38      	it	cc
 800d7c8:	250c      	movcc	r5, #12
 800d7ca:	2d00      	cmp	r5, #0
 800d7cc:	4607      	mov	r7, r0
 800d7ce:	db01      	blt.n	800d7d4 <_malloc_r+0x1c>
 800d7d0:	42a9      	cmp	r1, r5
 800d7d2:	d905      	bls.n	800d7e0 <_malloc_r+0x28>
 800d7d4:	230c      	movs	r3, #12
 800d7d6:	603b      	str	r3, [r7, #0]
 800d7d8:	2600      	movs	r6, #0
 800d7da:	4630      	mov	r0, r6
 800d7dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d7e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d8b4 <_malloc_r+0xfc>
 800d7e4:	f000 f868 	bl	800d8b8 <__malloc_lock>
 800d7e8:	f8d8 3000 	ldr.w	r3, [r8]
 800d7ec:	461c      	mov	r4, r3
 800d7ee:	bb5c      	cbnz	r4, 800d848 <_malloc_r+0x90>
 800d7f0:	4629      	mov	r1, r5
 800d7f2:	4638      	mov	r0, r7
 800d7f4:	f7ff ffc0 	bl	800d778 <sbrk_aligned>
 800d7f8:	1c43      	adds	r3, r0, #1
 800d7fa:	4604      	mov	r4, r0
 800d7fc:	d155      	bne.n	800d8aa <_malloc_r+0xf2>
 800d7fe:	f8d8 4000 	ldr.w	r4, [r8]
 800d802:	4626      	mov	r6, r4
 800d804:	2e00      	cmp	r6, #0
 800d806:	d145      	bne.n	800d894 <_malloc_r+0xdc>
 800d808:	2c00      	cmp	r4, #0
 800d80a:	d048      	beq.n	800d89e <_malloc_r+0xe6>
 800d80c:	6823      	ldr	r3, [r4, #0]
 800d80e:	4631      	mov	r1, r6
 800d810:	4638      	mov	r0, r7
 800d812:	eb04 0903 	add.w	r9, r4, r3
 800d816:	f000 f8ab 	bl	800d970 <_sbrk_r>
 800d81a:	4581      	cmp	r9, r0
 800d81c:	d13f      	bne.n	800d89e <_malloc_r+0xe6>
 800d81e:	6821      	ldr	r1, [r4, #0]
 800d820:	1a6d      	subs	r5, r5, r1
 800d822:	4629      	mov	r1, r5
 800d824:	4638      	mov	r0, r7
 800d826:	f7ff ffa7 	bl	800d778 <sbrk_aligned>
 800d82a:	3001      	adds	r0, #1
 800d82c:	d037      	beq.n	800d89e <_malloc_r+0xe6>
 800d82e:	6823      	ldr	r3, [r4, #0]
 800d830:	442b      	add	r3, r5
 800d832:	6023      	str	r3, [r4, #0]
 800d834:	f8d8 3000 	ldr.w	r3, [r8]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d038      	beq.n	800d8ae <_malloc_r+0xf6>
 800d83c:	685a      	ldr	r2, [r3, #4]
 800d83e:	42a2      	cmp	r2, r4
 800d840:	d12b      	bne.n	800d89a <_malloc_r+0xe2>
 800d842:	2200      	movs	r2, #0
 800d844:	605a      	str	r2, [r3, #4]
 800d846:	e00f      	b.n	800d868 <_malloc_r+0xb0>
 800d848:	6822      	ldr	r2, [r4, #0]
 800d84a:	1b52      	subs	r2, r2, r5
 800d84c:	d41f      	bmi.n	800d88e <_malloc_r+0xd6>
 800d84e:	2a0b      	cmp	r2, #11
 800d850:	d917      	bls.n	800d882 <_malloc_r+0xca>
 800d852:	1961      	adds	r1, r4, r5
 800d854:	42a3      	cmp	r3, r4
 800d856:	6025      	str	r5, [r4, #0]
 800d858:	bf18      	it	ne
 800d85a:	6059      	strne	r1, [r3, #4]
 800d85c:	6863      	ldr	r3, [r4, #4]
 800d85e:	bf08      	it	eq
 800d860:	f8c8 1000 	streq.w	r1, [r8]
 800d864:	5162      	str	r2, [r4, r5]
 800d866:	604b      	str	r3, [r1, #4]
 800d868:	4638      	mov	r0, r7
 800d86a:	f104 060b 	add.w	r6, r4, #11
 800d86e:	f000 f829 	bl	800d8c4 <__malloc_unlock>
 800d872:	f026 0607 	bic.w	r6, r6, #7
 800d876:	1d23      	adds	r3, r4, #4
 800d878:	1af2      	subs	r2, r6, r3
 800d87a:	d0ae      	beq.n	800d7da <_malloc_r+0x22>
 800d87c:	1b9b      	subs	r3, r3, r6
 800d87e:	50a3      	str	r3, [r4, r2]
 800d880:	e7ab      	b.n	800d7da <_malloc_r+0x22>
 800d882:	42a3      	cmp	r3, r4
 800d884:	6862      	ldr	r2, [r4, #4]
 800d886:	d1dd      	bne.n	800d844 <_malloc_r+0x8c>
 800d888:	f8c8 2000 	str.w	r2, [r8]
 800d88c:	e7ec      	b.n	800d868 <_malloc_r+0xb0>
 800d88e:	4623      	mov	r3, r4
 800d890:	6864      	ldr	r4, [r4, #4]
 800d892:	e7ac      	b.n	800d7ee <_malloc_r+0x36>
 800d894:	4634      	mov	r4, r6
 800d896:	6876      	ldr	r6, [r6, #4]
 800d898:	e7b4      	b.n	800d804 <_malloc_r+0x4c>
 800d89a:	4613      	mov	r3, r2
 800d89c:	e7cc      	b.n	800d838 <_malloc_r+0x80>
 800d89e:	230c      	movs	r3, #12
 800d8a0:	603b      	str	r3, [r7, #0]
 800d8a2:	4638      	mov	r0, r7
 800d8a4:	f000 f80e 	bl	800d8c4 <__malloc_unlock>
 800d8a8:	e797      	b.n	800d7da <_malloc_r+0x22>
 800d8aa:	6025      	str	r5, [r4, #0]
 800d8ac:	e7dc      	b.n	800d868 <_malloc_r+0xb0>
 800d8ae:	605b      	str	r3, [r3, #4]
 800d8b0:	deff      	udf	#255	; 0xff
 800d8b2:	bf00      	nop
 800d8b4:	24000e18 	.word	0x24000e18

0800d8b8 <__malloc_lock>:
 800d8b8:	4801      	ldr	r0, [pc, #4]	; (800d8c0 <__malloc_lock+0x8>)
 800d8ba:	f7f4 bcee 	b.w	800229a <__retarget_lock_acquire_recursive>
 800d8be:	bf00      	nop
 800d8c0:	24000b9c 	.word	0x24000b9c

0800d8c4 <__malloc_unlock>:
 800d8c4:	4801      	ldr	r0, [pc, #4]	; (800d8cc <__malloc_unlock+0x8>)
 800d8c6:	f7f4 bcfc 	b.w	80022c2 <__retarget_lock_release_recursive>
 800d8ca:	bf00      	nop
 800d8cc:	24000b9c 	.word	0x24000b9c

0800d8d0 <sniprintf>:
 800d8d0:	b40c      	push	{r2, r3}
 800d8d2:	b530      	push	{r4, r5, lr}
 800d8d4:	4b17      	ldr	r3, [pc, #92]	; (800d934 <sniprintf+0x64>)
 800d8d6:	1e0c      	subs	r4, r1, #0
 800d8d8:	681d      	ldr	r5, [r3, #0]
 800d8da:	b09d      	sub	sp, #116	; 0x74
 800d8dc:	da08      	bge.n	800d8f0 <sniprintf+0x20>
 800d8de:	238b      	movs	r3, #139	; 0x8b
 800d8e0:	602b      	str	r3, [r5, #0]
 800d8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e6:	b01d      	add	sp, #116	; 0x74
 800d8e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8ec:	b002      	add	sp, #8
 800d8ee:	4770      	bx	lr
 800d8f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d8f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d8f8:	bf14      	ite	ne
 800d8fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d8fe:	4623      	moveq	r3, r4
 800d900:	9304      	str	r3, [sp, #16]
 800d902:	9307      	str	r3, [sp, #28]
 800d904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d908:	9002      	str	r0, [sp, #8]
 800d90a:	9006      	str	r0, [sp, #24]
 800d90c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d910:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d912:	ab21      	add	r3, sp, #132	; 0x84
 800d914:	a902      	add	r1, sp, #8
 800d916:	4628      	mov	r0, r5
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	f000 f909 	bl	800db30 <_svfiprintf_r>
 800d91e:	1c43      	adds	r3, r0, #1
 800d920:	bfbc      	itt	lt
 800d922:	238b      	movlt	r3, #139	; 0x8b
 800d924:	602b      	strlt	r3, [r5, #0]
 800d926:	2c00      	cmp	r4, #0
 800d928:	d0dd      	beq.n	800d8e6 <sniprintf+0x16>
 800d92a:	9b02      	ldr	r3, [sp, #8]
 800d92c:	2200      	movs	r2, #0
 800d92e:	701a      	strb	r2, [r3, #0]
 800d930:	e7d9      	b.n	800d8e6 <sniprintf+0x16>
 800d932:	bf00      	nop
 800d934:	2400005c 	.word	0x2400005c

0800d938 <memset>:
 800d938:	4402      	add	r2, r0
 800d93a:	4603      	mov	r3, r0
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d100      	bne.n	800d942 <memset+0xa>
 800d940:	4770      	bx	lr
 800d942:	f803 1b01 	strb.w	r1, [r3], #1
 800d946:	e7f9      	b.n	800d93c <memset+0x4>

0800d948 <strncpy>:
 800d948:	b510      	push	{r4, lr}
 800d94a:	3901      	subs	r1, #1
 800d94c:	4603      	mov	r3, r0
 800d94e:	b132      	cbz	r2, 800d95e <strncpy+0x16>
 800d950:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d954:	f803 4b01 	strb.w	r4, [r3], #1
 800d958:	3a01      	subs	r2, #1
 800d95a:	2c00      	cmp	r4, #0
 800d95c:	d1f7      	bne.n	800d94e <strncpy+0x6>
 800d95e:	441a      	add	r2, r3
 800d960:	2100      	movs	r1, #0
 800d962:	4293      	cmp	r3, r2
 800d964:	d100      	bne.n	800d968 <strncpy+0x20>
 800d966:	bd10      	pop	{r4, pc}
 800d968:	f803 1b01 	strb.w	r1, [r3], #1
 800d96c:	e7f9      	b.n	800d962 <strncpy+0x1a>
	...

0800d970 <_sbrk_r>:
 800d970:	b538      	push	{r3, r4, r5, lr}
 800d972:	4d06      	ldr	r5, [pc, #24]	; (800d98c <_sbrk_r+0x1c>)
 800d974:	2300      	movs	r3, #0
 800d976:	4604      	mov	r4, r0
 800d978:	4608      	mov	r0, r1
 800d97a:	602b      	str	r3, [r5, #0]
 800d97c:	f7f4 fb56 	bl	800202c <_sbrk>
 800d980:	1c43      	adds	r3, r0, #1
 800d982:	d102      	bne.n	800d98a <_sbrk_r+0x1a>
 800d984:	682b      	ldr	r3, [r5, #0]
 800d986:	b103      	cbz	r3, 800d98a <_sbrk_r+0x1a>
 800d988:	6023      	str	r3, [r4, #0]
 800d98a:	bd38      	pop	{r3, r4, r5, pc}
 800d98c:	24000f58 	.word	0x24000f58

0800d990 <__errno>:
 800d990:	4b01      	ldr	r3, [pc, #4]	; (800d998 <__errno+0x8>)
 800d992:	6818      	ldr	r0, [r3, #0]
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	2400005c 	.word	0x2400005c

0800d99c <__libc_init_array>:
 800d99c:	b570      	push	{r4, r5, r6, lr}
 800d99e:	4d0d      	ldr	r5, [pc, #52]	; (800d9d4 <__libc_init_array+0x38>)
 800d9a0:	4c0d      	ldr	r4, [pc, #52]	; (800d9d8 <__libc_init_array+0x3c>)
 800d9a2:	1b64      	subs	r4, r4, r5
 800d9a4:	10a4      	asrs	r4, r4, #2
 800d9a6:	2600      	movs	r6, #0
 800d9a8:	42a6      	cmp	r6, r4
 800d9aa:	d109      	bne.n	800d9c0 <__libc_init_array+0x24>
 800d9ac:	4d0b      	ldr	r5, [pc, #44]	; (800d9dc <__libc_init_array+0x40>)
 800d9ae:	4c0c      	ldr	r4, [pc, #48]	; (800d9e0 <__libc_init_array+0x44>)
 800d9b0:	f000 fbac 	bl	800e10c <_init>
 800d9b4:	1b64      	subs	r4, r4, r5
 800d9b6:	10a4      	asrs	r4, r4, #2
 800d9b8:	2600      	movs	r6, #0
 800d9ba:	42a6      	cmp	r6, r4
 800d9bc:	d105      	bne.n	800d9ca <__libc_init_array+0x2e>
 800d9be:	bd70      	pop	{r4, r5, r6, pc}
 800d9c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9c4:	4798      	blx	r3
 800d9c6:	3601      	adds	r6, #1
 800d9c8:	e7ee      	b.n	800d9a8 <__libc_init_array+0xc>
 800d9ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800d9ce:	4798      	blx	r3
 800d9d0:	3601      	adds	r6, #1
 800d9d2:	e7f2      	b.n	800d9ba <__libc_init_array+0x1e>
 800d9d4:	0800e280 	.word	0x0800e280
 800d9d8:	0800e280 	.word	0x0800e280
 800d9dc:	0800e280 	.word	0x0800e280
 800d9e0:	0800e284 	.word	0x0800e284

0800d9e4 <_free_r>:
 800d9e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9e6:	2900      	cmp	r1, #0
 800d9e8:	d044      	beq.n	800da74 <_free_r+0x90>
 800d9ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9ee:	9001      	str	r0, [sp, #4]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	f1a1 0404 	sub.w	r4, r1, #4
 800d9f6:	bfb8      	it	lt
 800d9f8:	18e4      	addlt	r4, r4, r3
 800d9fa:	f7ff ff5d 	bl	800d8b8 <__malloc_lock>
 800d9fe:	4a1e      	ldr	r2, [pc, #120]	; (800da78 <_free_r+0x94>)
 800da00:	9801      	ldr	r0, [sp, #4]
 800da02:	6813      	ldr	r3, [r2, #0]
 800da04:	b933      	cbnz	r3, 800da14 <_free_r+0x30>
 800da06:	6063      	str	r3, [r4, #4]
 800da08:	6014      	str	r4, [r2, #0]
 800da0a:	b003      	add	sp, #12
 800da0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da10:	f7ff bf58 	b.w	800d8c4 <__malloc_unlock>
 800da14:	42a3      	cmp	r3, r4
 800da16:	d908      	bls.n	800da2a <_free_r+0x46>
 800da18:	6825      	ldr	r5, [r4, #0]
 800da1a:	1961      	adds	r1, r4, r5
 800da1c:	428b      	cmp	r3, r1
 800da1e:	bf01      	itttt	eq
 800da20:	6819      	ldreq	r1, [r3, #0]
 800da22:	685b      	ldreq	r3, [r3, #4]
 800da24:	1949      	addeq	r1, r1, r5
 800da26:	6021      	streq	r1, [r4, #0]
 800da28:	e7ed      	b.n	800da06 <_free_r+0x22>
 800da2a:	461a      	mov	r2, r3
 800da2c:	685b      	ldr	r3, [r3, #4]
 800da2e:	b10b      	cbz	r3, 800da34 <_free_r+0x50>
 800da30:	42a3      	cmp	r3, r4
 800da32:	d9fa      	bls.n	800da2a <_free_r+0x46>
 800da34:	6811      	ldr	r1, [r2, #0]
 800da36:	1855      	adds	r5, r2, r1
 800da38:	42a5      	cmp	r5, r4
 800da3a:	d10b      	bne.n	800da54 <_free_r+0x70>
 800da3c:	6824      	ldr	r4, [r4, #0]
 800da3e:	4421      	add	r1, r4
 800da40:	1854      	adds	r4, r2, r1
 800da42:	42a3      	cmp	r3, r4
 800da44:	6011      	str	r1, [r2, #0]
 800da46:	d1e0      	bne.n	800da0a <_free_r+0x26>
 800da48:	681c      	ldr	r4, [r3, #0]
 800da4a:	685b      	ldr	r3, [r3, #4]
 800da4c:	6053      	str	r3, [r2, #4]
 800da4e:	440c      	add	r4, r1
 800da50:	6014      	str	r4, [r2, #0]
 800da52:	e7da      	b.n	800da0a <_free_r+0x26>
 800da54:	d902      	bls.n	800da5c <_free_r+0x78>
 800da56:	230c      	movs	r3, #12
 800da58:	6003      	str	r3, [r0, #0]
 800da5a:	e7d6      	b.n	800da0a <_free_r+0x26>
 800da5c:	6825      	ldr	r5, [r4, #0]
 800da5e:	1961      	adds	r1, r4, r5
 800da60:	428b      	cmp	r3, r1
 800da62:	bf04      	itt	eq
 800da64:	6819      	ldreq	r1, [r3, #0]
 800da66:	685b      	ldreq	r3, [r3, #4]
 800da68:	6063      	str	r3, [r4, #4]
 800da6a:	bf04      	itt	eq
 800da6c:	1949      	addeq	r1, r1, r5
 800da6e:	6021      	streq	r1, [r4, #0]
 800da70:	6054      	str	r4, [r2, #4]
 800da72:	e7ca      	b.n	800da0a <_free_r+0x26>
 800da74:	b003      	add	sp, #12
 800da76:	bd30      	pop	{r4, r5, pc}
 800da78:	24000e18 	.word	0x24000e18

0800da7c <__ssputs_r>:
 800da7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da80:	688e      	ldr	r6, [r1, #8]
 800da82:	461f      	mov	r7, r3
 800da84:	42be      	cmp	r6, r7
 800da86:	680b      	ldr	r3, [r1, #0]
 800da88:	4682      	mov	sl, r0
 800da8a:	460c      	mov	r4, r1
 800da8c:	4690      	mov	r8, r2
 800da8e:	d82c      	bhi.n	800daea <__ssputs_r+0x6e>
 800da90:	898a      	ldrh	r2, [r1, #12]
 800da92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da96:	d026      	beq.n	800dae6 <__ssputs_r+0x6a>
 800da98:	6965      	ldr	r5, [r4, #20]
 800da9a:	6909      	ldr	r1, [r1, #16]
 800da9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800daa0:	eba3 0901 	sub.w	r9, r3, r1
 800daa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800daa8:	1c7b      	adds	r3, r7, #1
 800daaa:	444b      	add	r3, r9
 800daac:	106d      	asrs	r5, r5, #1
 800daae:	429d      	cmp	r5, r3
 800dab0:	bf38      	it	cc
 800dab2:	461d      	movcc	r5, r3
 800dab4:	0553      	lsls	r3, r2, #21
 800dab6:	d527      	bpl.n	800db08 <__ssputs_r+0x8c>
 800dab8:	4629      	mov	r1, r5
 800daba:	f7ff fe7d 	bl	800d7b8 <_malloc_r>
 800dabe:	4606      	mov	r6, r0
 800dac0:	b360      	cbz	r0, 800db1c <__ssputs_r+0xa0>
 800dac2:	6921      	ldr	r1, [r4, #16]
 800dac4:	464a      	mov	r2, r9
 800dac6:	f000 fadb 	bl	800e080 <memcpy>
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dad4:	81a3      	strh	r3, [r4, #12]
 800dad6:	6126      	str	r6, [r4, #16]
 800dad8:	6165      	str	r5, [r4, #20]
 800dada:	444e      	add	r6, r9
 800dadc:	eba5 0509 	sub.w	r5, r5, r9
 800dae0:	6026      	str	r6, [r4, #0]
 800dae2:	60a5      	str	r5, [r4, #8]
 800dae4:	463e      	mov	r6, r7
 800dae6:	42be      	cmp	r6, r7
 800dae8:	d900      	bls.n	800daec <__ssputs_r+0x70>
 800daea:	463e      	mov	r6, r7
 800daec:	6820      	ldr	r0, [r4, #0]
 800daee:	4632      	mov	r2, r6
 800daf0:	4641      	mov	r1, r8
 800daf2:	f000 faab 	bl	800e04c <memmove>
 800daf6:	68a3      	ldr	r3, [r4, #8]
 800daf8:	1b9b      	subs	r3, r3, r6
 800dafa:	60a3      	str	r3, [r4, #8]
 800dafc:	6823      	ldr	r3, [r4, #0]
 800dafe:	4433      	add	r3, r6
 800db00:	6023      	str	r3, [r4, #0]
 800db02:	2000      	movs	r0, #0
 800db04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db08:	462a      	mov	r2, r5
 800db0a:	f000 fac7 	bl	800e09c <_realloc_r>
 800db0e:	4606      	mov	r6, r0
 800db10:	2800      	cmp	r0, #0
 800db12:	d1e0      	bne.n	800dad6 <__ssputs_r+0x5a>
 800db14:	6921      	ldr	r1, [r4, #16]
 800db16:	4650      	mov	r0, sl
 800db18:	f7ff ff64 	bl	800d9e4 <_free_r>
 800db1c:	230c      	movs	r3, #12
 800db1e:	f8ca 3000 	str.w	r3, [sl]
 800db22:	89a3      	ldrh	r3, [r4, #12]
 800db24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db28:	81a3      	strh	r3, [r4, #12]
 800db2a:	f04f 30ff 	mov.w	r0, #4294967295
 800db2e:	e7e9      	b.n	800db04 <__ssputs_r+0x88>

0800db30 <_svfiprintf_r>:
 800db30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db34:	4698      	mov	r8, r3
 800db36:	898b      	ldrh	r3, [r1, #12]
 800db38:	061b      	lsls	r3, r3, #24
 800db3a:	b09d      	sub	sp, #116	; 0x74
 800db3c:	4607      	mov	r7, r0
 800db3e:	460d      	mov	r5, r1
 800db40:	4614      	mov	r4, r2
 800db42:	d50e      	bpl.n	800db62 <_svfiprintf_r+0x32>
 800db44:	690b      	ldr	r3, [r1, #16]
 800db46:	b963      	cbnz	r3, 800db62 <_svfiprintf_r+0x32>
 800db48:	2140      	movs	r1, #64	; 0x40
 800db4a:	f7ff fe35 	bl	800d7b8 <_malloc_r>
 800db4e:	6028      	str	r0, [r5, #0]
 800db50:	6128      	str	r0, [r5, #16]
 800db52:	b920      	cbnz	r0, 800db5e <_svfiprintf_r+0x2e>
 800db54:	230c      	movs	r3, #12
 800db56:	603b      	str	r3, [r7, #0]
 800db58:	f04f 30ff 	mov.w	r0, #4294967295
 800db5c:	e0d0      	b.n	800dd00 <_svfiprintf_r+0x1d0>
 800db5e:	2340      	movs	r3, #64	; 0x40
 800db60:	616b      	str	r3, [r5, #20]
 800db62:	2300      	movs	r3, #0
 800db64:	9309      	str	r3, [sp, #36]	; 0x24
 800db66:	2320      	movs	r3, #32
 800db68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db70:	2330      	movs	r3, #48	; 0x30
 800db72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800dd18 <_svfiprintf_r+0x1e8>
 800db76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db7a:	f04f 0901 	mov.w	r9, #1
 800db7e:	4623      	mov	r3, r4
 800db80:	469a      	mov	sl, r3
 800db82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db86:	b10a      	cbz	r2, 800db8c <_svfiprintf_r+0x5c>
 800db88:	2a25      	cmp	r2, #37	; 0x25
 800db8a:	d1f9      	bne.n	800db80 <_svfiprintf_r+0x50>
 800db8c:	ebba 0b04 	subs.w	fp, sl, r4
 800db90:	d00b      	beq.n	800dbaa <_svfiprintf_r+0x7a>
 800db92:	465b      	mov	r3, fp
 800db94:	4622      	mov	r2, r4
 800db96:	4629      	mov	r1, r5
 800db98:	4638      	mov	r0, r7
 800db9a:	f7ff ff6f 	bl	800da7c <__ssputs_r>
 800db9e:	3001      	adds	r0, #1
 800dba0:	f000 80a9 	beq.w	800dcf6 <_svfiprintf_r+0x1c6>
 800dba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dba6:	445a      	add	r2, fp
 800dba8:	9209      	str	r2, [sp, #36]	; 0x24
 800dbaa:	f89a 3000 	ldrb.w	r3, [sl]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	f000 80a1 	beq.w	800dcf6 <_svfiprintf_r+0x1c6>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800dbba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dbbe:	f10a 0a01 	add.w	sl, sl, #1
 800dbc2:	9304      	str	r3, [sp, #16]
 800dbc4:	9307      	str	r3, [sp, #28]
 800dbc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbca:	931a      	str	r3, [sp, #104]	; 0x68
 800dbcc:	4654      	mov	r4, sl
 800dbce:	2205      	movs	r2, #5
 800dbd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbd4:	4850      	ldr	r0, [pc, #320]	; (800dd18 <_svfiprintf_r+0x1e8>)
 800dbd6:	f7f2 fb9b 	bl	8000310 <memchr>
 800dbda:	9a04      	ldr	r2, [sp, #16]
 800dbdc:	b9d8      	cbnz	r0, 800dc16 <_svfiprintf_r+0xe6>
 800dbde:	06d0      	lsls	r0, r2, #27
 800dbe0:	bf44      	itt	mi
 800dbe2:	2320      	movmi	r3, #32
 800dbe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbe8:	0711      	lsls	r1, r2, #28
 800dbea:	bf44      	itt	mi
 800dbec:	232b      	movmi	r3, #43	; 0x2b
 800dbee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbf2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbf6:	2b2a      	cmp	r3, #42	; 0x2a
 800dbf8:	d015      	beq.n	800dc26 <_svfiprintf_r+0xf6>
 800dbfa:	9a07      	ldr	r2, [sp, #28]
 800dbfc:	4654      	mov	r4, sl
 800dbfe:	2000      	movs	r0, #0
 800dc00:	f04f 0c0a 	mov.w	ip, #10
 800dc04:	4621      	mov	r1, r4
 800dc06:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc0a:	3b30      	subs	r3, #48	; 0x30
 800dc0c:	2b09      	cmp	r3, #9
 800dc0e:	d94d      	bls.n	800dcac <_svfiprintf_r+0x17c>
 800dc10:	b1b0      	cbz	r0, 800dc40 <_svfiprintf_r+0x110>
 800dc12:	9207      	str	r2, [sp, #28]
 800dc14:	e014      	b.n	800dc40 <_svfiprintf_r+0x110>
 800dc16:	eba0 0308 	sub.w	r3, r0, r8
 800dc1a:	fa09 f303 	lsl.w	r3, r9, r3
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	9304      	str	r3, [sp, #16]
 800dc22:	46a2      	mov	sl, r4
 800dc24:	e7d2      	b.n	800dbcc <_svfiprintf_r+0x9c>
 800dc26:	9b03      	ldr	r3, [sp, #12]
 800dc28:	1d19      	adds	r1, r3, #4
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	9103      	str	r1, [sp, #12]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	bfbb      	ittet	lt
 800dc32:	425b      	neglt	r3, r3
 800dc34:	f042 0202 	orrlt.w	r2, r2, #2
 800dc38:	9307      	strge	r3, [sp, #28]
 800dc3a:	9307      	strlt	r3, [sp, #28]
 800dc3c:	bfb8      	it	lt
 800dc3e:	9204      	strlt	r2, [sp, #16]
 800dc40:	7823      	ldrb	r3, [r4, #0]
 800dc42:	2b2e      	cmp	r3, #46	; 0x2e
 800dc44:	d10c      	bne.n	800dc60 <_svfiprintf_r+0x130>
 800dc46:	7863      	ldrb	r3, [r4, #1]
 800dc48:	2b2a      	cmp	r3, #42	; 0x2a
 800dc4a:	d134      	bne.n	800dcb6 <_svfiprintf_r+0x186>
 800dc4c:	9b03      	ldr	r3, [sp, #12]
 800dc4e:	1d1a      	adds	r2, r3, #4
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	9203      	str	r2, [sp, #12]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	bfb8      	it	lt
 800dc58:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc5c:	3402      	adds	r4, #2
 800dc5e:	9305      	str	r3, [sp, #20]
 800dc60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800dd28 <_svfiprintf_r+0x1f8>
 800dc64:	7821      	ldrb	r1, [r4, #0]
 800dc66:	2203      	movs	r2, #3
 800dc68:	4650      	mov	r0, sl
 800dc6a:	f7f2 fb51 	bl	8000310 <memchr>
 800dc6e:	b138      	cbz	r0, 800dc80 <_svfiprintf_r+0x150>
 800dc70:	9b04      	ldr	r3, [sp, #16]
 800dc72:	eba0 000a 	sub.w	r0, r0, sl
 800dc76:	2240      	movs	r2, #64	; 0x40
 800dc78:	4082      	lsls	r2, r0
 800dc7a:	4313      	orrs	r3, r2
 800dc7c:	3401      	adds	r4, #1
 800dc7e:	9304      	str	r3, [sp, #16]
 800dc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc84:	4825      	ldr	r0, [pc, #148]	; (800dd1c <_svfiprintf_r+0x1ec>)
 800dc86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc8a:	2206      	movs	r2, #6
 800dc8c:	f7f2 fb40 	bl	8000310 <memchr>
 800dc90:	2800      	cmp	r0, #0
 800dc92:	d038      	beq.n	800dd06 <_svfiprintf_r+0x1d6>
 800dc94:	4b22      	ldr	r3, [pc, #136]	; (800dd20 <_svfiprintf_r+0x1f0>)
 800dc96:	bb1b      	cbnz	r3, 800dce0 <_svfiprintf_r+0x1b0>
 800dc98:	9b03      	ldr	r3, [sp, #12]
 800dc9a:	3307      	adds	r3, #7
 800dc9c:	f023 0307 	bic.w	r3, r3, #7
 800dca0:	3308      	adds	r3, #8
 800dca2:	9303      	str	r3, [sp, #12]
 800dca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dca6:	4433      	add	r3, r6
 800dca8:	9309      	str	r3, [sp, #36]	; 0x24
 800dcaa:	e768      	b.n	800db7e <_svfiprintf_r+0x4e>
 800dcac:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcb0:	460c      	mov	r4, r1
 800dcb2:	2001      	movs	r0, #1
 800dcb4:	e7a6      	b.n	800dc04 <_svfiprintf_r+0xd4>
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	3401      	adds	r4, #1
 800dcba:	9305      	str	r3, [sp, #20]
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	f04f 0c0a 	mov.w	ip, #10
 800dcc2:	4620      	mov	r0, r4
 800dcc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcc8:	3a30      	subs	r2, #48	; 0x30
 800dcca:	2a09      	cmp	r2, #9
 800dccc:	d903      	bls.n	800dcd6 <_svfiprintf_r+0x1a6>
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d0c6      	beq.n	800dc60 <_svfiprintf_r+0x130>
 800dcd2:	9105      	str	r1, [sp, #20]
 800dcd4:	e7c4      	b.n	800dc60 <_svfiprintf_r+0x130>
 800dcd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcda:	4604      	mov	r4, r0
 800dcdc:	2301      	movs	r3, #1
 800dcde:	e7f0      	b.n	800dcc2 <_svfiprintf_r+0x192>
 800dce0:	ab03      	add	r3, sp, #12
 800dce2:	9300      	str	r3, [sp, #0]
 800dce4:	462a      	mov	r2, r5
 800dce6:	4b0f      	ldr	r3, [pc, #60]	; (800dd24 <_svfiprintf_r+0x1f4>)
 800dce8:	a904      	add	r1, sp, #16
 800dcea:	4638      	mov	r0, r7
 800dcec:	f3af 8000 	nop.w
 800dcf0:	1c42      	adds	r2, r0, #1
 800dcf2:	4606      	mov	r6, r0
 800dcf4:	d1d6      	bne.n	800dca4 <_svfiprintf_r+0x174>
 800dcf6:	89ab      	ldrh	r3, [r5, #12]
 800dcf8:	065b      	lsls	r3, r3, #25
 800dcfa:	f53f af2d 	bmi.w	800db58 <_svfiprintf_r+0x28>
 800dcfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd00:	b01d      	add	sp, #116	; 0x74
 800dd02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd06:	ab03      	add	r3, sp, #12
 800dd08:	9300      	str	r3, [sp, #0]
 800dd0a:	462a      	mov	r2, r5
 800dd0c:	4b05      	ldr	r3, [pc, #20]	; (800dd24 <_svfiprintf_r+0x1f4>)
 800dd0e:	a904      	add	r1, sp, #16
 800dd10:	4638      	mov	r0, r7
 800dd12:	f000 f879 	bl	800de08 <_printf_i>
 800dd16:	e7eb      	b.n	800dcf0 <_svfiprintf_r+0x1c0>
 800dd18:	0800e244 	.word	0x0800e244
 800dd1c:	0800e24e 	.word	0x0800e24e
 800dd20:	00000000 	.word	0x00000000
 800dd24:	0800da7d 	.word	0x0800da7d
 800dd28:	0800e24a 	.word	0x0800e24a

0800dd2c <_printf_common>:
 800dd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd30:	4616      	mov	r6, r2
 800dd32:	4699      	mov	r9, r3
 800dd34:	688a      	ldr	r2, [r1, #8]
 800dd36:	690b      	ldr	r3, [r1, #16]
 800dd38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dd3c:	4293      	cmp	r3, r2
 800dd3e:	bfb8      	it	lt
 800dd40:	4613      	movlt	r3, r2
 800dd42:	6033      	str	r3, [r6, #0]
 800dd44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd48:	4607      	mov	r7, r0
 800dd4a:	460c      	mov	r4, r1
 800dd4c:	b10a      	cbz	r2, 800dd52 <_printf_common+0x26>
 800dd4e:	3301      	adds	r3, #1
 800dd50:	6033      	str	r3, [r6, #0]
 800dd52:	6823      	ldr	r3, [r4, #0]
 800dd54:	0699      	lsls	r1, r3, #26
 800dd56:	bf42      	ittt	mi
 800dd58:	6833      	ldrmi	r3, [r6, #0]
 800dd5a:	3302      	addmi	r3, #2
 800dd5c:	6033      	strmi	r3, [r6, #0]
 800dd5e:	6825      	ldr	r5, [r4, #0]
 800dd60:	f015 0506 	ands.w	r5, r5, #6
 800dd64:	d106      	bne.n	800dd74 <_printf_common+0x48>
 800dd66:	f104 0a19 	add.w	sl, r4, #25
 800dd6a:	68e3      	ldr	r3, [r4, #12]
 800dd6c:	6832      	ldr	r2, [r6, #0]
 800dd6e:	1a9b      	subs	r3, r3, r2
 800dd70:	42ab      	cmp	r3, r5
 800dd72:	dc26      	bgt.n	800ddc2 <_printf_common+0x96>
 800dd74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dd78:	1e13      	subs	r3, r2, #0
 800dd7a:	6822      	ldr	r2, [r4, #0]
 800dd7c:	bf18      	it	ne
 800dd7e:	2301      	movne	r3, #1
 800dd80:	0692      	lsls	r2, r2, #26
 800dd82:	d42b      	bmi.n	800dddc <_printf_common+0xb0>
 800dd84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd88:	4649      	mov	r1, r9
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	47c0      	blx	r8
 800dd8e:	3001      	adds	r0, #1
 800dd90:	d01e      	beq.n	800ddd0 <_printf_common+0xa4>
 800dd92:	6823      	ldr	r3, [r4, #0]
 800dd94:	6922      	ldr	r2, [r4, #16]
 800dd96:	f003 0306 	and.w	r3, r3, #6
 800dd9a:	2b04      	cmp	r3, #4
 800dd9c:	bf02      	ittt	eq
 800dd9e:	68e5      	ldreq	r5, [r4, #12]
 800dda0:	6833      	ldreq	r3, [r6, #0]
 800dda2:	1aed      	subeq	r5, r5, r3
 800dda4:	68a3      	ldr	r3, [r4, #8]
 800dda6:	bf0c      	ite	eq
 800dda8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ddac:	2500      	movne	r5, #0
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	bfc4      	itt	gt
 800ddb2:	1a9b      	subgt	r3, r3, r2
 800ddb4:	18ed      	addgt	r5, r5, r3
 800ddb6:	2600      	movs	r6, #0
 800ddb8:	341a      	adds	r4, #26
 800ddba:	42b5      	cmp	r5, r6
 800ddbc:	d11a      	bne.n	800ddf4 <_printf_common+0xc8>
 800ddbe:	2000      	movs	r0, #0
 800ddc0:	e008      	b.n	800ddd4 <_printf_common+0xa8>
 800ddc2:	2301      	movs	r3, #1
 800ddc4:	4652      	mov	r2, sl
 800ddc6:	4649      	mov	r1, r9
 800ddc8:	4638      	mov	r0, r7
 800ddca:	47c0      	blx	r8
 800ddcc:	3001      	adds	r0, #1
 800ddce:	d103      	bne.n	800ddd8 <_printf_common+0xac>
 800ddd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddd8:	3501      	adds	r5, #1
 800ddda:	e7c6      	b.n	800dd6a <_printf_common+0x3e>
 800dddc:	18e1      	adds	r1, r4, r3
 800ddde:	1c5a      	adds	r2, r3, #1
 800dde0:	2030      	movs	r0, #48	; 0x30
 800dde2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dde6:	4422      	add	r2, r4
 800dde8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddf0:	3302      	adds	r3, #2
 800ddf2:	e7c7      	b.n	800dd84 <_printf_common+0x58>
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	4622      	mov	r2, r4
 800ddf8:	4649      	mov	r1, r9
 800ddfa:	4638      	mov	r0, r7
 800ddfc:	47c0      	blx	r8
 800ddfe:	3001      	adds	r0, #1
 800de00:	d0e6      	beq.n	800ddd0 <_printf_common+0xa4>
 800de02:	3601      	adds	r6, #1
 800de04:	e7d9      	b.n	800ddba <_printf_common+0x8e>
	...

0800de08 <_printf_i>:
 800de08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de0c:	7e0f      	ldrb	r7, [r1, #24]
 800de0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800de10:	2f78      	cmp	r7, #120	; 0x78
 800de12:	4691      	mov	r9, r2
 800de14:	4680      	mov	r8, r0
 800de16:	460c      	mov	r4, r1
 800de18:	469a      	mov	sl, r3
 800de1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800de1e:	d807      	bhi.n	800de30 <_printf_i+0x28>
 800de20:	2f62      	cmp	r7, #98	; 0x62
 800de22:	d80a      	bhi.n	800de3a <_printf_i+0x32>
 800de24:	2f00      	cmp	r7, #0
 800de26:	f000 80d4 	beq.w	800dfd2 <_printf_i+0x1ca>
 800de2a:	2f58      	cmp	r7, #88	; 0x58
 800de2c:	f000 80c0 	beq.w	800dfb0 <_printf_i+0x1a8>
 800de30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800de38:	e03a      	b.n	800deb0 <_printf_i+0xa8>
 800de3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800de3e:	2b15      	cmp	r3, #21
 800de40:	d8f6      	bhi.n	800de30 <_printf_i+0x28>
 800de42:	a101      	add	r1, pc, #4	; (adr r1, 800de48 <_printf_i+0x40>)
 800de44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de48:	0800dea1 	.word	0x0800dea1
 800de4c:	0800deb5 	.word	0x0800deb5
 800de50:	0800de31 	.word	0x0800de31
 800de54:	0800de31 	.word	0x0800de31
 800de58:	0800de31 	.word	0x0800de31
 800de5c:	0800de31 	.word	0x0800de31
 800de60:	0800deb5 	.word	0x0800deb5
 800de64:	0800de31 	.word	0x0800de31
 800de68:	0800de31 	.word	0x0800de31
 800de6c:	0800de31 	.word	0x0800de31
 800de70:	0800de31 	.word	0x0800de31
 800de74:	0800dfb9 	.word	0x0800dfb9
 800de78:	0800dee1 	.word	0x0800dee1
 800de7c:	0800df73 	.word	0x0800df73
 800de80:	0800de31 	.word	0x0800de31
 800de84:	0800de31 	.word	0x0800de31
 800de88:	0800dfdb 	.word	0x0800dfdb
 800de8c:	0800de31 	.word	0x0800de31
 800de90:	0800dee1 	.word	0x0800dee1
 800de94:	0800de31 	.word	0x0800de31
 800de98:	0800de31 	.word	0x0800de31
 800de9c:	0800df7b 	.word	0x0800df7b
 800dea0:	682b      	ldr	r3, [r5, #0]
 800dea2:	1d1a      	adds	r2, r3, #4
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	602a      	str	r2, [r5, #0]
 800dea8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800deac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800deb0:	2301      	movs	r3, #1
 800deb2:	e09f      	b.n	800dff4 <_printf_i+0x1ec>
 800deb4:	6820      	ldr	r0, [r4, #0]
 800deb6:	682b      	ldr	r3, [r5, #0]
 800deb8:	0607      	lsls	r7, r0, #24
 800deba:	f103 0104 	add.w	r1, r3, #4
 800debe:	6029      	str	r1, [r5, #0]
 800dec0:	d501      	bpl.n	800dec6 <_printf_i+0xbe>
 800dec2:	681e      	ldr	r6, [r3, #0]
 800dec4:	e003      	b.n	800dece <_printf_i+0xc6>
 800dec6:	0646      	lsls	r6, r0, #25
 800dec8:	d5fb      	bpl.n	800dec2 <_printf_i+0xba>
 800deca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dece:	2e00      	cmp	r6, #0
 800ded0:	da03      	bge.n	800deda <_printf_i+0xd2>
 800ded2:	232d      	movs	r3, #45	; 0x2d
 800ded4:	4276      	negs	r6, r6
 800ded6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800deda:	485a      	ldr	r0, [pc, #360]	; (800e044 <_printf_i+0x23c>)
 800dedc:	230a      	movs	r3, #10
 800dede:	e012      	b.n	800df06 <_printf_i+0xfe>
 800dee0:	682b      	ldr	r3, [r5, #0]
 800dee2:	6820      	ldr	r0, [r4, #0]
 800dee4:	1d19      	adds	r1, r3, #4
 800dee6:	6029      	str	r1, [r5, #0]
 800dee8:	0605      	lsls	r5, r0, #24
 800deea:	d501      	bpl.n	800def0 <_printf_i+0xe8>
 800deec:	681e      	ldr	r6, [r3, #0]
 800deee:	e002      	b.n	800def6 <_printf_i+0xee>
 800def0:	0641      	lsls	r1, r0, #25
 800def2:	d5fb      	bpl.n	800deec <_printf_i+0xe4>
 800def4:	881e      	ldrh	r6, [r3, #0]
 800def6:	4853      	ldr	r0, [pc, #332]	; (800e044 <_printf_i+0x23c>)
 800def8:	2f6f      	cmp	r7, #111	; 0x6f
 800defa:	bf0c      	ite	eq
 800defc:	2308      	moveq	r3, #8
 800defe:	230a      	movne	r3, #10
 800df00:	2100      	movs	r1, #0
 800df02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800df06:	6865      	ldr	r5, [r4, #4]
 800df08:	60a5      	str	r5, [r4, #8]
 800df0a:	2d00      	cmp	r5, #0
 800df0c:	bfa2      	ittt	ge
 800df0e:	6821      	ldrge	r1, [r4, #0]
 800df10:	f021 0104 	bicge.w	r1, r1, #4
 800df14:	6021      	strge	r1, [r4, #0]
 800df16:	b90e      	cbnz	r6, 800df1c <_printf_i+0x114>
 800df18:	2d00      	cmp	r5, #0
 800df1a:	d04b      	beq.n	800dfb4 <_printf_i+0x1ac>
 800df1c:	4615      	mov	r5, r2
 800df1e:	fbb6 f1f3 	udiv	r1, r6, r3
 800df22:	fb03 6711 	mls	r7, r3, r1, r6
 800df26:	5dc7      	ldrb	r7, [r0, r7]
 800df28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800df2c:	4637      	mov	r7, r6
 800df2e:	42bb      	cmp	r3, r7
 800df30:	460e      	mov	r6, r1
 800df32:	d9f4      	bls.n	800df1e <_printf_i+0x116>
 800df34:	2b08      	cmp	r3, #8
 800df36:	d10b      	bne.n	800df50 <_printf_i+0x148>
 800df38:	6823      	ldr	r3, [r4, #0]
 800df3a:	07de      	lsls	r6, r3, #31
 800df3c:	d508      	bpl.n	800df50 <_printf_i+0x148>
 800df3e:	6923      	ldr	r3, [r4, #16]
 800df40:	6861      	ldr	r1, [r4, #4]
 800df42:	4299      	cmp	r1, r3
 800df44:	bfde      	ittt	le
 800df46:	2330      	movle	r3, #48	; 0x30
 800df48:	f805 3c01 	strble.w	r3, [r5, #-1]
 800df4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800df50:	1b52      	subs	r2, r2, r5
 800df52:	6122      	str	r2, [r4, #16]
 800df54:	f8cd a000 	str.w	sl, [sp]
 800df58:	464b      	mov	r3, r9
 800df5a:	aa03      	add	r2, sp, #12
 800df5c:	4621      	mov	r1, r4
 800df5e:	4640      	mov	r0, r8
 800df60:	f7ff fee4 	bl	800dd2c <_printf_common>
 800df64:	3001      	adds	r0, #1
 800df66:	d14a      	bne.n	800dffe <_printf_i+0x1f6>
 800df68:	f04f 30ff 	mov.w	r0, #4294967295
 800df6c:	b004      	add	sp, #16
 800df6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df72:	6823      	ldr	r3, [r4, #0]
 800df74:	f043 0320 	orr.w	r3, r3, #32
 800df78:	6023      	str	r3, [r4, #0]
 800df7a:	4833      	ldr	r0, [pc, #204]	; (800e048 <_printf_i+0x240>)
 800df7c:	2778      	movs	r7, #120	; 0x78
 800df7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800df82:	6823      	ldr	r3, [r4, #0]
 800df84:	6829      	ldr	r1, [r5, #0]
 800df86:	061f      	lsls	r7, r3, #24
 800df88:	f851 6b04 	ldr.w	r6, [r1], #4
 800df8c:	d402      	bmi.n	800df94 <_printf_i+0x18c>
 800df8e:	065f      	lsls	r7, r3, #25
 800df90:	bf48      	it	mi
 800df92:	b2b6      	uxthmi	r6, r6
 800df94:	07df      	lsls	r7, r3, #31
 800df96:	bf48      	it	mi
 800df98:	f043 0320 	orrmi.w	r3, r3, #32
 800df9c:	6029      	str	r1, [r5, #0]
 800df9e:	bf48      	it	mi
 800dfa0:	6023      	strmi	r3, [r4, #0]
 800dfa2:	b91e      	cbnz	r6, 800dfac <_printf_i+0x1a4>
 800dfa4:	6823      	ldr	r3, [r4, #0]
 800dfa6:	f023 0320 	bic.w	r3, r3, #32
 800dfaa:	6023      	str	r3, [r4, #0]
 800dfac:	2310      	movs	r3, #16
 800dfae:	e7a7      	b.n	800df00 <_printf_i+0xf8>
 800dfb0:	4824      	ldr	r0, [pc, #144]	; (800e044 <_printf_i+0x23c>)
 800dfb2:	e7e4      	b.n	800df7e <_printf_i+0x176>
 800dfb4:	4615      	mov	r5, r2
 800dfb6:	e7bd      	b.n	800df34 <_printf_i+0x12c>
 800dfb8:	682b      	ldr	r3, [r5, #0]
 800dfba:	6826      	ldr	r6, [r4, #0]
 800dfbc:	6961      	ldr	r1, [r4, #20]
 800dfbe:	1d18      	adds	r0, r3, #4
 800dfc0:	6028      	str	r0, [r5, #0]
 800dfc2:	0635      	lsls	r5, r6, #24
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	d501      	bpl.n	800dfcc <_printf_i+0x1c4>
 800dfc8:	6019      	str	r1, [r3, #0]
 800dfca:	e002      	b.n	800dfd2 <_printf_i+0x1ca>
 800dfcc:	0670      	lsls	r0, r6, #25
 800dfce:	d5fb      	bpl.n	800dfc8 <_printf_i+0x1c0>
 800dfd0:	8019      	strh	r1, [r3, #0]
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	6123      	str	r3, [r4, #16]
 800dfd6:	4615      	mov	r5, r2
 800dfd8:	e7bc      	b.n	800df54 <_printf_i+0x14c>
 800dfda:	682b      	ldr	r3, [r5, #0]
 800dfdc:	1d1a      	adds	r2, r3, #4
 800dfde:	602a      	str	r2, [r5, #0]
 800dfe0:	681d      	ldr	r5, [r3, #0]
 800dfe2:	6862      	ldr	r2, [r4, #4]
 800dfe4:	2100      	movs	r1, #0
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	f7f2 f992 	bl	8000310 <memchr>
 800dfec:	b108      	cbz	r0, 800dff2 <_printf_i+0x1ea>
 800dfee:	1b40      	subs	r0, r0, r5
 800dff0:	6060      	str	r0, [r4, #4]
 800dff2:	6863      	ldr	r3, [r4, #4]
 800dff4:	6123      	str	r3, [r4, #16]
 800dff6:	2300      	movs	r3, #0
 800dff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dffc:	e7aa      	b.n	800df54 <_printf_i+0x14c>
 800dffe:	6923      	ldr	r3, [r4, #16]
 800e000:	462a      	mov	r2, r5
 800e002:	4649      	mov	r1, r9
 800e004:	4640      	mov	r0, r8
 800e006:	47d0      	blx	sl
 800e008:	3001      	adds	r0, #1
 800e00a:	d0ad      	beq.n	800df68 <_printf_i+0x160>
 800e00c:	6823      	ldr	r3, [r4, #0]
 800e00e:	079b      	lsls	r3, r3, #30
 800e010:	d413      	bmi.n	800e03a <_printf_i+0x232>
 800e012:	68e0      	ldr	r0, [r4, #12]
 800e014:	9b03      	ldr	r3, [sp, #12]
 800e016:	4298      	cmp	r0, r3
 800e018:	bfb8      	it	lt
 800e01a:	4618      	movlt	r0, r3
 800e01c:	e7a6      	b.n	800df6c <_printf_i+0x164>
 800e01e:	2301      	movs	r3, #1
 800e020:	4632      	mov	r2, r6
 800e022:	4649      	mov	r1, r9
 800e024:	4640      	mov	r0, r8
 800e026:	47d0      	blx	sl
 800e028:	3001      	adds	r0, #1
 800e02a:	d09d      	beq.n	800df68 <_printf_i+0x160>
 800e02c:	3501      	adds	r5, #1
 800e02e:	68e3      	ldr	r3, [r4, #12]
 800e030:	9903      	ldr	r1, [sp, #12]
 800e032:	1a5b      	subs	r3, r3, r1
 800e034:	42ab      	cmp	r3, r5
 800e036:	dcf2      	bgt.n	800e01e <_printf_i+0x216>
 800e038:	e7eb      	b.n	800e012 <_printf_i+0x20a>
 800e03a:	2500      	movs	r5, #0
 800e03c:	f104 0619 	add.w	r6, r4, #25
 800e040:	e7f5      	b.n	800e02e <_printf_i+0x226>
 800e042:	bf00      	nop
 800e044:	0800e255 	.word	0x0800e255
 800e048:	0800e266 	.word	0x0800e266

0800e04c <memmove>:
 800e04c:	4288      	cmp	r0, r1
 800e04e:	b510      	push	{r4, lr}
 800e050:	eb01 0402 	add.w	r4, r1, r2
 800e054:	d902      	bls.n	800e05c <memmove+0x10>
 800e056:	4284      	cmp	r4, r0
 800e058:	4623      	mov	r3, r4
 800e05a:	d807      	bhi.n	800e06c <memmove+0x20>
 800e05c:	1e43      	subs	r3, r0, #1
 800e05e:	42a1      	cmp	r1, r4
 800e060:	d008      	beq.n	800e074 <memmove+0x28>
 800e062:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e066:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e06a:	e7f8      	b.n	800e05e <memmove+0x12>
 800e06c:	4402      	add	r2, r0
 800e06e:	4601      	mov	r1, r0
 800e070:	428a      	cmp	r2, r1
 800e072:	d100      	bne.n	800e076 <memmove+0x2a>
 800e074:	bd10      	pop	{r4, pc}
 800e076:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e07a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e07e:	e7f7      	b.n	800e070 <memmove+0x24>

0800e080 <memcpy>:
 800e080:	440a      	add	r2, r1
 800e082:	4291      	cmp	r1, r2
 800e084:	f100 33ff 	add.w	r3, r0, #4294967295
 800e088:	d100      	bne.n	800e08c <memcpy+0xc>
 800e08a:	4770      	bx	lr
 800e08c:	b510      	push	{r4, lr}
 800e08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e092:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e096:	4291      	cmp	r1, r2
 800e098:	d1f9      	bne.n	800e08e <memcpy+0xe>
 800e09a:	bd10      	pop	{r4, pc}

0800e09c <_realloc_r>:
 800e09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0a0:	4680      	mov	r8, r0
 800e0a2:	4614      	mov	r4, r2
 800e0a4:	460e      	mov	r6, r1
 800e0a6:	b921      	cbnz	r1, 800e0b2 <_realloc_r+0x16>
 800e0a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ac:	4611      	mov	r1, r2
 800e0ae:	f7ff bb83 	b.w	800d7b8 <_malloc_r>
 800e0b2:	b92a      	cbnz	r2, 800e0c0 <_realloc_r+0x24>
 800e0b4:	f7ff fc96 	bl	800d9e4 <_free_r>
 800e0b8:	4625      	mov	r5, r4
 800e0ba:	4628      	mov	r0, r5
 800e0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0c0:	f000 f81b 	bl	800e0fa <_malloc_usable_size_r>
 800e0c4:	4284      	cmp	r4, r0
 800e0c6:	4607      	mov	r7, r0
 800e0c8:	d802      	bhi.n	800e0d0 <_realloc_r+0x34>
 800e0ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e0ce:	d812      	bhi.n	800e0f6 <_realloc_r+0x5a>
 800e0d0:	4621      	mov	r1, r4
 800e0d2:	4640      	mov	r0, r8
 800e0d4:	f7ff fb70 	bl	800d7b8 <_malloc_r>
 800e0d8:	4605      	mov	r5, r0
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	d0ed      	beq.n	800e0ba <_realloc_r+0x1e>
 800e0de:	42bc      	cmp	r4, r7
 800e0e0:	4622      	mov	r2, r4
 800e0e2:	4631      	mov	r1, r6
 800e0e4:	bf28      	it	cs
 800e0e6:	463a      	movcs	r2, r7
 800e0e8:	f7ff ffca 	bl	800e080 <memcpy>
 800e0ec:	4631      	mov	r1, r6
 800e0ee:	4640      	mov	r0, r8
 800e0f0:	f7ff fc78 	bl	800d9e4 <_free_r>
 800e0f4:	e7e1      	b.n	800e0ba <_realloc_r+0x1e>
 800e0f6:	4635      	mov	r5, r6
 800e0f8:	e7df      	b.n	800e0ba <_realloc_r+0x1e>

0800e0fa <_malloc_usable_size_r>:
 800e0fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e0fe:	1f18      	subs	r0, r3, #4
 800e100:	2b00      	cmp	r3, #0
 800e102:	bfbc      	itt	lt
 800e104:	580b      	ldrlt	r3, [r1, r0]
 800e106:	18c0      	addlt	r0, r0, r3
 800e108:	4770      	bx	lr
	...

0800e10c <_init>:
 800e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10e:	bf00      	nop
 800e110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e112:	bc08      	pop	{r3}
 800e114:	469e      	mov	lr, r3
 800e116:	4770      	bx	lr

0800e118 <_fini>:
 800e118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11a:	bf00      	nop
 800e11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e11e:	bc08      	pop	{r3}
 800e120:	469e      	mov	lr, r3
 800e122:	4770      	bx	lr
