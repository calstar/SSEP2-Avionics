
TestFlightComputer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000152a8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  08015578  08015578  00025578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015ce4  08015ce4  00025ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015cec  08015cec  00025cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08015cf0  08015cf0  00025cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001fc  24000000  08015cf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001150  24000200  08015ef0  00030200  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001350  08015ef0  00031350  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003022a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002c596  00000000  00000000  0003026d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000057a9  00000000  00000000  0005c803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002400  00000000  00000000  00061fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001bc0  00000000  00000000  000643b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003c7b3  00000000  00000000  00065f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00034d0c  00000000  00000000  000a2723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016de89  00000000  00000000  000d742f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000ab84  00000000  00000000  002452b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  0024fe3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000200 	.word	0x24000200
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08015560 	.word	0x08015560

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000204 	.word	0x24000204
 800030c:	08015560 	.word	0x08015560

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b970 	b.w	8000a30 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f806 	bl	8000768 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__udivmoddi4>:
 8000768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800076c:	9e08      	ldr	r6, [sp, #32]
 800076e:	460d      	mov	r5, r1
 8000770:	4604      	mov	r4, r0
 8000772:	460f      	mov	r7, r1
 8000774:	2b00      	cmp	r3, #0
 8000776:	d14a      	bne.n	800080e <__udivmoddi4+0xa6>
 8000778:	428a      	cmp	r2, r1
 800077a:	4694      	mov	ip, r2
 800077c:	d965      	bls.n	800084a <__udivmoddi4+0xe2>
 800077e:	fab2 f382 	clz	r3, r2
 8000782:	b143      	cbz	r3, 8000796 <__udivmoddi4+0x2e>
 8000784:	fa02 fc03 	lsl.w	ip, r2, r3
 8000788:	f1c3 0220 	rsb	r2, r3, #32
 800078c:	409f      	lsls	r7, r3
 800078e:	fa20 f202 	lsr.w	r2, r0, r2
 8000792:	4317      	orrs	r7, r2
 8000794:	409c      	lsls	r4, r3
 8000796:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800079a:	fa1f f58c 	uxth.w	r5, ip
 800079e:	fbb7 f1fe 	udiv	r1, r7, lr
 80007a2:	0c22      	lsrs	r2, r4, #16
 80007a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80007a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80007ac:	fb01 f005 	mul.w	r0, r1, r5
 80007b0:	4290      	cmp	r0, r2
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x62>
 80007b4:	eb1c 0202 	adds.w	r2, ip, r2
 80007b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80007bc:	f080 811c 	bcs.w	80009f8 <__udivmoddi4+0x290>
 80007c0:	4290      	cmp	r0, r2
 80007c2:	f240 8119 	bls.w	80009f8 <__udivmoddi4+0x290>
 80007c6:	3902      	subs	r1, #2
 80007c8:	4462      	add	r2, ip
 80007ca:	1a12      	subs	r2, r2, r0
 80007cc:	b2a4      	uxth	r4, r4
 80007ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80007d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007da:	fb00 f505 	mul.w	r5, r0, r5
 80007de:	42a5      	cmp	r5, r4
 80007e0:	d90a      	bls.n	80007f8 <__udivmoddi4+0x90>
 80007e2:	eb1c 0404 	adds.w	r4, ip, r4
 80007e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ea:	f080 8107 	bcs.w	80009fc <__udivmoddi4+0x294>
 80007ee:	42a5      	cmp	r5, r4
 80007f0:	f240 8104 	bls.w	80009fc <__udivmoddi4+0x294>
 80007f4:	4464      	add	r4, ip
 80007f6:	3802      	subs	r0, #2
 80007f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007fc:	1b64      	subs	r4, r4, r5
 80007fe:	2100      	movs	r1, #0
 8000800:	b11e      	cbz	r6, 800080a <__udivmoddi4+0xa2>
 8000802:	40dc      	lsrs	r4, r3
 8000804:	2300      	movs	r3, #0
 8000806:	e9c6 4300 	strd	r4, r3, [r6]
 800080a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080e:	428b      	cmp	r3, r1
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0xbc>
 8000812:	2e00      	cmp	r6, #0
 8000814:	f000 80ed 	beq.w	80009f2 <__udivmoddi4+0x28a>
 8000818:	2100      	movs	r1, #0
 800081a:	e9c6 0500 	strd	r0, r5, [r6]
 800081e:	4608      	mov	r0, r1
 8000820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000824:	fab3 f183 	clz	r1, r3
 8000828:	2900      	cmp	r1, #0
 800082a:	d149      	bne.n	80008c0 <__udivmoddi4+0x158>
 800082c:	42ab      	cmp	r3, r5
 800082e:	d302      	bcc.n	8000836 <__udivmoddi4+0xce>
 8000830:	4282      	cmp	r2, r0
 8000832:	f200 80f8 	bhi.w	8000a26 <__udivmoddi4+0x2be>
 8000836:	1a84      	subs	r4, r0, r2
 8000838:	eb65 0203 	sbc.w	r2, r5, r3
 800083c:	2001      	movs	r0, #1
 800083e:	4617      	mov	r7, r2
 8000840:	2e00      	cmp	r6, #0
 8000842:	d0e2      	beq.n	800080a <__udivmoddi4+0xa2>
 8000844:	e9c6 4700 	strd	r4, r7, [r6]
 8000848:	e7df      	b.n	800080a <__udivmoddi4+0xa2>
 800084a:	b902      	cbnz	r2, 800084e <__udivmoddi4+0xe6>
 800084c:	deff      	udf	#255	; 0xff
 800084e:	fab2 f382 	clz	r3, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	f040 8090 	bne.w	8000978 <__udivmoddi4+0x210>
 8000858:	1a8a      	subs	r2, r1, r2
 800085a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800085e:	fa1f fe8c 	uxth.w	lr, ip
 8000862:	2101      	movs	r1, #1
 8000864:	fbb2 f5f7 	udiv	r5, r2, r7
 8000868:	fb07 2015 	mls	r0, r7, r5, r2
 800086c:	0c22      	lsrs	r2, r4, #16
 800086e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000872:	fb0e f005 	mul.w	r0, lr, r5
 8000876:	4290      	cmp	r0, r2
 8000878:	d908      	bls.n	800088c <__udivmoddi4+0x124>
 800087a:	eb1c 0202 	adds.w	r2, ip, r2
 800087e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000882:	d202      	bcs.n	800088a <__udivmoddi4+0x122>
 8000884:	4290      	cmp	r0, r2
 8000886:	f200 80cb 	bhi.w	8000a20 <__udivmoddi4+0x2b8>
 800088a:	4645      	mov	r5, r8
 800088c:	1a12      	subs	r2, r2, r0
 800088e:	b2a4      	uxth	r4, r4
 8000890:	fbb2 f0f7 	udiv	r0, r2, r7
 8000894:	fb07 2210 	mls	r2, r7, r0, r2
 8000898:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800089c:	fb0e fe00 	mul.w	lr, lr, r0
 80008a0:	45a6      	cmp	lr, r4
 80008a2:	d908      	bls.n	80008b6 <__udivmoddi4+0x14e>
 80008a4:	eb1c 0404 	adds.w	r4, ip, r4
 80008a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80008ac:	d202      	bcs.n	80008b4 <__udivmoddi4+0x14c>
 80008ae:	45a6      	cmp	lr, r4
 80008b0:	f200 80bb 	bhi.w	8000a2a <__udivmoddi4+0x2c2>
 80008b4:	4610      	mov	r0, r2
 80008b6:	eba4 040e 	sub.w	r4, r4, lr
 80008ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80008be:	e79f      	b.n	8000800 <__udivmoddi4+0x98>
 80008c0:	f1c1 0720 	rsb	r7, r1, #32
 80008c4:	408b      	lsls	r3, r1
 80008c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80008ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80008ce:	fa05 f401 	lsl.w	r4, r5, r1
 80008d2:	fa20 f307 	lsr.w	r3, r0, r7
 80008d6:	40fd      	lsrs	r5, r7
 80008d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008dc:	4323      	orrs	r3, r4
 80008de:	fbb5 f8f9 	udiv	r8, r5, r9
 80008e2:	fa1f fe8c 	uxth.w	lr, ip
 80008e6:	fb09 5518 	mls	r5, r9, r8, r5
 80008ea:	0c1c      	lsrs	r4, r3, #16
 80008ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80008f0:	fb08 f50e 	mul.w	r5, r8, lr
 80008f4:	42a5      	cmp	r5, r4
 80008f6:	fa02 f201 	lsl.w	r2, r2, r1
 80008fa:	fa00 f001 	lsl.w	r0, r0, r1
 80008fe:	d90b      	bls.n	8000918 <__udivmoddi4+0x1b0>
 8000900:	eb1c 0404 	adds.w	r4, ip, r4
 8000904:	f108 3aff 	add.w	sl, r8, #4294967295
 8000908:	f080 8088 	bcs.w	8000a1c <__udivmoddi4+0x2b4>
 800090c:	42a5      	cmp	r5, r4
 800090e:	f240 8085 	bls.w	8000a1c <__udivmoddi4+0x2b4>
 8000912:	f1a8 0802 	sub.w	r8, r8, #2
 8000916:	4464      	add	r4, ip
 8000918:	1b64      	subs	r4, r4, r5
 800091a:	b29d      	uxth	r5, r3
 800091c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000920:	fb09 4413 	mls	r4, r9, r3, r4
 8000924:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000928:	fb03 fe0e 	mul.w	lr, r3, lr
 800092c:	45a6      	cmp	lr, r4
 800092e:	d908      	bls.n	8000942 <__udivmoddi4+0x1da>
 8000930:	eb1c 0404 	adds.w	r4, ip, r4
 8000934:	f103 35ff 	add.w	r5, r3, #4294967295
 8000938:	d26c      	bcs.n	8000a14 <__udivmoddi4+0x2ac>
 800093a:	45a6      	cmp	lr, r4
 800093c:	d96a      	bls.n	8000a14 <__udivmoddi4+0x2ac>
 800093e:	3b02      	subs	r3, #2
 8000940:	4464      	add	r4, ip
 8000942:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000946:	fba3 9502 	umull	r9, r5, r3, r2
 800094a:	eba4 040e 	sub.w	r4, r4, lr
 800094e:	42ac      	cmp	r4, r5
 8000950:	46c8      	mov	r8, r9
 8000952:	46ae      	mov	lr, r5
 8000954:	d356      	bcc.n	8000a04 <__udivmoddi4+0x29c>
 8000956:	d053      	beq.n	8000a00 <__udivmoddi4+0x298>
 8000958:	b156      	cbz	r6, 8000970 <__udivmoddi4+0x208>
 800095a:	ebb0 0208 	subs.w	r2, r0, r8
 800095e:	eb64 040e 	sbc.w	r4, r4, lr
 8000962:	fa04 f707 	lsl.w	r7, r4, r7
 8000966:	40ca      	lsrs	r2, r1
 8000968:	40cc      	lsrs	r4, r1
 800096a:	4317      	orrs	r7, r2
 800096c:	e9c6 7400 	strd	r7, r4, [r6]
 8000970:	4618      	mov	r0, r3
 8000972:	2100      	movs	r1, #0
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	f1c3 0120 	rsb	r1, r3, #32
 800097c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000980:	fa20 f201 	lsr.w	r2, r0, r1
 8000984:	fa25 f101 	lsr.w	r1, r5, r1
 8000988:	409d      	lsls	r5, r3
 800098a:	432a      	orrs	r2, r5
 800098c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000990:	fa1f fe8c 	uxth.w	lr, ip
 8000994:	fbb1 f0f7 	udiv	r0, r1, r7
 8000998:	fb07 1510 	mls	r5, r7, r0, r1
 800099c:	0c11      	lsrs	r1, r2, #16
 800099e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80009a2:	fb00 f50e 	mul.w	r5, r0, lr
 80009a6:	428d      	cmp	r5, r1
 80009a8:	fa04 f403 	lsl.w	r4, r4, r3
 80009ac:	d908      	bls.n	80009c0 <__udivmoddi4+0x258>
 80009ae:	eb1c 0101 	adds.w	r1, ip, r1
 80009b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80009b6:	d22f      	bcs.n	8000a18 <__udivmoddi4+0x2b0>
 80009b8:	428d      	cmp	r5, r1
 80009ba:	d92d      	bls.n	8000a18 <__udivmoddi4+0x2b0>
 80009bc:	3802      	subs	r0, #2
 80009be:	4461      	add	r1, ip
 80009c0:	1b49      	subs	r1, r1, r5
 80009c2:	b292      	uxth	r2, r2
 80009c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80009c8:	fb07 1115 	mls	r1, r7, r5, r1
 80009cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009d0:	fb05 f10e 	mul.w	r1, r5, lr
 80009d4:	4291      	cmp	r1, r2
 80009d6:	d908      	bls.n	80009ea <__udivmoddi4+0x282>
 80009d8:	eb1c 0202 	adds.w	r2, ip, r2
 80009dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80009e0:	d216      	bcs.n	8000a10 <__udivmoddi4+0x2a8>
 80009e2:	4291      	cmp	r1, r2
 80009e4:	d914      	bls.n	8000a10 <__udivmoddi4+0x2a8>
 80009e6:	3d02      	subs	r5, #2
 80009e8:	4462      	add	r2, ip
 80009ea:	1a52      	subs	r2, r2, r1
 80009ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80009f0:	e738      	b.n	8000864 <__udivmoddi4+0xfc>
 80009f2:	4631      	mov	r1, r6
 80009f4:	4630      	mov	r0, r6
 80009f6:	e708      	b.n	800080a <__udivmoddi4+0xa2>
 80009f8:	4639      	mov	r1, r7
 80009fa:	e6e6      	b.n	80007ca <__udivmoddi4+0x62>
 80009fc:	4610      	mov	r0, r2
 80009fe:	e6fb      	b.n	80007f8 <__udivmoddi4+0x90>
 8000a00:	4548      	cmp	r0, r9
 8000a02:	d2a9      	bcs.n	8000958 <__udivmoddi4+0x1f0>
 8000a04:	ebb9 0802 	subs.w	r8, r9, r2
 8000a08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	e7a3      	b.n	8000958 <__udivmoddi4+0x1f0>
 8000a10:	4645      	mov	r5, r8
 8000a12:	e7ea      	b.n	80009ea <__udivmoddi4+0x282>
 8000a14:	462b      	mov	r3, r5
 8000a16:	e794      	b.n	8000942 <__udivmoddi4+0x1da>
 8000a18:	4640      	mov	r0, r8
 8000a1a:	e7d1      	b.n	80009c0 <__udivmoddi4+0x258>
 8000a1c:	46d0      	mov	r8, sl
 8000a1e:	e77b      	b.n	8000918 <__udivmoddi4+0x1b0>
 8000a20:	3d02      	subs	r5, #2
 8000a22:	4462      	add	r2, ip
 8000a24:	e732      	b.n	800088c <__udivmoddi4+0x124>
 8000a26:	4608      	mov	r0, r1
 8000a28:	e70a      	b.n	8000840 <__udivmoddi4+0xd8>
 8000a2a:	4464      	add	r4, ip
 8000a2c:	3802      	subs	r0, #2
 8000a2e:	e742      	b.n	80008b6 <__udivmoddi4+0x14e>

08000a30 <__aeabi_idiv0>:
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop

08000a34 <GNSS_Init>:
/*!
 * Structure initialization.
 * @param GNSS Pointer to main GNSS structure.
 * @param hi2c4 Pointer to i2c handle.
 */
void GNSS_Init(GNSS_StateHandle *GNSS, I2C_HandleTypeDef *hi2c4) {
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
	GNSS->hi2c4 = hi2c4;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	601a      	str	r2, [r3, #0]
	GNSS->year = 0;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2200      	movs	r2, #0
 8000a48:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = 0;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = 0;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = 0;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = 0;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2200      	movs	r2, #0
 8000a68:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = 0;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = 0;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2200      	movs	r2, #0
 8000a78:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
	GNSS->lon = 0;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->lat = 0;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->height = 0;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	GNSS->hMSL = 0;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	GNSS->hAcc = 0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	GNSS->vAcc = 0;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	GNSS->gSpeed = 0;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	GNSS->headMot = 0;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <GNSS_ParseBuffer>:

/*!
 * Searching for a header in data buffer and matching class and message ID to buffer data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseBuffer(GNSS_StateHandle *GNSS) {
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]

	for (int var = 0; var <= 100; ++var) {
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e057      	b.n	8000b84 <GNSS_ParseBuffer+0xbe>
		if (GNSS->i2cWorkingBuffer[var] == 0xB5
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	3308      	adds	r3, #8
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	2bb5      	cmp	r3, #181	; 0xb5
 8000ae0:	d14d      	bne.n	8000b7e <GNSS_ParseBuffer+0xb8>
				&& GNSS->i2cWorkingBuffer[var + 1] == 0x62) {
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	687a      	ldr	r2, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	7a1b      	ldrb	r3, [r3, #8]
 8000aec:	2b62      	cmp	r3, #98	; 0x62
 8000aee:	d146      	bne.n	8000b7e <GNSS_ParseBuffer+0xb8>
			if (GNSS->i2cWorkingBuffer[var + 2] == 0x27
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	3302      	adds	r3, #2
 8000af4:	687a      	ldr	r2, [r7, #4]
 8000af6:	4413      	add	r3, r2
 8000af8:	7a1b      	ldrb	r3, [r3, #8]
 8000afa:	2b27      	cmp	r3, #39	; 0x27
 8000afc:	d10a      	bne.n	8000b14 <GNSS_ParseBuffer+0x4e>
					&& GNSS->i2cWorkingBuffer[var + 3] == 0x03) { //Look at: 32.19.1.1 u-blox 8 Receiver description
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3303      	adds	r3, #3
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	7a1b      	ldrb	r3, [r3, #8]
 8000b08:	2b03      	cmp	r3, #3
 8000b0a:	d103      	bne.n	8000b14 <GNSS_ParseBuffer+0x4e>
				GNSS_ParseUniqID(GNSS);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 f875 	bl	8000bfc <GNSS_ParseUniqID>
 8000b12:	e034      	b.n	8000b7e <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->i2cWorkingBuffer[var + 2] == 0x01
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	3302      	adds	r3, #2
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	7a1b      	ldrb	r3, [r3, #8]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d10a      	bne.n	8000b38 <GNSS_ParseBuffer+0x72>
					&& GNSS->i2cWorkingBuffer[var + 3] == 0x21) { //Look at: 32.17.14.1 u-blox 8 Receiver description
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	3303      	adds	r3, #3
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	7a1b      	ldrb	r3, [r3, #8]
 8000b2c:	2b21      	cmp	r3, #33	; 0x21
 8000b2e:	d103      	bne.n	8000b38 <GNSS_ParseBuffer+0x72>
				GNSS_ParseNavigatorData(GNSS);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f000 f9e9 	bl	8000f08 <GNSS_ParseNavigatorData>
 8000b36:	e022      	b.n	8000b7e <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->i2cWorkingBuffer[var + 2] == 0x01
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	3302      	adds	r3, #2
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	4413      	add	r3, r2
 8000b40:	7a1b      	ldrb	r3, [r3, #8]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d10a      	bne.n	8000b5c <GNSS_ParseBuffer+0x96>
					&& GNSS->i2cWorkingBuffer[var + 3] == 0x07) { //ook at: 32.17.30.1 u-blox 8 Receiver description
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	3303      	adds	r3, #3
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	7a1b      	ldrb	r3, [r3, #8]
 8000b50:	2b07      	cmp	r3, #7
 8000b52:	d103      	bne.n	8000b5c <GNSS_ParseBuffer+0x96>
				GNSS_ParsePVTData(GNSS);
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 f873 	bl	8000c40 <GNSS_ParsePVTData>
 8000b5a:	e010      	b.n	8000b7e <GNSS_ParseBuffer+0xb8>
			} else if (GNSS->i2cWorkingBuffer[var + 2] == 0x01
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	4413      	add	r3, r2
 8000b64:	7a1b      	ldrb	r3, [r3, #8]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d109      	bne.n	8000b7e <GNSS_ParseBuffer+0xb8>
					&& GNSS->i2cWorkingBuffer[var + 3] == 0x02) { // Look at: 32.17.15.1 u-blox 8 Receiver description
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	3303      	adds	r3, #3
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	7a1b      	ldrb	r3, [r3, #8]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d102      	bne.n	8000b7e <GNSS_ParseBuffer+0xb8>
				GNSS_ParsePOSLLHData(GNSS);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f000 f9fb 	bl	8000f74 <GNSS_ParsePOSLLHData>
	for (int var = 0; var <= 100; ++var) {
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	3301      	adds	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2b64      	cmp	r3, #100	; 0x64
 8000b88:	dda4      	ble.n	8000ad4 <GNSS_ParseBuffer+0xe>
			}
		}
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	bf00      	nop
 8000b8e:	3710      	adds	r7, #16
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <GNSS_GetUniqID>:

/*!
 * Make request for unique chip ID data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetUniqID(GNSS_StateHandle *GNSS) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4, 0x42, getDeviceID,
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6818      	ldr	r0, [r3, #0]
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <GNSS_GetUniqID+0x2c>)
 8000ba4:	2142      	movs	r1, #66	; 0x42
 8000ba6:	f006 f8d3 	bl	8006d50 <HAL_I2C_Master_Transmit_DMA>
			sizeof(getDeviceID) / sizeof(uint8_t));
	HAL_I2C_Master_Receive_IT(GNSS->hi2c4,0x42, GNSS_Handle.i2cWorkingBuffer, 17);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6818      	ldr	r0, [r3, #0]
 8000bae:	2311      	movs	r3, #17
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <GNSS_GetUniqID+0x30>)
 8000bb2:	2142      	movs	r1, #66	; 0x42
 8000bb4:	f006 f85c 	bl	8006c70 <HAL_I2C_Master_Receive_IT>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	08015634 	.word	0x08015634
 8000bc4:	24000224 	.word	0x24000224

08000bc8 <GNSS_GetPVTData>:

/*!
 * Make request for navigation position velocity time solution data.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_GetPVTData(GNSS_StateHandle *GNSS) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, getPVTData,
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <GNSS_GetPVTData+0x2c>)
 8000bd8:	2142      	movs	r1, #66	; 0x42
 8000bda:	f006 f8b9 	bl	8006d50 <HAL_I2C_Master_Transmit_DMA>
			sizeof(getPVTData) / sizeof(uint8_t));
	HAL_I2C_Master_Receive_IT(GNSS->hi2c4,0x42, GNSS_Handle.i2cWorkingBuffer, 100);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6818      	ldr	r0, [r3, #0]
 8000be2:	2364      	movs	r3, #100	; 0x64
 8000be4:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <GNSS_GetPVTData+0x30>)
 8000be6:	2142      	movs	r1, #66	; 0x42
 8000be8:	f006 f842 	bl	8006c70 <HAL_I2C_Master_Receive_IT>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	0801563c 	.word	0x0801563c
 8000bf8:	24000224 	.word	0x24000224

08000bfc <GNSS_ParseUniqID>:
/*!
 * Parse data to unique chip ID standard.
 * Look at: 32.19.1.1 u-blox 8 Receiver description
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseUniqID(GNSS_StateHandle *GNSS) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 5; ++var) {
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	e00d      	b.n	8000c26 <GNSS_ParseUniqID+0x2a>
		GNSS->uniqueID[var] = GNSS_Handle.i2cWorkingBuffer[10 + var];
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	330a      	adds	r3, #10
 8000c0e:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <GNSS_ParseUniqID+0x40>)
 8000c10:	4413      	add	r3, r2
 8000c12:	7a19      	ldrb	r1, [r3, #8]
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 5; ++var) {
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	ddee      	ble.n	8000c0a <GNSS_ParseUniqID+0xe>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	2400021c 	.word	0x2400021c

08000c40 <GNSS_ParsePVTData>:
/*!
 * Parse data to navigation position velocity time solution standard.
 * Look at: 32.17.15.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePVTData(GNSS_StateHandle *GNSS) {
 8000c40:	b480      	push	{r7}
 8000c42:	b08b      	sub	sp, #44	; 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.i2cWorkingBuffer[10];
 8000c48:	4b92      	ldr	r3, [pc, #584]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000c4a:	7c9a      	ldrb	r2, [r3, #18]
 8000c4c:	4b92      	ldr	r3, [pc, #584]	; (8000e98 <GNSS_ParsePVTData+0x258>)
 8000c4e:	701a      	strb	r2, [r3, #0]
	GNSS->yearBytes[0]=GNSS_Handle.i2cWorkingBuffer[10];
 8000c50:	4b90      	ldr	r3, [pc, #576]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000c52:	7c9a      	ldrb	r2, [r3, #18]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	uShort.bytes[1] = GNSS_Handle.i2cWorkingBuffer[11];
 8000c5a:	4b8e      	ldr	r3, [pc, #568]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000c5c:	7cda      	ldrb	r2, [r3, #19]
 8000c5e:	4b8e      	ldr	r3, [pc, #568]	; (8000e98 <GNSS_ParsePVTData+0x258>)
 8000c60:	705a      	strb	r2, [r3, #1]
	GNSS->yearBytes[1]=GNSS_Handle.i2cWorkingBuffer[11];
 8000c62:	4b8c      	ldr	r3, [pc, #560]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000c64:	7cda      	ldrb	r2, [r3, #19]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	GNSS->year = uShort.uShort;
 8000c6c:	4b8a      	ldr	r3, [pc, #552]	; (8000e98 <GNSS_ParsePVTData+0x258>)
 8000c6e:	881a      	ldrh	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS_Handle.i2cWorkingBuffer[12];
 8000c76:	4b87      	ldr	r3, [pc, #540]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000c78:	7d1a      	ldrb	r2, [r3, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS_Handle.i2cWorkingBuffer[13];
 8000c80:	4b84      	ldr	r3, [pc, #528]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000c82:	7d5a      	ldrb	r2, [r3, #21]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS_Handle.i2cWorkingBuffer[14];
 8000c8a:	4b82      	ldr	r3, [pc, #520]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000c8c:	7d9a      	ldrb	r2, [r3, #22]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS_Handle.i2cWorkingBuffer[15];
 8000c94:	4b7f      	ldr	r3, [pc, #508]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000c96:	7dda      	ldrb	r2, [r3, #23]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS_Handle.i2cWorkingBuffer[16];
 8000c9e:	4b7d      	ldr	r3, [pc, #500]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000ca0:	7e1a      	ldrb	r2, [r3, #24]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
	GNSS->fixType = GNSS_Handle.i2cWorkingBuffer[26];
 8000ca8:	4b7a      	ldr	r3, [pc, #488]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000caa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77

	for (int var = 0; var < 4; ++var) {
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cb8:	e017      	b.n	8000cea <GNSS_ParsePVTData+0xaa>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 30];
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	331e      	adds	r3, #30
 8000cbe:	4a75      	ldr	r2, [pc, #468]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000cc0:	4413      	add	r3, r2
 8000cc2:	7a19      	ldrb	r1, [r3, #8]
 8000cc4:	4a75      	ldr	r2, [pc, #468]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc8:	4413      	add	r3, r2
 8000cca:	460a      	mov	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
		GNSS->lonBytes[var]= GNSS_Handle.i2cWorkingBuffer[var + 30];
 8000cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd0:	331e      	adds	r3, #30
 8000cd2:	4a70      	ldr	r2, [pc, #448]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000cd4:	4413      	add	r3, r2
 8000cd6:	7a19      	ldrb	r1, [r3, #8]
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	4413      	add	r3, r2
 8000cde:	337c      	adds	r3, #124	; 0x7c
 8000ce0:	460a      	mov	r2, r1
 8000ce2:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8000cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cec:	2b03      	cmp	r3, #3
 8000cee:	dde4      	ble.n	8000cba <GNSS_ParsePVTData+0x7a>
	}
	GNSS->lon = iLong.iLong;
 8000cf0:	4b6a      	ldr	r3, [pc, #424]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8000cf8:	4b68      	ldr	r3, [pc, #416]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	ee07 3a90 	vmov	s15, r3
 8000d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d04:	eddf 6a66 	vldr	s13, [pc, #408]	; 8000ea0 <GNSS_ParsePVTData+0x260>
 8000d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
	for (int var = 0; var < 4; ++var) {
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
 8000d16:	e017      	b.n	8000d48 <GNSS_ParsePVTData+0x108>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 34];
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	3322      	adds	r3, #34	; 0x22
 8000d1c:	4a5d      	ldr	r2, [pc, #372]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000d1e:	4413      	add	r3, r2
 8000d20:	7a19      	ldrb	r1, [r3, #8]
 8000d22:	4a5e      	ldr	r2, [pc, #376]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000d24:	6a3b      	ldr	r3, [r7, #32]
 8000d26:	4413      	add	r3, r2
 8000d28:	460a      	mov	r2, r1
 8000d2a:	701a      	strb	r2, [r3, #0]
		GNSS->latBytes[var]=GNSS_Handle.i2cWorkingBuffer[var + 34];
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	3322      	adds	r3, #34	; 0x22
 8000d30:	4a58      	ldr	r2, [pc, #352]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000d32:	4413      	add	r3, r2
 8000d34:	7a19      	ldrb	r1, [r3, #8]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3384      	adds	r3, #132	; 0x84
 8000d3e:	460a      	mov	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	3301      	adds	r3, #1
 8000d46:	623b      	str	r3, [r7, #32]
 8000d48:	6a3b      	ldr	r3, [r7, #32]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	dde4      	ble.n	8000d18 <GNSS_ParsePVTData+0xd8>
	}
	GNSS->lat = iLong.iLong;
 8000d4e:	4b53      	ldr	r3, [pc, #332]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8000d58:	4b50      	ldr	r3, [pc, #320]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	ee07 3a90 	vmov	s15, r3
 8000d60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d64:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8000ea0 <GNSS_ParsePVTData+0x260>
 8000d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
	for (int var = 0; var < 4; ++var) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	e00c      	b.n	8000d92 <GNSS_ParsePVTData+0x152>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 38];
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	3326      	adds	r3, #38	; 0x26
 8000d7c:	4a45      	ldr	r2, [pc, #276]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000d7e:	4413      	add	r3, r2
 8000d80:	7a19      	ldrb	r1, [r3, #8]
 8000d82:	4a46      	ldr	r2, [pc, #280]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	4413      	add	r3, r2
 8000d88:	460a      	mov	r2, r1
 8000d8a:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	61fb      	str	r3, [r7, #28]
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	2b03      	cmp	r3, #3
 8000d96:	ddef      	ble.n	8000d78 <GNSS_ParsePVTData+0x138>
	}
	GNSS->height = iLong.iLong;
 8000d98:	4b40      	ldr	r3, [pc, #256]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	e017      	b.n	8000dd8 <GNSS_ParsePVTData+0x198>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 42];
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	332a      	adds	r3, #42	; 0x2a
 8000dac:	4a39      	ldr	r2, [pc, #228]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000dae:	4413      	add	r3, r2
 8000db0:	7a19      	ldrb	r1, [r3, #8]
 8000db2:	4a3a      	ldr	r2, [pc, #232]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	4413      	add	r3, r2
 8000db8:	460a      	mov	r2, r1
 8000dba:	701a      	strb	r2, [r3, #0]
		GNSS->hMSLBytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 42];
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	332a      	adds	r3, #42	; 0x2a
 8000dc0:	4a34      	ldr	r2, [pc, #208]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000dc2:	4413      	add	r3, r2
 8000dc4:	7a19      	ldrb	r1, [r3, #8]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	4413      	add	r3, r2
 8000dcc:	3398      	adds	r3, #152	; 0x98
 8000dce:	460a      	mov	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	dde4      	ble.n	8000da8 <GNSS_ParsePVTData+0x168>
	}
	GNSS->hMSL = iLong.iLong;
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	e00c      	b.n	8000e08 <GNSS_ParsePVTData+0x1c8>
		uLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 46];
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	332e      	adds	r3, #46	; 0x2e
 8000df2:	4a28      	ldr	r2, [pc, #160]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000df4:	4413      	add	r3, r2
 8000df6:	7a19      	ldrb	r1, [r3, #8]
 8000df8:	4a2a      	ldr	r2, [pc, #168]	; (8000ea4 <GNSS_ParsePVTData+0x264>)
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	460a      	mov	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3301      	adds	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	ddef      	ble.n	8000dee <GNSS_ParsePVTData+0x1ae>
	}
	GNSS->hAcc = uLong.uLong;
 8000e0e:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <GNSS_ParsePVTData+0x264>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	for (int var = 0; var < 4; ++var) {
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	e00c      	b.n	8000e38 <GNSS_ParsePVTData+0x1f8>
		uLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 50];
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	3332      	adds	r3, #50	; 0x32
 8000e22:	4a1c      	ldr	r2, [pc, #112]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000e24:	4413      	add	r3, r2
 8000e26:	7a19      	ldrb	r1, [r3, #8]
 8000e28:	4a1e      	ldr	r2, [pc, #120]	; (8000ea4 <GNSS_ParsePVTData+0x264>)
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	460a      	mov	r2, r1
 8000e30:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	3301      	adds	r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	ddef      	ble.n	8000e1e <GNSS_ParsePVTData+0x1de>
	}
	GNSS->vAcc = uLong.uLong;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <GNSS_ParsePVTData+0x264>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	for (int var = 0; var < 4; ++var) {
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	e017      	b.n	8000e7e <GNSS_ParsePVTData+0x23e>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 66];
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3342      	adds	r3, #66	; 0x42
 8000e52:	4a10      	ldr	r2, [pc, #64]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000e54:	4413      	add	r3, r2
 8000e56:	7a19      	ldrb	r1, [r3, #8]
 8000e58:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	460a      	mov	r2, r1
 8000e60:	701a      	strb	r2, [r3, #0]
		GNSS->gSpeedBytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 66];
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	3342      	adds	r3, #66	; 0x42
 8000e66:	4a0b      	ldr	r2, [pc, #44]	; (8000e94 <GNSS_ParsePVTData+0x254>)
 8000e68:	4413      	add	r3, r2
 8000e6a:	7a19      	ldrb	r1, [r3, #8]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	4413      	add	r3, r2
 8000e72:	33a8      	adds	r3, #168	; 0xa8
 8000e74:	460a      	mov	r2, r1
 8000e76:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	dde4      	ble.n	8000e4e <GNSS_ParsePVTData+0x20e>
	}
	GNSS->gSpeed = iLong.iLong;
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <GNSS_ParsePVTData+0x25c>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for (int var = 0; var < 4; ++var) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	e016      	b.n	8000ec2 <GNSS_ParsePVTData+0x282>
 8000e94:	2400021c 	.word	0x2400021c
 8000e98:	240002cc 	.word	0x240002cc
 8000e9c:	240002d4 	.word	0x240002d4
 8000ea0:	4b189680 	.word	0x4b189680
 8000ea4:	240002d0 	.word	0x240002d0
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 70];
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3346      	adds	r3, #70	; 0x46
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <GNSS_ParsePVTData+0x2c0>)
 8000eae:	4413      	add	r3, r2
 8000eb0:	7a19      	ldrb	r1, [r3, #8]
 8000eb2:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <GNSS_ParsePVTData+0x2c4>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	460a      	mov	r2, r1
 8000eba:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	ddef      	ble.n	8000ea8 <GNSS_ParsePVTData+0x268>
	}
	GNSS->headMot = iLong.iLong * 1e-5; // todo I'm not sure this good options.
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <GNSS_ParsePVTData+0x2c4>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	ee07 3a90 	vmov	s15, r3
 8000ed0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ed4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000ef8 <GNSS_ParsePVTData+0x2b8>
 8000ed8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000edc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ee0:	ee17 2a90 	vmov	r2, s15
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8000eea:	bf00      	nop
 8000eec:	372c      	adds	r7, #44	; 0x2c
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	88e368f1 	.word	0x88e368f1
 8000efc:	3ee4f8b5 	.word	0x3ee4f8b5
 8000f00:	2400021c 	.word	0x2400021c
 8000f04:	240002d4 	.word	0x240002d4

08000f08 <GNSS_ParseNavigatorData>:
/*!
 * Parse data to UTC time solution standard.
 * Look at: 32.17.30.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParseNavigatorData(GNSS_StateHandle *GNSS) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	uShort.bytes[0] = GNSS_Handle.i2cWorkingBuffer[18];
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <GNSS_ParseNavigatorData+0x64>)
 8000f12:	7e9a      	ldrb	r2, [r3, #26]
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <GNSS_ParseNavigatorData+0x68>)
 8000f16:	701a      	strb	r2, [r3, #0]
	uShort.bytes[1] = GNSS_Handle.i2cWorkingBuffer[19];
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <GNSS_ParseNavigatorData+0x64>)
 8000f1a:	7eda      	ldrb	r2, [r3, #27]
 8000f1c:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <GNSS_ParseNavigatorData+0x68>)
 8000f1e:	705a      	strb	r2, [r3, #1]
	GNSS->year = uShort.uShort;
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <GNSS_ParseNavigatorData+0x68>)
 8000f22:	881a      	ldrh	r2, [r3, #0]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
	GNSS->month = GNSS_Handle.i2cWorkingBuffer[20];
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <GNSS_ParseNavigatorData+0x64>)
 8000f2c:	7f1a      	ldrb	r2, [r3, #28]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	GNSS->day = GNSS_Handle.i2cWorkingBuffer[21];
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <GNSS_ParseNavigatorData+0x64>)
 8000f36:	7f5a      	ldrb	r2, [r3, #29]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	GNSS->hour = GNSS_Handle.i2cWorkingBuffer[22];
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <GNSS_ParseNavigatorData+0x64>)
 8000f40:	7f9a      	ldrb	r2, [r3, #30]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	GNSS->min = GNSS_Handle.i2cWorkingBuffer[23];
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <GNSS_ParseNavigatorData+0x64>)
 8000f4a:	7fda      	ldrb	r2, [r3, #31]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	GNSS->sec = GNSS_Handle.i2cWorkingBuffer[24];
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <GNSS_ParseNavigatorData+0x64>)
 8000f54:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	2400021c 	.word	0x2400021c
 8000f70:	240002cc 	.word	0x240002cc

08000f74 <GNSS_ParsePOSLLHData>:
/*!
 * Parse data to geodetic position solution standard.
 * Look at: 32.17.14.1 u-blox 8 Receiver description.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_ParsePOSLLHData(GNSS_StateHandle *GNSS) {
 8000f74:	b480      	push	{r7}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 4; ++var) {
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
 8000f80:	e00c      	b.n	8000f9c <GNSS_ParsePOSLLHData+0x28>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 10];
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	330a      	adds	r3, #10
 8000f86:	4a55      	ldr	r2, [pc, #340]	; (80010dc <GNSS_ParsePOSLLHData+0x168>)
 8000f88:	4413      	add	r3, r2
 8000f8a:	7a19      	ldrb	r1, [r3, #8]
 8000f8c:	4a54      	ldr	r2, [pc, #336]	; (80010e0 <GNSS_ParsePOSLLHData+0x16c>)
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	4413      	add	r3, r2
 8000f92:	460a      	mov	r2, r1
 8000f94:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	ddef      	ble.n	8000f82 <GNSS_ParsePOSLLHData+0xe>
	}
	GNSS->lon = iLong.iLong;
 8000fa2:	4b4f      	ldr	r3, [pc, #316]	; (80010e0 <GNSS_ParsePOSLLHData+0x16c>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	679a      	str	r2, [r3, #120]	; 0x78
	GNSS->fLon=(float)iLong.iLong/10000000.0;
 8000faa:	4b4d      	ldr	r3, [pc, #308]	; (80010e0 <GNSS_ParsePOSLLHData+0x16c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	ee07 3a90 	vmov	s15, r3
 8000fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80010e4 <GNSS_ParsePOSLLHData+0x170>
 8000fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88

	for (int var = 0; var < 4; ++var) {
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	e00c      	b.n	8000fe4 <GNSS_ParsePOSLLHData+0x70>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 14];
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	330e      	adds	r3, #14
 8000fce:	4a43      	ldr	r2, [pc, #268]	; (80010dc <GNSS_ParsePOSLLHData+0x168>)
 8000fd0:	4413      	add	r3, r2
 8000fd2:	7a19      	ldrb	r1, [r3, #8]
 8000fd4:	4a42      	ldr	r2, [pc, #264]	; (80010e0 <GNSS_ParsePOSLLHData+0x16c>)
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	4413      	add	r3, r2
 8000fda:	460a      	mov	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	ddef      	ble.n	8000fca <GNSS_ParsePOSLLHData+0x56>
	}
	GNSS->lat = iLong.iLong;
 8000fea:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <GNSS_ParsePOSLLHData+0x16c>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	GNSS->fLat=(float)iLong.iLong/10000000.0;
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	; (80010e0 <GNSS_ParsePOSLLHData+0x16c>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001000:	eddf 6a38 	vldr	s13, [pc, #224]	; 80010e4 <GNSS_ParsePOSLLHData+0x170>
 8001004:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c

	for (int var = 0; var < 4; ++var) {
 800100e:	2300      	movs	r3, #0
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e00c      	b.n	800102e <GNSS_ParsePOSLLHData+0xba>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 18];
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	3312      	adds	r3, #18
 8001018:	4a30      	ldr	r2, [pc, #192]	; (80010dc <GNSS_ParsePOSLLHData+0x168>)
 800101a:	4413      	add	r3, r2
 800101c:	7a19      	ldrb	r1, [r3, #8]
 800101e:	4a30      	ldr	r2, [pc, #192]	; (80010e0 <GNSS_ParsePOSLLHData+0x16c>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	4413      	add	r3, r2
 8001024:	460a      	mov	r2, r1
 8001026:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	3301      	adds	r3, #1
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b03      	cmp	r3, #3
 8001032:	ddef      	ble.n	8001014 <GNSS_ParsePOSLLHData+0xa0>
	}
	GNSS->height = iLong.iLong;
 8001034:	4b2a      	ldr	r3, [pc, #168]	; (80010e0 <GNSS_ParsePOSLLHData+0x16c>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	for (int var = 0; var < 4; ++var) {
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e00c      	b.n	800105e <GNSS_ParsePOSLLHData+0xea>
		iLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 22];
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	3316      	adds	r3, #22
 8001048:	4a24      	ldr	r2, [pc, #144]	; (80010dc <GNSS_ParsePOSLLHData+0x168>)
 800104a:	4413      	add	r3, r2
 800104c:	7a19      	ldrb	r1, [r3, #8]
 800104e:	4a24      	ldr	r2, [pc, #144]	; (80010e0 <GNSS_ParsePOSLLHData+0x16c>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4413      	add	r3, r2
 8001054:	460a      	mov	r2, r1
 8001056:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	3301      	adds	r3, #1
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	2b03      	cmp	r3, #3
 8001062:	ddef      	ble.n	8001044 <GNSS_ParsePOSLLHData+0xd0>
	}
	GNSS->hMSL = iLong.iLong;
 8001064:	4b1e      	ldr	r3, [pc, #120]	; (80010e0 <GNSS_ParsePOSLLHData+0x16c>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	for (int var = 0; var < 4; ++var) {
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e00c      	b.n	800108e <GNSS_ParsePOSLLHData+0x11a>
		uLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 26];
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	331a      	adds	r3, #26
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <GNSS_ParsePOSLLHData+0x168>)
 800107a:	4413      	add	r3, r2
 800107c:	7a19      	ldrb	r1, [r3, #8]
 800107e:	4a1a      	ldr	r2, [pc, #104]	; (80010e8 <GNSS_ParsePOSLLHData+0x174>)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	4413      	add	r3, r2
 8001084:	460a      	mov	r2, r1
 8001086:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	3301      	adds	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2b03      	cmp	r3, #3
 8001092:	ddef      	ble.n	8001074 <GNSS_ParsePOSLLHData+0x100>
	}
	GNSS->hAcc = uLong.uLong;
 8001094:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <GNSS_ParsePOSLLHData+0x174>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	for (int var = 0; var < 4; ++var) {
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	e00c      	b.n	80010be <GNSS_ParsePOSLLHData+0x14a>
		uLong.bytes[var] = GNSS_Handle.i2cWorkingBuffer[var + 30];
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	331e      	adds	r3, #30
 80010a8:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <GNSS_ParsePOSLLHData+0x168>)
 80010aa:	4413      	add	r3, r2
 80010ac:	7a19      	ldrb	r1, [r3, #8]
 80010ae:	4a0e      	ldr	r2, [pc, #56]	; (80010e8 <GNSS_ParsePOSLLHData+0x174>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4413      	add	r3, r2
 80010b4:	460a      	mov	r2, r1
 80010b6:	701a      	strb	r2, [r3, #0]
	for (int var = 0; var < 4; ++var) {
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b03      	cmp	r3, #3
 80010c2:	ddef      	ble.n	80010a4 <GNSS_ParsePOSLLHData+0x130>
	}
	GNSS->vAcc = uLong.uLong;
 80010c4:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <GNSS_ParsePOSLLHData+0x174>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 80010ce:	bf00      	nop
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	2400021c 	.word	0x2400021c
 80010e0:	240002d4 	.word	0x240002d4
 80010e4:	4b189680 	.word	0x4b189680
 80010e8:	240002d0 	.word	0x240002d0

080010ec <GNSS_LoadConfig>:

/*!
 *  Sends the basic configuration: Activation of the UBX standard, change of NMEA version to 4.10 and turn on of the Galileo system.
 * @param GNSS Pointer to main GNSS structure.
 */
void GNSS_LoadConfig(GNSS_StateHandle *GNSS) {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, configUBX,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	231c      	movs	r3, #28
 80010fa:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <GNSS_LoadConfig+0x4c>)
 80010fc:	2142      	movs	r1, #66	; 0x42
 80010fe:	f005 fe27 	bl	8006d50 <HAL_I2C_Master_Transmit_DMA>
			sizeof(configUBX) / sizeof(uint8_t));
	HAL_Delay(250);
 8001102:	20fa      	movs	r0, #250	; 0xfa
 8001104:	f002 fcba 	bl	8003a7c <HAL_Delay>
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, setNMEA410,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	231c      	movs	r3, #28
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <GNSS_LoadConfig+0x50>)
 8001110:	2142      	movs	r1, #66	; 0x42
 8001112:	f005 fe1d 	bl	8006d50 <HAL_I2C_Master_Transmit_DMA>
			sizeof(setNMEA410) / sizeof(uint8_t));
	HAL_Delay(250);
 8001116:	20fa      	movs	r0, #250	; 0xfa
 8001118:	f002 fcb0 	bl	8003a7c <HAL_Delay>
	HAL_I2C_Master_Transmit_DMA(GNSS->hi2c4,0x42, setGNSS,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	232c      	movs	r3, #44	; 0x2c
 8001122:	4a07      	ldr	r2, [pc, #28]	; (8001140 <GNSS_LoadConfig+0x54>)
 8001124:	2142      	movs	r1, #66	; 0x42
 8001126:	f005 fe13 	bl	8006d50 <HAL_I2C_Master_Transmit_DMA>
			sizeof(setGNSS) / sizeof(uint8_t));
	HAL_Delay(250);
 800112a:	20fa      	movs	r0, #250	; 0xfa
 800112c:	f002 fca6 	bl	8003a7c <HAL_Delay>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	080155d0 	.word	0x080155d0
 800113c:	080155ec 	.word	0x080155ec
 8001140:	08015608 	.word	0x08015608

08001144 <MS5611_Reset>:
uint8_t MS5611_tx;
uint8_t MS5611_rx;


void MS5611_Reset(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
	MS5611_tx = CMD_RESET;
 800114e:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <MS5611_Reset+0x40>)
 8001150:	221e      	movs	r2, #30
 8001152:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1 , &MS5611_tx, 1, 100);
 8001154:	2364      	movs	r3, #100	; 0x64
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2301      	movs	r3, #1
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <MS5611_Reset+0x40>)
 800115c:	21ee      	movs	r1, #238	; 0xee
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f005 fb9c 	bl	800689c <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8001164:	200a      	movs	r0, #10
 8001166:	f002 fc89 	bl	8003a7c <HAL_Delay>
	//For Temperature > 20 Celsius
	DataStruct->T2 = 0;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	2200      	movs	r2, #0
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
	DataStruct->OFF2 = 0;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	2200      	movs	r2, #0
 8001174:	63da      	str	r2, [r3, #60]	; 0x3c
	DataStruct->SENS2 = 0;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	2200      	movs	r2, #0
 800117a:	645a      	str	r2, [r3, #68]	; 0x44
}
 800117c:	bf00      	nop
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	240002eb 	.word	0x240002eb

08001188 <MS5611_ReadProm>:

void MS5611_ReadProm(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
		MS5611_tx = CMD_PROM_C0;
 8001192:	4b8a      	ldr	r3, [pc, #552]	; (80013bc <MS5611_ReadProm+0x234>)
 8001194:	22a0      	movs	r2, #160	; 0xa0
 8001196:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001198:	2364      	movs	r3, #100	; 0x64
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	2301      	movs	r3, #1
 800119e:	4a87      	ldr	r2, [pc, #540]	; (80013bc <MS5611_ReadProm+0x234>)
 80011a0:	21ee      	movs	r1, #238	; 0xee
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f005 fb7a 	bl	800689c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80011a8:	2364      	movs	r3, #100	; 0x64
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2302      	movs	r3, #2
 80011ae:	4a84      	ldr	r2, [pc, #528]	; (80013c0 <MS5611_ReadProm+0x238>)
 80011b0:	21ee      	movs	r1, #238	; 0xee
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f005 fc66 	bl	8006a84 <HAL_I2C_Master_Receive>
		DataStruct->C[0] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 80011b8:	4b81      	ldr	r3, [pc, #516]	; (80013c0 <MS5611_ReadProm+0x238>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b7f      	ldr	r3, [pc, #508]	; (80013c0 <MS5611_ReadProm+0x238>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	b21b      	sxth	r3, r3
 80011c6:	4313      	orrs	r3, r2
 80011c8:	b21b      	sxth	r3, r3
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	801a      	strh	r2, [r3, #0]
		HAL_Delay(10);
 80011d0:	200a      	movs	r0, #10
 80011d2:	f002 fc53 	bl	8003a7c <HAL_Delay>

		MS5611_tx = CMD_PROM_C1;
 80011d6:	4b79      	ldr	r3, [pc, #484]	; (80013bc <MS5611_ReadProm+0x234>)
 80011d8:	22a2      	movs	r2, #162	; 0xa2
 80011da:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80011dc:	2364      	movs	r3, #100	; 0x64
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2301      	movs	r3, #1
 80011e2:	4a76      	ldr	r2, [pc, #472]	; (80013bc <MS5611_ReadProm+0x234>)
 80011e4:	21ee      	movs	r1, #238	; 0xee
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f005 fb58 	bl	800689c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2302      	movs	r3, #2
 80011f2:	4a73      	ldr	r2, [pc, #460]	; (80013c0 <MS5611_ReadProm+0x238>)
 80011f4:	21ee      	movs	r1, #238	; 0xee
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f005 fc44 	bl	8006a84 <HAL_I2C_Master_Receive>
		DataStruct->C[1] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 80011fc:	4b70      	ldr	r3, [pc, #448]	; (80013c0 <MS5611_ReadProm+0x238>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	4b6e      	ldr	r3, [pc, #440]	; (80013c0 <MS5611_ReadProm+0x238>)
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	b21b      	sxth	r3, r3
 800120a:	4313      	orrs	r3, r2
 800120c:	b21b      	sxth	r3, r3
 800120e:	b29a      	uxth	r2, r3
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	805a      	strh	r2, [r3, #2]
		HAL_Delay(10);
 8001214:	200a      	movs	r0, #10
 8001216:	f002 fc31 	bl	8003a7c <HAL_Delay>

		MS5611_tx = CMD_PROM_C2;
 800121a:	4b68      	ldr	r3, [pc, #416]	; (80013bc <MS5611_ReadProm+0x234>)
 800121c:	22a4      	movs	r2, #164	; 0xa4
 800121e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001220:	2364      	movs	r3, #100	; 0x64
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2301      	movs	r3, #1
 8001226:	4a65      	ldr	r2, [pc, #404]	; (80013bc <MS5611_ReadProm+0x234>)
 8001228:	21ee      	movs	r1, #238	; 0xee
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f005 fb36 	bl	800689c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001230:	2364      	movs	r3, #100	; 0x64
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2302      	movs	r3, #2
 8001236:	4a62      	ldr	r2, [pc, #392]	; (80013c0 <MS5611_ReadProm+0x238>)
 8001238:	21ee      	movs	r1, #238	; 0xee
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f005 fc22 	bl	8006a84 <HAL_I2C_Master_Receive>
		DataStruct->C[2] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001240:	4b5f      	ldr	r3, [pc, #380]	; (80013c0 <MS5611_ReadProm+0x238>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b5d      	ldr	r3, [pc, #372]	; (80013c0 <MS5611_ReadProm+0x238>)
 800124a:	785b      	ldrb	r3, [r3, #1]
 800124c:	b21b      	sxth	r3, r3
 800124e:	4313      	orrs	r3, r2
 8001250:	b21b      	sxth	r3, r3
 8001252:	b29a      	uxth	r2, r3
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	809a      	strh	r2, [r3, #4]
		HAL_Delay(10);
 8001258:	200a      	movs	r0, #10
 800125a:	f002 fc0f 	bl	8003a7c <HAL_Delay>

		MS5611_tx = CMD_PROM_C3;
 800125e:	4b57      	ldr	r3, [pc, #348]	; (80013bc <MS5611_ReadProm+0x234>)
 8001260:	22a6      	movs	r2, #166	; 0xa6
 8001262:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001264:	2364      	movs	r3, #100	; 0x64
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2301      	movs	r3, #1
 800126a:	4a54      	ldr	r2, [pc, #336]	; (80013bc <MS5611_ReadProm+0x234>)
 800126c:	21ee      	movs	r1, #238	; 0xee
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f005 fb14 	bl	800689c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001274:	2364      	movs	r3, #100	; 0x64
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2302      	movs	r3, #2
 800127a:	4a51      	ldr	r2, [pc, #324]	; (80013c0 <MS5611_ReadProm+0x238>)
 800127c:	21ee      	movs	r1, #238	; 0xee
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f005 fc00 	bl	8006a84 <HAL_I2C_Master_Receive>
		DataStruct->C[3] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001284:	4b4e      	ldr	r3, [pc, #312]	; (80013c0 <MS5611_ReadProm+0x238>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	b21a      	sxth	r2, r3
 800128c:	4b4c      	ldr	r3, [pc, #304]	; (80013c0 <MS5611_ReadProm+0x238>)
 800128e:	785b      	ldrb	r3, [r3, #1]
 8001290:	b21b      	sxth	r3, r3
 8001292:	4313      	orrs	r3, r2
 8001294:	b21b      	sxth	r3, r3
 8001296:	b29a      	uxth	r2, r3
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	80da      	strh	r2, [r3, #6]
		HAL_Delay(10);
 800129c:	200a      	movs	r0, #10
 800129e:	f002 fbed 	bl	8003a7c <HAL_Delay>

		MS5611_tx = CMD_PROM_C4;
 80012a2:	4b46      	ldr	r3, [pc, #280]	; (80013bc <MS5611_ReadProm+0x234>)
 80012a4:	22a8      	movs	r2, #168	; 0xa8
 80012a6:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80012a8:	2364      	movs	r3, #100	; 0x64
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	4a43      	ldr	r2, [pc, #268]	; (80013bc <MS5611_ReadProm+0x234>)
 80012b0:	21ee      	movs	r1, #238	; 0xee
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f005 faf2 	bl	800689c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80012b8:	2364      	movs	r3, #100	; 0x64
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2302      	movs	r3, #2
 80012be:	4a40      	ldr	r2, [pc, #256]	; (80013c0 <MS5611_ReadProm+0x238>)
 80012c0:	21ee      	movs	r1, #238	; 0xee
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f005 fbde 	bl	8006a84 <HAL_I2C_Master_Receive>
		DataStruct->C[4] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 80012c8:	4b3d      	ldr	r3, [pc, #244]	; (80013c0 <MS5611_ReadProm+0x238>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	4b3b      	ldr	r3, [pc, #236]	; (80013c0 <MS5611_ReadProm+0x238>)
 80012d2:	785b      	ldrb	r3, [r3, #1]
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b21b      	sxth	r3, r3
 80012da:	b29a      	uxth	r2, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	811a      	strh	r2, [r3, #8]
		HAL_Delay(10);
 80012e0:	200a      	movs	r0, #10
 80012e2:	f002 fbcb 	bl	8003a7c <HAL_Delay>

		MS5611_tx = CMD_PROM_C5;
 80012e6:	4b35      	ldr	r3, [pc, #212]	; (80013bc <MS5611_ReadProm+0x234>)
 80012e8:	22aa      	movs	r2, #170	; 0xaa
 80012ea:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80012ec:	2364      	movs	r3, #100	; 0x64
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	4a32      	ldr	r2, [pc, #200]	; (80013bc <MS5611_ReadProm+0x234>)
 80012f4:	21ee      	movs	r1, #238	; 0xee
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f005 fad0 	bl	800689c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2302      	movs	r3, #2
 8001302:	4a2f      	ldr	r2, [pc, #188]	; (80013c0 <MS5611_ReadProm+0x238>)
 8001304:	21ee      	movs	r1, #238	; 0xee
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f005 fbbc 	bl	8006a84 <HAL_I2C_Master_Receive>
		DataStruct->C[5] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 800130c:	4b2c      	ldr	r3, [pc, #176]	; (80013c0 <MS5611_ReadProm+0x238>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <MS5611_ReadProm+0x238>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	b21b      	sxth	r3, r3
 800131a:	4313      	orrs	r3, r2
 800131c:	b21b      	sxth	r3, r3
 800131e:	b29a      	uxth	r2, r3
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	815a      	strh	r2, [r3, #10]
		HAL_Delay(10);
 8001324:	200a      	movs	r0, #10
 8001326:	f002 fba9 	bl	8003a7c <HAL_Delay>

		MS5611_tx = CMD_PROM_C6;
 800132a:	4b24      	ldr	r3, [pc, #144]	; (80013bc <MS5611_ReadProm+0x234>)
 800132c:	22ac      	movs	r2, #172	; 0xac
 800132e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001330:	2364      	movs	r3, #100	; 0x64
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	4a21      	ldr	r2, [pc, #132]	; (80013bc <MS5611_ReadProm+0x234>)
 8001338:	21ee      	movs	r1, #238	; 0xee
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f005 faae 	bl	800689c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001340:	2364      	movs	r3, #100	; 0x64
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	2302      	movs	r3, #2
 8001346:	4a1e      	ldr	r2, [pc, #120]	; (80013c0 <MS5611_ReadProm+0x238>)
 8001348:	21ee      	movs	r1, #238	; 0xee
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f005 fb9a 	bl	8006a84 <HAL_I2C_Master_Receive>
		DataStruct->C[6] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MS5611_ReadProm+0x238>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <MS5611_ReadProm+0x238>)
 800135a:	785b      	ldrb	r3, [r3, #1]
 800135c:	b21b      	sxth	r3, r3
 800135e:	4313      	orrs	r3, r2
 8001360:	b21b      	sxth	r3, r3
 8001362:	b29a      	uxth	r2, r3
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	819a      	strh	r2, [r3, #12]
		HAL_Delay(10);
 8001368:	200a      	movs	r0, #10
 800136a:	f002 fb87 	bl	8003a7c <HAL_Delay>

		MS5611_tx = CMD_PROM_C7;
 800136e:	4b13      	ldr	r3, [pc, #76]	; (80013bc <MS5611_ReadProm+0x234>)
 8001370:	22ae      	movs	r2, #174	; 0xae
 8001372:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001374:	2364      	movs	r3, #100	; 0x64
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <MS5611_ReadProm+0x234>)
 800137c:	21ee      	movs	r1, #238	; 0xee
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f005 fa8c 	bl	800689c <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(I2Cx, MS5611_ADDR << 1 , MS5611_rx_buf, 2, 100);
 8001384:	2364      	movs	r3, #100	; 0x64
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2302      	movs	r3, #2
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <MS5611_ReadProm+0x238>)
 800138c:	21ee      	movs	r1, #238	; 0xee
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f005 fb78 	bl	8006a84 <HAL_I2C_Master_Receive>
		DataStruct->C[7] = MS5611_rx_buf[0] << 8 | MS5611_rx_buf[1];
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <MS5611_ReadProm+0x238>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MS5611_ReadProm+0x238>)
 800139e:	785b      	ldrb	r3, [r3, #1]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	81da      	strh	r2, [r3, #14]
		HAL_Delay(10);
 80013ac:	200a      	movs	r0, #10
 80013ae:	f002 fb65 	bl	8003a7c <HAL_Delay>
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	240002eb 	.word	0x240002eb
 80013c0:	240002d8 	.word	0x240002d8

080013c4 <MS5611_RequestTemperature>:


void MS5611_RequestTemperature(I2C_HandleTypeDef *I2Cx, OSR osr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af02      	add	r7, sp, #8
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	70fb      	strb	r3, [r7, #3]
	MS5611_tx = TEMP_OSR_256 + (2 * osr);
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	3328      	adds	r3, #40	; 0x28
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <MS5611_RequestTemperature+0x34>)
 80013dc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR <<1, &MS5611_tx, 1, 100);
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2301      	movs	r3, #1
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <MS5611_RequestTemperature+0x34>)
 80013e6:	21ee      	movs	r1, #238	; 0xee
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f005 fa57 	bl	800689c <HAL_I2C_Master_Transmit>
}
 80013ee:	bf00      	nop
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	240002eb 	.word	0x240002eb

080013fc <MS5611_RequestPressure>:

void MS5611_RequestPressure(I2C_HandleTypeDef *I2Cx, OSR osr)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af02      	add	r7, sp, #8
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	460b      	mov	r3, r1
 8001406:	70fb      	strb	r3, [r7, #3]
	MS5611_tx = PRESSURE_OSR_256 + (2 * osr);
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	3320      	adds	r3, #32
 800140c:	b2db      	uxtb	r3, r3
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MS5611_RequestPressure+0x34>)
 8001414:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001416:	2364      	movs	r3, #100	; 0x64
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	2301      	movs	r3, #1
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <MS5611_RequestPressure+0x34>)
 800141e:	21ee      	movs	r1, #238	; 0xee
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f005 fa3b 	bl	800689c <HAL_I2C_Master_Transmit>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	240002eb 	.word	0x240002eb

08001434 <MS5611_ReadTemperature>:

void MS5611_ReadTemperature(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af02      	add	r7, sp, #8
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	//Read ADC
	MS5611_tx = 0x00;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <MS5611_ReadTemperature+0x54>)
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 8001444:	2364      	movs	r3, #100	; 0x64
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <MS5611_ReadTemperature+0x54>)
 800144c:	21ee      	movs	r1, #238	; 0xee
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f005 fa24 	bl	800689c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2Cx, (MS5611_ADDR << 1) | 0x01, MS5611_rx_temp, 3, 100);
 8001454:	2364      	movs	r3, #100	; 0x64
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2303      	movs	r3, #3
 800145a:	4a0c      	ldr	r2, [pc, #48]	; (800148c <MS5611_ReadTemperature+0x58>)
 800145c:	21ef      	movs	r1, #239	; 0xef
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f005 fb10 	bl	8006a84 <HAL_I2C_Master_Receive>
//	HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR <<1 , 0x00, 1, MS5611_rx_temp, 3, 100);

	DataStruct->DigitalTemperature_D2 = (MS5611_rx_temp[0] << 16) | (MS5611_rx_temp[1] << 8) | MS5611_rx_temp[2];
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MS5611_ReadTemperature+0x58>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	041a      	lsls	r2, r3, #16
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MS5611_ReadTemperature+0x58>)
 800146c:	785b      	ldrb	r3, [r3, #1]
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	4313      	orrs	r3, r2
 8001472:	4a06      	ldr	r2, [pc, #24]	; (800148c <MS5611_ReadTemperature+0x58>)
 8001474:	7892      	ldrb	r2, [r2, #2]
 8001476:	4313      	orrs	r3, r2
 8001478:	461a      	mov	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	615a      	str	r2, [r3, #20]
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	240002eb 	.word	0x240002eb
 800148c:	240002e4 	.word	0x240002e4

08001490 <MS5611_ReadPressure>:

void MS5611_ReadPressure(I2C_HandleTypeDef *I2Cx, MS5611_t *DataStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af02      	add	r7, sp, #8
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	//Read ADC
	MS5611_tx = 0x00;
 800149a:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <MS5611_ReadPressure+0x54>)
 800149c:	2200      	movs	r2, #0
 800149e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(I2Cx, MS5611_ADDR << 1, &MS5611_tx, 1, 100);
 80014a0:	2364      	movs	r3, #100	; 0x64
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	2301      	movs	r3, #1
 80014a6:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <MS5611_ReadPressure+0x54>)
 80014a8:	21ee      	movs	r1, #238	; 0xee
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f005 f9f6 	bl	800689c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(I2Cx, (MS5611_ADDR << 1) | 0x01, MS5611_rx_press, 3, 100);
 80014b0:	2364      	movs	r3, #100	; 0x64
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	2303      	movs	r3, #3
 80014b6:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <MS5611_ReadPressure+0x58>)
 80014b8:	21ef      	movs	r1, #239	; 0xef
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f005 fae2 	bl	8006a84 <HAL_I2C_Master_Receive>
	//HAL_I2C_Mem_Read(I2Cx, MS5611_ADDR <<1, 0x00, 1, MS5611_rx_press, 3, 100);

	DataStruct->DigitalPressure_D1 = MS5611_rx_press[0] << 16 | MS5611_rx_press[1] << 8 | MS5611_rx_press[2];
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <MS5611_ReadPressure+0x58>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <MS5611_ReadPressure+0x58>)
 80014c8:	785b      	ldrb	r3, [r3, #1]
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	4313      	orrs	r3, r2
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <MS5611_ReadPressure+0x58>)
 80014d0:	7892      	ldrb	r2, [r2, #2]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	461a      	mov	r2, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	611a      	str	r2, [r3, #16]
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	240002eb 	.word	0x240002eb
 80014e8:	240002e8 	.word	0x240002e8

080014ec <MS5611_CalculateTemperature>:

void MS5611_CalculateTemperature(MS5611_t *DataStruct)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	DataStruct->dT = DataStruct->C[5];
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	895b      	ldrh	r3, [r3, #10]
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	619a      	str	r2, [r3, #24]
	DataStruct->dT <<= 8; //Calculated up to C5 * 2^8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	021a      	lsls	r2, r3, #8
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
	DataStruct->dT *= -1; //Apply negative sign
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	425a      	negs	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	619a      	str	r2, [r3, #24]
	DataStruct->dT += DataStruct->DigitalTemperature_D2; // = D2 - C5 * 2^8
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	461a      	mov	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	4413      	add	r3, r2
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]

	DataStruct->TEMP = DataStruct->dT * DataStruct->C[6];
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	8992      	ldrh	r2, [r2, #12]
 800152c:	fb03 f202 	mul.w	r2, r3, r2
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	61da      	str	r2, [r3, #28]
	DataStruct->TEMP >>= 23; // Calculated up to dT * C6 / 2^23
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	15da      	asrs	r2, r3, #23
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	61da      	str	r2, [r3, #28]
	DataStruct->TEMP += 2000;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	61da      	str	r2, [r3, #28]
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <MS5611_CalculatePressure>:

void MS5611_CalculatePressure(MS5611_t *DataStruct)
{
 8001558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800155c:	ed2d 8b02 	vpush	{d8}
 8001560:	b08c      	sub	sp, #48	; 0x30
 8001562:	af00      	add	r7, sp, #0
 8001564:	62f8      	str	r0, [r7, #44]	; 0x2c
	DataStruct->OFF = DataStruct->C[2];
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	889b      	ldrh	r3, [r3, #4]
 800156a:	b29b      	uxth	r3, r3
 800156c:	2200      	movs	r2, #0
 800156e:	61bb      	str	r3, [r7, #24]
 8001570:	61fa      	str	r2, [r7, #28]
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001574:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001578:	e9c3 1208 	strd	r1, r2, [r3, #32]
	DataStruct->OFF <<= 16; //Calculated up to C2 * 2^16
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001582:	f04f 0000 	mov.w	r0, #0
 8001586:	f04f 0100 	mov.w	r1, #0
 800158a:	0419      	lsls	r1, r3, #16
 800158c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8001590:	0410      	lsls	r0, r2, #16
 8001592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001594:	e9c3 0108 	strd	r0, r1, [r3, #32]
	DataStruct->OFF += (DataStruct->C[4] * DataStruct->dT) >> 7;
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	891b      	ldrh	r3, [r3, #8]
 80015a2:	461a      	mov	r2, r3
 80015a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	11db      	asrs	r3, r3, #7
 80015ae:	17da      	asrs	r2, r3, #31
 80015b0:	623b      	str	r3, [r7, #32]
 80015b2:	627a      	str	r2, [r7, #36]	; 0x24
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	18c3      	adds	r3, r0, r3
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	eb41 0303 	adc.w	r3, r1, r3
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80015c8:	e9c3 1208 	strd	r1, r2, [r3, #32]


	DataStruct->SENS = DataStruct->C[1];
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	885b      	ldrh	r3, [r3, #2]
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	2200      	movs	r2, #0
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	60fa      	str	r2, [r7, #12]
 80015d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015da:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015de:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
	DataStruct->SENS <<= 15; // Calculated up to C1 * 2^15
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	03cb      	lsls	r3, r1, #15
 80015f2:	ea43 4350 	orr.w	r3, r3, r0, lsr #17
 80015f6:	03c2      	lsls	r2, r0, #15
 80015f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	DataStruct->SENS += (DataStruct->C[3] * DataStruct->dT) >>8;
 80015fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001600:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001604:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001606:	88c9      	ldrh	r1, [r1, #6]
 8001608:	4608      	mov	r0, r1
 800160a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800160c:	6989      	ldr	r1, [r1, #24]
 800160e:	fb00 f101 	mul.w	r1, r0, r1
 8001612:	1209      	asrs	r1, r1, #8
 8001614:	17c8      	asrs	r0, r1, #31
 8001616:	468a      	mov	sl, r1
 8001618:	4683      	mov	fp, r0
 800161a:	eb12 010a 	adds.w	r1, r2, sl
 800161e:	6039      	str	r1, [r7, #0]
 8001620:	eb43 030b 	adc.w	r3, r3, fp
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001628:	e9d7 1200 	ldrd	r1, r2, [r7]
 800162c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

	DataStruct->P = ((DataStruct->DigitalPressure_D1 * DataStruct->SENS) / pow(2, 21) - DataStruct->OFF) / pow(2, 15);
 8001630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2200      	movs	r2, #0
 8001636:	4698      	mov	r8, r3
 8001638:	4691      	mov	r9, r2
 800163a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8001640:	fb02 f009 	mul.w	r0, r2, r9
 8001644:	fb08 f103 	mul.w	r1, r8, r3
 8001648:	4401      	add	r1, r0
 800164a:	fba8 4502 	umull	r4, r5, r8, r2
 800164e:	194b      	adds	r3, r1, r5
 8001650:	461d      	mov	r5, r3
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f7ff f841 	bl	80006dc <__aeabi_l2d>
 800165a:	ec41 0b16 	vmov	d6, r0, r1
 800165e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80016a0 <MS5611_CalculatePressure+0x148>
 8001662:	ee86 8b07 	vdiv.f64	d8, d6, d7
 8001666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001668:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff f834 	bl	80006dc <__aeabi_l2d>
 8001674:	ec41 0b17 	vmov	d7, r0, r1
 8001678:	ee38 6b47 	vsub.f64	d6, d8, d7
 800167c:	ed9f 5b0a 	vldr	d5, [pc, #40]	; 80016a8 <MS5611_CalculatePressure+0x150>
 8001680:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001684:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001688:	ee17 2a90 	vmov	r2, s15
 800168c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800168e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001690:	bf00      	nop
 8001692:	3730      	adds	r7, #48	; 0x30
 8001694:	46bd      	mov	sp, r7
 8001696:	ecbd 8b02 	vpop	{d8}
 800169a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800169e:	bf00      	nop
 80016a0:	00000000 	.word	0x00000000
 80016a4:	41400000 	.word	0x41400000
 80016a8:	00000000 	.word	0x00000000
 80016ac:	40e00000 	.word	0x40e00000

080016b0 <MS5611_getAltitude1>:

#define SEA_PRESSURE 1013.25f

float MS5611_getAltitude1(float pressure) //No temperature correction.
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	ed87 0a01 	vstr	s0, [r7, #4]
	return (1.0f - powf((pressure / SEA_PRESSURE), 0.1902226f)) * 44307.69396f; //145366.45f * 0.3048f = 44307.69396f;
 80016ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80016be:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80016f0 <MS5611_getAltitude1+0x40>
 80016c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016c6:	eddf 0a0b 	vldr	s1, [pc, #44]	; 80016f4 <MS5611_getAltitude1+0x44>
 80016ca:	eeb0 0a47 	vmov.f32	s0, s14
 80016ce:	f010 ffa7 	bl	8012620 <powf>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
 80016d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016de:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80016f8 <MS5611_getAltitude1+0x48>
 80016e2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80016e6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	447d5000 	.word	0x447d5000
 80016f4:	3e42c9b7 	.word	0x3e42c9b7
 80016f8:	472d13b2 	.word	0x472d13b2

080016fc <_read_register>:
void adxl1_deinit() {
	__HAL_RCC_SPI6_CLK_DISABLE();
}

uint8_t _read_register(SPI_HandleTypeDef *hspi, uint8_t addr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef hal_status;
    uint8_t rx_data[2];
    uint8_t tx_data[2];

    tx_data[0] = addr | 0x80;  // read operation
 8001708:	78fb      	ldrb	r3, [r7, #3]
 800170a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800170e:	b2db      	uxtb	r3, r3
 8001710:	723b      	strb	r3, [r7, #8]
    tx_data[1] = 0;            // dummy byte for response
 8001712:	2300      	movs	r3, #0
 8001714:	727b      	strb	r3, [r7, #9]

    hal_status = HAL_SPI_TransmitReceive_DMA(hspi, tx_data, rx_data, 2);
 8001716:	f107 020c 	add.w	r2, r7, #12
 800171a:	f107 0108 	add.w	r1, r7, #8
 800171e:	2302      	movs	r3, #2
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f00c f9ef 	bl	800db04 <HAL_SPI_TransmitReceive_DMA>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]

    return rx_data[1];
 800172a:	7b7b      	ldrb	r3, [r7, #13]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_adxl_read>:

void _adxl_read(SPI_HandleTypeDef *hspi, uint8_t *readings) {
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 6; i++) {
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e00e      	b.n	8001762 <_adxl_read+0x2e>
		readings[i] = _read_register(hspi, 0x32 + i);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	3332      	adds	r3, #50	; 0x32
 800174a:	b2d9      	uxtb	r1, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	18d4      	adds	r4, r2, r3
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffd2 	bl	80016fc <_read_register>
 8001758:	4603      	mov	r3, r0
 800175a:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i < 6; i++) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3301      	adds	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	2b05      	cmp	r3, #5
 8001766:	dded      	ble.n	8001744 <_adxl_read+0x10>
	}
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3714      	adds	r7, #20
 800176e:	46bd      	mov	sp, r7
 8001770:	bd90      	pop	{r4, r7, pc}

08001772 <_formatted_adxl_readings>:

adxl375_readings _formatted_adxl_readings(uint8_t buffer[6]) {
 8001772:	b480      	push	{r7}
 8001774:	b085      	sub	sp, #20
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
	return (adxl375_readings) {
		.x = ((uint16_t) buffer[1] << 8) | buffer[0],
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	b21a      	sxth	r2, r3
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	b21b      	sxth	r3, r3
 800178c:	4313      	orrs	r3, r2
 800178e:	b218      	sxth	r0, r3
		.y = ((uint16_t) buffer[3] << 8) | buffer[2],
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	3303      	adds	r3, #3
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	021b      	lsls	r3, r3, #8
 8001798:	b21a      	sxth	r2, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3302      	adds	r3, #2
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b21b      	sxth	r3, r3
 80017a2:	4313      	orrs	r3, r2
 80017a4:	b219      	sxth	r1, r3
		.z = ((uint16_t) buffer[5] << 8) | buffer[4]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	3305      	adds	r3, #5
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	021b      	lsls	r3, r3, #8
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	3304      	adds	r3, #4
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b21b      	sxth	r3, r3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	b21a      	sxth	r2, r3
	return (adxl375_readings) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	8018      	strh	r0, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	8059      	strh	r1, [r3, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	809a      	strh	r2, [r3, #4]
	};
}
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <adxl1_read>:


adxl375_readings adxl1_read() {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	_adxl_read(&hspi6, adxl1_data_buffer);
 80017dc:	4906      	ldr	r1, [pc, #24]	; (80017f8 <adxl1_read+0x24>)
 80017de:	4807      	ldr	r0, [pc, #28]	; (80017fc <adxl1_read+0x28>)
 80017e0:	f7ff ffa8 	bl	8001734 <_adxl_read>
	return _formatted_adxl_readings(adxl1_data_buffer);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4904      	ldr	r1, [pc, #16]	; (80017f8 <adxl1_read+0x24>)
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ffc2 	bl	8001772 <_formatted_adxl_readings>
}
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	240002ec 	.word	0x240002ec
 80017fc:	24000b7c 	.word	0x24000b7c

08001800 <adxl2_read>:

adxl375_readings adxl2_read() {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(adxl3_gpio_x, adxl3_cs_pin, GPIO_PIN_SET);
 8001808:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <adxl2_read+0x44>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <adxl2_read+0x48>)
 800180e:	8811      	ldrh	r1, [r2, #0]
 8001810:	2201      	movs	r2, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f004 ff98 	bl	8006748 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(adxl2_gpio_x, adxl2_cs_pin, GPIO_PIN_RESET);
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <adxl2_read+0x4c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <adxl2_read+0x50>)
 800181e:	8811      	ldrh	r1, [r2, #0]
 8001820:	2200      	movs	r2, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f004 ff90 	bl	8006748 <HAL_GPIO_WritePin>

	_adxl_read(&hspi1, adxl2_data_buffer);
 8001828:	490a      	ldr	r1, [pc, #40]	; (8001854 <adxl2_read+0x54>)
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <adxl2_read+0x58>)
 800182c:	f7ff ff82 	bl	8001734 <_adxl_read>
	return _formatted_adxl_readings(adxl2_data_buffer);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <adxl2_read+0x54>)
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff9c 	bl	8001772 <_formatted_adxl_readings>
}
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	24000008 	.word	0x24000008
 8001848:	2400000c 	.word	0x2400000c
 800184c:	24000000 	.word	0x24000000
 8001850:	24000004 	.word	0x24000004
 8001854:	240002f4 	.word	0x240002f4
 8001858:	2400095c 	.word	0x2400095c

0800185c <adxl3_read>:

adxl375_readings adxl3_read() {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(adxl2_gpio_x, adxl2_cs_pin, GPIO_PIN_SET);
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <adxl3_read+0x44>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <adxl3_read+0x48>)
 800186a:	8811      	ldrh	r1, [r2, #0]
 800186c:	2201      	movs	r2, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f004 ff6a 	bl	8006748 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(adxl3_gpio_x, adxl3_cs_pin, GPIO_PIN_RESET);
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <adxl3_read+0x4c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a0c      	ldr	r2, [pc, #48]	; (80018ac <adxl3_read+0x50>)
 800187a:	8811      	ldrh	r1, [r2, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	4618      	mov	r0, r3
 8001880:	f004 ff62 	bl	8006748 <HAL_GPIO_WritePin>

	_adxl_read(&hspi1, adxl3_data_buffer);
 8001884:	490a      	ldr	r1, [pc, #40]	; (80018b0 <adxl3_read+0x54>)
 8001886:	480b      	ldr	r0, [pc, #44]	; (80018b4 <adxl3_read+0x58>)
 8001888:	f7ff ff54 	bl	8001734 <_adxl_read>
	return _formatted_adxl_readings(adxl3_data_buffer);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4908      	ldr	r1, [pc, #32]	; (80018b0 <adxl3_read+0x54>)
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff6e 	bl	8001772 <_formatted_adxl_readings>
}
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	24000000 	.word	0x24000000
 80018a4:	24000004 	.word	0x24000004
 80018a8:	24000008 	.word	0x24000008
 80018ac:	2400000c 	.word	0x2400000c
 80018b0:	240002fc 	.word	0x240002fc
 80018b4:	2400095c 	.word	0x2400095c

080018b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b090      	sub	sp, #64	; 0x40
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018be:	f002 f84b 	bl	8003958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018c2:	f000 f989 	bl	8001bd8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80018c6:	f000 f9f9 	bl	8001cbc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ca:	f000 fe53 	bl	8002574 <MX_GPIO_Init>
  MX_CORDIC_Init();
 80018ce:	f000 faa3 	bl	8001e18 <MX_CORDIC_Init>
  MX_CRC_Init();
 80018d2:	f000 fab5 	bl	8001e40 <MX_CRC_Init>
  MX_FMAC_Init();
 80018d6:	f000 fad5 	bl	8001e84 <MX_FMAC_Init>
  MX_I2C1_Init();
 80018da:	f000 fae7 	bl	8001eac <MX_I2C1_Init>
  MX_I2C2_Init();
 80018de:	f000 fb25 	bl	8001f2c <MX_I2C2_Init>
  MX_I2C3_Init();
 80018e2:	f000 fb63 	bl	8001fac <MX_I2C3_Init>
  MX_I2C4_Init();
 80018e6:	f000 fba1 	bl	800202c <MX_I2C4_Init>
  MX_RNG_Init();
 80018ea:	f000 fbdf 	bl	80020ac <MX_RNG_Init>
  MX_SDMMC1_MMC_Init();
 80018ee:	f000 fbf3 	bl	80020d8 <MX_SDMMC1_MMC_Init>
  MX_SPI1_Init();
 80018f2:	f000 fc13 	bl	800211c <MX_SPI1_Init>
  MX_SPI2_Init();
 80018f6:	f000 fc67 	bl	80021c8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80018fa:	f000 fcbb 	bl	8002274 <MX_SPI3_Init>
  MX_SPI4_Init();
 80018fe:	f000 fd0f 	bl	8002320 <MX_SPI4_Init>
  MX_SPI6_Init();
 8001902:	f000 fd63 	bl	80023cc <MX_SPI6_Init>
  MX_USB_OTG_HS_PCD_Init();
 8001906:	f000 fe03 	bl	8002510 <MX_USB_OTG_HS_PCD_Init>
  MX_ADC1_Init();
 800190a:	f000 fa0d 	bl	8001d28 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800190e:	f000 fdb3 	bl	8002478 <MX_USART2_UART_Init>
  //Setup UART
  HAL_UART_Receive_IT(&huart2, &rxData, 1);
 8001912:	2201      	movs	r2, #1
 8001914:	499f      	ldr	r1, [pc, #636]	; (8001b94 <main+0x2dc>)
 8001916:	48a0      	ldr	r0, [pc, #640]	; (8001b98 <main+0x2e0>)
 8001918:	f00c fc28 	bl	800e16c <HAL_UART_Receive_IT>

  //Setup EMMC!
  MX_FATFS_Init();
 800191c:	f00f fb2c 	bl	8010f78 <MX_FATFS_Init>
  FILINFO fno;
  FRESULT result;
  for (int idx = 0; idx < 100; idx++)
 8001920:	2300      	movs	r3, #0
 8001922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001924:	e020      	b.n	8001968 <main+0xb0>
  {
	printf("%s", filename);
 8001926:	499d      	ldr	r1, [pc, #628]	; (8001b9c <main+0x2e4>)
 8001928:	489d      	ldr	r0, [pc, #628]	; (8001ba0 <main+0x2e8>)
 800192a:	f011 fdd1 	bl	80134d0 <iprintf>
	snprintf(USERPath, 20, "FILENAME%d.txt", idx);
 800192e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001930:	4a9c      	ldr	r2, [pc, #624]	; (8001ba4 <main+0x2ec>)
 8001932:	2114      	movs	r1, #20
 8001934:	489c      	ldr	r0, [pc, #624]	; (8001ba8 <main+0x2f0>)
 8001936:	f011 fddd 	bl	80134f4 <sniprintf>
	result = f_stat(USERPath, &fno);
 800193a:	f107 031c 	add.w	r3, r7, #28
 800193e:	4619      	mov	r1, r3
 8001940:	4899      	ldr	r0, [pc, #612]	; (8001ba8 <main+0x2f0>)
 8001942:	f010 fdc1 	bl	80124c8 <f_stat>
 8001946:	4603      	mov	r3, r0
 8001948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (result != FR_OK)
 800194c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <main+0xa2>
	{
	  Error_Handler();
 8001954:	f000 fed4 	bl	8002700 <Error_Handler>
 8001958:	e003      	b.n	8001962 <main+0xaa>
	}
	else if (result == FR_NO_FILE)
 800195a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800195e:	2b04      	cmp	r3, #4
 8001960:	d006      	beq.n	8001970 <main+0xb8>
  for (int idx = 0; idx < 100; idx++)
 8001962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001964:	3301      	adds	r3, #1
 8001966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800196a:	2b63      	cmp	r3, #99	; 0x63
 800196c:	dddb      	ble.n	8001926 <main+0x6e>
 800196e:	e000      	b.n	8001972 <main+0xba>
	{
	  break;
 8001970:	bf00      	nop
  /* USER CODE BEGIN 2 */
  // SPI CS PULLDOWN CODE!
//PA0,PA4,PE4,PB9, low, PA15 / PC13 switches low = active
  //This happens automatically(??)

  MS5611_Reset(&hi2c1, &MS5611);
 8001972:	498e      	ldr	r1, [pc, #568]	; (8001bac <main+0x2f4>)
 8001974:	488e      	ldr	r0, [pc, #568]	; (8001bb0 <main+0x2f8>)
 8001976:	f7ff fbe5 	bl	8001144 <MS5611_Reset>
  MS5611_ReadProm(&hi2c1, &MS5611);
 800197a:	498c      	ldr	r1, [pc, #560]	; (8001bac <main+0x2f4>)
 800197c:	488c      	ldr	r0, [pc, #560]	; (8001bb0 <main+0x2f8>)
 800197e:	f7ff fc03 	bl	8001188 <MS5611_ReadProm>
  MS5611_Reset(&hi2c2, &MS5611_2);
 8001982:	498c      	ldr	r1, [pc, #560]	; (8001bb4 <main+0x2fc>)
 8001984:	488c      	ldr	r0, [pc, #560]	; (8001bb8 <main+0x300>)
 8001986:	f7ff fbdd 	bl	8001144 <MS5611_Reset>
  MS5611_ReadProm(&hi2c2, &MS5611_2);
 800198a:	498a      	ldr	r1, [pc, #552]	; (8001bb4 <main+0x2fc>)
 800198c:	488a      	ldr	r0, [pc, #552]	; (8001bb8 <main+0x300>)
 800198e:	f7ff fbfb 	bl	8001188 <MS5611_ReadProm>
  MS5611_Reset(&hi2c3, &MS5611_3);
 8001992:	498a      	ldr	r1, [pc, #552]	; (8001bbc <main+0x304>)
 8001994:	488a      	ldr	r0, [pc, #552]	; (8001bc0 <main+0x308>)
 8001996:	f7ff fbd5 	bl	8001144 <MS5611_Reset>
  MS5611_ReadProm(&hi2c3, &MS5611_3);
 800199a:	4988      	ldr	r1, [pc, #544]	; (8001bbc <main+0x304>)
 800199c:	4888      	ldr	r0, [pc, #544]	; (8001bc0 <main+0x308>)
 800199e:	f7ff fbf3 	bl	8001188 <MS5611_ReadProm>


   GNSS_Init(&GNSS_Handle, &hi2c4);
 80019a2:	4988      	ldr	r1, [pc, #544]	; (8001bc4 <main+0x30c>)
 80019a4:	4888      	ldr	r0, [pc, #544]	; (8001bc8 <main+0x310>)
 80019a6:	f7ff f845 	bl	8000a34 <GNSS_Init>
  HAL_Delay(1000);
 80019aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019ae:	f002 f865 	bl	8003a7c <HAL_Delay>
  GNSS_LoadConfig(&GNSS_Handle);
 80019b2:	4885      	ldr	r0, [pc, #532]	; (8001bc8 <main+0x310>)
 80019b4:	f7ff fb9a 	bl	80010ec <GNSS_LoadConfig>
  uint32_t Timer = HAL_GetTick();
 80019b8:	f002 f854 	bl	8003a64 <HAL_GetTick>
 80019bc:	63b8      	str	r0, [r7, #56]	; 0x38
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
//MS5611 ACCURATE
	  MS5611_RequestTemperature(&hi2c1,OSR_4096);
 80019be:	2104      	movs	r1, #4
 80019c0:	487b      	ldr	r0, [pc, #492]	; (8001bb0 <main+0x2f8>)
 80019c2:	f7ff fcff 	bl	80013c4 <MS5611_RequestTemperature>
	  MS5611_ReadTemperature(&hi2c1,&MS5611);
 80019c6:	4979      	ldr	r1, [pc, #484]	; (8001bac <main+0x2f4>)
 80019c8:	4879      	ldr	r0, [pc, #484]	; (8001bb0 <main+0x2f8>)
 80019ca:	f7ff fd33 	bl	8001434 <MS5611_ReadTemperature>
	  MS5611_CalculateTemperature(&MS5611);
 80019ce:	4877      	ldr	r0, [pc, #476]	; (8001bac <main+0x2f4>)
 80019d0:	f7ff fd8c 	bl	80014ec <MS5611_CalculateTemperature>
	  MS5611_RequestPressure(&hi2c1, OSR_4096);
 80019d4:	2104      	movs	r1, #4
 80019d6:	4876      	ldr	r0, [pc, #472]	; (8001bb0 <main+0x2f8>)
 80019d8:	f7ff fd10 	bl	80013fc <MS5611_RequestPressure>
	  MS5611_ReadPressure(&hi2c1,&MS5611);
 80019dc:	4973      	ldr	r1, [pc, #460]	; (8001bac <main+0x2f4>)
 80019de:	4874      	ldr	r0, [pc, #464]	; (8001bb0 <main+0x2f8>)
 80019e0:	f7ff fd56 	bl	8001490 <MS5611_ReadPressure>
	  MS5611_CalculatePressure(&MS5611);
 80019e4:	4871      	ldr	r0, [pc, #452]	; (8001bac <main+0x2f4>)
 80019e6:	f7ff fdb7 	bl	8001558 <MS5611_CalculatePressure>
	  MS5611.Alt = (MS5611_getAltitude1((float)MS5611.P/100.f))*100;
 80019ea:	4b70      	ldr	r3, [pc, #448]	; (8001bac <main+0x2f4>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	ee07 3a90 	vmov	s15, r3
 80019f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f6:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001bcc <main+0x314>
 80019fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001a02:	f7ff fe55 	bl	80016b0 <MS5611_getAltitude1>
 8001a06:	eef0 7a40 	vmov.f32	s15, s0
 8001a0a:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8001bcc <main+0x314>
 8001a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a12:	4b66      	ldr	r3, [pc, #408]	; (8001bac <main+0x2f4>)
 8001a14:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	  MS5611.Alt_Filt = MS5611.Alt_Filt * X + MS5611.Alt * (1.0f-X);
 8001a18:	4b64      	ldr	r3, [pc, #400]	; (8001bac <main+0x2f4>)
 8001a1a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a1e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001bd0 <main+0x318>
 8001a22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a26:	4b61      	ldr	r3, [pc, #388]	; (8001bac <main+0x2f4>)
 8001a28:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001a2c:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001bd4 <main+0x31c>
 8001a30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a38:	4b5c      	ldr	r3, [pc, #368]	; (8001bac <main+0x2f4>)
 8001a3a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

//MS5611 Fast
	  MS5611_RequestTemperature(&hi2c2,OSR_256);
 8001a3e:	2100      	movs	r1, #0
 8001a40:	485d      	ldr	r0, [pc, #372]	; (8001bb8 <main+0x300>)
 8001a42:	f7ff fcbf 	bl	80013c4 <MS5611_RequestTemperature>
	  MS5611_ReadTemperature(&hi2c2,&MS5611_2);
 8001a46:	495b      	ldr	r1, [pc, #364]	; (8001bb4 <main+0x2fc>)
 8001a48:	485b      	ldr	r0, [pc, #364]	; (8001bb8 <main+0x300>)
 8001a4a:	f7ff fcf3 	bl	8001434 <MS5611_ReadTemperature>
	  MS5611_CalculateTemperature(&MS5611_2);
 8001a4e:	4859      	ldr	r0, [pc, #356]	; (8001bb4 <main+0x2fc>)
 8001a50:	f7ff fd4c 	bl	80014ec <MS5611_CalculateTemperature>
	  MS5611_RequestPressure(&hi2c2, OSR_256);
 8001a54:	2100      	movs	r1, #0
 8001a56:	4858      	ldr	r0, [pc, #352]	; (8001bb8 <main+0x300>)
 8001a58:	f7ff fcd0 	bl	80013fc <MS5611_RequestPressure>
	  MS5611_ReadPressure(&hi2c2,&MS5611_2);
 8001a5c:	4955      	ldr	r1, [pc, #340]	; (8001bb4 <main+0x2fc>)
 8001a5e:	4856      	ldr	r0, [pc, #344]	; (8001bb8 <main+0x300>)
 8001a60:	f7ff fd16 	bl	8001490 <MS5611_ReadPressure>
	  MS5611_CalculatePressure(&MS5611_2);
 8001a64:	4853      	ldr	r0, [pc, #332]	; (8001bb4 <main+0x2fc>)
 8001a66:	f7ff fd77 	bl	8001558 <MS5611_CalculatePressure>
	  MS5611_2.Alt = (MS5611_getAltitude1((float)MS5611_2.P/100.f))*100;
 8001a6a:	4b52      	ldr	r3, [pc, #328]	; (8001bb4 <main+0x2fc>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	ee07 3a90 	vmov	s15, r3
 8001a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a76:	eddf 6a55 	vldr	s13, [pc, #340]	; 8001bcc <main+0x314>
 8001a7a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a7e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a82:	f7ff fe15 	bl	80016b0 <MS5611_getAltitude1>
 8001a86:	eef0 7a40 	vmov.f32	s15, s0
 8001a8a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001bcc <main+0x314>
 8001a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a92:	4b48      	ldr	r3, [pc, #288]	; (8001bb4 <main+0x2fc>)
 8001a94:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	  MS5611_2.Alt_Filt = MS5611_2.Alt_Filt * X + MS5611_2.Alt * (1.0f-X);
 8001a98:	4b46      	ldr	r3, [pc, #280]	; (8001bb4 <main+0x2fc>)
 8001a9a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001a9e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001bd0 <main+0x318>
 8001aa2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aa6:	4b43      	ldr	r3, [pc, #268]	; (8001bb4 <main+0x2fc>)
 8001aa8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001aac:	eddf 6a49 	vldr	s13, [pc, #292]	; 8001bd4 <main+0x31c>
 8001ab0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ab4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab8:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <main+0x2fc>)
 8001aba:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

// MS5607!!
	  MS5611_RequestTemperature(&hi2c3,OSR_256);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	483f      	ldr	r0, [pc, #252]	; (8001bc0 <main+0x308>)
 8001ac2:	f7ff fc7f 	bl	80013c4 <MS5611_RequestTemperature>
	  MS5611_ReadTemperature(&hi2c3,&MS5611_3);
 8001ac6:	493d      	ldr	r1, [pc, #244]	; (8001bbc <main+0x304>)
 8001ac8:	483d      	ldr	r0, [pc, #244]	; (8001bc0 <main+0x308>)
 8001aca:	f7ff fcb3 	bl	8001434 <MS5611_ReadTemperature>
	  MS5611_CalculateTemperature(&MS5611_3);
 8001ace:	483b      	ldr	r0, [pc, #236]	; (8001bbc <main+0x304>)
 8001ad0:	f7ff fd0c 	bl	80014ec <MS5611_CalculateTemperature>
	  MS5611_RequestPressure(&hi2c3, OSR_256);
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	483a      	ldr	r0, [pc, #232]	; (8001bc0 <main+0x308>)
 8001ad8:	f7ff fc90 	bl	80013fc <MS5611_RequestPressure>
	  MS5611_ReadPressure(&hi2c3,&MS5611_3);
 8001adc:	4937      	ldr	r1, [pc, #220]	; (8001bbc <main+0x304>)
 8001ade:	4838      	ldr	r0, [pc, #224]	; (8001bc0 <main+0x308>)
 8001ae0:	f7ff fcd6 	bl	8001490 <MS5611_ReadPressure>
	  MS5611_CalculatePressure(&MS5611_3);
 8001ae4:	4835      	ldr	r0, [pc, #212]	; (8001bbc <main+0x304>)
 8001ae6:	f7ff fd37 	bl	8001558 <MS5611_CalculatePressure>
	  MS5611_3.Alt = (MS5611_getAltitude1((float)MS5611_3.P/100.f))*100;
 8001aea:	4b34      	ldr	r3, [pc, #208]	; (8001bbc <main+0x304>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af6:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001bcc <main+0x314>
 8001afa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001afe:	eeb0 0a47 	vmov.f32	s0, s14
 8001b02:	f7ff fdd5 	bl	80016b0 <MS5611_getAltitude1>
 8001b06:	eef0 7a40 	vmov.f32	s15, s0
 8001b0a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001bcc <main+0x314>
 8001b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b12:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <main+0x304>)
 8001b14:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	  MS5611_3.Alt_Filt = MS5611_3.Alt_Filt * X + MS5611_3.Alt * (1.0f-X);
 8001b18:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <main+0x304>)
 8001b1a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001b1e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001bd0 <main+0x318>
 8001b22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b26:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <main+0x304>)
 8001b28:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001b2c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001bd4 <main+0x31c>
 8001b30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b38:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <main+0x304>)
 8001b3a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

// ADXL375 x 3
	  adxl375_readings adxl1 = adxl1_read();
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fe46 	bl	80017d4 <adxl1_read>
	  adxl375_readings adxl2 = adxl2_read();
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fe57 	bl	8001800 <adxl2_read>
	  adxl375_readings adxl3 = adxl3_read();
 8001b52:	1d3b      	adds	r3, r7, #4
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fe81 	bl	800185c <adxl3_read>

	  if ((HAL_GetTick() - Timer) > 1000) {
 8001b5a:	f001 ff83 	bl	8003a64 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b68:	f67f af29 	bls.w	80019be <main+0x106>
	  			GNSS_GetUniqID(&GNSS_Handle);
 8001b6c:	4816      	ldr	r0, [pc, #88]	; (8001bc8 <main+0x310>)
 8001b6e:	f7ff f811 	bl	8000b94 <GNSS_GetUniqID>
	  			GNSS_ParseBuffer(&GNSS_Handle);
 8001b72:	4815      	ldr	r0, [pc, #84]	; (8001bc8 <main+0x310>)
 8001b74:	f7fe ffa7 	bl	8000ac6 <GNSS_ParseBuffer>
	  			HAL_Delay(250);
 8001b78:	20fa      	movs	r0, #250	; 0xfa
 8001b7a:	f001 ff7f 	bl	8003a7c <HAL_Delay>
	  			GNSS_GetPVTData(&GNSS_Handle);
 8001b7e:	4812      	ldr	r0, [pc, #72]	; (8001bc8 <main+0x310>)
 8001b80:	f7ff f822 	bl	8000bc8 <GNSS_GetPVTData>
	  			GNSS_ParseBuffer(&GNSS_Handle);
 8001b84:	4810      	ldr	r0, [pc, #64]	; (8001bc8 <main+0x310>)
 8001b86:	f7fe ff9e 	bl	8000ac6 <GNSS_ParseBuffer>
	  			printf("Ground Speed (2-D): %d \r\n", GNSS_Handle.gSpeed);
	  			printf("Unique ID: %04X %04X %04X %04X %04X \n\r",
	  					GNSS_Handle.uniqueID[0], GNSS_Handle.uniqueID[1],
	  					GNSS_Handle.uniqueID[2], GNSS_Handle.uniqueID[3],
	  					GNSS_Handle.uniqueID[4], GNSS_Handle.uniqueID[5]);*/
	  			Timer = HAL_GetTick();
 8001b8a:	f001 ff6b 	bl	8003a64 <HAL_GetTick>
 8001b8e:	63b8      	str	r0, [r7, #56]	; 0x38
  {
 8001b90:	e715      	b.n	80019be <main+0x106>
 8001b92:	bf00      	nop
 8001b94:	240011a4 	.word	0x240011a4
 8001b98:	24000c04 	.word	0x24000c04
 8001b9c:	240011a8 	.word	0x240011a8
 8001ba0:	08015578 	.word	0x08015578
 8001ba4:	0801557c 	.word	0x0801557c
 8001ba8:	240011d0 	.word	0x240011d0
 8001bac:	240003b8 	.word	0x240003b8
 8001bb0:	24000584 	.word	0x24000584
 8001bb4:	24000400 	.word	0x24000400
 8001bb8:	240005d8 	.word	0x240005d8
 8001bbc:	24000448 	.word	0x24000448
 8001bc0:	2400062c 	.word	0x2400062c
 8001bc4:	24000680 	.word	0x24000680
 8001bc8:	24000304 	.word	0x24000304
 8001bcc:	42c80000 	.word	0x42c80000
 8001bd0:	3f666666 	.word	0x3f666666
 8001bd4:	3dccccd0 	.word	0x3dccccd0

08001bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b09c      	sub	sp, #112	; 0x70
 8001bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be2:	224c      	movs	r2, #76	; 0x4c
 8001be4:	2100      	movs	r1, #0
 8001be6:	4618      	mov	r0, r3
 8001be8:	f011 fcfb 	bl	80135e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	2220      	movs	r2, #32
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f011 fcf5 	bl	80135e2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f008 fa25 	bl	800a048 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b2d      	ldr	r3, [pc, #180]	; (8001cb8 <SystemClock_Config+0xe0>)
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c0a:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <SystemClock_Config+0xe0>)
 8001c0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c10:	6193      	str	r3, [r2, #24]
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <SystemClock_Config+0xe0>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c1e:	bf00      	nop
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <SystemClock_Config+0xe0>)
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c2c:	d1f8      	bne.n	8001c20 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001c2e:	2322      	movs	r3, #34	; 0x22
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c32:	2301      	movs	r3, #1
 8001c34:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001c36:	2340      	movs	r3, #64	; 0x40
 8001c38:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c42:	2300      	movs	r3, #0
 8001c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c46:	2304      	movs	r3, #4
 8001c48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001c4a:	230c      	movs	r3, #12
 8001c4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c56:	2302      	movs	r3, #2
 8001c58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c5a:	230c      	movs	r3, #12
 8001c5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f008 fa36 	bl	800a0dc <HAL_RCC_OscConfig>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c76:	f000 fd43 	bl	8002700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c7a:	233f      	movs	r3, #63	; 0x3f
 8001c7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c8a:	2340      	movs	r3, #64	; 0x40
 8001c8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001c8e:	2350      	movs	r3, #80	; 0x50
 8001c90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV4;
 8001c98:	2350      	movs	r3, #80	; 0x50
 8001c9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f008 fdf5 	bl	800a890 <HAL_RCC_ClockConfig>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001cac:	f000 fd28 	bl	8002700 <Error_Handler>
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3770      	adds	r7, #112	; 0x70
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	58024800 	.word	0x58024800

08001cbc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b0ae      	sub	sp, #184	; 0xb8
 8001cc0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cc2:	463b      	mov	r3, r7
 8001cc4:	22b8      	movs	r2, #184	; 0xb8
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f011 fc8a 	bl	80135e2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SDMMC
 8001cce:	4a15      	ldr	r2, [pc, #84]	; (8001d24 <PeriphCommonClock_Config+0x68>)
 8001cd0:	f04f 0300 	mov.w	r3, #0
 8001cd4:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_CKPER;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001cdc:	230c      	movs	r3, #12
 8001cde:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001cec:	23c0      	movs	r3, #192	; 0xc0
 8001cee:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8001cf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cfc:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d08:	463b      	mov	r3, r7
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f009 f94c 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001d16:	f000 fcf3 	bl	8002700 <Error_Handler>
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	37b8      	adds	r7, #184	; 0xb8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	80090000 	.word	0x80090000

08001d28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08c      	sub	sp, #48	; 0x30
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2224      	movs	r2, #36	; 0x24
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4618      	mov	r0, r3
 8001d42:	f011 fc4e 	bl	80135e2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d46:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d48:	4a31      	ldr	r2, [pc, #196]	; (8001e10 <MX_ADC1_Init+0xe8>)
 8001d4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001d52:	4b2e      	ldr	r3, [pc, #184]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d58:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d5e:	4b2b      	ldr	r3, [pc, #172]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d60:	2204      	movs	r2, #4
 8001d62:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d64:	4b29      	ldr	r3, [pc, #164]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d70:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001da4:	4819      	ldr	r0, [pc, #100]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001da6:	f002 f8d3 	bl	8003f50 <HAL_ADC_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8001db0:	f000 fca6 	bl	8002700 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001db4:	2300      	movs	r3, #0
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001db8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4813      	ldr	r0, [pc, #76]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001dc0:	f003 f90e 	bl	8004fe0 <HAL_ADCEx_MultiModeConfigChannel>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001dca:	f000 fc99 	bl	8002700 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001dce:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <MX_ADC1_Init+0xec>)
 8001dd0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dda:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001dde:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001de0:	2304      	movs	r3, #4
 8001de2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dee:	463b      	mov	r3, r7
 8001df0:	4619      	mov	r1, r3
 8001df2:	4806      	ldr	r0, [pc, #24]	; (8001e0c <MX_ADC1_Init+0xe4>)
 8001df4:	f002 fab4 	bl	8004360 <HAL_ADC_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 8001dfe:	f000 fc7f 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e02:	bf00      	nop
 8001e04:	3730      	adds	r7, #48	; 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	24000490 	.word	0x24000490
 8001e10:	40022000 	.word	0x40022000
 8001e14:	10c00010 	.word	0x10c00010

08001e18 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <MX_CORDIC_Init+0x20>)
 8001e1e:	4a07      	ldr	r2, [pc, #28]	; (8001e3c <MX_CORDIC_Init+0x24>)
 8001e20:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001e22:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_CORDIC_Init+0x20>)
 8001e24:	f003 f9be 	bl	80051a4 <HAL_CORDIC_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001e2e:	f000 fc67 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	24000500 	.word	0x24000500
 8001e3c:	48024400 	.word	0x48024400

08001e40 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <MX_CRC_Init+0x3c>)
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <MX_CRC_Init+0x40>)
 8001e48:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <MX_CRC_Init+0x3c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <MX_CRC_Init+0x3c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <MX_CRC_Init+0x3c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <MX_CRC_Init+0x3c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <MX_CRC_Init+0x3c>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <MX_CRC_Init+0x3c>)
 8001e6a:	f003 fab1 	bl	80053d0 <HAL_CRC_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001e74:	f000 fc44 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	24000528 	.word	0x24000528
 8001e80:	58024c00 	.word	0x58024c00

08001e84 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_FMAC_Init+0x20>)
 8001e8a:	4a07      	ldr	r2, [pc, #28]	; (8001ea8 <MX_FMAC_Init+0x24>)
 8001e8c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_FMAC_Init+0x20>)
 8001e90:	f004 fa06 	bl	80062a0 <HAL_FMAC_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8001e9a:	f000 fc31 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	2400054c 	.word	0x2400054c
 8001ea8:	48024000 	.word	0x48024000

08001eac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <MX_I2C1_Init+0x78>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <MX_I2C1_Init+0x7c>)
 8001eba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 238;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001ebe:	22ee      	movs	r2, #238	; 0xee
 8001ec0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ee6:	480e      	ldr	r0, [pc, #56]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001ee8:	f004 fc48 	bl	800677c <HAL_I2C_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ef2:	f000 fc05 	bl	8002700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	4809      	ldr	r0, [pc, #36]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001efa:	f006 ff9d 	bl	8008e38 <HAL_I2CEx_ConfigAnalogFilter>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001f04:	f000 fbfc 	bl	8002700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_I2C1_Init+0x74>)
 8001f0c:	f006 ffdf 	bl	8008ece <HAL_I2CEx_ConfigDigitalFilter>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001f16:	f000 fbf3 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	24000584 	.word	0x24000584
 8001f24:	40005400 	.word	0x40005400
 8001f28:	20303e5d 	.word	0x20303e5d

08001f2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f32:	4a1c      	ldr	r2, [pc, #112]	; (8001fa4 <MX_I2C2_Init+0x78>)
 8001f34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f38:	4a1b      	ldr	r2, [pc, #108]	; (8001fa8 <MX_I2C2_Init+0x7c>)
 8001f3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 238;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f3e:	22ee      	movs	r2, #238	; 0xee
 8001f40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f48:	4b15      	ldr	r3, [pc, #84]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001f4e:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001f66:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f68:	f004 fc08 	bl	800677c <HAL_I2C_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001f72:	f000 fbc5 	bl	8002700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f76:	2100      	movs	r1, #0
 8001f78:	4809      	ldr	r0, [pc, #36]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f7a:	f006 ff5d 	bl	8008e38 <HAL_I2CEx_ConfigAnalogFilter>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f84:	f000 fbbc 	bl	8002700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_I2C2_Init+0x74>)
 8001f8c:	f006 ff9f 	bl	8008ece <HAL_I2CEx_ConfigDigitalFilter>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f96:	f000 fbb3 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	240005d8 	.word	0x240005d8
 8001fa4:	40005800 	.word	0x40005800
 8001fa8:	20303e5d 	.word	0x20303e5d

08001fac <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <MX_I2C3_Init+0x74>)
 8001fb2:	4a1c      	ldr	r2, [pc, #112]	; (8002024 <MX_I2C3_Init+0x78>)
 8001fb4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 8001fb6:	4b1a      	ldr	r3, [pc, #104]	; (8002020 <MX_I2C3_Init+0x74>)
 8001fb8:	4a1b      	ldr	r2, [pc, #108]	; (8002028 <MX_I2C3_Init+0x7c>)
 8001fba:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 238;
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <MX_I2C3_Init+0x74>)
 8001fbe:	22ee      	movs	r2, #238	; 0xee
 8001fc0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <MX_I2C3_Init+0x74>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <MX_I2C3_Init+0x74>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001fce:	4b14      	ldr	r3, [pc, #80]	; (8002020 <MX_I2C3_Init+0x74>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fd4:	4b12      	ldr	r3, [pc, #72]	; (8002020 <MX_I2C3_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fda:	4b11      	ldr	r3, [pc, #68]	; (8002020 <MX_I2C3_Init+0x74>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fe0:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_I2C3_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001fe6:	480e      	ldr	r0, [pc, #56]	; (8002020 <MX_I2C3_Init+0x74>)
 8001fe8:	f004 fbc8 	bl	800677c <HAL_I2C_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001ff2:	f000 fb85 	bl	8002700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4809      	ldr	r0, [pc, #36]	; (8002020 <MX_I2C3_Init+0x74>)
 8001ffa:	f006 ff1d 	bl	8008e38 <HAL_I2CEx_ConfigAnalogFilter>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002004:	f000 fb7c 	bl	8002700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002008:	2100      	movs	r1, #0
 800200a:	4805      	ldr	r0, [pc, #20]	; (8002020 <MX_I2C3_Init+0x74>)
 800200c:	f006 ff5f 	bl	8008ece <HAL_I2CEx_ConfigDigitalFilter>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002016:	f000 fb73 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2400062c 	.word	0x2400062c
 8002024:	40005c00 	.word	0x40005c00
 8002028:	20303e5d 	.word	0x20303e5d

0800202c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <MX_I2C4_Init+0x74>)
 8002032:	4a1c      	ldr	r2, [pc, #112]	; (80020a4 <MX_I2C4_Init+0x78>)
 8002034:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 8002036:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <MX_I2C4_Init+0x74>)
 8002038:	4a1b      	ldr	r2, [pc, #108]	; (80020a8 <MX_I2C4_Init+0x7c>)
 800203a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <MX_I2C4_Init+0x74>)
 800203e:	2200      	movs	r2, #0
 8002040:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <MX_I2C4_Init+0x74>)
 8002044:	2201      	movs	r2, #1
 8002046:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002048:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <MX_I2C4_Init+0x74>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800204e:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <MX_I2C4_Init+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <MX_I2C4_Init+0x74>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800205a:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_I2C4_Init+0x74>)
 800205c:	2200      	movs	r2, #0
 800205e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002060:	4b0f      	ldr	r3, [pc, #60]	; (80020a0 <MX_I2C4_Init+0x74>)
 8002062:	2200      	movs	r2, #0
 8002064:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002066:	480e      	ldr	r0, [pc, #56]	; (80020a0 <MX_I2C4_Init+0x74>)
 8002068:	f004 fb88 	bl	800677c <HAL_I2C_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002072:	f000 fb45 	bl	8002700 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002076:	2100      	movs	r1, #0
 8002078:	4809      	ldr	r0, [pc, #36]	; (80020a0 <MX_I2C4_Init+0x74>)
 800207a:	f006 fedd 	bl	8008e38 <HAL_I2CEx_ConfigAnalogFilter>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002084:	f000 fb3c 	bl	8002700 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002088:	2100      	movs	r1, #0
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_I2C4_Init+0x74>)
 800208c:	f006 ff1f 	bl	8008ece <HAL_I2CEx_ConfigDigitalFilter>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002096:	f000 fb33 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	24000680 	.word	0x24000680
 80020a4:	58001c00 	.word	0x58001c00
 80020a8:	20303e5d 	.word	0x20303e5d

080020ac <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <MX_RNG_Init+0x24>)
 80020b2:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <MX_RNG_Init+0x28>)
 80020b4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <MX_RNG_Init+0x24>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <MX_RNG_Init+0x24>)
 80020be:	f00b fb59 	bl	800d774 <HAL_RNG_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80020c8:	f000 fb1a 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80020cc:	bf00      	nop
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	240006d4 	.word	0x240006d4
 80020d4:	48021800 	.word	0x48021800

080020d8 <MX_SDMMC1_MMC_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_MMC_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hmmc1.Instance = SDMMC1;
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <MX_SDMMC1_MMC_Init+0x3c>)
 80020de:	4a0e      	ldr	r2, [pc, #56]	; (8002118 <MX_SDMMC1_MMC_Init+0x40>)
 80020e0:	601a      	str	r2, [r3, #0]
  hmmc1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <MX_SDMMC1_MMC_Init+0x3c>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	605a      	str	r2, [r3, #4]
  hmmc1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80020e8:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <MX_SDMMC1_MMC_Init+0x3c>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	609a      	str	r2, [r3, #8]
  hmmc1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <MX_SDMMC1_MMC_Init+0x3c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	60da      	str	r2, [r3, #12]
  hmmc1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <MX_SDMMC1_MMC_Init+0x3c>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
  hmmc1.Init.ClockDiv = 0;
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_SDMMC1_MMC_Init+0x3c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc1) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	; (8002114 <MX_SDMMC1_MMC_Init+0x3c>)
 8002102:	f006 ff30 	bl	8008f66 <HAL_MMC_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_SDMMC1_MMC_Init+0x38>
  {
    Error_Handler();
 800210c:	f000 faf8 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	240006e8 	.word	0x240006e8
 8002118:	52007000 	.word	0x52007000

0800211c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002120:	4b27      	ldr	r3, [pc, #156]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002122:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <MX_SPI1_Init+0xa8>)
 8002124:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002126:	4b26      	ldr	r3, [pc, #152]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002128:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800212c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800212e:	4b24      	ldr	r3, [pc, #144]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002136:	2203      	movs	r2, #3
 8002138:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <MX_SPI1_Init+0xa4>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002148:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800214c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002150:	2200      	movs	r2, #0
 8002152:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002156:	2200      	movs	r2, #0
 8002158:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800215a:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <MX_SPI1_Init+0xa4>)
 800215c:	2200      	movs	r2, #0
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002160:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002162:	2200      	movs	r2, #0
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002168:	2200      	movs	r2, #0
 800216a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <MX_SPI1_Init+0xa4>)
 800216e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002172:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002176:	2200      	movs	r2, #0
 8002178:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800217a:	4b11      	ldr	r3, [pc, #68]	; (80021c0 <MX_SPI1_Init+0xa4>)
 800217c:	2200      	movs	r2, #0
 800217e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002182:	2200      	movs	r2, #0
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002188:	2200      	movs	r2, #0
 800218a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <MX_SPI1_Init+0xa4>)
 800218e:	2200      	movs	r2, #0
 8002190:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <MX_SPI1_Init+0xa4>)
 8002194:	2200      	movs	r2, #0
 8002196:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002198:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <MX_SPI1_Init+0xa4>)
 800219a:	2200      	movs	r2, #0
 800219c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800219e:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <MX_SPI1_Init+0xa4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <MX_SPI1_Init+0xa4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021aa:	4805      	ldr	r0, [pc, #20]	; (80021c0 <MX_SPI1_Init+0xa4>)
 80021ac:	f00b fb86 	bl	800d8bc <HAL_SPI_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 80021b6:	f000 faa3 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	2400095c 	.word	0x2400095c
 80021c4:	40013000 	.word	0x40013000

080021c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80021cc:	4b27      	ldr	r3, [pc, #156]	; (800226c <MX_SPI2_Init+0xa4>)
 80021ce:	4a28      	ldr	r2, [pc, #160]	; (8002270 <MX_SPI2_Init+0xa8>)
 80021d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <MX_SPI2_Init+0xa4>)
 80021d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <MX_SPI2_Init+0xa4>)
 80021dc:	2200      	movs	r2, #0
 80021de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <MX_SPI2_Init+0xa4>)
 80021e2:	2203      	movs	r2, #3
 80021e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <MX_SPI2_Init+0xa4>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <MX_SPI2_Init+0xa4>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <MX_SPI2_Init+0xa4>)
 80021f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <MX_SPI2_Init+0xa4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <MX_SPI2_Init+0xa4>)
 8002202:	2200      	movs	r2, #0
 8002204:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <MX_SPI2_Init+0xa4>)
 8002208:	2200      	movs	r2, #0
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <MX_SPI2_Init+0xa4>)
 800220e:	2200      	movs	r2, #0
 8002210:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <MX_SPI2_Init+0xa4>)
 8002214:	2200      	movs	r2, #0
 8002216:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <MX_SPI2_Init+0xa4>)
 800221a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800221e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <MX_SPI2_Init+0xa4>)
 8002222:	2200      	movs	r2, #0
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <MX_SPI2_Init+0xa4>)
 8002228:	2200      	movs	r2, #0
 800222a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_SPI2_Init+0xa4>)
 800222e:	2200      	movs	r2, #0
 8002230:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <MX_SPI2_Init+0xa4>)
 8002234:	2200      	movs	r2, #0
 8002236:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_SPI2_Init+0xa4>)
 800223a:	2200      	movs	r2, #0
 800223c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <MX_SPI2_Init+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_SPI2_Init+0xa4>)
 8002246:	2200      	movs	r2, #0
 8002248:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800224a:	4b08      	ldr	r3, [pc, #32]	; (800226c <MX_SPI2_Init+0xa4>)
 800224c:	2200      	movs	r2, #0
 800224e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002250:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_SPI2_Init+0xa4>)
 8002252:	2200      	movs	r2, #0
 8002254:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <MX_SPI2_Init+0xa4>)
 8002258:	f00b fb30 	bl	800d8bc <HAL_SPI_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_SPI2_Init+0x9e>
  {
    Error_Handler();
 8002262:	f000 fa4d 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	240009e4 	.word	0x240009e4
 8002270:	40003800 	.word	0x40003800

08002274 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002278:	4b27      	ldr	r3, [pc, #156]	; (8002318 <MX_SPI3_Init+0xa4>)
 800227a:	4a28      	ldr	r2, [pc, #160]	; (800231c <MX_SPI3_Init+0xa8>)
 800227c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <MX_SPI3_Init+0xa4>)
 8002280:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002284:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002286:	4b24      	ldr	r3, [pc, #144]	; (8002318 <MX_SPI3_Init+0xa4>)
 8002288:	2200      	movs	r2, #0
 800228a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800228c:	4b22      	ldr	r3, [pc, #136]	; (8002318 <MX_SPI3_Init+0xa4>)
 800228e:	2203      	movs	r2, #3
 8002290:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <MX_SPI3_Init+0xa4>)
 8002294:	2200      	movs	r2, #0
 8002296:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <MX_SPI3_Init+0xa4>)
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80022a4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022a6:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b8:	4b17      	ldr	r3, [pc, #92]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80022d2:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_SPI3_Init+0xa4>)
 80022fe:	2200      	movs	r2, #0
 8002300:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_SPI3_Init+0xa4>)
 8002304:	f00b fada 	bl	800d8bc <HAL_SPI_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800230e:	f000 f9f7 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	24000a6c 	.word	0x24000a6c
 800231c:	40003c00 	.word	0x40003c00

08002320 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002326:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <MX_SPI4_Init+0xa8>)
 8002328:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800232a:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <MX_SPI4_Init+0xa4>)
 800232c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002330:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002334:	2200      	movs	r2, #0
 8002336:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <MX_SPI4_Init+0xa4>)
 800233a:	2203      	movs	r2, #3
 800233c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002340:	2200      	movs	r2, #0
 8002342:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002346:	2200      	movs	r2, #0
 8002348:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800234a:	4b1e      	ldr	r3, [pc, #120]	; (80023c4 <MX_SPI4_Init+0xa4>)
 800234c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002350:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002354:	2200      	movs	r2, #0
 8002356:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002358:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <MX_SPI4_Init+0xa4>)
 800235a:	2200      	movs	r2, #0
 800235c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002360:	2200      	movs	r2, #0
 8002362:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002366:	2200      	movs	r2, #0
 8002368:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <MX_SPI4_Init+0xa4>)
 800236c:	2200      	movs	r2, #0
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002376:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <MX_SPI4_Init+0xa4>)
 800237a:	2200      	movs	r2, #0
 800237c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800237e:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002380:	2200      	movs	r2, #0
 8002382:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002386:	2200      	movs	r2, #0
 8002388:	641a      	str	r2, [r3, #64]	; 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800238a:	4b0e      	ldr	r3, [pc, #56]	; (80023c4 <MX_SPI4_Init+0xa4>)
 800238c:	2200      	movs	r2, #0
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002390:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002392:	2200      	movs	r2, #0
 8002394:	649a      	str	r2, [r3, #72]	; 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <MX_SPI4_Init+0xa4>)
 8002398:	2200      	movs	r2, #0
 800239a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <MX_SPI4_Init+0xa4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <MX_SPI4_Init+0xa4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <MX_SPI4_Init+0xa4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80023ae:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_SPI4_Init+0xa4>)
 80023b0:	f00b fa84 	bl	800d8bc <HAL_SPI_Init>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80023ba:	f000 f9a1 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	24000af4 	.word	0x24000af4
 80023c8:	40013400 	.word	0x40013400

080023cc <MX_SPI6_Init>:
  * @brief SPI6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI6_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI6_Init 1 */

  /* USER CODE END SPI6_Init 1 */
  /* SPI6 parameter configuration*/
  hspi6.Instance = SPI6;
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <MX_SPI6_Init+0xa4>)
 80023d2:	4a28      	ldr	r2, [pc, #160]	; (8002474 <MX_SPI6_Init+0xa8>)
 80023d4:	601a      	str	r2, [r3, #0]
  hspi6.Init.Mode = SPI_MODE_MASTER;
 80023d6:	4b26      	ldr	r3, [pc, #152]	; (8002470 <MX_SPI6_Init+0xa4>)
 80023d8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023dc:	605a      	str	r2, [r3, #4]
  hspi6.Init.Direction = SPI_DIRECTION_2LINES;
 80023de:	4b24      	ldr	r3, [pc, #144]	; (8002470 <MX_SPI6_Init+0xa4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	609a      	str	r2, [r3, #8]
  hspi6.Init.DataSize = SPI_DATASIZE_4BIT;
 80023e4:	4b22      	ldr	r3, [pc, #136]	; (8002470 <MX_SPI6_Init+0xa4>)
 80023e6:	2203      	movs	r2, #3
 80023e8:	60da      	str	r2, [r3, #12]
  hspi6.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ea:	4b21      	ldr	r3, [pc, #132]	; (8002470 <MX_SPI6_Init+0xa4>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	611a      	str	r2, [r3, #16]
  hspi6.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023f0:	4b1f      	ldr	r3, [pc, #124]	; (8002470 <MX_SPI6_Init+0xa4>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	615a      	str	r2, [r3, #20]
  hspi6.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80023f6:	4b1e      	ldr	r3, [pc, #120]	; (8002470 <MX_SPI6_Init+0xa4>)
 80023f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023fc:	619a      	str	r2, [r3, #24]
  hspi6.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023fe:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <MX_SPI6_Init+0xa4>)
 8002400:	2200      	movs	r2, #0
 8002402:	61da      	str	r2, [r3, #28]
  hspi6.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002404:	4b1a      	ldr	r3, [pc, #104]	; (8002470 <MX_SPI6_Init+0xa4>)
 8002406:	2200      	movs	r2, #0
 8002408:	621a      	str	r2, [r3, #32]
  hspi6.Init.TIMode = SPI_TIMODE_DISABLE;
 800240a:	4b19      	ldr	r3, [pc, #100]	; (8002470 <MX_SPI6_Init+0xa4>)
 800240c:	2200      	movs	r2, #0
 800240e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi6.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <MX_SPI6_Init+0xa4>)
 8002412:	2200      	movs	r2, #0
 8002414:	629a      	str	r2, [r3, #40]	; 0x28
  hspi6.Init.CRCPolynomial = 0x0;
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <MX_SPI6_Init+0xa4>)
 8002418:	2200      	movs	r2, #0
 800241a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi6.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800241c:	4b14      	ldr	r3, [pc, #80]	; (8002470 <MX_SPI6_Init+0xa4>)
 800241e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002422:	635a      	str	r2, [r3, #52]	; 0x34
  hspi6.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002424:	4b12      	ldr	r3, [pc, #72]	; (8002470 <MX_SPI6_Init+0xa4>)
 8002426:	2200      	movs	r2, #0
 8002428:	639a      	str	r2, [r3, #56]	; 0x38
  hspi6.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800242a:	4b11      	ldr	r3, [pc, #68]	; (8002470 <MX_SPI6_Init+0xa4>)
 800242c:	2200      	movs	r2, #0
 800242e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi6.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002430:	4b0f      	ldr	r3, [pc, #60]	; (8002470 <MX_SPI6_Init+0xa4>)
 8002432:	2200      	movs	r2, #0
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
  hspi6.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002436:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <MX_SPI6_Init+0xa4>)
 8002438:	2200      	movs	r2, #0
 800243a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi6.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <MX_SPI6_Init+0xa4>)
 800243e:	2200      	movs	r2, #0
 8002440:	649a      	str	r2, [r3, #72]	; 0x48
  hspi6.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <MX_SPI6_Init+0xa4>)
 8002444:	2200      	movs	r2, #0
 8002446:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi6.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002448:	4b09      	ldr	r3, [pc, #36]	; (8002470 <MX_SPI6_Init+0xa4>)
 800244a:	2200      	movs	r2, #0
 800244c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi6.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <MX_SPI6_Init+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	655a      	str	r2, [r3, #84]	; 0x54
  hspi6.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <MX_SPI6_Init+0xa4>)
 8002456:	2200      	movs	r2, #0
 8002458:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi6) != HAL_OK)
 800245a:	4805      	ldr	r0, [pc, #20]	; (8002470 <MX_SPI6_Init+0xa4>)
 800245c:	f00b fa2e 	bl	800d8bc <HAL_SPI_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_SPI6_Init+0x9e>
  {
    Error_Handler();
 8002466:	f000 f94b 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN SPI6_Init 2 */

  /* USER CODE END SPI6_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	24000b7c 	.word	0x24000b7c
 8002474:	58001400 	.word	0x58001400

08002478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800247c:	4b22      	ldr	r3, [pc, #136]	; (8002508 <MX_USART2_UART_Init+0x90>)
 800247e:	4a23      	ldr	r2, [pc, #140]	; (800250c <MX_USART2_UART_Init+0x94>)
 8002480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002482:	4b21      	ldr	r3, [pc, #132]	; (8002508 <MX_USART2_UART_Init+0x90>)
 8002484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800248a:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <MX_USART2_UART_Init+0x90>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <MX_USART2_UART_Init+0x90>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002496:	4b1c      	ldr	r3, [pc, #112]	; (8002508 <MX_USART2_UART_Init+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800249c:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <MX_USART2_UART_Init+0x90>)
 800249e:	220c      	movs	r2, #12
 80024a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a2:	4b19      	ldr	r3, [pc, #100]	; (8002508 <MX_USART2_UART_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <MX_USART2_UART_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ae:	4b16      	ldr	r3, [pc, #88]	; (8002508 <MX_USART2_UART_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <MX_USART2_UART_Init+0x90>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <MX_USART2_UART_Init+0x90>)
 80024bc:	2200      	movs	r2, #0
 80024be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024c0:	4811      	ldr	r0, [pc, #68]	; (8002508 <MX_USART2_UART_Init+0x90>)
 80024c2:	f00b fe02 	bl	800e0ca <HAL_UART_Init>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80024cc:	f000 f918 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d0:	2100      	movs	r1, #0
 80024d2:	480d      	ldr	r0, [pc, #52]	; (8002508 <MX_USART2_UART_Init+0x90>)
 80024d4:	f00d fdb3 	bl	801003e <HAL_UARTEx_SetTxFifoThreshold>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80024de:	f000 f90f 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024e2:	2100      	movs	r1, #0
 80024e4:	4808      	ldr	r0, [pc, #32]	; (8002508 <MX_USART2_UART_Init+0x90>)
 80024e6:	f00d fde8 	bl	80100ba <HAL_UARTEx_SetRxFifoThreshold>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80024f0:	f000 f906 	bl	8002700 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	; (8002508 <MX_USART2_UART_Init+0x90>)
 80024f6:	f00d fd69 	bl	800ffcc <HAL_UARTEx_DisableFifoMode>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002500:	f000 f8fe 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	24000c04 	.word	0x24000c04
 800250c:	40004400 	.word	0x40004400

08002510 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002514:	4b15      	ldr	r3, [pc, #84]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002516:	4a16      	ldr	r2, [pc, #88]	; (8002570 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8002518:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800251c:	2209      	movs	r2, #9
 800251e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8002520:	4b12      	ldr	r3, [pc, #72]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002522:	2202      	movs	r2, #2
 8002524:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8002526:	4b11      	ldr	r3, [pc, #68]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002528:	2200      	movs	r2, #0
 800252a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800252c:	4b0f      	ldr	r3, [pc, #60]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800252e:	2202      	movs	r2, #2
 8002530:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002534:	2200      	movs	r2, #0
 8002536:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800253a:	2200      	movs	r2, #0
 800253c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800253e:	4b0b      	ldr	r3, [pc, #44]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002540:	2200      	movs	r2, #0
 8002542:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002546:	2200      	movs	r2, #0
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800254a:	4b08      	ldr	r3, [pc, #32]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 800254c:	2200      	movs	r2, #0
 800254e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002552:	2200      	movs	r2, #0
 8002554:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8002558:	f007 fc2e 	bl	8009db8 <HAL_PCD_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8002562:	f000 f8cd 	bl	8002700 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002566:	bf00      	nop
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	24000c98 	.word	0x24000c98
 8002570:	40040000 	.word	0x40040000

08002574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	; 0x30
 8002578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257a:	f107 031c 	add.w	r3, r7, #28
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
 8002588:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800258a:	4b57      	ldr	r3, [pc, #348]	; (80026e8 <MX_GPIO_Init+0x174>)
 800258c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002590:	4a55      	ldr	r2, [pc, #340]	; (80026e8 <MX_GPIO_Init+0x174>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800259a:	4b53      	ldr	r3, [pc, #332]	; (80026e8 <MX_GPIO_Init+0x174>)
 800259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	61bb      	str	r3, [r7, #24]
 80025a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025a8:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <MX_GPIO_Init+0x174>)
 80025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ae:	4a4e      	ldr	r2, [pc, #312]	; (80026e8 <MX_GPIO_Init+0x174>)
 80025b0:	f043 0310 	orr.w	r3, r3, #16
 80025b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025b8:	4b4b      	ldr	r3, [pc, #300]	; (80026e8 <MX_GPIO_Init+0x174>)
 80025ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	4b48      	ldr	r3, [pc, #288]	; (80026e8 <MX_GPIO_Init+0x174>)
 80025c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025cc:	4a46      	ldr	r2, [pc, #280]	; (80026e8 <MX_GPIO_Init+0x174>)
 80025ce:	f043 0302 	orr.w	r3, r3, #2
 80025d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025d6:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <MX_GPIO_Init+0x174>)
 80025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025dc:	f003 0302 	and.w	r3, r3, #2
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e4:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <MX_GPIO_Init+0x174>)
 80025e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ea:	4a3f      	ldr	r2, [pc, #252]	; (80026e8 <MX_GPIO_Init+0x174>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025f4:	4b3c      	ldr	r3, [pc, #240]	; (80026e8 <MX_GPIO_Init+0x174>)
 80025f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002602:	4b39      	ldr	r3, [pc, #228]	; (80026e8 <MX_GPIO_Init+0x174>)
 8002604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002608:	4a37      	ldr	r2, [pc, #220]	; (80026e8 <MX_GPIO_Init+0x174>)
 800260a:	f043 0308 	orr.w	r3, r3, #8
 800260e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002612:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <MX_GPIO_Init+0x174>)
 8002614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <MX_GPIO_Init+0x174>)
 8002622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002626:	4a30      	ldr	r2, [pc, #192]	; (80026e8 <MX_GPIO_Init+0x174>)
 8002628:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800262c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <MX_GPIO_Init+0x174>)
 8002632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002644:	4829      	ldr	r0, [pc, #164]	; (80026ec <MX_GPIO_Init+0x178>)
 8002646:	f004 f87f 	bl	8006748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_10
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 415f 	mov.w	r1, #57088	; 0xdf00
 8002650:	4827      	ldr	r0, [pc, #156]	; (80026f0 <MX_GPIO_Init+0x17c>)
 8002652:	f004 f879 	bl	8006748 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002656:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800265a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265c:	2301      	movs	r3, #1
 800265e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002668:	f107 031c 	add.w	r3, r7, #28
 800266c:	4619      	mov	r1, r3
 800266e:	481f      	ldr	r0, [pc, #124]	; (80026ec <MX_GPIO_Init+0x178>)
 8002670:	f003 fec2 	bl	80063f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_7;
 8002674:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 8002678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800267a:	2300      	movs	r3, #0
 800267c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 031c 	add.w	r3, r7, #28
 8002686:	4619      	mov	r1, r3
 8002688:	481a      	ldr	r0, [pc, #104]	; (80026f4 <MX_GPIO_Init+0x180>)
 800268a:	f003 feb5 	bl	80063f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD15 PD11 PD14 PD10
                           PD9 PD8 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_10
 800268e:	f44f 435f 	mov.w	r3, #57088	; 0xdf00
 8002692:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002694:	2301      	movs	r3, #1
 8002696:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269c:	2300      	movs	r3, #0
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026a0:	f107 031c 	add.w	r3, r7, #28
 80026a4:	4619      	mov	r1, r3
 80026a6:	4812      	ldr	r0, [pc, #72]	; (80026f0 <MX_GPIO_Init+0x17c>)
 80026a8:	f003 fea6 	bl	80063f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB13 PB1 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_12;
 80026ac:	f243 0303 	movw	r3, #12291	; 0x3003
 80026b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b2:	2300      	movs	r3, #0
 80026b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b6:	2300      	movs	r3, #0
 80026b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ba:	f107 031c 	add.w	r3, r7, #28
 80026be:	4619      	mov	r1, r3
 80026c0:	480d      	ldr	r0, [pc, #52]	; (80026f8 <MX_GPIO_Init+0x184>)
 80026c2:	f003 fe99 	bl	80063f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE12 PE9 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12|GPIO_PIN_9|GPIO_PIN_13;
 80026c6:	f44f 534c 	mov.w	r3, #13056	; 0x3300
 80026ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026d4:	f107 031c 	add.w	r3, r7, #28
 80026d8:	4619      	mov	r1, r3
 80026da:	4808      	ldr	r0, [pc, #32]	; (80026fc <MX_GPIO_Init+0x188>)
 80026dc:	f003 fe8c 	bl	80063f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026e0:	bf00      	nop
 80026e2:	3730      	adds	r7, #48	; 0x30
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	58024400 	.word	0x58024400
 80026ec:	58020800 	.word	0x58020800
 80026f0:	58020c00 	.word	0x58020c00
 80026f4:	58020000 	.word	0x58020000
 80026f8:	58020400 	.word	0x58020400
 80026fc:	58021000 	.word	0x58021000

08002700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002704:	b672      	cpsid	i
}
 8002706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002708:	e7fe      	b.n	8002708 <Error_Handler+0x8>
	...

0800270c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_MspInit+0x30>)
 8002714:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002718:	4a08      	ldr	r2, [pc, #32]	; (800273c <HAL_MspInit+0x30>)
 800271a:	f043 0302 	orr.w	r3, r3, #2
 800271e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_MspInit+0x30>)
 8002724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	607b      	str	r3, [r7, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	58024400 	.word	0x58024400

08002740 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b08a      	sub	sp, #40	; 0x28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <HAL_ADC_MspInit+0x80>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d129      	bne.n	80027b6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002762:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_ADC_MspInit+0x84>)
 8002764:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002768:	4a16      	ldr	r2, [pc, #88]	; (80027c4 <HAL_ADC_MspInit+0x84>)
 800276a:	f043 0320 	orr.w	r3, r3, #32
 800276e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002772:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <HAL_ADC_MspInit+0x84>)
 8002774:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002778:	f003 0320 	and.w	r3, r3, #32
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_ADC_MspInit+0x84>)
 8002782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_ADC_MspInit+0x84>)
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <HAL_ADC_MspInit+0x84>)
 8002792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PC4     ------> ADC1_INP4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|BATADC1_Pin;
 800279e:	2311      	movs	r3, #17
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a2:	2303      	movs	r3, #3
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	4805      	ldr	r0, [pc, #20]	; (80027c8 <HAL_ADC_MspInit+0x88>)
 80027b2:	f003 fe21 	bl	80063f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3728      	adds	r7, #40	; 0x28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	40022000 	.word	0x40022000
 80027c4:	58024400 	.word	0x58024400
 80027c8:	58020800 	.word	0x58020800

080027cc <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <HAL_CORDIC_MspInit+0x3c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d10e      	bne.n	80027fc <HAL_CORDIC_MspInit+0x30>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_CORDIC_MspInit+0x40>)
 80027e0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027e4:	4a09      	ldr	r2, [pc, #36]	; (800280c <HAL_CORDIC_MspInit+0x40>)
 80027e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ea:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80027ee:	4b07      	ldr	r3, [pc, #28]	; (800280c <HAL_CORDIC_MspInit+0x40>)
 80027f0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80027f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	48024400 	.word	0x48024400
 800280c:	58024400 	.word	0x58024400

08002810 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0b      	ldr	r2, [pc, #44]	; (800284c <HAL_CRC_MspInit+0x3c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10e      	bne.n	8002840 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <HAL_CRC_MspInit+0x40>)
 8002824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002828:	4a09      	ldr	r2, [pc, #36]	; (8002850 <HAL_CRC_MspInit+0x40>)
 800282a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800282e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_CRC_MspInit+0x40>)
 8002834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	58024c00 	.word	0x58024c00
 8002850:	58024400 	.word	0x58024400

08002854 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0b      	ldr	r2, [pc, #44]	; (8002890 <HAL_FMAC_MspInit+0x3c>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10e      	bne.n	8002884 <HAL_FMAC_MspInit+0x30>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8002866:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_FMAC_MspInit+0x40>)
 8002868:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800286c:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_FMAC_MspInit+0x40>)
 800286e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002872:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002876:	4b07      	ldr	r3, [pc, #28]	; (8002894 <HAL_FMAC_MspInit+0x40>)
 8002878:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800287c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	48024000 	.word	0x48024000
 8002894:	58024400 	.word	0x58024400

08002898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b0c0      	sub	sp, #256	; 0x100
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028b4:	22b8      	movs	r2, #184	; 0xb8
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f010 fe92 	bl	80135e2 <memset>
  if(hi2c->Instance==I2C1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4abf      	ldr	r2, [pc, #764]	; (8002bc0 <HAL_I2C_MspInit+0x328>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d147      	bne.n	8002958 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80028c8:	f04f 0208 	mov.w	r2, #8
 80028cc:	f04f 0300 	mov.w	r3, #0
 80028d0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028de:	4618      	mov	r0, r3
 80028e0:	f008 fb62 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80028ea:	f7ff ff09 	bl	8002700 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ee:	4bb5      	ldr	r3, [pc, #724]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 80028f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f4:	4ab3      	ldr	r2, [pc, #716]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 80028f6:	f043 0302 	orr.w	r3, r3, #2
 80028fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028fe:	4bb1      	ldr	r3, [pc, #708]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800290c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002910:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002914:	2312      	movs	r3, #18
 8002916:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002926:	2304      	movs	r3, #4
 8002928:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800292c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002930:	4619      	mov	r1, r3
 8002932:	48a5      	ldr	r0, [pc, #660]	; (8002bc8 <HAL_I2C_MspInit+0x330>)
 8002934:	f003 fd60 	bl	80063f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002938:	4ba2      	ldr	r3, [pc, #648]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 800293a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800293e:	4aa1      	ldr	r2, [pc, #644]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002944:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002948:	4b9e      	ldr	r3, [pc, #632]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 800294a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800294e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002952:	62bb      	str	r3, [r7, #40]	; 0x28
 8002954:	6abb      	ldr	r3, [r7, #40]	; 0x28
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002956:	e12e      	b.n	8002bb6 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C2)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a9b      	ldr	r2, [pc, #620]	; (8002bcc <HAL_I2C_MspInit+0x334>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d147      	bne.n	80029f2 <HAL_I2C_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002962:	f04f 0208 	mov.w	r2, #8
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 800296e:	2300      	movs	r3, #0
 8002970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002978:	4618      	mov	r0, r3
 800297a:	f008 fb15 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8002984:	f7ff febc 	bl	8002700 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002988:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 800298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298e:	4a8d      	ldr	r2, [pc, #564]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002998:	4b8a      	ldr	r3, [pc, #552]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 800299a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ae:	2312      	movs	r3, #18
 80029b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029c0:	2304      	movs	r3, #4
 80029c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c6:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029ca:	4619      	mov	r1, r3
 80029cc:	487e      	ldr	r0, [pc, #504]	; (8002bc8 <HAL_I2C_MspInit+0x330>)
 80029ce:	f003 fd13 	bl	80063f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029d2:	4b7c      	ldr	r3, [pc, #496]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 80029d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029d8:	4a7a      	ldr	r2, [pc, #488]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 80029da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029de:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029e2:	4b78      	ldr	r3, [pc, #480]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 80029e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ec:	623b      	str	r3, [r7, #32]
 80029ee:	6a3b      	ldr	r3, [r7, #32]
}
 80029f0:	e0e1      	b.n	8002bb6 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C3)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a76      	ldr	r2, [pc, #472]	; (8002bd0 <HAL_I2C_MspInit+0x338>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d16c      	bne.n	8002ad6 <HAL_I2C_MspInit+0x23e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80029fc:	f04f 0208 	mov.w	r2, #8
 8002a00:	f04f 0300 	mov.w	r3, #0
 8002a04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a12:	4618      	mov	r0, r3
 8002a14:	f008 fac8 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_I2C_MspInit+0x18a>
      Error_Handler();
 8002a1e:	f7ff fe6f 	bl	8002700 <Error_Handler>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a22:	4b68      	ldr	r3, [pc, #416]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a28:	4a66      	ldr	r2, [pc, #408]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a32:	4b64      	ldr	r3, [pc, #400]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	61fb      	str	r3, [r7, #28]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a40:	4b60      	ldr	r3, [pc, #384]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a46:	4a5f      	ldr	r2, [pc, #380]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002a48:	f043 0304 	orr.w	r3, r3, #4
 8002a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a50:	4b5c      	ldr	r3, [pc, #368]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a56:	f003 0304 	and.w	r3, r3, #4
 8002a5a:	61bb      	str	r3, [r7, #24]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a62:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a66:	2312      	movs	r3, #18
 8002a68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a78:	2304      	movs	r3, #4
 8002a7a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a82:	4619      	mov	r1, r3
 8002a84:	4853      	ldr	r0, [pc, #332]	; (8002bd4 <HAL_I2C_MspInit+0x33c>)
 8002a86:	f003 fcb7 	bl	80063f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a92:	2312      	movs	r3, #18
 8002a94:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002aaa:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4849      	ldr	r0, [pc, #292]	; (8002bd8 <HAL_I2C_MspInit+0x340>)
 8002ab2:	f003 fca1 	bl	80063f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ab6:	4b43      	ldr	r3, [pc, #268]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002abc:	4a41      	ldr	r2, [pc, #260]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002abe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ac2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ac6:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002ac8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002acc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	697b      	ldr	r3, [r7, #20]
}
 8002ad4:	e06f      	b.n	8002bb6 <HAL_I2C_MspInit+0x31e>
  else if(hi2c->Instance==I2C4)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a40      	ldr	r2, [pc, #256]	; (8002bdc <HAL_I2C_MspInit+0x344>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d16a      	bne.n	8002bb6 <HAL_I2C_MspInit+0x31e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002ae0:	f04f 0210 	mov.w	r2, #16
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002af6:	4618      	mov	r0, r3
 8002af8:	f008 fa56 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_MspInit+0x26e>
      Error_Handler();
 8002b02:	f7ff fdfd 	bl	8002700 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b06:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0c:	4a2d      	ldr	r2, [pc, #180]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002b0e:	f043 0302 	orr.w	r3, r3, #2
 8002b12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b16:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1c:	f003 0302 	and.w	r3, r3, #2
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b24:	4b27      	ldr	r3, [pc, #156]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2a:	4a26      	ldr	r2, [pc, #152]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002b2c:	f043 0308 	orr.w	r3, r3, #8
 8002b30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b34:	4b23      	ldr	r3, [pc, #140]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b42:	2340      	movs	r3, #64	; 0x40
 8002b44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b48:	2312      	movs	r3, #18
 8002b4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C4;
 8002b5a:	2306      	movs	r3, #6
 8002b5c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b60:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b64:	4619      	mov	r1, r3
 8002b66:	4818      	ldr	r0, [pc, #96]	; (8002bc8 <HAL_I2C_MspInit+0x330>)
 8002b68:	f003 fc46 	bl	80063f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b74:	2312      	movs	r3, #18
 8002b76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8002b86:	2304      	movs	r3, #4
 8002b88:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b8c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002b90:	4619      	mov	r1, r3
 8002b92:	4813      	ldr	r0, [pc, #76]	; (8002be0 <HAL_I2C_MspInit+0x348>)
 8002b94:	f003 fc30 	bl	80063f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002b98:	4b0a      	ldr	r3, [pc, #40]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b9e:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_I2C_MspInit+0x32c>)
 8002baa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	60bb      	str	r3, [r7, #8]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
}
 8002bb6:	bf00      	nop
 8002bb8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40005400 	.word	0x40005400
 8002bc4:	58024400 	.word	0x58024400
 8002bc8:	58020400 	.word	0x58020400
 8002bcc:	40005800 	.word	0x40005800
 8002bd0:	40005c00 	.word	0x40005c00
 8002bd4:	58020000 	.word	0x58020000
 8002bd8:	58020800 	.word	0x58020800
 8002bdc:	58001c00 	.word	0x58001c00
 8002be0:	58020c00 	.word	0x58020c00

08002be4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0b2      	sub	sp, #200	; 0xc8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bec:	f107 0310 	add.w	r3, r7, #16
 8002bf0:	22b8      	movs	r2, #184	; 0xb8
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f010 fcf4 	bl	80135e2 <memset>
  if(hrng->Instance==RNG)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <HAL_RNG_MspInit+0x6c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d121      	bne.n	8002c48 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002c04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c16:	f107 0310 	add.w	r3, r7, #16
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f008 f9c4 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002c26:	f7ff fd6b 	bl	8002700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002c2a:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RNG_MspInit+0x70>)
 8002c2c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c30:	4a08      	ldr	r2, [pc, #32]	; (8002c54 <HAL_RNG_MspInit+0x70>)
 8002c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c36:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002c3a:	4b06      	ldr	r3, [pc, #24]	; (8002c54 <HAL_RNG_MspInit+0x70>)
 8002c3c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002c48:	bf00      	nop
 8002c4a:	37c8      	adds	r7, #200	; 0xc8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	48021800 	.word	0x48021800
 8002c54:	58024400 	.word	0x58024400

08002c58 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b08a      	sub	sp, #40	; 0x28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDMMC1)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a2a      	ldr	r2, [pc, #168]	; (8002d20 <HAL_MMC_MspInit+0xc8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d14d      	bne.n	8002d16 <HAL_MMC_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <HAL_MMC_MspInit+0xcc>)
 8002c7c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002c80:	4a28      	ldr	r2, [pc, #160]	; (8002d24 <HAL_MMC_MspInit+0xcc>)
 8002c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c86:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_MMC_MspInit+0xcc>)
 8002c8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c98:	4b22      	ldr	r3, [pc, #136]	; (8002d24 <HAL_MMC_MspInit+0xcc>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9e:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <HAL_MMC_MspInit+0xcc>)
 8002ca0:	f043 0308 	orr.w	r3, r3, #8
 8002ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <HAL_MMC_MspInit+0xcc>)
 8002caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_MMC_MspInit+0xcc>)
 8002cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbc:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_MMC_MspInit+0xcc>)
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cc6:	4b17      	ldr	r3, [pc, #92]	; (8002d24 <HAL_MMC_MspInit+0xcc>)
 8002cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PD2     ------> SDMMC1_CMD
    PC12     ------> SDMMC1_CK
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd8:	2302      	movs	r3, #2
 8002cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002ce4:	230c      	movs	r3, #12
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ce8:	f107 0314 	add.w	r3, r7, #20
 8002cec:	4619      	mov	r1, r3
 8002cee:	480e      	ldr	r0, [pc, #56]	; (8002d28 <HAL_MMC_MspInit+0xd0>)
 8002cf0:	f003 fb82 	bl	80063f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 8002cf4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	2303      	movs	r3, #3
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002d06:	230c      	movs	r3, #12
 8002d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4806      	ldr	r0, [pc, #24]	; (8002d2c <HAL_MMC_MspInit+0xd4>)
 8002d12:	f003 fb71 	bl	80063f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002d16:	bf00      	nop
 8002d18:	3728      	adds	r7, #40	; 0x28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	52007000 	.word	0x52007000
 8002d24:	58024400 	.word	0x58024400
 8002d28:	58020c00 	.word	0x58020c00
 8002d2c:	58020800 	.word	0x58020800

08002d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b0c8      	sub	sp, #288	; 0x120
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002d3a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d3e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d40:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	605a      	str	r2, [r3, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	60da      	str	r2, [r3, #12]
 8002d4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d54:	22b8      	movs	r2, #184	; 0xb8
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f010 fc42 	bl	80135e2 <memset>
  if(hspi->Instance==SPI1)
 8002d5e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002d62:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a98      	ldr	r2, [pc, #608]	; (8002fcc <HAL_SPI_MspInit+0x29c>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	f040 8091 	bne.w	8002e94 <HAL_SPI_MspInit+0x164>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002d72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002d7e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d86:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f008 f90c 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_SPI_MspInit+0x6a>
    {
      Error_Handler();
 8002d96:	f7ff fcb3 	bl	8002700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002d9a:	4b8d      	ldr	r3, [pc, #564]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002da0:	4a8b      	ldr	r2, [pc, #556]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002da2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002daa:	4b89      	ldr	r3, [pc, #548]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002dac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002db6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db8:	4b85      	ldr	r3, [pc, #532]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dbe:	4a84      	ldr	r2, [pc, #528]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002dc0:	f043 0302 	orr.w	r3, r3, #2
 8002dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dc8:	4b81      	ldr	r3, [pc, #516]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	4b7e      	ldr	r3, [pc, #504]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ddc:	4a7c      	ldr	r2, [pc, #496]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002de6:	4b7a      	ldr	r3, [pc, #488]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	647b      	str	r3, [r7, #68]	; 0x44
 8002df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002df4:	4b76      	ldr	r3, [pc, #472]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfa:	4a75      	ldr	r2, [pc, #468]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002dfc:	f043 0308 	orr.w	r3, r3, #8
 8002e00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e04:	4b72      	ldr	r3, [pc, #456]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	643b      	str	r3, [r7, #64]	; 0x40
 8002e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    PB4(NJTRST)     ------> SPI1_MISO
    PB3(JTDO/TRACESWO)     ------> SPI1_SCK
    PA15(JTDI)     ------> SPI1_NSS
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8002e12:	2318      	movs	r3, #24
 8002e14:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e2a:	2305      	movs	r3, #5
 8002e2c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e30:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002e34:	4619      	mov	r1, r3
 8002e36:	4867      	ldr	r0, [pc, #412]	; (8002fd4 <HAL_SPI_MspInit+0x2a4>)
 8002e38:	f003 fade 	bl	80063f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e40:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e44:	2302      	movs	r3, #2
 8002e46:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e50:	2300      	movs	r3, #0
 8002e52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e56:	2305      	movs	r3, #5
 8002e58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e5c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002e60:	4619      	mov	r1, r3
 8002e62:	485d      	ldr	r0, [pc, #372]	; (8002fd8 <HAL_SPI_MspInit+0x2a8>)
 8002e64:	f003 fac8 	bl	80063f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002e80:	2305      	movs	r3, #5
 8002e82:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e86:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4853      	ldr	r0, [pc, #332]	; (8002fdc <HAL_SPI_MspInit+0x2ac>)
 8002e8e:	f003 fab3 	bl	80063f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI6_MspInit 1 */

  /* USER CODE END SPI6_MspInit 1 */
  }

}
 8002e92:	e24d      	b.n	8003330 <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI2)
 8002e94:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002e98:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a4f      	ldr	r2, [pc, #316]	; (8002fe0 <HAL_SPI_MspInit+0x2b0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	f040 80a0 	bne.w	8002fe8 <HAL_SPI_MspInit+0x2b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8002ea8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eac:	f04f 0300 	mov.w	r3, #0
 8002eb0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8002eb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ebc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f008 f871 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_SPI_MspInit+0x1a0>
      Error_Handler();
 8002ecc:	f7ff fc18 	bl	8002700 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ed0:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002ed2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed6:	4a3e      	ldr	r2, [pc, #248]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002ee2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	4b38      	ldr	r3, [pc, #224]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef4:	4a36      	ldr	r2, [pc, #216]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002efe:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f0c:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f12:	4a2f      	ldr	r2, [pc, #188]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002f14:	f043 0308 	orr.w	r3, r3, #8
 8002f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2a:	4b29      	ldr	r3, [pc, #164]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f30:	4a27      	ldr	r2, [pc, #156]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f3a:	4b25      	ldr	r3, [pc, #148]	; (8002fd0 <HAL_SPI_MspInit+0x2a0>)
 8002f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f40:	f003 0304 	and.w	r3, r3, #4
 8002f44:	633b      	str	r3, [r7, #48]	; 0x30
 8002f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f62:	2305      	movs	r3, #5
 8002f64:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f68:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4819      	ldr	r0, [pc, #100]	; (8002fd4 <HAL_SPI_MspInit+0x2a4>)
 8002f70:	f003 fa42 	bl	80063f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f74:	2308      	movs	r3, #8
 8002f76:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f8c:	2305      	movs	r3, #5
 8002f8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f92:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002f96:	4619      	mov	r1, r3
 8002f98:	4810      	ldr	r0, [pc, #64]	; (8002fdc <HAL_SPI_MspInit+0x2ac>)
 8002f9a:	f003 fa2d 	bl	80063f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fbc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <HAL_SPI_MspInit+0x2b4>)
 8002fc4:	f003 fa18 	bl	80063f8 <HAL_GPIO_Init>
}
 8002fc8:	e1b2      	b.n	8003330 <HAL_SPI_MspInit+0x600>
 8002fca:	bf00      	nop
 8002fcc:	40013000 	.word	0x40013000
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	58020400 	.word	0x58020400
 8002fd8:	58020000 	.word	0x58020000
 8002fdc:	58020c00 	.word	0x58020c00
 8002fe0:	40003800 	.word	0x40003800
 8002fe4:	58020800 	.word	0x58020800
  else if(hspi->Instance==SPI3)
 8002fe8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002fec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4ad1      	ldr	r2, [pc, #836]	; (800333c <HAL_SPI_MspInit+0x60c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	f040 8099 	bne.w	800312e <HAL_SPI_MspInit+0x3fe>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002ffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8003008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800300c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003010:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003014:	4618      	mov	r0, r3
 8003016:	f007 ffc7 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_SPI_MspInit+0x2f4>
      Error_Handler();
 8003020:	f7ff fb6e 	bl	8002700 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003024:	4bc6      	ldr	r3, [pc, #792]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800302a:	4ac5      	ldr	r2, [pc, #788]	; (8003340 <HAL_SPI_MspInit+0x610>)
 800302c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003030:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003034:	4bc2      	ldr	r3, [pc, #776]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800303a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800303e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003042:	4bbf      	ldr	r3, [pc, #764]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003044:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003048:	4abd      	ldr	r2, [pc, #756]	; (8003340 <HAL_SPI_MspInit+0x610>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003052:	4bbb      	ldr	r3, [pc, #748]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003060:	4bb7      	ldr	r3, [pc, #732]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003066:	4ab6      	ldr	r2, [pc, #728]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003068:	f043 0308 	orr.w	r3, r3, #8
 800306c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003070:	4bb3      	ldr	r3, [pc, #716]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	627b      	str	r3, [r7, #36]	; 0x24
 800307c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800307e:	4bb0      	ldr	r3, [pc, #704]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003084:	4aae      	ldr	r2, [pc, #696]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800308e:	4bac      	ldr	r3, [pc, #688]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003094:	f003 0201 	and.w	r2, r3, #1
 8003098:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800309c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80030a6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80030aa:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80030ac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80030b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b4:	2302      	movs	r3, #2
 80030b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80030c6:	2306      	movs	r3, #6
 80030c8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030cc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80030d0:	4619      	mov	r1, r3
 80030d2:	489c      	ldr	r0, [pc, #624]	; (8003344 <HAL_SPI_MspInit+0x614>)
 80030d4:	f003 f990 	bl	80063f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80030d8:	2340      	movs	r3, #64	; 0x40
 80030da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 80030f0:	2305      	movs	r3, #5
 80030f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80030fa:	4619      	mov	r1, r3
 80030fc:	4892      	ldr	r0, [pc, #584]	; (8003348 <HAL_SPI_MspInit+0x618>)
 80030fe:	f003 f97b 	bl	80063f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003102:	2310      	movs	r3, #16
 8003104:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003108:	2302      	movs	r3, #2
 800310a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	2300      	movs	r3, #0
 8003116:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800311a:	2306      	movs	r3, #6
 800311c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003124:	4619      	mov	r1, r3
 8003126:	4889      	ldr	r0, [pc, #548]	; (800334c <HAL_SPI_MspInit+0x61c>)
 8003128:	f003 f966 	bl	80063f8 <HAL_GPIO_Init>
}
 800312c:	e100      	b.n	8003330 <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI4)
 800312e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003132:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a85      	ldr	r2, [pc, #532]	; (8003350 <HAL_SPI_MspInit+0x620>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d156      	bne.n	80031ee <HAL_SPI_MspInit+0x4be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8003140:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003152:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003156:	4618      	mov	r0, r3
 8003158:	f007 ff26 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_SPI_MspInit+0x436>
      Error_Handler();
 8003162:	f7ff facd 	bl	8002700 <Error_Handler>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003166:	4b76      	ldr	r3, [pc, #472]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800316c:	4a74      	ldr	r2, [pc, #464]	; (8003340 <HAL_SPI_MspInit+0x610>)
 800316e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003172:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003176:	4b72      	ldr	r3, [pc, #456]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003178:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800317c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003180:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003184:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800318e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003192:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003194:	4b6a      	ldr	r3, [pc, #424]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800319a:	4a69      	ldr	r2, [pc, #420]	; (8003340 <HAL_SPI_MspInit+0x610>)
 800319c:	f043 0310 	orr.w	r3, r3, #16
 80031a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a4:	4b66      	ldr	r3, [pc, #408]	; (8003340 <HAL_SPI_MspInit+0x610>)
 80031a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031aa:	f003 0210 	and.w	r2, r3, #16
 80031ae:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80031b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80031bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031c0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80031c2:	2374      	movs	r3, #116	; 0x74
 80031c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c8:	2302      	movs	r3, #2
 80031ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80031da:	2305      	movs	r3, #5
 80031dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031e0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80031e4:	4619      	mov	r1, r3
 80031e6:	485b      	ldr	r0, [pc, #364]	; (8003354 <HAL_SPI_MspInit+0x624>)
 80031e8:	f003 f906 	bl	80063f8 <HAL_GPIO_Init>
}
 80031ec:	e0a0      	b.n	8003330 <HAL_SPI_MspInit+0x600>
  else if(hspi->Instance==SPI6)
 80031ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80031f2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a57      	ldr	r2, [pc, #348]	; (8003358 <HAL_SPI_MspInit+0x628>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	f040 8097 	bne.w	8003330 <HAL_SPI_MspInit+0x600>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI6;
 8003202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.Spi6ClockSelection = RCC_SPI6CLKSOURCE_D3PCLK1;
 800320e:	2300      	movs	r3, #0
 8003210:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003214:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003218:	4618      	mov	r0, r3
 800321a:	f007 fec5 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <HAL_SPI_MspInit+0x4f8>
      Error_Handler();
 8003224:	f7ff fa6c 	bl	8002700 <Error_Handler>
    __HAL_RCC_SPI6_CLK_ENABLE();
 8003228:	4b45      	ldr	r3, [pc, #276]	; (8003340 <HAL_SPI_MspInit+0x610>)
 800322a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800322e:	4a44      	ldr	r2, [pc, #272]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003230:	f043 0320 	orr.w	r3, r3, #32
 8003234:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003238:	4b41      	ldr	r3, [pc, #260]	; (8003340 <HAL_SPI_MspInit+0x610>)
 800323a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800323e:	f003 0220 	and.w	r2, r3, #32
 8003242:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003246:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003250:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003254:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003256:	4b3a      	ldr	r3, [pc, #232]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800325c:	4a38      	ldr	r2, [pc, #224]	; (8003340 <HAL_SPI_MspInit+0x610>)
 800325e:	f043 0302 	orr.w	r3, r3, #2
 8003262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003266:	4b36      	ldr	r3, [pc, #216]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800326c:	f003 0202 	and.w	r2, r3, #2
 8003270:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8003274:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003278:	601a      	str	r2, [r3, #0]
 800327a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800327e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003282:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003284:	4b2e      	ldr	r3, [pc, #184]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800328a:	4a2d      	ldr	r2, [pc, #180]	; (8003340 <HAL_SPI_MspInit+0x610>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003294:	4b2a      	ldr	r3, [pc, #168]	; (8003340 <HAL_SPI_MspInit+0x610>)
 8003296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329a:	f003 0201 	and.w	r2, r3, #1
 800329e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80032a2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80032ac:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80032b0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80032b2:	2320      	movs	r3, #32
 80032b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 80032ca:	2308      	movs	r3, #8
 80032cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80032d4:	4619      	mov	r1, r3
 80032d6:	4821      	ldr	r0, [pc, #132]	; (800335c <HAL_SPI_MspInit+0x62c>)
 80032d8:	f003 f88e 	bl	80063f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80032dc:	2301      	movs	r3, #1
 80032de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ee:	2300      	movs	r3, #0
 80032f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI6;
 80032f4:	2305      	movs	r3, #5
 80032f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fa:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80032fe:	4619      	mov	r1, r3
 8003300:	4812      	ldr	r0, [pc, #72]	; (800334c <HAL_SPI_MspInit+0x61c>)
 8003302:	f003 f879 	bl	80063f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003306:	2360      	movs	r3, #96	; 0x60
 8003308:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2302      	movs	r3, #2
 800330e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    GPIO_InitStruct.Alternate = GPIO_AF8_SPI6;
 800331e:	2308      	movs	r3, #8
 8003320:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003324:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003328:	4619      	mov	r1, r3
 800332a:	4808      	ldr	r0, [pc, #32]	; (800334c <HAL_SPI_MspInit+0x61c>)
 800332c:	f003 f864 	bl	80063f8 <HAL_GPIO_Init>
}
 8003330:	bf00      	nop
 8003332:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	40003c00 	.word	0x40003c00
 8003340:	58024400 	.word	0x58024400
 8003344:	58020800 	.word	0x58020800
 8003348:	58020c00 	.word	0x58020c00
 800334c:	58020000 	.word	0x58020000
 8003350:	40013400 	.word	0x40013400
 8003354:	58021000 	.word	0x58021000
 8003358:	58001400 	.word	0x58001400
 800335c:	58020400 	.word	0x58020400

08003360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b0b8      	sub	sp, #224	; 0xe0
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003378:	f107 0310 	add.w	r3, r7, #16
 800337c:	22b8      	movs	r2, #184	; 0xb8
 800337e:	2100      	movs	r1, #0
 8003380:	4618      	mov	r0, r3
 8003382:	f010 f92e 	bl	80135e2 <memset>
  if(huart->Instance==USART2)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a26      	ldr	r2, [pc, #152]	; (8003424 <HAL_UART_MspInit+0xc4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d145      	bne.n	800341c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003390:	f04f 0202 	mov.w	r2, #2
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800339c:	2300      	movs	r3, #0
 800339e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033a2:	f107 0310 	add.w	r3, r7, #16
 80033a6:	4618      	mov	r0, r3
 80033a8:	f007 fdfe 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80033b2:	f7ff f9a5 	bl	8002700 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033b6:	4b1c      	ldr	r3, [pc, #112]	; (8003428 <HAL_UART_MspInit+0xc8>)
 80033b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033bc:	4a1a      	ldr	r2, [pc, #104]	; (8003428 <HAL_UART_MspInit+0xc8>)
 80033be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033c6:	4b18      	ldr	r3, [pc, #96]	; (8003428 <HAL_UART_MspInit+0xc8>)
 80033c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <HAL_UART_MspInit+0xc8>)
 80033d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033da:	4a13      	ldr	r2, [pc, #76]	; (8003428 <HAL_UART_MspInit+0xc8>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033e4:	4b10      	ldr	r3, [pc, #64]	; (8003428 <HAL_UART_MspInit+0xc8>)
 80033e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033f2:	230c      	movs	r3, #12
 80033f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003404:	2300      	movs	r3, #0
 8003406:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800340a:	2307      	movs	r3, #7
 800340c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003410:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003414:	4619      	mov	r1, r3
 8003416:	4805      	ldr	r0, [pc, #20]	; (800342c <HAL_UART_MspInit+0xcc>)
 8003418:	f002 ffee 	bl	80063f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800341c:	bf00      	nop
 800341e:	37e0      	adds	r7, #224	; 0xe0
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40004400 	.word	0x40004400
 8003428:	58024400 	.word	0x58024400
 800342c:	58020000 	.word	0x58020000

08003430 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b0b2      	sub	sp, #200	; 0xc8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003438:	f107 0310 	add.w	r3, r7, #16
 800343c:	22b8      	movs	r2, #184	; 0xb8
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f010 f8ce 	bl	80135e2 <memset>
  if(hpcd->Instance==USB_OTG_HS)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a16      	ldr	r2, [pc, #88]	; (80034a4 <HAL_PCD_MspInit+0x74>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d124      	bne.n	800349a <HAL_PCD_MspInit+0x6a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003450:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003454:	f04f 0300 	mov.w	r3, #0
 8003458:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800345c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8003460:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003464:	f107 0310 	add.w	r3, r7, #16
 8003468:	4618      	mov	r0, r3
 800346a:	f007 fd9d 	bl	800afa8 <HAL_RCCEx_PeriphCLKConfig>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8003474:	f7ff f944 	bl	8002700 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003478:	f006 fe20 	bl	800a0bc <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <HAL_PCD_MspInit+0x78>)
 800347e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003482:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_PCD_MspInit+0x78>)
 8003484:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003488:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_PCD_MspInit+0x78>)
 800348e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 800349a:	bf00      	nop
 800349c:	37c8      	adds	r7, #200	; 0xc8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40040000 	.word	0x40040000
 80034a8:	58024400 	.word	0x58024400

080034ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034b0:	e7fe      	b.n	80034b0 <NMI_Handler+0x4>

080034b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b6:	e7fe      	b.n	80034b6 <HardFault_Handler+0x4>

080034b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034bc:	e7fe      	b.n	80034bc <MemManage_Handler+0x4>

080034be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <BusFault_Handler+0x4>

080034c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <UsageFault_Handler+0x4>

080034ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034ce:	bf00      	nop
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034f8:	f000 faa0 	bl	8003a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034fc:	bf00      	nop
 80034fe:	bd80      	pop	{r7, pc}

08003500 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  return 1;
 8003504:	2301      	movs	r3, #1
}
 8003506:	4618      	mov	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <_kill>:

int _kill(int pid, int sig)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800351a:	f010 f8c5 	bl	80136a8 <__errno>
 800351e:	4603      	mov	r3, r0
 8003520:	2216      	movs	r2, #22
 8003522:	601a      	str	r2, [r3, #0]
  return -1;
 8003524:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003528:	4618      	mov	r0, r3
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <_exit>:

void _exit (int status)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003538:	f04f 31ff 	mov.w	r1, #4294967295
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f7ff ffe7 	bl	8003510 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003542:	e7fe      	b.n	8003542 <_exit+0x12>

08003544 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003550:	2300      	movs	r3, #0
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e00a      	b.n	800356c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003556:	f3af 8000 	nop.w
 800355a:	4601      	mov	r1, r0
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	60ba      	str	r2, [r7, #8]
 8003562:	b2ca      	uxtb	r2, r1
 8003564:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	429a      	cmp	r2, r3
 8003572:	dbf0      	blt.n	8003556 <_read+0x12>
  }

  return len;
 8003574:	687b      	ldr	r3, [r7, #4]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	60f8      	str	r0, [r7, #12]
 8003586:	60b9      	str	r1, [r7, #8]
 8003588:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	e009      	b.n	80035a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	60ba      	str	r2, [r7, #8]
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	3301      	adds	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	dbf1      	blt.n	8003590 <_write+0x12>
  }
  return len;
 80035ac:	687b      	ldr	r3, [r7, #4]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3718      	adds	r7, #24
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_close>:

int _close(int file)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035de:	605a      	str	r2, [r3, #4]
  return 0;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_isatty>:

int _isatty(int file)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035f6:	2301      	movs	r3, #1
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
	...

08003620 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003628:	4a14      	ldr	r2, [pc, #80]	; (800367c <_sbrk+0x5c>)
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <_sbrk+0x60>)
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003634:	4b13      	ldr	r3, [pc, #76]	; (8003684 <_sbrk+0x64>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800363c:	4b11      	ldr	r3, [pc, #68]	; (8003684 <_sbrk+0x64>)
 800363e:	4a12      	ldr	r2, [pc, #72]	; (8003688 <_sbrk+0x68>)
 8003640:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <_sbrk+0x64>)
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	429a      	cmp	r2, r3
 800364e:	d207      	bcs.n	8003660 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003650:	f010 f82a 	bl	80136a8 <__errno>
 8003654:	4603      	mov	r3, r0
 8003656:	220c      	movs	r2, #12
 8003658:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800365a:	f04f 33ff 	mov.w	r3, #4294967295
 800365e:	e009      	b.n	8003674 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003660:	4b08      	ldr	r3, [pc, #32]	; (8003684 <_sbrk+0x64>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	4a05      	ldr	r2, [pc, #20]	; (8003684 <_sbrk+0x64>)
 8003670:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003672:	68fb      	ldr	r3, [r7, #12]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	24050000 	.word	0x24050000
 8003680:	00000400 	.word	0x00000400
 8003684:	240011bc 	.word	0x240011bc
 8003688:	24001350 	.word	0x24001350

0800368c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <SystemInit+0xd0>)
 8003692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003696:	4a31      	ldr	r2, [pc, #196]	; (800375c <SystemInit+0xd0>)
 8003698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800369c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036a0:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <SystemInit+0xd4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d807      	bhi.n	80036bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80036ac:	4b2c      	ldr	r3, [pc, #176]	; (8003760 <SystemInit+0xd4>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f023 030f 	bic.w	r3, r3, #15
 80036b4:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <SystemInit+0xd4>)
 80036b6:	f043 0307 	orr.w	r3, r3, #7
 80036ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80036bc:	4b29      	ldr	r3, [pc, #164]	; (8003764 <SystemInit+0xd8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a28      	ldr	r2, [pc, #160]	; (8003764 <SystemInit+0xd8>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80036c8:	4b26      	ldr	r3, [pc, #152]	; (8003764 <SystemInit+0xd8>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80036ce:	4b25      	ldr	r3, [pc, #148]	; (8003764 <SystemInit+0xd8>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	4924      	ldr	r1, [pc, #144]	; (8003764 <SystemInit+0xd8>)
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <SystemInit+0xdc>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80036da:	4b21      	ldr	r3, [pc, #132]	; (8003760 <SystemInit+0xd4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d007      	beq.n	80036f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80036e6:	4b1e      	ldr	r3, [pc, #120]	; (8003760 <SystemInit+0xd4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f023 030f 	bic.w	r3, r3, #15
 80036ee:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <SystemInit+0xd4>)
 80036f0:	f043 0307 	orr.w	r3, r3, #7
 80036f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80036f6:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <SystemInit+0xd8>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <SystemInit+0xd8>)
 80036fe:	2200      	movs	r2, #0
 8003700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003702:	4b18      	ldr	r3, [pc, #96]	; (8003764 <SystemInit+0xd8>)
 8003704:	2200      	movs	r2, #0
 8003706:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <SystemInit+0xd8>)
 800370a:	4a18      	ldr	r2, [pc, #96]	; (800376c <SystemInit+0xe0>)
 800370c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <SystemInit+0xd8>)
 8003710:	4a17      	ldr	r2, [pc, #92]	; (8003770 <SystemInit+0xe4>)
 8003712:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <SystemInit+0xd8>)
 8003716:	4a17      	ldr	r2, [pc, #92]	; (8003774 <SystemInit+0xe8>)
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <SystemInit+0xd8>)
 800371c:	2200      	movs	r2, #0
 800371e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003720:	4b10      	ldr	r3, [pc, #64]	; (8003764 <SystemInit+0xd8>)
 8003722:	4a14      	ldr	r2, [pc, #80]	; (8003774 <SystemInit+0xe8>)
 8003724:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <SystemInit+0xd8>)
 8003728:	2200      	movs	r2, #0
 800372a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <SystemInit+0xd8>)
 800372e:	4a11      	ldr	r2, [pc, #68]	; (8003774 <SystemInit+0xe8>)
 8003730:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <SystemInit+0xd8>)
 8003734:	2200      	movs	r2, #0
 8003736:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <SystemInit+0xd8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a09      	ldr	r2, [pc, #36]	; (8003764 <SystemInit+0xd8>)
 800373e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <SystemInit+0xd8>)
 8003746:	2200      	movs	r2, #0
 8003748:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <SystemInit+0xec>)
 800374c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003750:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000ed00 	.word	0xe000ed00
 8003760:	52002000 	.word	0x52002000
 8003764:	58024400 	.word	0x58024400
 8003768:	eaf6ed7f 	.word	0xeaf6ed7f
 800376c:	02020200 	.word	0x02020200
 8003770:	01ff0000 	.word	0x01ff0000
 8003774:	01010280 	.word	0x01010280
 8003778:	52004000 	.word	0x52004000

0800377c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800377c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003780:	f7ff ff84 	bl	800368c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003784:	480c      	ldr	r0, [pc, #48]	; (80037b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003786:	490d      	ldr	r1, [pc, #52]	; (80037bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800378a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800378c:	e002      	b.n	8003794 <LoopCopyDataInit>

0800378e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800378e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003792:	3304      	adds	r3, #4

08003794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003798:	d3f9      	bcc.n	800378e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800379a:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800379c:	4c0a      	ldr	r4, [pc, #40]	; (80037c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800379e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a0:	e001      	b.n	80037a6 <LoopFillZerobss>

080037a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a4:	3204      	adds	r2, #4

080037a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037a8:	d3fb      	bcc.n	80037a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037aa:	f00f ff83 	bl	80136b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ae:	f7fe f883 	bl	80018b8 <main>
  bx  lr
 80037b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80037b4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80037b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80037bc:	240001fc 	.word	0x240001fc
  ldr r2, =_sidata
 80037c0:	08015cf4 	.word	0x08015cf4
  ldr r2, =_sbss
 80037c4:	24000200 	.word	0x24000200
  ldr r4, =_ebss
 80037c8:	24001350 	.word	0x24001350

080037cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037cc:	e7fe      	b.n	80037cc <ADC3_IRQHandler>

080037ce <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b082      	sub	sp, #8
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d104      	bne.n	80037e6 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80037dc:	b672      	cpsid	i
}
 80037de:	bf00      	nop
 80037e0:	f7fe ff8e 	bl	8002700 <Error_Handler>
 80037e4:	e7fe      	b.n	80037e4 <stm32_lock_init+0x16>
  lock->flag = 0;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	705a      	strb	r2, [r3, #1]
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b084      	sub	sp, #16
 80037fe:	af00      	add	r7, sp, #0
 8003800:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003802:	f3ef 8310 	mrs	r3, PRIMASK
 8003806:	60bb      	str	r3, [r7, #8]
  return(result);
 8003808:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8003812:	b672      	cpsid	i
}
 8003814:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003816:	f3bf 8f4f 	dsb	sy
}
 800381a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800381c:	f3bf 8f6f 	isb	sy
}
 8003820:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d104      	bne.n	8003832 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8003828:	b672      	cpsid	i
}
 800382a:	bf00      	nop
 800382c:	f7fe ff68 	bl	8002700 <Error_Handler>
 8003830:	e7fe      	b.n	8003830 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	785b      	ldrb	r3, [r3, #1]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d103      	bne.n	8003842 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	7bfa      	ldrb	r2, [r7, #15]
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	e008      	b.n	8003854 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	785b      	ldrb	r3, [r3, #1]
 8003846:	2bff      	cmp	r3, #255	; 0xff
 8003848:	d104      	bne.n	8003854 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 800384a:	b672      	cpsid	i
}
 800384c:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800384e:	f7fe ff57 	bl	8002700 <Error_Handler>
 8003852:	e7fe      	b.n	8003852 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	785b      	ldrb	r3, [r3, #1]
 8003858:	3301      	adds	r3, #1
 800385a:	b2da      	uxtb	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	705a      	strb	r2, [r3, #1]
}
 8003860:	bf00      	nop
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d104      	bne.n	8003880 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003876:	b672      	cpsid	i
}
 8003878:	bf00      	nop
 800387a:	f7fe ff41 	bl	8002700 <Error_Handler>
 800387e:	e7fe      	b.n	800387e <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d104      	bne.n	8003892 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003888:	b672      	cpsid	i
}
 800388a:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800388c:	f7fe ff38 	bl	8002700 <Error_Handler>
 8003890:	e7fe      	b.n	8003890 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	785b      	ldrb	r3, [r3, #1]
 8003896:	3b01      	subs	r3, #1
 8003898:	b2da      	uxtb	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	785b      	ldrb	r3, [r3, #1]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <stm32_lock_release+0x4a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 80038ae:	b662      	cpsie	i
}
 80038b0:	bf00      	nop
  {
    __enable_irq();
  }
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 80038c8:	f00f feee 	bl	80136a8 <__errno>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2216      	movs	r2, #22
 80038d0:	601a      	str	r2, [r3, #0]
    return;
 80038d2:	e015      	b.n	8003900 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80038d4:	2002      	movs	r0, #2
 80038d6:	f00f f849 	bl	801296c <malloc>
 80038da:	4603      	mov	r3, r0
 80038dc:	461a      	mov	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff ff6d 	bl	80037ce <stm32_lock_init>
    return;
 80038f4:	e004      	b.n	8003900 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 80038f6:	b672      	cpsid	i
}
 80038f8:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 80038fa:	f7fe ff01 	bl	8002700 <Error_Handler>
 80038fe:	e7fe      	b.n	80038fe <__retarget_lock_init_recursive+0x44>
}
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d104      	bne.n	800391e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003914:	b672      	cpsid	i
}
 8003916:	bf00      	nop
 8003918:	f7fe fef2 	bl	8002700 <Error_Handler>
 800391c:	e7fe      	b.n	800391c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff6a 	bl	80037fa <stm32_lock_acquire>
}
 8003926:	bf00      	nop
 8003928:	3708      	adds	r7, #8
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d104      	bne.n	8003946 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800393c:	b672      	cpsid	i
}
 800393e:	bf00      	nop
 8003940:	f7fe fede 	bl	8002700 <Error_Handler>
 8003944:	e7fe      	b.n	8003944 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff ff8d 	bl	8003868 <stm32_lock_release>
}
 800394e:	bf00      	nop
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800395e:	2003      	movs	r0, #3
 8003960:	f001 fd04 	bl	800536c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003964:	f007 f94a 	bl	800abfc <HAL_RCC_GetSysClockFreq>
 8003968:	4602      	mov	r2, r0
 800396a:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <HAL_Init+0x68>)
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	0a1b      	lsrs	r3, r3, #8
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	4913      	ldr	r1, [pc, #76]	; (80039c4 <HAL_Init+0x6c>)
 8003976:	5ccb      	ldrb	r3, [r1, r3]
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	fa22 f303 	lsr.w	r3, r2, r3
 8003980:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <HAL_Init+0x68>)
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	4a0e      	ldr	r2, [pc, #56]	; (80039c4 <HAL_Init+0x6c>)
 800398c:	5cd3      	ldrb	r3, [r2, r3]
 800398e:	f003 031f 	and.w	r3, r3, #31
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
 8003998:	4a0b      	ldr	r2, [pc, #44]	; (80039c8 <HAL_Init+0x70>)
 800399a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800399c:	4a0b      	ldr	r2, [pc, #44]	; (80039cc <HAL_Init+0x74>)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039a2:	200f      	movs	r0, #15
 80039a4:	f000 f814 	bl	80039d0 <HAL_InitTick>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e002      	b.n	80039b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039b2:	f7fe feab 	bl	800270c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	58024400 	.word	0x58024400
 80039c4:	08015644 	.word	0x08015644
 80039c8:	24000014 	.word	0x24000014
 80039cc:	24000010 	.word	0x24000010

080039d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80039d8:	4b15      	ldr	r3, [pc, #84]	; (8003a30 <HAL_InitTick+0x60>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e021      	b.n	8003a28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80039e4:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <HAL_InitTick+0x64>)
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <HAL_InitTick+0x60>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	4619      	mov	r1, r3
 80039ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	4618      	mov	r0, r3
 80039fc:	f001 fcdb 	bl	80053b6 <HAL_SYSTICK_Config>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e00e      	b.n	8003a28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2b0f      	cmp	r3, #15
 8003a0e:	d80a      	bhi.n	8003a26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a10:	2200      	movs	r2, #0
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	f04f 30ff 	mov.w	r0, #4294967295
 8003a18:	f001 fcb3 	bl	8005382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a1c:	4a06      	ldr	r2, [pc, #24]	; (8003a38 <HAL_InitTick+0x68>)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e000      	b.n	8003a28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3708      	adds	r7, #8
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	2400001c 	.word	0x2400001c
 8003a34:	24000010 	.word	0x24000010
 8003a38:	24000018 	.word	0x24000018

08003a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a40:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_IncTick+0x20>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_IncTick+0x24>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	4a04      	ldr	r2, [pc, #16]	; (8003a60 <HAL_IncTick+0x24>)
 8003a4e:	6013      	str	r3, [r2, #0]
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	2400001c 	.word	0x2400001c
 8003a60:	240011c8 	.word	0x240011c8

08003a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  return uwTick;
 8003a68:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <HAL_GetTick+0x14>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	240011c8 	.word	0x240011c8

08003a7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a84:	f7ff ffee 	bl	8003a64 <HAL_GetTick>
 8003a88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a94:	d005      	beq.n	8003aa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a96:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <HAL_Delay+0x44>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003aa2:	bf00      	nop
 8003aa4:	f7ff ffde 	bl	8003a64 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d8f7      	bhi.n	8003aa4 <HAL_Delay+0x28>
  {
  }
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	2400001c 	.word	0x2400001c

08003ac4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	609a      	str	r2, [r3, #8]
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr

08003aea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003aea:	b480      	push	{r7}
 8003aec:	b083      	sub	sp, #12
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
 8003af2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	609a      	str	r2, [r3, #8]
}
 8003b04:	bf00      	nop
 8003b06:	370c      	adds	r7, #12
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b087      	sub	sp, #28
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	3360      	adds	r3, #96	; 0x60
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a10      	ldr	r2, [pc, #64]	; (8003b8c <LL_ADC_SetOffset+0x60>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10b      	bne.n	8003b68 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003b66:	e00b      	b.n	8003b80 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	601a      	str	r2, [r3, #0]
}
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	58026000 	.word	0x58026000

08003b90 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3360      	adds	r3, #96	; 0x60
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr

08003bbc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	611a      	str	r2, [r3, #16]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d00e      	beq.n	8003c22 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3360      	adds	r3, #96	; 0x60
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	601a      	str	r2, [r3, #0]
  }
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	58026000 	.word	0x58026000

08003c34 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4a0c      	ldr	r2, [pc, #48]	; (8003c74 <LL_ADC_SetOffsetSaturation+0x40>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10e      	bne.n	8003c66 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3360      	adds	r3, #96	; 0x60
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	431a      	orrs	r2, r3
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	58026000 	.word	0x58026000

08003c78 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4a0c      	ldr	r2, [pc, #48]	; (8003cb8 <LL_ADC_SetOffsetSign+0x40>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d10e      	bne.n	8003caa <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3360      	adds	r3, #96	; 0x60
 8003c90:	461a      	mov	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4413      	add	r3, r2
 8003c98:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	431a      	orrs	r2, r3
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003caa:	bf00      	nop
 8003cac:	371c      	adds	r7, #28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	58026000 	.word	0x58026000

08003cbc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3360      	adds	r3, #96	; 0x60
 8003ccc:	461a      	mov	r2, r3
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4a0c      	ldr	r2, [pc, #48]	; (8003d0c <LL_ADC_SetOffsetState+0x50>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d108      	bne.n	8003cf0 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	431a      	orrs	r2, r3
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003cee:	e007      	b.n	8003d00 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	601a      	str	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	371c      	adds	r7, #28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	58026000 	.word	0x58026000

08003d10 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	3330      	adds	r3, #48	; 0x30
 8003d20:	461a      	mov	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	0a1b      	lsrs	r3, r3, #8
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	f003 030c 	and.w	r3, r3, #12
 8003d2c:	4413      	add	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 031f 	and.w	r3, r3, #31
 8003d3a:	211f      	movs	r1, #31
 8003d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	401a      	ands	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	0e9b      	lsrs	r3, r3, #26
 8003d48:	f003 011f 	and.w	r1, r3, #31
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	fa01 f303 	lsl.w	r3, r1, r3
 8003d56:	431a      	orrs	r2, r3
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3314      	adds	r3, #20
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	0e5b      	lsrs	r3, r3, #25
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	4413      	add	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	0d1b      	lsrs	r3, r3, #20
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	2107      	movs	r1, #7
 8003d96:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	401a      	ands	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	0d1b      	lsrs	r3, r3, #20
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	431a      	orrs	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
	...

08003dc0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4a1a      	ldr	r2, [pc, #104]	; (8003e38 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d115      	bne.n	8003e00 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003de0:	43db      	mvns	r3, r3
 8003de2:	401a      	ands	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f003 0318 	and.w	r3, r3, #24
 8003dea:	4914      	ldr	r1, [pc, #80]	; (8003e3c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003dec:	40d9      	lsrs	r1, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	400b      	ands	r3, r1
 8003df2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df6:	431a      	orrs	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003dfe:	e014      	b.n	8003e2a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	401a      	ands	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f003 0318 	and.w	r3, r3, #24
 8003e16:	4909      	ldr	r1, [pc, #36]	; (8003e3c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e18:	40d9      	lsrs	r1, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	400b      	ands	r3, r1
 8003e1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e22:	431a      	orrs	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e2a:	bf00      	nop
 8003e2c:	3714      	adds	r7, #20
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	58026000 	.word	0x58026000
 8003e3c:	000fffff 	.word	0x000fffff

08003e40 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	4b04      	ldr	r3, [pc, #16]	; (8003e60 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6093      	str	r3, [r2, #8]
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	5fffffc0 	.word	0x5fffffc0

08003e64 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e78:	d101      	bne.n	8003e7e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ea4:	bf00      	nop
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	6fffffc0 	.word	0x6fffffc0

08003eb4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ec8:	d101      	bne.n	8003ece <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0301 	and.w	r3, r3, #1
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d101      	bne.n	8003ef4 <LL_ADC_IsEnabled+0x18>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <LL_ADC_IsEnabled+0x1a>
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d101      	bne.n	8003f1a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f1a:	2300      	movs	r3, #0
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d101      	bne.n	8003f40 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
	...

08003f50 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f50:	b590      	push	{r4, r7, lr}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1ee      	b.n	8004348 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d109      	bne.n	8003f8c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fe fbe1 	bl	8002740 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7ff ff67 	bl	8003e64 <LL_ADC_IsDeepPowerDownEnabled>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff4d 	bl	8003e40 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff ff82 	bl	8003eb4 <LL_ADC_IsInternalRegulatorEnabled>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d114      	bne.n	8003fe0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff ff66 	bl	8003e8c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fc0:	4b8e      	ldr	r3, [pc, #568]	; (80041fc <HAL_ADC_Init+0x2ac>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	099b      	lsrs	r3, r3, #6
 8003fc6:	4a8e      	ldr	r2, [pc, #568]	; (8004200 <HAL_ADC_Init+0x2b0>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	099b      	lsrs	r3, r3, #6
 8003fce:	3301      	adds	r3, #1
 8003fd0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fd2:	e002      	b.n	8003fda <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1f9      	bne.n	8003fd4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff65 	bl	8003eb4 <LL_ADC_IsInternalRegulatorEnabled>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10d      	bne.n	800400c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff4:	f043 0210 	orr.w	r2, r3, #16
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004000:	f043 0201 	orr.w	r2, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff76 	bl	8003f02 <LL_ADC_REG_IsConversionOngoing>
 8004016:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	f040 8188 	bne.w	8004336 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f040 8184 	bne.w	8004336 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004032:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004036:	f043 0202 	orr.w	r2, r3, #2
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff ff4a 	bl	8003edc <LL_ADC_IsEnabled>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d136      	bne.n	80040bc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a6c      	ldr	r2, [pc, #432]	; (8004204 <HAL_ADC_Init+0x2b4>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d004      	beq.n	8004062 <HAL_ADC_Init+0x112>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a6a      	ldr	r2, [pc, #424]	; (8004208 <HAL_ADC_Init+0x2b8>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d10e      	bne.n	8004080 <HAL_ADC_Init+0x130>
 8004062:	4868      	ldr	r0, [pc, #416]	; (8004204 <HAL_ADC_Init+0x2b4>)
 8004064:	f7ff ff3a 	bl	8003edc <LL_ADC_IsEnabled>
 8004068:	4604      	mov	r4, r0
 800406a:	4867      	ldr	r0, [pc, #412]	; (8004208 <HAL_ADC_Init+0x2b8>)
 800406c:	f7ff ff36 	bl	8003edc <LL_ADC_IsEnabled>
 8004070:	4603      	mov	r3, r0
 8004072:	4323      	orrs	r3, r4
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf0c      	ite	eq
 8004078:	2301      	moveq	r3, #1
 800407a:	2300      	movne	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e008      	b.n	8004092 <HAL_ADC_Init+0x142>
 8004080:	4862      	ldr	r0, [pc, #392]	; (800420c <HAL_ADC_Init+0x2bc>)
 8004082:	f7ff ff2b 	bl	8003edc <LL_ADC_IsEnabled>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b00      	cmp	r3, #0
 8004094:	d012      	beq.n	80040bc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a5a      	ldr	r2, [pc, #360]	; (8004204 <HAL_ADC_Init+0x2b4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_ADC_Init+0x15a>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a58      	ldr	r2, [pc, #352]	; (8004208 <HAL_ADC_Init+0x2b8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <HAL_ADC_Init+0x15e>
 80040aa:	4a59      	ldr	r2, [pc, #356]	; (8004210 <HAL_ADC_Init+0x2c0>)
 80040ac:	e000      	b.n	80040b0 <HAL_ADC_Init+0x160>
 80040ae:	4a59      	ldr	r2, [pc, #356]	; (8004214 <HAL_ADC_Init+0x2c4>)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4619      	mov	r1, r3
 80040b6:	4610      	mov	r0, r2
 80040b8:	f7ff fd04 	bl	8003ac4 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a52      	ldr	r2, [pc, #328]	; (800420c <HAL_ADC_Init+0x2bc>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d129      	bne.n	800411a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	7e5b      	ldrb	r3, [r3, #25]
 80040ca:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80040d0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80040d6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b08      	cmp	r3, #8
 80040de:	d013      	beq.n	8004108 <HAL_ADC_Init+0x1b8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b0c      	cmp	r3, #12
 80040e6:	d00d      	beq.n	8004104 <HAL_ADC_Init+0x1b4>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	2b1c      	cmp	r3, #28
 80040ee:	d007      	beq.n	8004100 <HAL_ADC_Init+0x1b0>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b18      	cmp	r3, #24
 80040f6:	d101      	bne.n	80040fc <HAL_ADC_Init+0x1ac>
 80040f8:	2318      	movs	r3, #24
 80040fa:	e006      	b.n	800410a <HAL_ADC_Init+0x1ba>
 80040fc:	2300      	movs	r3, #0
 80040fe:	e004      	b.n	800410a <HAL_ADC_Init+0x1ba>
 8004100:	2310      	movs	r3, #16
 8004102:	e002      	b.n	800410a <HAL_ADC_Init+0x1ba>
 8004104:	2308      	movs	r3, #8
 8004106:	e000      	b.n	800410a <HAL_ADC_Init+0x1ba>
 8004108:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800410a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004112:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
 8004118:	e00e      	b.n	8004138 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7e5b      	ldrb	r3, [r3, #25]
 800411e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004124:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800412a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004132:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d106      	bne.n	8004150 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	3b01      	subs	r3, #1
 8004148:	045b      	lsls	r3, r3, #17
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a26      	ldr	r2, [pc, #152]	; (800420c <HAL_ADC_Init+0x2bc>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d115      	bne.n	80041a2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	4b26      	ldr	r3, [pc, #152]	; (8004218 <HAL_ADC_Init+0x2c8>)
 800417e:	4013      	ands	r3, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6812      	ldr	r2, [r2, #0]
 8004184:	69b9      	ldr	r1, [r7, #24]
 8004186:	430b      	orrs	r3, r1
 8004188:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	611a      	str	r2, [r3, #16]
 80041a0:	e009      	b.n	80041b6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68da      	ldr	r2, [r3, #12]
 80041a8:	4b1c      	ldr	r3, [pc, #112]	; (800421c <HAL_ADC_Init+0x2cc>)
 80041aa:	4013      	ands	r3, r2
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6812      	ldr	r2, [r2, #0]
 80041b0:	69b9      	ldr	r1, [r7, #24]
 80041b2:	430b      	orrs	r3, r1
 80041b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff fea1 	bl	8003f02 <LL_ADC_REG_IsConversionOngoing>
 80041c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7ff feae 	bl	8003f28 <LL_ADC_INJ_IsConversionOngoing>
 80041cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	f040 808e 	bne.w	80042f2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f040 808a 	bne.w	80042f2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a0a      	ldr	r2, [pc, #40]	; (800420c <HAL_ADC_Init+0x2bc>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d11b      	bne.n	8004220 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	7e1b      	ldrb	r3, [r3, #24]
 80041ec:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041f4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80041f6:	4313      	orrs	r3, r2
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e018      	b.n	800422e <HAL_ADC_Init+0x2de>
 80041fc:	24000010 	.word	0x24000010
 8004200:	053e2d63 	.word	0x053e2d63
 8004204:	40022000 	.word	0x40022000
 8004208:	40022100 	.word	0x40022100
 800420c:	58026000 	.word	0x58026000
 8004210:	40022300 	.word	0x40022300
 8004214:	58026300 	.word	0x58026300
 8004218:	fff04007 	.word	0xfff04007
 800421c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	7e1b      	ldrb	r3, [r3, #24]
 8004224:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800422a:	4313      	orrs	r3, r2
 800422c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68da      	ldr	r2, [r3, #12]
 8004234:	4b46      	ldr	r3, [pc, #280]	; (8004350 <HAL_ADC_Init+0x400>)
 8004236:	4013      	ands	r3, r2
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6812      	ldr	r2, [r2, #0]
 800423c:	69b9      	ldr	r1, [r7, #24]
 800423e:	430b      	orrs	r3, r1
 8004240:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004248:	2b01      	cmp	r3, #1
 800424a:	d137      	bne.n	80042bc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a3f      	ldr	r2, [pc, #252]	; (8004354 <HAL_ADC_Init+0x404>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d116      	bne.n	800428a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	4b3d      	ldr	r3, [pc, #244]	; (8004358 <HAL_ADC_Init+0x408>)
 8004264:	4013      	ands	r3, r2
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800426e:	4311      	orrs	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004274:	4311      	orrs	r1, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800427a:	430a      	orrs	r2, r1
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	611a      	str	r2, [r3, #16]
 8004288:	e020      	b.n	80042cc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	4b32      	ldr	r3, [pc, #200]	; (800435c <HAL_ADC_Init+0x40c>)
 8004292:	4013      	ands	r3, r2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004298:	3a01      	subs	r2, #1
 800429a:	0411      	lsls	r1, r2, #16
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042a0:	4311      	orrs	r1, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042a6:	4311      	orrs	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042ac:	430a      	orrs	r2, r1
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	611a      	str	r2, [r3, #16]
 80042ba:	e007      	b.n	80042cc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691a      	ldr	r2, [r3, #16]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f022 0201 	bic.w	r2, r2, #1
 80042ca:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a1b      	ldr	r2, [pc, #108]	; (8004354 <HAL_ADC_Init+0x404>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d002      	beq.n	80042f2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fd63 	bl	8004db8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d10c      	bne.n	8004314 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004300:	f023 010f 	bic.w	r1, r3, #15
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	1e5a      	subs	r2, r3, #1
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	430a      	orrs	r2, r1
 8004310:	631a      	str	r2, [r3, #48]	; 0x30
 8004312:	e007      	b.n	8004324 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 020f 	bic.w	r2, r2, #15
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004328:	f023 0303 	bic.w	r3, r3, #3
 800432c:	f043 0201 	orr.w	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	661a      	str	r2, [r3, #96]	; 0x60
 8004334:	e007      	b.n	8004346 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800433a:	f043 0210 	orr.w	r2, r3, #16
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004346:	7ffb      	ldrb	r3, [r7, #31]
}
 8004348:	4618      	mov	r0, r3
 800434a:	3724      	adds	r7, #36	; 0x24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd90      	pop	{r4, r7, pc}
 8004350:	ffffbffc 	.word	0xffffbffc
 8004354:	58026000 	.word	0x58026000
 8004358:	fc00f81f 	.word	0xfc00f81f
 800435c:	fc00f81e 	.word	0xfc00f81e

08004360 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b0b9      	sub	sp, #228	; 0xe4
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800436a:	2300      	movs	r3, #0
 800436c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800437a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4aa9      	ldr	r2, [pc, #676]	; (8004628 <HAL_ADC_ConfigChannel+0x2c8>)
 8004382:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d102      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x34>
 800438e:	2302      	movs	r3, #2
 8004390:	f000 bcfa 	b.w	8004d88 <HAL_ADC_ConfigChannel+0xa28>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff fdae 	bl	8003f02 <LL_ADC_REG_IsConversionOngoing>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f040 84de 	bne.w	8004d6a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a9e      	ldr	r2, [pc, #632]	; (800462c <HAL_ADC_ConfigChannel+0x2cc>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d033      	beq.n	8004420 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d108      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x76>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	0e9b      	lsrs	r3, r3, #26
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2201      	movs	r2, #1
 80043d0:	fa02 f303 	lsl.w	r3, r2, r3
 80043d4:	e01d      	b.n	8004412 <HAL_ADC_ConfigChannel+0xb2>
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80043ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80043f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80043fa:	2320      	movs	r3, #32
 80043fc:	e004      	b.n	8004408 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80043fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	f003 031f 	and.w	r3, r3, #31
 800440c:	2201      	movs	r2, #1
 800440e:	fa02 f303 	lsl.w	r3, r2, r3
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	69d1      	ldr	r1, [r2, #28]
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6812      	ldr	r2, [r2, #0]
 800441c:	430b      	orrs	r3, r1
 800441e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6818      	ldr	r0, [r3, #0]
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	6859      	ldr	r1, [r3, #4]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	461a      	mov	r2, r3
 800442e:	f7ff fc6f 	bl	8003d10 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff fd63 	bl	8003f02 <LL_ADC_REG_IsConversionOngoing>
 800443c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fd6f 	bl	8003f28 <LL_ADC_INJ_IsConversionOngoing>
 800444a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800444e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004452:	2b00      	cmp	r3, #0
 8004454:	f040 8270 	bne.w	8004938 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004458:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800445c:	2b00      	cmp	r3, #0
 800445e:	f040 826b 	bne.w	8004938 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6819      	ldr	r1, [r3, #0]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	461a      	mov	r2, r3
 8004470:	f7ff fc7a 	bl	8003d68 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6c      	ldr	r2, [pc, #432]	; (800462c <HAL_ADC_ConfigChannel+0x2cc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d10d      	bne.n	800449a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	08db      	lsrs	r3, r3, #3
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004498:	e032      	b.n	8004500 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800449a:	4b65      	ldr	r3, [pc, #404]	; (8004630 <HAL_ADC_ConfigChannel+0x2d0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a6:	d10b      	bne.n	80044c0 <HAL_ADC_ConfigChannel+0x160>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	089b      	lsrs	r3, r3, #2
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	e01d      	b.n	80044fc <HAL_ADC_ConfigChannel+0x19c>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10b      	bne.n	80044e6 <HAL_ADC_ConfigChannel+0x186>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	089b      	lsrs	r3, r3, #2
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	e00a      	b.n	80044fc <HAL_ADC_ConfigChannel+0x19c>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	089b      	lsrs	r3, r3, #2
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d048      	beq.n	800459a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	6919      	ldr	r1, [r3, #16]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004518:	f7ff fb08 	bl	8003b2c <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a42      	ldr	r2, [pc, #264]	; (800462c <HAL_ADC_ConfigChannel+0x2cc>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d119      	bne.n	800455a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6818      	ldr	r0, [r3, #0]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	6919      	ldr	r1, [r3, #16]
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	461a      	mov	r2, r3
 8004534:	f7ff fba0 	bl	8003c78 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6919      	ldr	r1, [r3, #16]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d102      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x1f0>
 800454a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800454e:	e000      	b.n	8004552 <HAL_ADC_ConfigChannel+0x1f2>
 8004550:	2300      	movs	r3, #0
 8004552:	461a      	mov	r2, r3
 8004554:	f7ff fb6e 	bl	8003c34 <LL_ADC_SetOffsetSaturation>
 8004558:	e1ee      	b.n	8004938 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6919      	ldr	r1, [r3, #16]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004568:	2b01      	cmp	r3, #1
 800456a:	d102      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x212>
 800456c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004570:	e000      	b.n	8004574 <HAL_ADC_ConfigChannel+0x214>
 8004572:	2300      	movs	r3, #0
 8004574:	461a      	mov	r2, r3
 8004576:	f7ff fb3b 	bl	8003bf0 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6919      	ldr	r1, [r3, #16]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	7e1b      	ldrb	r3, [r3, #24]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d102      	bne.n	8004590 <HAL_ADC_ConfigChannel+0x230>
 800458a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800458e:	e000      	b.n	8004592 <HAL_ADC_ConfigChannel+0x232>
 8004590:	2300      	movs	r3, #0
 8004592:	461a      	mov	r2, r3
 8004594:	f7ff fb12 	bl	8003bbc <LL_ADC_SetDataRightShift>
 8004598:	e1ce      	b.n	8004938 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a23      	ldr	r2, [pc, #140]	; (800462c <HAL_ADC_ConfigChannel+0x2cc>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	f040 8181 	bne.w	80048a8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2100      	movs	r1, #0
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff faef 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <HAL_ADC_ConfigChannel+0x272>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fae4 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 80045c8:	4603      	mov	r3, r0
 80045ca:	0e9b      	lsrs	r3, r3, #26
 80045cc:	f003 021f 	and.w	r2, r3, #31
 80045d0:	e01e      	b.n	8004610 <HAL_ADC_ConfigChannel+0x2b0>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2100      	movs	r1, #0
 80045d8:	4618      	mov	r0, r3
 80045da:	f7ff fad9 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 80045de:	4603      	mov	r3, r0
 80045e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80045e8:	fa93 f3a3 	rbit	r3, r3
 80045ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80045f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80045f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80045f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004600:	2320      	movs	r3, #32
 8004602:	e004      	b.n	800460e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004604:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004608:	fab3 f383 	clz	r3, r3
 800460c:	b2db      	uxtb	r3, r3
 800460e:	461a      	mov	r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <HAL_ADC_ConfigChannel+0x2d4>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	0e9b      	lsrs	r3, r3, #26
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	e01e      	b.n	8004666 <HAL_ADC_ConfigChannel+0x306>
 8004628:	47ff0000 	.word	0x47ff0000
 800462c:	58026000 	.word	0x58026000
 8004630:	5c001000 	.word	0x5c001000
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004640:	fa93 f3a3 	rbit	r3, r3
 8004644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004648:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800464c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004658:	2320      	movs	r3, #32
 800465a:	e004      	b.n	8004666 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800465c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004660:	fab3 f383 	clz	r3, r3
 8004664:	b2db      	uxtb	r3, r3
 8004666:	429a      	cmp	r2, r3
 8004668:	d106      	bne.n	8004678 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2200      	movs	r2, #0
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff fb22 	bl	8003cbc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2101      	movs	r1, #1
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fa86 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 8004684:	4603      	mov	r3, r0
 8004686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x344>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2101      	movs	r1, #1
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff fa7b 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 800469a:	4603      	mov	r3, r0
 800469c:	0e9b      	lsrs	r3, r3, #26
 800469e:	f003 021f 	and.w	r2, r3, #31
 80046a2:	e01e      	b.n	80046e2 <HAL_ADC_ConfigChannel+0x382>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2101      	movs	r1, #1
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fa70 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80046c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80046ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80046d2:	2320      	movs	r3, #32
 80046d4:	e004      	b.n	80046e0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80046d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d105      	bne.n	80046fa <HAL_ADC_ConfigChannel+0x39a>
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	0e9b      	lsrs	r3, r3, #26
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	e018      	b.n	800472c <HAL_ADC_ConfigChannel+0x3cc>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004706:	fa93 f3a3 	rbit	r3, r3
 800470a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800470e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004712:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004716:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800471e:	2320      	movs	r3, #32
 8004720:	e004      	b.n	800472c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004722:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004726:	fab3 f383 	clz	r3, r3
 800472a:	b2db      	uxtb	r3, r3
 800472c:	429a      	cmp	r2, r3
 800472e:	d106      	bne.n	800473e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2200      	movs	r2, #0
 8004736:	2101      	movs	r1, #1
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff fabf 	bl	8003cbc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2102      	movs	r1, #2
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fa23 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 800474a:	4603      	mov	r3, r0
 800474c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <HAL_ADC_ConfigChannel+0x40a>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2102      	movs	r1, #2
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fa18 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 8004760:	4603      	mov	r3, r0
 8004762:	0e9b      	lsrs	r3, r3, #26
 8004764:	f003 021f 	and.w	r2, r3, #31
 8004768:	e01e      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x448>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2102      	movs	r1, #2
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fa0d 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 8004776:	4603      	mov	r3, r0
 8004778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004780:	fa93 f3a3 	rbit	r3, r3
 8004784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800478c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004798:	2320      	movs	r3, #32
 800479a:	e004      	b.n	80047a6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800479c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047a0:	fab3 f383 	clz	r3, r3
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	461a      	mov	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d105      	bne.n	80047c0 <HAL_ADC_ConfigChannel+0x460>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	0e9b      	lsrs	r3, r3, #26
 80047ba:	f003 031f 	and.w	r3, r3, #31
 80047be:	e014      	b.n	80047ea <HAL_ADC_ConfigChannel+0x48a>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047c8:	fa93 f3a3 	rbit	r3, r3
 80047cc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80047ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80047d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80047dc:	2320      	movs	r3, #32
 80047de:	e004      	b.n	80047ea <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80047e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d106      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	2102      	movs	r1, #2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fa60 	bl	8003cbc <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2103      	movs	r1, #3
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff f9c4 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 8004808:	4603      	mov	r3, r0
 800480a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x4c8>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2103      	movs	r1, #3
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff f9b9 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 800481e:	4603      	mov	r3, r0
 8004820:	0e9b      	lsrs	r3, r3, #26
 8004822:	f003 021f 	and.w	r2, r3, #31
 8004826:	e017      	b.n	8004858 <HAL_ADC_ConfigChannel+0x4f8>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2103      	movs	r1, #3
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff f9ae 	bl	8003b90 <LL_ADC_GetOffsetChannel>
 8004834:	4603      	mov	r3, r0
 8004836:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800483a:	fa93 f3a3 	rbit	r3, r3
 800483e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004842:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800484a:	2320      	movs	r3, #32
 800484c:	e003      	b.n	8004856 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800484e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004850:	fab3 f383 	clz	r3, r3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x510>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0e9b      	lsrs	r3, r3, #26
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	e011      	b.n	8004894 <HAL_ADC_ConfigChannel+0x534>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800487e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004880:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004888:	2320      	movs	r3, #32
 800488a:	e003      	b.n	8004894 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800488c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800488e:	fab3 f383 	clz	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	429a      	cmp	r2, r3
 8004896:	d14f      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2200      	movs	r2, #0
 800489e:	2103      	movs	r1, #3
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7ff fa0b 	bl	8003cbc <LL_ADC_SetOffsetState>
 80048a6:	e047      	b.n	8004938 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	069b      	lsls	r3, r3, #26
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d107      	bne.n	80048cc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048ca:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	069b      	lsls	r3, r3, #26
 80048dc:	429a      	cmp	r2, r3
 80048de:	d107      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048ee:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	069b      	lsls	r3, r3, #26
 8004900:	429a      	cmp	r2, r3
 8004902:	d107      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004912:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800491a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	069b      	lsls	r3, r3, #26
 8004924:	429a      	cmp	r2, r3
 8004926:	d107      	bne.n	8004938 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004936:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4618      	mov	r0, r3
 800493e:	f7ff facd 	bl	8003edc <LL_ADC_IsEnabled>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	f040 8219 	bne.w	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	6819      	ldr	r1, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	461a      	mov	r2, r3
 8004958:	f7ff fa32 	bl	8003dc0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4aa1      	ldr	r2, [pc, #644]	; (8004be8 <HAL_ADC_ConfigChannel+0x888>)
 8004962:	4293      	cmp	r3, r2
 8004964:	f040 812e 	bne.w	8004bc4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10b      	bne.n	8004990 <HAL_ADC_ConfigChannel+0x630>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	0e9b      	lsrs	r3, r3, #26
 800497e:	3301      	adds	r3, #1
 8004980:	f003 031f 	and.w	r3, r3, #31
 8004984:	2b09      	cmp	r3, #9
 8004986:	bf94      	ite	ls
 8004988:	2301      	movls	r3, #1
 800498a:	2300      	movhi	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	e019      	b.n	80049c4 <HAL_ADC_ConfigChannel+0x664>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004998:	fa93 f3a3 	rbit	r3, r3
 800499c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800499e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80049a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80049a8:	2320      	movs	r3, #32
 80049aa:	e003      	b.n	80049b4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80049ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049ae:	fab3 f383 	clz	r3, r3
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	3301      	adds	r3, #1
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	2b09      	cmp	r3, #9
 80049bc:	bf94      	ite	ls
 80049be:	2301      	movls	r3, #1
 80049c0:	2300      	movhi	r3, #0
 80049c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d079      	beq.n	8004abc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d107      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x684>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	0e9b      	lsrs	r3, r3, #26
 80049da:	3301      	adds	r3, #1
 80049dc:	069b      	lsls	r3, r3, #26
 80049de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049e2:	e015      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x6b0>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049ec:	fa93 f3a3 	rbit	r3, r3
 80049f0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80049f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80049f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80049fc:	2320      	movs	r3, #32
 80049fe:	e003      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a02:	fab3 f383 	clz	r3, r3
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	3301      	adds	r3, #1
 8004a0a:	069b      	lsls	r3, r3, #26
 8004a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d109      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x6d0>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	0e9b      	lsrs	r3, r3, #26
 8004a22:	3301      	adds	r3, #1
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	2101      	movs	r1, #1
 8004a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a2e:	e017      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x700>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a38:	fa93 f3a3 	rbit	r3, r3
 8004a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a40:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004a48:	2320      	movs	r3, #32
 8004a4a:	e003      	b.n	8004a54 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a4e:	fab3 f383 	clz	r3, r3
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	3301      	adds	r3, #1
 8004a56:	f003 031f 	and.w	r3, r3, #31
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a60:	ea42 0103 	orr.w	r1, r2, r3
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <HAL_ADC_ConfigChannel+0x726>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0e9b      	lsrs	r3, r3, #26
 8004a76:	3301      	adds	r3, #1
 8004a78:	f003 021f 	and.w	r2, r3, #31
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	4413      	add	r3, r2
 8004a82:	051b      	lsls	r3, r3, #20
 8004a84:	e018      	b.n	8004ab8 <HAL_ADC_ConfigChannel+0x758>
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	fa93 f3a3 	rbit	r3, r3
 8004a92:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004a9e:	2320      	movs	r3, #32
 8004aa0:	e003      	b.n	8004aaa <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa4:	fab3 f383 	clz	r3, r3
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	3301      	adds	r3, #1
 8004aac:	f003 021f 	and.w	r2, r3, #31
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	005b      	lsls	r3, r3, #1
 8004ab4:	4413      	add	r3, r2
 8004ab6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	e07e      	b.n	8004bba <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d107      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x778>
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	0e9b      	lsrs	r3, r3, #26
 8004ace:	3301      	adds	r3, #1
 8004ad0:	069b      	lsls	r3, r3, #26
 8004ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ad6:	e015      	b.n	8004b04 <HAL_ADC_ConfigChannel+0x7a4>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	fa93 f3a3 	rbit	r3, r3
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004af0:	2320      	movs	r3, #32
 8004af2:	e003      	b.n	8004afc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	fab3 f383 	clz	r3, r3
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	3301      	adds	r3, #1
 8004afe:	069b      	lsls	r3, r3, #26
 8004b00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x7c4>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	0e9b      	lsrs	r3, r3, #26
 8004b16:	3301      	adds	r3, #1
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b22:	e017      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x7f4>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	fa93 f3a3 	rbit	r3, r3
 8004b30:	61bb      	str	r3, [r7, #24]
  return result;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d101      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004b3c:	2320      	movs	r3, #32
 8004b3e:	e003      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	fab3 f383 	clz	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	3301      	adds	r3, #1
 8004b4a:	f003 031f 	and.w	r3, r3, #31
 8004b4e:	2101      	movs	r1, #1
 8004b50:	fa01 f303 	lsl.w	r3, r1, r3
 8004b54:	ea42 0103 	orr.w	r1, r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d10d      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x820>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	0e9b      	lsrs	r3, r3, #26
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	f003 021f 	and.w	r2, r3, #31
 8004b70:	4613      	mov	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	4413      	add	r3, r2
 8004b76:	3b1e      	subs	r3, #30
 8004b78:	051b      	lsls	r3, r3, #20
 8004b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b7e:	e01b      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x858>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	fa93 f3a3 	rbit	r3, r3
 8004b8c:	60fb      	str	r3, [r7, #12]
  return result;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d101      	bne.n	8004b9c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004b98:	2320      	movs	r3, #32
 8004b9a:	e003      	b.n	8004ba4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f003 021f 	and.w	r2, r3, #31
 8004baa:	4613      	mov	r3, r2
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	4413      	add	r3, r2
 8004bb0:	3b1e      	subs	r3, #30
 8004bb2:	051b      	lsls	r3, r3, #20
 8004bb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	6892      	ldr	r2, [r2, #8]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	f7ff f8d2 	bl	8003d68 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f280 80d7 	bge.w	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a06      	ldr	r2, [pc, #24]	; (8004bec <HAL_ADC_ConfigChannel+0x88c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_ADC_ConfigChannel+0x882>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a04      	ldr	r2, [pc, #16]	; (8004bf0 <HAL_ADC_ConfigChannel+0x890>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10a      	bne.n	8004bf8 <HAL_ADC_ConfigChannel+0x898>
 8004be2:	4b04      	ldr	r3, [pc, #16]	; (8004bf4 <HAL_ADC_ConfigChannel+0x894>)
 8004be4:	e009      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x89a>
 8004be6:	bf00      	nop
 8004be8:	47ff0000 	.word	0x47ff0000
 8004bec:	40022000 	.word	0x40022000
 8004bf0:	40022100 	.word	0x40022100
 8004bf4:	40022300 	.word	0x40022300
 8004bf8:	4b65      	ldr	r3, [pc, #404]	; (8004d90 <HAL_ADC_ConfigChannel+0xa30>)
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fe ff88 	bl	8003b10 <LL_ADC_GetCommonPathInternalCh>
 8004c00:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a62      	ldr	r2, [pc, #392]	; (8004d94 <HAL_ADC_ConfigChannel+0xa34>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d004      	beq.n	8004c18 <HAL_ADC_ConfigChannel+0x8b8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a61      	ldr	r2, [pc, #388]	; (8004d98 <HAL_ADC_ConfigChannel+0xa38>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10e      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x8d6>
 8004c18:	485e      	ldr	r0, [pc, #376]	; (8004d94 <HAL_ADC_ConfigChannel+0xa34>)
 8004c1a:	f7ff f95f 	bl	8003edc <LL_ADC_IsEnabled>
 8004c1e:	4604      	mov	r4, r0
 8004c20:	485d      	ldr	r0, [pc, #372]	; (8004d98 <HAL_ADC_ConfigChannel+0xa38>)
 8004c22:	f7ff f95b 	bl	8003edc <LL_ADC_IsEnabled>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4323      	orrs	r3, r4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	bf0c      	ite	eq
 8004c2e:	2301      	moveq	r3, #1
 8004c30:	2300      	movne	r3, #0
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	e008      	b.n	8004c48 <HAL_ADC_ConfigChannel+0x8e8>
 8004c36:	4859      	ldr	r0, [pc, #356]	; (8004d9c <HAL_ADC_ConfigChannel+0xa3c>)
 8004c38:	f7ff f950 	bl	8003edc <LL_ADC_IsEnabled>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bf0c      	ite	eq
 8004c42:	2301      	moveq	r3, #1
 8004c44:	2300      	movne	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 8084 	beq.w	8004d56 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a53      	ldr	r2, [pc, #332]	; (8004da0 <HAL_ADC_ConfigChannel+0xa40>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d132      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x95e>
 8004c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d12c      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a4c      	ldr	r2, [pc, #304]	; (8004d9c <HAL_ADC_ConfigChannel+0xa3c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	f040 8086 	bne.w	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a47      	ldr	r2, [pc, #284]	; (8004d94 <HAL_ADC_ConfigChannel+0xa34>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d004      	beq.n	8004c84 <HAL_ADC_ConfigChannel+0x924>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a46      	ldr	r2, [pc, #280]	; (8004d98 <HAL_ADC_ConfigChannel+0xa38>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d101      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x928>
 8004c84:	4a47      	ldr	r2, [pc, #284]	; (8004da4 <HAL_ADC_ConfigChannel+0xa44>)
 8004c86:	e000      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x92a>
 8004c88:	4a41      	ldr	r2, [pc, #260]	; (8004d90 <HAL_ADC_ConfigChannel+0xa30>)
 8004c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c92:	4619      	mov	r1, r3
 8004c94:	4610      	mov	r0, r2
 8004c96:	f7fe ff28 	bl	8003aea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c9a:	4b43      	ldr	r3, [pc, #268]	; (8004da8 <HAL_ADC_ConfigChannel+0xa48>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	4a42      	ldr	r2, [pc, #264]	; (8004dac <HAL_ADC_ConfigChannel+0xa4c>)
 8004ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca6:	099b      	lsrs	r3, r3, #6
 8004ca8:	3301      	adds	r3, #1
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cae:	e002      	b.n	8004cb6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1f9      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cbc:	e05e      	b.n	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a3b      	ldr	r2, [pc, #236]	; (8004db0 <HAL_ADC_ConfigChannel+0xa50>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d120      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x9aa>
 8004cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d11a      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a30      	ldr	r2, [pc, #192]	; (8004d9c <HAL_ADC_ConfigChannel+0xa3c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d14e      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a2c      	ldr	r2, [pc, #176]	; (8004d94 <HAL_ADC_ConfigChannel+0xa34>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_ADC_ConfigChannel+0x992>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a2a      	ldr	r2, [pc, #168]	; (8004d98 <HAL_ADC_ConfigChannel+0xa38>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x996>
 8004cf2:	4a2c      	ldr	r2, [pc, #176]	; (8004da4 <HAL_ADC_ConfigChannel+0xa44>)
 8004cf4:	e000      	b.n	8004cf8 <HAL_ADC_ConfigChannel+0x998>
 8004cf6:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <HAL_ADC_ConfigChannel+0xa30>)
 8004cf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d00:	4619      	mov	r1, r3
 8004d02:	4610      	mov	r0, r2
 8004d04:	f7fe fef1 	bl	8003aea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d08:	e038      	b.n	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a29      	ldr	r2, [pc, #164]	; (8004db4 <HAL_ADC_ConfigChannel+0xa54>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d133      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
 8004d14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d12d      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <HAL_ADC_ConfigChannel+0xa3c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d128      	bne.n	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a19      	ldr	r2, [pc, #100]	; (8004d94 <HAL_ADC_ConfigChannel+0xa34>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_ADC_ConfigChannel+0x9de>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <HAL_ADC_ConfigChannel+0xa38>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d101      	bne.n	8004d42 <HAL_ADC_ConfigChannel+0x9e2>
 8004d3e:	4a19      	ldr	r2, [pc, #100]	; (8004da4 <HAL_ADC_ConfigChannel+0xa44>)
 8004d40:	e000      	b.n	8004d44 <HAL_ADC_ConfigChannel+0x9e4>
 8004d42:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <HAL_ADC_ConfigChannel+0xa30>)
 8004d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d4c:	4619      	mov	r1, r3
 8004d4e:	4610      	mov	r0, r2
 8004d50:	f7fe fecb 	bl	8003aea <LL_ADC_SetCommonPathInternalCh>
 8004d54:	e012      	b.n	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004d68:	e008      	b.n	8004d7c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d6e:	f043 0220 	orr.w	r2, r3, #32
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d84:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	37e4      	adds	r7, #228	; 0xe4
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd90      	pop	{r4, r7, pc}
 8004d90:	58026300 	.word	0x58026300
 8004d94:	40022000 	.word	0x40022000
 8004d98:	40022100 	.word	0x40022100
 8004d9c:	58026000 	.word	0x58026000
 8004da0:	c7520000 	.word	0xc7520000
 8004da4:	40022300 	.word	0x40022300
 8004da8:	24000010 	.word	0x24000010
 8004dac:	053e2d63 	.word	0x053e2d63
 8004db0:	c3210000 	.word	0xc3210000
 8004db4:	cb840000 	.word	0xcb840000

08004db8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a6c      	ldr	r2, [pc, #432]	; (8004f78 <ADC_ConfigureBoostMode+0x1c0>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d004      	beq.n	8004dd4 <ADC_ConfigureBoostMode+0x1c>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a6b      	ldr	r2, [pc, #428]	; (8004f7c <ADC_ConfigureBoostMode+0x1c4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d109      	bne.n	8004de8 <ADC_ConfigureBoostMode+0x30>
 8004dd4:	4b6a      	ldr	r3, [pc, #424]	; (8004f80 <ADC_ConfigureBoostMode+0x1c8>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	e008      	b.n	8004dfa <ADC_ConfigureBoostMode+0x42>
 8004de8:	4b66      	ldr	r3, [pc, #408]	; (8004f84 <ADC_ConfigureBoostMode+0x1cc>)
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bf14      	ite	ne
 8004df4:	2301      	movne	r3, #1
 8004df6:	2300      	moveq	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d01c      	beq.n	8004e38 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004dfe:	f006 f877 	bl	800aef0 <HAL_RCC_GetHCLKFreq>
 8004e02:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e0c:	d010      	beq.n	8004e30 <ADC_ConfigureBoostMode+0x78>
 8004e0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e12:	d873      	bhi.n	8004efc <ADC_ConfigureBoostMode+0x144>
 8004e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e18:	d002      	beq.n	8004e20 <ADC_ConfigureBoostMode+0x68>
 8004e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e1e:	d16d      	bne.n	8004efc <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	0c1b      	lsrs	r3, r3, #16
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2c:	60fb      	str	r3, [r7, #12]
        break;
 8004e2e:	e068      	b.n	8004f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	089b      	lsrs	r3, r3, #2
 8004e34:	60fb      	str	r3, [r7, #12]
        break;
 8004e36:	e064      	b.n	8004f02 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e38:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	f007 fa52 	bl	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e44:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e4e:	d051      	beq.n	8004ef4 <ADC_ConfigureBoostMode+0x13c>
 8004e50:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e54:	d854      	bhi.n	8004f00 <ADC_ConfigureBoostMode+0x148>
 8004e56:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e5a:	d047      	beq.n	8004eec <ADC_ConfigureBoostMode+0x134>
 8004e5c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e60:	d84e      	bhi.n	8004f00 <ADC_ConfigureBoostMode+0x148>
 8004e62:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e66:	d03d      	beq.n	8004ee4 <ADC_ConfigureBoostMode+0x12c>
 8004e68:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e6c:	d848      	bhi.n	8004f00 <ADC_ConfigureBoostMode+0x148>
 8004e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e72:	d033      	beq.n	8004edc <ADC_ConfigureBoostMode+0x124>
 8004e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e78:	d842      	bhi.n	8004f00 <ADC_ConfigureBoostMode+0x148>
 8004e7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e7e:	d029      	beq.n	8004ed4 <ADC_ConfigureBoostMode+0x11c>
 8004e80:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e84:	d83c      	bhi.n	8004f00 <ADC_ConfigureBoostMode+0x148>
 8004e86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e8a:	d01a      	beq.n	8004ec2 <ADC_ConfigureBoostMode+0x10a>
 8004e8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e90:	d836      	bhi.n	8004f00 <ADC_ConfigureBoostMode+0x148>
 8004e92:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e96:	d014      	beq.n	8004ec2 <ADC_ConfigureBoostMode+0x10a>
 8004e98:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e9c:	d830      	bhi.n	8004f00 <ADC_ConfigureBoostMode+0x148>
 8004e9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea2:	d00e      	beq.n	8004ec2 <ADC_ConfigureBoostMode+0x10a>
 8004ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea8:	d82a      	bhi.n	8004f00 <ADC_ConfigureBoostMode+0x148>
 8004eaa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004eae:	d008      	beq.n	8004ec2 <ADC_ConfigureBoostMode+0x10a>
 8004eb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004eb4:	d824      	bhi.n	8004f00 <ADC_ConfigureBoostMode+0x148>
 8004eb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004eba:	d002      	beq.n	8004ec2 <ADC_ConfigureBoostMode+0x10a>
 8004ebc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ec0:	d11e      	bne.n	8004f00 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	0c9b      	lsrs	r3, r3, #18
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed0:	60fb      	str	r3, [r7, #12]
        break;
 8004ed2:	e016      	b.n	8004f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	091b      	lsrs	r3, r3, #4
 8004ed8:	60fb      	str	r3, [r7, #12]
        break;
 8004eda:	e012      	b.n	8004f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	60fb      	str	r3, [r7, #12]
        break;
 8004ee2:	e00e      	b.n	8004f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	60fb      	str	r3, [r7, #12]
        break;
 8004eea:	e00a      	b.n	8004f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	09db      	lsrs	r3, r3, #7
 8004ef0:	60fb      	str	r3, [r7, #12]
        break;
 8004ef2:	e006      	b.n	8004f02 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	0a1b      	lsrs	r3, r3, #8
 8004ef8:	60fb      	str	r3, [r7, #12]
        break;
 8004efa:	e002      	b.n	8004f02 <ADC_ConfigureBoostMode+0x14a>
        break;
 8004efc:	bf00      	nop
 8004efe:	e000      	b.n	8004f02 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f00:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4a1f      	ldr	r2, [pc, #124]	; (8004f88 <ADC_ConfigureBoostMode+0x1d0>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d808      	bhi.n	8004f22 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	689a      	ldr	r2, [r3, #8]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f1e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f20:	e025      	b.n	8004f6e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a19      	ldr	r2, [pc, #100]	; (8004f8c <ADC_ConfigureBoostMode+0x1d4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d80a      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f3c:	609a      	str	r2, [r3, #8]
}
 8004f3e:	e016      	b.n	8004f6e <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <ADC_ConfigureBoostMode+0x1d8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d80a      	bhi.n	8004f5e <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f5a:	609a      	str	r2, [r3, #8]
}
 8004f5c:	e007      	b.n	8004f6e <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f6c:	609a      	str	r2, [r3, #8]
}
 8004f6e:	bf00      	nop
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40022000 	.word	0x40022000
 8004f7c:	40022100 	.word	0x40022100
 8004f80:	40022300 	.word	0x40022300
 8004f84:	58026300 	.word	0x58026300
 8004f88:	005f5e10 	.word	0x005f5e10
 8004f8c:	00bebc20 	.word	0x00bebc20
 8004f90:	017d7840 	.word	0x017d7840

08004f94 <LL_ADC_IsEnabled>:
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <LL_ADC_IsEnabled+0x18>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <LL_ADC_IsEnabled+0x1a>
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <LL_ADC_REG_IsConversionOngoing>:
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d101      	bne.n	8004fd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e000      	b.n	8004fd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004fe0:	b590      	push	{r4, r7, lr}
 8004fe2:	b0a3      	sub	sp, #140	; 0x8c
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d101      	bne.n	8004ffe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ffa:	2302      	movs	r3, #2
 8004ffc:	e0c1      	b.n	8005182 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005006:	2300      	movs	r3, #0
 8005008:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800500a:	2300      	movs	r3, #0
 800500c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a5e      	ldr	r2, [pc, #376]	; (800518c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d102      	bne.n	800501e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005018:	4b5d      	ldr	r3, [pc, #372]	; (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800501a:	60fb      	str	r3, [r7, #12]
 800501c:	e001      	b.n	8005022 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800501e:	2300      	movs	r3, #0
 8005020:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800502c:	f043 0220 	orr.w	r2, r3, #32
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0a0      	b.n	8005182 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	4618      	mov	r0, r3
 8005044:	f7ff ffb9 	bl	8004fba <LL_ADC_REG_IsConversionOngoing>
 8005048:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ffb2 	bl	8004fba <LL_ADC_REG_IsConversionOngoing>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	f040 8081 	bne.w	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800505e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005062:	2b00      	cmp	r3, #0
 8005064:	d17c      	bne.n	8005160 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a48      	ldr	r2, [pc, #288]	; (800518c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d004      	beq.n	800507a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a46      	ldr	r2, [pc, #280]	; (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d101      	bne.n	800507e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800507a:	4b46      	ldr	r3, [pc, #280]	; (8005194 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800507c:	e000      	b.n	8005080 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800507e:	4b46      	ldr	r3, [pc, #280]	; (8005198 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005080:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d039      	beq.n	80050fe <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 800508a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	431a      	orrs	r2, r3
 8005098:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800509a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a3a      	ldr	r2, [pc, #232]	; (800518c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d004      	beq.n	80050b0 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a39      	ldr	r2, [pc, #228]	; (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d10e      	bne.n	80050ce <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80050b0:	4836      	ldr	r0, [pc, #216]	; (800518c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050b2:	f7ff ff6f 	bl	8004f94 <LL_ADC_IsEnabled>
 80050b6:	4604      	mov	r4, r0
 80050b8:	4835      	ldr	r0, [pc, #212]	; (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050ba:	f7ff ff6b 	bl	8004f94 <LL_ADC_IsEnabled>
 80050be:	4603      	mov	r3, r0
 80050c0:	4323      	orrs	r3, r4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf0c      	ite	eq
 80050c6:	2301      	moveq	r3, #1
 80050c8:	2300      	movne	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	e008      	b.n	80050e0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80050ce:	4833      	ldr	r0, [pc, #204]	; (800519c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80050d0:	f7ff ff60 	bl	8004f94 <LL_ADC_IsEnabled>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf0c      	ite	eq
 80050da:	2301      	moveq	r3, #1
 80050dc:	2300      	movne	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d047      	beq.n	8005174 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050e6:	689a      	ldr	r2, [r3, #8]
 80050e8:	4b2d      	ldr	r3, [pc, #180]	; (80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050ea:	4013      	ands	r3, r2
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	6811      	ldr	r1, [r2, #0]
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	431a      	orrs	r2, r3
 80050f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050fa:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050fc:	e03a      	b.n	8005174 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80050fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005106:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005108:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1f      	ldr	r2, [pc, #124]	; (800518c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d004      	beq.n	800511e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d10e      	bne.n	800513c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800511e:	481b      	ldr	r0, [pc, #108]	; (800518c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005120:	f7ff ff38 	bl	8004f94 <LL_ADC_IsEnabled>
 8005124:	4604      	mov	r4, r0
 8005126:	481a      	ldr	r0, [pc, #104]	; (8005190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005128:	f7ff ff34 	bl	8004f94 <LL_ADC_IsEnabled>
 800512c:	4603      	mov	r3, r0
 800512e:	4323      	orrs	r3, r4
 8005130:	2b00      	cmp	r3, #0
 8005132:	bf0c      	ite	eq
 8005134:	2301      	moveq	r3, #1
 8005136:	2300      	movne	r3, #0
 8005138:	b2db      	uxtb	r3, r3
 800513a:	e008      	b.n	800514e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800513c:	4817      	ldr	r0, [pc, #92]	; (800519c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800513e:	f7ff ff29 	bl	8004f94 <LL_ADC_IsEnabled>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf0c      	ite	eq
 8005148:	2301      	moveq	r3, #1
 800514a:	2300      	movne	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d010      	beq.n	8005174 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	4b12      	ldr	r3, [pc, #72]	; (80051a0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005158:	4013      	ands	r3, r2
 800515a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800515c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800515e:	e009      	b.n	8005174 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005164:	f043 0220 	orr.w	r2, r3, #32
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800516c:	2301      	movs	r3, #1
 800516e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005172:	e000      	b.n	8005176 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005174:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800517e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005182:	4618      	mov	r0, r3
 8005184:	378c      	adds	r7, #140	; 0x8c
 8005186:	46bd      	mov	sp, r7
 8005188:	bd90      	pop	{r4, r7, pc}
 800518a:	bf00      	nop
 800518c:	40022000 	.word	0x40022000
 8005190:	40022100 	.word	0x40022100
 8005194:	40022300 	.word	0x40022300
 8005198:	58026300 	.word	0x58026300
 800519c:	58026000 	.word	0x58026000
 80051a0:	fffff0e0 	.word	0xfffff0e0

080051a4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e023      	b.n	80051fe <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d106      	bne.n	80051d0 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7fd fafe 	bl	80027cc <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005218:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <__NVIC_SetPriorityGrouping+0x40>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005224:	4013      	ands	r3, r2
 8005226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <__NVIC_SetPriorityGrouping+0x44>)
 8005232:	4313      	orrs	r3, r2
 8005234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <__NVIC_SetPriorityGrouping+0x40>)
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	60d3      	str	r3, [r2, #12]
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	e000ed00 	.word	0xe000ed00
 800524c:	05fa0000 	.word	0x05fa0000

08005250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005250:	b480      	push	{r7}
 8005252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005254:	4b04      	ldr	r3, [pc, #16]	; (8005268 <__NVIC_GetPriorityGrouping+0x18>)
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	0a1b      	lsrs	r3, r3, #8
 800525a:	f003 0307 	and.w	r3, r3, #7
}
 800525e:	4618      	mov	r0, r3
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	e000ed00 	.word	0xe000ed00

0800526c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	4603      	mov	r3, r0
 8005274:	6039      	str	r1, [r7, #0]
 8005276:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005278:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800527c:	2b00      	cmp	r3, #0
 800527e:	db0a      	blt.n	8005296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	b2da      	uxtb	r2, r3
 8005284:	490c      	ldr	r1, [pc, #48]	; (80052b8 <__NVIC_SetPriority+0x4c>)
 8005286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800528a:	0112      	lsls	r2, r2, #4
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	440b      	add	r3, r1
 8005290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005294:	e00a      	b.n	80052ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4908      	ldr	r1, [pc, #32]	; (80052bc <__NVIC_SetPriority+0x50>)
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	3b04      	subs	r3, #4
 80052a4:	0112      	lsls	r2, r2, #4
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	440b      	add	r3, r1
 80052aa:	761a      	strb	r2, [r3, #24]
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	e000e100 	.word	0xe000e100
 80052bc:	e000ed00 	.word	0xe000ed00

080052c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f003 0307 	and.w	r3, r3, #7
 80052d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052d4:	69fb      	ldr	r3, [r7, #28]
 80052d6:	f1c3 0307 	rsb	r3, r3, #7
 80052da:	2b04      	cmp	r3, #4
 80052dc:	bf28      	it	cs
 80052de:	2304      	movcs	r3, #4
 80052e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	3304      	adds	r3, #4
 80052e6:	2b06      	cmp	r3, #6
 80052e8:	d902      	bls.n	80052f0 <NVIC_EncodePriority+0x30>
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	3b03      	subs	r3, #3
 80052ee:	e000      	b.n	80052f2 <NVIC_EncodePriority+0x32>
 80052f0:	2300      	movs	r3, #0
 80052f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052f4:	f04f 32ff 	mov.w	r2, #4294967295
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	43da      	mvns	r2, r3
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	401a      	ands	r2, r3
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005308:	f04f 31ff 	mov.w	r1, #4294967295
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	fa01 f303 	lsl.w	r3, r1, r3
 8005312:	43d9      	mvns	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005318:	4313      	orrs	r3, r2
         );
}
 800531a:	4618      	mov	r0, r3
 800531c:	3724      	adds	r7, #36	; 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
	...

08005328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3b01      	subs	r3, #1
 8005334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005338:	d301      	bcc.n	800533e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800533a:	2301      	movs	r3, #1
 800533c:	e00f      	b.n	800535e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800533e:	4a0a      	ldr	r2, [pc, #40]	; (8005368 <SysTick_Config+0x40>)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3b01      	subs	r3, #1
 8005344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005346:	210f      	movs	r1, #15
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	f7ff ff8e 	bl	800526c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <SysTick_Config+0x40>)
 8005352:	2200      	movs	r2, #0
 8005354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005356:	4b04      	ldr	r3, [pc, #16]	; (8005368 <SysTick_Config+0x40>)
 8005358:	2207      	movs	r2, #7
 800535a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	e000e010 	.word	0xe000e010

0800536c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7ff ff47 	bl	8005208 <__NVIC_SetPriorityGrouping>
}
 800537a:	bf00      	nop
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b086      	sub	sp, #24
 8005386:	af00      	add	r7, sp, #0
 8005388:	4603      	mov	r3, r0
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	607a      	str	r2, [r7, #4]
 800538e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005390:	f7ff ff5e 	bl	8005250 <__NVIC_GetPriorityGrouping>
 8005394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	6978      	ldr	r0, [r7, #20]
 800539c:	f7ff ff90 	bl	80052c0 <NVIC_EncodePriority>
 80053a0:	4602      	mov	r2, r0
 80053a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053a6:	4611      	mov	r1, r2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7ff ff5f 	bl	800526c <__NVIC_SetPriority>
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}

080053b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ffb2 	bl	8005328 <SysTick_Config>
 80053c4:	4603      	mov	r3, r0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e054      	b.n	800548c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	7f5b      	ldrb	r3, [r3, #29]
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d105      	bne.n	80053f8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7fd fa0c 	bl	8002810 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2202      	movs	r2, #2
 80053fc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	791b      	ldrb	r3, [r3, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10c      	bne.n	8005420 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a22      	ldr	r2, [pc, #136]	; (8005494 <HAL_CRC_Init+0xc4>)
 800540c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0218 	bic.w	r2, r2, #24
 800541c:	609a      	str	r2, [r3, #8]
 800541e:	e00c      	b.n	800543a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6899      	ldr	r1, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	461a      	mov	r2, r3
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f834 	bl	8005498 <HAL_CRCEx_Polynomial_Set>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e028      	b.n	800548c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	795b      	ldrb	r3, [r3, #5]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d105      	bne.n	800544e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f04f 32ff 	mov.w	r2, #4294967295
 800544a:	611a      	str	r2, [r3, #16]
 800544c:	e004      	b.n	8005458 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6912      	ldr	r2, [r2, #16]
 8005456:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	430a      	orrs	r2, r1
 800546c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	699a      	ldr	r2, [r3, #24]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3708      	adds	r7, #8
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	04c11db7 	.word	0x04c11db7

08005498 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80054a8:	231f      	movs	r3, #31
 80054aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d102      	bne.n	80054bc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	75fb      	strb	r3, [r7, #23]
 80054ba:	e063      	b.n	8005584 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80054bc:	bf00      	nop
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	613a      	str	r2, [r7, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d009      	beq.n	80054dc <HAL_CRCEx_Polynomial_Set+0x44>
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0f0      	beq.n	80054be <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b18      	cmp	r3, #24
 80054e0:	d846      	bhi.n	8005570 <HAL_CRCEx_Polynomial_Set+0xd8>
 80054e2:	a201      	add	r2, pc, #4	; (adr r2, 80054e8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80054e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e8:	08005577 	.word	0x08005577
 80054ec:	08005571 	.word	0x08005571
 80054f0:	08005571 	.word	0x08005571
 80054f4:	08005571 	.word	0x08005571
 80054f8:	08005571 	.word	0x08005571
 80054fc:	08005571 	.word	0x08005571
 8005500:	08005571 	.word	0x08005571
 8005504:	08005571 	.word	0x08005571
 8005508:	08005565 	.word	0x08005565
 800550c:	08005571 	.word	0x08005571
 8005510:	08005571 	.word	0x08005571
 8005514:	08005571 	.word	0x08005571
 8005518:	08005571 	.word	0x08005571
 800551c:	08005571 	.word	0x08005571
 8005520:	08005571 	.word	0x08005571
 8005524:	08005571 	.word	0x08005571
 8005528:	08005559 	.word	0x08005559
 800552c:	08005571 	.word	0x08005571
 8005530:	08005571 	.word	0x08005571
 8005534:	08005571 	.word	0x08005571
 8005538:	08005571 	.word	0x08005571
 800553c:	08005571 	.word	0x08005571
 8005540:	08005571 	.word	0x08005571
 8005544:	08005571 	.word	0x08005571
 8005548:	0800554d 	.word	0x0800554d
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b06      	cmp	r3, #6
 8005550:	d913      	bls.n	800557a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005556:	e010      	b.n	800557a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	2b07      	cmp	r3, #7
 800555c:	d90f      	bls.n	800557e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005562:	e00c      	b.n	800557e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	2b0f      	cmp	r3, #15
 8005568:	d90b      	bls.n	8005582 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800556e:	e008      	b.n	8005582 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	75fb      	strb	r3, [r7, #23]
        break;
 8005574:	e006      	b.n	8005584 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005576:	bf00      	nop
 8005578:	e004      	b.n	8005584 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800557a:	bf00      	nop
 800557c:	e002      	b.n	8005584 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800557e:	bf00      	nop
 8005580:	e000      	b.n	8005584 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005582:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005584:	7dfb      	ldrb	r3, [r7, #23]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10d      	bne.n	80055a6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f023 0118 	bic.w	r1, r3, #24
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	430a      	orrs	r2, r1
 80055a4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	371c      	adds	r7, #28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e226      	b.n	8005a1e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_DMA_Start_IT+0x2a>
 80055da:	2302      	movs	r3, #2
 80055dc:	e21f      	b.n	8005a1e <HAL_DMA_Start_IT+0x46a>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	f040 820a 	bne.w	8005a08 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2200      	movs	r2, #0
 8005600:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a68      	ldr	r2, [pc, #416]	; (80057a8 <HAL_DMA_Start_IT+0x1f4>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d04a      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a66      	ldr	r2, [pc, #408]	; (80057ac <HAL_DMA_Start_IT+0x1f8>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d045      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a65      	ldr	r2, [pc, #404]	; (80057b0 <HAL_DMA_Start_IT+0x1fc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d040      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a63      	ldr	r2, [pc, #396]	; (80057b4 <HAL_DMA_Start_IT+0x200>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d03b      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a62      	ldr	r2, [pc, #392]	; (80057b8 <HAL_DMA_Start_IT+0x204>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d036      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a60      	ldr	r2, [pc, #384]	; (80057bc <HAL_DMA_Start_IT+0x208>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d031      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a5f      	ldr	r2, [pc, #380]	; (80057c0 <HAL_DMA_Start_IT+0x20c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d02c      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a5d      	ldr	r2, [pc, #372]	; (80057c4 <HAL_DMA_Start_IT+0x210>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d027      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a5c      	ldr	r2, [pc, #368]	; (80057c8 <HAL_DMA_Start_IT+0x214>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d022      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a5a      	ldr	r2, [pc, #360]	; (80057cc <HAL_DMA_Start_IT+0x218>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01d      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a59      	ldr	r2, [pc, #356]	; (80057d0 <HAL_DMA_Start_IT+0x21c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d018      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a57      	ldr	r2, [pc, #348]	; (80057d4 <HAL_DMA_Start_IT+0x220>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d013      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a56      	ldr	r2, [pc, #344]	; (80057d8 <HAL_DMA_Start_IT+0x224>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00e      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a54      	ldr	r2, [pc, #336]	; (80057dc <HAL_DMA_Start_IT+0x228>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d009      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a53      	ldr	r2, [pc, #332]	; (80057e0 <HAL_DMA_Start_IT+0x22c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d004      	beq.n	80056a2 <HAL_DMA_Start_IT+0xee>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a51      	ldr	r2, [pc, #324]	; (80057e4 <HAL_DMA_Start_IT+0x230>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d108      	bne.n	80056b4 <HAL_DMA_Start_IT+0x100>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f022 0201 	bic.w	r2, r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e007      	b.n	80056c4 <HAL_DMA_Start_IT+0x110>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 fc3c 	bl	8005f48 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a34      	ldr	r2, [pc, #208]	; (80057a8 <HAL_DMA_Start_IT+0x1f4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d04a      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a33      	ldr	r2, [pc, #204]	; (80057ac <HAL_DMA_Start_IT+0x1f8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d045      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a31      	ldr	r2, [pc, #196]	; (80057b0 <HAL_DMA_Start_IT+0x1fc>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d040      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a30      	ldr	r2, [pc, #192]	; (80057b4 <HAL_DMA_Start_IT+0x200>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d03b      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a2e      	ldr	r2, [pc, #184]	; (80057b8 <HAL_DMA_Start_IT+0x204>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d036      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a2d      	ldr	r2, [pc, #180]	; (80057bc <HAL_DMA_Start_IT+0x208>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d031      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a2b      	ldr	r2, [pc, #172]	; (80057c0 <HAL_DMA_Start_IT+0x20c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d02c      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <HAL_DMA_Start_IT+0x210>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d027      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a28      	ldr	r2, [pc, #160]	; (80057c8 <HAL_DMA_Start_IT+0x214>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d022      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a27      	ldr	r2, [pc, #156]	; (80057cc <HAL_DMA_Start_IT+0x218>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d01d      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a25      	ldr	r2, [pc, #148]	; (80057d0 <HAL_DMA_Start_IT+0x21c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d018      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a24      	ldr	r2, [pc, #144]	; (80057d4 <HAL_DMA_Start_IT+0x220>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d013      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <HAL_DMA_Start_IT+0x224>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00e      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a21      	ldr	r2, [pc, #132]	; (80057dc <HAL_DMA_Start_IT+0x228>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d009      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <HAL_DMA_Start_IT+0x22c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d004      	beq.n	8005770 <HAL_DMA_Start_IT+0x1bc>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a1e      	ldr	r2, [pc, #120]	; (80057e4 <HAL_DMA_Start_IT+0x230>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d101      	bne.n	8005774 <HAL_DMA_Start_IT+0x1c0>
 8005770:	2301      	movs	r3, #1
 8005772:	e000      	b.n	8005776 <HAL_DMA_Start_IT+0x1c2>
 8005774:	2300      	movs	r3, #0
 8005776:	2b00      	cmp	r3, #0
 8005778:	d036      	beq.n	80057e8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f023 021e 	bic.w	r2, r3, #30
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0216 	orr.w	r2, r2, #22
 800578c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	2b00      	cmp	r3, #0
 8005794:	d03e      	beq.n	8005814 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0208 	orr.w	r2, r2, #8
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	e035      	b.n	8005814 <HAL_DMA_Start_IT+0x260>
 80057a8:	40020010 	.word	0x40020010
 80057ac:	40020028 	.word	0x40020028
 80057b0:	40020040 	.word	0x40020040
 80057b4:	40020058 	.word	0x40020058
 80057b8:	40020070 	.word	0x40020070
 80057bc:	40020088 	.word	0x40020088
 80057c0:	400200a0 	.word	0x400200a0
 80057c4:	400200b8 	.word	0x400200b8
 80057c8:	40020410 	.word	0x40020410
 80057cc:	40020428 	.word	0x40020428
 80057d0:	40020440 	.word	0x40020440
 80057d4:	40020458 	.word	0x40020458
 80057d8:	40020470 	.word	0x40020470
 80057dc:	40020488 	.word	0x40020488
 80057e0:	400204a0 	.word	0x400204a0
 80057e4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f023 020e 	bic.w	r2, r3, #14
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 020a 	orr.w	r2, r2, #10
 80057fa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005800:	2b00      	cmp	r3, #0
 8005802:	d007      	beq.n	8005814 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0204 	orr.w	r2, r2, #4
 8005812:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a83      	ldr	r2, [pc, #524]	; (8005a28 <HAL_DMA_Start_IT+0x474>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d072      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a82      	ldr	r2, [pc, #520]	; (8005a2c <HAL_DMA_Start_IT+0x478>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d06d      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a80      	ldr	r2, [pc, #512]	; (8005a30 <HAL_DMA_Start_IT+0x47c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d068      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a7f      	ldr	r2, [pc, #508]	; (8005a34 <HAL_DMA_Start_IT+0x480>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d063      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a7d      	ldr	r2, [pc, #500]	; (8005a38 <HAL_DMA_Start_IT+0x484>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d05e      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a7c      	ldr	r2, [pc, #496]	; (8005a3c <HAL_DMA_Start_IT+0x488>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d059      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a7a      	ldr	r2, [pc, #488]	; (8005a40 <HAL_DMA_Start_IT+0x48c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d054      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a79      	ldr	r2, [pc, #484]	; (8005a44 <HAL_DMA_Start_IT+0x490>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d04f      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a77      	ldr	r2, [pc, #476]	; (8005a48 <HAL_DMA_Start_IT+0x494>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d04a      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a76      	ldr	r2, [pc, #472]	; (8005a4c <HAL_DMA_Start_IT+0x498>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d045      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a74      	ldr	r2, [pc, #464]	; (8005a50 <HAL_DMA_Start_IT+0x49c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d040      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a73      	ldr	r2, [pc, #460]	; (8005a54 <HAL_DMA_Start_IT+0x4a0>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d03b      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a71      	ldr	r2, [pc, #452]	; (8005a58 <HAL_DMA_Start_IT+0x4a4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d036      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a70      	ldr	r2, [pc, #448]	; (8005a5c <HAL_DMA_Start_IT+0x4a8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d031      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a6e      	ldr	r2, [pc, #440]	; (8005a60 <HAL_DMA_Start_IT+0x4ac>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d02c      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a6d      	ldr	r2, [pc, #436]	; (8005a64 <HAL_DMA_Start_IT+0x4b0>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d027      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a6b      	ldr	r2, [pc, #428]	; (8005a68 <HAL_DMA_Start_IT+0x4b4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d022      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a6a      	ldr	r2, [pc, #424]	; (8005a6c <HAL_DMA_Start_IT+0x4b8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d01d      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a68      	ldr	r2, [pc, #416]	; (8005a70 <HAL_DMA_Start_IT+0x4bc>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d018      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a67      	ldr	r2, [pc, #412]	; (8005a74 <HAL_DMA_Start_IT+0x4c0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d013      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a65      	ldr	r2, [pc, #404]	; (8005a78 <HAL_DMA_Start_IT+0x4c4>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00e      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a64      	ldr	r2, [pc, #400]	; (8005a7c <HAL_DMA_Start_IT+0x4c8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d009      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a62      	ldr	r2, [pc, #392]	; (8005a80 <HAL_DMA_Start_IT+0x4cc>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_DMA_Start_IT+0x350>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a61      	ldr	r2, [pc, #388]	; (8005a84 <HAL_DMA_Start_IT+0x4d0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d101      	bne.n	8005908 <HAL_DMA_Start_IT+0x354>
 8005904:	2301      	movs	r3, #1
 8005906:	e000      	b.n	800590a <HAL_DMA_Start_IT+0x356>
 8005908:	2300      	movs	r3, #0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01a      	beq.n	8005944 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800592a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800593e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005942:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a37      	ldr	r2, [pc, #220]	; (8005a28 <HAL_DMA_Start_IT+0x474>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d04a      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a36      	ldr	r2, [pc, #216]	; (8005a2c <HAL_DMA_Start_IT+0x478>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d045      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a34      	ldr	r2, [pc, #208]	; (8005a30 <HAL_DMA_Start_IT+0x47c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d040      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a33      	ldr	r2, [pc, #204]	; (8005a34 <HAL_DMA_Start_IT+0x480>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d03b      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a31      	ldr	r2, [pc, #196]	; (8005a38 <HAL_DMA_Start_IT+0x484>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d036      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a30      	ldr	r2, [pc, #192]	; (8005a3c <HAL_DMA_Start_IT+0x488>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d031      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a2e      	ldr	r2, [pc, #184]	; (8005a40 <HAL_DMA_Start_IT+0x48c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d02c      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2d      	ldr	r2, [pc, #180]	; (8005a44 <HAL_DMA_Start_IT+0x490>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d027      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <HAL_DMA_Start_IT+0x494>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d022      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <HAL_DMA_Start_IT+0x498>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d01d      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a28      	ldr	r2, [pc, #160]	; (8005a50 <HAL_DMA_Start_IT+0x49c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d018      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a27      	ldr	r2, [pc, #156]	; (8005a54 <HAL_DMA_Start_IT+0x4a0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a25      	ldr	r2, [pc, #148]	; (8005a58 <HAL_DMA_Start_IT+0x4a4>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00e      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a24      	ldr	r2, [pc, #144]	; (8005a5c <HAL_DMA_Start_IT+0x4a8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d009      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a22      	ldr	r2, [pc, #136]	; (8005a60 <HAL_DMA_Start_IT+0x4ac>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <HAL_DMA_Start_IT+0x430>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a21      	ldr	r2, [pc, #132]	; (8005a64 <HAL_DMA_Start_IT+0x4b0>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d108      	bne.n	80059f6 <HAL_DMA_Start_IT+0x442>
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e012      	b.n	8005a1c <HAL_DMA_Start_IT+0x468>
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e009      	b.n	8005a1c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40020010 	.word	0x40020010
 8005a2c:	40020028 	.word	0x40020028
 8005a30:	40020040 	.word	0x40020040
 8005a34:	40020058 	.word	0x40020058
 8005a38:	40020070 	.word	0x40020070
 8005a3c:	40020088 	.word	0x40020088
 8005a40:	400200a0 	.word	0x400200a0
 8005a44:	400200b8 	.word	0x400200b8
 8005a48:	40020410 	.word	0x40020410
 8005a4c:	40020428 	.word	0x40020428
 8005a50:	40020440 	.word	0x40020440
 8005a54:	40020458 	.word	0x40020458
 8005a58:	40020470 	.word	0x40020470
 8005a5c:	40020488 	.word	0x40020488
 8005a60:	400204a0 	.word	0x400204a0
 8005a64:	400204b8 	.word	0x400204b8
 8005a68:	58025408 	.word	0x58025408
 8005a6c:	5802541c 	.word	0x5802541c
 8005a70:	58025430 	.word	0x58025430
 8005a74:	58025444 	.word	0x58025444
 8005a78:	58025458 	.word	0x58025458
 8005a7c:	5802546c 	.word	0x5802546c
 8005a80:	58025480 	.word	0x58025480
 8005a84:	58025494 	.word	0x58025494

08005a88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e237      	b.n	8005f0a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b02      	cmp	r3, #2
 8005aa4:	d004      	beq.n	8005ab0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2280      	movs	r2, #128	; 0x80
 8005aaa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e22c      	b.n	8005f0a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a5c      	ldr	r2, [pc, #368]	; (8005c28 <HAL_DMA_Abort_IT+0x1a0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d04a      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a5b      	ldr	r2, [pc, #364]	; (8005c2c <HAL_DMA_Abort_IT+0x1a4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d045      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a59      	ldr	r2, [pc, #356]	; (8005c30 <HAL_DMA_Abort_IT+0x1a8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d040      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a58      	ldr	r2, [pc, #352]	; (8005c34 <HAL_DMA_Abort_IT+0x1ac>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d03b      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a56      	ldr	r2, [pc, #344]	; (8005c38 <HAL_DMA_Abort_IT+0x1b0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d036      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a55      	ldr	r2, [pc, #340]	; (8005c3c <HAL_DMA_Abort_IT+0x1b4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d031      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a53      	ldr	r2, [pc, #332]	; (8005c40 <HAL_DMA_Abort_IT+0x1b8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d02c      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a52      	ldr	r2, [pc, #328]	; (8005c44 <HAL_DMA_Abort_IT+0x1bc>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d027      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a50      	ldr	r2, [pc, #320]	; (8005c48 <HAL_DMA_Abort_IT+0x1c0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d022      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a4f      	ldr	r2, [pc, #316]	; (8005c4c <HAL_DMA_Abort_IT+0x1c4>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d01d      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a4d      	ldr	r2, [pc, #308]	; (8005c50 <HAL_DMA_Abort_IT+0x1c8>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d018      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a4c      	ldr	r2, [pc, #304]	; (8005c54 <HAL_DMA_Abort_IT+0x1cc>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d013      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a4a      	ldr	r2, [pc, #296]	; (8005c58 <HAL_DMA_Abort_IT+0x1d0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00e      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a49      	ldr	r2, [pc, #292]	; (8005c5c <HAL_DMA_Abort_IT+0x1d4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d009      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a47      	ldr	r2, [pc, #284]	; (8005c60 <HAL_DMA_Abort_IT+0x1d8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d004      	beq.n	8005b50 <HAL_DMA_Abort_IT+0xc8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a46      	ldr	r2, [pc, #280]	; (8005c64 <HAL_DMA_Abort_IT+0x1dc>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d101      	bne.n	8005b54 <HAL_DMA_Abort_IT+0xcc>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <HAL_DMA_Abort_IT+0xce>
 8005b54:	2300      	movs	r3, #0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 8086 	beq.w	8005c68 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2204      	movs	r2, #4
 8005b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2f      	ldr	r2, [pc, #188]	; (8005c28 <HAL_DMA_Abort_IT+0x1a0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d04a      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2e      	ldr	r2, [pc, #184]	; (8005c2c <HAL_DMA_Abort_IT+0x1a4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d045      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a2c      	ldr	r2, [pc, #176]	; (8005c30 <HAL_DMA_Abort_IT+0x1a8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d040      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a2b      	ldr	r2, [pc, #172]	; (8005c34 <HAL_DMA_Abort_IT+0x1ac>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d03b      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <HAL_DMA_Abort_IT+0x1b0>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d036      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a28      	ldr	r2, [pc, #160]	; (8005c3c <HAL_DMA_Abort_IT+0x1b4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d031      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a26      	ldr	r2, [pc, #152]	; (8005c40 <HAL_DMA_Abort_IT+0x1b8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d02c      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a25      	ldr	r2, [pc, #148]	; (8005c44 <HAL_DMA_Abort_IT+0x1bc>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d027      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a23      	ldr	r2, [pc, #140]	; (8005c48 <HAL_DMA_Abort_IT+0x1c0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d022      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a22      	ldr	r2, [pc, #136]	; (8005c4c <HAL_DMA_Abort_IT+0x1c4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d01d      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a20      	ldr	r2, [pc, #128]	; (8005c50 <HAL_DMA_Abort_IT+0x1c8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d018      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a1f      	ldr	r2, [pc, #124]	; (8005c54 <HAL_DMA_Abort_IT+0x1cc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d013      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <HAL_DMA_Abort_IT+0x1d0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00e      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a1c      	ldr	r2, [pc, #112]	; (8005c5c <HAL_DMA_Abort_IT+0x1d4>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d009      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1a      	ldr	r2, [pc, #104]	; (8005c60 <HAL_DMA_Abort_IT+0x1d8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <HAL_DMA_Abort_IT+0x17c>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a19      	ldr	r2, [pc, #100]	; (8005c64 <HAL_DMA_Abort_IT+0x1dc>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d108      	bne.n	8005c16 <HAL_DMA_Abort_IT+0x18e>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0201 	bic.w	r2, r2, #1
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e178      	b.n	8005f08 <HAL_DMA_Abort_IT+0x480>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0201 	bic.w	r2, r2, #1
 8005c24:	601a      	str	r2, [r3, #0]
 8005c26:	e16f      	b.n	8005f08 <HAL_DMA_Abort_IT+0x480>
 8005c28:	40020010 	.word	0x40020010
 8005c2c:	40020028 	.word	0x40020028
 8005c30:	40020040 	.word	0x40020040
 8005c34:	40020058 	.word	0x40020058
 8005c38:	40020070 	.word	0x40020070
 8005c3c:	40020088 	.word	0x40020088
 8005c40:	400200a0 	.word	0x400200a0
 8005c44:	400200b8 	.word	0x400200b8
 8005c48:	40020410 	.word	0x40020410
 8005c4c:	40020428 	.word	0x40020428
 8005c50:	40020440 	.word	0x40020440
 8005c54:	40020458 	.word	0x40020458
 8005c58:	40020470 	.word	0x40020470
 8005c5c:	40020488 	.word	0x40020488
 8005c60:	400204a0 	.word	0x400204a0
 8005c64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 020e 	bic.w	r2, r2, #14
 8005c76:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a6c      	ldr	r2, [pc, #432]	; (8005e30 <HAL_DMA_Abort_IT+0x3a8>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d04a      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a6b      	ldr	r2, [pc, #428]	; (8005e34 <HAL_DMA_Abort_IT+0x3ac>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d045      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a69      	ldr	r2, [pc, #420]	; (8005e38 <HAL_DMA_Abort_IT+0x3b0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d040      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a68      	ldr	r2, [pc, #416]	; (8005e3c <HAL_DMA_Abort_IT+0x3b4>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d03b      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a66      	ldr	r2, [pc, #408]	; (8005e40 <HAL_DMA_Abort_IT+0x3b8>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d036      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a65      	ldr	r2, [pc, #404]	; (8005e44 <HAL_DMA_Abort_IT+0x3bc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d031      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a63      	ldr	r2, [pc, #396]	; (8005e48 <HAL_DMA_Abort_IT+0x3c0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d02c      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a62      	ldr	r2, [pc, #392]	; (8005e4c <HAL_DMA_Abort_IT+0x3c4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d027      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a60      	ldr	r2, [pc, #384]	; (8005e50 <HAL_DMA_Abort_IT+0x3c8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d022      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a5f      	ldr	r2, [pc, #380]	; (8005e54 <HAL_DMA_Abort_IT+0x3cc>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d01d      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a5d      	ldr	r2, [pc, #372]	; (8005e58 <HAL_DMA_Abort_IT+0x3d0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d018      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a5c      	ldr	r2, [pc, #368]	; (8005e5c <HAL_DMA_Abort_IT+0x3d4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d013      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a5a      	ldr	r2, [pc, #360]	; (8005e60 <HAL_DMA_Abort_IT+0x3d8>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d00e      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a59      	ldr	r2, [pc, #356]	; (8005e64 <HAL_DMA_Abort_IT+0x3dc>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d009      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a57      	ldr	r2, [pc, #348]	; (8005e68 <HAL_DMA_Abort_IT+0x3e0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d004      	beq.n	8005d18 <HAL_DMA_Abort_IT+0x290>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a56      	ldr	r2, [pc, #344]	; (8005e6c <HAL_DMA_Abort_IT+0x3e4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d108      	bne.n	8005d2a <HAL_DMA_Abort_IT+0x2a2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0201 	bic.w	r2, r2, #1
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	e007      	b.n	8005d3a <HAL_DMA_Abort_IT+0x2b2>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f022 0201 	bic.w	r2, r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a3c      	ldr	r2, [pc, #240]	; (8005e30 <HAL_DMA_Abort_IT+0x3a8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d072      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a3a      	ldr	r2, [pc, #232]	; (8005e34 <HAL_DMA_Abort_IT+0x3ac>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d06d      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a39      	ldr	r2, [pc, #228]	; (8005e38 <HAL_DMA_Abort_IT+0x3b0>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d068      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a37      	ldr	r2, [pc, #220]	; (8005e3c <HAL_DMA_Abort_IT+0x3b4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d063      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a36      	ldr	r2, [pc, #216]	; (8005e40 <HAL_DMA_Abort_IT+0x3b8>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d05e      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a34      	ldr	r2, [pc, #208]	; (8005e44 <HAL_DMA_Abort_IT+0x3bc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d059      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a33      	ldr	r2, [pc, #204]	; (8005e48 <HAL_DMA_Abort_IT+0x3c0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d054      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a31      	ldr	r2, [pc, #196]	; (8005e4c <HAL_DMA_Abort_IT+0x3c4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d04f      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a30      	ldr	r2, [pc, #192]	; (8005e50 <HAL_DMA_Abort_IT+0x3c8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d04a      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2e      	ldr	r2, [pc, #184]	; (8005e54 <HAL_DMA_Abort_IT+0x3cc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d045      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2d      	ldr	r2, [pc, #180]	; (8005e58 <HAL_DMA_Abort_IT+0x3d0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d040      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a2b      	ldr	r2, [pc, #172]	; (8005e5c <HAL_DMA_Abort_IT+0x3d4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d03b      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a2a      	ldr	r2, [pc, #168]	; (8005e60 <HAL_DMA_Abort_IT+0x3d8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d036      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a28      	ldr	r2, [pc, #160]	; (8005e64 <HAL_DMA_Abort_IT+0x3dc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d031      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a27      	ldr	r2, [pc, #156]	; (8005e68 <HAL_DMA_Abort_IT+0x3e0>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d02c      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a25      	ldr	r2, [pc, #148]	; (8005e6c <HAL_DMA_Abort_IT+0x3e4>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d027      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a24      	ldr	r2, [pc, #144]	; (8005e70 <HAL_DMA_Abort_IT+0x3e8>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a22      	ldr	r2, [pc, #136]	; (8005e74 <HAL_DMA_Abort_IT+0x3ec>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01d      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a21      	ldr	r2, [pc, #132]	; (8005e78 <HAL_DMA_Abort_IT+0x3f0>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <HAL_DMA_Abort_IT+0x3f4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1e      	ldr	r2, [pc, #120]	; (8005e80 <HAL_DMA_Abort_IT+0x3f8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1c      	ldr	r2, [pc, #112]	; (8005e84 <HAL_DMA_Abort_IT+0x3fc>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a1b      	ldr	r2, [pc, #108]	; (8005e88 <HAL_DMA_Abort_IT+0x400>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_DMA_Abort_IT+0x3a2>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a19      	ldr	r2, [pc, #100]	; (8005e8c <HAL_DMA_Abort_IT+0x404>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d132      	bne.n	8005e90 <HAL_DMA_Abort_IT+0x408>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e031      	b.n	8005e92 <HAL_DMA_Abort_IT+0x40a>
 8005e2e:	bf00      	nop
 8005e30:	40020010 	.word	0x40020010
 8005e34:	40020028 	.word	0x40020028
 8005e38:	40020040 	.word	0x40020040
 8005e3c:	40020058 	.word	0x40020058
 8005e40:	40020070 	.word	0x40020070
 8005e44:	40020088 	.word	0x40020088
 8005e48:	400200a0 	.word	0x400200a0
 8005e4c:	400200b8 	.word	0x400200b8
 8005e50:	40020410 	.word	0x40020410
 8005e54:	40020428 	.word	0x40020428
 8005e58:	40020440 	.word	0x40020440
 8005e5c:	40020458 	.word	0x40020458
 8005e60:	40020470 	.word	0x40020470
 8005e64:	40020488 	.word	0x40020488
 8005e68:	400204a0 	.word	0x400204a0
 8005e6c:	400204b8 	.word	0x400204b8
 8005e70:	58025408 	.word	0x58025408
 8005e74:	5802541c 	.word	0x5802541c
 8005e78:	58025430 	.word	0x58025430
 8005e7c:	58025444 	.word	0x58025444
 8005e80:	58025458 	.word	0x58025458
 8005e84:	5802546c 	.word	0x5802546c
 8005e88:	58025480 	.word	0x58025480
 8005e8c:	58025494 	.word	0x58025494
 8005e90:	2300      	movs	r3, #0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d028      	beq.n	8005ee8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ea4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb0:	f003 031f 	and.w	r3, r3, #31
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005ec4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00c      	beq.n	8005ee8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ed8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005edc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005ee6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop

08005f14 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f22:	b2db      	uxtb	r3, r3
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f60:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a7f      	ldr	r2, [pc, #508]	; (8006164 <DMA_SetConfig+0x21c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d072      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a7d      	ldr	r2, [pc, #500]	; (8006168 <DMA_SetConfig+0x220>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d06d      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a7c      	ldr	r2, [pc, #496]	; (800616c <DMA_SetConfig+0x224>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d068      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a7a      	ldr	r2, [pc, #488]	; (8006170 <DMA_SetConfig+0x228>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d063      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a79      	ldr	r2, [pc, #484]	; (8006174 <DMA_SetConfig+0x22c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d05e      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a77      	ldr	r2, [pc, #476]	; (8006178 <DMA_SetConfig+0x230>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d059      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a76      	ldr	r2, [pc, #472]	; (800617c <DMA_SetConfig+0x234>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d054      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a74      	ldr	r2, [pc, #464]	; (8006180 <DMA_SetConfig+0x238>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d04f      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a73      	ldr	r2, [pc, #460]	; (8006184 <DMA_SetConfig+0x23c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d04a      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a71      	ldr	r2, [pc, #452]	; (8006188 <DMA_SetConfig+0x240>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d045      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a70      	ldr	r2, [pc, #448]	; (800618c <DMA_SetConfig+0x244>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d040      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a6e      	ldr	r2, [pc, #440]	; (8006190 <DMA_SetConfig+0x248>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d03b      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a6d      	ldr	r2, [pc, #436]	; (8006194 <DMA_SetConfig+0x24c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d036      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a6b      	ldr	r2, [pc, #428]	; (8006198 <DMA_SetConfig+0x250>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d031      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a6a      	ldr	r2, [pc, #424]	; (800619c <DMA_SetConfig+0x254>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d02c      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a68      	ldr	r2, [pc, #416]	; (80061a0 <DMA_SetConfig+0x258>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d027      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a67      	ldr	r2, [pc, #412]	; (80061a4 <DMA_SetConfig+0x25c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d022      	beq.n	8006052 <DMA_SetConfig+0x10a>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a65      	ldr	r2, [pc, #404]	; (80061a8 <DMA_SetConfig+0x260>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d01d      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a64      	ldr	r2, [pc, #400]	; (80061ac <DMA_SetConfig+0x264>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d018      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a62      	ldr	r2, [pc, #392]	; (80061b0 <DMA_SetConfig+0x268>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d013      	beq.n	8006052 <DMA_SetConfig+0x10a>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a61      	ldr	r2, [pc, #388]	; (80061b4 <DMA_SetConfig+0x26c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d00e      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a5f      	ldr	r2, [pc, #380]	; (80061b8 <DMA_SetConfig+0x270>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d009      	beq.n	8006052 <DMA_SetConfig+0x10a>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a5e      	ldr	r2, [pc, #376]	; (80061bc <DMA_SetConfig+0x274>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d004      	beq.n	8006052 <DMA_SetConfig+0x10a>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a5c      	ldr	r2, [pc, #368]	; (80061c0 <DMA_SetConfig+0x278>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d101      	bne.n	8006056 <DMA_SetConfig+0x10e>
 8006052:	2301      	movs	r3, #1
 8006054:	e000      	b.n	8006058 <DMA_SetConfig+0x110>
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006064:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006076:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a39      	ldr	r2, [pc, #228]	; (8006164 <DMA_SetConfig+0x21c>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d04a      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a38      	ldr	r2, [pc, #224]	; (8006168 <DMA_SetConfig+0x220>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d045      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a36      	ldr	r2, [pc, #216]	; (800616c <DMA_SetConfig+0x224>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d040      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a35      	ldr	r2, [pc, #212]	; (8006170 <DMA_SetConfig+0x228>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d03b      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a33      	ldr	r2, [pc, #204]	; (8006174 <DMA_SetConfig+0x22c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d036      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a32      	ldr	r2, [pc, #200]	; (8006178 <DMA_SetConfig+0x230>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d031      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a30      	ldr	r2, [pc, #192]	; (800617c <DMA_SetConfig+0x234>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d02c      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2f      	ldr	r2, [pc, #188]	; (8006180 <DMA_SetConfig+0x238>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d027      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a2d      	ldr	r2, [pc, #180]	; (8006184 <DMA_SetConfig+0x23c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d022      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2c      	ldr	r2, [pc, #176]	; (8006188 <DMA_SetConfig+0x240>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d01d      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a2a      	ldr	r2, [pc, #168]	; (800618c <DMA_SetConfig+0x244>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d018      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a29      	ldr	r2, [pc, #164]	; (8006190 <DMA_SetConfig+0x248>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d013      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a27      	ldr	r2, [pc, #156]	; (8006194 <DMA_SetConfig+0x24c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00e      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a26      	ldr	r2, [pc, #152]	; (8006198 <DMA_SetConfig+0x250>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d009      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a24      	ldr	r2, [pc, #144]	; (800619c <DMA_SetConfig+0x254>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <DMA_SetConfig+0x1d0>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a23      	ldr	r2, [pc, #140]	; (80061a0 <DMA_SetConfig+0x258>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d101      	bne.n	800611c <DMA_SetConfig+0x1d4>
 8006118:	2301      	movs	r3, #1
 800611a:	e000      	b.n	800611e <DMA_SetConfig+0x1d6>
 800611c:	2300      	movs	r3, #0
 800611e:	2b00      	cmp	r3, #0
 8006120:	d059      	beq.n	80061d6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006126:	f003 031f 	and.w	r3, r3, #31
 800612a:	223f      	movs	r2, #63	; 0x3f
 800612c:	409a      	lsls	r2, r3
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006140:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	2b40      	cmp	r3, #64	; 0x40
 8006150:	d138      	bne.n	80061c4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006162:	e086      	b.n	8006272 <DMA_SetConfig+0x32a>
 8006164:	40020010 	.word	0x40020010
 8006168:	40020028 	.word	0x40020028
 800616c:	40020040 	.word	0x40020040
 8006170:	40020058 	.word	0x40020058
 8006174:	40020070 	.word	0x40020070
 8006178:	40020088 	.word	0x40020088
 800617c:	400200a0 	.word	0x400200a0
 8006180:	400200b8 	.word	0x400200b8
 8006184:	40020410 	.word	0x40020410
 8006188:	40020428 	.word	0x40020428
 800618c:	40020440 	.word	0x40020440
 8006190:	40020458 	.word	0x40020458
 8006194:	40020470 	.word	0x40020470
 8006198:	40020488 	.word	0x40020488
 800619c:	400204a0 	.word	0x400204a0
 80061a0:	400204b8 	.word	0x400204b8
 80061a4:	58025408 	.word	0x58025408
 80061a8:	5802541c 	.word	0x5802541c
 80061ac:	58025430 	.word	0x58025430
 80061b0:	58025444 	.word	0x58025444
 80061b4:	58025458 	.word	0x58025458
 80061b8:	5802546c 	.word	0x5802546c
 80061bc:	58025480 	.word	0x58025480
 80061c0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	60da      	str	r2, [r3, #12]
}
 80061d4:	e04d      	b.n	8006272 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a29      	ldr	r2, [pc, #164]	; (8006280 <DMA_SetConfig+0x338>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d022      	beq.n	8006226 <DMA_SetConfig+0x2de>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a27      	ldr	r2, [pc, #156]	; (8006284 <DMA_SetConfig+0x33c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01d      	beq.n	8006226 <DMA_SetConfig+0x2de>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a26      	ldr	r2, [pc, #152]	; (8006288 <DMA_SetConfig+0x340>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d018      	beq.n	8006226 <DMA_SetConfig+0x2de>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a24      	ldr	r2, [pc, #144]	; (800628c <DMA_SetConfig+0x344>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <DMA_SetConfig+0x2de>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a23      	ldr	r2, [pc, #140]	; (8006290 <DMA_SetConfig+0x348>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00e      	beq.n	8006226 <DMA_SetConfig+0x2de>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a21      	ldr	r2, [pc, #132]	; (8006294 <DMA_SetConfig+0x34c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d009      	beq.n	8006226 <DMA_SetConfig+0x2de>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a20      	ldr	r2, [pc, #128]	; (8006298 <DMA_SetConfig+0x350>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d004      	beq.n	8006226 <DMA_SetConfig+0x2de>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1e      	ldr	r2, [pc, #120]	; (800629c <DMA_SetConfig+0x354>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d101      	bne.n	800622a <DMA_SetConfig+0x2e2>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <DMA_SetConfig+0x2e4>
 800622a:	2300      	movs	r3, #0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d020      	beq.n	8006272 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006234:	f003 031f 	and.w	r3, r3, #31
 8006238:	2201      	movs	r2, #1
 800623a:	409a      	lsls	r2, r3
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b40      	cmp	r3, #64	; 0x40
 800624e:	d108      	bne.n	8006262 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	60da      	str	r2, [r3, #12]
}
 8006260:	e007      	b.n	8006272 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	60da      	str	r2, [r3, #12]
}
 8006272:	bf00      	nop
 8006274:	371c      	adds	r7, #28
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	58025408 	.word	0x58025408
 8006284:	5802541c 	.word	0x5802541c
 8006288:	58025430 	.word	0x58025430
 800628c:	58025444 	.word	0x58025444
 8006290:	58025458 	.word	0x58025458
 8006294:	5802546c 	.word	0x5802546c
 8006298:	58025480 	.word	0x58025480
 800629c:	58025494 	.word	0x58025494

080062a0 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e033      	b.n	800631a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fc fac4 	bl	8002854 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f854 	bl	8006380 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f822 	bl	8006322 <FMAC_Reset>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d10c      	bne.n	80062fe <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e8:	f043 0210 	orr.w	r2, r3, #16
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	22a0      	movs	r2, #160	; 0xa0
 80062f4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
 80062fc:	e008      	b.n	8006310 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2220      	movs	r2, #32
 8006308:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800632a:	f7fd fb9b 	bl	8003a64 <HAL_GetTick>
 800632e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800633e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006340:	e00f      	b.n	8006362 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8006342:	f7fd fb8f 	bl	8003a64 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006350:	d907      	bls.n	8006362 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006356:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e00a      	b.n	8006378 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e8      	bne.n	8006342 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f807 	bl	800639c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f81b 	bl	80063ca <FMAC_ResetOutputStateAndDataPointers>
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2200      	movs	r2, #0
 80063b4:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2220      	movs	r2, #32
 80063ba:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr

080063ca <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80063ca:	b480      	push	{r7}
 80063cc:	b083      	sub	sp, #12
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b089      	sub	sp, #36	; 0x24
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006402:	2300      	movs	r3, #0
 8006404:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006406:	4b86      	ldr	r3, [pc, #536]	; (8006620 <HAL_GPIO_Init+0x228>)
 8006408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800640a:	e18c      	b.n	8006726 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	2101      	movs	r1, #1
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	fa01 f303 	lsl.w	r3, r1, r3
 8006418:	4013      	ands	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 817e 	beq.w	8006720 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	2b01      	cmp	r3, #1
 800642e:	d005      	beq.n	800643c <HAL_GPIO_Init+0x44>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d130      	bne.n	800649e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	2203      	movs	r2, #3
 8006448:	fa02 f303 	lsl.w	r3, r2, r3
 800644c:	43db      	mvns	r3, r3
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	4013      	ands	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	68da      	ldr	r2, [r3, #12]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	4313      	orrs	r3, r2
 8006464:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006472:	2201      	movs	r2, #1
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	fa02 f303 	lsl.w	r3, r2, r3
 800647a:	43db      	mvns	r3, r3
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	4013      	ands	r3, r2
 8006480:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	091b      	lsrs	r3, r3, #4
 8006488:	f003 0201 	and.w	r2, r3, #1
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	fa02 f303 	lsl.w	r3, r2, r3
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	4313      	orrs	r3, r2
 8006496:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d017      	beq.n	80064da <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	2203      	movs	r2, #3
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	43db      	mvns	r3, r3
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	4013      	ands	r3, r2
 80064c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	689a      	ldr	r2, [r3, #8]
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f003 0303 	and.w	r3, r3, #3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d123      	bne.n	800652e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	08da      	lsrs	r2, r3, #3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3208      	adds	r2, #8
 80064ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	220f      	movs	r2, #15
 80064fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006502:	43db      	mvns	r3, r3
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	4013      	ands	r3, r2
 8006508:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	fa02 f303 	lsl.w	r3, r2, r3
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	4313      	orrs	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	08da      	lsrs	r2, r3, #3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3208      	adds	r2, #8
 8006528:	69b9      	ldr	r1, [r7, #24]
 800652a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	005b      	lsls	r3, r3, #1
 8006538:	2203      	movs	r2, #3
 800653a:	fa02 f303 	lsl.w	r3, r2, r3
 800653e:	43db      	mvns	r3, r3
 8006540:	69ba      	ldr	r2, [r7, #24]
 8006542:	4013      	ands	r3, r2
 8006544:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f003 0203 	and.w	r2, r3, #3
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	fa02 f303 	lsl.w	r3, r2, r3
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	4313      	orrs	r3, r2
 800655a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 80d8 	beq.w	8006720 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006570:	4b2c      	ldr	r3, [pc, #176]	; (8006624 <HAL_GPIO_Init+0x22c>)
 8006572:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006576:	4a2b      	ldr	r2, [pc, #172]	; (8006624 <HAL_GPIO_Init+0x22c>)
 8006578:	f043 0302 	orr.w	r3, r3, #2
 800657c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006580:	4b28      	ldr	r3, [pc, #160]	; (8006624 <HAL_GPIO_Init+0x22c>)
 8006582:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800658e:	4a26      	ldr	r2, [pc, #152]	; (8006628 <HAL_GPIO_Init+0x230>)
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	089b      	lsrs	r3, r3, #2
 8006594:	3302      	adds	r3, #2
 8006596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800659a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	220f      	movs	r2, #15
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	43db      	mvns	r3, r3
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	4013      	ands	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1d      	ldr	r2, [pc, #116]	; (800662c <HAL_GPIO_Init+0x234>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d04a      	beq.n	8006650 <HAL_GPIO_Init+0x258>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a1c      	ldr	r2, [pc, #112]	; (8006630 <HAL_GPIO_Init+0x238>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d02b      	beq.n	800661a <HAL_GPIO_Init+0x222>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a1b      	ldr	r2, [pc, #108]	; (8006634 <HAL_GPIO_Init+0x23c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d025      	beq.n	8006616 <HAL_GPIO_Init+0x21e>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a1a      	ldr	r2, [pc, #104]	; (8006638 <HAL_GPIO_Init+0x240>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d01f      	beq.n	8006612 <HAL_GPIO_Init+0x21a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a19      	ldr	r2, [pc, #100]	; (800663c <HAL_GPIO_Init+0x244>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d019      	beq.n	800660e <HAL_GPIO_Init+0x216>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a18      	ldr	r2, [pc, #96]	; (8006640 <HAL_GPIO_Init+0x248>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d013      	beq.n	800660a <HAL_GPIO_Init+0x212>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a17      	ldr	r2, [pc, #92]	; (8006644 <HAL_GPIO_Init+0x24c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d00d      	beq.n	8006606 <HAL_GPIO_Init+0x20e>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a16      	ldr	r2, [pc, #88]	; (8006648 <HAL_GPIO_Init+0x250>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d007      	beq.n	8006602 <HAL_GPIO_Init+0x20a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a15      	ldr	r2, [pc, #84]	; (800664c <HAL_GPIO_Init+0x254>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d101      	bne.n	80065fe <HAL_GPIO_Init+0x206>
 80065fa:	2309      	movs	r3, #9
 80065fc:	e029      	b.n	8006652 <HAL_GPIO_Init+0x25a>
 80065fe:	230a      	movs	r3, #10
 8006600:	e027      	b.n	8006652 <HAL_GPIO_Init+0x25a>
 8006602:	2307      	movs	r3, #7
 8006604:	e025      	b.n	8006652 <HAL_GPIO_Init+0x25a>
 8006606:	2306      	movs	r3, #6
 8006608:	e023      	b.n	8006652 <HAL_GPIO_Init+0x25a>
 800660a:	2305      	movs	r3, #5
 800660c:	e021      	b.n	8006652 <HAL_GPIO_Init+0x25a>
 800660e:	2304      	movs	r3, #4
 8006610:	e01f      	b.n	8006652 <HAL_GPIO_Init+0x25a>
 8006612:	2303      	movs	r3, #3
 8006614:	e01d      	b.n	8006652 <HAL_GPIO_Init+0x25a>
 8006616:	2302      	movs	r3, #2
 8006618:	e01b      	b.n	8006652 <HAL_GPIO_Init+0x25a>
 800661a:	2301      	movs	r3, #1
 800661c:	e019      	b.n	8006652 <HAL_GPIO_Init+0x25a>
 800661e:	bf00      	nop
 8006620:	58000080 	.word	0x58000080
 8006624:	58024400 	.word	0x58024400
 8006628:	58000400 	.word	0x58000400
 800662c:	58020000 	.word	0x58020000
 8006630:	58020400 	.word	0x58020400
 8006634:	58020800 	.word	0x58020800
 8006638:	58020c00 	.word	0x58020c00
 800663c:	58021000 	.word	0x58021000
 8006640:	58021400 	.word	0x58021400
 8006644:	58021800 	.word	0x58021800
 8006648:	58021c00 	.word	0x58021c00
 800664c:	58022400 	.word	0x58022400
 8006650:	2300      	movs	r3, #0
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	f002 0203 	and.w	r2, r2, #3
 8006658:	0092      	lsls	r2, r2, #2
 800665a:	4093      	lsls	r3, r2
 800665c:	69ba      	ldr	r2, [r7, #24]
 800665e:	4313      	orrs	r3, r2
 8006660:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006662:	4938      	ldr	r1, [pc, #224]	; (8006744 <HAL_GPIO_Init+0x34c>)
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	089b      	lsrs	r3, r3, #2
 8006668:	3302      	adds	r3, #2
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006670:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	43db      	mvns	r3, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4013      	ands	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	4313      	orrs	r3, r2
 8006694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006696:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800669e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	43db      	mvns	r3, r3
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	4013      	ands	r3, r2
 80066ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80066c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	43db      	mvns	r3, r3
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	4013      	ands	r3, r2
 80066da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d003      	beq.n	80066f0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	4313      	orrs	r3, r2
 80066ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	43db      	mvns	r3, r3
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	4013      	ands	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	69ba      	ldr	r2, [r7, #24]
 800671e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	3301      	adds	r3, #1
 8006724:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	fa22 f303 	lsr.w	r3, r2, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	f47f ae6b 	bne.w	800640c <HAL_GPIO_Init+0x14>
  }
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	3724      	adds	r7, #36	; 0x24
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr
 8006744:	58000400 	.word	0x58000400

08006748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	807b      	strh	r3, [r7, #2]
 8006754:	4613      	mov	r3, r2
 8006756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006758:	787b      	ldrb	r3, [r7, #1]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800675e:	887a      	ldrh	r2, [r7, #2]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006764:	e003      	b.n	800676e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006766:	887b      	ldrh	r3, [r7, #2]
 8006768:	041a      	lsls	r2, r3, #16
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	619a      	str	r2, [r3, #24]
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
	...

0800677c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e07f      	b.n	800688e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7fc f878 	bl	8002898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2224      	movs	r2, #36	; 0x24
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f022 0201 	bic.w	r2, r2, #1
 80067be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d107      	bne.n	80067f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	689a      	ldr	r2, [r3, #8]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067f2:	609a      	str	r2, [r3, #8]
 80067f4:	e006      	b.n	8006804 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006802:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	2b02      	cmp	r3, #2
 800680a:	d104      	bne.n	8006816 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006814:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	6859      	ldr	r1, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681a      	ldr	r2, [r3, #0]
 8006820:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <HAL_I2C_Init+0x11c>)
 8006822:	430b      	orrs	r3, r1
 8006824:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	68da      	ldr	r2, [r3, #12]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006834:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	691a      	ldr	r2, [r3, #16]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	69d9      	ldr	r1, [r3, #28]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a1a      	ldr	r2, [r3, #32]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0201 	orr.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	02008000 	.word	0x02008000

0800689c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	607a      	str	r2, [r7, #4]
 80068a6:	461a      	mov	r2, r3
 80068a8:	460b      	mov	r3, r1
 80068aa:	817b      	strh	r3, [r7, #10]
 80068ac:	4613      	mov	r3, r2
 80068ae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	f040 80da 	bne.w	8006a72 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_I2C_Master_Transmit+0x30>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e0d3      	b.n	8006a74 <HAL_I2C_Master_Transmit+0x1d8>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068d4:	f7fd f8c6 	bl	8003a64 <HAL_GetTick>
 80068d8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	2319      	movs	r3, #25
 80068e0:	2201      	movs	r2, #1
 80068e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80068e6:	68f8      	ldr	r0, [r7, #12]
 80068e8:	f001 ff70 	bl	80087cc <I2C_WaitOnFlagUntilTimeout>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d001      	beq.n	80068f6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e0be      	b.n	8006a74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2221      	movs	r2, #33	; 0x21
 80068fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2210      	movs	r2, #16
 8006902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	893a      	ldrh	r2, [r7, #8]
 8006916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006922:	b29b      	uxth	r3, r3
 8006924:	2bff      	cmp	r3, #255	; 0xff
 8006926:	d90e      	bls.n	8006946 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	22ff      	movs	r2, #255	; 0xff
 800692c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006932:	b2da      	uxtb	r2, r3
 8006934:	8979      	ldrh	r1, [r7, #10]
 8006936:	4b51      	ldr	r3, [pc, #324]	; (8006a7c <HAL_I2C_Master_Transmit+0x1e0>)
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f002 f980 	bl	8008c44 <I2C_TransferConfig>
 8006944:	e06c      	b.n	8006a20 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006954:	b2da      	uxtb	r2, r3
 8006956:	8979      	ldrh	r1, [r7, #10]
 8006958:	4b48      	ldr	r3, [pc, #288]	; (8006a7c <HAL_I2C_Master_Transmit+0x1e0>)
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f002 f96f 	bl	8008c44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006966:	e05b      	b.n	8006a20 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	6a39      	ldr	r1, [r7, #32]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f001 ff7c 	bl	800886a <I2C_WaitOnTXISFlagUntilTimeout>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d001      	beq.n	800697c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e07b      	b.n	8006a74 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	781a      	ldrb	r2, [r3, #0]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006996:	b29b      	uxth	r3, r3
 8006998:	3b01      	subs	r3, #1
 800699a:	b29a      	uxth	r2, r3
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a4:	3b01      	subs	r3, #1
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d034      	beq.n	8006a20 <HAL_I2C_Master_Transmit+0x184>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d130      	bne.n	8006a20 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	2200      	movs	r2, #0
 80069c6:	2180      	movs	r1, #128	; 0x80
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f001 feff 	bl	80087cc <I2C_WaitOnFlagUntilTimeout>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e04d      	b.n	8006a74 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069dc:	b29b      	uxth	r3, r3
 80069de:	2bff      	cmp	r3, #255	; 0xff
 80069e0:	d90e      	bls.n	8006a00 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	22ff      	movs	r2, #255	; 0xff
 80069e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	8979      	ldrh	r1, [r7, #10]
 80069f0:	2300      	movs	r3, #0
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f002 f923 	bl	8008c44 <I2C_TransferConfig>
 80069fe:	e00f      	b.n	8006a20 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a04:	b29a      	uxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	8979      	ldrh	r1, [r7, #10]
 8006a12:	2300      	movs	r3, #0
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f002 f912 	bl	8008c44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d19e      	bne.n	8006968 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	6a39      	ldr	r1, [r7, #32]
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f001 ff62 	bl	80088f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a34:	4603      	mov	r3, r0
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e01a      	b.n	8006a74 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2220      	movs	r2, #32
 8006a44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	6859      	ldr	r1, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	4b0b      	ldr	r3, [pc, #44]	; (8006a80 <HAL_I2C_Master_Transmit+0x1e4>)
 8006a52:	400b      	ands	r3, r1
 8006a54:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	e000      	b.n	8006a74 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006a72:	2302      	movs	r3, #2
  }
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3718      	adds	r7, #24
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	80002000 	.word	0x80002000
 8006a80:	fe00e800 	.word	0xfe00e800

08006a84 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af02      	add	r7, sp, #8
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	607a      	str	r2, [r7, #4]
 8006a8e:	461a      	mov	r2, r3
 8006a90:	460b      	mov	r3, r1
 8006a92:	817b      	strh	r3, [r7, #10]
 8006a94:	4613      	mov	r3, r2
 8006a96:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	f040 80db 	bne.w	8006c5c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_I2C_Master_Receive+0x30>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e0d4      	b.n	8006c5e <HAL_I2C_Master_Receive+0x1da>
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006abc:	f7fc ffd2 	bl	8003a64 <HAL_GetTick>
 8006ac0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	2319      	movs	r3, #25
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f001 fe7c 	bl	80087cc <I2C_WaitOnFlagUntilTimeout>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d001      	beq.n	8006ade <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e0bf      	b.n	8006c5e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2222      	movs	r2, #34	; 0x22
 8006ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2210      	movs	r2, #16
 8006aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	893a      	ldrh	r2, [r7, #8]
 8006afe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	2bff      	cmp	r3, #255	; 0xff
 8006b0e:	d90e      	bls.n	8006b2e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	22ff      	movs	r2, #255	; 0xff
 8006b14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b1a:	b2da      	uxtb	r2, r3
 8006b1c:	8979      	ldrh	r1, [r7, #10]
 8006b1e:	4b52      	ldr	r3, [pc, #328]	; (8006c68 <HAL_I2C_Master_Receive+0x1e4>)
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f002 f88c 	bl	8008c44 <I2C_TransferConfig>
 8006b2c:	e06d      	b.n	8006c0a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	8979      	ldrh	r1, [r7, #10]
 8006b40:	4b49      	ldr	r3, [pc, #292]	; (8006c68 <HAL_I2C_Master_Receive+0x1e4>)
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f002 f87b 	bl	8008c44 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006b4e:	e05c      	b.n	8006c0a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	6a39      	ldr	r1, [r7, #32]
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f001 ff13 	bl	8008980 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e07c      	b.n	8006c5e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	b2d2      	uxtb	r2, r2
 8006b70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	b29a      	uxth	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d034      	beq.n	8006c0a <HAL_I2C_Master_Receive+0x186>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d130      	bne.n	8006c0a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	2180      	movs	r1, #128	; 0x80
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f001 fe0a 	bl	80087cc <I2C_WaitOnFlagUntilTimeout>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e04d      	b.n	8006c5e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	2bff      	cmp	r3, #255	; 0xff
 8006bca:	d90e      	bls.n	8006bea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	22ff      	movs	r2, #255	; 0xff
 8006bd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	8979      	ldrh	r1, [r7, #10]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f002 f82e 	bl	8008c44 <I2C_TransferConfig>
 8006be8:	e00f      	b.n	8006c0a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	8979      	ldrh	r1, [r7, #10]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	9300      	str	r3, [sp, #0]
 8006c00:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f002 f81d 	bl	8008c44 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d19d      	bne.n	8006b50 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	6a39      	ldr	r1, [r7, #32]
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f001 fe6d 	bl	80088f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d001      	beq.n	8006c28 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e01a      	b.n	8006c5e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	6859      	ldr	r1, [r3, #4]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	4b0c      	ldr	r3, [pc, #48]	; (8006c6c <HAL_I2C_Master_Receive+0x1e8>)
 8006c3c:	400b      	ands	r3, r1
 8006c3e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2220      	movs	r2, #32
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2200      	movs	r2, #0
 8006c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e000      	b.n	8006c5e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006c5c:	2302      	movs	r3, #2
  }
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3718      	adds	r7, #24
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	80002400 	.word	0x80002400
 8006c6c:	fe00e800 	.word	0xfe00e800

08006c70 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b088      	sub	sp, #32
 8006c74:	af02      	add	r7, sp, #8
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	607a      	str	r2, [r7, #4]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	817b      	strh	r3, [r7, #10]
 8006c80:	4613      	mov	r3, r2
 8006c82:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d153      	bne.n	8006d38 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c9e:	d101      	bne.n	8006ca4 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e04a      	b.n	8006d3a <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_I2C_Master_Receive_IT+0x42>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e043      	b.n	8006d3a <HAL_I2C_Master_Receive_IT+0xca>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2222      	movs	r2, #34	; 0x22
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2210      	movs	r2, #16
 8006cc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	893a      	ldrh	r2, [r7, #8]
 8006cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4a19      	ldr	r2, [pc, #100]	; (8006d44 <HAL_I2C_Master_Receive_IT+0xd4>)
 8006ce0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4a18      	ldr	r2, [pc, #96]	; (8006d48 <HAL_I2C_Master_Receive_IT+0xd8>)
 8006ce6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	2bff      	cmp	r3, #255	; 0xff
 8006cf0:	d906      	bls.n	8006d00 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	22ff      	movs	r2, #255	; 0xff
 8006cf6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006cf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	e007      	b.n	8006d10 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006d0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d0e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	8979      	ldrh	r1, [r7, #10]
 8006d18:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <HAL_I2C_Master_Receive_IT+0xdc>)
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f001 ff90 	bl	8008c44 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006d2c:	2102      	movs	r1, #2
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f001 ffba 	bl	8008ca8 <I2C_Enable_IRQ>

    return HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	e000      	b.n	8006d3a <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006d38:	2302      	movs	r3, #2
  }
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	ffff0000 	.word	0xffff0000
 8006d48:	08007001 	.word	0x08007001
 8006d4c:	80002400 	.word	0x80002400

08006d50 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	607a      	str	r2, [r7, #4]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	817b      	strh	r3, [r7, #10]
 8006d60:	4613      	mov	r3, r2
 8006d62:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	2b20      	cmp	r3, #32
 8006d6e:	f040 80cd 	bne.w	8006f0c <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	699b      	ldr	r3, [r3, #24]
 8006d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d80:	d101      	bne.n	8006d86 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 8006d82:	2302      	movs	r3, #2
 8006d84:	e0c3      	b.n	8006f0e <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_I2C_Master_Transmit_DMA+0x44>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e0bc      	b.n	8006f0e <HAL_I2C_Master_Transmit_DMA+0x1be>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2221      	movs	r2, #33	; 0x21
 8006da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2210      	movs	r2, #16
 8006da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2200      	movs	r2, #0
 8006db0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	893a      	ldrh	r2, [r7, #8]
 8006dbc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4a55      	ldr	r2, [pc, #340]	; (8006f18 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 8006dc2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	4a55      	ldr	r2, [pc, #340]	; (8006f1c <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 8006dc8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2bff      	cmp	r3, #255	; 0xff
 8006dd2:	d906      	bls.n	8006de2 <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	22ff      	movs	r2, #255	; 0xff
 8006dd8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006dda:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e007      	b.n	8006df2 <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006dec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006df0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d070      	beq.n	8006edc <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d020      	beq.n	8006e44 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e06:	4a46      	ldr	r2, [pc, #280]	; (8006f20 <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8006e08:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e0e:	4a45      	ldr	r2, [pc, #276]	; (8006f24 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 8006e10:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e16:	2200      	movs	r2, #0
 8006e18:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	2200      	movs	r2, #0
 8006e20:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006e26:	6879      	ldr	r1, [r7, #4]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	3328      	adds	r3, #40	; 0x28
 8006e2e:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8006e34:	f7fe fbbe 	bl	80055b4 <HAL_DMA_Start_IT>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006e3c:	7cfb      	ldrb	r3, [r7, #19]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d138      	bne.n	8006eb4 <HAL_I2C_Master_Transmit_DMA+0x164>
 8006e42:	e013      	b.n	8006e6c <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e050      	b.n	8006f0e <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e70:	b2da      	uxtb	r2, r3
 8006e72:	8979      	ldrh	r1, [r7, #10]
 8006e74:	4b2c      	ldr	r3, [pc, #176]	; (8006f28 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f001 fee2 	bl	8008c44 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006e9a:	2110      	movs	r1, #16
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f001 ff03 	bl	8008ca8 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	e029      	b.n	8006f08 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec8:	f043 0210 	orr.w	r2, r3, #16
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e018      	b.n	8006f0e <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4a13      	ldr	r2, [pc, #76]	; (8006f2c <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 8006ee0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee6:	b2da      	uxtb	r2, r3
 8006ee8:	8979      	ldrh	r1, [r7, #10]
 8006eea:	4b0f      	ldr	r3, [pc, #60]	; (8006f28 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f001 fea6 	bl	8008c44 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f00:	2101      	movs	r1, #1
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f001 fed0 	bl	8008ca8 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e000      	b.n	8006f0e <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8006f0c:	2302      	movs	r3, #2
  }
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	ffff0000 	.word	0xffff0000
 8006f1c:	08007429 	.word	0x08007429
 8006f20:	08008487 	.word	0x08008487
 8006f24:	0800851d 	.word	0x0800851d
 8006f28:	80002000 	.word	0x80002000
 8006f2c:	08007001 	.word	0x08007001

08006f30 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006f38:	bf00      	nop
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006f60:	bf00      	nop
 8006f62:	370c      	adds	r7, #12
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b083      	sub	sp, #12
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006f74:	bf00      	nop
 8006f76:	370c      	adds	r7, #12
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b088      	sub	sp, #32
 8007004:	af02      	add	r7, sp, #8
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007016:	2b01      	cmp	r3, #1
 8007018:	d101      	bne.n	800701e <I2C_Master_ISR_IT+0x1e>
 800701a:	2302      	movs	r3, #2
 800701c:	e108      	b.n	8007230 <I2C_Master_ISR_IT+0x230>
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2201      	movs	r2, #1
 8007022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f003 0310 	and.w	r3, r3, #16
 800702c:	2b00      	cmp	r3, #0
 800702e:	d012      	beq.n	8007056 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00d      	beq.n	8007056 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2210      	movs	r2, #16
 8007040:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007046:	f043 0204 	orr.w	r2, r3, #4
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 f9f5 	bl	800843e <I2C_Flush_TXDR>
 8007054:	e0d9      	b.n	800720a <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d022      	beq.n	80070a6 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01d      	beq.n	80070a6 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f023 0304 	bic.w	r3, r3, #4
 8007070:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707c:	b2d2      	uxtb	r2, r2
 800707e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	1c5a      	adds	r2, r3, #1
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800708e:	3b01      	subs	r3, #1
 8007090:	b29a      	uxth	r2, r3
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800709a:	b29b      	uxth	r3, r3
 800709c:	3b01      	subs	r3, #1
 800709e:	b29a      	uxth	r2, r3
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070a4:	e0b1      	b.n	800720a <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	f003 0302 	and.w	r3, r3, #2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01d      	beq.n	80070ec <I2C_Master_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d018      	beq.n	80070ec <I2C_Master_ISR_IT+0xec>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070ea:	e08e      	b.n	800720a <I2C_Master_ISR_IT+0x20a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d05c      	beq.n	80071b0 <I2C_Master_ISR_IT+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d057      	beq.n	80071b0 <I2C_Master_ISR_IT+0x1b0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d040      	beq.n	800718c <I2C_Master_ISR_IT+0x18c>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710e:	2b00      	cmp	r3, #0
 8007110:	d13c      	bne.n	800718c <I2C_Master_ISR_IT+0x18c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	b29b      	uxth	r3, r3
 800711a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800711e:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007124:	b29b      	uxth	r3, r3
 8007126:	2bff      	cmp	r3, #255	; 0xff
 8007128:	d90e      	bls.n	8007148 <I2C_Master_ISR_IT+0x148>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	22ff      	movs	r2, #255	; 0xff
 800712e:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007134:	b2da      	uxtb	r2, r3
 8007136:	8a79      	ldrh	r1, [r7, #18]
 8007138:	2300      	movs	r3, #0
 800713a:	9300      	str	r3, [sp, #0]
 800713c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007140:	68f8      	ldr	r0, [r7, #12]
 8007142:	f001 fd7f 	bl	8008c44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007146:	e032      	b.n	80071ae <I2C_Master_ISR_IT+0x1ae>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800715a:	d00b      	beq.n	8007174 <I2C_Master_ISR_IT+0x174>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007160:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007166:	8a79      	ldrh	r1, [r7, #18]
 8007168:	2000      	movs	r0, #0
 800716a:	9000      	str	r0, [sp, #0]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f001 fd69 	bl	8008c44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007172:	e01c      	b.n	80071ae <I2C_Master_ISR_IT+0x1ae>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007178:	b2da      	uxtb	r2, r3
 800717a:	8a79      	ldrh	r1, [r7, #18]
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f001 fd5d 	bl	8008c44 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800718a:	e010      	b.n	80071ae <I2C_Master_ISR_IT+0x1ae>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007196:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800719a:	d003      	beq.n	80071a4 <I2C_Master_ISR_IT+0x1a4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f000 fc8b 	bl	8007ab8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071a2:	e032      	b.n	800720a <I2C_Master_ISR_IT+0x20a>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80071a4:	2140      	movs	r1, #64	; 0x40
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f001 f832 	bl	8008210 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071ac:	e02d      	b.n	800720a <I2C_Master_ISR_IT+0x20a>
 80071ae:	e02c      	b.n	800720a <I2C_Master_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d027      	beq.n	800720a <I2C_Master_ISR_IT+0x20a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d022      	beq.n	800720a <I2C_Master_ISR_IT+0x20a>
  {
    if (hi2c->XferCount == 0U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d119      	bne.n	8007202 <I2C_Master_ISR_IT+0x202>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80071dc:	d015      	beq.n	800720a <I2C_Master_ISR_IT+0x20a>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071e6:	d108      	bne.n	80071fa <I2C_Master_ISR_IT+0x1fa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071f6:	605a      	str	r2, [r3, #4]
 80071f8:	e007      	b.n	800720a <I2C_Master_ISR_IT+0x20a>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 fc5c 	bl	8007ab8 <I2C_ITMasterSeqCplt>
 8007200:	e003      	b.n	800720a <I2C_Master_ISR_IT+0x20a>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007202:	2140      	movs	r1, #64	; 0x40
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f001 f803 	bl	8008210 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f003 0320 	and.w	r3, r3, #32
 8007210:	2b00      	cmp	r3, #0
 8007212:	d008      	beq.n	8007226 <I2C_Master_ISR_IT+0x226>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <I2C_Master_ISR_IT+0x226>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800721e:	6979      	ldr	r1, [r7, #20]
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fce3 	bl	8007bec <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007254:	2b01      	cmp	r3, #1
 8007256:	d101      	bne.n	800725c <I2C_Slave_ISR_IT+0x24>
 8007258:	2302      	movs	r3, #2
 800725a:	e0e1      	b.n	8007420 <I2C_Slave_ISR_IT+0x1e8>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	d008      	beq.n	8007280 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007278:	6939      	ldr	r1, [r7, #16]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 fd7e 	bl	8007d7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	f003 0310 	and.w	r3, r3, #16
 8007286:	2b00      	cmp	r3, #0
 8007288:	d04b      	beq.n	8007322 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007290:	2b00      	cmp	r3, #0
 8007292:	d046      	beq.n	8007322 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007298:	b29b      	uxth	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d128      	bne.n	80072f0 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b28      	cmp	r3, #40	; 0x28
 80072a8:	d108      	bne.n	80072bc <I2C_Slave_ISR_IT+0x84>
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072b0:	d104      	bne.n	80072bc <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80072b2:	6939      	ldr	r1, [r7, #16]
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 ff57 	bl	8008168 <I2C_ITListenCplt>
 80072ba:	e031      	b.n	8007320 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072c2:	b2db      	uxtb	r3, r3
 80072c4:	2b29      	cmp	r3, #41	; 0x29
 80072c6:	d10e      	bne.n	80072e6 <I2C_Slave_ISR_IT+0xae>
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072ce:	d00a      	beq.n	80072e6 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2210      	movs	r2, #16
 80072d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f001 f8b0 	bl	800843e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f000 fc27 	bl	8007b32 <I2C_ITSlaveSeqCplt>
 80072e4:	e01c      	b.n	8007320 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2210      	movs	r2, #16
 80072ec:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80072ee:	e08f      	b.n	8007410 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2210      	movs	r2, #16
 80072f6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fc:	f043 0204 	orr.w	r2, r3, #4
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d003      	beq.n	8007312 <I2C_Slave_ISR_IT+0xda>
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007310:	d17e      	bne.n	8007410 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007316:	4619      	mov	r1, r3
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f000 ff79 	bl	8008210 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800731e:	e077      	b.n	8007410 <I2C_Slave_ISR_IT+0x1d8>
 8007320:	e076      	b.n	8007410 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f003 0304 	and.w	r3, r3, #4
 8007328:	2b00      	cmp	r3, #0
 800732a:	d02f      	beq.n	800738c <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007332:	2b00      	cmp	r3, #0
 8007334:	d02a      	beq.n	800738c <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800733a:	b29b      	uxth	r3, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	d018      	beq.n	8007372 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735c:	3b01      	subs	r3, #1
 800735e:	b29a      	uxth	r2, r3
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b01      	subs	r3, #1
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007376:	b29b      	uxth	r3, r3
 8007378:	2b00      	cmp	r3, #0
 800737a:	d14b      	bne.n	8007414 <I2C_Slave_ISR_IT+0x1dc>
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007382:	d047      	beq.n	8007414 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fbd4 	bl	8007b32 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800738a:	e043      	b.n	8007414 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	f003 0308 	and.w	r3, r3, #8
 8007392:	2b00      	cmp	r3, #0
 8007394:	d009      	beq.n	80073aa <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800739c:	2b00      	cmp	r3, #0
 800739e:	d004      	beq.n	80073aa <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80073a0:	6939      	ldr	r1, [r7, #16]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fb04 	bl	80079b0 <I2C_ITAddrCplt>
 80073a8:	e035      	b.n	8007416 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f003 0302 	and.w	r3, r3, #2
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d030      	beq.n	8007416 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d02b      	beq.n	8007416 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d018      	beq.n	80073fa <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d8:	1c5a      	adds	r2, r3, #1
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	3b01      	subs	r3, #1
 80073e6:	b29a      	uxth	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	851a      	strh	r2, [r3, #40]	; 0x28
 80073f8:	e00d      	b.n	8007416 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007400:	d002      	beq.n	8007408 <I2C_Slave_ISR_IT+0x1d0>
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d106      	bne.n	8007416 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 fb92 	bl	8007b32 <I2C_ITSlaveSeqCplt>
 800740e:	e002      	b.n	8007416 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8007410:	bf00      	nop
 8007412:	e000      	b.n	8007416 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8007414:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b088      	sub	sp, #32
 800742c:	af02      	add	r7, sp, #8
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <I2C_Master_ISR_DMA+0x1a>
 800743e:	2302      	movs	r3, #2
 8007440:	e0d9      	b.n	80075f6 <I2C_Master_ISR_DMA+0x1ce>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f003 0310 	and.w	r3, r3, #16
 8007450:	2b00      	cmp	r3, #0
 8007452:	d016      	beq.n	8007482 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800745a:	2b00      	cmp	r3, #0
 800745c:	d011      	beq.n	8007482 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2210      	movs	r2, #16
 8007464:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800746a:	f043 0204 	orr.w	r2, r3, #4
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007472:	2120      	movs	r1, #32
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	f001 fc17 	bl	8008ca8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 ffdf 	bl	800843e <I2C_Flush_TXDR>
 8007480:	e0b4      	b.n	80075ec <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007488:	2b00      	cmp	r3, #0
 800748a:	d071      	beq.n	8007570 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007492:	2b00      	cmp	r3, #0
 8007494:	d06c      	beq.n	8007570 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074a4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d04e      	beq.n	800754e <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074bc:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	2bff      	cmp	r3, #255	; 0xff
 80074c6:	d906      	bls.n	80074d6 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	22ff      	movs	r2, #255	; 0xff
 80074cc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80074ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e010      	b.n	80074f8 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074e8:	d003      	beq.n	80074f2 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	e002      	b.n	80074f8 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80074f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074f6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	8a79      	ldrh	r1, [r7, #18]
 8007500:	2300      	movs	r3, #0
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f001 fb9c 	bl	8008c44 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007510:	b29a      	uxth	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	b29a      	uxth	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b22      	cmp	r3, #34	; 0x22
 8007528:	d108      	bne.n	800753c <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007538:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800753a:	e057      	b.n	80075ec <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800754a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800754c:	e04e      	b.n	80075ec <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007558:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800755c:	d003      	beq.n	8007566 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f000 faaa 	bl	8007ab8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007564:	e042      	b.n	80075ec <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007566:	2140      	movs	r1, #64	; 0x40
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 fe51 	bl	8008210 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800756e:	e03d      	b.n	80075ec <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007576:	2b00      	cmp	r3, #0
 8007578:	d028      	beq.n	80075cc <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007580:	2b00      	cmp	r3, #0
 8007582:	d023      	beq.n	80075cc <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007588:	b29b      	uxth	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d119      	bne.n	80075c2 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007598:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800759c:	d025      	beq.n	80075ea <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80075a6:	d108      	bne.n	80075ba <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075b6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80075b8:	e017      	b.n	80075ea <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f000 fa7c 	bl	8007ab8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80075c0:	e013      	b.n	80075ea <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80075c2:	2140      	movs	r1, #64	; 0x40
 80075c4:	68f8      	ldr	r0, [r7, #12]
 80075c6:	f000 fe23 	bl	8008210 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80075ca:	e00e      	b.n	80075ea <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f003 0320 	and.w	r3, r3, #32
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80075e0:	68b9      	ldr	r1, [r7, #8]
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	f000 fb02 	bl	8007bec <I2C_ITMasterCplt>
 80075e8:	e000      	b.n	80075ec <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80075ea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b088      	sub	sp, #32
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800761c:	2b01      	cmp	r3, #1
 800761e:	d101      	bne.n	8007624 <I2C_Slave_ISR_DMA+0x24>
 8007620:	2302      	movs	r3, #2
 8007622:	e1c0      	b.n	80079a6 <I2C_Slave_ISR_DMA+0x3a6>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d008      	beq.n	8007648 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800763c:	2b00      	cmp	r3, #0
 800763e:	d003      	beq.n	8007648 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 fb9a 	bl	8007d7c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f003 0310 	and.w	r3, r3, #16
 800764e:	2b00      	cmp	r3, #0
 8007650:	f000 8196 	beq.w	8007980 <I2C_Slave_ISR_DMA+0x380>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800765a:	2b00      	cmp	r3, #0
 800765c:	f000 8190 	beq.w	8007980 <I2C_Slave_ISR_DMA+0x380>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d105      	bne.n	8007676 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 817e 	beq.w	8007972 <I2C_Slave_ISR_DMA+0x372>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767a:	2b00      	cmp	r3, #0
 800767c:	d07b      	beq.n	8007776 <I2C_Slave_ISR_DMA+0x176>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d076      	beq.n	8007776 <I2C_Slave_ISR_DMA+0x176>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a74      	ldr	r2, [pc, #464]	; (8007860 <I2C_Slave_ISR_DMA+0x260>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d059      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a72      	ldr	r2, [pc, #456]	; (8007864 <I2C_Slave_ISR_DMA+0x264>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d053      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a70      	ldr	r2, [pc, #448]	; (8007868 <I2C_Slave_ISR_DMA+0x268>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d04d      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a6e      	ldr	r2, [pc, #440]	; (800786c <I2C_Slave_ISR_DMA+0x26c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d047      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a6c      	ldr	r2, [pc, #432]	; (8007870 <I2C_Slave_ISR_DMA+0x270>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d041      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a6a      	ldr	r2, [pc, #424]	; (8007874 <I2C_Slave_ISR_DMA+0x274>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d03b      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a68      	ldr	r2, [pc, #416]	; (8007878 <I2C_Slave_ISR_DMA+0x278>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d035      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a66      	ldr	r2, [pc, #408]	; (800787c <I2C_Slave_ISR_DMA+0x27c>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d02f      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a64      	ldr	r2, [pc, #400]	; (8007880 <I2C_Slave_ISR_DMA+0x280>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d029      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a62      	ldr	r2, [pc, #392]	; (8007884 <I2C_Slave_ISR_DMA+0x284>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d023      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a60      	ldr	r2, [pc, #384]	; (8007888 <I2C_Slave_ISR_DMA+0x288>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d01d      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a5e      	ldr	r2, [pc, #376]	; (800788c <I2C_Slave_ISR_DMA+0x28c>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d017      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a5c      	ldr	r2, [pc, #368]	; (8007890 <I2C_Slave_ISR_DMA+0x290>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d011      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a5a      	ldr	r2, [pc, #360]	; (8007894 <I2C_Slave_ISR_DMA+0x294>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00b      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a58      	ldr	r2, [pc, #352]	; (8007898 <I2C_Slave_ISR_DMA+0x298>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d005      	beq.n	8007748 <I2C_Slave_ISR_DMA+0x148>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a56      	ldr	r2, [pc, #344]	; (800789c <I2C_Slave_ISR_DMA+0x29c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d109      	bne.n	800775c <I2C_Slave_ISR_DMA+0x15c>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	bf0c      	ite	eq
 8007754:	2301      	moveq	r3, #1
 8007756:	2300      	movne	r3, #0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	e008      	b.n	800776e <I2C_Slave_ISR_DMA+0x16e>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	bf0c      	ite	eq
 8007768:	2301      	moveq	r3, #1
 800776a:	2300      	movne	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <I2C_Slave_ISR_DMA+0x176>
          {
            treatdmanack = 1U;
 8007772:	2301      	movs	r3, #1
 8007774:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 809d 	beq.w	80078ba <I2C_Slave_ISR_DMA+0x2ba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 8097 	beq.w	80078ba <I2C_Slave_ISR_DMA+0x2ba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a33      	ldr	r2, [pc, #204]	; (8007860 <I2C_Slave_ISR_DMA+0x260>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d059      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a31      	ldr	r2, [pc, #196]	; (8007864 <I2C_Slave_ISR_DMA+0x264>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d053      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a2f      	ldr	r2, [pc, #188]	; (8007868 <I2C_Slave_ISR_DMA+0x268>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d04d      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a2d      	ldr	r2, [pc, #180]	; (800786c <I2C_Slave_ISR_DMA+0x26c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d047      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a2b      	ldr	r2, [pc, #172]	; (8007870 <I2C_Slave_ISR_DMA+0x270>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d041      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a29      	ldr	r2, [pc, #164]	; (8007874 <I2C_Slave_ISR_DMA+0x274>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d03b      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a27      	ldr	r2, [pc, #156]	; (8007878 <I2C_Slave_ISR_DMA+0x278>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d035      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a25      	ldr	r2, [pc, #148]	; (800787c <I2C_Slave_ISR_DMA+0x27c>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d02f      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a23      	ldr	r2, [pc, #140]	; (8007880 <I2C_Slave_ISR_DMA+0x280>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d029      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a21      	ldr	r2, [pc, #132]	; (8007884 <I2C_Slave_ISR_DMA+0x284>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d023      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a1f      	ldr	r2, [pc, #124]	; (8007888 <I2C_Slave_ISR_DMA+0x288>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d01d      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a1d      	ldr	r2, [pc, #116]	; (800788c <I2C_Slave_ISR_DMA+0x28c>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d017      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a1b      	ldr	r2, [pc, #108]	; (8007890 <I2C_Slave_ISR_DMA+0x290>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d011      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a19      	ldr	r2, [pc, #100]	; (8007894 <I2C_Slave_ISR_DMA+0x294>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d00b      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a17      	ldr	r2, [pc, #92]	; (8007898 <I2C_Slave_ISR_DMA+0x298>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d005      	beq.n	800784c <I2C_Slave_ISR_DMA+0x24c>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a15      	ldr	r2, [pc, #84]	; (800789c <I2C_Slave_ISR_DMA+0x29c>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d129      	bne.n	80078a0 <I2C_Slave_ISR_DMA+0x2a0>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	bf0c      	ite	eq
 8007858:	2301      	moveq	r3, #1
 800785a:	2300      	movne	r3, #0
 800785c:	b2db      	uxtb	r3, r3
 800785e:	e028      	b.n	80078b2 <I2C_Slave_ISR_DMA+0x2b2>
 8007860:	40020010 	.word	0x40020010
 8007864:	40020028 	.word	0x40020028
 8007868:	40020040 	.word	0x40020040
 800786c:	40020058 	.word	0x40020058
 8007870:	40020070 	.word	0x40020070
 8007874:	40020088 	.word	0x40020088
 8007878:	400200a0 	.word	0x400200a0
 800787c:	400200b8 	.word	0x400200b8
 8007880:	40020410 	.word	0x40020410
 8007884:	40020428 	.word	0x40020428
 8007888:	40020440 	.word	0x40020440
 800788c:	40020458 	.word	0x40020458
 8007890:	40020470 	.word	0x40020470
 8007894:	40020488 	.word	0x40020488
 8007898:	400204a0 	.word	0x400204a0
 800789c:	400204b8 	.word	0x400204b8
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bf0c      	ite	eq
 80078ac:	2301      	moveq	r3, #1
 80078ae:	2300      	movne	r3, #0
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <I2C_Slave_ISR_DMA+0x2ba>
          {
            treatdmanack = 1U;
 80078b6:	2301      	movs	r3, #1
 80078b8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d128      	bne.n	8007912 <I2C_Slave_ISR_DMA+0x312>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b28      	cmp	r3, #40	; 0x28
 80078ca:	d108      	bne.n	80078de <I2C_Slave_ISR_DMA+0x2de>
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078d2:	d104      	bne.n	80078de <I2C_Slave_ISR_DMA+0x2de>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80078d4:	68b9      	ldr	r1, [r7, #8]
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f000 fc46 	bl	8008168 <I2C_ITListenCplt>
 80078dc:	e048      	b.n	8007970 <I2C_Slave_ISR_DMA+0x370>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b29      	cmp	r3, #41	; 0x29
 80078e8:	d10e      	bne.n	8007908 <I2C_Slave_ISR_DMA+0x308>
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078f0:	d00a      	beq.n	8007908 <I2C_Slave_ISR_DMA+0x308>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2210      	movs	r2, #16
 80078f8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80078fa:	68f8      	ldr	r0, [r7, #12]
 80078fc:	f000 fd9f 	bl	800843e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f000 f916 	bl	8007b32 <I2C_ITSlaveSeqCplt>
 8007906:	e033      	b.n	8007970 <I2C_Slave_ISR_DMA+0x370>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2210      	movs	r2, #16
 800790e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007910:	e034      	b.n	800797c <I2C_Slave_ISR_DMA+0x37c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2210      	movs	r2, #16
 8007918:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800791e:	f043 0204 	orr.w	r2, r3, #4
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800792c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d003      	beq.n	800793c <I2C_Slave_ISR_DMA+0x33c>
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800793a:	d11f      	bne.n	800797c <I2C_Slave_ISR_DMA+0x37c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800793c:	7dfb      	ldrb	r3, [r7, #23]
 800793e:	2b21      	cmp	r3, #33	; 0x21
 8007940:	d002      	beq.n	8007948 <I2C_Slave_ISR_DMA+0x348>
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	2b29      	cmp	r3, #41	; 0x29
 8007946:	d103      	bne.n	8007950 <I2C_Slave_ISR_DMA+0x350>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2221      	movs	r2, #33	; 0x21
 800794c:	631a      	str	r2, [r3, #48]	; 0x30
 800794e:	e008      	b.n	8007962 <I2C_Slave_ISR_DMA+0x362>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007950:	7dfb      	ldrb	r3, [r7, #23]
 8007952:	2b22      	cmp	r3, #34	; 0x22
 8007954:	d002      	beq.n	800795c <I2C_Slave_ISR_DMA+0x35c>
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	2b2a      	cmp	r3, #42	; 0x2a
 800795a:	d102      	bne.n	8007962 <I2C_Slave_ISR_DMA+0x362>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2222      	movs	r2, #34	; 0x22
 8007960:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007966:	4619      	mov	r1, r3
 8007968:	68f8      	ldr	r0, [r7, #12]
 800796a:	f000 fc51 	bl	8008210 <I2C_ITError>
      if (treatdmanack == 1U)
 800796e:	e005      	b.n	800797c <I2C_Slave_ISR_DMA+0x37c>
 8007970:	e004      	b.n	800797c <I2C_Slave_ISR_DMA+0x37c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2210      	movs	r2, #16
 8007978:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800797a:	e00f      	b.n	800799c <I2C_Slave_ISR_DMA+0x39c>
      if (treatdmanack == 1U)
 800797c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800797e:	e00d      	b.n	800799c <I2C_Slave_ISR_DMA+0x39c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	f003 0308 	and.w	r3, r3, #8
 8007986:	2b00      	cmp	r3, #0
 8007988:	d008      	beq.n	800799c <I2C_Slave_ISR_DMA+0x39c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <I2C_Slave_ISR_DMA+0x39c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007994:	68b9      	ldr	r1, [r7, #8]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f80a 	bl	80079b0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079a4:	2300      	movs	r3, #0
}
 80079a6:	4618      	mov	r0, r3
 80079a8:	3720      	adds	r7, #32
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop

080079b0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b084      	sub	sp, #16
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80079c6:	2b28      	cmp	r3, #40	; 0x28
 80079c8:	d16a      	bne.n	8007aa0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	699b      	ldr	r3, [r3, #24]
 80079d0:	0c1b      	lsrs	r3, r3, #16
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	0c1b      	lsrs	r3, r3, #16
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80079e8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079f6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007a04:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	d138      	bne.n	8007a80 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007a0e:	897b      	ldrh	r3, [r7, #10]
 8007a10:	09db      	lsrs	r3, r3, #7
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	89bb      	ldrh	r3, [r7, #12]
 8007a16:	4053      	eors	r3, r2
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	f003 0306 	and.w	r3, r3, #6
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d11c      	bne.n	8007a5c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007a22:	897b      	ldrh	r3, [r7, #10]
 8007a24:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d13b      	bne.n	8007ab0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2208      	movs	r2, #8
 8007a44:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007a4e:	89ba      	ldrh	r2, [r7, #12]
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
 8007a52:	4619      	mov	r1, r3
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff fa93 	bl	8006f80 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007a5a:	e029      	b.n	8007ab0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007a5c:	893b      	ldrh	r3, [r7, #8]
 8007a5e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007a60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f001 f989 	bl	8008d7c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007a72:	89ba      	ldrh	r2, [r7, #12]
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
 8007a76:	4619      	mov	r1, r3
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f7ff fa81 	bl	8006f80 <HAL_I2C_AddrCallback>
}
 8007a7e:	e017      	b.n	8007ab0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f979 	bl	8008d7c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007a92:	89ba      	ldrh	r2, [r7, #12]
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4619      	mov	r1, r3
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff fa71 	bl	8006f80 <HAL_I2C_AddrCallback>
}
 8007a9e:	e007      	b.n	8007ab0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007ab0:	bf00      	nop
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b21      	cmp	r3, #33	; 0x21
 8007ad2:	d115      	bne.n	8007b00 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2220      	movs	r2, #32
 8007ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2211      	movs	r2, #17
 8007ae0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007ae8:	2101      	movs	r1, #1
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f001 f946 	bl	8008d7c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fa19 	bl	8006f30 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007afe:	e014      	b.n	8007b2a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2212      	movs	r2, #18
 8007b0c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007b14:	2102      	movs	r1, #2
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 f930 	bl	8008d7c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f7ff fa0d 	bl	8006f44 <HAL_I2C_MasterRxCpltCallback>
}
 8007b2a:	bf00      	nop
 8007b2c:	3708      	adds	r7, #8
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d008      	beq.n	8007b66 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b62:	601a      	str	r2, [r3, #0]
 8007b64:	e00c      	b.n	8007b80 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d007      	beq.n	8007b80 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b7e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b29      	cmp	r3, #41	; 0x29
 8007b8a:	d112      	bne.n	8007bb2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2228      	movs	r2, #40	; 0x28
 8007b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2221      	movs	r2, #33	; 0x21
 8007b98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f001 f8ed 	bl	8008d7c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff f9d4 	bl	8006f58 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007bb0:	e017      	b.n	8007be2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b2a      	cmp	r3, #42	; 0x2a
 8007bbc:	d111      	bne.n	8007be2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2228      	movs	r2, #40	; 0x28
 8007bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2222      	movs	r2, #34	; 0x22
 8007bca:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007bcc:	2102      	movs	r1, #2
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 f8d4 	bl	8008d7c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff f9c5 	bl	8006f6c <HAL_I2C_SlaveRxCpltCallback>
}
 8007be2:	bf00      	nop
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
	...

08007bec <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b21      	cmp	r3, #33	; 0x21
 8007c0c:	d107      	bne.n	8007c1e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007c0e:	2101      	movs	r1, #1
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f001 f8b3 	bl	8008d7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2211      	movs	r2, #17
 8007c1a:	631a      	str	r2, [r3, #48]	; 0x30
 8007c1c:	e00c      	b.n	8007c38 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b22      	cmp	r3, #34	; 0x22
 8007c28:	d106      	bne.n	8007c38 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007c2a:	2102      	movs	r1, #2
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f001 f8a5 	bl	8008d7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2212      	movs	r2, #18
 8007c36:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6859      	ldr	r1, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b4c      	ldr	r3, [pc, #304]	; (8007d74 <I2C_ITMasterCplt+0x188>)
 8007c44:	400b      	ands	r3, r1
 8007c46:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a49      	ldr	r2, [pc, #292]	; (8007d78 <I2C_ITMasterCplt+0x18c>)
 8007c52:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	f003 0310 	and.w	r3, r3, #16
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d009      	beq.n	8007c72 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	2210      	movs	r2, #16
 8007c64:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c6a:	f043 0204 	orr.w	r2, r3, #4
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b60      	cmp	r3, #96	; 0x60
 8007c7c:	d10a      	bne.n	8007c94 <I2C_ITMasterCplt+0xa8>
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d005      	beq.n	8007c94 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8007c92:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fbd2 	bl	800843e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c9e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	2b60      	cmp	r3, #96	; 0x60
 8007caa:	d002      	beq.n	8007cb2 <I2C_ITMasterCplt+0xc6>
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d006      	beq.n	8007cc0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 faa9 	bl	8008210 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007cbe:	e054      	b.n	8007d6a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	2b21      	cmp	r3, #33	; 0x21
 8007cca:	d124      	bne.n	8007d16 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d10b      	bne.n	8007cfe <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff f95a 	bl	8006fb0 <HAL_I2C_MemTxCpltCallback>
}
 8007cfc:	e035      	b.n	8007d6a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff f90e 	bl	8006f30 <HAL_I2C_MasterTxCpltCallback>
}
 8007d14:	e029      	b.n	8007d6a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b22      	cmp	r3, #34	; 0x22
 8007d20:	d123      	bne.n	8007d6a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2220      	movs	r2, #32
 8007d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	d10b      	bne.n	8007d54 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7ff f939 	bl	8006fc4 <HAL_I2C_MemRxCpltCallback>
}
 8007d52:	e00a      	b.n	8007d6a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff f8ed 	bl	8006f44 <HAL_I2C_MasterRxCpltCallback>
}
 8007d6a:	bf00      	nop
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	fe00e800 	.word	0xfe00e800
 8007d78:	ffff0000 	.word	0xffff0000

08007d7c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b086      	sub	sp, #24
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d98:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	2220      	movs	r2, #32
 8007da0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	2b21      	cmp	r3, #33	; 0x21
 8007da6:	d002      	beq.n	8007dae <I2C_ITSlaveCplt+0x32>
 8007da8:	7bfb      	ldrb	r3, [r7, #15]
 8007daa:	2b29      	cmp	r3, #41	; 0x29
 8007dac:	d108      	bne.n	8007dc0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007dae:	f248 0101 	movw	r1, #32769	; 0x8001
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 ffe2 	bl	8008d7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2221      	movs	r2, #33	; 0x21
 8007dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8007dbe:	e00d      	b.n	8007ddc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	2b22      	cmp	r3, #34	; 0x22
 8007dc4:	d002      	beq.n	8007dcc <I2C_ITSlaveCplt+0x50>
 8007dc6:	7bfb      	ldrb	r3, [r7, #15]
 8007dc8:	2b2a      	cmp	r3, #42	; 0x2a
 8007dca:	d107      	bne.n	8007ddc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007dcc:	f248 0102 	movw	r1, #32770	; 0x8002
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f000 ffd3 	bl	8008d7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2222      	movs	r2, #34	; 0x22
 8007dda:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dea:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	4b7f      	ldr	r3, [pc, #508]	; (8007ff4 <I2C_ITSlaveCplt+0x278>)
 8007df8:	400b      	ands	r3, r1
 8007dfa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 fb1e 	bl	800843e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d07a      	beq.n	8007f02 <I2C_ITSlaveCplt+0x186>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e1a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 8110 	beq.w	8008046 <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a72      	ldr	r2, [pc, #456]	; (8007ff8 <I2C_ITSlaveCplt+0x27c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d059      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a70      	ldr	r2, [pc, #448]	; (8007ffc <I2C_ITSlaveCplt+0x280>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d053      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a6e      	ldr	r2, [pc, #440]	; (8008000 <I2C_ITSlaveCplt+0x284>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d04d      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a6c      	ldr	r2, [pc, #432]	; (8008004 <I2C_ITSlaveCplt+0x288>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d047      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a6a      	ldr	r2, [pc, #424]	; (8008008 <I2C_ITSlaveCplt+0x28c>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d041      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a68      	ldr	r2, [pc, #416]	; (800800c <I2C_ITSlaveCplt+0x290>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d03b      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a66      	ldr	r2, [pc, #408]	; (8008010 <I2C_ITSlaveCplt+0x294>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d035      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a64      	ldr	r2, [pc, #400]	; (8008014 <I2C_ITSlaveCplt+0x298>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d02f      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a62      	ldr	r2, [pc, #392]	; (8008018 <I2C_ITSlaveCplt+0x29c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d029      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a60      	ldr	r2, [pc, #384]	; (800801c <I2C_ITSlaveCplt+0x2a0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d023      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a5e      	ldr	r2, [pc, #376]	; (8008020 <I2C_ITSlaveCplt+0x2a4>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d01d      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a5c      	ldr	r2, [pc, #368]	; (8008024 <I2C_ITSlaveCplt+0x2a8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d017      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a5a      	ldr	r2, [pc, #360]	; (8008028 <I2C_ITSlaveCplt+0x2ac>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d011      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a58      	ldr	r2, [pc, #352]	; (800802c <I2C_ITSlaveCplt+0x2b0>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00b      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a56      	ldr	r2, [pc, #344]	; (8008030 <I2C_ITSlaveCplt+0x2b4>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d005      	beq.n	8007ee6 <I2C_ITSlaveCplt+0x16a>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a54      	ldr	r2, [pc, #336]	; (8008034 <I2C_ITSlaveCplt+0x2b8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d105      	bne.n	8007ef2 <I2C_ITSlaveCplt+0x176>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	e004      	b.n	8007efc <I2C_ITSlaveCplt+0x180>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	8553      	strh	r3, [r2, #42]	; 0x2a
 8007f00:	e0a1      	b.n	8008046 <I2C_ITSlaveCplt+0x2ca>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 809c 	beq.w	8008046 <I2C_ITSlaveCplt+0x2ca>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f1c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 808f 	beq.w	8008046 <I2C_ITSlaveCplt+0x2ca>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a32      	ldr	r2, [pc, #200]	; (8007ff8 <I2C_ITSlaveCplt+0x27c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d059      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a30      	ldr	r2, [pc, #192]	; (8007ffc <I2C_ITSlaveCplt+0x280>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d053      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a2e      	ldr	r2, [pc, #184]	; (8008000 <I2C_ITSlaveCplt+0x284>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d04d      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a2c      	ldr	r2, [pc, #176]	; (8008004 <I2C_ITSlaveCplt+0x288>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d047      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a2a      	ldr	r2, [pc, #168]	; (8008008 <I2C_ITSlaveCplt+0x28c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d041      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a28      	ldr	r2, [pc, #160]	; (800800c <I2C_ITSlaveCplt+0x290>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d03b      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a26      	ldr	r2, [pc, #152]	; (8008010 <I2C_ITSlaveCplt+0x294>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d035      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a24      	ldr	r2, [pc, #144]	; (8008014 <I2C_ITSlaveCplt+0x298>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d02f      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a22      	ldr	r2, [pc, #136]	; (8008018 <I2C_ITSlaveCplt+0x29c>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d029      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a20      	ldr	r2, [pc, #128]	; (800801c <I2C_ITSlaveCplt+0x2a0>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d023      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a1e      	ldr	r2, [pc, #120]	; (8008020 <I2C_ITSlaveCplt+0x2a4>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d01d      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a1c      	ldr	r2, [pc, #112]	; (8008024 <I2C_ITSlaveCplt+0x2a8>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d017      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1a      	ldr	r2, [pc, #104]	; (8008028 <I2C_ITSlaveCplt+0x2ac>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d011      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a18      	ldr	r2, [pc, #96]	; (800802c <I2C_ITSlaveCplt+0x2b0>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00b      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a16      	ldr	r2, [pc, #88]	; (8008030 <I2C_ITSlaveCplt+0x2b4>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d005      	beq.n	8007fe8 <I2C_ITSlaveCplt+0x26c>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a14      	ldr	r2, [pc, #80]	; (8008034 <I2C_ITSlaveCplt+0x2b8>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d127      	bne.n	8008038 <I2C_ITSlaveCplt+0x2bc>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	e026      	b.n	8008042 <I2C_ITSlaveCplt+0x2c6>
 8007ff4:	fe00e800 	.word	0xfe00e800
 8007ff8:	40020010 	.word	0x40020010
 8007ffc:	40020028 	.word	0x40020028
 8008000:	40020040 	.word	0x40020040
 8008004:	40020058 	.word	0x40020058
 8008008:	40020070 	.word	0x40020070
 800800c:	40020088 	.word	0x40020088
 8008010:	400200a0 	.word	0x400200a0
 8008014:	400200b8 	.word	0x400200b8
 8008018:	40020410 	.word	0x40020410
 800801c:	40020428 	.word	0x40020428
 8008020:	40020440 	.word	0x40020440
 8008024:	40020458 	.word	0x40020458
 8008028:	40020470 	.word	0x40020470
 800802c:	40020488 	.word	0x40020488
 8008030:	400204a0 	.word	0x400204a0
 8008034:	400204b8 	.word	0x400204b8
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	b29b      	uxth	r3, r3
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	2b00      	cmp	r3, #0
 800804e:	d020      	beq.n	8008092 <I2C_ITSlaveCplt+0x316>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f023 0304 	bic.w	r3, r3, #4
 8008056:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008062:	b2d2      	uxtb	r2, r2
 8008064:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00c      	beq.n	8008092 <I2C_ITSlaveCplt+0x316>
    {
      hi2c->XferSize--;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008088:	b29b      	uxth	r3, r3
 800808a:	3b01      	subs	r3, #1
 800808c:	b29a      	uxth	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008096:	b29b      	uxth	r3, r3
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <I2C_ITSlaveCplt+0x32c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080a0:	f043 0204 	orr.w	r2, r3, #4
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d010      	beq.n	80080e0 <I2C_ITSlaveCplt+0x364>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f8a3 	bl	8008210 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b28      	cmp	r3, #40	; 0x28
 80080d4:	d141      	bne.n	800815a <I2C_ITSlaveCplt+0x3de>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80080d6:	6979      	ldr	r1, [r7, #20]
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f845 	bl	8008168 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80080de:	e03c      	b.n	800815a <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80080e8:	d014      	beq.n	8008114 <I2C_ITSlaveCplt+0x398>
    I2C_ITSlaveSeqCplt(hi2c);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff fd21 	bl	8007b32 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a1c      	ldr	r2, [pc, #112]	; (8008164 <I2C_ITSlaveCplt+0x3e8>)
 80080f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2220      	movs	r2, #32
 80080fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7fe ff45 	bl	8006f9c <HAL_I2C_ListenCpltCallback>
}
 8008112:	e022      	b.n	800815a <I2C_ITSlaveCplt+0x3de>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b22      	cmp	r3, #34	; 0x22
 800811e:	d10e      	bne.n	800813e <I2C_ITSlaveCplt+0x3c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2220      	movs	r2, #32
 8008124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2200      	movs	r2, #0
 800812c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fe ff18 	bl	8006f6c <HAL_I2C_SlaveRxCpltCallback>
}
 800813c:	e00d      	b.n	800815a <I2C_ITSlaveCplt+0x3de>
    hi2c->State = HAL_I2C_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2220      	movs	r2, #32
 8008142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f7fe feff 	bl	8006f58 <HAL_I2C_SlaveTxCpltCallback>
}
 800815a:	bf00      	nop
 800815c:	3718      	adds	r7, #24
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	bf00      	nop
 8008164:	ffff0000 	.word	0xffff0000

08008168 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a25      	ldr	r2, [pc, #148]	; (800820c <I2C_ITListenCplt+0xa4>)
 8008176:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2220      	movs	r2, #32
 8008182:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2200      	movs	r2, #0
 800818a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	f003 0304 	and.w	r3, r3, #4
 800819a:	2b00      	cmp	r3, #0
 800819c:	d022      	beq.n	80081e4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	b2d2      	uxtb	r2, r2
 80081aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d012      	beq.n	80081e4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081c2:	3b01      	subs	r3, #1
 80081c4:	b29a      	uxth	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b29a      	uxth	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081dc:	f043 0204 	orr.w	r2, r3, #4
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80081e4:	f248 0103 	movw	r1, #32771	; 0x8003
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fdc7 	bl	8008d7c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2210      	movs	r2, #16
 80081f4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f7fe fecc 	bl	8006f9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}
 800820c:	ffff0000 	.word	0xffff0000

08008210 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a6d      	ldr	r2, [pc, #436]	; (80083e4 <I2C_ITError+0x1d4>)
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	2b28      	cmp	r3, #40	; 0x28
 8008246:	d005      	beq.n	8008254 <I2C_ITError+0x44>
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	2b29      	cmp	r3, #41	; 0x29
 800824c:	d002      	beq.n	8008254 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2b2a      	cmp	r3, #42	; 0x2a
 8008252:	d10b      	bne.n	800826c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008254:	2103      	movs	r1, #3
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fd90 	bl	8008d7c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2228      	movs	r2, #40	; 0x28
 8008260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a60      	ldr	r2, [pc, #384]	; (80083e8 <I2C_ITError+0x1d8>)
 8008268:	635a      	str	r2, [r3, #52]	; 0x34
 800826a:	e030      	b.n	80082ce <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800826c:	f248 0103 	movw	r1, #32771	; 0x8003
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 fd83 	bl	8008d7c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f000 f8e1 	bl	800843e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b60      	cmp	r3, #96	; 0x60
 8008286:	d01f      	beq.n	80082c8 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2220      	movs	r2, #32
 800828c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b20      	cmp	r3, #32
 800829c:	d114      	bne.n	80082c8 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	2b10      	cmp	r3, #16
 80082aa:	d109      	bne.n	80082c0 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2210      	movs	r2, #16
 80082b2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082b8:	f043 0204 	orr.w	r2, r3, #4
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2220      	movs	r2, #32
 80082c6:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d2:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d039      	beq.n	8008350 <I2C_ITError+0x140>
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2b11      	cmp	r3, #17
 80082e0:	d002      	beq.n	80082e8 <I2C_ITError+0xd8>
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2b21      	cmp	r3, #33	; 0x21
 80082e6:	d133      	bne.n	8008350 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082f6:	d107      	bne.n	8008308 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008306:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830c:	4618      	mov	r0, r3
 800830e:	f7fd fe01 	bl	8005f14 <HAL_DMA_GetState>
 8008312:	4603      	mov	r3, r0
 8008314:	2b01      	cmp	r3, #1
 8008316:	d017      	beq.n	8008348 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	4a33      	ldr	r2, [pc, #204]	; (80083ec <I2C_ITError+0x1dc>)
 800831e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	4618      	mov	r0, r3
 800832e:	f7fd fbab 	bl	8005a88 <HAL_DMA_Abort_IT>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d04d      	beq.n	80083d4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800833e:	687a      	ldr	r2, [r7, #4]
 8008340:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008342:	4610      	mov	r0, r2
 8008344:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008346:	e045      	b.n	80083d4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f851 	bl	80083f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800834e:	e041      	b.n	80083d4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d039      	beq.n	80083cc <I2C_ITError+0x1bc>
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	2b12      	cmp	r3, #18
 800835c:	d002      	beq.n	8008364 <I2C_ITError+0x154>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	2b22      	cmp	r3, #34	; 0x22
 8008362:	d133      	bne.n	80083cc <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008372:	d107      	bne.n	8008384 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008382:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008388:	4618      	mov	r0, r3
 800838a:	f7fd fdc3 	bl	8005f14 <HAL_DMA_GetState>
 800838e:	4603      	mov	r3, r0
 8008390:	2b01      	cmp	r3, #1
 8008392:	d017      	beq.n	80083c4 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008398:	4a14      	ldr	r2, [pc, #80]	; (80083ec <I2C_ITError+0x1dc>)
 800839a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2200      	movs	r2, #0
 80083a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	4618      	mov	r0, r3
 80083aa:	f7fd fb6d 	bl	8005a88 <HAL_DMA_Abort_IT>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d011      	beq.n	80083d8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80083be:	4610      	mov	r0, r2
 80083c0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083c2:	e009      	b.n	80083d8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 f813 	bl	80083f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083ca:	e005      	b.n	80083d8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f80f 	bl	80083f0 <I2C_TreatErrorCallback>
  }
}
 80083d2:	e002      	b.n	80083da <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083d4:	bf00      	nop
 80083d6:	e000      	b.n	80083da <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083d8:	bf00      	nop
}
 80083da:	bf00      	nop
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	ffff0000 	.word	0xffff0000
 80083e8:	08007239 	.word	0x08007239
 80083ec:	08008791 	.word	0x08008791

080083f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	2b60      	cmp	r3, #96	; 0x60
 8008402:	d10e      	bne.n	8008422 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7fe fde6 	bl	8006fec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008420:	e009      	b.n	8008436 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f7fe fdd1 	bl	8006fd8 <HAL_I2C_ErrorCallback>
}
 8008436:	bf00      	nop
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b02      	cmp	r3, #2
 8008452:	d103      	bne.n	800845c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	2200      	movs	r2, #0
 800845a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	2b01      	cmp	r3, #1
 8008468:	d007      	beq.n	800847a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699a      	ldr	r2, [r3, #24]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f042 0201 	orr.w	r2, r2, #1
 8008478:	619a      	str	r2, [r3, #24]
  }
}
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b084      	sub	sp, #16
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008492:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80084a2:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a8:	b29b      	uxth	r3, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d104      	bne.n	80084b8 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80084ae:	2120      	movs	r1, #32
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f000 fbf9 	bl	8008ca8 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80084b6:	e02d      	b.n	8008514 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80084c0:	441a      	add	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	2bff      	cmp	r3, #255	; 0xff
 80084ce:	d903      	bls.n	80084d8 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	22ff      	movs	r2, #255	; 0xff
 80084d4:	851a      	strh	r2, [r3, #40]	; 0x28
 80084d6:	e004      	b.n	80084e2 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084dc:	b29a      	uxth	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	4619      	mov	r1, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3328      	adds	r3, #40	; 0x28
 80084f2:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80084f8:	f7fd f85c 	bl	80055b4 <HAL_DMA_Start_IT>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d004      	beq.n	800850c <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008502:	2110      	movs	r1, #16
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f7ff fe83 	bl	8008210 <I2C_ITError>
}
 800850a:	e003      	b.n	8008514 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800850c:	2140      	movs	r1, #64	; 0x40
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fbca 	bl	8008ca8 <I2C_Enable_IRQ>
}
 8008514:	bf00      	nop
 8008516:	3710      	adds	r7, #16
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852c:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	2b00      	cmp	r3, #0
 8008534:	d076      	beq.n	8008624 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a71      	ldr	r2, [pc, #452]	; (8008704 <I2C_DMAError+0x1e8>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d059      	beq.n	80085f6 <I2C_DMAError+0xda>
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a6f      	ldr	r2, [pc, #444]	; (8008708 <I2C_DMAError+0x1ec>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d053      	beq.n	80085f6 <I2C_DMAError+0xda>
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a6d      	ldr	r2, [pc, #436]	; (800870c <I2C_DMAError+0x1f0>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d04d      	beq.n	80085f6 <I2C_DMAError+0xda>
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a6b      	ldr	r2, [pc, #428]	; (8008710 <I2C_DMAError+0x1f4>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d047      	beq.n	80085f6 <I2C_DMAError+0xda>
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a69      	ldr	r2, [pc, #420]	; (8008714 <I2C_DMAError+0x1f8>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d041      	beq.n	80085f6 <I2C_DMAError+0xda>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a67      	ldr	r2, [pc, #412]	; (8008718 <I2C_DMAError+0x1fc>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d03b      	beq.n	80085f6 <I2C_DMAError+0xda>
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a65      	ldr	r2, [pc, #404]	; (800871c <I2C_DMAError+0x200>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d035      	beq.n	80085f6 <I2C_DMAError+0xda>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a63      	ldr	r2, [pc, #396]	; (8008720 <I2C_DMAError+0x204>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d02f      	beq.n	80085f6 <I2C_DMAError+0xda>
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a61      	ldr	r2, [pc, #388]	; (8008724 <I2C_DMAError+0x208>)
 800859e:	4293      	cmp	r3, r2
 80085a0:	d029      	beq.n	80085f6 <I2C_DMAError+0xda>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a5f      	ldr	r2, [pc, #380]	; (8008728 <I2C_DMAError+0x20c>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d023      	beq.n	80085f6 <I2C_DMAError+0xda>
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a5d      	ldr	r2, [pc, #372]	; (800872c <I2C_DMAError+0x210>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d01d      	beq.n	80085f6 <I2C_DMAError+0xda>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a5b      	ldr	r2, [pc, #364]	; (8008730 <I2C_DMAError+0x214>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d017      	beq.n	80085f6 <I2C_DMAError+0xda>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a59      	ldr	r2, [pc, #356]	; (8008734 <I2C_DMAError+0x218>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d011      	beq.n	80085f6 <I2C_DMAError+0xda>
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a57      	ldr	r2, [pc, #348]	; (8008738 <I2C_DMAError+0x21c>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d00b      	beq.n	80085f6 <I2C_DMAError+0xda>
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a55      	ldr	r2, [pc, #340]	; (800873c <I2C_DMAError+0x220>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d005      	beq.n	80085f6 <I2C_DMAError+0xda>
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a53      	ldr	r2, [pc, #332]	; (8008740 <I2C_DMAError+0x224>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d109      	bne.n	800860a <I2C_DMAError+0xee>
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bf0c      	ite	eq
 8008602:	2301      	moveq	r3, #1
 8008604:	2300      	movne	r3, #0
 8008606:	b2db      	uxtb	r3, r3
 8008608:	e008      	b.n	800861c <I2C_DMAError+0x100>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	2b00      	cmp	r3, #0
 8008614:	bf0c      	ite	eq
 8008616:	2301      	moveq	r3, #1
 8008618:	2300      	movne	r3, #0
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d001      	beq.n	8008624 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 8008620:	2301      	movs	r3, #1
 8008622:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 8098 	beq.w	800875e <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a33      	ldr	r2, [pc, #204]	; (8008704 <I2C_DMAError+0x1e8>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d059      	beq.n	80086ee <I2C_DMAError+0x1d2>
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a31      	ldr	r2, [pc, #196]	; (8008708 <I2C_DMAError+0x1ec>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d053      	beq.n	80086ee <I2C_DMAError+0x1d2>
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a2f      	ldr	r2, [pc, #188]	; (800870c <I2C_DMAError+0x1f0>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d04d      	beq.n	80086ee <I2C_DMAError+0x1d2>
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a2d      	ldr	r2, [pc, #180]	; (8008710 <I2C_DMAError+0x1f4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d047      	beq.n	80086ee <I2C_DMAError+0x1d2>
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a2b      	ldr	r2, [pc, #172]	; (8008714 <I2C_DMAError+0x1f8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d041      	beq.n	80086ee <I2C_DMAError+0x1d2>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a29      	ldr	r2, [pc, #164]	; (8008718 <I2C_DMAError+0x1fc>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d03b      	beq.n	80086ee <I2C_DMAError+0x1d2>
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a27      	ldr	r2, [pc, #156]	; (800871c <I2C_DMAError+0x200>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d035      	beq.n	80086ee <I2C_DMAError+0x1d2>
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a25      	ldr	r2, [pc, #148]	; (8008720 <I2C_DMAError+0x204>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d02f      	beq.n	80086ee <I2C_DMAError+0x1d2>
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a23      	ldr	r2, [pc, #140]	; (8008724 <I2C_DMAError+0x208>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d029      	beq.n	80086ee <I2C_DMAError+0x1d2>
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a21      	ldr	r2, [pc, #132]	; (8008728 <I2C_DMAError+0x20c>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d023      	beq.n	80086ee <I2C_DMAError+0x1d2>
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	4a1f      	ldr	r2, [pc, #124]	; (800872c <I2C_DMAError+0x210>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d01d      	beq.n	80086ee <I2C_DMAError+0x1d2>
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1d      	ldr	r2, [pc, #116]	; (8008730 <I2C_DMAError+0x214>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d017      	beq.n	80086ee <I2C_DMAError+0x1d2>
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a1b      	ldr	r2, [pc, #108]	; (8008734 <I2C_DMAError+0x218>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d011      	beq.n	80086ee <I2C_DMAError+0x1d2>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a19      	ldr	r2, [pc, #100]	; (8008738 <I2C_DMAError+0x21c>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d00b      	beq.n	80086ee <I2C_DMAError+0x1d2>
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a17      	ldr	r2, [pc, #92]	; (800873c <I2C_DMAError+0x220>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d005      	beq.n	80086ee <I2C_DMAError+0x1d2>
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a15      	ldr	r2, [pc, #84]	; (8008740 <I2C_DMAError+0x224>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d12a      	bne.n	8008744 <I2C_DMAError+0x228>
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bf0c      	ite	eq
 80086fa:	2301      	moveq	r3, #1
 80086fc:	2300      	movne	r3, #0
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	e029      	b.n	8008756 <I2C_DMAError+0x23a>
 8008702:	bf00      	nop
 8008704:	40020010 	.word	0x40020010
 8008708:	40020028 	.word	0x40020028
 800870c:	40020040 	.word	0x40020040
 8008710:	40020058 	.word	0x40020058
 8008714:	40020070 	.word	0x40020070
 8008718:	40020088 	.word	0x40020088
 800871c:	400200a0 	.word	0x400200a0
 8008720:	400200b8 	.word	0x400200b8
 8008724:	40020410 	.word	0x40020410
 8008728:	40020428 	.word	0x40020428
 800872c:	40020440 	.word	0x40020440
 8008730:	40020458 	.word	0x40020458
 8008734:	40020470 	.word	0x40020470
 8008738:	40020488 	.word	0x40020488
 800873c:	400204a0 	.word	0x400204a0
 8008740:	400204b8 	.word	0x400204b8
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	2b00      	cmp	r3, #0
 800874e:	bf0c      	ite	eq
 8008750:	2301      	moveq	r3, #1
 8008752:	2300      	movne	r3, #0
 8008754:	b2db      	uxtb	r3, r3
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800875a:	2301      	movs	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7fd fbe6 	bl	8005f30 <HAL_DMA_GetError>
 8008764:	4603      	mov	r3, r0
 8008766:	2b02      	cmp	r3, #2
 8008768:	d00e      	beq.n	8008788 <I2C_DMAError+0x26c>
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00b      	beq.n	8008788 <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685a      	ldr	r2, [r3, #4]
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800877e:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008780:	2110      	movs	r1, #16
 8008782:	68b8      	ldr	r0, [r7, #8]
 8008784:	f7ff fd44 	bl	8008210 <I2C_ITError>
  }
}
 8008788:	bf00      	nop
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	2200      	movs	r2, #0
 80087ac:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d003      	beq.n	80087be <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ba:	2200      	movs	r2, #0
 80087bc:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f7ff fe16 	bl	80083f0 <I2C_TreatErrorCallback>
}
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	4613      	mov	r3, r2
 80087da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087dc:	e031      	b.n	8008842 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e4:	d02d      	beq.n	8008842 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e6:	f7fb f93d 	bl	8003a64 <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	683a      	ldr	r2, [r7, #0]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d302      	bcc.n	80087fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d122      	bne.n	8008842 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	4013      	ands	r3, r2
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	429a      	cmp	r2, r3
 800880a:	bf0c      	ite	eq
 800880c:	2301      	moveq	r3, #1
 800880e:	2300      	movne	r3, #0
 8008810:	b2db      	uxtb	r3, r3
 8008812:	461a      	mov	r2, r3
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	429a      	cmp	r2, r3
 8008818:	d113      	bne.n	8008842 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800881e:	f043 0220 	orr.w	r2, r3, #32
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2220      	movs	r2, #32
 800882a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e00f      	b.n	8008862 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	699a      	ldr	r2, [r3, #24]
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	4013      	ands	r3, r2
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	429a      	cmp	r2, r3
 8008850:	bf0c      	ite	eq
 8008852:	2301      	moveq	r3, #1
 8008854:	2300      	movne	r3, #0
 8008856:	b2db      	uxtb	r3, r3
 8008858:	461a      	mov	r2, r3
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	429a      	cmp	r2, r3
 800885e:	d0be      	beq.n	80087de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	60f8      	str	r0, [r7, #12]
 8008872:	60b9      	str	r1, [r7, #8]
 8008874:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008876:	e033      	b.n	80088e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	68b9      	ldr	r1, [r7, #8]
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	f000 f901 	bl	8008a84 <I2C_IsErrorOccurred>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d001      	beq.n	800888c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e031      	b.n	80088f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008892:	d025      	beq.n	80088e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008894:	f7fb f8e6 	bl	8003a64 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	68ba      	ldr	r2, [r7, #8]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d302      	bcc.n	80088aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d11a      	bne.n	80088e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	f003 0302 	and.w	r3, r3, #2
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d013      	beq.n	80088e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088bc:	f043 0220 	orr.w	r2, r3, #32
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2220      	movs	r2, #32
 80088c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e007      	b.n	80088f0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	f003 0302 	and.w	r3, r3, #2
 80088ea:	2b02      	cmp	r3, #2
 80088ec:	d1c4      	bne.n	8008878 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80088ee:	2300      	movs	r3, #0
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008904:	e02f      	b.n	8008966 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	68b9      	ldr	r1, [r7, #8]
 800890a:	68f8      	ldr	r0, [r7, #12]
 800890c:	f000 f8ba 	bl	8008a84 <I2C_IsErrorOccurred>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d001      	beq.n	800891a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008916:	2301      	movs	r3, #1
 8008918:	e02d      	b.n	8008976 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800891a:	f7fb f8a3 	bl	8003a64 <HAL_GetTick>
 800891e:	4602      	mov	r2, r0
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	1ad3      	subs	r3, r2, r3
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	429a      	cmp	r2, r3
 8008928:	d302      	bcc.n	8008930 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d11a      	bne.n	8008966 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	f003 0320 	and.w	r3, r3, #32
 800893a:	2b20      	cmp	r3, #32
 800893c:	d013      	beq.n	8008966 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008942:	f043 0220 	orr.w	r2, r3, #32
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	2220      	movs	r2, #32
 800894e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e007      	b.n	8008976 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	f003 0320 	and.w	r3, r3, #32
 8008970:	2b20      	cmp	r3, #32
 8008972:	d1c8      	bne.n	8008906 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008974:	2300      	movs	r3, #0
}
 8008976:	4618      	mov	r0, r3
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800898c:	e06b      	b.n	8008a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	68b9      	ldr	r1, [r7, #8]
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 f876 	bl	8008a84 <I2C_IsErrorOccurred>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e069      	b.n	8008a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	f003 0320 	and.w	r3, r3, #32
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	d138      	bne.n	8008a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	f003 0304 	and.w	r3, r3, #4
 80089ba:	2b04      	cmp	r3, #4
 80089bc:	d105      	bne.n	80089ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d001      	beq.n	80089ca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80089c6:	2300      	movs	r3, #0
 80089c8:	e055      	b.n	8008a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	f003 0310 	and.w	r3, r3, #16
 80089d4:	2b10      	cmp	r3, #16
 80089d6:	d107      	bne.n	80089e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2210      	movs	r2, #16
 80089de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2204      	movs	r2, #4
 80089e4:	645a      	str	r2, [r3, #68]	; 0x44
 80089e6:	e002      	b.n	80089ee <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2200      	movs	r2, #0
 80089ec:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2220      	movs	r2, #32
 80089f4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	6859      	ldr	r1, [r3, #4]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	4b1f      	ldr	r3, [pc, #124]	; (8008a80 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8008a02:	400b      	ands	r3, r1
 8008a04:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e029      	b.n	8008a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a22:	f7fb f81f 	bl	8003a64 <HAL_GetTick>
 8008a26:	4602      	mov	r2, r0
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	1ad3      	subs	r3, r2, r3
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d302      	bcc.n	8008a38 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d116      	bne.n	8008a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f003 0304 	and.w	r3, r3, #4
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d00f      	beq.n	8008a66 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a4a:	f043 0220 	orr.w	r2, r3, #32
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e007      	b.n	8008a76 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	f003 0304 	and.w	r3, r3, #4
 8008a70:	2b04      	cmp	r3, #4
 8008a72:	d18c      	bne.n	800898e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	fe00e800 	.word	0xfe00e800

08008a84 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08a      	sub	sp, #40	; 0x28
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d068      	beq.n	8008b82 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	2210      	movs	r2, #16
 8008ab6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ab8:	e049      	b.n	8008b4e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ac0:	d045      	beq.n	8008b4e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ac2:	f7fa ffcf 	bl	8003a64 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	68ba      	ldr	r2, [r7, #8]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d302      	bcc.n	8008ad8 <I2C_IsErrorOccurred+0x54>
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d13a      	bne.n	8008b4e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ae2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008aea:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	699b      	ldr	r3, [r3, #24]
 8008af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008af6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008afa:	d121      	bne.n	8008b40 <I2C_IsErrorOccurred+0xbc>
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b02:	d01d      	beq.n	8008b40 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008b04:	7cfb      	ldrb	r3, [r7, #19]
 8008b06:	2b20      	cmp	r3, #32
 8008b08:	d01a      	beq.n	8008b40 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b18:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008b1a:	f7fa ffa3 	bl	8003a64 <HAL_GetTick>
 8008b1e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b20:	e00e      	b.n	8008b40 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008b22:	f7fa ff9f 	bl	8003a64 <HAL_GetTick>
 8008b26:	4602      	mov	r2, r0
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	2b19      	cmp	r3, #25
 8008b2e:	d907      	bls.n	8008b40 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	f043 0320 	orr.w	r3, r3, #32
 8008b36:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8008b3e:	e006      	b.n	8008b4e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	f003 0320 	and.w	r3, r3, #32
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d1e9      	bne.n	8008b22 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	f003 0320 	and.w	r3, r3, #32
 8008b58:	2b20      	cmp	r3, #32
 8008b5a:	d003      	beq.n	8008b64 <I2C_IsErrorOccurred+0xe0>
 8008b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d0aa      	beq.n	8008aba <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d103      	bne.n	8008b74 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2220      	movs	r2, #32
 8008b72:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	f043 0304 	orr.w	r3, r3, #4
 8008b7a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	f043 0301 	orr.w	r3, r3, #1
 8008b9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ba4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d00b      	beq.n	8008bce <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	f043 0308 	orr.w	r3, r3, #8
 8008bbc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008bc6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00b      	beq.n	8008bf0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	f043 0302 	orr.w	r3, r3, #2
 8008bde:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008be8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8008bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d01c      	beq.n	8008c32 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f7ff fc20 	bl	800843e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	6859      	ldr	r1, [r3, #4]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	4b0d      	ldr	r3, [pc, #52]	; (8008c40 <I2C_IsErrorOccurred+0x1bc>)
 8008c0a:	400b      	ands	r3, r1
 8008c0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c12:	6a3b      	ldr	r3, [r7, #32]
 8008c14:	431a      	orrs	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2220      	movs	r2, #32
 8008c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008c32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3728      	adds	r7, #40	; 0x28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	fe00e800 	.word	0xfe00e800

08008c44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b087      	sub	sp, #28
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	607b      	str	r3, [r7, #4]
 8008c4e:	460b      	mov	r3, r1
 8008c50:	817b      	strh	r3, [r7, #10]
 8008c52:	4613      	mov	r3, r2
 8008c54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c56:	897b      	ldrh	r3, [r7, #10]
 8008c58:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c5c:	7a7b      	ldrb	r3, [r7, #9]
 8008c5e:	041b      	lsls	r3, r3, #16
 8008c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c64:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008c6a:	6a3b      	ldr	r3, [r7, #32]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c72:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	0d5b      	lsrs	r3, r3, #21
 8008c7e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008c82:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <I2C_TransferConfig+0x60>)
 8008c84:	430b      	orrs	r3, r1
 8008c86:	43db      	mvns	r3, r3
 8008c88:	ea02 0103 	and.w	r1, r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008c96:	bf00      	nop
 8008c98:	371c      	adds	r7, #28
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	03ff63ff 	.word	0x03ff63ff

08008ca8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b085      	sub	sp, #20
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cbc:	4a2d      	ldr	r2, [pc, #180]	; (8008d74 <I2C_Enable_IRQ+0xcc>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d004      	beq.n	8008ccc <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8008cc6:	4a2c      	ldr	r2, [pc, #176]	; (8008d78 <I2C_Enable_IRQ+0xd0>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d11d      	bne.n	8008d08 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008ccc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	da03      	bge.n	8008cdc <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008cda:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008cdc:	887b      	ldrh	r3, [r7, #2]
 8008cde:	2b10      	cmp	r3, #16
 8008ce0:	d103      	bne.n	8008cea <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008ce8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008cea:	887b      	ldrh	r3, [r7, #2]
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	d103      	bne.n	8008cf8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008cf6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008cf8:	887b      	ldrh	r3, [r7, #2]
 8008cfa:	2b40      	cmp	r3, #64	; 0x40
 8008cfc:	d12c      	bne.n	8008d58 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d04:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008d06:	e027      	b.n	8008d58 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008d08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	da03      	bge.n	8008d18 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008d16:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008d18:	887b      	ldrh	r3, [r7, #2]
 8008d1a:	f003 0301 	and.w	r3, r3, #1
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008d28:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008d2a:	887b      	ldrh	r3, [r7, #2]
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008d3a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008d3c:	887b      	ldrh	r3, [r7, #2]
 8008d3e:	2b10      	cmp	r3, #16
 8008d40:	d103      	bne.n	8008d4a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008d48:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008d4a:	887b      	ldrh	r3, [r7, #2]
 8008d4c:	2b20      	cmp	r3, #32
 8008d4e:	d103      	bne.n	8008d58 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f043 0320 	orr.w	r3, r3, #32
 8008d56:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6819      	ldr	r1, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68fa      	ldr	r2, [r7, #12]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	601a      	str	r2, [r3, #0]
}
 8008d68:	bf00      	nop
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	08007429 	.word	0x08007429
 8008d78:	08007601 	.word	0x08007601

08008d7c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b085      	sub	sp, #20
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008d8c:	887b      	ldrh	r3, [r7, #2]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00f      	beq.n	8008db6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008d9c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008daa:	2b28      	cmp	r3, #40	; 0x28
 8008dac:	d003      	beq.n	8008db6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008db4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008db6:	887b      	ldrh	r3, [r7, #2]
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00f      	beq.n	8008de0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008dc6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008dd4:	2b28      	cmp	r3, #40	; 0x28
 8008dd6:	d003      	beq.n	8008de0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008dde:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008de0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	da03      	bge.n	8008df0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008dee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008df0:	887b      	ldrh	r3, [r7, #2]
 8008df2:	2b10      	cmp	r3, #16
 8008df4:	d103      	bne.n	8008dfe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008dfc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008dfe:	887b      	ldrh	r3, [r7, #2]
 8008e00:	2b20      	cmp	r3, #32
 8008e02:	d103      	bne.n	8008e0c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f043 0320 	orr.w	r3, r3, #32
 8008e0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008e0c:	887b      	ldrh	r3, [r7, #2]
 8008e0e:	2b40      	cmp	r3, #64	; 0x40
 8008e10:	d103      	bne.n	8008e1a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e18:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	6819      	ldr	r1, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	43da      	mvns	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	400a      	ands	r2, r1
 8008e2a:	601a      	str	r2, [r3, #0]
}
 8008e2c:	bf00      	nop
 8008e2e:	3714      	adds	r7, #20
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr

08008e38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d138      	bne.n	8008ec0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d101      	bne.n	8008e5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e032      	b.n	8008ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2224      	movs	r2, #36	; 0x24
 8008e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	681a      	ldr	r2, [r3, #0]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0201 	bic.w	r2, r2, #1
 8008e7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	681a      	ldr	r2, [r3, #0]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6819      	ldr	r1, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	683a      	ldr	r2, [r7, #0]
 8008e98:	430a      	orrs	r2, r1
 8008e9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f042 0201 	orr.w	r2, r2, #1
 8008eaa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	e000      	b.n	8008ec2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008ec0:	2302      	movs	r3, #2
  }
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	370c      	adds	r7, #12
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr

08008ece <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	b085      	sub	sp, #20
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
 8008ed6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b20      	cmp	r3, #32
 8008ee2:	d139      	bne.n	8008f58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d101      	bne.n	8008ef2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008eee:	2302      	movs	r3, #2
 8008ef0:	e033      	b.n	8008f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2224      	movs	r2, #36	; 0x24
 8008efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f022 0201 	bic.w	r2, r2, #1
 8008f10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008f20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	021b      	lsls	r3, r3, #8
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0201 	orr.w	r2, r2, #1
 8008f42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2220      	movs	r2, #32
 8008f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	e000      	b.n	8008f5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008f58:	2302      	movs	r3, #2
  }
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3714      	adds	r7, #20
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d101      	bne.n	8008f78 <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	e031      	b.n	8008fdc <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d105      	bne.n	8008f90 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7f9 fe64 	bl	8002c58 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2203      	movs	r2, #3
 8008f94:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f823 	bl	8008fe4 <HAL_MMC_InitCard>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e019      	b.n	8008fdc <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00a      	beq.n	8008fda <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fb46 	bl	800965c <HAL_MMC_ConfigWideBusOperation>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e000      	b.n	8008fdc <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8008fda:	2300      	movs	r3, #0
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3708      	adds	r7, #8
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8008fe4:	b590      	push	{r4, r7, lr}
 8008fe6:	b08d      	sub	sp, #52	; 0x34
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008ffc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009000:	f04f 0100 	mov.w	r1, #0
 8009004:	f003 f970 	bl	800c2e8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009008:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800900a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900c:	2b00      	cmp	r3, #0
 800900e:	d109      	bne.n	8009024 <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800901e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e070      	b.n	8009106 <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 8009024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009026:	0a1b      	lsrs	r3, r3, #8
 8009028:	4a39      	ldr	r2, [pc, #228]	; (8009110 <HAL_MMC_InitCard+0x12c>)
 800902a:	fba2 2303 	umull	r2, r3, r2, r3
 800902e:	091b      	lsrs	r3, r3, #4
 8009030:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681c      	ldr	r4, [r3, #0]
 8009036:	466a      	mov	r2, sp
 8009038:	f107 0318 	add.w	r3, r7, #24
 800903c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009040:	e882 0003 	stmia.w	r2, {r0, r1}
 8009044:	f107 030c 	add.w	r3, r7, #12
 8009048:	cb0e      	ldmia	r3, {r1, r2, r3}
 800904a:	4620      	mov	r0, r4
 800904c:	f007 f8c2 	bl	80101d4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4618      	mov	r0, r3
 8009056:	f007 f8f4 	bl	8010242 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009066:	fbb2 f3f3 	udiv	r3, r2, r3
 800906a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800906c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8009072:	4a28      	ldr	r2, [pc, #160]	; (8009114 <HAL_MMC_InitCard+0x130>)
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	fbb2 f3f3 	udiv	r3, r2, r3
 800907a:	3301      	adds	r3, #1
 800907c:	4618      	mov	r0, r3
 800907e:	f7fa fcfd 	bl	8003a7c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fcb4 	bl	80099f0 <MMC_PowerON>
 8009088:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 800908a:	6a3b      	ldr	r3, [r7, #32]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2201      	movs	r2, #1
 8009094:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800909c:	6a3b      	ldr	r3, [r7, #32]
 800909e:	431a      	orrs	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e02e      	b.n	8009106 <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fba3 	bl	80097f4 <MMC_InitCard>
 80090ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80090b0:	6a3b      	ldr	r3, [r7, #32]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00b      	beq.n	80090ce <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2201      	movs	r2, #1
 80090ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hmmc->ErrorCode |= errorstate;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090c2:	6a3b      	ldr	r3, [r7, #32]
 80090c4:	431a      	orrs	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e01b      	b.n	8009106 <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090d6:	4618      	mov	r0, r3
 80090d8:	f007 f948 	bl	801036c <SDMMC_CmdBlockLength>
 80090dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00f      	beq.n	8009104 <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a0b      	ldr	r2, [pc, #44]	; (8009118 <HAL_MMC_InitCard+0x134>)
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090f0:	6a3b      	ldr	r3, [r7, #32]
 80090f2:	431a      	orrs	r2, r3
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2201      	movs	r2, #1
 80090fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	e000      	b.n	8009106 <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	372c      	adds	r7, #44	; 0x2c
 800910a:	46bd      	mov	sp, r7
 800910c:	bd90      	pop	{r4, r7, pc}
 800910e:	bf00      	nop
 8009110:	014f8b59 	.word	0x014f8b59
 8009114:	00012110 	.word	0x00012110
 8009118:	1fe00fff 	.word	0x1fe00fff

0800911c <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800912e:	0f9b      	lsrs	r3, r3, #30
 8009130:	b2da      	uxtb	r2, r3
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800913a:	0e9b      	lsrs	r3, r3, #26
 800913c:	b2db      	uxtb	r3, r3
 800913e:	f003 030f 	and.w	r3, r3, #15
 8009142:	b2da      	uxtb	r2, r3
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800914c:	0e1b      	lsrs	r3, r3, #24
 800914e:	b2db      	uxtb	r3, r3
 8009150:	f003 0303 	and.w	r3, r3, #3
 8009154:	b2da      	uxtb	r2, r3
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800915e:	0c1b      	lsrs	r3, r3, #16
 8009160:	b2da      	uxtb	r2, r3
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916a:	0a1b      	lsrs	r3, r3, #8
 800916c:	b2da      	uxtb	r2, r3
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009176:	b2da      	uxtb	r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009180:	0d1b      	lsrs	r3, r3, #20
 8009182:	b29a      	uxth	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800918c:	0c1b      	lsrs	r3, r3, #16
 800918e:	b2db      	uxtb	r3, r3
 8009190:	f003 030f 	and.w	r3, r3, #15
 8009194:	b2da      	uxtb	r2, r3
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800919e:	0bdb      	lsrs	r3, r3, #15
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	f003 0301 	and.w	r3, r3, #1
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b0:	0b9b      	lsrs	r3, r3, #14
 80091b2:	b2db      	uxtb	r3, r3
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	b2da      	uxtb	r2, r3
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091c2:	0b5b      	lsrs	r3, r3, #13
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091d4:	0b1b      	lsrs	r3, r3, #12
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	b2da      	uxtb	r2, r3
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2200      	movs	r2, #0
 80091e6:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 80091e8:	f107 010c 	add.w	r1, r7, #12
 80091ec:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 80091f0:	22d4      	movs	r2, #212	; 0xd4
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 fc4c 	bl	8009a90 <MMC_ReadExtCSD>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e129      	b.n	8009456 <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009206:	2b00      	cmp	r3, #0
 8009208:	d163      	bne.n	80092d2 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800920e:	009a      	lsls	r2, r3, #2
 8009210:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009214:	4013      	ands	r3, r2
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800921a:	0f92      	lsrs	r2, r2, #30
 800921c:	431a      	orrs	r2, r3
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009226:	0edb      	lsrs	r3, r3, #27
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f003 0307 	and.w	r3, r3, #7
 800922e:	b2da      	uxtb	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009238:	0e1b      	lsrs	r3, r3, #24
 800923a:	b2db      	uxtb	r3, r3
 800923c:	f003 0307 	and.w	r3, r3, #7
 8009240:	b2da      	uxtb	r2, r3
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800924a:	0d5b      	lsrs	r3, r3, #21
 800924c:	b2db      	uxtb	r3, r3
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	b2da      	uxtb	r2, r3
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800925c:	0c9b      	lsrs	r3, r3, #18
 800925e:	b2db      	uxtb	r3, r3
 8009260:	f003 0307 	and.w	r3, r3, #7
 8009264:	b2da      	uxtb	r2, r3
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800926e:	0bdb      	lsrs	r3, r3, #15
 8009270:	b2db      	uxtb	r3, r3
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	b2da      	uxtb	r2, r3
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	1c5a      	adds	r2, r3, #1
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	7e1b      	ldrb	r3, [r3, #24]
 800928a:	b2db      	uxtb	r3, r3
 800928c:	f003 0307 	and.w	r3, r3, #7
 8009290:	3302      	adds	r3, #2
 8009292:	2201      	movs	r2, #1
 8009294:	fa02 f303 	lsl.w	r3, r2, r3
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800929c:	fb03 f202 	mul.w	r2, r3, r2
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	7a1b      	ldrb	r3, [r3, #8]
 80092a8:	b2db      	uxtb	r3, r3
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	2201      	movs	r2, #1
 80092b0:	409a      	lsls	r2, r3
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	649a      	str	r2, [r3, #72]	; 0x48

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80092be:	0a52      	lsrs	r2, r2, #9
 80092c0:	fb03 f202 	mul.w	r2, r3, r2
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.LogBlockSize = 512U;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092ce:	651a      	str	r2, [r3, #80]	; 0x50
 80092d0:	e023      	b.n	800931a <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d10f      	bne.n	80092fa <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	645a      	str	r2, [r3, #68]	; 0x44
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hmmc->MmcCard.BlockSize = 512U;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092ee:	649a      	str	r2, [r3, #72]	; 0x48
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	651a      	str	r2, [r3, #80]	; 0x50
 80092f8:	e00f      	b.n	800931a <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a58      	ldr	r2, [pc, #352]	; (8009460 <HAL_MMC_GetCardCSD+0x344>)
 8009300:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009306:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2201      	movs	r2, #1
 8009312:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e09d      	b.n	8009456 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800931e:	0b9b      	lsrs	r3, r3, #14
 8009320:	b2db      	uxtb	r3, r3
 8009322:	f003 0301 	and.w	r3, r3, #1
 8009326:	b2da      	uxtb	r2, r3
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009330:	09db      	lsrs	r3, r3, #7
 8009332:	b2db      	uxtb	r3, r3
 8009334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009338:	b2da      	uxtb	r2, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009348:	b2da      	uxtb	r2, r3
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009352:	0fdb      	lsrs	r3, r3, #31
 8009354:	b2da      	uxtb	r2, r3
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800935e:	0f5b      	lsrs	r3, r3, #29
 8009360:	b2db      	uxtb	r3, r3
 8009362:	f003 0303 	and.w	r3, r3, #3
 8009366:	b2da      	uxtb	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009370:	0e9b      	lsrs	r3, r3, #26
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	b2da      	uxtb	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009382:	0d9b      	lsrs	r3, r3, #22
 8009384:	b2db      	uxtb	r3, r3
 8009386:	f003 030f 	and.w	r3, r3, #15
 800938a:	b2da      	uxtb	r2, r3
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009394:	0d5b      	lsrs	r3, r3, #21
 8009396:	b2db      	uxtb	r3, r3
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	b2da      	uxtb	r2, r3
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093b0:	0c1b      	lsrs	r3, r3, #16
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093c4:	0bdb      	lsrs	r3, r3, #15
 80093c6:	b2db      	uxtb	r3, r3
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	b2da      	uxtb	r2, r3
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d8:	0b9b      	lsrs	r3, r3, #14
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	f003 0301 	and.w	r3, r3, #1
 80093e0:	b2da      	uxtb	r2, r3
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093ec:	0b5b      	lsrs	r3, r3, #13
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009400:	0b1b      	lsrs	r3, r3, #12
 8009402:	b2db      	uxtb	r3, r3
 8009404:	f003 0301 	and.w	r3, r3, #1
 8009408:	b2da      	uxtb	r2, r3
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009414:	0a9b      	lsrs	r3, r3, #10
 8009416:	b2db      	uxtb	r3, r3
 8009418:	f003 0303 	and.w	r3, r3, #3
 800941c:	b2da      	uxtb	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009428:	0a1b      	lsrs	r3, r3, #8
 800942a:	b2db      	uxtb	r3, r3
 800942c:	f003 0303 	and.w	r3, r3, #3
 8009430:	b2da      	uxtb	r2, r3
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800943c:	085b      	lsrs	r3, r3, #1
 800943e:	b2db      	uxtb	r3, r3
 8009440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009444:	b2da      	uxtb	r2, r3
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	2201      	movs	r2, #1
 8009450:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	1fe00fff 	.word	0x1fe00fff

08009464 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b08e      	sub	sp, #56	; 0x38
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009470:	f7fa faf8 	bl	8003a64 <HAL_GetTick>
 8009474:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d107      	bne.n	800948c <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009480:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e0de      	b.n	800964a <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b01      	cmp	r3, #1
 8009496:	f040 80d7 	bne.w	8009648 <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	635a      	str	r2, [r3, #52]	; 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2203      	movs	r2, #3
 80094a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2200      	movs	r2, #0
 80094ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094b4:	f04f 33ff 	mov.w	r3, #4294967295
 80094b8:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512U;
 80094ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094be:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80094c0:	2390      	movs	r3, #144	; 0x90
 80094c2:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80094c4:	2302      	movs	r3, #2
 80094c6:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094c8:	2300      	movs	r3, #0
 80094ca:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80094cc:	2300      	movs	r3, #0
 80094ce:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f107 0210 	add.w	r2, r7, #16
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f006 ff1a 	bl	8010314 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68da      	ldr	r2, [r3, #12]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ee:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	2100      	movs	r1, #0
 80094f6:	4618      	mov	r0, r3
 80094f8:	f007 f866 	bl	80105c8 <SDMMC_CmdSendEXTCSD>
 80094fc:	62b8      	str	r0, [r7, #40]	; 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 80094fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009500:	2b00      	cmp	r3, #0
 8009502:	d045      	beq.n	8009590 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a52      	ldr	r2, [pc, #328]	; (8009654 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800950a:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009512:	431a      	orrs	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e092      	b.n	800964a <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d013      	beq.n	800955a <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < 8U; count++)
 8009532:	2300      	movs	r3, #0
 8009534:	637b      	str	r3, [r7, #52]	; 0x34
 8009536:	e00d      	b.n	8009554 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4618      	mov	r0, r3
 800953e:	f006 fe73 	bl	8010228 <SDMMC_ReadFIFO>
 8009542:	4602      	mov	r2, r0
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8009548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954a:	3304      	adds	r3, #4
 800954c:	633b      	str	r3, [r7, #48]	; 0x30
        for (count = 0U; count < 8U; count++)
 800954e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009550:	3301      	adds	r3, #1
 8009552:	637b      	str	r3, [r7, #52]	; 0x34
 8009554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009556:	2b07      	cmp	r3, #7
 8009558:	d9ee      	bls.n	8009538 <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800955a:	f7fa fa83 	bl	8003a64 <HAL_GetTick>
 800955e:	4602      	mov	r2, r0
 8009560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009562:	1ad3      	subs	r3, r2, r3
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	429a      	cmp	r2, r3
 8009568:	d902      	bls.n	8009570 <HAL_MMC_GetCardExtCSD+0x10c>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d10f      	bne.n	8009590 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a37      	ldr	r2, [pc, #220]	; (8009654 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8009576:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	635a      	str	r2, [r3, #52]	; 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	e05c      	b.n	800964a <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009596:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800959a:	2b00      	cmp	r3, #0
 800959c:	d0c2      	beq.n	8009524 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68da      	ldr	r2, [r3, #12]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095ac:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d00f      	beq.n	80095dc <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a24      	ldr	r2, [pc, #144]	; (8009654 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80095c2:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c8:	f043 0208 	orr.w	r2, r3, #8
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e036      	b.n	800964a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e2:	f003 0302 	and.w	r3, r3, #2
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d00f      	beq.n	800960a <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a19      	ldr	r2, [pc, #100]	; (8009654 <HAL_MMC_GetCardExtCSD+0x1f0>)
 80095f0:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f6:	f043 0202 	orr.w	r2, r3, #2
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e01f      	b.n	800964a <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009610:	f003 0320 	and.w	r3, r3, #32
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00f      	beq.n	8009638 <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a0d      	ldr	r2, [pc, #52]	; (8009654 <HAL_MMC_GetCardExtCSD+0x1f0>)
 800961e:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009624:	f043 0220 	orr.w	r2, r3, #32
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2201      	movs	r2, #1
 8009630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	e008      	b.n	800964a <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a06      	ldr	r2, [pc, #24]	; (8009658 <HAL_MMC_GetCardExtCSD+0x1f4>)
 800963e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2201      	movs	r2, #1
 8009644:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  }

  return HAL_OK;
 8009648:	2300      	movs	r3, #0
}
 800964a:	4618      	mov	r0, r3
 800964c:	3738      	adds	r7, #56	; 0x38
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	1fe00fff 	.word	0x1fe00fff
 8009658:	18000f3a 	.word	0x18000f3a

0800965c <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 800965c:	b5b0      	push	{r4, r5, r7, lr}
 800965e:	b08c      	sub	sp, #48	; 0x30
 8009660:	af02      	add	r7, sp, #8
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2203      	movs	r2, #3
 800966e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d014      	beq.n	80096aa <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d006      	beq.n	800969c <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 800968e:	2204      	movs	r2, #4
 8009690:	6839      	ldr	r1, [r7, #0]
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f000 faf0 	bl	8009c78 <MMC_PwrClassUpdate>
 8009698:	6238      	str	r0, [r7, #32]
 800969a:	e00c      	b.n	80096b6 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 800969c:	2202      	movs	r2, #2
 800969e:	6839      	ldr	r1, [r7, #0]
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fae9 	bl	8009c78 <MMC_PwrClassUpdate>
 80096a6:	6238      	str	r0, [r7, #32]
 80096a8:	e005      	b.n	80096b6 <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 80096aa:	2201      	movs	r2, #1
 80096ac:	6839      	ldr	r1, [r7, #0]
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fae2 	bl	8009c78 <MMC_PwrClassUpdate>
 80096b4:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d17b      	bne.n	80097b4 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096c2:	d107      	bne.n	80096d4 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4946      	ldr	r1, [pc, #280]	; (80097e4 <HAL_MMC_ConfigWideBusOperation+0x188>)
 80096ca:	4618      	mov	r0, r3
 80096cc:	f006 ff59 	bl	8010582 <SDMMC_CmdSwitch>
 80096d0:	6238      	str	r0, [r7, #32]
 80096d2:	e019      	b.n	8009708 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096da:	d107      	bne.n	80096ec <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4941      	ldr	r1, [pc, #260]	; (80097e8 <HAL_MMC_ConfigWideBusOperation+0x18c>)
 80096e2:	4618      	mov	r0, r3
 80096e4:	f006 ff4d 	bl	8010582 <SDMMC_CmdSwitch>
 80096e8:	6238      	str	r0, [r7, #32]
 80096ea:	e00d      	b.n	8009708 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d107      	bne.n	8009702 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	493d      	ldr	r1, [pc, #244]	; (80097ec <HAL_MMC_ConfigWideBusOperation+0x190>)
 80096f8:	4618      	mov	r0, r3
 80096fa:	f006 ff42 	bl	8010582 <SDMMC_CmdSwitch>
 80096fe:	6238      	str	r0, [r7, #32]
 8009700:	e002      	b.n	8009708 <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8009702:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009706:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d152      	bne.n	80097b4 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 800970e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	041b      	lsls	r3, r3, #16
 800971e:	4619      	mov	r1, r3
 8009720:	4610      	mov	r0, r2
 8009722:	f006 feeb 	bl	80104fc <SDMMC_CmdSendStatus>
 8009726:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8009728:	6a3b      	ldr	r3, [r7, #32]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d112      	bne.n	8009754 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	2100      	movs	r1, #0
 8009734:	4618      	mov	r0, r3
 8009736:	f006 fdda 	bl	80102ee <SDMMC_GetResponse>
 800973a:	61f8      	str	r0, [r7, #28]
        count--;
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	3b01      	subs	r3, #1
 8009740:	627b      	str	r3, [r7, #36]	; 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009748:	2b00      	cmp	r3, #0
 800974a:	d104      	bne.n	8009756 <HAL_MMC_ConfigWideBusOperation+0xfa>
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e0      	bne.n	8009714 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8009752:	e000      	b.n	8009756 <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8009754:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	d025      	beq.n	80097a8 <HAL_MMC_ConfigWideBusOperation+0x14c>
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d122      	bne.n	80097a8 <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009768:	2b00      	cmp	r3, #0
 800976a:	d003      	beq.n	8009774 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800976c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009770:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8009772:	e01f      	b.n	80097b4 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f107 0408 	add.w	r4, r7, #8
 800977a:	1d1d      	adds	r5, r3, #4
 800977c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800977e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681c      	ldr	r4, [r3, #0]
 800978c:	466a      	mov	r2, sp
 800978e:	f107 0314 	add.w	r3, r7, #20
 8009792:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009796:	e882 0003 	stmia.w	r2, {r0, r1}
 800979a:	f107 0308 	add.w	r3, r7, #8
 800979e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80097a0:	4620      	mov	r0, r4
 80097a2:	f006 fd17 	bl	80101d4 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 80097a6:	e005      	b.n	80097b4 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 80097a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d102      	bne.n	80097b4 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 80097ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097b2:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00b      	beq.n	80097da <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a0a      	ldr	r2, [pc, #40]	; (80097f0 <HAL_MMC_ConfigWideBusOperation+0x194>)
 80097c8:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	431a      	orrs	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80097d6:	2301      	movs	r3, #1
 80097d8:	e000      	b.n	80097dc <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3728      	adds	r7, #40	; 0x28
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bdb0      	pop	{r4, r5, r7, pc}
 80097e4:	03b70200 	.word	0x03b70200
 80097e8:	03b70100 	.word	0x03b70100
 80097ec:	03b70000 	.word	0x03b70000
 80097f0:	1fe00fff 	.word	0x1fe00fff

080097f4 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80097f4:	b5b0      	push	{r4, r5, r7, lr}
 80097f6:	b096      	sub	sp, #88	; 0x58
 80097f8:	af02      	add	r7, sp, #8
 80097fa:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 80097fc:	2302      	movs	r3, #2
 80097fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4618      	mov	r0, r3
 8009808:	f006 fd2c 	bl	8010264 <SDMMC_GetPowerState>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d102      	bne.n	8009818 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8009812:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009816:	e0e6      	b.n	80099e6 <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4618      	mov	r0, r3
 800981e:	f006 fe09 	bl	8010434 <SDMMC_CmdSendCID>
 8009822:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8009824:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009826:	2b00      	cmp	r3, #0
 8009828:	d001      	beq.n	800982e <MMC_InitCard+0x3a>
  {
    return errorstate;
 800982a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800982c:	e0db      	b.n	80099e6 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2100      	movs	r1, #0
 8009834:	4618      	mov	r0, r3
 8009836:	f006 fd5a 	bl	80102ee <SDMMC_GetResponse>
 800983a:	4602      	mov	r2, r0
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2104      	movs	r1, #4
 8009846:	4618      	mov	r0, r3
 8009848:	f006 fd51 	bl	80102ee <SDMMC_GetResponse>
 800984c:	4602      	mov	r2, r0
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2108      	movs	r1, #8
 8009858:	4618      	mov	r0, r3
 800985a:	f006 fd48 	bl	80102ee <SDMMC_GetResponse>
 800985e:	4602      	mov	r2, r0
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	66da      	str	r2, [r3, #108]	; 0x6c
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	210c      	movs	r1, #12
 800986a:	4618      	mov	r0, r3
 800986c:	f006 fd3f 	bl	80102ee <SDMMC_GetResponse>
 8009870:	4602      	mov	r2, r0
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	671a      	str	r2, [r3, #112]	; 0x70
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800987e:	4611      	mov	r1, r2
 8009880:	4618      	mov	r0, r3
 8009882:	f006 fe16 	bl	80104b2 <SDMMC_CmdSetRelAddMmc>
 8009886:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8009888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800988a:	2b00      	cmp	r3, #0
 800988c:	d001      	beq.n	8009892 <MMC_InitCard+0x9e>
  {
    return errorstate;
 800988e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009890:	e0a9      	b.n	80099e6 <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8009892:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	641a      	str	r2, [r3, #64]	; 0x40

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a2:	041b      	lsls	r3, r3, #16
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f006 fde3 	bl	8010472 <SDMMC_CmdSendCSD>
 80098ac:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80098ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <MMC_InitCard+0xc4>
  {
    return errorstate;
 80098b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098b6:	e096      	b.n	80099e6 <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2100      	movs	r1, #0
 80098be:	4618      	mov	r0, r3
 80098c0:	f006 fd15 	bl	80102ee <SDMMC_GetResponse>
 80098c4:	4602      	mov	r2, r0
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2104      	movs	r1, #4
 80098d0:	4618      	mov	r0, r3
 80098d2:	f006 fd0c 	bl	80102ee <SDMMC_GetResponse>
 80098d6:	4602      	mov	r2, r0
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2108      	movs	r1, #8
 80098e2:	4618      	mov	r0, r3
 80098e4:	f006 fd03 	bl	80102ee <SDMMC_GetResponse>
 80098e8:	4602      	mov	r2, r0
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	210c      	movs	r1, #12
 80098f4:	4618      	mov	r0, r3
 80098f6:	f006 fcfa 	bl	80102ee <SDMMC_GetResponse>
 80098fa:	4602      	mov	r2, r0
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2104      	movs	r1, #4
 8009906:	4618      	mov	r0, r3
 8009908:	f006 fcf1 	bl	80102ee <SDMMC_GetResponse>
 800990c:	4603      	mov	r3, r0
 800990e:	0d1a      	lsrs	r2, r3, #20
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991c:	041b      	lsls	r3, r3, #16
 800991e:	4619      	mov	r1, r3
 8009920:	4610      	mov	r0, r2
 8009922:	f006 fd46 	bl	80103b2 <SDMMC_CmdSelDesel>
 8009926:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8009928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <MMC_InitCard+0x13e>
  {
    return errorstate;
 800992e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009930:	e059      	b.n	80099e6 <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8009932:	f107 031c 	add.w	r3, r7, #28
 8009936:	4619      	mov	r1, r3
 8009938:	6878      	ldr	r0, [r7, #4]
 800993a:	f7ff fbef 	bl	800911c <HAL_MMC_GetCardCSD>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009948:	e04d      	b.n	80099e6 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009952:	041b      	lsls	r3, r3, #16
 8009954:	4619      	mov	r1, r3
 8009956:	4610      	mov	r0, r2
 8009958:	f006 fdd0 	bl	80104fc <SDMMC_CmdSendStatus>
 800995c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 800995e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009960:	2b00      	cmp	r3, #0
 8009962:	d005      	beq.n	8009970 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800996a:	431a      	orrs	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	635a      	str	r2, [r3, #52]	; 0x34
  }


  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	3374      	adds	r3, #116	; 0x74
 8009974:	f04f 32ff 	mov.w	r2, #4294967295
 8009978:	4619      	mov	r1, r3
 800997a:	6878      	ldr	r0, [r7, #4]
 800997c:	f7ff fd72 	bl	8009464 <HAL_MMC_GetCardExtCSD>
 8009980:	4603      	mov	r3, r0
 8009982:	2b00      	cmp	r3, #0
 8009984:	d002      	beq.n	800998c <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998a:	e02c      	b.n	80099e6 <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009994:	041b      	lsls	r3, r3, #16
 8009996:	4619      	mov	r1, r3
 8009998:	4610      	mov	r0, r2
 800999a:	f006 fdaf 	bl	80104fc <SDMMC_CmdSendStatus>
 800999e:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 80099a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099ac:	431a      	orrs	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f107 0408 	add.w	r4, r7, #8
 80099b8:	1d1d      	adds	r5, r3, #4
 80099ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80099bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80099be:	682b      	ldr	r3, [r5, #0]
 80099c0:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 80099c2:	2300      	movs	r3, #0
 80099c4:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681c      	ldr	r4, [r3, #0]
 80099ca:	466a      	mov	r2, sp
 80099cc:	f107 0314 	add.w	r3, r7, #20
 80099d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80099d4:	e882 0003 	stmia.w	r2, {r0, r1}
 80099d8:	f107 0308 	add.w	r3, r7, #8
 80099dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099de:	4620      	mov	r0, r4
 80099e0:	f006 fbf8 	bl	80101d4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 80099e4:	2300      	movs	r3, #0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	3750      	adds	r7, #80	; 0x50
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bdb0      	pop	{r4, r5, r7, pc}
	...

080099f0 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099f8:	2300      	movs	r3, #0
 80099fa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80099fc:	2300      	movs	r3, #0
 80099fe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009a00:	2300      	movs	r3, #0
 8009a02:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f006 fcf5 	bl	80103f8 <SDMMC_CmdGoIdleState>
 8009a0e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d027      	beq.n	8009a66 <MMC_PowerON+0x76>
  {
    return errorstate;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	e034      	b.n	8009a84 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	1c5a      	adds	r2, r3, #1
 8009a1e:	60ba      	str	r2, [r7, #8]
 8009a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d102      	bne.n	8009a2e <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8009a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a2c:	e02a      	b.n	8009a84 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4916      	ldr	r1, [pc, #88]	; (8009a8c <MMC_PowerON+0x9c>)
 8009a34:	4618      	mov	r0, r3
 8009a36:	f006 fd84 	bl	8010542 <SDMMC_CmdOpCondition>
 8009a3a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d002      	beq.n	8009a48 <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8009a42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a46:	e01d      	b.n	8009a84 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f006 fc4d 	bl	80102ee <SDMMC_GetResponse>
 8009a54:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	0fdb      	lsrs	r3, r3, #31
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d101      	bne.n	8009a62 <MMC_PowerON+0x72>
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e000      	b.n	8009a64 <MMC_PowerON+0x74>
 8009a62:	2300      	movs	r3, #0
 8009a64:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d0d6      	beq.n	8009a1a <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	0e1b      	lsrs	r3, r3, #24
 8009a70:	2bc0      	cmp	r3, #192	; 0xc0
 8009a72:	d103      	bne.n	8009a7c <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2201      	movs	r2, #1
 8009a78:	639a      	str	r2, [r3, #56]	; 0x38
 8009a7a:	e002      	b.n	8009a82 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return HAL_MMC_ERROR_NONE;
 8009a82:	2300      	movs	r3, #0
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	c0ff8000 	.word	0xc0ff8000

08009a90 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b090      	sub	sp, #64	; 0x40
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009aa0:	f7f9 ffe0 	bl	8003a64 <HAL_GetTick>
 8009aa4:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2200      	movs	r2, #0
 8009aae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2200      	movs	r2, #0
 8009ab6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8009abc:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512U;
 8009abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ac2:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009ac4:	2390      	movs	r3, #144	; 0x90
 8009ac6:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ac8:	2302      	movs	r3, #2
 8009aca:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f107 0214 	add.w	r2, r7, #20
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f006 fc18 	bl	8010314 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2100      	movs	r1, #0
 8009aea:	4618      	mov	r0, r3
 8009aec:	f006 fd6c 	bl	80105c8 <SDMMC_CmdSendEXTCSD>
 8009af0:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d04e      	beq.n	8009b96 <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4a5c      	ldr	r2, [pc, #368]	; (8009c70 <MMC_ReadExtCSD+0x1e0>)
 8009afe:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b06:	431a      	orrs	r2, r3
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e0a6      	b.n	8009c66 <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d01c      	beq.n	8009b60 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < 8U; count++)
 8009b26:	2300      	movs	r3, #0
 8009b28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b2a:	e013      	b.n	8009b54 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f006 fb79 	bl	8010228 <SDMMC_ReadFIFO>
 8009b36:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8009b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b3c:	4413      	add	r3, r2
 8009b3e:	88fa      	ldrh	r2, [r7, #6]
 8009b40:	0892      	lsrs	r2, r2, #2
 8009b42:	b292      	uxth	r2, r2
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d102      	bne.n	8009b4e <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b4c:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < 8U; count++)
 8009b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b50:	3301      	adds	r3, #1
 8009b52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b56:	2b07      	cmp	r3, #7
 8009b58:	d9e8      	bls.n	8009b2c <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8009b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b5c:	3308      	adds	r3, #8
 8009b5e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009b60:	f7f9 ff80 	bl	8003a64 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d902      	bls.n	8009b76 <MMC_ReadExtCSD+0xe6>
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10f      	bne.n	8009b96 <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4a3d      	ldr	r2, [pc, #244]	; (8009c70 <MMC_ReadExtCSD+0x1e0>)
 8009b7c:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b82:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	635a      	str	r2, [r3, #52]	; 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8009b92:	2303      	movs	r3, #3
 8009b94:	e067      	b.n	8009c66 <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b9c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d0b9      	beq.n	8009b18 <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009baa:	f003 0308 	and.w	r3, r3, #8
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00f      	beq.n	8009bd2 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a2e      	ldr	r2, [pc, #184]	; (8009c70 <MMC_ReadExtCSD+0x1e0>)
 8009bb8:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bbe:	f043 0208 	orr.w	r2, r3, #8
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009bce:	2301      	movs	r3, #1
 8009bd0:	e049      	b.n	8009c66 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bd8:	f003 0302 	and.w	r3, r3, #2
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00f      	beq.n	8009c00 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a22      	ldr	r2, [pc, #136]	; (8009c70 <MMC_ReadExtCSD+0x1e0>)
 8009be6:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bec:	f043 0202 	orr.w	r2, r3, #2
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	e032      	b.n	8009c66 <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c06:	f003 0320 	and.w	r3, r3, #32
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00f      	beq.n	8009c2e <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a17      	ldr	r2, [pc, #92]	; (8009c70 <MMC_ReadExtCSD+0x1e0>)
 8009c14:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c1a:	f043 0220 	orr.w	r2, r3, #32
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	635a      	str	r2, [r3, #52]	; 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e01b      	b.n	8009c66 <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c36:	041b      	lsls	r3, r3, #16
 8009c38:	4619      	mov	r1, r3
 8009c3a:	4610      	mov	r0, r2
 8009c3c:	f006 fc5e 	bl	80104fc <SDMMC_CmdSendStatus>
 8009c40:	6338      	str	r0, [r7, #48]	; 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8009c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d005      	beq.n	8009c54 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4e:	431a      	orrs	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a06      	ldr	r2, [pc, #24]	; (8009c74 <MMC_ReadExtCSD+0x1e4>)
 8009c5a:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3740      	adds	r7, #64	; 0x40
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}
 8009c6e:	bf00      	nop
 8009c70:	1fe00fff 	.word	0x1fe00fff
 8009c74:	18000f3a 	.word	0x18000f3a

08009c78 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08a      	sub	sp, #40	; 0x28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8009c84:	2300      	movs	r3, #0
 8009c86:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c92:	d004      	beq.n	8009c9e <MMC_PwrClassUpdate+0x26>
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c9a:	f040 8085 	bne.w	8009da8 <MMC_PwrClassUpdate+0x130>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8009ca2:	f107 0114 	add.w	r1, r7, #20
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8009caa:	22bb      	movs	r2, #187	; 0xbb
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f7ff feef 	bl	8009a90 <MMC_ReadExtCSD>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d003      	beq.n	8009cc0 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	e002      	b.n	8009cc6 <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	0e1b      	lsrs	r3, r3, #24
 8009cc4:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b04      	cmp	r3, #4
 8009cca:	d105      	bne.n	8009cd8 <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8009cd2:	0e1b      	lsrs	r3, r3, #24
 8009cd4:	61bb      	str	r3, [r7, #24]
 8009cd6:	e00e      	b.n	8009cf6 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2b02      	cmp	r3, #2
 8009cdc:	d106      	bne.n	8009cec <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009ce4:	0c1b      	lsrs	r3, r3, #16
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	61bb      	str	r3, [r7, #24]
 8009cea:	e004      	b.n	8009cf6 <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009cf2:	0e1b      	lsrs	r3, r3, #24
 8009cf4:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d155      	bne.n	8009da8 <MMC_PwrClassUpdate+0x130>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d02:	d102      	bne.n	8009d0a <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	091b      	lsrs	r3, r3, #4
 8009d08:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	4053      	eors	r3, r2
 8009d10:	f003 030f 	and.w	r3, r3, #15
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d047      	beq.n	8009da8 <MMC_PwrClassUpdate+0x130>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6818      	ldr	r0, [r3, #0]
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	021b      	lsls	r3, r3, #8
 8009d20:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8009d24:	4b23      	ldr	r3, [pc, #140]	; (8009db4 <MMC_PwrClassUpdate+0x13c>)
 8009d26:	4313      	orrs	r3, r2
 8009d28:	4619      	mov	r1, r3
 8009d2a:	f006 fc2a 	bl	8010582 <SDMMC_CmdSwitch>
 8009d2e:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d138      	bne.n	8009da8 <MMC_PwrClassUpdate+0x130>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8009d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d3a:	627b      	str	r3, [r7, #36]	; 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d44:	041b      	lsls	r3, r3, #16
 8009d46:	4619      	mov	r1, r3
 8009d48:	4610      	mov	r0, r2
 8009d4a:	f006 fbd7 	bl	80104fc <SDMMC_CmdSendStatus>
 8009d4e:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d112      	bne.n	8009d7c <MMC_PwrClassUpdate+0x104>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f006 fac6 	bl	80102ee <SDMMC_GetResponse>
 8009d62:	6238      	str	r0, [r7, #32]
            count--;
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	3b01      	subs	r3, #1
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d104      	bne.n	8009d7e <MMC_PwrClassUpdate+0x106>
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1e0      	bne.n	8009d3c <MMC_PwrClassUpdate+0xc4>
 8009d7a:	e000      	b.n	8009d7e <MMC_PwrClassUpdate+0x106>
              break;
 8009d7c:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00b      	beq.n	8009d9c <MMC_PwrClassUpdate+0x124>
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d108      	bne.n	8009d9c <MMC_PwrClassUpdate+0x124>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d009      	beq.n	8009da8 <MMC_PwrClassUpdate+0x130>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8009d94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d98:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8009d9a:	e005      	b.n	8009da8 <MMC_PwrClassUpdate+0x130>
            }
          }
          else if (count == 0U)
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <MMC_PwrClassUpdate+0x130>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8009da2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009da6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8009da8:	69fb      	ldr	r3, [r7, #28]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3728      	adds	r7, #40	; 0x28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	03bb0000 	.word	0x03bb0000

08009db8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dba:	b08f      	sub	sp, #60	; 0x3c
 8009dbc:	af0a      	add	r7, sp, #40	; 0x28
 8009dbe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d101      	bne.n	8009dca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	e116      	b.n	8009ff8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d106      	bne.n	8009dea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f7f9 fb23 	bl	8003430 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2203      	movs	r2, #3
 8009dee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d102      	bne.n	8009e04 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f006 fe19 	bl	8010a40 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	603b      	str	r3, [r7, #0]
 8009e14:	687e      	ldr	r6, [r7, #4]
 8009e16:	466d      	mov	r5, sp
 8009e18:	f106 0410 	add.w	r4, r6, #16
 8009e1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e24:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009e28:	e885 0003 	stmia.w	r5, {r0, r1}
 8009e2c:	1d33      	adds	r3, r6, #4
 8009e2e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e30:	6838      	ldr	r0, [r7, #0]
 8009e32:	f006 fd97 	bl	8010964 <USB_CoreInit>
 8009e36:	4603      	mov	r3, r0
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d005      	beq.n	8009e48 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e0d7      	b.n	8009ff8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f006 fe07 	bl	8010a62 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
 8009e58:	e04a      	b.n	8009ef0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009e5a:	7bfa      	ldrb	r2, [r7, #15]
 8009e5c:	6879      	ldr	r1, [r7, #4]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	00db      	lsls	r3, r3, #3
 8009e62:	4413      	add	r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	440b      	add	r3, r1
 8009e68:	333d      	adds	r3, #61	; 0x3d
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009e6e:	7bfa      	ldrb	r2, [r7, #15]
 8009e70:	6879      	ldr	r1, [r7, #4]
 8009e72:	4613      	mov	r3, r2
 8009e74:	00db      	lsls	r3, r3, #3
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	440b      	add	r3, r1
 8009e7c:	333c      	adds	r3, #60	; 0x3c
 8009e7e:	7bfa      	ldrb	r2, [r7, #15]
 8009e80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009e82:	7bfa      	ldrb	r2, [r7, #15]
 8009e84:	7bfb      	ldrb	r3, [r7, #15]
 8009e86:	b298      	uxth	r0, r3
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	4613      	mov	r3, r2
 8009e8c:	00db      	lsls	r3, r3, #3
 8009e8e:	4413      	add	r3, r2
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	440b      	add	r3, r1
 8009e94:	3356      	adds	r3, #86	; 0x56
 8009e96:	4602      	mov	r2, r0
 8009e98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009e9a:	7bfa      	ldrb	r2, [r7, #15]
 8009e9c:	6879      	ldr	r1, [r7, #4]
 8009e9e:	4613      	mov	r3, r2
 8009ea0:	00db      	lsls	r3, r3, #3
 8009ea2:	4413      	add	r3, r2
 8009ea4:	009b      	lsls	r3, r3, #2
 8009ea6:	440b      	add	r3, r1
 8009ea8:	3340      	adds	r3, #64	; 0x40
 8009eaa:	2200      	movs	r2, #0
 8009eac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009eae:	7bfa      	ldrb	r2, [r7, #15]
 8009eb0:	6879      	ldr	r1, [r7, #4]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	4413      	add	r3, r2
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	440b      	add	r3, r1
 8009ebc:	3344      	adds	r3, #68	; 0x44
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009ec2:	7bfa      	ldrb	r2, [r7, #15]
 8009ec4:	6879      	ldr	r1, [r7, #4]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	440b      	add	r3, r1
 8009ed0:	3348      	adds	r3, #72	; 0x48
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009ed6:	7bfa      	ldrb	r2, [r7, #15]
 8009ed8:	6879      	ldr	r1, [r7, #4]
 8009eda:	4613      	mov	r3, r2
 8009edc:	00db      	lsls	r3, r3, #3
 8009ede:	4413      	add	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	440b      	add	r3, r1
 8009ee4:	334c      	adds	r3, #76	; 0x4c
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
 8009eec:	3301      	adds	r3, #1
 8009eee:	73fb      	strb	r3, [r7, #15]
 8009ef0:	7bfa      	ldrb	r2, [r7, #15]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d3af      	bcc.n	8009e5a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]
 8009efe:	e044      	b.n	8009f8a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f00:	7bfa      	ldrb	r2, [r7, #15]
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	4613      	mov	r3, r2
 8009f06:	00db      	lsls	r3, r3, #3
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009f12:	2200      	movs	r2, #0
 8009f14:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f16:	7bfa      	ldrb	r2, [r7, #15]
 8009f18:	6879      	ldr	r1, [r7, #4]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	00db      	lsls	r3, r3, #3
 8009f1e:	4413      	add	r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	440b      	add	r3, r1
 8009f24:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009f28:	7bfa      	ldrb	r2, [r7, #15]
 8009f2a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f2c:	7bfa      	ldrb	r2, [r7, #15]
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	4613      	mov	r3, r2
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	4413      	add	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009f3e:	2200      	movs	r2, #0
 8009f40:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f42:	7bfa      	ldrb	r2, [r7, #15]
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	4613      	mov	r3, r2
 8009f48:	00db      	lsls	r3, r3, #3
 8009f4a:	4413      	add	r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	440b      	add	r3, r1
 8009f50:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8009f54:	2200      	movs	r2, #0
 8009f56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f58:	7bfa      	ldrb	r2, [r7, #15]
 8009f5a:	6879      	ldr	r1, [r7, #4]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	00db      	lsls	r3, r3, #3
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	440b      	add	r3, r1
 8009f66:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009f6e:	7bfa      	ldrb	r2, [r7, #15]
 8009f70:	6879      	ldr	r1, [r7, #4]
 8009f72:	4613      	mov	r3, r2
 8009f74:	00db      	lsls	r3, r3, #3
 8009f76:	4413      	add	r3, r2
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	440b      	add	r3, r1
 8009f7c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f84:	7bfb      	ldrb	r3, [r7, #15]
 8009f86:	3301      	adds	r3, #1
 8009f88:	73fb      	strb	r3, [r7, #15]
 8009f8a:	7bfa      	ldrb	r2, [r7, #15]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d3b5      	bcc.n	8009f00 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	603b      	str	r3, [r7, #0]
 8009f9a:	687e      	ldr	r6, [r7, #4]
 8009f9c:	466d      	mov	r5, sp
 8009f9e:	f106 0410 	add.w	r4, r6, #16
 8009fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009faa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009fae:	e885 0003 	stmia.w	r5, {r0, r1}
 8009fb2:	1d33      	adds	r3, r6, #4
 8009fb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009fb6:	6838      	ldr	r0, [r7, #0]
 8009fb8:	f006 fda0 	bl	8010afc <USB_DevInit>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d005      	beq.n	8009fce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2202      	movs	r2, #2
 8009fc6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e014      	b.n	8009ff8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	d102      	bne.n	8009fec <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f80a 	bl	800a000 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f006 ff5e 	bl	8010eb2 <USB_DevDisconnect>

  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a000 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2200      	movs	r2, #0
 800a01a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	699b      	ldr	r3, [r3, #24]
 800a022:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a02e:	4b05      	ldr	r3, [pc, #20]	; (800a044 <HAL_PCDEx_ActivateLPM+0x44>)
 800a030:	4313      	orrs	r3, r2
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr
 800a044:	10000003 	.word	0x10000003

0800a048 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a050:	4b19      	ldr	r3, [pc, #100]	; (800a0b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	2b04      	cmp	r3, #4
 800a05a:	d00a      	beq.n	800a072 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a05c:	4b16      	ldr	r3, [pc, #88]	; (800a0b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a05e:	68db      	ldr	r3, [r3, #12]
 800a060:	f003 0307 	and.w	r3, r3, #7
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	429a      	cmp	r2, r3
 800a068:	d001      	beq.n	800a06e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a06a:	2301      	movs	r3, #1
 800a06c:	e01f      	b.n	800a0ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a06e:	2300      	movs	r3, #0
 800a070:	e01d      	b.n	800a0ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a072:	4b11      	ldr	r3, [pc, #68]	; (800a0b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a074:	68db      	ldr	r3, [r3, #12]
 800a076:	f023 0207 	bic.w	r2, r3, #7
 800a07a:	490f      	ldr	r1, [pc, #60]	; (800a0b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	4313      	orrs	r3, r2
 800a080:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a082:	f7f9 fcef 	bl	8003a64 <HAL_GetTick>
 800a086:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a088:	e009      	b.n	800a09e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a08a:	f7f9 fceb 	bl	8003a64 <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a098:	d901      	bls.n	800a09e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	e007      	b.n	800a0ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a09e:	4b06      	ldr	r3, [pc, #24]	; (800a0b8 <HAL_PWREx_ConfigSupply+0x70>)
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a0a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0aa:	d1ee      	bne.n	800a08a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3710      	adds	r7, #16
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
 800a0b6:	bf00      	nop
 800a0b8:	58024800 	.word	0x58024800

0800a0bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a0c0:	4b05      	ldr	r3, [pc, #20]	; (800a0d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	4a04      	ldr	r2, [pc, #16]	; (800a0d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a0c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0ca:	60d3      	str	r3, [r2, #12]
}
 800a0cc:	bf00      	nop
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d4:	4770      	bx	lr
 800a0d6:	bf00      	nop
 800a0d8:	58024800 	.word	0x58024800

0800a0dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b08c      	sub	sp, #48	; 0x30
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d101      	bne.n	800a0ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e3c8      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f003 0301 	and.w	r3, r3, #1
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f000 8087 	beq.w	800a20a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0fc:	4b88      	ldr	r3, [pc, #544]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a0fe:	691b      	ldr	r3, [r3, #16]
 800a100:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a104:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a106:	4b86      	ldr	r3, [pc, #536]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10e:	2b10      	cmp	r3, #16
 800a110:	d007      	beq.n	800a122 <HAL_RCC_OscConfig+0x46>
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	2b18      	cmp	r3, #24
 800a116:	d110      	bne.n	800a13a <HAL_RCC_OscConfig+0x5e>
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	f003 0303 	and.w	r3, r3, #3
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d10b      	bne.n	800a13a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a122:	4b7f      	ldr	r3, [pc, #508]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d06c      	beq.n	800a208 <HAL_RCC_OscConfig+0x12c>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d168      	bne.n	800a208 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e3a2      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a142:	d106      	bne.n	800a152 <HAL_RCC_OscConfig+0x76>
 800a144:	4b76      	ldr	r3, [pc, #472]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a75      	ldr	r2, [pc, #468]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a14a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a14e:	6013      	str	r3, [r2, #0]
 800a150:	e02e      	b.n	800a1b0 <HAL_RCC_OscConfig+0xd4>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d10c      	bne.n	800a174 <HAL_RCC_OscConfig+0x98>
 800a15a:	4b71      	ldr	r3, [pc, #452]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a70      	ldr	r2, [pc, #448]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	4b6e      	ldr	r3, [pc, #440]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a6d      	ldr	r2, [pc, #436]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a16c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a170:	6013      	str	r3, [r2, #0]
 800a172:	e01d      	b.n	800a1b0 <HAL_RCC_OscConfig+0xd4>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a17c:	d10c      	bne.n	800a198 <HAL_RCC_OscConfig+0xbc>
 800a17e:	4b68      	ldr	r3, [pc, #416]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4a67      	ldr	r2, [pc, #412]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a188:	6013      	str	r3, [r2, #0]
 800a18a:	4b65      	ldr	r3, [pc, #404]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4a64      	ldr	r2, [pc, #400]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a194:	6013      	str	r3, [r2, #0]
 800a196:	e00b      	b.n	800a1b0 <HAL_RCC_OscConfig+0xd4>
 800a198:	4b61      	ldr	r3, [pc, #388]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a60      	ldr	r2, [pc, #384]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a19e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1a2:	6013      	str	r3, [r2, #0]
 800a1a4:	4b5e      	ldr	r3, [pc, #376]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a5d      	ldr	r2, [pc, #372]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a1aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a1ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d013      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b8:	f7f9 fc54 	bl	8003a64 <HAL_GetTick>
 800a1bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1be:	e008      	b.n	800a1d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1c0:	f7f9 fc50 	bl	8003a64 <HAL_GetTick>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	1ad3      	subs	r3, r2, r3
 800a1ca:	2b64      	cmp	r3, #100	; 0x64
 800a1cc:	d901      	bls.n	800a1d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e356      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a1d2:	4b53      	ldr	r3, [pc, #332]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0f0      	beq.n	800a1c0 <HAL_RCC_OscConfig+0xe4>
 800a1de:	e014      	b.n	800a20a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1e0:	f7f9 fc40 	bl	8003a64 <HAL_GetTick>
 800a1e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a1e6:	e008      	b.n	800a1fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a1e8:	f7f9 fc3c 	bl	8003a64 <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	2b64      	cmp	r3, #100	; 0x64
 800a1f4:	d901      	bls.n	800a1fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e342      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a1fa:	4b49      	ldr	r3, [pc, #292]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d1f0      	bne.n	800a1e8 <HAL_RCC_OscConfig+0x10c>
 800a206:	e000      	b.n	800a20a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	f003 0302 	and.w	r3, r3, #2
 800a212:	2b00      	cmp	r3, #0
 800a214:	f000 808c 	beq.w	800a330 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a218:	4b41      	ldr	r3, [pc, #260]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a21a:	691b      	ldr	r3, [r3, #16]
 800a21c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a220:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a222:	4b3f      	ldr	r3, [pc, #252]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a226:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a228:	6a3b      	ldr	r3, [r7, #32]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d007      	beq.n	800a23e <HAL_RCC_OscConfig+0x162>
 800a22e:	6a3b      	ldr	r3, [r7, #32]
 800a230:	2b18      	cmp	r3, #24
 800a232:	d137      	bne.n	800a2a4 <HAL_RCC_OscConfig+0x1c8>
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	f003 0303 	and.w	r3, r3, #3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d132      	bne.n	800a2a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a23e:	4b38      	ldr	r3, [pc, #224]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 0304 	and.w	r3, r3, #4
 800a246:	2b00      	cmp	r3, #0
 800a248:	d005      	beq.n	800a256 <HAL_RCC_OscConfig+0x17a>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d101      	bne.n	800a256 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	e314      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a256:	4b32      	ldr	r3, [pc, #200]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f023 0219 	bic.w	r2, r3, #25
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68db      	ldr	r3, [r3, #12]
 800a262:	492f      	ldr	r1, [pc, #188]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a264:	4313      	orrs	r3, r2
 800a266:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a268:	f7f9 fbfc 	bl	8003a64 <HAL_GetTick>
 800a26c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a26e:	e008      	b.n	800a282 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a270:	f7f9 fbf8 	bl	8003a64 <HAL_GetTick>
 800a274:	4602      	mov	r2, r0
 800a276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a278:	1ad3      	subs	r3, r2, r3
 800a27a:	2b02      	cmp	r3, #2
 800a27c:	d901      	bls.n	800a282 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e2fe      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a282:	4b27      	ldr	r3, [pc, #156]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0304 	and.w	r3, r3, #4
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0f0      	beq.n	800a270 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a28e:	4b24      	ldr	r3, [pc, #144]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	061b      	lsls	r3, r3, #24
 800a29c:	4920      	ldr	r1, [pc, #128]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2a2:	e045      	b.n	800a330 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d026      	beq.n	800a2fa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a2ac:	4b1c      	ldr	r3, [pc, #112]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f023 0219 	bic.w	r2, r3, #25
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68db      	ldr	r3, [r3, #12]
 800a2b8:	4919      	ldr	r1, [pc, #100]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2be:	f7f9 fbd1 	bl	8003a64 <HAL_GetTick>
 800a2c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2c4:	e008      	b.n	800a2d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a2c6:	f7f9 fbcd 	bl	8003a64 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d901      	bls.n	800a2d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e2d3      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2d8:	4b11      	ldr	r3, [pc, #68]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0304 	and.w	r3, r3, #4
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d0f0      	beq.n	800a2c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2e4:	4b0e      	ldr	r3, [pc, #56]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	691b      	ldr	r3, [r3, #16]
 800a2f0:	061b      	lsls	r3, r3, #24
 800a2f2:	490b      	ldr	r1, [pc, #44]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	604b      	str	r3, [r1, #4]
 800a2f8:	e01a      	b.n	800a330 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a2fa:	4b09      	ldr	r3, [pc, #36]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a08      	ldr	r2, [pc, #32]	; (800a320 <HAL_RCC_OscConfig+0x244>)
 800a300:	f023 0301 	bic.w	r3, r3, #1
 800a304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a306:	f7f9 fbad 	bl	8003a64 <HAL_GetTick>
 800a30a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a30c:	e00a      	b.n	800a324 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a30e:	f7f9 fba9 	bl	8003a64 <HAL_GetTick>
 800a312:	4602      	mov	r2, r0
 800a314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d903      	bls.n	800a324 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e2af      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
 800a320:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a324:	4b96      	ldr	r3, [pc, #600]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0304 	and.w	r3, r3, #4
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1ee      	bne.n	800a30e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f003 0310 	and.w	r3, r3, #16
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d06a      	beq.n	800a412 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a33c:	4b90      	ldr	r3, [pc, #576]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a344:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a346:	4b8e      	ldr	r3, [pc, #568]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a34a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	2b08      	cmp	r3, #8
 800a350:	d007      	beq.n	800a362 <HAL_RCC_OscConfig+0x286>
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	2b18      	cmp	r3, #24
 800a356:	d11b      	bne.n	800a390 <HAL_RCC_OscConfig+0x2b4>
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	f003 0303 	and.w	r3, r3, #3
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d116      	bne.n	800a390 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a362:	4b87      	ldr	r3, [pc, #540]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d005      	beq.n	800a37a <HAL_RCC_OscConfig+0x29e>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	69db      	ldr	r3, [r3, #28]
 800a372:	2b80      	cmp	r3, #128	; 0x80
 800a374:	d001      	beq.n	800a37a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e282      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a37a:	4b81      	ldr	r3, [pc, #516]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	061b      	lsls	r3, r3, #24
 800a388:	497d      	ldr	r1, [pc, #500]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a38e:	e040      	b.n	800a412 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	69db      	ldr	r3, [r3, #28]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d023      	beq.n	800a3e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a398:	4b79      	ldr	r3, [pc, #484]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a78      	ldr	r2, [pc, #480]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a39e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3a4:	f7f9 fb5e 	bl	8003a64 <HAL_GetTick>
 800a3a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3aa:	e008      	b.n	800a3be <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3ac:	f7f9 fb5a 	bl	8003a64 <HAL_GetTick>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b4:	1ad3      	subs	r3, r2, r3
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d901      	bls.n	800a3be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a3ba:	2303      	movs	r3, #3
 800a3bc:	e260      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3be:	4b70      	ldr	r3, [pc, #448]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d0f0      	beq.n	800a3ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a3ca:	4b6d      	ldr	r3, [pc, #436]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a3cc:	68db      	ldr	r3, [r3, #12]
 800a3ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6a1b      	ldr	r3, [r3, #32]
 800a3d6:	061b      	lsls	r3, r3, #24
 800a3d8:	4969      	ldr	r1, [pc, #420]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60cb      	str	r3, [r1, #12]
 800a3de:	e018      	b.n	800a412 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a3e0:	4b67      	ldr	r3, [pc, #412]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a66      	ldr	r2, [pc, #408]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a3e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3ec:	f7f9 fb3a 	bl	8003a64 <HAL_GetTick>
 800a3f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a3f2:	e008      	b.n	800a406 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a3f4:	f7f9 fb36 	bl	8003a64 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	2b02      	cmp	r3, #2
 800a400:	d901      	bls.n	800a406 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e23c      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a406:	4b5e      	ldr	r3, [pc, #376]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1f0      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0308 	and.w	r3, r3, #8
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d036      	beq.n	800a48c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d019      	beq.n	800a45a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a426:	4b56      	ldr	r3, [pc, #344]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a42a:	4a55      	ldr	r2, [pc, #340]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a42c:	f043 0301 	orr.w	r3, r3, #1
 800a430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a432:	f7f9 fb17 	bl	8003a64 <HAL_GetTick>
 800a436:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a438:	e008      	b.n	800a44c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a43a:	f7f9 fb13 	bl	8003a64 <HAL_GetTick>
 800a43e:	4602      	mov	r2, r0
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	1ad3      	subs	r3, r2, r3
 800a444:	2b02      	cmp	r3, #2
 800a446:	d901      	bls.n	800a44c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e219      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a44c:	4b4c      	ldr	r3, [pc, #304]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a44e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a450:	f003 0302 	and.w	r3, r3, #2
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0f0      	beq.n	800a43a <HAL_RCC_OscConfig+0x35e>
 800a458:	e018      	b.n	800a48c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a45a:	4b49      	ldr	r3, [pc, #292]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a45c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a45e:	4a48      	ldr	r2, [pc, #288]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a460:	f023 0301 	bic.w	r3, r3, #1
 800a464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a466:	f7f9 fafd 	bl	8003a64 <HAL_GetTick>
 800a46a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a46c:	e008      	b.n	800a480 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a46e:	f7f9 faf9 	bl	8003a64 <HAL_GetTick>
 800a472:	4602      	mov	r2, r0
 800a474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a476:	1ad3      	subs	r3, r2, r3
 800a478:	2b02      	cmp	r3, #2
 800a47a:	d901      	bls.n	800a480 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800a47c:	2303      	movs	r3, #3
 800a47e:	e1ff      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a480:	4b3f      	ldr	r3, [pc, #252]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a484:	f003 0302 	and.w	r3, r3, #2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1f0      	bne.n	800a46e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0320 	and.w	r3, r3, #32
 800a494:	2b00      	cmp	r3, #0
 800a496:	d036      	beq.n	800a506 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d019      	beq.n	800a4d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a4a0:	4b37      	ldr	r3, [pc, #220]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	4a36      	ldr	r2, [pc, #216]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a4a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a4aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4ac:	f7f9 fada 	bl	8003a64 <HAL_GetTick>
 800a4b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4b2:	e008      	b.n	800a4c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4b4:	f7f9 fad6 	bl	8003a64 <HAL_GetTick>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	2b02      	cmp	r3, #2
 800a4c0:	d901      	bls.n	800a4c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800a4c2:	2303      	movs	r3, #3
 800a4c4:	e1dc      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a4c6:	4b2e      	ldr	r3, [pc, #184]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d0f0      	beq.n	800a4b4 <HAL_RCC_OscConfig+0x3d8>
 800a4d2:	e018      	b.n	800a506 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a4d4:	4b2a      	ldr	r3, [pc, #168]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	4a29      	ldr	r2, [pc, #164]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a4da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a4de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a4e0:	f7f9 fac0 	bl	8003a64 <HAL_GetTick>
 800a4e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4e6:	e008      	b.n	800a4fa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a4e8:	f7f9 fabc 	bl	8003a64 <HAL_GetTick>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	2b02      	cmp	r3, #2
 800a4f4:	d901      	bls.n	800a4fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e1c2      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a4fa:	4b21      	ldr	r3, [pc, #132]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1f0      	bne.n	800a4e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 0304 	and.w	r3, r3, #4
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f000 8086 	beq.w	800a620 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a514:	4b1b      	ldr	r3, [pc, #108]	; (800a584 <HAL_RCC_OscConfig+0x4a8>)
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	4a1a      	ldr	r2, [pc, #104]	; (800a584 <HAL_RCC_OscConfig+0x4a8>)
 800a51a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a51e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a520:	f7f9 faa0 	bl	8003a64 <HAL_GetTick>
 800a524:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a526:	e008      	b.n	800a53a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a528:	f7f9 fa9c 	bl	8003a64 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	2b64      	cmp	r3, #100	; 0x64
 800a534:	d901      	bls.n	800a53a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e1a2      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a53a:	4b12      	ldr	r3, [pc, #72]	; (800a584 <HAL_RCC_OscConfig+0x4a8>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a542:	2b00      	cmp	r3, #0
 800a544:	d0f0      	beq.n	800a528 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	689b      	ldr	r3, [r3, #8]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d106      	bne.n	800a55c <HAL_RCC_OscConfig+0x480>
 800a54e:	4b0c      	ldr	r3, [pc, #48]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a552:	4a0b      	ldr	r2, [pc, #44]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a554:	f043 0301 	orr.w	r3, r3, #1
 800a558:	6713      	str	r3, [r2, #112]	; 0x70
 800a55a:	e032      	b.n	800a5c2 <HAL_RCC_OscConfig+0x4e6>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	689b      	ldr	r3, [r3, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d111      	bne.n	800a588 <HAL_RCC_OscConfig+0x4ac>
 800a564:	4b06      	ldr	r3, [pc, #24]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a568:	4a05      	ldr	r2, [pc, #20]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a56a:	f023 0301 	bic.w	r3, r3, #1
 800a56e:	6713      	str	r3, [r2, #112]	; 0x70
 800a570:	4b03      	ldr	r3, [pc, #12]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a574:	4a02      	ldr	r2, [pc, #8]	; (800a580 <HAL_RCC_OscConfig+0x4a4>)
 800a576:	f023 0304 	bic.w	r3, r3, #4
 800a57a:	6713      	str	r3, [r2, #112]	; 0x70
 800a57c:	e021      	b.n	800a5c2 <HAL_RCC_OscConfig+0x4e6>
 800a57e:	bf00      	nop
 800a580:	58024400 	.word	0x58024400
 800a584:	58024800 	.word	0x58024800
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	2b05      	cmp	r3, #5
 800a58e:	d10c      	bne.n	800a5aa <HAL_RCC_OscConfig+0x4ce>
 800a590:	4b83      	ldr	r3, [pc, #524]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a594:	4a82      	ldr	r2, [pc, #520]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a596:	f043 0304 	orr.w	r3, r3, #4
 800a59a:	6713      	str	r3, [r2, #112]	; 0x70
 800a59c:	4b80      	ldr	r3, [pc, #512]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a59e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a0:	4a7f      	ldr	r2, [pc, #508]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a5a2:	f043 0301 	orr.w	r3, r3, #1
 800a5a6:	6713      	str	r3, [r2, #112]	; 0x70
 800a5a8:	e00b      	b.n	800a5c2 <HAL_RCC_OscConfig+0x4e6>
 800a5aa:	4b7d      	ldr	r3, [pc, #500]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a5ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ae:	4a7c      	ldr	r2, [pc, #496]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a5b0:	f023 0301 	bic.w	r3, r3, #1
 800a5b4:	6713      	str	r3, [r2, #112]	; 0x70
 800a5b6:	4b7a      	ldr	r3, [pc, #488]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ba:	4a79      	ldr	r2, [pc, #484]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a5bc:	f023 0304 	bic.w	r3, r3, #4
 800a5c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d015      	beq.n	800a5f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5ca:	f7f9 fa4b 	bl	8003a64 <HAL_GetTick>
 800a5ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5d0:	e00a      	b.n	800a5e8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5d2:	f7f9 fa47 	bl	8003a64 <HAL_GetTick>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5da:	1ad3      	subs	r3, r2, r3
 800a5dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d901      	bls.n	800a5e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a5e4:	2303      	movs	r3, #3
 800a5e6:	e14b      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a5e8:	4b6d      	ldr	r3, [pc, #436]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a5ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5ec:	f003 0302 	and.w	r3, r3, #2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d0ee      	beq.n	800a5d2 <HAL_RCC_OscConfig+0x4f6>
 800a5f4:	e014      	b.n	800a620 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5f6:	f7f9 fa35 	bl	8003a64 <HAL_GetTick>
 800a5fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5fc:	e00a      	b.n	800a614 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5fe:	f7f9 fa31 	bl	8003a64 <HAL_GetTick>
 800a602:	4602      	mov	r2, r0
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	1ad3      	subs	r3, r2, r3
 800a608:	f241 3288 	movw	r2, #5000	; 0x1388
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d901      	bls.n	800a614 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a610:	2303      	movs	r3, #3
 800a612:	e135      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a614:	4b62      	ldr	r3, [pc, #392]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a618:	f003 0302 	and.w	r3, r3, #2
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1ee      	bne.n	800a5fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 812a 	beq.w	800a87e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a62a:	4b5d      	ldr	r3, [pc, #372]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a632:	2b18      	cmp	r3, #24
 800a634:	f000 80ba 	beq.w	800a7ac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	f040 8095 	bne.w	800a76c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a642:	4b57      	ldr	r3, [pc, #348]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	4a56      	ldr	r2, [pc, #344]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a648:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a64c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a64e:	f7f9 fa09 	bl	8003a64 <HAL_GetTick>
 800a652:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a654:	e008      	b.n	800a668 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a656:	f7f9 fa05 	bl	8003a64 <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	2b02      	cmp	r3, #2
 800a662:	d901      	bls.n	800a668 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	e10b      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a668:	4b4d      	ldr	r3, [pc, #308]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a670:	2b00      	cmp	r3, #0
 800a672:	d1f0      	bne.n	800a656 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a674:	4b4a      	ldr	r3, [pc, #296]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a678:	4b4a      	ldr	r3, [pc, #296]	; (800a7a4 <HAL_RCC_OscConfig+0x6c8>)
 800a67a:	4013      	ands	r3, r2
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a684:	0112      	lsls	r2, r2, #4
 800a686:	430a      	orrs	r2, r1
 800a688:	4945      	ldr	r1, [pc, #276]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a68a:	4313      	orrs	r3, r2
 800a68c:	628b      	str	r3, [r1, #40]	; 0x28
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a692:	3b01      	subs	r3, #1
 800a694:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a69c:	3b01      	subs	r3, #1
 800a69e:	025b      	lsls	r3, r3, #9
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	431a      	orrs	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	041b      	lsls	r3, r3, #16
 800a6ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a6b0:	431a      	orrs	r2, r3
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	061b      	lsls	r3, r3, #24
 800a6ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a6be:	4938      	ldr	r1, [pc, #224]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a6c4:	4b36      	ldr	r3, [pc, #216]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c8:	4a35      	ldr	r2, [pc, #212]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a6ca:	f023 0301 	bic.w	r3, r3, #1
 800a6ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a6d0:	4b33      	ldr	r3, [pc, #204]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a6d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6d4:	4b34      	ldr	r3, [pc, #208]	; (800a7a8 <HAL_RCC_OscConfig+0x6cc>)
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a6dc:	00d2      	lsls	r2, r2, #3
 800a6de:	4930      	ldr	r1, [pc, #192]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a6e4:	4b2e      	ldr	r3, [pc, #184]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a6e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6e8:	f023 020c 	bic.w	r2, r3, #12
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f0:	492b      	ldr	r1, [pc, #172]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a6f6:	4b2a      	ldr	r3, [pc, #168]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a6f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fa:	f023 0202 	bic.w	r2, r3, #2
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a702:	4927      	ldr	r1, [pc, #156]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a704:	4313      	orrs	r3, r2
 800a706:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a708:	4b25      	ldr	r3, [pc, #148]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a70a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70c:	4a24      	ldr	r2, [pc, #144]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a70e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a712:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a714:	4b22      	ldr	r3, [pc, #136]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a718:	4a21      	ldr	r2, [pc, #132]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a71a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a71e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a720:	4b1f      	ldr	r3, [pc, #124]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a724:	4a1e      	ldr	r2, [pc, #120]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a72a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a72c:	4b1c      	ldr	r3, [pc, #112]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a730:	4a1b      	ldr	r2, [pc, #108]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a732:	f043 0301 	orr.w	r3, r3, #1
 800a736:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a738:	4b19      	ldr	r3, [pc, #100]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4a18      	ldr	r2, [pc, #96]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a73e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a744:	f7f9 f98e 	bl	8003a64 <HAL_GetTick>
 800a748:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a74a:	e008      	b.n	800a75e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a74c:	f7f9 f98a 	bl	8003a64 <HAL_GetTick>
 800a750:	4602      	mov	r2, r0
 800a752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a754:	1ad3      	subs	r3, r2, r3
 800a756:	2b02      	cmp	r3, #2
 800a758:	d901      	bls.n	800a75e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a75a:	2303      	movs	r3, #3
 800a75c:	e090      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a75e:	4b10      	ldr	r3, [pc, #64]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a766:	2b00      	cmp	r3, #0
 800a768:	d0f0      	beq.n	800a74c <HAL_RCC_OscConfig+0x670>
 800a76a:	e088      	b.n	800a87e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a76c:	4b0c      	ldr	r3, [pc, #48]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a0b      	ldr	r2, [pc, #44]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a778:	f7f9 f974 	bl	8003a64 <HAL_GetTick>
 800a77c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a77e:	e008      	b.n	800a792 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a780:	f7f9 f970 	bl	8003a64 <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	2b02      	cmp	r3, #2
 800a78c:	d901      	bls.n	800a792 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a78e:	2303      	movs	r3, #3
 800a790:	e076      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a792:	4b03      	ldr	r3, [pc, #12]	; (800a7a0 <HAL_RCC_OscConfig+0x6c4>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1f0      	bne.n	800a780 <HAL_RCC_OscConfig+0x6a4>
 800a79e:	e06e      	b.n	800a87e <HAL_RCC_OscConfig+0x7a2>
 800a7a0:	58024400 	.word	0x58024400
 800a7a4:	fffffc0c 	.word	0xfffffc0c
 800a7a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a7ac:	4b36      	ldr	r3, [pc, #216]	; (800a888 <HAL_RCC_OscConfig+0x7ac>)
 800a7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a7b2:	4b35      	ldr	r3, [pc, #212]	; (800a888 <HAL_RCC_OscConfig+0x7ac>)
 800a7b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d031      	beq.n	800a824 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f003 0203 	and.w	r2, r3, #3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d12a      	bne.n	800a824 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	091b      	lsrs	r3, r3, #4
 800a7d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d122      	bne.n	800a824 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d11a      	bne.n	800a824 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	0a5b      	lsrs	r3, r3, #9
 800a7f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d111      	bne.n	800a824 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	0c1b      	lsrs	r3, r3, #16
 800a804:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a80e:	429a      	cmp	r2, r3
 800a810:	d108      	bne.n	800a824 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	0e1b      	lsrs	r3, r3, #24
 800a816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a81e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a820:	429a      	cmp	r2, r3
 800a822:	d001      	beq.n	800a828 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	e02b      	b.n	800a880 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a828:	4b17      	ldr	r3, [pc, #92]	; (800a888 <HAL_RCC_OscConfig+0x7ac>)
 800a82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82c:	08db      	lsrs	r3, r3, #3
 800a82e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a832:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d01f      	beq.n	800a87e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a83e:	4b12      	ldr	r3, [pc, #72]	; (800a888 <HAL_RCC_OscConfig+0x7ac>)
 800a840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a842:	4a11      	ldr	r2, [pc, #68]	; (800a888 <HAL_RCC_OscConfig+0x7ac>)
 800a844:	f023 0301 	bic.w	r3, r3, #1
 800a848:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a84a:	f7f9 f90b 	bl	8003a64 <HAL_GetTick>
 800a84e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a850:	bf00      	nop
 800a852:	f7f9 f907 	bl	8003a64 <HAL_GetTick>
 800a856:	4602      	mov	r2, r0
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d0f9      	beq.n	800a852 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a85e:	4b0a      	ldr	r3, [pc, #40]	; (800a888 <HAL_RCC_OscConfig+0x7ac>)
 800a860:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a862:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <HAL_RCC_OscConfig+0x7b0>)
 800a864:	4013      	ands	r3, r2
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a86a:	00d2      	lsls	r2, r2, #3
 800a86c:	4906      	ldr	r1, [pc, #24]	; (800a888 <HAL_RCC_OscConfig+0x7ac>)
 800a86e:	4313      	orrs	r3, r2
 800a870:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a872:	4b05      	ldr	r3, [pc, #20]	; (800a888 <HAL_RCC_OscConfig+0x7ac>)
 800a874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a876:	4a04      	ldr	r2, [pc, #16]	; (800a888 <HAL_RCC_OscConfig+0x7ac>)
 800a878:	f043 0301 	orr.w	r3, r3, #1
 800a87c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3730      	adds	r7, #48	; 0x30
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	58024400 	.word	0x58024400
 800a88c:	ffff0007 	.word	0xffff0007

0800a890 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d101      	bne.n	800a8a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e19c      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a8a4:	4b8a      	ldr	r3, [pc, #552]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 030f 	and.w	r3, r3, #15
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d910      	bls.n	800a8d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8b2:	4b87      	ldr	r3, [pc, #540]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f023 020f 	bic.w	r2, r3, #15
 800a8ba:	4985      	ldr	r1, [pc, #532]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8c2:	4b83      	ldr	r3, [pc, #524]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 030f 	and.w	r3, r3, #15
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d001      	beq.n	800a8d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	e184      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f003 0304 	and.w	r3, r3, #4
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d010      	beq.n	800a902 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	691a      	ldr	r2, [r3, #16]
 800a8e4:	4b7b      	ldr	r3, [pc, #492]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a8e6:	699b      	ldr	r3, [r3, #24]
 800a8e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ec:	429a      	cmp	r2, r3
 800a8ee:	d908      	bls.n	800a902 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a8f0:	4b78      	ldr	r3, [pc, #480]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a8f2:	699b      	ldr	r3, [r3, #24]
 800a8f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	4975      	ldr	r1, [pc, #468]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f003 0308 	and.w	r3, r3, #8
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d010      	beq.n	800a930 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	695a      	ldr	r2, [r3, #20]
 800a912:	4b70      	ldr	r3, [pc, #448]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a914:	69db      	ldr	r3, [r3, #28]
 800a916:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d908      	bls.n	800a930 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a91e:	4b6d      	ldr	r3, [pc, #436]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	695b      	ldr	r3, [r3, #20]
 800a92a:	496a      	ldr	r1, [pc, #424]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0310 	and.w	r3, r3, #16
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d010      	beq.n	800a95e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	699a      	ldr	r2, [r3, #24]
 800a940:	4b64      	ldr	r3, [pc, #400]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a942:	69db      	ldr	r3, [r3, #28]
 800a944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a948:	429a      	cmp	r2, r3
 800a94a:	d908      	bls.n	800a95e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a94c:	4b61      	ldr	r3, [pc, #388]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a94e:	69db      	ldr	r3, [r3, #28]
 800a950:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	495e      	ldr	r1, [pc, #376]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a95a:	4313      	orrs	r3, r2
 800a95c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 0320 	and.w	r3, r3, #32
 800a966:	2b00      	cmp	r3, #0
 800a968:	d010      	beq.n	800a98c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	69da      	ldr	r2, [r3, #28]
 800a96e:	4b59      	ldr	r3, [pc, #356]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a976:	429a      	cmp	r2, r3
 800a978:	d908      	bls.n	800a98c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a97a:	4b56      	ldr	r3, [pc, #344]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	69db      	ldr	r3, [r3, #28]
 800a986:	4953      	ldr	r1, [pc, #332]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 0302 	and.w	r3, r3, #2
 800a994:	2b00      	cmp	r3, #0
 800a996:	d010      	beq.n	800a9ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	68da      	ldr	r2, [r3, #12]
 800a99c:	4b4d      	ldr	r3, [pc, #308]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	f003 030f 	and.w	r3, r3, #15
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d908      	bls.n	800a9ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9a8:	4b4a      	ldr	r3, [pc, #296]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9aa:	699b      	ldr	r3, [r3, #24]
 800a9ac:	f023 020f 	bic.w	r2, r3, #15
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	4947      	ldr	r1, [pc, #284]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0301 	and.w	r3, r3, #1
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d055      	beq.n	800aa72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a9c6:	4b43      	ldr	r3, [pc, #268]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	4940      	ldr	r1, [pc, #256]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	d107      	bne.n	800a9f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a9e0:	4b3c      	ldr	r3, [pc, #240]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d121      	bne.n	800aa30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e0f6      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d107      	bne.n	800aa08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a9f8:	4b36      	ldr	r3, [pc, #216]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d115      	bne.n	800aa30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	e0ea      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	685b      	ldr	r3, [r3, #4]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d107      	bne.n	800aa20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aa10:	4b30      	ldr	r3, [pc, #192]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d109      	bne.n	800aa30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e0de      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aa20:	4b2c      	ldr	r3, [pc, #176]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	e0d6      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800aa30:	4b28      	ldr	r3, [pc, #160]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	f023 0207 	bic.w	r2, r3, #7
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	4925      	ldr	r1, [pc, #148]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa42:	f7f9 f80f 	bl	8003a64 <HAL_GetTick>
 800aa46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa48:	e00a      	b.n	800aa60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa4a:	f7f9 f80b 	bl	8003a64 <HAL_GetTick>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	1ad3      	subs	r3, r2, r3
 800aa54:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d901      	bls.n	800aa60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800aa5c:	2303      	movs	r3, #3
 800aa5e:	e0be      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa60:	4b1c      	ldr	r3, [pc, #112]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa62:	691b      	ldr	r3, [r3, #16]
 800aa64:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	429a      	cmp	r2, r3
 800aa70:	d1eb      	bne.n	800aa4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f003 0302 	and.w	r3, r3, #2
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d010      	beq.n	800aaa0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	68da      	ldr	r2, [r3, #12]
 800aa82:	4b14      	ldr	r3, [pc, #80]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa84:	699b      	ldr	r3, [r3, #24]
 800aa86:	f003 030f 	and.w	r3, r3, #15
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	d208      	bcs.n	800aaa0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa8e:	4b11      	ldr	r3, [pc, #68]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	f023 020f 	bic.w	r2, r3, #15
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	68db      	ldr	r3, [r3, #12]
 800aa9a:	490e      	ldr	r1, [pc, #56]	; (800aad4 <HAL_RCC_ClockConfig+0x244>)
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aaa0:	4b0b      	ldr	r3, [pc, #44]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 030f 	and.w	r3, r3, #15
 800aaa8:	683a      	ldr	r2, [r7, #0]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d214      	bcs.n	800aad8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aaae:	4b08      	ldr	r3, [pc, #32]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f023 020f 	bic.w	r2, r3, #15
 800aab6:	4906      	ldr	r1, [pc, #24]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aabe:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <HAL_RCC_ClockConfig+0x240>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f003 030f 	and.w	r3, r3, #15
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d005      	beq.n	800aad8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e086      	b.n	800abde <HAL_RCC_ClockConfig+0x34e>
 800aad0:	52002000 	.word	0x52002000
 800aad4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0304 	and.w	r3, r3, #4
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d010      	beq.n	800ab06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	691a      	ldr	r2, [r3, #16]
 800aae8:	4b3f      	ldr	r3, [pc, #252]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800aaea:	699b      	ldr	r3, [r3, #24]
 800aaec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d208      	bcs.n	800ab06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aaf4:	4b3c      	ldr	r3, [pc, #240]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	4939      	ldr	r1, [pc, #228]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab02:	4313      	orrs	r3, r2
 800ab04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 0308 	and.w	r3, r3, #8
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d010      	beq.n	800ab34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	695a      	ldr	r2, [r3, #20]
 800ab16:	4b34      	ldr	r3, [pc, #208]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d208      	bcs.n	800ab34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ab22:	4b31      	ldr	r3, [pc, #196]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab24:	69db      	ldr	r3, [r3, #28]
 800ab26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	695b      	ldr	r3, [r3, #20]
 800ab2e:	492e      	ldr	r1, [pc, #184]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab30:	4313      	orrs	r3, r2
 800ab32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 0310 	and.w	r3, r3, #16
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d010      	beq.n	800ab62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	699a      	ldr	r2, [r3, #24]
 800ab44:	4b28      	ldr	r3, [pc, #160]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab46:	69db      	ldr	r3, [r3, #28]
 800ab48:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d208      	bcs.n	800ab62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ab50:	4b25      	ldr	r3, [pc, #148]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	4922      	ldr	r1, [pc, #136]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f003 0320 	and.w	r3, r3, #32
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d010      	beq.n	800ab90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	69da      	ldr	r2, [r3, #28]
 800ab72:	4b1d      	ldr	r3, [pc, #116]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab74:	6a1b      	ldr	r3, [r3, #32]
 800ab76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d208      	bcs.n	800ab90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ab7e:	4b1a      	ldr	r3, [pc, #104]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab80:	6a1b      	ldr	r3, [r3, #32]
 800ab82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	4917      	ldr	r1, [pc, #92]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ab90:	f000 f834 	bl	800abfc <HAL_RCC_GetSysClockFreq>
 800ab94:	4602      	mov	r2, r0
 800ab96:	4b14      	ldr	r3, [pc, #80]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	f003 030f 	and.w	r3, r3, #15
 800aba0:	4912      	ldr	r1, [pc, #72]	; (800abec <HAL_RCC_ClockConfig+0x35c>)
 800aba2:	5ccb      	ldrb	r3, [r1, r3]
 800aba4:	f003 031f 	and.w	r3, r3, #31
 800aba8:	fa22 f303 	lsr.w	r3, r2, r3
 800abac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800abae:	4b0e      	ldr	r3, [pc, #56]	; (800abe8 <HAL_RCC_ClockConfig+0x358>)
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	f003 030f 	and.w	r3, r3, #15
 800abb6:	4a0d      	ldr	r2, [pc, #52]	; (800abec <HAL_RCC_ClockConfig+0x35c>)
 800abb8:	5cd3      	ldrb	r3, [r2, r3]
 800abba:	f003 031f 	and.w	r3, r3, #31
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	fa22 f303 	lsr.w	r3, r2, r3
 800abc4:	4a0a      	ldr	r2, [pc, #40]	; (800abf0 <HAL_RCC_ClockConfig+0x360>)
 800abc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800abc8:	4a0a      	ldr	r2, [pc, #40]	; (800abf4 <HAL_RCC_ClockConfig+0x364>)
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800abce:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <HAL_RCC_ClockConfig+0x368>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7f8 fefc 	bl	80039d0 <HAL_InitTick>
 800abd8:	4603      	mov	r3, r0
 800abda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800abdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	58024400 	.word	0x58024400
 800abec:	08015644 	.word	0x08015644
 800abf0:	24000014 	.word	0x24000014
 800abf4:	24000010 	.word	0x24000010
 800abf8:	24000018 	.word	0x24000018

0800abfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b089      	sub	sp, #36	; 0x24
 800ac00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ac02:	4bb3      	ldr	r3, [pc, #716]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac0a:	2b18      	cmp	r3, #24
 800ac0c:	f200 8155 	bhi.w	800aeba <HAL_RCC_GetSysClockFreq+0x2be>
 800ac10:	a201      	add	r2, pc, #4	; (adr r2, 800ac18 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ac12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac16:	bf00      	nop
 800ac18:	0800ac7d 	.word	0x0800ac7d
 800ac1c:	0800aebb 	.word	0x0800aebb
 800ac20:	0800aebb 	.word	0x0800aebb
 800ac24:	0800aebb 	.word	0x0800aebb
 800ac28:	0800aebb 	.word	0x0800aebb
 800ac2c:	0800aebb 	.word	0x0800aebb
 800ac30:	0800aebb 	.word	0x0800aebb
 800ac34:	0800aebb 	.word	0x0800aebb
 800ac38:	0800aca3 	.word	0x0800aca3
 800ac3c:	0800aebb 	.word	0x0800aebb
 800ac40:	0800aebb 	.word	0x0800aebb
 800ac44:	0800aebb 	.word	0x0800aebb
 800ac48:	0800aebb 	.word	0x0800aebb
 800ac4c:	0800aebb 	.word	0x0800aebb
 800ac50:	0800aebb 	.word	0x0800aebb
 800ac54:	0800aebb 	.word	0x0800aebb
 800ac58:	0800aca9 	.word	0x0800aca9
 800ac5c:	0800aebb 	.word	0x0800aebb
 800ac60:	0800aebb 	.word	0x0800aebb
 800ac64:	0800aebb 	.word	0x0800aebb
 800ac68:	0800aebb 	.word	0x0800aebb
 800ac6c:	0800aebb 	.word	0x0800aebb
 800ac70:	0800aebb 	.word	0x0800aebb
 800ac74:	0800aebb 	.word	0x0800aebb
 800ac78:	0800acaf 	.word	0x0800acaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac7c:	4b94      	ldr	r3, [pc, #592]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0320 	and.w	r3, r3, #32
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d009      	beq.n	800ac9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac88:	4b91      	ldr	r3, [pc, #580]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	08db      	lsrs	r3, r3, #3
 800ac8e:	f003 0303 	and.w	r3, r3, #3
 800ac92:	4a90      	ldr	r2, [pc, #576]	; (800aed4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac94:	fa22 f303 	lsr.w	r3, r2, r3
 800ac98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ac9a:	e111      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac9c:	4b8d      	ldr	r3, [pc, #564]	; (800aed4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac9e:	61bb      	str	r3, [r7, #24]
      break;
 800aca0:	e10e      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800aca2:	4b8d      	ldr	r3, [pc, #564]	; (800aed8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aca4:	61bb      	str	r3, [r7, #24]
      break;
 800aca6:	e10b      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800aca8:	4b8c      	ldr	r3, [pc, #560]	; (800aedc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800acaa:	61bb      	str	r3, [r7, #24]
      break;
 800acac:	e108      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800acae:	4b88      	ldr	r3, [pc, #544]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acb2:	f003 0303 	and.w	r3, r3, #3
 800acb6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800acb8:	4b85      	ldr	r3, [pc, #532]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acbc:	091b      	lsrs	r3, r3, #4
 800acbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acc2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800acc4:	4b82      	ldr	r3, [pc, #520]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc8:	f003 0301 	and.w	r3, r3, #1
 800accc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800acce:	4b80      	ldr	r3, [pc, #512]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd2:	08db      	lsrs	r3, r3, #3
 800acd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	fb02 f303 	mul.w	r3, r2, r3
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800acea:	693b      	ldr	r3, [r7, #16]
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 80e1 	beq.w	800aeb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	2b02      	cmp	r3, #2
 800acf6:	f000 8083 	beq.w	800ae00 <HAL_RCC_GetSysClockFreq+0x204>
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2b02      	cmp	r3, #2
 800acfe:	f200 80a1 	bhi.w	800ae44 <HAL_RCC_GetSysClockFreq+0x248>
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d003      	beq.n	800ad10 <HAL_RCC_GetSysClockFreq+0x114>
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d056      	beq.n	800adbc <HAL_RCC_GetSysClockFreq+0x1c0>
 800ad0e:	e099      	b.n	800ae44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad10:	4b6f      	ldr	r3, [pc, #444]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f003 0320 	and.w	r3, r3, #32
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d02d      	beq.n	800ad78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad1c:	4b6c      	ldr	r3, [pc, #432]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	08db      	lsrs	r3, r3, #3
 800ad22:	f003 0303 	and.w	r3, r3, #3
 800ad26:	4a6b      	ldr	r2, [pc, #428]	; (800aed4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ad28:	fa22 f303 	lsr.w	r3, r2, r3
 800ad2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	ee07 3a90 	vmov	s15, r3
 800ad34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	ee07 3a90 	vmov	s15, r3
 800ad3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad46:	4b62      	ldr	r3, [pc, #392]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4e:	ee07 3a90 	vmov	s15, r3
 800ad52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad56:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad5a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ad76:	e087      	b.n	800ae88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad82:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aee4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ad86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad8a:	4b51      	ldr	r3, [pc, #324]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad9e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ada2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adba:	e065      	b.n	800ae88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aee8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800adca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adce:	4b40      	ldr	r3, [pc, #256]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800add0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add6:	ee07 3a90 	vmov	s15, r3
 800adda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adde:	ed97 6a02 	vldr	s12, [r7, #8]
 800ade2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ade6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adfe:	e043      	b.n	800ae88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aeec <HAL_RCC_GetSysClockFreq+0x2f0>
 800ae0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae12:	4b2f      	ldr	r3, [pc, #188]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae22:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae42:	e021      	b.n	800ae88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	ee07 3a90 	vmov	s15, r3
 800ae4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aee8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae56:	4b1e      	ldr	r3, [pc, #120]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5e:	ee07 3a90 	vmov	s15, r3
 800ae62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae66:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aee0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ae88:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae8c:	0a5b      	lsrs	r3, r3, #9
 800ae8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae92:	3301      	adds	r3, #1
 800ae94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	ee07 3a90 	vmov	s15, r3
 800ae9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800aea0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aea4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aea8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeac:	ee17 3a90 	vmov	r3, s15
 800aeb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800aeb2:	e005      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	61bb      	str	r3, [r7, #24]
      break;
 800aeb8:	e002      	b.n	800aec0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800aeba:	4b07      	ldr	r3, [pc, #28]	; (800aed8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800aebc:	61bb      	str	r3, [r7, #24]
      break;
 800aebe:	bf00      	nop
  }

  return sysclockfreq;
 800aec0:	69bb      	ldr	r3, [r7, #24]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3724      	adds	r7, #36	; 0x24
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	58024400 	.word	0x58024400
 800aed4:	03d09000 	.word	0x03d09000
 800aed8:	003d0900 	.word	0x003d0900
 800aedc:	017d7840 	.word	0x017d7840
 800aee0:	46000000 	.word	0x46000000
 800aee4:	4c742400 	.word	0x4c742400
 800aee8:	4a742400 	.word	0x4a742400
 800aeec:	4bbebc20 	.word	0x4bbebc20

0800aef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aef0:	b580      	push	{r7, lr}
 800aef2:	b082      	sub	sp, #8
 800aef4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aef6:	f7ff fe81 	bl	800abfc <HAL_RCC_GetSysClockFreq>
 800aefa:	4602      	mov	r2, r0
 800aefc:	4b10      	ldr	r3, [pc, #64]	; (800af40 <HAL_RCC_GetHCLKFreq+0x50>)
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	0a1b      	lsrs	r3, r3, #8
 800af02:	f003 030f 	and.w	r3, r3, #15
 800af06:	490f      	ldr	r1, [pc, #60]	; (800af44 <HAL_RCC_GetHCLKFreq+0x54>)
 800af08:	5ccb      	ldrb	r3, [r1, r3]
 800af0a:	f003 031f 	and.w	r3, r3, #31
 800af0e:	fa22 f303 	lsr.w	r3, r2, r3
 800af12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800af14:	4b0a      	ldr	r3, [pc, #40]	; (800af40 <HAL_RCC_GetHCLKFreq+0x50>)
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	f003 030f 	and.w	r3, r3, #15
 800af1c:	4a09      	ldr	r2, [pc, #36]	; (800af44 <HAL_RCC_GetHCLKFreq+0x54>)
 800af1e:	5cd3      	ldrb	r3, [r2, r3]
 800af20:	f003 031f 	and.w	r3, r3, #31
 800af24:	687a      	ldr	r2, [r7, #4]
 800af26:	fa22 f303 	lsr.w	r3, r2, r3
 800af2a:	4a07      	ldr	r2, [pc, #28]	; (800af48 <HAL_RCC_GetHCLKFreq+0x58>)
 800af2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800af2e:	4a07      	ldr	r2, [pc, #28]	; (800af4c <HAL_RCC_GetHCLKFreq+0x5c>)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800af34:	4b04      	ldr	r3, [pc, #16]	; (800af48 <HAL_RCC_GetHCLKFreq+0x58>)
 800af36:	681b      	ldr	r3, [r3, #0]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3708      	adds	r7, #8
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	58024400 	.word	0x58024400
 800af44:	08015644 	.word	0x08015644
 800af48:	24000014 	.word	0x24000014
 800af4c:	24000010 	.word	0x24000010

0800af50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800af54:	f7ff ffcc 	bl	800aef0 <HAL_RCC_GetHCLKFreq>
 800af58:	4602      	mov	r2, r0
 800af5a:	4b06      	ldr	r3, [pc, #24]	; (800af74 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af5c:	69db      	ldr	r3, [r3, #28]
 800af5e:	091b      	lsrs	r3, r3, #4
 800af60:	f003 0307 	and.w	r3, r3, #7
 800af64:	4904      	ldr	r1, [pc, #16]	; (800af78 <HAL_RCC_GetPCLK1Freq+0x28>)
 800af66:	5ccb      	ldrb	r3, [r1, r3]
 800af68:	f003 031f 	and.w	r3, r3, #31
 800af6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800af70:	4618      	mov	r0, r3
 800af72:	bd80      	pop	{r7, pc}
 800af74:	58024400 	.word	0x58024400
 800af78:	08015644 	.word	0x08015644

0800af7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800af80:	f7ff ffb6 	bl	800aef0 <HAL_RCC_GetHCLKFreq>
 800af84:	4602      	mov	r2, r0
 800af86:	4b06      	ldr	r3, [pc, #24]	; (800afa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af88:	69db      	ldr	r3, [r3, #28]
 800af8a:	0a1b      	lsrs	r3, r3, #8
 800af8c:	f003 0307 	and.w	r3, r3, #7
 800af90:	4904      	ldr	r1, [pc, #16]	; (800afa4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800af92:	5ccb      	ldrb	r3, [r1, r3]
 800af94:	f003 031f 	and.w	r3, r3, #31
 800af98:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	58024400 	.word	0x58024400
 800afa4:	08015644 	.word	0x08015644

0800afa8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800afac:	b0c6      	sub	sp, #280	; 0x118
 800afae:	af00      	add	r7, sp, #0
 800afb0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afb4:	2300      	movs	r3, #0
 800afb6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afba:	2300      	movs	r3, #0
 800afbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800afc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800afcc:	2500      	movs	r5, #0
 800afce:	ea54 0305 	orrs.w	r3, r4, r5
 800afd2:	d049      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800afd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afda:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800afde:	d02f      	beq.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800afe0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800afe4:	d828      	bhi.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800afe6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afea:	d01a      	beq.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800afec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aff0:	d822      	bhi.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d003      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x56>
 800aff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800affa:	d007      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800affc:	e01c      	b.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800affe:	4bab      	ldr	r3, [pc, #684]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b002:	4aaa      	ldr	r2, [pc, #680]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b00a:	e01a      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b00c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b010:	3308      	adds	r3, #8
 800b012:	2102      	movs	r1, #2
 800b014:	4618      	mov	r0, r3
 800b016:	f002 fa49 	bl	800d4ac <RCCEx_PLL2_Config>
 800b01a:	4603      	mov	r3, r0
 800b01c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b020:	e00f      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b026:	3328      	adds	r3, #40	; 0x28
 800b028:	2102      	movs	r1, #2
 800b02a:	4618      	mov	r0, r3
 800b02c:	f002 faf0 	bl	800d610 <RCCEx_PLL3_Config>
 800b030:	4603      	mov	r3, r0
 800b032:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b036:	e004      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b03e:	e000      	b.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b040:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b042:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b046:	2b00      	cmp	r3, #0
 800b048:	d10a      	bne.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b04a:	4b98      	ldr	r3, [pc, #608]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b04c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b04e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b058:	4a94      	ldr	r2, [pc, #592]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b05a:	430b      	orrs	r3, r1
 800b05c:	6513      	str	r3, [r2, #80]	; 0x50
 800b05e:	e003      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b060:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b064:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b070:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b074:	f04f 0900 	mov.w	r9, #0
 800b078:	ea58 0309 	orrs.w	r3, r8, r9
 800b07c:	d047      	beq.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b084:	2b04      	cmp	r3, #4
 800b086:	d82a      	bhi.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b088:	a201      	add	r2, pc, #4	; (adr r2, 800b090 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b08a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08e:	bf00      	nop
 800b090:	0800b0a5 	.word	0x0800b0a5
 800b094:	0800b0b3 	.word	0x0800b0b3
 800b098:	0800b0c9 	.word	0x0800b0c9
 800b09c:	0800b0e7 	.word	0x0800b0e7
 800b0a0:	0800b0e7 	.word	0x0800b0e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0a4:	4b81      	ldr	r3, [pc, #516]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a8:	4a80      	ldr	r2, [pc, #512]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b0aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0b0:	e01a      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f002 f9f6 	bl	800d4ac <RCCEx_PLL2_Config>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0c6:	e00f      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0cc:	3328      	adds	r3, #40	; 0x28
 800b0ce:	2100      	movs	r1, #0
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f002 fa9d 	bl	800d610 <RCCEx_PLL3_Config>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0dc:	e004      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0e4:	e000      	b.n	800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b0e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d10a      	bne.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b0f0:	4b6e      	ldr	r3, [pc, #440]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0f4:	f023 0107 	bic.w	r1, r3, #7
 800b0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0fe:	4a6b      	ldr	r2, [pc, #428]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b100:	430b      	orrs	r3, r1
 800b102:	6513      	str	r3, [r2, #80]	; 0x50
 800b104:	e003      	b.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b106:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b10a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b116:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b11a:	f04f 0b00 	mov.w	fp, #0
 800b11e:	ea5a 030b 	orrs.w	r3, sl, fp
 800b122:	d05b      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b128:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b12c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b130:	d03b      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b132:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b136:	d834      	bhi.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b138:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b13c:	d037      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b13e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b142:	d82e      	bhi.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b144:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b148:	d033      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b14a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b14e:	d828      	bhi.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b150:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b154:	d01a      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b15a:	d822      	bhi.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d003      	beq.n	800b168 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b160:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b164:	d007      	beq.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b166:	e01c      	b.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b168:	4b50      	ldr	r3, [pc, #320]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16c:	4a4f      	ldr	r2, [pc, #316]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b16e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b172:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b174:	e01e      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17a:	3308      	adds	r3, #8
 800b17c:	2100      	movs	r1, #0
 800b17e:	4618      	mov	r0, r3
 800b180:	f002 f994 	bl	800d4ac <RCCEx_PLL2_Config>
 800b184:	4603      	mov	r3, r0
 800b186:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b18a:	e013      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b190:	3328      	adds	r3, #40	; 0x28
 800b192:	2100      	movs	r1, #0
 800b194:	4618      	mov	r0, r3
 800b196:	f002 fa3b 	bl	800d610 <RCCEx_PLL3_Config>
 800b19a:	4603      	mov	r3, r0
 800b19c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b1a0:	e008      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1a8:	e004      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b1aa:	bf00      	nop
 800b1ac:	e002      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b1ae:	bf00      	nop
 800b1b0:	e000      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b1b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d10b      	bne.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b1bc:	4b3b      	ldr	r3, [pc, #236]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b1be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b1cc:	4a37      	ldr	r2, [pc, #220]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b1ce:	430b      	orrs	r3, r1
 800b1d0:	6593      	str	r3, [r2, #88]	; 0x58
 800b1d2:	e003      	b.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b1e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b1f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	d05d      	beq.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b1fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b200:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b204:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b208:	d03b      	beq.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b20a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b20e:	d834      	bhi.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b210:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b214:	d037      	beq.n	800b286 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b216:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b21a:	d82e      	bhi.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b21c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b220:	d033      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b222:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b226:	d828      	bhi.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b22c:	d01a      	beq.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b22e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b232:	d822      	bhi.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b234:	2b00      	cmp	r3, #0
 800b236:	d003      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b23c:	d007      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b23e:	e01c      	b.n	800b27a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b240:	4b1a      	ldr	r3, [pc, #104]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b244:	4a19      	ldr	r2, [pc, #100]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b24a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b24c:	e01e      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b252:	3308      	adds	r3, #8
 800b254:	2100      	movs	r1, #0
 800b256:	4618      	mov	r0, r3
 800b258:	f002 f928 	bl	800d4ac <RCCEx_PLL2_Config>
 800b25c:	4603      	mov	r3, r0
 800b25e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b262:	e013      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b268:	3328      	adds	r3, #40	; 0x28
 800b26a:	2100      	movs	r1, #0
 800b26c:	4618      	mov	r0, r3
 800b26e:	f002 f9cf 	bl	800d610 <RCCEx_PLL3_Config>
 800b272:	4603      	mov	r3, r0
 800b274:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b278:	e008      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b280:	e004      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b282:	bf00      	nop
 800b284:	e002      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b286:	bf00      	nop
 800b288:	e000      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b28a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b28c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10d      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b294:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b298:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b2a4:	4a01      	ldr	r2, [pc, #4]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b2a6:	430b      	orrs	r3, r1
 800b2a8:	6593      	str	r3, [r2, #88]	; 0x58
 800b2aa:	e005      	b.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b2ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b2c4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b2ce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	d03a      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b2d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2de:	2b30      	cmp	r3, #48	; 0x30
 800b2e0:	d01f      	beq.n	800b322 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b2e2:	2b30      	cmp	r3, #48	; 0x30
 800b2e4:	d819      	bhi.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b2e6:	2b20      	cmp	r3, #32
 800b2e8:	d00c      	beq.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b2ea:	2b20      	cmp	r3, #32
 800b2ec:	d815      	bhi.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d019      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b2f2:	2b10      	cmp	r3, #16
 800b2f4:	d111      	bne.n	800b31a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2f6:	4baa      	ldr	r3, [pc, #680]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fa:	4aa9      	ldr	r2, [pc, #676]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b2fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b300:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b302:	e011      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b308:	3308      	adds	r3, #8
 800b30a:	2102      	movs	r1, #2
 800b30c:	4618      	mov	r0, r3
 800b30e:	f002 f8cd 	bl	800d4ac <RCCEx_PLL2_Config>
 800b312:	4603      	mov	r3, r0
 800b314:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b318:	e006      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b31a:	2301      	movs	r3, #1
 800b31c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b320:	e002      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b322:	bf00      	nop
 800b324:	e000      	b.n	800b328 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800b326:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b328:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10a      	bne.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800b330:	4b9b      	ldr	r3, [pc, #620]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b334:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b33e:	4a98      	ldr	r2, [pc, #608]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b340:	430b      	orrs	r3, r1
 800b342:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b344:	e003      	b.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b346:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b34a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b356:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b35a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b35e:	2300      	movs	r3, #0
 800b360:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b364:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b368:	460b      	mov	r3, r1
 800b36a:	4313      	orrs	r3, r2
 800b36c:	d051      	beq.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b374:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b378:	d035      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800b37a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b37e:	d82e      	bhi.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b380:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b384:	d031      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x442>
 800b386:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b38a:	d828      	bhi.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b38c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b390:	d01a      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800b392:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b396:	d822      	bhi.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d003      	beq.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800b39c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3a0:	d007      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800b3a2:	e01c      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3a4:	4b7e      	ldr	r3, [pc, #504]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a8:	4a7d      	ldr	r2, [pc, #500]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b3aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3b0:	e01c      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f002 f876 	bl	800d4ac <RCCEx_PLL2_Config>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3c6:	e011      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3cc:	3328      	adds	r3, #40	; 0x28
 800b3ce:	2100      	movs	r1, #0
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f002 f91d 	bl	800d610 <RCCEx_PLL3_Config>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b3dc:	e006      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3e4:	e002      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b3e6:	bf00      	nop
 800b3e8:	e000      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800b3ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b3f4:	4b6a      	ldr	r3, [pc, #424]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b3f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3f8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b402:	4a67      	ldr	r2, [pc, #412]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b404:	430b      	orrs	r3, r1
 800b406:	6513      	str	r3, [r2, #80]	; 0x50
 800b408:	e003      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b40a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b40e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b41e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b422:	2300      	movs	r3, #0
 800b424:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b428:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b42c:	460b      	mov	r3, r1
 800b42e:	4313      	orrs	r3, r2
 800b430:	d053      	beq.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b438:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b43c:	d033      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800b43e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b442:	d82c      	bhi.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b444:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b448:	d02f      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800b44a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b44e:	d826      	bhi.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b450:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b454:	d02b      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b456:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b45a:	d820      	bhi.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b45c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b460:	d012      	beq.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800b462:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b466:	d81a      	bhi.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d022      	beq.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800b46c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b470:	d115      	bne.n	800b49e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b476:	3308      	adds	r3, #8
 800b478:	2101      	movs	r1, #1
 800b47a:	4618      	mov	r0, r3
 800b47c:	f002 f816 	bl	800d4ac <RCCEx_PLL2_Config>
 800b480:	4603      	mov	r3, r0
 800b482:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b486:	e015      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b48c:	3328      	adds	r3, #40	; 0x28
 800b48e:	2101      	movs	r1, #1
 800b490:	4618      	mov	r0, r3
 800b492:	f002 f8bd 	bl	800d610 <RCCEx_PLL3_Config>
 800b496:	4603      	mov	r3, r0
 800b498:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b49c:	e00a      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4a4:	e006      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b4a6:	bf00      	nop
 800b4a8:	e004      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b4aa:	bf00      	nop
 800b4ac:	e002      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b4ae:	bf00      	nop
 800b4b0:	e000      	b.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800b4b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10a      	bne.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b4bc:	4b38      	ldr	r3, [pc, #224]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b4be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4ca:	4a35      	ldr	r2, [pc, #212]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b4cc:	430b      	orrs	r3, r1
 800b4ce:	6513      	str	r3, [r2, #80]	; 0x50
 800b4d0:	e003      	b.n	800b4da <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4d6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b4e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b4f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	d058      	beq.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b502:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b506:	d033      	beq.n	800b570 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b50c:	d82c      	bhi.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b50e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b512:	d02f      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b518:	d826      	bhi.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b51a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b51e:	d02b      	beq.n	800b578 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b520:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b524:	d820      	bhi.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b526:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b52a:	d012      	beq.n	800b552 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b52c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b530:	d81a      	bhi.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b532:	2b00      	cmp	r3, #0
 800b534:	d022      	beq.n	800b57c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b53a:	d115      	bne.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b540:	3308      	adds	r3, #8
 800b542:	2101      	movs	r1, #1
 800b544:	4618      	mov	r0, r3
 800b546:	f001 ffb1 	bl	800d4ac <RCCEx_PLL2_Config>
 800b54a:	4603      	mov	r3, r0
 800b54c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b550:	e015      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b556:	3328      	adds	r3, #40	; 0x28
 800b558:	2101      	movs	r1, #1
 800b55a:	4618      	mov	r0, r3
 800b55c:	f002 f858 	bl	800d610 <RCCEx_PLL3_Config>
 800b560:	4603      	mov	r3, r0
 800b562:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b566:	e00a      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b56e:	e006      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b570:	bf00      	nop
 800b572:	e004      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b574:	bf00      	nop
 800b576:	e002      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b578:	bf00      	nop
 800b57a:	e000      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b57c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b57e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10e      	bne.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b586:	4b06      	ldr	r3, [pc, #24]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b58a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b58e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b592:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b596:	4a02      	ldr	r2, [pc, #8]	; (800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b598:	430b      	orrs	r3, r1
 800b59a:	6593      	str	r3, [r2, #88]	; 0x58
 800b59c:	e006      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b59e:	bf00      	nop
 800b5a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b5b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b5c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	4313      	orrs	r3, r2
 800b5ca:	d037      	beq.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b5cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5d6:	d00e      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b5d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5dc:	d816      	bhi.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d018      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b5e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5e6:	d111      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5e8:	4bc4      	ldr	r3, [pc, #784]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ec:	4ac3      	ldr	r2, [pc, #780]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b5ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b5f4:	e00f      	b.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fa:	3308      	adds	r3, #8
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	4618      	mov	r0, r3
 800b600:	f001 ff54 	bl	800d4ac <RCCEx_PLL2_Config>
 800b604:	4603      	mov	r3, r0
 800b606:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b60a:	e004      	b.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b612:	e000      	b.n	800b616 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b614:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b616:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d10a      	bne.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b61e:	4bb7      	ldr	r3, [pc, #732]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b622:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b626:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b62c:	4ab3      	ldr	r2, [pc, #716]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b62e:	430b      	orrs	r3, r1
 800b630:	6513      	str	r3, [r2, #80]	; 0x50
 800b632:	e003      	b.n	800b63c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b634:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b638:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b63c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b644:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b648:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b64c:	2300      	movs	r3, #0
 800b64e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b652:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b656:	460b      	mov	r3, r1
 800b658:	4313      	orrs	r3, r2
 800b65a:	d039      	beq.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b662:	2b03      	cmp	r3, #3
 800b664:	d81c      	bhi.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b666:	a201      	add	r2, pc, #4	; (adr r2, 800b66c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b66c:	0800b6a9 	.word	0x0800b6a9
 800b670:	0800b67d 	.word	0x0800b67d
 800b674:	0800b68b 	.word	0x0800b68b
 800b678:	0800b6a9 	.word	0x0800b6a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b67c:	4b9f      	ldr	r3, [pc, #636]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b680:	4a9e      	ldr	r2, [pc, #632]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b686:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b688:	e00f      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b68e:	3308      	adds	r3, #8
 800b690:	2102      	movs	r1, #2
 800b692:	4618      	mov	r0, r3
 800b694:	f001 ff0a 	bl	800d4ac <RCCEx_PLL2_Config>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b69e:	e004      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6a6:	e000      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10a      	bne.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b6b2:	4b92      	ldr	r3, [pc, #584]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b6b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6b6:	f023 0103 	bic.w	r1, r3, #3
 800b6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6c0:	4a8e      	ldr	r2, [pc, #568]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b6c2:	430b      	orrs	r3, r1
 800b6c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6c6:	e003      	b.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b6dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b6e6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4313      	orrs	r3, r2
 800b6ee:	f000 8099 	beq.w	800b824 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b6f2:	4b83      	ldr	r3, [pc, #524]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a82      	ldr	r2, [pc, #520]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b6f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b6fe:	f7f8 f9b1 	bl	8003a64 <HAL_GetTick>
 800b702:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b706:	e00b      	b.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b708:	f7f8 f9ac 	bl	8003a64 <HAL_GetTick>
 800b70c:	4602      	mov	r2, r0
 800b70e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	2b64      	cmp	r3, #100	; 0x64
 800b716:	d903      	bls.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b71e:	e005      	b.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b720:	4b77      	ldr	r3, [pc, #476]	; (800b900 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d0ed      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b72c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b730:	2b00      	cmp	r3, #0
 800b732:	d173      	bne.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b734:	4b71      	ldr	r3, [pc, #452]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b736:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b73c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b740:	4053      	eors	r3, r2
 800b742:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b746:	2b00      	cmp	r3, #0
 800b748:	d015      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b74a:	4b6c      	ldr	r3, [pc, #432]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b74c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b74e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b752:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b756:	4b69      	ldr	r3, [pc, #420]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b75a:	4a68      	ldr	r2, [pc, #416]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b75c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b760:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b762:	4b66      	ldr	r3, [pc, #408]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b766:	4a65      	ldr	r2, [pc, #404]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b76c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b76e:	4a63      	ldr	r2, [pc, #396]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b770:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b774:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b776:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b77a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b77e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b782:	d118      	bne.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b784:	f7f8 f96e 	bl	8003a64 <HAL_GetTick>
 800b788:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b78c:	e00d      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b78e:	f7f8 f969 	bl	8003a64 <HAL_GetTick>
 800b792:	4602      	mov	r2, r0
 800b794:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b798:	1ad2      	subs	r2, r2, r3
 800b79a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d903      	bls.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b7a2:	2303      	movs	r3, #3
 800b7a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b7a8:	e005      	b.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b7aa:	4b54      	ldr	r3, [pc, #336]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ae:	f003 0302 	and.w	r3, r3, #2
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d0eb      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b7b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d129      	bne.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b7be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b7c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7ce:	d10e      	bne.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b7d0:	4b4a      	ldr	r3, [pc, #296]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7d2:	691b      	ldr	r3, [r3, #16]
 800b7d4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b7e0:	091a      	lsrs	r2, r3, #4
 800b7e2:	4b48      	ldr	r3, [pc, #288]	; (800b904 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	4a45      	ldr	r2, [pc, #276]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7e8:	430b      	orrs	r3, r1
 800b7ea:	6113      	str	r3, [r2, #16]
 800b7ec:	e005      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b7ee:	4b43      	ldr	r3, [pc, #268]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	4a42      	ldr	r2, [pc, #264]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b7f8:	6113      	str	r3, [r2, #16]
 800b7fa:	4b40      	ldr	r3, [pc, #256]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b7fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b802:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b80a:	4a3c      	ldr	r2, [pc, #240]	; (800b8fc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b80c:	430b      	orrs	r3, r1
 800b80e:	6713      	str	r3, [r2, #112]	; 0x70
 800b810:	e008      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b812:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b816:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b81a:	e003      	b.n	800b824 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b81c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b820:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f002 0301 	and.w	r3, r2, #1
 800b830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b834:	2300      	movs	r3, #0
 800b836:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b83a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b83e:	460b      	mov	r3, r1
 800b840:	4313      	orrs	r3, r2
 800b842:	f000 808f 	beq.w	800b964 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b84c:	2b28      	cmp	r3, #40	; 0x28
 800b84e:	d871      	bhi.n	800b934 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b850:	a201      	add	r2, pc, #4	; (adr r2, 800b858 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b856:	bf00      	nop
 800b858:	0800b93d 	.word	0x0800b93d
 800b85c:	0800b935 	.word	0x0800b935
 800b860:	0800b935 	.word	0x0800b935
 800b864:	0800b935 	.word	0x0800b935
 800b868:	0800b935 	.word	0x0800b935
 800b86c:	0800b935 	.word	0x0800b935
 800b870:	0800b935 	.word	0x0800b935
 800b874:	0800b935 	.word	0x0800b935
 800b878:	0800b909 	.word	0x0800b909
 800b87c:	0800b935 	.word	0x0800b935
 800b880:	0800b935 	.word	0x0800b935
 800b884:	0800b935 	.word	0x0800b935
 800b888:	0800b935 	.word	0x0800b935
 800b88c:	0800b935 	.word	0x0800b935
 800b890:	0800b935 	.word	0x0800b935
 800b894:	0800b935 	.word	0x0800b935
 800b898:	0800b91f 	.word	0x0800b91f
 800b89c:	0800b935 	.word	0x0800b935
 800b8a0:	0800b935 	.word	0x0800b935
 800b8a4:	0800b935 	.word	0x0800b935
 800b8a8:	0800b935 	.word	0x0800b935
 800b8ac:	0800b935 	.word	0x0800b935
 800b8b0:	0800b935 	.word	0x0800b935
 800b8b4:	0800b935 	.word	0x0800b935
 800b8b8:	0800b93d 	.word	0x0800b93d
 800b8bc:	0800b935 	.word	0x0800b935
 800b8c0:	0800b935 	.word	0x0800b935
 800b8c4:	0800b935 	.word	0x0800b935
 800b8c8:	0800b935 	.word	0x0800b935
 800b8cc:	0800b935 	.word	0x0800b935
 800b8d0:	0800b935 	.word	0x0800b935
 800b8d4:	0800b935 	.word	0x0800b935
 800b8d8:	0800b93d 	.word	0x0800b93d
 800b8dc:	0800b935 	.word	0x0800b935
 800b8e0:	0800b935 	.word	0x0800b935
 800b8e4:	0800b935 	.word	0x0800b935
 800b8e8:	0800b935 	.word	0x0800b935
 800b8ec:	0800b935 	.word	0x0800b935
 800b8f0:	0800b935 	.word	0x0800b935
 800b8f4:	0800b935 	.word	0x0800b935
 800b8f8:	0800b93d 	.word	0x0800b93d
 800b8fc:	58024400 	.word	0x58024400
 800b900:	58024800 	.word	0x58024800
 800b904:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90c:	3308      	adds	r3, #8
 800b90e:	2101      	movs	r1, #1
 800b910:	4618      	mov	r0, r3
 800b912:	f001 fdcb 	bl	800d4ac <RCCEx_PLL2_Config>
 800b916:	4603      	mov	r3, r0
 800b918:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b91c:	e00f      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b922:	3328      	adds	r3, #40	; 0x28
 800b924:	2101      	movs	r1, #1
 800b926:	4618      	mov	r0, r3
 800b928:	f001 fe72 	bl	800d610 <RCCEx_PLL3_Config>
 800b92c:	4603      	mov	r3, r0
 800b92e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b932:	e004      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b93a:	e000      	b.n	800b93e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b93c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b93e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b942:	2b00      	cmp	r3, #0
 800b944:	d10a      	bne.n	800b95c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b946:	4bbf      	ldr	r3, [pc, #764]	; (800bc44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b94a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b94e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b952:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b954:	4abb      	ldr	r2, [pc, #748]	; (800bc44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b956:	430b      	orrs	r3, r1
 800b958:	6553      	str	r3, [r2, #84]	; 0x54
 800b95a:	e003      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b95c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b960:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96c:	f002 0302 	and.w	r3, r2, #2
 800b970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b974:	2300      	movs	r3, #0
 800b976:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b97a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b97e:	460b      	mov	r3, r1
 800b980:	4313      	orrs	r3, r2
 800b982:	d041      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b98a:	2b05      	cmp	r3, #5
 800b98c:	d824      	bhi.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b98e:	a201      	add	r2, pc, #4	; (adr r2, 800b994 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b994:	0800b9e1 	.word	0x0800b9e1
 800b998:	0800b9ad 	.word	0x0800b9ad
 800b99c:	0800b9c3 	.word	0x0800b9c3
 800b9a0:	0800b9e1 	.word	0x0800b9e1
 800b9a4:	0800b9e1 	.word	0x0800b9e1
 800b9a8:	0800b9e1 	.word	0x0800b9e1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b0:	3308      	adds	r3, #8
 800b9b2:	2101      	movs	r1, #1
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f001 fd79 	bl	800d4ac <RCCEx_PLL2_Config>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b9c0:	e00f      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c6:	3328      	adds	r3, #40	; 0x28
 800b9c8:	2101      	movs	r1, #1
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f001 fe20 	bl	800d610 <RCCEx_PLL3_Config>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b9d6:	e004      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9d8:	2301      	movs	r3, #1
 800b9da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b9de:	e000      	b.n	800b9e2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b9e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d10a      	bne.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b9ea:	4b96      	ldr	r3, [pc, #600]	; (800bc44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b9ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ee:	f023 0107 	bic.w	r1, r3, #7
 800b9f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9f8:	4a92      	ldr	r2, [pc, #584]	; (800bc44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b9fa:	430b      	orrs	r3, r1
 800b9fc:	6553      	str	r3, [r2, #84]	; 0x54
 800b9fe:	e003      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	f002 0304 	and.w	r3, r2, #4
 800ba14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba1e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ba22:	460b      	mov	r3, r1
 800ba24:	4313      	orrs	r3, r2
 800ba26:	d044      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ba28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba30:	2b05      	cmp	r3, #5
 800ba32:	d825      	bhi.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800ba34:	a201      	add	r2, pc, #4	; (adr r2, 800ba3c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800ba36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba3a:	bf00      	nop
 800ba3c:	0800ba89 	.word	0x0800ba89
 800ba40:	0800ba55 	.word	0x0800ba55
 800ba44:	0800ba6b 	.word	0x0800ba6b
 800ba48:	0800ba89 	.word	0x0800ba89
 800ba4c:	0800ba89 	.word	0x0800ba89
 800ba50:	0800ba89 	.word	0x0800ba89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba58:	3308      	adds	r3, #8
 800ba5a:	2101      	movs	r1, #1
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f001 fd25 	bl	800d4ac <RCCEx_PLL2_Config>
 800ba62:	4603      	mov	r3, r0
 800ba64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba68:	e00f      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba6e:	3328      	adds	r3, #40	; 0x28
 800ba70:	2101      	movs	r1, #1
 800ba72:	4618      	mov	r0, r3
 800ba74:	f001 fdcc 	bl	800d610 <RCCEx_PLL3_Config>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800ba7e:	e004      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba80:	2301      	movs	r3, #1
 800ba82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba86:	e000      	b.n	800ba8a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800ba88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10b      	bne.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ba92:	4b6c      	ldr	r3, [pc, #432]	; (800bc44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ba94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba96:	f023 0107 	bic.w	r1, r3, #7
 800ba9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baa2:	4a68      	ldr	r2, [pc, #416]	; (800bc44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800baa4:	430b      	orrs	r3, r1
 800baa6:	6593      	str	r3, [r2, #88]	; 0x58
 800baa8:	e003      	b.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baaa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baba:	f002 0320 	and.w	r3, r2, #32
 800babe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bac2:	2300      	movs	r3, #0
 800bac4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bac8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bacc:	460b      	mov	r3, r1
 800bace:	4313      	orrs	r3, r2
 800bad0:	d055      	beq.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bade:	d033      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800bae0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bae4:	d82c      	bhi.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baea:	d02f      	beq.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800baec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baf0:	d826      	bhi.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800baf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800baf6:	d02b      	beq.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800baf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bafc:	d820      	bhi.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bafe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb02:	d012      	beq.n	800bb2a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800bb04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb08:	d81a      	bhi.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d022      	beq.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800bb0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb12:	d115      	bne.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb18:	3308      	adds	r3, #8
 800bb1a:	2100      	movs	r1, #0
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f001 fcc5 	bl	800d4ac <RCCEx_PLL2_Config>
 800bb22:	4603      	mov	r3, r0
 800bb24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb28:	e015      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb2e:	3328      	adds	r3, #40	; 0x28
 800bb30:	2102      	movs	r1, #2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f001 fd6c 	bl	800d610 <RCCEx_PLL3_Config>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bb3e:	e00a      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb46:	e006      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bb48:	bf00      	nop
 800bb4a:	e004      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bb4c:	bf00      	nop
 800bb4e:	e002      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bb50:	bf00      	nop
 800bb52:	e000      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800bb54:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb56:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d10b      	bne.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bb5e:	4b39      	ldr	r3, [pc, #228]	; (800bc44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bb60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bb66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb6e:	4a35      	ldr	r2, [pc, #212]	; (800bc44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bb70:	430b      	orrs	r3, r1
 800bb72:	6553      	str	r3, [r2, #84]	; 0x54
 800bb74:	e003      	b.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb7a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bb7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bb8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb8e:	2300      	movs	r3, #0
 800bb90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb94:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bb98:	460b      	mov	r3, r1
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	d058      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bb9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bba6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bbaa:	d033      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800bbac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bbb0:	d82c      	bhi.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bbb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb6:	d02f      	beq.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800bbb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbbc:	d826      	bhi.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bbbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbc2:	d02b      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800bbc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bbc8:	d820      	bhi.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bbca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbce:	d012      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800bbd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bbd4:	d81a      	bhi.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d022      	beq.n	800bc20 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800bbda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbde:	d115      	bne.n	800bc0c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe4:	3308      	adds	r3, #8
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f001 fc5f 	bl	800d4ac <RCCEx_PLL2_Config>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bbf4:	e015      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbfa:	3328      	adds	r3, #40	; 0x28
 800bbfc:	2102      	movs	r1, #2
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f001 fd06 	bl	800d610 <RCCEx_PLL3_Config>
 800bc04:	4603      	mov	r3, r0
 800bc06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc0a:	e00a      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc12:	e006      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bc14:	bf00      	nop
 800bc16:	e004      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bc18:	bf00      	nop
 800bc1a:	e002      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bc1c:	bf00      	nop
 800bc1e:	e000      	b.n	800bc22 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800bc20:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc22:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d10e      	bne.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bc2a:	4b06      	ldr	r3, [pc, #24]	; (800bc44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bc2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc2e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc3a:	4a02      	ldr	r2, [pc, #8]	; (800bc44 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800bc3c:	430b      	orrs	r3, r1
 800bc3e:	6593      	str	r3, [r2, #88]	; 0x58
 800bc40:	e006      	b.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800bc42:	bf00      	nop
 800bc44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bc50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bc5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bc60:	2300      	movs	r3, #0
 800bc62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bc66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	d055      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc7c:	d033      	beq.n	800bce6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800bc7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bc82:	d82c      	bhi.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bc84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc88:	d02f      	beq.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800bc8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc8e:	d826      	bhi.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bc90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bc94:	d02b      	beq.n	800bcee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800bc96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bc9a:	d820      	bhi.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bc9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bca0:	d012      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800bca2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bca6:	d81a      	bhi.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d022      	beq.n	800bcf2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800bcac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bcb0:	d115      	bne.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	2100      	movs	r1, #0
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f001 fbf6 	bl	800d4ac <RCCEx_PLL2_Config>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bcc6:	e015      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bcc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bccc:	3328      	adds	r3, #40	; 0x28
 800bcce:	2102      	movs	r1, #2
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f001 fc9d 	bl	800d610 <RCCEx_PLL3_Config>
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bcdc:	e00a      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bce4:	e006      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bce6:	bf00      	nop
 800bce8:	e004      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bcea:	bf00      	nop
 800bcec:	e002      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bcee:	bf00      	nop
 800bcf0:	e000      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800bcf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10b      	bne.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bcfc:	4ba0      	ldr	r3, [pc, #640]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bcfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd00:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bd04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bd0c:	4a9c      	ldr	r2, [pc, #624]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd0e:	430b      	orrs	r3, r1
 800bd10:	6593      	str	r3, [r2, #88]	; 0x58
 800bd12:	e003      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800bd1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f002 0308 	and.w	r3, r2, #8
 800bd28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bd32:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bd36:	460b      	mov	r3, r1
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	d01e      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800bd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd48:	d10c      	bne.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd4e:	3328      	adds	r3, #40	; 0x28
 800bd50:	2102      	movs	r1, #2
 800bd52:	4618      	mov	r0, r3
 800bd54:	f001 fc5c 	bl	800d610 <RCCEx_PLL3_Config>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800bd5e:	2301      	movs	r3, #1
 800bd60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800bd64:	4b86      	ldr	r3, [pc, #536]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd74:	4a82      	ldr	r2, [pc, #520]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bd76:	430b      	orrs	r3, r1
 800bd78:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bd7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd82:	f002 0310 	and.w	r3, r2, #16
 800bd86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bd90:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bd94:	460b      	mov	r3, r1
 800bd96:	4313      	orrs	r3, r2
 800bd98:	d01e      	beq.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bd9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bda2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bda6:	d10c      	bne.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdac:	3328      	adds	r3, #40	; 0x28
 800bdae:	2102      	movs	r1, #2
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f001 fc2d 	bl	800d610 <RCCEx_PLL3_Config>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d002      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bdc2:	4b6f      	ldr	r3, [pc, #444]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bdc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdc6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bdca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bdd2:	4a6b      	ldr	r2, [pc, #428]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bdd4:	430b      	orrs	r3, r1
 800bdd6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bdd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bde4:	67bb      	str	r3, [r7, #120]	; 0x78
 800bde6:	2300      	movs	r3, #0
 800bde8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bdea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	d03e      	beq.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bdf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdf8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bdfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be00:	d022      	beq.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800be02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be06:	d81b      	bhi.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d003      	beq.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800be0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be10:	d00b      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800be12:	e015      	b.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800be14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be18:	3308      	adds	r3, #8
 800be1a:	2100      	movs	r1, #0
 800be1c:	4618      	mov	r0, r3
 800be1e:	f001 fb45 	bl	800d4ac <RCCEx_PLL2_Config>
 800be22:	4603      	mov	r3, r0
 800be24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be28:	e00f      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800be2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be2e:	3328      	adds	r3, #40	; 0x28
 800be30:	2102      	movs	r1, #2
 800be32:	4618      	mov	r0, r3
 800be34:	f001 fbec 	bl	800d610 <RCCEx_PLL3_Config>
 800be38:	4603      	mov	r3, r0
 800be3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800be3e:	e004      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800be46:	e000      	b.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800be48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10b      	bne.n	800be6a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800be52:	4b4b      	ldr	r3, [pc, #300]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800be54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be56:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800be5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800be62:	4a47      	ldr	r2, [pc, #284]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800be64:	430b      	orrs	r3, r1
 800be66:	6593      	str	r3, [r2, #88]	; 0x58
 800be68:	e003      	b.n	800be72 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be6e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800be72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800be7e:	673b      	str	r3, [r7, #112]	; 0x70
 800be80:	2300      	movs	r3, #0
 800be82:	677b      	str	r3, [r7, #116]	; 0x74
 800be84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800be88:	460b      	mov	r3, r1
 800be8a:	4313      	orrs	r3, r2
 800be8c:	d03b      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800be8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be9a:	d01f      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800be9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bea0:	d818      	bhi.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800bea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bea6:	d003      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800bea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800beac:	d007      	beq.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800beae:	e011      	b.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800beb0:	4b33      	ldr	r3, [pc, #204]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800beb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb4:	4a32      	ldr	r2, [pc, #200]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800beb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800beba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bebc:	e00f      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec2:	3328      	adds	r3, #40	; 0x28
 800bec4:	2101      	movs	r1, #1
 800bec6:	4618      	mov	r0, r3
 800bec8:	f001 fba2 	bl	800d610 <RCCEx_PLL3_Config>
 800becc:	4603      	mov	r3, r0
 800bece:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800bed2:	e004      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800beda:	e000      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800bedc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bede:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10b      	bne.n	800befe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bee6:	4b26      	ldr	r3, [pc, #152]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800beee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bef6:	4a22      	ldr	r2, [pc, #136]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bef8:	430b      	orrs	r3, r1
 800befa:	6553      	str	r3, [r2, #84]	; 0x54
 800befc:	e003      	b.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800befe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bf06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bf12:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf14:	2300      	movs	r3, #0
 800bf16:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf18:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	4313      	orrs	r3, r2
 800bf20:	d034      	beq.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d003      	beq.n	800bf34 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800bf2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf30:	d007      	beq.n	800bf42 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800bf32:	e011      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf34:	4b12      	ldr	r3, [pc, #72]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bf36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf38:	4a11      	ldr	r2, [pc, #68]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bf3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf40:	e00e      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf46:	3308      	adds	r3, #8
 800bf48:	2102      	movs	r1, #2
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f001 faae 	bl	800d4ac <RCCEx_PLL2_Config>
 800bf50:	4603      	mov	r3, r0
 800bf52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bf56:	e003      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800bf58:	2301      	movs	r3, #1
 800bf5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bf5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10d      	bne.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bf68:	4b05      	ldr	r3, [pc, #20]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bf6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf76:	4a02      	ldr	r2, [pc, #8]	; (800bf80 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bf78:	430b      	orrs	r3, r1
 800bf7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf7c:	e006      	b.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800bf7e:	bf00      	nop
 800bf80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bf8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bf98:	663b      	str	r3, [r7, #96]	; 0x60
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	667b      	str	r3, [r7, #100]	; 0x64
 800bf9e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4313      	orrs	r3, r2
 800bfa6:	d00c      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bfa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfac:	3328      	adds	r3, #40	; 0x28
 800bfae:	2102      	movs	r1, #2
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	f001 fb2d 	bl	800d610 <RCCEx_PLL3_Config>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d002      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bfc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bfce:	65bb      	str	r3, [r7, #88]	; 0x58
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfd4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bfd8:	460b      	mov	r3, r1
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	d036      	beq.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bfde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfe2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bfe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfe8:	d018      	beq.n	800c01c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bfea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bfee:	d811      	bhi.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bff4:	d014      	beq.n	800c020 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bffa:	d80b      	bhi.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d011      	beq.n	800c024 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c004:	d106      	bne.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c006:	4bb7      	ldr	r3, [pc, #732]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c00a:	4ab6      	ldr	r2, [pc, #728]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c00c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c010:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c012:	e008      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c01a:	e004      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c01c:	bf00      	nop
 800c01e:	e002      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c020:	bf00      	nop
 800c022:	e000      	b.n	800c026 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c024:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c026:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d10a      	bne.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c02e:	4bad      	ldr	r3, [pc, #692]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c032:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c036:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c03a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c03c:	4aa9      	ldr	r2, [pc, #676]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c03e:	430b      	orrs	r3, r1
 800c040:	6553      	str	r3, [r2, #84]	; 0x54
 800c042:	e003      	b.n	800c04c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c044:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c048:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c058:	653b      	str	r3, [r7, #80]	; 0x50
 800c05a:	2300      	movs	r3, #0
 800c05c:	657b      	str	r3, [r7, #84]	; 0x54
 800c05e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c062:	460b      	mov	r3, r1
 800c064:	4313      	orrs	r3, r2
 800c066:	d009      	beq.n	800c07c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c068:	4b9e      	ldr	r3, [pc, #632]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c06a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c06c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c076:	4a9b      	ldr	r2, [pc, #620]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c078:	430b      	orrs	r3, r1
 800c07a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c088:	64bb      	str	r3, [r7, #72]	; 0x48
 800c08a:	2300      	movs	r3, #0
 800c08c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c08e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c092:	460b      	mov	r3, r1
 800c094:	4313      	orrs	r3, r2
 800c096:	d009      	beq.n	800c0ac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c098:	4b92      	ldr	r3, [pc, #584]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c09a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c09c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c0a6:	4a8f      	ldr	r2, [pc, #572]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c0a8:	430b      	orrs	r3, r1
 800c0aa:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c0b8:	643b      	str	r3, [r7, #64]	; 0x40
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	647b      	str	r3, [r7, #68]	; 0x44
 800c0be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c0c2:	460b      	mov	r3, r1
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	d00e      	beq.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c0c8:	4b86      	ldr	r3, [pc, #536]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c0ca:	691b      	ldr	r3, [r3, #16]
 800c0cc:	4a85      	ldr	r2, [pc, #532]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c0ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0d2:	6113      	str	r3, [r2, #16]
 800c0d4:	4b83      	ldr	r3, [pc, #524]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c0d6:	6919      	ldr	r1, [r3, #16]
 800c0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c0e0:	4a80      	ldr	r2, [pc, #512]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c0e2:	430b      	orrs	r3, r1
 800c0e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c0e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c0f2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	4313      	orrs	r3, r2
 800c100:	d009      	beq.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c102:	4b78      	ldr	r3, [pc, #480]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c106:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c10e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c110:	4a74      	ldr	r2, [pc, #464]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c112:	430b      	orrs	r3, r1
 800c114:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c116:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c122:	633b      	str	r3, [r7, #48]	; 0x30
 800c124:	2300      	movs	r3, #0
 800c126:	637b      	str	r3, [r7, #52]	; 0x34
 800c128:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c12c:	460b      	mov	r3, r1
 800c12e:	4313      	orrs	r3, r2
 800c130:	d00a      	beq.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c132:	4b6c      	ldr	r3, [pc, #432]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c136:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c13e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c142:	4a68      	ldr	r2, [pc, #416]	; (800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c144:	430b      	orrs	r3, r1
 800c146:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c148:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c150:	2100      	movs	r1, #0
 800c152:	62b9      	str	r1, [r7, #40]	; 0x28
 800c154:	f003 0301 	and.w	r3, r3, #1
 800c158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c15a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c15e:	460b      	mov	r3, r1
 800c160:	4313      	orrs	r3, r2
 800c162:	d011      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c168:	3308      	adds	r3, #8
 800c16a:	2100      	movs	r1, #0
 800c16c:	4618      	mov	r0, r3
 800c16e:	f001 f99d 	bl	800d4ac <RCCEx_PLL2_Config>
 800c172:	4603      	mov	r3, r0
 800c174:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c178:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d003      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c180:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c184:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c18c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c190:	2100      	movs	r1, #0
 800c192:	6239      	str	r1, [r7, #32]
 800c194:	f003 0302 	and.w	r3, r3, #2
 800c198:	627b      	str	r3, [r7, #36]	; 0x24
 800c19a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	4313      	orrs	r3, r2
 800c1a2:	d011      	beq.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	2101      	movs	r1, #1
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f001 f97d 	bl	800d4ac <RCCEx_PLL2_Config>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c1b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d003      	beq.n	800c1c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	61b9      	str	r1, [r7, #24]
 800c1d4:	f003 0304 	and.w	r3, r3, #4
 800c1d8:	61fb      	str	r3, [r7, #28]
 800c1da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	d011      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	2102      	movs	r1, #2
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f001 f95d 	bl	800d4ac <RCCEx_PLL2_Config>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c1f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d003      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c200:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c204:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	2100      	movs	r1, #0
 800c212:	6139      	str	r1, [r7, #16]
 800c214:	f003 0308 	and.w	r3, r3, #8
 800c218:	617b      	str	r3, [r7, #20]
 800c21a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c21e:	460b      	mov	r3, r1
 800c220:	4313      	orrs	r3, r2
 800c222:	d011      	beq.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c224:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c228:	3328      	adds	r3, #40	; 0x28
 800c22a:	2100      	movs	r1, #0
 800c22c:	4618      	mov	r0, r3
 800c22e:	f001 f9ef 	bl	800d610 <RCCEx_PLL3_Config>
 800c232:	4603      	mov	r3, r0
 800c234:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800c238:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d003      	beq.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c240:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c244:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c250:	2100      	movs	r1, #0
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	f003 0310 	and.w	r3, r3, #16
 800c258:	60fb      	str	r3, [r7, #12]
 800c25a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c25e:	460b      	mov	r3, r1
 800c260:	4313      	orrs	r3, r2
 800c262:	d011      	beq.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c264:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c268:	3328      	adds	r3, #40	; 0x28
 800c26a:	2101      	movs	r1, #1
 800c26c:	4618      	mov	r0, r3
 800c26e:	f001 f9cf 	bl	800d610 <RCCEx_PLL3_Config>
 800c272:	4603      	mov	r3, r0
 800c274:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c278:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d003      	beq.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c280:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c284:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	2100      	movs	r1, #0
 800c292:	6039      	str	r1, [r7, #0]
 800c294:	f003 0320 	and.w	r3, r3, #32
 800c298:	607b      	str	r3, [r7, #4]
 800c29a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c29e:	460b      	mov	r3, r1
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	d011      	beq.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2a8:	3328      	adds	r3, #40	; 0x28
 800c2aa:	2102      	movs	r1, #2
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f001 f9af 	bl	800d610 <RCCEx_PLL3_Config>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c2b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d003      	beq.n	800c2c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c2c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800c2c8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d101      	bne.n	800c2d4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	e000      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c2e2:	bf00      	nop
 800c2e4:	58024400 	.word	0x58024400

0800c2e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b090      	sub	sp, #64	; 0x40
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c2f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2f6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c2fa:	430b      	orrs	r3, r1
 800c2fc:	f040 8094 	bne.w	800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c300:	4b9b      	ldr	r3, [pc, #620]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c304:	f003 0307 	and.w	r3, r3, #7
 800c308:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30c:	2b04      	cmp	r3, #4
 800c30e:	f200 8087 	bhi.w	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c312:	a201      	add	r2, pc, #4	; (adr r2, 800c318 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c32d 	.word	0x0800c32d
 800c31c:	0800c355 	.word	0x0800c355
 800c320:	0800c37d 	.word	0x0800c37d
 800c324:	0800c419 	.word	0x0800c419
 800c328:	0800c3a5 	.word	0x0800c3a5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c32c:	4b90      	ldr	r3, [pc, #576]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c338:	d108      	bne.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c33a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c33e:	4618      	mov	r0, r3
 800c340:	f000 ff62 	bl	800d208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c348:	f000 bc93 	b.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c350:	f000 bc8f 	b.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c354:	4b86      	ldr	r3, [pc, #536]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c35c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c360:	d108      	bne.n	800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c362:	f107 0318 	add.w	r3, r7, #24
 800c366:	4618      	mov	r0, r3
 800c368:	f000 fca6 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c36c:	69bb      	ldr	r3, [r7, #24]
 800c36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c370:	f000 bc7f 	b.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c374:	2300      	movs	r3, #0
 800c376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c378:	f000 bc7b 	b.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c37c:	4b7c      	ldr	r3, [pc, #496]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c388:	d108      	bne.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c38a:	f107 030c 	add.w	r3, r7, #12
 800c38e:	4618      	mov	r0, r3
 800c390:	f000 fde6 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c398:	f000 bc6b 	b.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a0:	f000 bc67 	b.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3a4:	4b72      	ldr	r3, [pc, #456]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c3a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3ac:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3ae:	4b70      	ldr	r3, [pc, #448]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f003 0304 	and.w	r3, r3, #4
 800c3b6:	2b04      	cmp	r3, #4
 800c3b8:	d10c      	bne.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c3ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d109      	bne.n	800c3d4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3c0:	4b6b      	ldr	r3, [pc, #428]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	08db      	lsrs	r3, r3, #3
 800c3c6:	f003 0303 	and.w	r3, r3, #3
 800c3ca:	4a6a      	ldr	r2, [pc, #424]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c3cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3d2:	e01f      	b.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3d4:	4b66      	ldr	r3, [pc, #408]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3e0:	d106      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3e8:	d102      	bne.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3ea:	4b63      	ldr	r3, [pc, #396]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ee:	e011      	b.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3f0:	4b5f      	ldr	r3, [pc, #380]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3fc:	d106      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c3fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c400:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c404:	d102      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c406:	4b5d      	ldr	r3, [pc, #372]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c408:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c40a:	e003      	b.n	800c414 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c410:	f000 bc2f 	b.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c414:	f000 bc2d 	b.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c418:	4b59      	ldr	r3, [pc, #356]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41c:	f000 bc29 	b.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c420:	2300      	movs	r3, #0
 800c422:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c424:	f000 bc25 	b.w	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c42c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c430:	430b      	orrs	r3, r1
 800c432:	f040 80a7 	bne.w	800c584 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c436:	4b4e      	ldr	r3, [pc, #312]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c43a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c43e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c446:	d054      	beq.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800c448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c44e:	f200 808b 	bhi.w	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c454:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c458:	f000 8083 	beq.w	800c562 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800c45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c462:	f200 8081 	bhi.w	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c46c:	d02f      	beq.n	800c4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c46e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c470:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c474:	d878      	bhi.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800c476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800c47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c482:	d012      	beq.n	800c4aa <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800c484:	e070      	b.n	800c568 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c486:	4b3a      	ldr	r3, [pc, #232]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c48e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c492:	d107      	bne.n	800c4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c498:	4618      	mov	r0, r3
 800c49a:	f000 feb5 	bl	800d208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4a2:	e3e6      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a8:	e3e3      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4aa:	4b31      	ldr	r3, [pc, #196]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4b6:	d107      	bne.n	800c4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4b8:	f107 0318 	add.w	r3, r7, #24
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f000 fbfb 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4c6:	e3d4      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4cc:	e3d1      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4ce:	4b28      	ldr	r3, [pc, #160]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4da:	d107      	bne.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4dc:	f107 030c 	add.w	r3, r7, #12
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 fd3d 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4ea:	e3c2      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f0:	e3bf      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4f2:	4b1f      	ldr	r3, [pc, #124]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c4f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c4fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c4fc:	4b1c      	ldr	r3, [pc, #112]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f003 0304 	and.w	r3, r3, #4
 800c504:	2b04      	cmp	r3, #4
 800c506:	d10c      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d109      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c50e:	4b18      	ldr	r3, [pc, #96]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	08db      	lsrs	r3, r3, #3
 800c514:	f003 0303 	and.w	r3, r3, #3
 800c518:	4a16      	ldr	r2, [pc, #88]	; (800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c51a:	fa22 f303 	lsr.w	r3, r2, r3
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c520:	e01e      	b.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c522:	4b13      	ldr	r3, [pc, #76]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c52e:	d106      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c532:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c536:	d102      	bne.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c538:	4b0f      	ldr	r3, [pc, #60]	; (800c578 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c53a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c53c:	e010      	b.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c53e:	4b0c      	ldr	r3, [pc, #48]	; (800c570 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c546:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c54a:	d106      	bne.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c552:	d102      	bne.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c554:	4b09      	ldr	r3, [pc, #36]	; (800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c556:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c558:	e002      	b.n	800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c55e:	e388      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c560:	e387      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c562:	4b07      	ldr	r3, [pc, #28]	; (800c580 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c564:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c566:	e384      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c56c:	e381      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c56e:	bf00      	nop
 800c570:	58024400 	.word	0x58024400
 800c574:	03d09000 	.word	0x03d09000
 800c578:	003d0900 	.word	0x003d0900
 800c57c:	017d7840 	.word	0x017d7840
 800c580:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c584:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c588:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c58c:	430b      	orrs	r3, r1
 800c58e:	f040 809c 	bne.w	800c6ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c592:	4b9e      	ldr	r3, [pc, #632]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c596:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c59a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c59e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5a2:	d054      	beq.n	800c64e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c5aa:	f200 808b 	bhi.w	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c5b4:	f000 8083 	beq.w	800c6be <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c5be:	f200 8081 	bhi.w	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5c8:	d02f      	beq.n	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5d0:	d878      	bhi.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c5d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d004      	beq.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c5de:	d012      	beq.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c5e0:	e070      	b.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c5e2:	4b8a      	ldr	r3, [pc, #552]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5ee:	d107      	bne.n	800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f000 fe07 	bl	800d208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5fe:	e338      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c600:	2300      	movs	r3, #0
 800c602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c604:	e335      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c606:	4b81      	ldr	r3, [pc, #516]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c60e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c612:	d107      	bne.n	800c624 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c614:	f107 0318 	add.w	r3, r7, #24
 800c618:	4618      	mov	r0, r3
 800c61a:	f000 fb4d 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c622:	e326      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c624:	2300      	movs	r3, #0
 800c626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c628:	e323      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c62a:	4b78      	ldr	r3, [pc, #480]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c636:	d107      	bne.n	800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c638:	f107 030c 	add.w	r3, r7, #12
 800c63c:	4618      	mov	r0, r3
 800c63e:	f000 fc8f 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c646:	e314      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c648:	2300      	movs	r3, #0
 800c64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c64c:	e311      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c64e:	4b6f      	ldr	r3, [pc, #444]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c652:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c656:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c658:	4b6c      	ldr	r3, [pc, #432]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f003 0304 	and.w	r3, r3, #4
 800c660:	2b04      	cmp	r3, #4
 800c662:	d10c      	bne.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c666:	2b00      	cmp	r3, #0
 800c668:	d109      	bne.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c66a:	4b68      	ldr	r3, [pc, #416]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	08db      	lsrs	r3, r3, #3
 800c670:	f003 0303 	and.w	r3, r3, #3
 800c674:	4a66      	ldr	r2, [pc, #408]	; (800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c676:	fa22 f303 	lsr.w	r3, r2, r3
 800c67a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c67c:	e01e      	b.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c67e:	4b63      	ldr	r3, [pc, #396]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c68a:	d106      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c68e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c692:	d102      	bne.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c694:	4b5f      	ldr	r3, [pc, #380]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c698:	e010      	b.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c69a:	4b5c      	ldr	r3, [pc, #368]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6a6:	d106      	bne.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ae:	d102      	bne.n	800c6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c6b0:	4b59      	ldr	r3, [pc, #356]	; (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6b4:	e002      	b.n	800c6bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c6ba:	e2da      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c6bc:	e2d9      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c6be:	4b57      	ldr	r3, [pc, #348]	; (800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c2:	e2d6      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c8:	e2d3      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c6ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6ce:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c6d2:	430b      	orrs	r3, r1
 800c6d4:	f040 80a7 	bne.w	800c826 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c6d8:	4b4c      	ldr	r3, [pc, #304]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c6da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c6e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6e8:	d055      	beq.n	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c6f0:	f200 8096 	bhi.w	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6fa:	f000 8084 	beq.w	800c806 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c6fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c700:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c704:	f200 808c 	bhi.w	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c70e:	d030      	beq.n	800c772 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c716:	f200 8083 	bhi.w	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d004      	beq.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c726:	d012      	beq.n	800c74e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c728:	e07a      	b.n	800c820 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c72a:	4b38      	ldr	r3, [pc, #224]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c732:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c736:	d107      	bne.n	800c748 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 fd63 	bl	800d208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c744:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c746:	e294      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c748:	2300      	movs	r3, #0
 800c74a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c74c:	e291      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c74e:	4b2f      	ldr	r3, [pc, #188]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c756:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c75a:	d107      	bne.n	800c76c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c75c:	f107 0318 	add.w	r3, r7, #24
 800c760:	4618      	mov	r0, r3
 800c762:	f000 faa9 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c76a:	e282      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c76c:	2300      	movs	r3, #0
 800c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c770:	e27f      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c772:	4b26      	ldr	r3, [pc, #152]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c77a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c77e:	d107      	bne.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c780:	f107 030c 	add.w	r3, r7, #12
 800c784:	4618      	mov	r0, r3
 800c786:	f000 fbeb 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c78e:	e270      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c794:	e26d      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c796:	4b1d      	ldr	r3, [pc, #116]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c79a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c79e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c7a0:	4b1a      	ldr	r3, [pc, #104]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f003 0304 	and.w	r3, r3, #4
 800c7a8:	2b04      	cmp	r3, #4
 800c7aa:	d10c      	bne.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d109      	bne.n	800c7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7b2:	4b16      	ldr	r3, [pc, #88]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	08db      	lsrs	r3, r3, #3
 800c7b8:	f003 0303 	and.w	r3, r3, #3
 800c7bc:	4a14      	ldr	r2, [pc, #80]	; (800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c7be:	fa22 f303 	lsr.w	r3, r2, r3
 800c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7c4:	e01e      	b.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c7c6:	4b11      	ldr	r3, [pc, #68]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7d2:	d106      	bne.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7da:	d102      	bne.n	800c7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c7dc:	4b0d      	ldr	r3, [pc, #52]	; (800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c7de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7e0:	e010      	b.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c7e2:	4b0a      	ldr	r3, [pc, #40]	; (800c80c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7ee:	d106      	bne.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c7f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7f6:	d102      	bne.n	800c7fe <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c7f8:	4b07      	ldr	r3, [pc, #28]	; (800c818 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7fc:	e002      	b.n	800c804 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c7fe:	2300      	movs	r3, #0
 800c800:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c802:	e236      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c804:	e235      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c806:	4b05      	ldr	r3, [pc, #20]	; (800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c808:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c80a:	e232      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c80c:	58024400 	.word	0x58024400
 800c810:	03d09000 	.word	0x03d09000
 800c814:	003d0900 	.word	0x003d0900
 800c818:	017d7840 	.word	0x017d7840
 800c81c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c820:	2300      	movs	r3, #0
 800c822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c824:	e225      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c826:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c82a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c82e:	430b      	orrs	r3, r1
 800c830:	f040 8085 	bne.w	800c93e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c834:	4b9c      	ldr	r3, [pc, #624]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c838:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c83c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c844:	d06b      	beq.n	800c91e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c84c:	d874      	bhi.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c854:	d056      	beq.n	800c904 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c858:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c85c:	d86c      	bhi.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c860:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c864:	d03b      	beq.n	800c8de <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c868:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c86c:	d864      	bhi.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c870:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c874:	d021      	beq.n	800c8ba <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c87c:	d85c      	bhi.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c87e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c880:	2b00      	cmp	r3, #0
 800c882:	d004      	beq.n	800c88e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c88a:	d004      	beq.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c88c:	e054      	b.n	800c938 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c88e:	f7fe fb5f 	bl	800af50 <HAL_RCC_GetPCLK1Freq>
 800c892:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c894:	e1ed      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c896:	4b84      	ldr	r3, [pc, #528]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c89e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8a2:	d107      	bne.n	800c8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8a4:	f107 0318 	add.w	r3, r7, #24
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f000 fa05 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8b2:	e1de      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b8:	e1db      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8ba:	4b7b      	ldr	r3, [pc, #492]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8c6:	d107      	bne.n	800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8c8:	f107 030c 	add.w	r3, r7, #12
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f000 fb47 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8d6:	e1cc      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8dc:	e1c9      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8de:	4b72      	ldr	r3, [pc, #456]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f003 0304 	and.w	r3, r3, #4
 800c8e6:	2b04      	cmp	r3, #4
 800c8e8:	d109      	bne.n	800c8fe <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8ea:	4b6f      	ldr	r3, [pc, #444]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	08db      	lsrs	r3, r3, #3
 800c8f0:	f003 0303 	and.w	r3, r3, #3
 800c8f4:	4a6d      	ldr	r2, [pc, #436]	; (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c8f6:	fa22 f303 	lsr.w	r3, r2, r3
 800c8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8fc:	e1b9      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c8fe:	2300      	movs	r3, #0
 800c900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c902:	e1b6      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c904:	4b68      	ldr	r3, [pc, #416]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c90c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c910:	d102      	bne.n	800c918 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c912:	4b67      	ldr	r3, [pc, #412]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c916:	e1ac      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c918:	2300      	movs	r3, #0
 800c91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c91c:	e1a9      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c91e:	4b62      	ldr	r3, [pc, #392]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c926:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c92a:	d102      	bne.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c92c:	4b61      	ldr	r3, [pc, #388]	; (800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c930:	e19f      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c936:	e19c      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c938:	2300      	movs	r3, #0
 800c93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c93c:	e199      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c93e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c942:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c946:	430b      	orrs	r3, r1
 800c948:	d173      	bne.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c94a:	4b57      	ldr	r3, [pc, #348]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c94c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c94e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c952:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c956:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c95a:	d02f      	beq.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c962:	d863      	bhi.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c966:	2b00      	cmp	r3, #0
 800c968:	d004      	beq.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c970:	d012      	beq.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c972:	e05b      	b.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c974:	4b4c      	ldr	r3, [pc, #304]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c97c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c980:	d107      	bne.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c982:	f107 0318 	add.w	r3, r7, #24
 800c986:	4618      	mov	r0, r3
 800c988:	f000 f996 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c990:	e16f      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c996:	e16c      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c998:	4b43      	ldr	r3, [pc, #268]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9a4:	d107      	bne.n	800c9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9a6:	f107 030c 	add.w	r3, r7, #12
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 fad8 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b4:	e15d      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ba:	e15a      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9bc:	4b3a      	ldr	r3, [pc, #232]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9c6:	4b38      	ldr	r3, [pc, #224]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 0304 	and.w	r3, r3, #4
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	d10c      	bne.n	800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d109      	bne.n	800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9d8:	4b33      	ldr	r3, [pc, #204]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	08db      	lsrs	r3, r3, #3
 800c9de:	f003 0303 	and.w	r3, r3, #3
 800c9e2:	4a32      	ldr	r2, [pc, #200]	; (800caac <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ea:	e01e      	b.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9ec:	4b2e      	ldr	r3, [pc, #184]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9f8:	d106      	bne.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca00:	d102      	bne.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca02:	4b2b      	ldr	r3, [pc, #172]	; (800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca06:	e010      	b.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca08:	4b27      	ldr	r3, [pc, #156]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca14:	d106      	bne.n	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800ca16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca1c:	d102      	bne.n	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca1e:	4b25      	ldr	r3, [pc, #148]	; (800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800ca20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca22:	e002      	b.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca24:	2300      	movs	r3, #0
 800ca26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca28:	e123      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ca2a:	e122      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca30:	e11f      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ca32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca36:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ca3a:	430b      	orrs	r3, r1
 800ca3c:	d13c      	bne.n	800cab8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ca3e:	4b1a      	ldr	r3, [pc, #104]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ca40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca46:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d004      	beq.n	800ca58 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800ca4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca54:	d012      	beq.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800ca56:	e023      	b.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca58:	4b13      	ldr	r3, [pc, #76]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca64:	d107      	bne.n	800ca76 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 fbcc 	bl	800d208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca74:	e0fd      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca76:	2300      	movs	r3, #0
 800ca78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca7a:	e0fa      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca7c:	4b0a      	ldr	r3, [pc, #40]	; (800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca88:	d107      	bne.n	800ca9a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca8a:	f107 0318 	add.w	r3, r7, #24
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f000 f912 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ca94:	6a3b      	ldr	r3, [r7, #32]
 800ca96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca98:	e0eb      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca9e:	e0e8      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caa4:	e0e5      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800caa6:	bf00      	nop
 800caa8:	58024400 	.word	0x58024400
 800caac:	03d09000 	.word	0x03d09000
 800cab0:	003d0900 	.word	0x003d0900
 800cab4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cabc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800cac0:	430b      	orrs	r3, r1
 800cac2:	f040 8085 	bne.w	800cbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800cac6:	4b6d      	ldr	r3, [pc, #436]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caca:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cace:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cad6:	d06b      	beq.n	800cbb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800cad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cade:	d874      	bhi.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cae6:	d056      	beq.n	800cb96 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800cae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caee:	d86c      	bhi.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800caf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800caf6:	d03b      	beq.n	800cb70 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800caf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cafa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cafe:	d864      	bhi.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cb00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb06:	d021      	beq.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800cb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb0e:	d85c      	bhi.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800cb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d004      	beq.n	800cb20 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800cb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb1c:	d004      	beq.n	800cb28 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800cb1e:	e054      	b.n	800cbca <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cb20:	f000 f8b4 	bl	800cc8c <HAL_RCCEx_GetD3PCLK1Freq>
 800cb24:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cb26:	e0a4      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb28:	4b54      	ldr	r3, [pc, #336]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb34:	d107      	bne.n	800cb46 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb36:	f107 0318 	add.w	r3, r7, #24
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 f8bc 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cb40:	69fb      	ldr	r3, [r7, #28]
 800cb42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb44:	e095      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb4a:	e092      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cb4c:	4b4b      	ldr	r3, [pc, #300]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb58:	d107      	bne.n	800cb6a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cb5a:	f107 030c 	add.w	r3, r7, #12
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 f9fe 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb68:	e083      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb6e:	e080      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cb70:	4b42      	ldr	r3, [pc, #264]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 0304 	and.w	r3, r3, #4
 800cb78:	2b04      	cmp	r3, #4
 800cb7a:	d109      	bne.n	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb7c:	4b3f      	ldr	r3, [pc, #252]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	08db      	lsrs	r3, r3, #3
 800cb82:	f003 0303 	and.w	r3, r3, #3
 800cb86:	4a3e      	ldr	r2, [pc, #248]	; (800cc80 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800cb88:	fa22 f303 	lsr.w	r3, r2, r3
 800cb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb8e:	e070      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb94:	e06d      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cb96:	4b39      	ldr	r3, [pc, #228]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cba2:	d102      	bne.n	800cbaa <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800cba4:	4b37      	ldr	r3, [pc, #220]	; (800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800cba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cba8:	e063      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbae:	e060      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cbb0:	4b32      	ldr	r3, [pc, #200]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cbb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbbc:	d102      	bne.n	800cbc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800cbbe:	4b32      	ldr	r3, [pc, #200]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cbc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbc2:	e056      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbc8:	e053      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbce:	e050      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cbd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbd4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cbd8:	430b      	orrs	r3, r1
 800cbda:	d148      	bne.n	800cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cbdc:	4b27      	ldr	r3, [pc, #156]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cbde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbe0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cbe4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cbe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbec:	d02a      	beq.n	800cc44 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800cbee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbf4:	d838      	bhi.n	800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800cbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d004      	beq.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800cbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbfe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc02:	d00d      	beq.n	800cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800cc04:	e030      	b.n	800cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cc06:	4b1d      	ldr	r3, [pc, #116]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc12:	d102      	bne.n	800cc1a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800cc14:	4b1c      	ldr	r3, [pc, #112]	; (800cc88 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800cc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc18:	e02b      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc1e:	e028      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc20:	4b16      	ldr	r3, [pc, #88]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc2c:	d107      	bne.n	800cc3e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc32:	4618      	mov	r0, r3
 800cc34:	f000 fae8 	bl	800d208 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc3c:	e019      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc42:	e016      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc44:	4b0d      	ldr	r3, [pc, #52]	; (800cc7c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cc4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cc50:	d107      	bne.n	800cc62 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc52:	f107 0318 	add.w	r3, r7, #24
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 f82e 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cc5c:	69fb      	ldr	r3, [r7, #28]
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc60:	e007      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc66:	e004      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc6c:	e001      	b.n	800cc72 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cc72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3740      	adds	r7, #64	; 0x40
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	58024400 	.word	0x58024400
 800cc80:	03d09000 	.word	0x03d09000
 800cc84:	003d0900 	.word	0x003d0900
 800cc88:	017d7840 	.word	0x017d7840

0800cc8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cc90:	f7fe f92e 	bl	800aef0 <HAL_RCC_GetHCLKFreq>
 800cc94:	4602      	mov	r2, r0
 800cc96:	4b06      	ldr	r3, [pc, #24]	; (800ccb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	091b      	lsrs	r3, r3, #4
 800cc9c:	f003 0307 	and.w	r3, r3, #7
 800cca0:	4904      	ldr	r1, [pc, #16]	; (800ccb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cca2:	5ccb      	ldrb	r3, [r1, r3]
 800cca4:	f003 031f 	and.w	r3, r3, #31
 800cca8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	58024400 	.word	0x58024400
 800ccb4:	08015644 	.word	0x08015644

0800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b089      	sub	sp, #36	; 0x24
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ccc0:	4ba1      	ldr	r3, [pc, #644]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc4:	f003 0303 	and.w	r3, r3, #3
 800ccc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ccca:	4b9f      	ldr	r3, [pc, #636]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccce:	0b1b      	lsrs	r3, r3, #12
 800ccd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ccd6:	4b9c      	ldr	r3, [pc, #624]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccda:	091b      	lsrs	r3, r3, #4
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cce2:	4b99      	ldr	r3, [pc, #612]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce6:	08db      	lsrs	r3, r3, #3
 800cce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	fb02 f303 	mul.w	r3, r2, r3
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 8111 	beq.w	800cf28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	f000 8083 	beq.w	800ce14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	2b02      	cmp	r3, #2
 800cd12:	f200 80a1 	bhi.w	800ce58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cd16:	69bb      	ldr	r3, [r7, #24]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d003      	beq.n	800cd24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d056      	beq.n	800cdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cd22:	e099      	b.n	800ce58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd24:	4b88      	ldr	r3, [pc, #544]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f003 0320 	and.w	r3, r3, #32
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d02d      	beq.n	800cd8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd30:	4b85      	ldr	r3, [pc, #532]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	08db      	lsrs	r3, r3, #3
 800cd36:	f003 0303 	and.w	r3, r3, #3
 800cd3a:	4a84      	ldr	r2, [pc, #528]	; (800cf4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cd3c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	ee07 3a90 	vmov	s15, r3
 800cd48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	ee07 3a90 	vmov	s15, r3
 800cd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd5a:	4b7b      	ldr	r3, [pc, #492]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd8a:	e087      	b.n	800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	ee07 3a90 	vmov	s15, r3
 800cd92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cf54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cd9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd9e:	4b6a      	ldr	r3, [pc, #424]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdae:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cdce:	e065      	b.n	800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	ee07 3a90 	vmov	s15, r3
 800cdd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cf58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cdde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cde2:	4b59      	ldr	r3, [pc, #356]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdea:	ee07 3a90 	vmov	s15, r3
 800cdee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce12:	e043      	b.n	800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	ee07 3a90 	vmov	s15, r3
 800ce1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cf5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ce22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce26:	4b48      	ldr	r3, [pc, #288]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce2e:	ee07 3a90 	vmov	s15, r3
 800ce32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce56:	e021      	b.n	800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	ee07 3a90 	vmov	s15, r3
 800ce5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cf58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce6a:	4b37      	ldr	r3, [pc, #220]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce72:	ee07 3a90 	vmov	s15, r3
 800ce76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ce9c:	4b2a      	ldr	r3, [pc, #168]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea0:	0a5b      	lsrs	r3, r3, #9
 800cea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cea6:	ee07 3a90 	vmov	s15, r3
 800ceaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ceb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cec2:	ee17 2a90 	vmov	r2, s15
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ceca:	4b1f      	ldr	r3, [pc, #124]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cece:	0c1b      	lsrs	r3, r3, #16
 800ced0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ced4:	ee07 3a90 	vmov	s15, r3
 800ced8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cedc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cee4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cef0:	ee17 2a90 	vmov	r2, s15
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cef8:	4b13      	ldr	r3, [pc, #76]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefc:	0e1b      	lsrs	r3, r3, #24
 800cefe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf02:	ee07 3a90 	vmov	s15, r3
 800cf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf12:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf1e:	ee17 2a90 	vmov	r2, s15
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cf26:	e008      	b.n	800cf3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	609a      	str	r2, [r3, #8]
}
 800cf3a:	bf00      	nop
 800cf3c:	3724      	adds	r7, #36	; 0x24
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	58024400 	.word	0x58024400
 800cf4c:	03d09000 	.word	0x03d09000
 800cf50:	46000000 	.word	0x46000000
 800cf54:	4c742400 	.word	0x4c742400
 800cf58:	4a742400 	.word	0x4a742400
 800cf5c:	4bbebc20 	.word	0x4bbebc20

0800cf60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b089      	sub	sp, #36	; 0x24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf68:	4ba1      	ldr	r3, [pc, #644]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6c:	f003 0303 	and.w	r3, r3, #3
 800cf70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cf72:	4b9f      	ldr	r3, [pc, #636]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf76:	0d1b      	lsrs	r3, r3, #20
 800cf78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cf7e:	4b9c      	ldr	r3, [pc, #624]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf82:	0a1b      	lsrs	r3, r3, #8
 800cf84:	f003 0301 	and.w	r3, r3, #1
 800cf88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cf8a:	4b99      	ldr	r3, [pc, #612]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf8e:	08db      	lsrs	r3, r3, #3
 800cf90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	fb02 f303 	mul.w	r3, r2, r3
 800cf9a:	ee07 3a90 	vmov	s15, r3
 800cf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 8111 	beq.w	800d1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	f000 8083 	beq.w	800d0bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	f200 80a1 	bhi.w	800d100 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d056      	beq.n	800d078 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cfca:	e099      	b.n	800d100 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfcc:	4b88      	ldr	r3, [pc, #544]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 0320 	and.w	r3, r3, #32
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d02d      	beq.n	800d034 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfd8:	4b85      	ldr	r3, [pc, #532]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	08db      	lsrs	r3, r3, #3
 800cfde:	f003 0303 	and.w	r3, r3, #3
 800cfe2:	4a84      	ldr	r2, [pc, #528]	; (800d1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cfe4:	fa22 f303 	lsr.w	r3, r2, r3
 800cfe8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	ee07 3a90 	vmov	s15, r3
 800cff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	ee07 3a90 	vmov	s15, r3
 800cffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d002:	4b7b      	ldr	r3, [pc, #492]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d00a:	ee07 3a90 	vmov	s15, r3
 800d00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d012:	ed97 6a03 	vldr	s12, [r7, #12]
 800d016:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d02e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d032:	e087      	b.n	800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	ee07 3a90 	vmov	s15, r3
 800d03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d03e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d1fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d046:	4b6a      	ldr	r3, [pc, #424]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d04e:	ee07 3a90 	vmov	s15, r3
 800d052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d056:	ed97 6a03 	vldr	s12, [r7, #12]
 800d05a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d072:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d076:	e065      	b.n	800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	ee07 3a90 	vmov	s15, r3
 800d07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d082:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d200 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d08a:	4b59      	ldr	r3, [pc, #356]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d092:	ee07 3a90 	vmov	s15, r3
 800d096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d09a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d09e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0ba:	e043      	b.n	800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	ee07 3a90 	vmov	s15, r3
 800d0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d204 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ce:	4b48      	ldr	r3, [pc, #288]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0d6:	ee07 3a90 	vmov	s15, r3
 800d0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0fe:	e021      	b.n	800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d200 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d112:	4b37      	ldr	r3, [pc, #220]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d11a:	ee07 3a90 	vmov	s15, r3
 800d11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d122:	ed97 6a03 	vldr	s12, [r7, #12]
 800d126:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d13e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d142:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d144:	4b2a      	ldr	r3, [pc, #168]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d148:	0a5b      	lsrs	r3, r3, #9
 800d14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d14e:	ee07 3a90 	vmov	s15, r3
 800d152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d15a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d16a:	ee17 2a90 	vmov	r2, s15
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d172:	4b1f      	ldr	r3, [pc, #124]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d176:	0c1b      	lsrs	r3, r3, #16
 800d178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d17c:	ee07 3a90 	vmov	s15, r3
 800d180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d188:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d18c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d198:	ee17 2a90 	vmov	r2, s15
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d1a0:	4b13      	ldr	r3, [pc, #76]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a4:	0e1b      	lsrs	r3, r3, #24
 800d1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1aa:	ee07 3a90 	vmov	s15, r3
 800d1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1c6:	ee17 2a90 	vmov	r2, s15
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d1ce:	e008      	b.n	800d1e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	609a      	str	r2, [r3, #8]
}
 800d1e2:	bf00      	nop
 800d1e4:	3724      	adds	r7, #36	; 0x24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	58024400 	.word	0x58024400
 800d1f4:	03d09000 	.word	0x03d09000
 800d1f8:	46000000 	.word	0x46000000
 800d1fc:	4c742400 	.word	0x4c742400
 800d200:	4a742400 	.word	0x4a742400
 800d204:	4bbebc20 	.word	0x4bbebc20

0800d208 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d208:	b480      	push	{r7}
 800d20a:	b089      	sub	sp, #36	; 0x24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d210:	4ba0      	ldr	r3, [pc, #640]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d214:	f003 0303 	and.w	r3, r3, #3
 800d218:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d21a:	4b9e      	ldr	r3, [pc, #632]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21e:	091b      	lsrs	r3, r3, #4
 800d220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d224:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d226:	4b9b      	ldr	r3, [pc, #620]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d230:	4b98      	ldr	r3, [pc, #608]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d234:	08db      	lsrs	r3, r3, #3
 800d236:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d23a:	693a      	ldr	r2, [r7, #16]
 800d23c:	fb02 f303 	mul.w	r3, r2, r3
 800d240:	ee07 3a90 	vmov	s15, r3
 800d244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d248:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	f000 8111 	beq.w	800d476 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d254:	69bb      	ldr	r3, [r7, #24]
 800d256:	2b02      	cmp	r3, #2
 800d258:	f000 8083 	beq.w	800d362 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	2b02      	cmp	r3, #2
 800d260:	f200 80a1 	bhi.w	800d3a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d264:	69bb      	ldr	r3, [r7, #24]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d003      	beq.n	800d272 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	2b01      	cmp	r3, #1
 800d26e:	d056      	beq.n	800d31e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d270:	e099      	b.n	800d3a6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d272:	4b88      	ldr	r3, [pc, #544]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f003 0320 	and.w	r3, r3, #32
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d02d      	beq.n	800d2da <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d27e:	4b85      	ldr	r3, [pc, #532]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	08db      	lsrs	r3, r3, #3
 800d284:	f003 0303 	and.w	r3, r3, #3
 800d288:	4a83      	ldr	r2, [pc, #524]	; (800d498 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d28a:	fa22 f303 	lsr.w	r3, r2, r3
 800d28e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	ee07 3a90 	vmov	s15, r3
 800d296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	ee07 3a90 	vmov	s15, r3
 800d2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2a8:	4b7a      	ldr	r3, [pc, #488]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2b0:	ee07 3a90 	vmov	s15, r3
 800d2b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2b8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2bc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d49c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2d4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d2d8:	e087      	b.n	800d3ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	ee07 3a90 	vmov	s15, r3
 800d2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d4a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d2e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ec:	4b69      	ldr	r3, [pc, #420]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2f4:	ee07 3a90 	vmov	s15, r3
 800d2f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2fc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d300:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d49c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d304:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d308:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d30c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d310:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d314:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d318:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d31c:	e065      	b.n	800d3ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	ee07 3a90 	vmov	s15, r3
 800d324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d328:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d4a4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d32c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d330:	4b58      	ldr	r3, [pc, #352]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d338:	ee07 3a90 	vmov	s15, r3
 800d33c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d340:	ed97 6a03 	vldr	s12, [r7, #12]
 800d344:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d49c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d348:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d34c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d350:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d354:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d35c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d360:	e043      	b.n	800d3ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	ee07 3a90 	vmov	s15, r3
 800d368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d36c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d4a8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d370:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d374:	4b47      	ldr	r3, [pc, #284]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d37c:	ee07 3a90 	vmov	s15, r3
 800d380:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d384:	ed97 6a03 	vldr	s12, [r7, #12]
 800d388:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d49c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d38c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d390:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d394:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d398:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d39c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3a4:	e021      	b.n	800d3ea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	ee07 3a90 	vmov	s15, r3
 800d3ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3b0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d4a0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d3b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3b8:	4b36      	ldr	r3, [pc, #216]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3c0:	ee07 3a90 	vmov	s15, r3
 800d3c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3c8:	ed97 6a03 	vldr	s12, [r7, #12]
 800d3cc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d49c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d3d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d3d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d3d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d3dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d3e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d3e8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d3ea:	4b2a      	ldr	r3, [pc, #168]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ee:	0a5b      	lsrs	r3, r3, #9
 800d3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3f4:	ee07 3a90 	vmov	s15, r3
 800d3f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d400:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d404:	edd7 6a07 	vldr	s13, [r7, #28]
 800d408:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d40c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d410:	ee17 2a90 	vmov	r2, s15
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d418:	4b1e      	ldr	r3, [pc, #120]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d41c:	0c1b      	lsrs	r3, r3, #16
 800d41e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d422:	ee07 3a90 	vmov	s15, r3
 800d426:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d42a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d42e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d432:	edd7 6a07 	vldr	s13, [r7, #28]
 800d436:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d43a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d43e:	ee17 2a90 	vmov	r2, s15
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d446:	4b13      	ldr	r3, [pc, #76]	; (800d494 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d44a:	0e1b      	lsrs	r3, r3, #24
 800d44c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d450:	ee07 3a90 	vmov	s15, r3
 800d454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d45c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d460:	edd7 6a07 	vldr	s13, [r7, #28]
 800d464:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d46c:	ee17 2a90 	vmov	r2, s15
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d474:	e008      	b.n	800d488 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	609a      	str	r2, [r3, #8]
}
 800d488:	bf00      	nop
 800d48a:	3724      	adds	r7, #36	; 0x24
 800d48c:	46bd      	mov	sp, r7
 800d48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d492:	4770      	bx	lr
 800d494:	58024400 	.word	0x58024400
 800d498:	03d09000 	.word	0x03d09000
 800d49c:	46000000 	.word	0x46000000
 800d4a0:	4c742400 	.word	0x4c742400
 800d4a4:	4a742400 	.word	0x4a742400
 800d4a8:	4bbebc20 	.word	0x4bbebc20

0800d4ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d4ba:	4b53      	ldr	r3, [pc, #332]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d4bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4be:	f003 0303 	and.w	r3, r3, #3
 800d4c2:	2b03      	cmp	r3, #3
 800d4c4:	d101      	bne.n	800d4ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	e099      	b.n	800d5fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d4ca:	4b4f      	ldr	r3, [pc, #316]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4a4e      	ldr	r2, [pc, #312]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d4d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d4d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4d6:	f7f6 fac5 	bl	8003a64 <HAL_GetTick>
 800d4da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d4dc:	e008      	b.n	800d4f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d4de:	f7f6 fac1 	bl	8003a64 <HAL_GetTick>
 800d4e2:	4602      	mov	r2, r0
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	1ad3      	subs	r3, r2, r3
 800d4e8:	2b02      	cmp	r3, #2
 800d4ea:	d901      	bls.n	800d4f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	e086      	b.n	800d5fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d4f0:	4b45      	ldr	r3, [pc, #276]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d1f0      	bne.n	800d4de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d4fc:	4b42      	ldr	r3, [pc, #264]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d500:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	031b      	lsls	r3, r3, #12
 800d50a:	493f      	ldr	r1, [pc, #252]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d50c:	4313      	orrs	r3, r2
 800d50e:	628b      	str	r3, [r1, #40]	; 0x28
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	3b01      	subs	r3, #1
 800d516:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	689b      	ldr	r3, [r3, #8]
 800d51e:	3b01      	subs	r3, #1
 800d520:	025b      	lsls	r3, r3, #9
 800d522:	b29b      	uxth	r3, r3
 800d524:	431a      	orrs	r2, r3
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	68db      	ldr	r3, [r3, #12]
 800d52a:	3b01      	subs	r3, #1
 800d52c:	041b      	lsls	r3, r3, #16
 800d52e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d532:	431a      	orrs	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	691b      	ldr	r3, [r3, #16]
 800d538:	3b01      	subs	r3, #1
 800d53a:	061b      	lsls	r3, r3, #24
 800d53c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d540:	4931      	ldr	r1, [pc, #196]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d542:	4313      	orrs	r3, r2
 800d544:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d546:	4b30      	ldr	r3, [pc, #192]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	695b      	ldr	r3, [r3, #20]
 800d552:	492d      	ldr	r1, [pc, #180]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d554:	4313      	orrs	r3, r2
 800d556:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d558:	4b2b      	ldr	r3, [pc, #172]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d55c:	f023 0220 	bic.w	r2, r3, #32
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	699b      	ldr	r3, [r3, #24]
 800d564:	4928      	ldr	r1, [pc, #160]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d566:	4313      	orrs	r3, r2
 800d568:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d56a:	4b27      	ldr	r3, [pc, #156]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d56e:	4a26      	ldr	r2, [pc, #152]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d570:	f023 0310 	bic.w	r3, r3, #16
 800d574:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d576:	4b24      	ldr	r3, [pc, #144]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d57a:	4b24      	ldr	r3, [pc, #144]	; (800d60c <RCCEx_PLL2_Config+0x160>)
 800d57c:	4013      	ands	r3, r2
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	69d2      	ldr	r2, [r2, #28]
 800d582:	00d2      	lsls	r2, r2, #3
 800d584:	4920      	ldr	r1, [pc, #128]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d586:	4313      	orrs	r3, r2
 800d588:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d58a:	4b1f      	ldr	r3, [pc, #124]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d58c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d58e:	4a1e      	ldr	r2, [pc, #120]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d590:	f043 0310 	orr.w	r3, r3, #16
 800d594:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d106      	bne.n	800d5aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d59c:	4b1a      	ldr	r3, [pc, #104]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5a0:	4a19      	ldr	r2, [pc, #100]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d5a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d5a8:	e00f      	b.n	800d5ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d106      	bne.n	800d5be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d5b0:	4b15      	ldr	r3, [pc, #84]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b4:	4a14      	ldr	r2, [pc, #80]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d5b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d5bc:	e005      	b.n	800d5ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d5be:	4b12      	ldr	r3, [pc, #72]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c2:	4a11      	ldr	r2, [pc, #68]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d5c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d5c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d5ca:	4b0f      	ldr	r3, [pc, #60]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	4a0e      	ldr	r2, [pc, #56]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d5d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d5d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d5d6:	f7f6 fa45 	bl	8003a64 <HAL_GetTick>
 800d5da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d5dc:	e008      	b.n	800d5f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d5de:	f7f6 fa41 	bl	8003a64 <HAL_GetTick>
 800d5e2:	4602      	mov	r2, r0
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	1ad3      	subs	r3, r2, r3
 800d5e8:	2b02      	cmp	r3, #2
 800d5ea:	d901      	bls.n	800d5f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	e006      	b.n	800d5fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d5f0:	4b05      	ldr	r3, [pc, #20]	; (800d608 <RCCEx_PLL2_Config+0x15c>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d0f0      	beq.n	800d5de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop
 800d608:	58024400 	.word	0x58024400
 800d60c:	ffff0007 	.word	0xffff0007

0800d610 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d61e:	4b53      	ldr	r3, [pc, #332]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d622:	f003 0303 	and.w	r3, r3, #3
 800d626:	2b03      	cmp	r3, #3
 800d628:	d101      	bne.n	800d62e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	e099      	b.n	800d762 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d62e:	4b4f      	ldr	r3, [pc, #316]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a4e      	ldr	r2, [pc, #312]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d63a:	f7f6 fa13 	bl	8003a64 <HAL_GetTick>
 800d63e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d640:	e008      	b.n	800d654 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d642:	f7f6 fa0f 	bl	8003a64 <HAL_GetTick>
 800d646:	4602      	mov	r2, r0
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	1ad3      	subs	r3, r2, r3
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d901      	bls.n	800d654 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d650:	2303      	movs	r3, #3
 800d652:	e086      	b.n	800d762 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d654:	4b45      	ldr	r3, [pc, #276]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1f0      	bne.n	800d642 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d660:	4b42      	ldr	r3, [pc, #264]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d664:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	051b      	lsls	r3, r3, #20
 800d66e:	493f      	ldr	r1, [pc, #252]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d670:	4313      	orrs	r3, r2
 800d672:	628b      	str	r3, [r1, #40]	; 0x28
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	3b01      	subs	r3, #1
 800d67a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	3b01      	subs	r3, #1
 800d684:	025b      	lsls	r3, r3, #9
 800d686:	b29b      	uxth	r3, r3
 800d688:	431a      	orrs	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	3b01      	subs	r3, #1
 800d690:	041b      	lsls	r3, r3, #16
 800d692:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d696:	431a      	orrs	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	691b      	ldr	r3, [r3, #16]
 800d69c:	3b01      	subs	r3, #1
 800d69e:	061b      	lsls	r3, r3, #24
 800d6a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d6a4:	4931      	ldr	r1, [pc, #196]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d6aa:	4b30      	ldr	r3, [pc, #192]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	695b      	ldr	r3, [r3, #20]
 800d6b6:	492d      	ldr	r1, [pc, #180]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d6bc:	4b2b      	ldr	r3, [pc, #172]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	699b      	ldr	r3, [r3, #24]
 800d6c8:	4928      	ldr	r1, [pc, #160]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d6ce:	4b27      	ldr	r3, [pc, #156]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d2:	4a26      	ldr	r2, [pc, #152]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d6da:	4b24      	ldr	r3, [pc, #144]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6de:	4b24      	ldr	r3, [pc, #144]	; (800d770 <RCCEx_PLL3_Config+0x160>)
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	69d2      	ldr	r2, [r2, #28]
 800d6e6:	00d2      	lsls	r2, r2, #3
 800d6e8:	4920      	ldr	r1, [pc, #128]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d6ee:	4b1f      	ldr	r3, [pc, #124]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f2:	4a1e      	ldr	r2, [pc, #120]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d6f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d106      	bne.n	800d70e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d700:	4b1a      	ldr	r3, [pc, #104]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d704:	4a19      	ldr	r2, [pc, #100]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d706:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d70a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d70c:	e00f      	b.n	800d72e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d106      	bne.n	800d722 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d714:	4b15      	ldr	r3, [pc, #84]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d718:	4a14      	ldr	r2, [pc, #80]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d71a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d71e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d720:	e005      	b.n	800d72e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d722:	4b12      	ldr	r3, [pc, #72]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d726:	4a11      	ldr	r2, [pc, #68]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d728:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d72c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d72e:	4b0f      	ldr	r3, [pc, #60]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a0e      	ldr	r2, [pc, #56]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d73a:	f7f6 f993 	bl	8003a64 <HAL_GetTick>
 800d73e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d740:	e008      	b.n	800d754 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d742:	f7f6 f98f 	bl	8003a64 <HAL_GetTick>
 800d746:	4602      	mov	r2, r0
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d901      	bls.n	800d754 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d750:	2303      	movs	r3, #3
 800d752:	e006      	b.n	800d762 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d754:	4b05      	ldr	r3, [pc, #20]	; (800d76c <RCCEx_PLL3_Config+0x15c>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d0f0      	beq.n	800d742 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d760:	7bfb      	ldrb	r3, [r7, #15]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	58024400 	.word	0x58024400
 800d770:	ffff0007 	.word	0xffff0007

0800d774 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d101      	bne.n	800d786 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d782:	2301      	movs	r3, #1
 800d784:	e092      	b.n	800d8ac <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	7a5b      	ldrb	r3, [r3, #9]
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d105      	bne.n	800d79c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2200      	movs	r2, #0
 800d794:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7f5 fa24 	bl	8002be4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2202      	movs	r2, #2
 800d7a0:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f022 0204 	bic.w	r2, r2, #4
 800d7b0:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	681a      	ldr	r2, [r3, #0]
 800d7b8:	4b3e      	ldr	r3, [pc, #248]	; (800d8b4 <HAL_RNG_Init+0x140>)
 800d7ba:	4013      	ands	r3, r2
 800d7bc:	687a      	ldr	r2, [r7, #4]
 800d7be:	6852      	ldr	r2, [r2, #4]
 800d7c0:	431a      	orrs	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d7ca:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	4a39      	ldr	r2, [pc, #228]	; (800d8b8 <HAL_RNG_Init+0x144>)
 800d7d2:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f247 2274 	movw	r2, #29300	; 0x7274
 800d7dc:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d7ec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d7ee:	f7f6 f939 	bl	8003a64 <HAL_GetTick>
 800d7f2:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d7f4:	e016      	b.n	800d824 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d7f6:	f7f6 f935 	bl	8003a64 <HAL_GetTick>
 800d7fa:	4602      	mov	r2, r0
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	1ad3      	subs	r3, r2, r3
 800d800:	2b02      	cmp	r3, #2
 800d802:	d90f      	bls.n	800d824 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d80e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d812:	d107      	bne.n	800d824 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2202      	movs	r2, #2
 800d81e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d820:	2301      	movs	r3, #1
 800d822:	e043      	b.n	800d8ac <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d82e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d832:	d0e0      	beq.n	800d7f6 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	681a      	ldr	r2, [r3, #0]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f042 0204 	orr.w	r2, r2, #4
 800d842:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d84e:	2b40      	cmp	r3, #64	; 0x40
 800d850:	d104      	bne.n	800d85c <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	2204      	movs	r2, #4
 800d856:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d858:	2301      	movs	r3, #1
 800d85a:	e027      	b.n	800d8ac <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d85c:	f7f6 f902 	bl	8003a64 <HAL_GetTick>
 800d860:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d862:	e015      	b.n	800d890 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d864:	f7f6 f8fe 	bl	8003a64 <HAL_GetTick>
 800d868:	4602      	mov	r2, r0
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	1ad3      	subs	r3, r2, r3
 800d86e:	2b02      	cmp	r3, #2
 800d870:	d90e      	bls.n	800d890 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	685b      	ldr	r3, [r3, #4]
 800d878:	f003 0304 	and.w	r3, r3, #4
 800d87c:	2b04      	cmp	r3, #4
 800d87e:	d107      	bne.n	800d890 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2204      	movs	r2, #4
 800d884:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2202      	movs	r2, #2
 800d88a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d88c:	2301      	movs	r3, #1
 800d88e:	e00d      	b.n	800d8ac <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	f003 0304 	and.w	r3, r3, #4
 800d89a:	2b04      	cmp	r3, #4
 800d89c:	d0e2      	beq.n	800d864 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2201      	movs	r2, #1
 800d8a2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	bfffffdf 	.word	0xbfffffdf
 800d8b8:	17590abc 	.word	0x17590abc

0800d8bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d101      	bne.n	800d8ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d8ca:	2301      	movs	r3, #1
 800d8cc:	e10f      	b.n	800daee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	4a87      	ldr	r2, [pc, #540]	; (800daf8 <HAL_SPI_Init+0x23c>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d00f      	beq.n	800d8fe <HAL_SPI_Init+0x42>
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	4a86      	ldr	r2, [pc, #536]	; (800dafc <HAL_SPI_Init+0x240>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d00a      	beq.n	800d8fe <HAL_SPI_Init+0x42>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a84      	ldr	r2, [pc, #528]	; (800db00 <HAL_SPI_Init+0x244>)
 800d8ee:	4293      	cmp	r3, r2
 800d8f0:	d005      	beq.n	800d8fe <HAL_SPI_Init+0x42>
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	2b0f      	cmp	r3, #15
 800d8f8:	d901      	bls.n	800d8fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e0f7      	b.n	800daee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 fbc8 	bl	800e094 <SPI_GetPacketSize>
 800d904:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a7b      	ldr	r2, [pc, #492]	; (800daf8 <HAL_SPI_Init+0x23c>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d00c      	beq.n	800d92a <HAL_SPI_Init+0x6e>
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	4a79      	ldr	r2, [pc, #484]	; (800dafc <HAL_SPI_Init+0x240>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d007      	beq.n	800d92a <HAL_SPI_Init+0x6e>
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a78      	ldr	r2, [pc, #480]	; (800db00 <HAL_SPI_Init+0x244>)
 800d920:	4293      	cmp	r3, r2
 800d922:	d002      	beq.n	800d92a <HAL_SPI_Init+0x6e>
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2b08      	cmp	r3, #8
 800d928:	d811      	bhi.n	800d94e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d92e:	4a72      	ldr	r2, [pc, #456]	; (800daf8 <HAL_SPI_Init+0x23c>)
 800d930:	4293      	cmp	r3, r2
 800d932:	d009      	beq.n	800d948 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	4a70      	ldr	r2, [pc, #448]	; (800dafc <HAL_SPI_Init+0x240>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d004      	beq.n	800d948 <HAL_SPI_Init+0x8c>
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	4a6f      	ldr	r2, [pc, #444]	; (800db00 <HAL_SPI_Init+0x244>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d104      	bne.n	800d952 <HAL_SPI_Init+0x96>
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2b10      	cmp	r3, #16
 800d94c:	d901      	bls.n	800d952 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d94e:	2301      	movs	r3, #1
 800d950:	e0cd      	b.n	800daee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d106      	bne.n	800d96c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7f5 f9e2 	bl	8002d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2202      	movs	r2, #2
 800d970:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f022 0201 	bic.w	r2, r2, #1
 800d982:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	689b      	ldr	r3, [r3, #8]
 800d98a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d98e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d998:	d119      	bne.n	800d9ce <HAL_SPI_Init+0x112>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9a2:	d103      	bne.n	800d9ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d008      	beq.n	800d9be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d10c      	bne.n	800d9ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d9b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9bc:	d107      	bne.n	800d9ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	681a      	ldr	r2, [r3, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d9cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	685b      	ldr	r3, [r3, #4]
 800d9d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d00f      	beq.n	800d9fa <HAL_SPI_Init+0x13e>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	2b06      	cmp	r3, #6
 800d9e0:	d90b      	bls.n	800d9fa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	430a      	orrs	r2, r1
 800d9f6:	601a      	str	r2, [r3, #0]
 800d9f8:	e007      	b.n	800da0a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	681a      	ldr	r2, [r3, #0]
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800da08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	69da      	ldr	r2, [r3, #28]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da12:	431a      	orrs	r2, r3
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	431a      	orrs	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da1c:	ea42 0103 	orr.w	r1, r2, r3
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	68da      	ldr	r2, [r3, #12]
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	430a      	orrs	r2, r1
 800da2a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da34:	431a      	orrs	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da3a:	431a      	orrs	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	699b      	ldr	r3, [r3, #24]
 800da40:	431a      	orrs	r2, r3
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	431a      	orrs	r2, r3
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	695b      	ldr	r3, [r3, #20]
 800da4c:	431a      	orrs	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6a1b      	ldr	r3, [r3, #32]
 800da52:	431a      	orrs	r2, r3
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	431a      	orrs	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da5e:	431a      	orrs	r2, r3
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	431a      	orrs	r2, r3
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da6a:	ea42 0103 	orr.w	r1, r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	430a      	orrs	r2, r1
 800da78:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d113      	bne.n	800daaa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da94:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800daa8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f022 0201 	bic.w	r2, r2, #1
 800dab8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	685b      	ldr	r3, [r3, #4]
 800dabe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00a      	beq.n	800dadc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	430a      	orrs	r2, r1
 800dada:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2200      	movs	r2, #0
 800dae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800daec:	2300      	movs	r3, #0
}
 800daee:	4618      	mov	r0, r3
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	40013000 	.word	0x40013000
 800dafc:	40003800 	.word	0x40003800
 800db00:	40003c00 	.word	0x40003c00

0800db04 <HAL_SPI_TransmitReceive_DMA>:
  * @note   When the CRC feature is enabled the pRxData Length must be Size + 1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
 800db10:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d101      	bne.n	800db24 <HAL_SPI_TransmitReceive_DMA+0x20>
 800db20:	2302      	movs	r3, #2
 800db22:	e198      	b.n	800de56 <HAL_SPI_TransmitReceive_DMA+0x352>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db32:	b2db      	uxtb	r3, r3
 800db34:	2b01      	cmp	r3, #1
 800db36:	d007      	beq.n	800db48 <HAL_SPI_TransmitReceive_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 800db38:	2302      	movs	r3, #2
 800db3a:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800db44:	7dfb      	ldrb	r3, [r7, #23]
 800db46:	e186      	b.n	800de56 <HAL_SPI_TransmitReceive_DMA+0x352>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d005      	beq.n	800db5a <HAL_SPI_TransmitReceive_DMA+0x56>
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d002      	beq.n	800db5a <HAL_SPI_TransmitReceive_DMA+0x56>
 800db54:	887b      	ldrh	r3, [r7, #2]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d107      	bne.n	800db6a <HAL_SPI_TransmitReceive_DMA+0x66>
  {
    errorcode = HAL_ERROR;
 800db5a:	2301      	movs	r3, #1
 800db5c:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2200      	movs	r2, #0
 800db62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800db66:	7dfb      	ldrb	r3, [r7, #23]
 800db68:	e175      	b.n	800de56 <HAL_SPI_TransmitReceive_DMA+0x352>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2205      	movs	r2, #5
 800db6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2200      	movs	r2, #0
 800db76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	887a      	ldrh	r2, [r7, #2]
 800db84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	887a      	ldrh	r2, [r7, #2]
 800db8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	887a      	ldrh	r2, [r7, #2]
 800db9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	887a      	ldrh	r2, [r7, #2]
 800dba2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	68da      	ldr	r2, [r3, #12]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f422 22c0 	bic.w	r2, r2, #393216	; 0x60000
 800dbc0:	60da      	str	r2, [r3, #12]

  /* Reset the Tx/Rx DMA bits */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	689a      	ldr	r2, [r3, #8]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800dbd0:	609a      	str	r2, [r3, #8]

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	2b0f      	cmp	r3, #15
 800dbd8:	d905      	bls.n	800dbe6 <HAL_SPI_TransmitReceive_DMA+0xe2>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbde:	699b      	ldr	r3, [r3, #24]
 800dbe0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dbe4:	d10f      	bne.n	800dc06 <HAL_SPI_TransmitReceive_DMA+0x102>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800dbea:	2b07      	cmp	r3, #7
 800dbec:	d913      	bls.n	800dc16 <HAL_SPI_TransmitReceive_DMA+0x112>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbf2:	699b      	ldr	r3, [r3, #24]
 800dbf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dbf8:	d00d      	beq.n	800dc16 <HAL_SPI_TransmitReceive_DMA+0x112>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dbfe:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800dc00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc04:	d007      	beq.n	800dc16 <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 800dc06:	2301      	movs	r3, #1
 800dc08:	75fb      	strb	r3, [r7, #23]
    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dc12:	7dfb      	ldrb	r3, [r7, #23]
 800dc14:	e11f      	b.n	800de56 <HAL_SPI_TransmitReceive_DMA+0x352>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	68db      	ldr	r3, [r3, #12]
 800dc1a:	2b07      	cmp	r3, #7
 800dc1c:	d840      	bhi.n	800dca0 <HAL_SPI_TransmitReceive_DMA+0x19c>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc22:	699b      	ldr	r3, [r3, #24]
 800dc24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc28:	d109      	bne.n	800dc3e <HAL_SPI_TransmitReceive_DMA+0x13a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	3301      	adds	r3, #1
 800dc34:	105b      	asrs	r3, r3, #1
 800dc36:	b29a      	uxth	r2, r3
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc42:	699b      	ldr	r3, [r3, #24]
 800dc44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc48:	d109      	bne.n	800dc5e <HAL_SPI_TransmitReceive_DMA+0x15a>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	3303      	adds	r3, #3
 800dc54:	109b      	asrs	r3, r3, #2
 800dc56:	b29a      	uxth	r2, r3
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc62:	699b      	ldr	r3, [r3, #24]
 800dc64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dc68:	d109      	bne.n	800dc7e <HAL_SPI_TransmitReceive_DMA+0x17a>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	3301      	adds	r3, #1
 800dc74:	105b      	asrs	r3, r3, #1
 800dc76:	b29a      	uxth	r2, r3
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dc82:	699b      	ldr	r3, [r3, #24]
 800dc84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dc88:	d12e      	bne.n	800dce8 <HAL_SPI_TransmitReceive_DMA+0x1e4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dc90:	b29b      	uxth	r3, r3
 800dc92:	3303      	adds	r3, #3
 800dc94:	109b      	asrs	r3, r3, #2
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dc9e:	e023      	b.n	800dce8 <HAL_SPI_TransmitReceive_DMA+0x1e4>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	2b0f      	cmp	r3, #15
 800dca6:	d81f      	bhi.n	800dce8 <HAL_SPI_TransmitReceive_DMA+0x1e4>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcac:	699b      	ldr	r3, [r3, #24]
 800dcae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcb2:	d109      	bne.n	800dcc8 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcba:	b29b      	uxth	r3, r3
 800dcbc:	3301      	adds	r3, #1
 800dcbe:	105b      	asrs	r3, r3, #1
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dccc:	699b      	ldr	r3, [r3, #24]
 800dcce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcd2:	d109      	bne.n	800dce8 <HAL_SPI_TransmitReceive_DMA+0x1e4>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	3301      	adds	r3, #1
 800dcde:	105b      	asrs	r3, r3, #1
 800dce0:	b29a      	uxth	r2, r3
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI Tx/Rx DMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcec:	4a5c      	ldr	r2, [pc, #368]	; (800de60 <HAL_SPI_TransmitReceive_DMA+0x35c>)
 800dcee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcf4:	4a5b      	ldr	r2, [pc, #364]	; (800de64 <HAL_SPI_TransmitReceive_DMA+0x360>)
 800dcf6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dcfc:	4a5a      	ldr	r2, [pc, #360]	; (800de68 <HAL_SPI_TransmitReceive_DMA+0x364>)
 800dcfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd04:	2200      	movs	r2, #0
 800dd06:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	3330      	adds	r3, #48	; 0x30
 800dd12:	4619      	mov	r1, r3
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd18:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd20:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800dd22:	f7f7 fc47 	bl	80055b4 <HAL_DMA_Start_IT>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d013      	beq.n	800dd54 <HAL_SPI_TransmitReceive_DMA+0x250>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd32:	f043 0210 	orr.w	r2, r3, #16
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2201      	movs	r2, #1
 800dd48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800dd50:	7dfb      	ldrb	r3, [r7, #23]
 800dd52:	e080      	b.n	800de56 <HAL_SPI_TransmitReceive_DMA+0x352>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	689a      	ldr	r2, [r3, #8]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dd62:	609a      	str	r2, [r3, #8]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd68:	2200      	movs	r2, #0
 800dd6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd70:	2200      	movs	r2, #0
 800dd72:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd78:	2200      	movs	r2, #0
 800dd7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd80:	4a39      	ldr	r2, [pc, #228]	; (800de68 <HAL_SPI_TransmitReceive_DMA+0x364>)
 800dd82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	3320      	adds	r3, #32
 800dd94:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd9c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800dd9e:	f7f7 fc09 	bl	80055b4 <HAL_DMA_Start_IT>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d013      	beq.n	800ddd0 <HAL_SPI_TransmitReceive_DMA+0x2cc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddae:	f043 0210 	orr.w	r2, r3, #16
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800ddcc:	7dfb      	ldrb	r3, [r7, #23]
 800ddce:	e042      	b.n	800de56 <HAL_SPI_TransmitReceive_DMA+0x352>
  }

  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddd4:	69db      	ldr	r3, [r3, #28]
 800ddd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddda:	d108      	bne.n	800ddee <HAL_SPI_TransmitReceive_DMA+0x2ea>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	6859      	ldr	r1, [r3, #4]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	4b21      	ldr	r3, [pc, #132]	; (800de6c <HAL_SPI_TransmitReceive_DMA+0x368>)
 800dde8:	400b      	ands	r3, r1
 800ddea:	6053      	str	r3, [r2, #4]
 800ddec:	e009      	b.n	800de02 <HAL_SPI_TransmitReceive_DMA+0x2fe>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	4b1d      	ldr	r3, [pc, #116]	; (800de6c <HAL_SPI_TransmitReceive_DMA+0x368>)
 800ddf6:	4013      	ands	r3, r2
 800ddf8:	8879      	ldrh	r1, [r7, #2]
 800ddfa:	68fa      	ldr	r2, [r7, #12]
 800ddfc:	6812      	ldr	r2, [r2, #0]
 800ddfe:	430b      	orrs	r3, r1
 800de00:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	689a      	ldr	r2, [r3, #8]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de10:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	691a      	ldr	r2, [r3, #16]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	f442 7258 	orr.w	r2, r2, #864	; 0x360
 800de20:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	f042 0201 	orr.w	r2, r2, #1
 800de30:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de3a:	d107      	bne.n	800de4c <HAL_SPI_TransmitReceive_DMA+0x348>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de4a:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2200      	movs	r2, #0
 800de50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 800de54:	7dfb      	ldrb	r3, [r7, #23]
}
 800de56:	4618      	mov	r0, r3
 800de58:	3718      	adds	r7, #24
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	0800def3 	.word	0x0800def3
 800de64:	0800dead 	.word	0x0800dead
 800de68:	0800df0f 	.word	0x0800df0f
 800de6c:	ffff0000 	.word	0xffff0000

0800de70 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800de78:	bf00      	nop
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800de84:	b480      	push	{r7}
 800de86:	b083      	sub	sp, #12
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800de8c:	bf00      	nop
 800de8e:	370c      	adds	r7, #12
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr

0800de98 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800dea0:	bf00      	nop
 800dea2:	370c      	adds	r7, #12
 800dea4:	46bd      	mov	sp, r7
 800dea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deaa:	4770      	bx	lr

0800deac <SPI_DMATransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b084      	sub	sp, #16
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	2b07      	cmp	r3, #7
 800dec4:	d011      	beq.n	800deea <SPI_DMATransmitReceiveCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800deca:	69db      	ldr	r3, [r3, #28]
 800decc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ded0:	d103      	bne.n	800deda <SPI_DMATransmitReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxRxCpltCallback(hspi);
#else
      HAL_SPI_TxRxCpltCallback(hspi);
 800ded2:	68f8      	ldr	r0, [r7, #12]
 800ded4:	f7ff ffcc 	bl	800de70 <HAL_SPI_TxRxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 800ded8:	e007      	b.n	800deea <SPI_DMATransmitReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	691a      	ldr	r2, [r3, #16]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f042 0208 	orr.w	r2, r2, #8
 800dee8:	611a      	str	r2, [r3, #16]
}
 800deea:	bf00      	nop
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b084      	sub	sp, #16
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defe:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800df00:	68f8      	ldr	r0, [r7, #12]
 800df02:	f7ff ffbf 	bl	800de84 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800df06:	bf00      	nop
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b084      	sub	sp, #16
 800df12:	af00      	add	r7, sp, #0
 800df14:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df1a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f7f8 f807 	bl	8005f30 <HAL_DMA_GetError>
 800df22:	4603      	mov	r3, r0
 800df24:	2b02      	cmp	r3, #2
 800df26:	d011      	beq.n	800df4c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 800df28:	68f8      	ldr	r0, [r7, #12]
 800df2a:	f000 f813 	bl	800df54 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df34:	f043 0210 	orr.w	r2, r3, #16
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2201      	movs	r2, #1
 800df42:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800df46:	68f8      	ldr	r0, [r7, #12]
 800df48:	f7ff ffa6 	bl	800de98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800df4c:	bf00      	nop
 800df4e:	3710      	adds	r7, #16
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}

0800df54 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800df54:	b480      	push	{r7}
 800df56:	b085      	sub	sp, #20
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	699a      	ldr	r2, [r3, #24]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f042 0208 	orr.w	r2, r2, #8
 800df72:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	699a      	ldr	r2, [r3, #24]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f042 0210 	orr.w	r2, r2, #16
 800df82:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f022 0201 	bic.w	r2, r2, #1
 800df92:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	6919      	ldr	r1, [r3, #16]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	4b3c      	ldr	r3, [pc, #240]	; (800e090 <SPI_CloseTransfer+0x13c>)
 800dfa0:	400b      	ands	r3, r1
 800dfa2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	689a      	ldr	r2, [r3, #8]
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800dfb2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b04      	cmp	r3, #4
 800dfbe:	d014      	beq.n	800dfea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f003 0320 	and.w	r3, r3, #32
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00f      	beq.n	800dfea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	699a      	ldr	r2, [r3, #24]
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f042 0220 	orr.w	r2, r2, #32
 800dfe8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dff0:	b2db      	uxtb	r3, r3
 800dff2:	2b03      	cmp	r3, #3
 800dff4:	d014      	beq.n	800e020 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00f      	beq.n	800e020 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e006:	f043 0204 	orr.w	r2, r3, #4
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	699a      	ldr	r2, [r3, #24]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e01e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e026:	2b00      	cmp	r3, #0
 800e028:	d00f      	beq.n	800e04a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e030:	f043 0201 	orr.w	r2, r3, #1
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	699a      	ldr	r2, [r3, #24]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e048:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00f      	beq.n	800e074 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e05a:	f043 0208 	orr.w	r2, r3, #8
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	699a      	ldr	r2, [r3, #24]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e072:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e084:	bf00      	nop
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr
 800e090:	fffffc90 	.word	0xfffffc90

0800e094 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e094:	b480      	push	{r7}
 800e096:	b085      	sub	sp, #20
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0a0:	095b      	lsrs	r3, r3, #5
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	68db      	ldr	r3, [r3, #12]
 800e0aa:	3301      	adds	r3, #1
 800e0ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	3307      	adds	r3, #7
 800e0b2:	08db      	lsrs	r3, r3, #3
 800e0b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e0b6:	68bb      	ldr	r3, [r7, #8]
 800e0b8:	68fa      	ldr	r2, [r7, #12]
 800e0ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800e0be:	4618      	mov	r0, r3
 800e0c0:	3714      	adds	r7, #20
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c8:	4770      	bx	lr

0800e0ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e0ca:	b580      	push	{r7, lr}
 800e0cc:	b082      	sub	sp, #8
 800e0ce:	af00      	add	r7, sp, #0
 800e0d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d101      	bne.n	800e0dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e0d8:	2301      	movs	r3, #1
 800e0da:	e042      	b.n	800e162 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d106      	bne.n	800e0f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7f5 f936 	bl	8003360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2224      	movs	r2, #36	; 0x24
 800e0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681a      	ldr	r2, [r3, #0]
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f022 0201 	bic.w	r2, r2, #1
 800e10a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 f899 	bl	800e244 <UART_SetConfig>
 800e112:	4603      	mov	r3, r0
 800e114:	2b01      	cmp	r3, #1
 800e116:	d101      	bne.n	800e11c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	e022      	b.n	800e162 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e120:	2b00      	cmp	r3, #0
 800e122:	d002      	beq.n	800e12a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e124:	6878      	ldr	r0, [r7, #4]
 800e126:	f000 fef9 	bl	800ef1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	685a      	ldr	r2, [r3, #4]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e138:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	689a      	ldr	r2, [r3, #8]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e148:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	681a      	ldr	r2, [r3, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f042 0201 	orr.w	r2, r2, #1
 800e158:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f000 ff80 	bl	800f060 <UART_CheckIdleState>
 800e160:	4603      	mov	r3, r0
}
 800e162:	4618      	mov	r0, r3
 800e164:	3708      	adds	r7, #8
 800e166:	46bd      	mov	sp, r7
 800e168:	bd80      	pop	{r7, pc}
	...

0800e16c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b08a      	sub	sp, #40	; 0x28
 800e170:	af00      	add	r7, sp, #0
 800e172:	60f8      	str	r0, [r7, #12]
 800e174:	60b9      	str	r1, [r7, #8]
 800e176:	4613      	mov	r3, r2
 800e178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e180:	2b20      	cmp	r3, #32
 800e182:	d137      	bne.n	800e1f4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d002      	beq.n	800e190 <HAL_UART_Receive_IT+0x24>
 800e18a:	88fb      	ldrh	r3, [r7, #6]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	e030      	b.n	800e1f6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2200      	movs	r2, #0
 800e198:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a18      	ldr	r2, [pc, #96]	; (800e200 <HAL_UART_Receive_IT+0x94>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d01f      	beq.n	800e1e4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d018      	beq.n	800e1e4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	e853 3f00 	ldrex	r3, [r3]
 800e1be:	613b      	str	r3, [r7, #16]
   return(result);
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e1c6:	627b      	str	r3, [r7, #36]	; 0x24
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d0:	623b      	str	r3, [r7, #32]
 800e1d2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d4:	69f9      	ldr	r1, [r7, #28]
 800e1d6:	6a3a      	ldr	r2, [r7, #32]
 800e1d8:	e841 2300 	strex	r3, r2, [r1]
 800e1dc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d1e6      	bne.n	800e1b2 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800e1e4:	88fb      	ldrh	r3, [r7, #6]
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	68b9      	ldr	r1, [r7, #8]
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f001 f84a 	bl	800f284 <UART_Start_Receive_IT>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	e000      	b.n	800e1f6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e1f4:	2302      	movs	r3, #2
  }
}
 800e1f6:	4618      	mov	r0, r3
 800e1f8:	3728      	adds	r7, #40	; 0x28
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	bd80      	pop	{r7, pc}
 800e1fe:	bf00      	nop
 800e200:	58000c00 	.word	0x58000c00

0800e204 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800e20c:	bf00      	nop
 800e20e:	370c      	adds	r7, #12
 800e210:	46bd      	mov	sp, r7
 800e212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e216:	4770      	bx	lr

0800e218 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e220:	bf00      	nop
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	460b      	mov	r3, r1
 800e236:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e238:	bf00      	nop
 800e23a:	370c      	adds	r7, #12
 800e23c:	46bd      	mov	sp, r7
 800e23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e242:	4770      	bx	lr

0800e244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e248:	b092      	sub	sp, #72	; 0x48
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e254:	697b      	ldr	r3, [r7, #20]
 800e256:	689a      	ldr	r2, [r3, #8]
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	691b      	ldr	r3, [r3, #16]
 800e25c:	431a      	orrs	r2, r3
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	695b      	ldr	r3, [r3, #20]
 800e262:	431a      	orrs	r2, r3
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	69db      	ldr	r3, [r3, #28]
 800e268:	4313      	orrs	r3, r2
 800e26a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	681a      	ldr	r2, [r3, #0]
 800e272:	4bbe      	ldr	r3, [pc, #760]	; (800e56c <UART_SetConfig+0x328>)
 800e274:	4013      	ands	r3, r2
 800e276:	697a      	ldr	r2, [r7, #20]
 800e278:	6812      	ldr	r2, [r2, #0]
 800e27a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e27c:	430b      	orrs	r3, r1
 800e27e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e280:	697b      	ldr	r3, [r7, #20]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	685b      	ldr	r3, [r3, #4]
 800e286:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	68da      	ldr	r2, [r3, #12]
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	430a      	orrs	r2, r1
 800e294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	699b      	ldr	r3, [r3, #24]
 800e29a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e29c:	697b      	ldr	r3, [r7, #20]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	4ab3      	ldr	r2, [pc, #716]	; (800e570 <UART_SetConfig+0x32c>)
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d004      	beq.n	800e2b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	6a1b      	ldr	r3, [r3, #32]
 800e2aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2ac:	4313      	orrs	r3, r2
 800e2ae:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	689a      	ldr	r2, [r3, #8]
 800e2b6:	4baf      	ldr	r3, [pc, #700]	; (800e574 <UART_SetConfig+0x330>)
 800e2b8:	4013      	ands	r3, r2
 800e2ba:	697a      	ldr	r2, [r7, #20]
 800e2bc:	6812      	ldr	r2, [r2, #0]
 800e2be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2c0:	430b      	orrs	r3, r1
 800e2c2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ca:	f023 010f 	bic.w	r1, r3, #15
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	430a      	orrs	r2, r1
 800e2d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	4aa6      	ldr	r2, [pc, #664]	; (800e578 <UART_SetConfig+0x334>)
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	d177      	bne.n	800e3d4 <UART_SetConfig+0x190>
 800e2e4:	4ba5      	ldr	r3, [pc, #660]	; (800e57c <UART_SetConfig+0x338>)
 800e2e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2ec:	2b28      	cmp	r3, #40	; 0x28
 800e2ee:	d86d      	bhi.n	800e3cc <UART_SetConfig+0x188>
 800e2f0:	a201      	add	r2, pc, #4	; (adr r2, 800e2f8 <UART_SetConfig+0xb4>)
 800e2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f6:	bf00      	nop
 800e2f8:	0800e39d 	.word	0x0800e39d
 800e2fc:	0800e3cd 	.word	0x0800e3cd
 800e300:	0800e3cd 	.word	0x0800e3cd
 800e304:	0800e3cd 	.word	0x0800e3cd
 800e308:	0800e3cd 	.word	0x0800e3cd
 800e30c:	0800e3cd 	.word	0x0800e3cd
 800e310:	0800e3cd 	.word	0x0800e3cd
 800e314:	0800e3cd 	.word	0x0800e3cd
 800e318:	0800e3a5 	.word	0x0800e3a5
 800e31c:	0800e3cd 	.word	0x0800e3cd
 800e320:	0800e3cd 	.word	0x0800e3cd
 800e324:	0800e3cd 	.word	0x0800e3cd
 800e328:	0800e3cd 	.word	0x0800e3cd
 800e32c:	0800e3cd 	.word	0x0800e3cd
 800e330:	0800e3cd 	.word	0x0800e3cd
 800e334:	0800e3cd 	.word	0x0800e3cd
 800e338:	0800e3ad 	.word	0x0800e3ad
 800e33c:	0800e3cd 	.word	0x0800e3cd
 800e340:	0800e3cd 	.word	0x0800e3cd
 800e344:	0800e3cd 	.word	0x0800e3cd
 800e348:	0800e3cd 	.word	0x0800e3cd
 800e34c:	0800e3cd 	.word	0x0800e3cd
 800e350:	0800e3cd 	.word	0x0800e3cd
 800e354:	0800e3cd 	.word	0x0800e3cd
 800e358:	0800e3b5 	.word	0x0800e3b5
 800e35c:	0800e3cd 	.word	0x0800e3cd
 800e360:	0800e3cd 	.word	0x0800e3cd
 800e364:	0800e3cd 	.word	0x0800e3cd
 800e368:	0800e3cd 	.word	0x0800e3cd
 800e36c:	0800e3cd 	.word	0x0800e3cd
 800e370:	0800e3cd 	.word	0x0800e3cd
 800e374:	0800e3cd 	.word	0x0800e3cd
 800e378:	0800e3bd 	.word	0x0800e3bd
 800e37c:	0800e3cd 	.word	0x0800e3cd
 800e380:	0800e3cd 	.word	0x0800e3cd
 800e384:	0800e3cd 	.word	0x0800e3cd
 800e388:	0800e3cd 	.word	0x0800e3cd
 800e38c:	0800e3cd 	.word	0x0800e3cd
 800e390:	0800e3cd 	.word	0x0800e3cd
 800e394:	0800e3cd 	.word	0x0800e3cd
 800e398:	0800e3c5 	.word	0x0800e3c5
 800e39c:	2301      	movs	r3, #1
 800e39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a2:	e326      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e3a4:	2304      	movs	r3, #4
 800e3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3aa:	e322      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e3ac:	2308      	movs	r3, #8
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b2:	e31e      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e3b4:	2310      	movs	r3, #16
 800e3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ba:	e31a      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e3bc:	2320      	movs	r3, #32
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e316      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e3c4:	2340      	movs	r3, #64	; 0x40
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ca:	e312      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e3cc:	2380      	movs	r3, #128	; 0x80
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d2:	e30e      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e3d4:	697b      	ldr	r3, [r7, #20]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4a69      	ldr	r2, [pc, #420]	; (800e580 <UART_SetConfig+0x33c>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d130      	bne.n	800e440 <UART_SetConfig+0x1fc>
 800e3de:	4b67      	ldr	r3, [pc, #412]	; (800e57c <UART_SetConfig+0x338>)
 800e3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3e2:	f003 0307 	and.w	r3, r3, #7
 800e3e6:	2b05      	cmp	r3, #5
 800e3e8:	d826      	bhi.n	800e438 <UART_SetConfig+0x1f4>
 800e3ea:	a201      	add	r2, pc, #4	; (adr r2, 800e3f0 <UART_SetConfig+0x1ac>)
 800e3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3f0:	0800e409 	.word	0x0800e409
 800e3f4:	0800e411 	.word	0x0800e411
 800e3f8:	0800e419 	.word	0x0800e419
 800e3fc:	0800e421 	.word	0x0800e421
 800e400:	0800e429 	.word	0x0800e429
 800e404:	0800e431 	.word	0x0800e431
 800e408:	2300      	movs	r3, #0
 800e40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40e:	e2f0      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e410:	2304      	movs	r3, #4
 800e412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e416:	e2ec      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e418:	2308      	movs	r3, #8
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41e:	e2e8      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e420:	2310      	movs	r3, #16
 800e422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e426:	e2e4      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e428:	2320      	movs	r3, #32
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e2e0      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e430:	2340      	movs	r3, #64	; 0x40
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e2dc      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e438:	2380      	movs	r3, #128	; 0x80
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e2d8      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e440:	697b      	ldr	r3, [r7, #20]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	4a4f      	ldr	r2, [pc, #316]	; (800e584 <UART_SetConfig+0x340>)
 800e446:	4293      	cmp	r3, r2
 800e448:	d130      	bne.n	800e4ac <UART_SetConfig+0x268>
 800e44a:	4b4c      	ldr	r3, [pc, #304]	; (800e57c <UART_SetConfig+0x338>)
 800e44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e44e:	f003 0307 	and.w	r3, r3, #7
 800e452:	2b05      	cmp	r3, #5
 800e454:	d826      	bhi.n	800e4a4 <UART_SetConfig+0x260>
 800e456:	a201      	add	r2, pc, #4	; (adr r2, 800e45c <UART_SetConfig+0x218>)
 800e458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e45c:	0800e475 	.word	0x0800e475
 800e460:	0800e47d 	.word	0x0800e47d
 800e464:	0800e485 	.word	0x0800e485
 800e468:	0800e48d 	.word	0x0800e48d
 800e46c:	0800e495 	.word	0x0800e495
 800e470:	0800e49d 	.word	0x0800e49d
 800e474:	2300      	movs	r3, #0
 800e476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e47a:	e2ba      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e47c:	2304      	movs	r3, #4
 800e47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e482:	e2b6      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e484:	2308      	movs	r3, #8
 800e486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48a:	e2b2      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e48c:	2310      	movs	r3, #16
 800e48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e492:	e2ae      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e494:	2320      	movs	r3, #32
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e2aa      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e49c:	2340      	movs	r3, #64	; 0x40
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e2a6      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e4a4:	2380      	movs	r3, #128	; 0x80
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e2a2      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	4a35      	ldr	r2, [pc, #212]	; (800e588 <UART_SetConfig+0x344>)
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d130      	bne.n	800e518 <UART_SetConfig+0x2d4>
 800e4b6:	4b31      	ldr	r3, [pc, #196]	; (800e57c <UART_SetConfig+0x338>)
 800e4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4ba:	f003 0307 	and.w	r3, r3, #7
 800e4be:	2b05      	cmp	r3, #5
 800e4c0:	d826      	bhi.n	800e510 <UART_SetConfig+0x2cc>
 800e4c2:	a201      	add	r2, pc, #4	; (adr r2, 800e4c8 <UART_SetConfig+0x284>)
 800e4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c8:	0800e4e1 	.word	0x0800e4e1
 800e4cc:	0800e4e9 	.word	0x0800e4e9
 800e4d0:	0800e4f1 	.word	0x0800e4f1
 800e4d4:	0800e4f9 	.word	0x0800e4f9
 800e4d8:	0800e501 	.word	0x0800e501
 800e4dc:	0800e509 	.word	0x0800e509
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e6:	e284      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e4e8:	2304      	movs	r3, #4
 800e4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ee:	e280      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e4f0:	2308      	movs	r3, #8
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e27c      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e4f8:	2310      	movs	r3, #16
 800e4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4fe:	e278      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e500:	2320      	movs	r3, #32
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e274      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e508:	2340      	movs	r3, #64	; 0x40
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e270      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e510:	2380      	movs	r3, #128	; 0x80
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e26c      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e518:	697b      	ldr	r3, [r7, #20]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	4a1b      	ldr	r2, [pc, #108]	; (800e58c <UART_SetConfig+0x348>)
 800e51e:	4293      	cmp	r3, r2
 800e520:	d142      	bne.n	800e5a8 <UART_SetConfig+0x364>
 800e522:	4b16      	ldr	r3, [pc, #88]	; (800e57c <UART_SetConfig+0x338>)
 800e524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e526:	f003 0307 	and.w	r3, r3, #7
 800e52a:	2b05      	cmp	r3, #5
 800e52c:	d838      	bhi.n	800e5a0 <UART_SetConfig+0x35c>
 800e52e:	a201      	add	r2, pc, #4	; (adr r2, 800e534 <UART_SetConfig+0x2f0>)
 800e530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e534:	0800e54d 	.word	0x0800e54d
 800e538:	0800e555 	.word	0x0800e555
 800e53c:	0800e55d 	.word	0x0800e55d
 800e540:	0800e565 	.word	0x0800e565
 800e544:	0800e591 	.word	0x0800e591
 800e548:	0800e599 	.word	0x0800e599
 800e54c:	2300      	movs	r3, #0
 800e54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e552:	e24e      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e554:	2304      	movs	r3, #4
 800e556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e55a:	e24a      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e55c:	2308      	movs	r3, #8
 800e55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e562:	e246      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e564:	2310      	movs	r3, #16
 800e566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e56a:	e242      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e56c:	cfff69f3 	.word	0xcfff69f3
 800e570:	58000c00 	.word	0x58000c00
 800e574:	11fff4ff 	.word	0x11fff4ff
 800e578:	40011000 	.word	0x40011000
 800e57c:	58024400 	.word	0x58024400
 800e580:	40004400 	.word	0x40004400
 800e584:	40004800 	.word	0x40004800
 800e588:	40004c00 	.word	0x40004c00
 800e58c:	40005000 	.word	0x40005000
 800e590:	2320      	movs	r3, #32
 800e592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e596:	e22c      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e598:	2340      	movs	r3, #64	; 0x40
 800e59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e59e:	e228      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e5a0:	2380      	movs	r3, #128	; 0x80
 800e5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e5a6:	e224      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4ab1      	ldr	r2, [pc, #708]	; (800e874 <UART_SetConfig+0x630>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d176      	bne.n	800e6a0 <UART_SetConfig+0x45c>
 800e5b2:	4bb1      	ldr	r3, [pc, #708]	; (800e878 <UART_SetConfig+0x634>)
 800e5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e5b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e5ba:	2b28      	cmp	r3, #40	; 0x28
 800e5bc:	d86c      	bhi.n	800e698 <UART_SetConfig+0x454>
 800e5be:	a201      	add	r2, pc, #4	; (adr r2, 800e5c4 <UART_SetConfig+0x380>)
 800e5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5c4:	0800e669 	.word	0x0800e669
 800e5c8:	0800e699 	.word	0x0800e699
 800e5cc:	0800e699 	.word	0x0800e699
 800e5d0:	0800e699 	.word	0x0800e699
 800e5d4:	0800e699 	.word	0x0800e699
 800e5d8:	0800e699 	.word	0x0800e699
 800e5dc:	0800e699 	.word	0x0800e699
 800e5e0:	0800e699 	.word	0x0800e699
 800e5e4:	0800e671 	.word	0x0800e671
 800e5e8:	0800e699 	.word	0x0800e699
 800e5ec:	0800e699 	.word	0x0800e699
 800e5f0:	0800e699 	.word	0x0800e699
 800e5f4:	0800e699 	.word	0x0800e699
 800e5f8:	0800e699 	.word	0x0800e699
 800e5fc:	0800e699 	.word	0x0800e699
 800e600:	0800e699 	.word	0x0800e699
 800e604:	0800e679 	.word	0x0800e679
 800e608:	0800e699 	.word	0x0800e699
 800e60c:	0800e699 	.word	0x0800e699
 800e610:	0800e699 	.word	0x0800e699
 800e614:	0800e699 	.word	0x0800e699
 800e618:	0800e699 	.word	0x0800e699
 800e61c:	0800e699 	.word	0x0800e699
 800e620:	0800e699 	.word	0x0800e699
 800e624:	0800e681 	.word	0x0800e681
 800e628:	0800e699 	.word	0x0800e699
 800e62c:	0800e699 	.word	0x0800e699
 800e630:	0800e699 	.word	0x0800e699
 800e634:	0800e699 	.word	0x0800e699
 800e638:	0800e699 	.word	0x0800e699
 800e63c:	0800e699 	.word	0x0800e699
 800e640:	0800e699 	.word	0x0800e699
 800e644:	0800e689 	.word	0x0800e689
 800e648:	0800e699 	.word	0x0800e699
 800e64c:	0800e699 	.word	0x0800e699
 800e650:	0800e699 	.word	0x0800e699
 800e654:	0800e699 	.word	0x0800e699
 800e658:	0800e699 	.word	0x0800e699
 800e65c:	0800e699 	.word	0x0800e699
 800e660:	0800e699 	.word	0x0800e699
 800e664:	0800e691 	.word	0x0800e691
 800e668:	2301      	movs	r3, #1
 800e66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66e:	e1c0      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e670:	2304      	movs	r3, #4
 800e672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e676:	e1bc      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e678:	2308      	movs	r3, #8
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e1b8      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e680:	2310      	movs	r3, #16
 800e682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e686:	e1b4      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e688:	2320      	movs	r3, #32
 800e68a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e68e:	e1b0      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e690:	2340      	movs	r3, #64	; 0x40
 800e692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e696:	e1ac      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e698:	2380      	movs	r3, #128	; 0x80
 800e69a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e69e:	e1a8      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e6a0:	697b      	ldr	r3, [r7, #20]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4a75      	ldr	r2, [pc, #468]	; (800e87c <UART_SetConfig+0x638>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d130      	bne.n	800e70c <UART_SetConfig+0x4c8>
 800e6aa:	4b73      	ldr	r3, [pc, #460]	; (800e878 <UART_SetConfig+0x634>)
 800e6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6ae:	f003 0307 	and.w	r3, r3, #7
 800e6b2:	2b05      	cmp	r3, #5
 800e6b4:	d826      	bhi.n	800e704 <UART_SetConfig+0x4c0>
 800e6b6:	a201      	add	r2, pc, #4	; (adr r2, 800e6bc <UART_SetConfig+0x478>)
 800e6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6bc:	0800e6d5 	.word	0x0800e6d5
 800e6c0:	0800e6dd 	.word	0x0800e6dd
 800e6c4:	0800e6e5 	.word	0x0800e6e5
 800e6c8:	0800e6ed 	.word	0x0800e6ed
 800e6cc:	0800e6f5 	.word	0x0800e6f5
 800e6d0:	0800e6fd 	.word	0x0800e6fd
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6da:	e18a      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e6dc:	2304      	movs	r3, #4
 800e6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e2:	e186      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e6e4:	2308      	movs	r3, #8
 800e6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ea:	e182      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e6ec:	2310      	movs	r3, #16
 800e6ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6f2:	e17e      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e6f4:	2320      	movs	r3, #32
 800e6f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6fa:	e17a      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e6fc:	2340      	movs	r3, #64	; 0x40
 800e6fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e702:	e176      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e704:	2380      	movs	r3, #128	; 0x80
 800e706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e70a:	e172      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a5b      	ldr	r2, [pc, #364]	; (800e880 <UART_SetConfig+0x63c>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d130      	bne.n	800e778 <UART_SetConfig+0x534>
 800e716:	4b58      	ldr	r3, [pc, #352]	; (800e878 <UART_SetConfig+0x634>)
 800e718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e71a:	f003 0307 	and.w	r3, r3, #7
 800e71e:	2b05      	cmp	r3, #5
 800e720:	d826      	bhi.n	800e770 <UART_SetConfig+0x52c>
 800e722:	a201      	add	r2, pc, #4	; (adr r2, 800e728 <UART_SetConfig+0x4e4>)
 800e724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e728:	0800e741 	.word	0x0800e741
 800e72c:	0800e749 	.word	0x0800e749
 800e730:	0800e751 	.word	0x0800e751
 800e734:	0800e759 	.word	0x0800e759
 800e738:	0800e761 	.word	0x0800e761
 800e73c:	0800e769 	.word	0x0800e769
 800e740:	2300      	movs	r3, #0
 800e742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e746:	e154      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e748:	2304      	movs	r3, #4
 800e74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74e:	e150      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e750:	2308      	movs	r3, #8
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e756:	e14c      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e758:	2310      	movs	r3, #16
 800e75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e75e:	e148      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e760:	2320      	movs	r3, #32
 800e762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e766:	e144      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e768:	2340      	movs	r3, #64	; 0x40
 800e76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e76e:	e140      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e770:	2380      	movs	r3, #128	; 0x80
 800e772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e776:	e13c      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	4a41      	ldr	r2, [pc, #260]	; (800e884 <UART_SetConfig+0x640>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	f040 8082 	bne.w	800e888 <UART_SetConfig+0x644>
 800e784:	4b3c      	ldr	r3, [pc, #240]	; (800e878 <UART_SetConfig+0x634>)
 800e786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e788:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e78c:	2b28      	cmp	r3, #40	; 0x28
 800e78e:	d86d      	bhi.n	800e86c <UART_SetConfig+0x628>
 800e790:	a201      	add	r2, pc, #4	; (adr r2, 800e798 <UART_SetConfig+0x554>)
 800e792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e796:	bf00      	nop
 800e798:	0800e83d 	.word	0x0800e83d
 800e79c:	0800e86d 	.word	0x0800e86d
 800e7a0:	0800e86d 	.word	0x0800e86d
 800e7a4:	0800e86d 	.word	0x0800e86d
 800e7a8:	0800e86d 	.word	0x0800e86d
 800e7ac:	0800e86d 	.word	0x0800e86d
 800e7b0:	0800e86d 	.word	0x0800e86d
 800e7b4:	0800e86d 	.word	0x0800e86d
 800e7b8:	0800e845 	.word	0x0800e845
 800e7bc:	0800e86d 	.word	0x0800e86d
 800e7c0:	0800e86d 	.word	0x0800e86d
 800e7c4:	0800e86d 	.word	0x0800e86d
 800e7c8:	0800e86d 	.word	0x0800e86d
 800e7cc:	0800e86d 	.word	0x0800e86d
 800e7d0:	0800e86d 	.word	0x0800e86d
 800e7d4:	0800e86d 	.word	0x0800e86d
 800e7d8:	0800e84d 	.word	0x0800e84d
 800e7dc:	0800e86d 	.word	0x0800e86d
 800e7e0:	0800e86d 	.word	0x0800e86d
 800e7e4:	0800e86d 	.word	0x0800e86d
 800e7e8:	0800e86d 	.word	0x0800e86d
 800e7ec:	0800e86d 	.word	0x0800e86d
 800e7f0:	0800e86d 	.word	0x0800e86d
 800e7f4:	0800e86d 	.word	0x0800e86d
 800e7f8:	0800e855 	.word	0x0800e855
 800e7fc:	0800e86d 	.word	0x0800e86d
 800e800:	0800e86d 	.word	0x0800e86d
 800e804:	0800e86d 	.word	0x0800e86d
 800e808:	0800e86d 	.word	0x0800e86d
 800e80c:	0800e86d 	.word	0x0800e86d
 800e810:	0800e86d 	.word	0x0800e86d
 800e814:	0800e86d 	.word	0x0800e86d
 800e818:	0800e85d 	.word	0x0800e85d
 800e81c:	0800e86d 	.word	0x0800e86d
 800e820:	0800e86d 	.word	0x0800e86d
 800e824:	0800e86d 	.word	0x0800e86d
 800e828:	0800e86d 	.word	0x0800e86d
 800e82c:	0800e86d 	.word	0x0800e86d
 800e830:	0800e86d 	.word	0x0800e86d
 800e834:	0800e86d 	.word	0x0800e86d
 800e838:	0800e865 	.word	0x0800e865
 800e83c:	2301      	movs	r3, #1
 800e83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e842:	e0d6      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e844:	2304      	movs	r3, #4
 800e846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e84a:	e0d2      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e84c:	2308      	movs	r3, #8
 800e84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e852:	e0ce      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e854:	2310      	movs	r3, #16
 800e856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e85a:	e0ca      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e85c:	2320      	movs	r3, #32
 800e85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e862:	e0c6      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e864:	2340      	movs	r3, #64	; 0x40
 800e866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e86a:	e0c2      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e86c:	2380      	movs	r3, #128	; 0x80
 800e86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e872:	e0be      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e874:	40011400 	.word	0x40011400
 800e878:	58024400 	.word	0x58024400
 800e87c:	40007800 	.word	0x40007800
 800e880:	40007c00 	.word	0x40007c00
 800e884:	40011800 	.word	0x40011800
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	4aad      	ldr	r2, [pc, #692]	; (800eb44 <UART_SetConfig+0x900>)
 800e88e:	4293      	cmp	r3, r2
 800e890:	d176      	bne.n	800e980 <UART_SetConfig+0x73c>
 800e892:	4bad      	ldr	r3, [pc, #692]	; (800eb48 <UART_SetConfig+0x904>)
 800e894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e896:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e89a:	2b28      	cmp	r3, #40	; 0x28
 800e89c:	d86c      	bhi.n	800e978 <UART_SetConfig+0x734>
 800e89e:	a201      	add	r2, pc, #4	; (adr r2, 800e8a4 <UART_SetConfig+0x660>)
 800e8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a4:	0800e949 	.word	0x0800e949
 800e8a8:	0800e979 	.word	0x0800e979
 800e8ac:	0800e979 	.word	0x0800e979
 800e8b0:	0800e979 	.word	0x0800e979
 800e8b4:	0800e979 	.word	0x0800e979
 800e8b8:	0800e979 	.word	0x0800e979
 800e8bc:	0800e979 	.word	0x0800e979
 800e8c0:	0800e979 	.word	0x0800e979
 800e8c4:	0800e951 	.word	0x0800e951
 800e8c8:	0800e979 	.word	0x0800e979
 800e8cc:	0800e979 	.word	0x0800e979
 800e8d0:	0800e979 	.word	0x0800e979
 800e8d4:	0800e979 	.word	0x0800e979
 800e8d8:	0800e979 	.word	0x0800e979
 800e8dc:	0800e979 	.word	0x0800e979
 800e8e0:	0800e979 	.word	0x0800e979
 800e8e4:	0800e959 	.word	0x0800e959
 800e8e8:	0800e979 	.word	0x0800e979
 800e8ec:	0800e979 	.word	0x0800e979
 800e8f0:	0800e979 	.word	0x0800e979
 800e8f4:	0800e979 	.word	0x0800e979
 800e8f8:	0800e979 	.word	0x0800e979
 800e8fc:	0800e979 	.word	0x0800e979
 800e900:	0800e979 	.word	0x0800e979
 800e904:	0800e961 	.word	0x0800e961
 800e908:	0800e979 	.word	0x0800e979
 800e90c:	0800e979 	.word	0x0800e979
 800e910:	0800e979 	.word	0x0800e979
 800e914:	0800e979 	.word	0x0800e979
 800e918:	0800e979 	.word	0x0800e979
 800e91c:	0800e979 	.word	0x0800e979
 800e920:	0800e979 	.word	0x0800e979
 800e924:	0800e969 	.word	0x0800e969
 800e928:	0800e979 	.word	0x0800e979
 800e92c:	0800e979 	.word	0x0800e979
 800e930:	0800e979 	.word	0x0800e979
 800e934:	0800e979 	.word	0x0800e979
 800e938:	0800e979 	.word	0x0800e979
 800e93c:	0800e979 	.word	0x0800e979
 800e940:	0800e979 	.word	0x0800e979
 800e944:	0800e971 	.word	0x0800e971
 800e948:	2301      	movs	r3, #1
 800e94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e94e:	e050      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e950:	2304      	movs	r3, #4
 800e952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e956:	e04c      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e958:	2308      	movs	r3, #8
 800e95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e95e:	e048      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e960:	2310      	movs	r3, #16
 800e962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e966:	e044      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e968:	2320      	movs	r3, #32
 800e96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e96e:	e040      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e970:	2340      	movs	r3, #64	; 0x40
 800e972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e976:	e03c      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e978:	2380      	movs	r3, #128	; 0x80
 800e97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e97e:	e038      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4a71      	ldr	r2, [pc, #452]	; (800eb4c <UART_SetConfig+0x908>)
 800e986:	4293      	cmp	r3, r2
 800e988:	d130      	bne.n	800e9ec <UART_SetConfig+0x7a8>
 800e98a:	4b6f      	ldr	r3, [pc, #444]	; (800eb48 <UART_SetConfig+0x904>)
 800e98c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e98e:	f003 0307 	and.w	r3, r3, #7
 800e992:	2b05      	cmp	r3, #5
 800e994:	d826      	bhi.n	800e9e4 <UART_SetConfig+0x7a0>
 800e996:	a201      	add	r2, pc, #4	; (adr r2, 800e99c <UART_SetConfig+0x758>)
 800e998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e99c:	0800e9b5 	.word	0x0800e9b5
 800e9a0:	0800e9bd 	.word	0x0800e9bd
 800e9a4:	0800e9c5 	.word	0x0800e9c5
 800e9a8:	0800e9cd 	.word	0x0800e9cd
 800e9ac:	0800e9d5 	.word	0x0800e9d5
 800e9b0:	0800e9dd 	.word	0x0800e9dd
 800e9b4:	2302      	movs	r3, #2
 800e9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ba:	e01a      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e9bc:	2304      	movs	r3, #4
 800e9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9c2:	e016      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e9c4:	2308      	movs	r3, #8
 800e9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ca:	e012      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e9cc:	2310      	movs	r3, #16
 800e9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9d2:	e00e      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e9d4:	2320      	movs	r3, #32
 800e9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9da:	e00a      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e9dc:	2340      	movs	r3, #64	; 0x40
 800e9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9e2:	e006      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e9e4:	2380      	movs	r3, #128	; 0x80
 800e9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e9ea:	e002      	b.n	800e9f2 <UART_SetConfig+0x7ae>
 800e9ec:	2380      	movs	r3, #128	; 0x80
 800e9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	4a55      	ldr	r2, [pc, #340]	; (800eb4c <UART_SetConfig+0x908>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	f040 80f8 	bne.w	800ebee <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e9fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ea02:	2b20      	cmp	r3, #32
 800ea04:	dc46      	bgt.n	800ea94 <UART_SetConfig+0x850>
 800ea06:	2b02      	cmp	r3, #2
 800ea08:	db75      	blt.n	800eaf6 <UART_SetConfig+0x8b2>
 800ea0a:	3b02      	subs	r3, #2
 800ea0c:	2b1e      	cmp	r3, #30
 800ea0e:	d872      	bhi.n	800eaf6 <UART_SetConfig+0x8b2>
 800ea10:	a201      	add	r2, pc, #4	; (adr r2, 800ea18 <UART_SetConfig+0x7d4>)
 800ea12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea16:	bf00      	nop
 800ea18:	0800ea9b 	.word	0x0800ea9b
 800ea1c:	0800eaf7 	.word	0x0800eaf7
 800ea20:	0800eaa3 	.word	0x0800eaa3
 800ea24:	0800eaf7 	.word	0x0800eaf7
 800ea28:	0800eaf7 	.word	0x0800eaf7
 800ea2c:	0800eaf7 	.word	0x0800eaf7
 800ea30:	0800eab3 	.word	0x0800eab3
 800ea34:	0800eaf7 	.word	0x0800eaf7
 800ea38:	0800eaf7 	.word	0x0800eaf7
 800ea3c:	0800eaf7 	.word	0x0800eaf7
 800ea40:	0800eaf7 	.word	0x0800eaf7
 800ea44:	0800eaf7 	.word	0x0800eaf7
 800ea48:	0800eaf7 	.word	0x0800eaf7
 800ea4c:	0800eaf7 	.word	0x0800eaf7
 800ea50:	0800eac3 	.word	0x0800eac3
 800ea54:	0800eaf7 	.word	0x0800eaf7
 800ea58:	0800eaf7 	.word	0x0800eaf7
 800ea5c:	0800eaf7 	.word	0x0800eaf7
 800ea60:	0800eaf7 	.word	0x0800eaf7
 800ea64:	0800eaf7 	.word	0x0800eaf7
 800ea68:	0800eaf7 	.word	0x0800eaf7
 800ea6c:	0800eaf7 	.word	0x0800eaf7
 800ea70:	0800eaf7 	.word	0x0800eaf7
 800ea74:	0800eaf7 	.word	0x0800eaf7
 800ea78:	0800eaf7 	.word	0x0800eaf7
 800ea7c:	0800eaf7 	.word	0x0800eaf7
 800ea80:	0800eaf7 	.word	0x0800eaf7
 800ea84:	0800eaf7 	.word	0x0800eaf7
 800ea88:	0800eaf7 	.word	0x0800eaf7
 800ea8c:	0800eaf7 	.word	0x0800eaf7
 800ea90:	0800eae9 	.word	0x0800eae9
 800ea94:	2b40      	cmp	r3, #64	; 0x40
 800ea96:	d02a      	beq.n	800eaee <UART_SetConfig+0x8aa>
 800ea98:	e02d      	b.n	800eaf6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ea9a:	f7fe f8f7 	bl	800cc8c <HAL_RCCEx_GetD3PCLK1Freq>
 800ea9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eaa0:	e02f      	b.n	800eb02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eaa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	f7fe f906 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800eaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eab0:	e027      	b.n	800eb02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eab2:	f107 0318 	add.w	r3, r7, #24
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7fe fa52 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eac0:	e01f      	b.n	800eb02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eac2:	4b21      	ldr	r3, [pc, #132]	; (800eb48 <UART_SetConfig+0x904>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f003 0320 	and.w	r3, r3, #32
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d009      	beq.n	800eae2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eace:	4b1e      	ldr	r3, [pc, #120]	; (800eb48 <UART_SetConfig+0x904>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	08db      	lsrs	r3, r3, #3
 800ead4:	f003 0303 	and.w	r3, r3, #3
 800ead8:	4a1d      	ldr	r2, [pc, #116]	; (800eb50 <UART_SetConfig+0x90c>)
 800eada:	fa22 f303 	lsr.w	r3, r2, r3
 800eade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eae0:	e00f      	b.n	800eb02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800eae2:	4b1b      	ldr	r3, [pc, #108]	; (800eb50 <UART_SetConfig+0x90c>)
 800eae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eae6:	e00c      	b.n	800eb02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eae8:	4b1a      	ldr	r3, [pc, #104]	; (800eb54 <UART_SetConfig+0x910>)
 800eaea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaec:	e009      	b.n	800eb02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eaee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800eaf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaf4:	e005      	b.n	800eb02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eafa:	2301      	movs	r3, #1
 800eafc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eb00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800eb02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	f000 81ee 	beq.w	800eee6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb0e:	4a12      	ldr	r2, [pc, #72]	; (800eb58 <UART_SetConfig+0x914>)
 800eb10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb14:	461a      	mov	r2, r3
 800eb16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb18:	fbb3 f3f2 	udiv	r3, r3, r2
 800eb1c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	685a      	ldr	r2, [r3, #4]
 800eb22:	4613      	mov	r3, r2
 800eb24:	005b      	lsls	r3, r3, #1
 800eb26:	4413      	add	r3, r2
 800eb28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d305      	bcc.n	800eb3a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eb34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d910      	bls.n	800eb5c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb40:	e1d1      	b.n	800eee6 <UART_SetConfig+0xca2>
 800eb42:	bf00      	nop
 800eb44:	40011c00 	.word	0x40011c00
 800eb48:	58024400 	.word	0x58024400
 800eb4c:	58000c00 	.word	0x58000c00
 800eb50:	03d09000 	.word	0x03d09000
 800eb54:	003d0900 	.word	0x003d0900
 800eb58:	08015654 	.word	0x08015654
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eb5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb5e:	2200      	movs	r2, #0
 800eb60:	60bb      	str	r3, [r7, #8]
 800eb62:	60fa      	str	r2, [r7, #12]
 800eb64:	697b      	ldr	r3, [r7, #20]
 800eb66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb68:	4ac0      	ldr	r2, [pc, #768]	; (800ee6c <UART_SetConfig+0xc28>)
 800eb6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb6e:	b29b      	uxth	r3, r3
 800eb70:	2200      	movs	r2, #0
 800eb72:	603b      	str	r3, [r7, #0]
 800eb74:	607a      	str	r2, [r7, #4]
 800eb76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800eb7e:	f7f1 fddb 	bl	8000738 <__aeabi_uldivmod>
 800eb82:	4602      	mov	r2, r0
 800eb84:	460b      	mov	r3, r1
 800eb86:	4610      	mov	r0, r2
 800eb88:	4619      	mov	r1, r3
 800eb8a:	f04f 0200 	mov.w	r2, #0
 800eb8e:	f04f 0300 	mov.w	r3, #0
 800eb92:	020b      	lsls	r3, r1, #8
 800eb94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800eb98:	0202      	lsls	r2, r0, #8
 800eb9a:	6979      	ldr	r1, [r7, #20]
 800eb9c:	6849      	ldr	r1, [r1, #4]
 800eb9e:	0849      	lsrs	r1, r1, #1
 800eba0:	2000      	movs	r0, #0
 800eba2:	460c      	mov	r4, r1
 800eba4:	4605      	mov	r5, r0
 800eba6:	eb12 0804 	adds.w	r8, r2, r4
 800ebaa:	eb43 0905 	adc.w	r9, r3, r5
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	469a      	mov	sl, r3
 800ebb6:	4693      	mov	fp, r2
 800ebb8:	4652      	mov	r2, sl
 800ebba:	465b      	mov	r3, fp
 800ebbc:	4640      	mov	r0, r8
 800ebbe:	4649      	mov	r1, r9
 800ebc0:	f7f1 fdba 	bl	8000738 <__aeabi_uldivmod>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	460b      	mov	r3, r1
 800ebc8:	4613      	mov	r3, r2
 800ebca:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ebcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ebd2:	d308      	bcc.n	800ebe6 <UART_SetConfig+0x9a2>
 800ebd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ebda:	d204      	bcs.n	800ebe6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800ebdc:	697b      	ldr	r3, [r7, #20]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ebe2:	60da      	str	r2, [r3, #12]
 800ebe4:	e17f      	b.n	800eee6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800ebe6:	2301      	movs	r3, #1
 800ebe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ebec:	e17b      	b.n	800eee6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	69db      	ldr	r3, [r3, #28]
 800ebf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebf6:	f040 80bd 	bne.w	800ed74 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800ebfa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ebfe:	2b20      	cmp	r3, #32
 800ec00:	dc48      	bgt.n	800ec94 <UART_SetConfig+0xa50>
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	db7b      	blt.n	800ecfe <UART_SetConfig+0xaba>
 800ec06:	2b20      	cmp	r3, #32
 800ec08:	d879      	bhi.n	800ecfe <UART_SetConfig+0xaba>
 800ec0a:	a201      	add	r2, pc, #4	; (adr r2, 800ec10 <UART_SetConfig+0x9cc>)
 800ec0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec10:	0800ec9b 	.word	0x0800ec9b
 800ec14:	0800eca3 	.word	0x0800eca3
 800ec18:	0800ecff 	.word	0x0800ecff
 800ec1c:	0800ecff 	.word	0x0800ecff
 800ec20:	0800ecab 	.word	0x0800ecab
 800ec24:	0800ecff 	.word	0x0800ecff
 800ec28:	0800ecff 	.word	0x0800ecff
 800ec2c:	0800ecff 	.word	0x0800ecff
 800ec30:	0800ecbb 	.word	0x0800ecbb
 800ec34:	0800ecff 	.word	0x0800ecff
 800ec38:	0800ecff 	.word	0x0800ecff
 800ec3c:	0800ecff 	.word	0x0800ecff
 800ec40:	0800ecff 	.word	0x0800ecff
 800ec44:	0800ecff 	.word	0x0800ecff
 800ec48:	0800ecff 	.word	0x0800ecff
 800ec4c:	0800ecff 	.word	0x0800ecff
 800ec50:	0800eccb 	.word	0x0800eccb
 800ec54:	0800ecff 	.word	0x0800ecff
 800ec58:	0800ecff 	.word	0x0800ecff
 800ec5c:	0800ecff 	.word	0x0800ecff
 800ec60:	0800ecff 	.word	0x0800ecff
 800ec64:	0800ecff 	.word	0x0800ecff
 800ec68:	0800ecff 	.word	0x0800ecff
 800ec6c:	0800ecff 	.word	0x0800ecff
 800ec70:	0800ecff 	.word	0x0800ecff
 800ec74:	0800ecff 	.word	0x0800ecff
 800ec78:	0800ecff 	.word	0x0800ecff
 800ec7c:	0800ecff 	.word	0x0800ecff
 800ec80:	0800ecff 	.word	0x0800ecff
 800ec84:	0800ecff 	.word	0x0800ecff
 800ec88:	0800ecff 	.word	0x0800ecff
 800ec8c:	0800ecff 	.word	0x0800ecff
 800ec90:	0800ecf1 	.word	0x0800ecf1
 800ec94:	2b40      	cmp	r3, #64	; 0x40
 800ec96:	d02e      	beq.n	800ecf6 <UART_SetConfig+0xab2>
 800ec98:	e031      	b.n	800ecfe <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ec9a:	f7fc f959 	bl	800af50 <HAL_RCC_GetPCLK1Freq>
 800ec9e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eca0:	e033      	b.n	800ed0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800eca2:	f7fc f96b 	bl	800af7c <HAL_RCC_GetPCLK2Freq>
 800eca6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800eca8:	e02f      	b.n	800ed0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ecaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ecae:	4618      	mov	r0, r3
 800ecb0:	f7fe f802 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ecb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecb8:	e027      	b.n	800ed0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ecba:	f107 0318 	add.w	r3, r7, #24
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f7fe f94e 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ecc4:	69fb      	ldr	r3, [r7, #28]
 800ecc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecc8:	e01f      	b.n	800ed0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ecca:	4b69      	ldr	r3, [pc, #420]	; (800ee70 <UART_SetConfig+0xc2c>)
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f003 0320 	and.w	r3, r3, #32
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d009      	beq.n	800ecea <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ecd6:	4b66      	ldr	r3, [pc, #408]	; (800ee70 <UART_SetConfig+0xc2c>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	08db      	lsrs	r3, r3, #3
 800ecdc:	f003 0303 	and.w	r3, r3, #3
 800ece0:	4a64      	ldr	r2, [pc, #400]	; (800ee74 <UART_SetConfig+0xc30>)
 800ece2:	fa22 f303 	lsr.w	r3, r2, r3
 800ece6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ece8:	e00f      	b.n	800ed0a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ecea:	4b62      	ldr	r3, [pc, #392]	; (800ee74 <UART_SetConfig+0xc30>)
 800ecec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecee:	e00c      	b.n	800ed0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ecf0:	4b61      	ldr	r3, [pc, #388]	; (800ee78 <UART_SetConfig+0xc34>)
 800ecf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecf4:	e009      	b.n	800ed0a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ecf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ecfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ecfc:	e005      	b.n	800ed0a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ed02:	2301      	movs	r3, #1
 800ed04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ed08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ed0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	f000 80ea 	beq.w	800eee6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed16:	4a55      	ldr	r2, [pc, #340]	; (800ee6c <UART_SetConfig+0xc28>)
 800ed18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ed24:	005a      	lsls	r2, r3, #1
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	685b      	ldr	r3, [r3, #4]
 800ed2a:	085b      	lsrs	r3, r3, #1
 800ed2c:	441a      	add	r2, r3
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed36:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ed38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3a:	2b0f      	cmp	r3, #15
 800ed3c:	d916      	bls.n	800ed6c <UART_SetConfig+0xb28>
 800ed3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ed44:	d212      	bcs.n	800ed6c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ed46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	f023 030f 	bic.w	r3, r3, #15
 800ed4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ed50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed52:	085b      	lsrs	r3, r3, #1
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	f003 0307 	and.w	r3, r3, #7
 800ed5a:	b29a      	uxth	r2, r3
 800ed5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ed5e:	4313      	orrs	r3, r2
 800ed60:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ed62:	697b      	ldr	r3, [r7, #20]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ed68:	60da      	str	r2, [r3, #12]
 800ed6a:	e0bc      	b.n	800eee6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ed6c:	2301      	movs	r3, #1
 800ed6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ed72:	e0b8      	b.n	800eee6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ed74:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ed78:	2b20      	cmp	r3, #32
 800ed7a:	dc4b      	bgt.n	800ee14 <UART_SetConfig+0xbd0>
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f2c0 8087 	blt.w	800ee90 <UART_SetConfig+0xc4c>
 800ed82:	2b20      	cmp	r3, #32
 800ed84:	f200 8084 	bhi.w	800ee90 <UART_SetConfig+0xc4c>
 800ed88:	a201      	add	r2, pc, #4	; (adr r2, 800ed90 <UART_SetConfig+0xb4c>)
 800ed8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed8e:	bf00      	nop
 800ed90:	0800ee1b 	.word	0x0800ee1b
 800ed94:	0800ee23 	.word	0x0800ee23
 800ed98:	0800ee91 	.word	0x0800ee91
 800ed9c:	0800ee91 	.word	0x0800ee91
 800eda0:	0800ee2b 	.word	0x0800ee2b
 800eda4:	0800ee91 	.word	0x0800ee91
 800eda8:	0800ee91 	.word	0x0800ee91
 800edac:	0800ee91 	.word	0x0800ee91
 800edb0:	0800ee3b 	.word	0x0800ee3b
 800edb4:	0800ee91 	.word	0x0800ee91
 800edb8:	0800ee91 	.word	0x0800ee91
 800edbc:	0800ee91 	.word	0x0800ee91
 800edc0:	0800ee91 	.word	0x0800ee91
 800edc4:	0800ee91 	.word	0x0800ee91
 800edc8:	0800ee91 	.word	0x0800ee91
 800edcc:	0800ee91 	.word	0x0800ee91
 800edd0:	0800ee4b 	.word	0x0800ee4b
 800edd4:	0800ee91 	.word	0x0800ee91
 800edd8:	0800ee91 	.word	0x0800ee91
 800eddc:	0800ee91 	.word	0x0800ee91
 800ede0:	0800ee91 	.word	0x0800ee91
 800ede4:	0800ee91 	.word	0x0800ee91
 800ede8:	0800ee91 	.word	0x0800ee91
 800edec:	0800ee91 	.word	0x0800ee91
 800edf0:	0800ee91 	.word	0x0800ee91
 800edf4:	0800ee91 	.word	0x0800ee91
 800edf8:	0800ee91 	.word	0x0800ee91
 800edfc:	0800ee91 	.word	0x0800ee91
 800ee00:	0800ee91 	.word	0x0800ee91
 800ee04:	0800ee91 	.word	0x0800ee91
 800ee08:	0800ee91 	.word	0x0800ee91
 800ee0c:	0800ee91 	.word	0x0800ee91
 800ee10:	0800ee83 	.word	0x0800ee83
 800ee14:	2b40      	cmp	r3, #64	; 0x40
 800ee16:	d037      	beq.n	800ee88 <UART_SetConfig+0xc44>
 800ee18:	e03a      	b.n	800ee90 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ee1a:	f7fc f899 	bl	800af50 <HAL_RCC_GetPCLK1Freq>
 800ee1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ee20:	e03c      	b.n	800ee9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ee22:	f7fc f8ab 	bl	800af7c <HAL_RCC_GetPCLK2Freq>
 800ee26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ee28:	e038      	b.n	800ee9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ee2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ee2e:	4618      	mov	r0, r3
 800ee30:	f7fd ff42 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ee34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee38:	e030      	b.n	800ee9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ee3a:	f107 0318 	add.w	r3, r7, #24
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fe f88e 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ee44:	69fb      	ldr	r3, [r7, #28]
 800ee46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee48:	e028      	b.n	800ee9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ee4a:	4b09      	ldr	r3, [pc, #36]	; (800ee70 <UART_SetConfig+0xc2c>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f003 0320 	and.w	r3, r3, #32
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d012      	beq.n	800ee7c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ee56:	4b06      	ldr	r3, [pc, #24]	; (800ee70 <UART_SetConfig+0xc2c>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	08db      	lsrs	r3, r3, #3
 800ee5c:	f003 0303 	and.w	r3, r3, #3
 800ee60:	4a04      	ldr	r2, [pc, #16]	; (800ee74 <UART_SetConfig+0xc30>)
 800ee62:	fa22 f303 	lsr.w	r3, r2, r3
 800ee66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ee68:	e018      	b.n	800ee9c <UART_SetConfig+0xc58>
 800ee6a:	bf00      	nop
 800ee6c:	08015654 	.word	0x08015654
 800ee70:	58024400 	.word	0x58024400
 800ee74:	03d09000 	.word	0x03d09000
 800ee78:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800ee7c:	4b24      	ldr	r3, [pc, #144]	; (800ef10 <UART_SetConfig+0xccc>)
 800ee7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee80:	e00c      	b.n	800ee9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ee82:	4b24      	ldr	r3, [pc, #144]	; (800ef14 <UART_SetConfig+0xcd0>)
 800ee84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee86:	e009      	b.n	800ee9c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ee88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ee8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ee8e:	e005      	b.n	800ee9c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800ee90:	2300      	movs	r3, #0
 800ee92:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ee94:	2301      	movs	r3, #1
 800ee96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ee9a:	bf00      	nop
    }

    if (pclk != 0U)
 800ee9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d021      	beq.n	800eee6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea6:	4a1c      	ldr	r2, [pc, #112]	; (800ef18 <UART_SetConfig+0xcd4>)
 800eea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eeac:	461a      	mov	r2, r3
 800eeae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb0:	fbb3 f2f2 	udiv	r2, r3, r2
 800eeb4:	697b      	ldr	r3, [r7, #20]
 800eeb6:	685b      	ldr	r3, [r3, #4]
 800eeb8:	085b      	lsrs	r3, r3, #1
 800eeba:	441a      	add	r2, r3
 800eebc:	697b      	ldr	r3, [r7, #20]
 800eebe:	685b      	ldr	r3, [r3, #4]
 800eec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800eec4:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec8:	2b0f      	cmp	r3, #15
 800eeca:	d909      	bls.n	800eee0 <UART_SetConfig+0xc9c>
 800eecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eece:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eed2:	d205      	bcs.n	800eee0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed6:	b29a      	uxth	r2, r3
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	60da      	str	r2, [r3, #12]
 800eede:	e002      	b.n	800eee6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800eee0:	2301      	movs	r3, #1
 800eee2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	2201      	movs	r2, #1
 800eeea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	2201      	movs	r2, #1
 800eef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	2200      	movs	r2, #0
 800eefa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	2200      	movs	r2, #0
 800ef00:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ef02:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3748      	adds	r7, #72	; 0x48
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ef10:	03d09000 	.word	0x03d09000
 800ef14:	003d0900 	.word	0x003d0900
 800ef18:	08015654 	.word	0x08015654

0800ef1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b083      	sub	sp, #12
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef28:	f003 0301 	and.w	r3, r3, #1
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d00a      	beq.n	800ef46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	430a      	orrs	r2, r1
 800ef44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef4a:	f003 0302 	and.w	r3, r3, #2
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00a      	beq.n	800ef68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	430a      	orrs	r2, r1
 800ef66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef6c:	f003 0304 	and.w	r3, r3, #4
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d00a      	beq.n	800ef8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	685b      	ldr	r3, [r3, #4]
 800ef7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	430a      	orrs	r2, r1
 800ef88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef8e:	f003 0308 	and.w	r3, r3, #8
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d00a      	beq.n	800efac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	430a      	orrs	r2, r1
 800efaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efb0:	f003 0310 	and.w	r3, r3, #16
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d00a      	beq.n	800efce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	430a      	orrs	r2, r1
 800efcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efd2:	f003 0320 	and.w	r3, r3, #32
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d00a      	beq.n	800eff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	689b      	ldr	r3, [r3, #8]
 800efe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	430a      	orrs	r2, r1
 800efee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d01a      	beq.n	800f032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	430a      	orrs	r2, r1
 800f010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f01a:	d10a      	bne.n	800f032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	430a      	orrs	r2, r1
 800f030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d00a      	beq.n	800f054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	430a      	orrs	r2, r1
 800f052:	605a      	str	r2, [r3, #4]
  }
}
 800f054:	bf00      	nop
 800f056:	370c      	adds	r7, #12
 800f058:	46bd      	mov	sp, r7
 800f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05e:	4770      	bx	lr

0800f060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b098      	sub	sp, #96	; 0x60
 800f064:	af02      	add	r7, sp, #8
 800f066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	2200      	movs	r2, #0
 800f06c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f070:	f7f4 fcf8 	bl	8003a64 <HAL_GetTick>
 800f074:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f003 0308 	and.w	r3, r3, #8
 800f080:	2b08      	cmp	r3, #8
 800f082:	d12f      	bne.n	800f0e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f08c:	2200      	movs	r2, #0
 800f08e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 f88e 	bl	800f1b4 <UART_WaitOnFlagUntilTimeout>
 800f098:	4603      	mov	r3, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d022      	beq.n	800f0e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a6:	e853 3f00 	ldrex	r3, [r3]
 800f0aa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0b2:	653b      	str	r3, [r7, #80]	; 0x50
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	461a      	mov	r2, r3
 800f0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0bc:	647b      	str	r3, [r7, #68]	; 0x44
 800f0be:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f0c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f0c4:	e841 2300 	strex	r3, r2, [r1]
 800f0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d1e6      	bne.n	800f09e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2220      	movs	r2, #32
 800f0d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2200      	movs	r2, #0
 800f0dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f0e0:	2303      	movs	r3, #3
 800f0e2:	e063      	b.n	800f1ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f003 0304 	and.w	r3, r3, #4
 800f0ee:	2b04      	cmp	r3, #4
 800f0f0:	d149      	bne.n	800f186 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f0f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f000 f857 	bl	800f1b4 <UART_WaitOnFlagUntilTimeout>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d03c      	beq.n	800f186 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	e853 3f00 	ldrex	r3, [r3]
 800f118:	623b      	str	r3, [r7, #32]
   return(result);
 800f11a:	6a3b      	ldr	r3, [r7, #32]
 800f11c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f120:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	461a      	mov	r2, r3
 800f128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f12a:	633b      	str	r3, [r7, #48]	; 0x30
 800f12c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f12e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f132:	e841 2300 	strex	r3, r2, [r1]
 800f136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1e6      	bne.n	800f10c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	3308      	adds	r3, #8
 800f144:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f146:	693b      	ldr	r3, [r7, #16]
 800f148:	e853 3f00 	ldrex	r3, [r3]
 800f14c:	60fb      	str	r3, [r7, #12]
   return(result);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f023 0301 	bic.w	r3, r3, #1
 800f154:	64bb      	str	r3, [r7, #72]	; 0x48
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	3308      	adds	r3, #8
 800f15c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f15e:	61fa      	str	r2, [r7, #28]
 800f160:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f162:	69b9      	ldr	r1, [r7, #24]
 800f164:	69fa      	ldr	r2, [r7, #28]
 800f166:	e841 2300 	strex	r3, r2, [r1]
 800f16a:	617b      	str	r3, [r7, #20]
   return(result);
 800f16c:	697b      	ldr	r3, [r7, #20]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1e5      	bne.n	800f13e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2220      	movs	r2, #32
 800f176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	2200      	movs	r2, #0
 800f17e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f182:	2303      	movs	r3, #3
 800f184:	e012      	b.n	800f1ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	2220      	movs	r2, #32
 800f18a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2220      	movs	r2, #32
 800f192:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	2200      	movs	r2, #0
 800f19a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f1aa:	2300      	movs	r3, #0
}
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	3758      	adds	r7, #88	; 0x58
 800f1b0:	46bd      	mov	sp, r7
 800f1b2:	bd80      	pop	{r7, pc}

0800f1b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	60f8      	str	r0, [r7, #12]
 800f1bc:	60b9      	str	r1, [r7, #8]
 800f1be:	603b      	str	r3, [r7, #0]
 800f1c0:	4613      	mov	r3, r2
 800f1c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f1c4:	e049      	b.n	800f25a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f1c6:	69bb      	ldr	r3, [r7, #24]
 800f1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1cc:	d045      	beq.n	800f25a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1ce:	f7f4 fc49 	bl	8003a64 <HAL_GetTick>
 800f1d2:	4602      	mov	r2, r0
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	1ad3      	subs	r3, r2, r3
 800f1d8:	69ba      	ldr	r2, [r7, #24]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d302      	bcc.n	800f1e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800f1de:	69bb      	ldr	r3, [r7, #24]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d101      	bne.n	800f1e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f1e4:	2303      	movs	r3, #3
 800f1e6:	e048      	b.n	800f27a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f003 0304 	and.w	r3, r3, #4
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d031      	beq.n	800f25a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	69db      	ldr	r3, [r3, #28]
 800f1fc:	f003 0308 	and.w	r3, r3, #8
 800f200:	2b08      	cmp	r3, #8
 800f202:	d110      	bne.n	800f226 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2208      	movs	r2, #8
 800f20a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f000 f95b 	bl	800f4c8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	2208      	movs	r2, #8
 800f216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2200      	movs	r2, #0
 800f21e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800f222:	2301      	movs	r3, #1
 800f224:	e029      	b.n	800f27a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	69db      	ldr	r3, [r3, #28]
 800f22c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f234:	d111      	bne.n	800f25a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f23e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f240:	68f8      	ldr	r0, [r7, #12]
 800f242:	f000 f941 	bl	800f4c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	2220      	movs	r2, #32
 800f24a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	2200      	movs	r2, #0
 800f252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f256:	2303      	movs	r3, #3
 800f258:	e00f      	b.n	800f27a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	69da      	ldr	r2, [r3, #28]
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	4013      	ands	r3, r2
 800f264:	68ba      	ldr	r2, [r7, #8]
 800f266:	429a      	cmp	r2, r3
 800f268:	bf0c      	ite	eq
 800f26a:	2301      	moveq	r3, #1
 800f26c:	2300      	movne	r3, #0
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	461a      	mov	r2, r3
 800f272:	79fb      	ldrb	r3, [r7, #7]
 800f274:	429a      	cmp	r2, r3
 800f276:	d0a6      	beq.n	800f1c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f278:	2300      	movs	r3, #0
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
	...

0800f284 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f284:	b480      	push	{r7}
 800f286:	b0a3      	sub	sp, #140	; 0x8c
 800f288:	af00      	add	r7, sp, #0
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	4613      	mov	r3, r2
 800f290:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	68ba      	ldr	r2, [r7, #8]
 800f296:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	88fa      	ldrh	r2, [r7, #6]
 800f29c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	88fa      	ldrh	r2, [r7, #6]
 800f2a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	689b      	ldr	r3, [r3, #8]
 800f2b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f2b6:	d10e      	bne.n	800f2d6 <UART_Start_Receive_IT+0x52>
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d105      	bne.n	800f2cc <UART_Start_Receive_IT+0x48>
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f2c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f2ca:	e02d      	b.n	800f328 <UART_Start_Receive_IT+0xa4>
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	22ff      	movs	r2, #255	; 0xff
 800f2d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f2d4:	e028      	b.n	800f328 <UART_Start_Receive_IT+0xa4>
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	689b      	ldr	r3, [r3, #8]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d10d      	bne.n	800f2fa <UART_Start_Receive_IT+0x76>
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d104      	bne.n	800f2f0 <UART_Start_Receive_IT+0x6c>
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	22ff      	movs	r2, #255	; 0xff
 800f2ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f2ee:	e01b      	b.n	800f328 <UART_Start_Receive_IT+0xa4>
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	227f      	movs	r2, #127	; 0x7f
 800f2f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f2f8:	e016      	b.n	800f328 <UART_Start_Receive_IT+0xa4>
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f302:	d10d      	bne.n	800f320 <UART_Start_Receive_IT+0x9c>
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	691b      	ldr	r3, [r3, #16]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d104      	bne.n	800f316 <UART_Start_Receive_IT+0x92>
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	227f      	movs	r2, #127	; 0x7f
 800f310:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f314:	e008      	b.n	800f328 <UART_Start_Receive_IT+0xa4>
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	223f      	movs	r2, #63	; 0x3f
 800f31a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800f31e:	e003      	b.n	800f328 <UART_Start_Receive_IT+0xa4>
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2200      	movs	r2, #0
 800f324:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	2222      	movs	r2, #34	; 0x22
 800f334:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	3308      	adds	r3, #8
 800f33e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f342:	e853 3f00 	ldrex	r3, [r3]
 800f346:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800f348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f34a:	f043 0301 	orr.w	r3, r3, #1
 800f34e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	3308      	adds	r3, #8
 800f358:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f35c:	673a      	str	r2, [r7, #112]	; 0x70
 800f35e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f360:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f362:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f364:	e841 2300 	strex	r3, r2, [r1]
 800f368:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800f36a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d1e3      	bne.n	800f338 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f374:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800f378:	d14f      	bne.n	800f41a <UART_Start_Receive_IT+0x196>
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f380:	88fa      	ldrh	r2, [r7, #6]
 800f382:	429a      	cmp	r2, r3
 800f384:	d349      	bcc.n	800f41a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	689b      	ldr	r3, [r3, #8]
 800f38a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f38e:	d107      	bne.n	800f3a0 <UART_Start_Receive_IT+0x11c>
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	691b      	ldr	r3, [r3, #16]
 800f394:	2b00      	cmp	r3, #0
 800f396:	d103      	bne.n	800f3a0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800f398:	68fb      	ldr	r3, [r7, #12]
 800f39a:	4a47      	ldr	r2, [pc, #284]	; (800f4b8 <UART_Start_Receive_IT+0x234>)
 800f39c:	675a      	str	r2, [r3, #116]	; 0x74
 800f39e:	e002      	b.n	800f3a6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	4a46      	ldr	r2, [pc, #280]	; (800f4bc <UART_Start_Receive_IT+0x238>)
 800f3a4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	691b      	ldr	r3, [r3, #16]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d01a      	beq.n	800f3e4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3b6:	e853 3f00 	ldrex	r3, [r3]
 800f3ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f3bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f3c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f3d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3d2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3d8:	e841 2300 	strex	r3, r2, [r1]
 800f3dc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f3de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d1e4      	bne.n	800f3ae <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	3308      	adds	r3, #8
 800f3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ee:	e853 3f00 	ldrex	r3, [r3]
 800f3f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f3fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	3308      	adds	r3, #8
 800f402:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f404:	64ba      	str	r2, [r7, #72]	; 0x48
 800f406:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f408:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f40a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f40c:	e841 2300 	strex	r3, r2, [r1]
 800f410:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f414:	2b00      	cmp	r3, #0
 800f416:	d1e5      	bne.n	800f3e4 <UART_Start_Receive_IT+0x160>
 800f418:	e046      	b.n	800f4a8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f422:	d107      	bne.n	800f434 <UART_Start_Receive_IT+0x1b0>
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d103      	bne.n	800f434 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	4a24      	ldr	r2, [pc, #144]	; (800f4c0 <UART_Start_Receive_IT+0x23c>)
 800f430:	675a      	str	r2, [r3, #116]	; 0x74
 800f432:	e002      	b.n	800f43a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	4a23      	ldr	r2, [pc, #140]	; (800f4c4 <UART_Start_Receive_IT+0x240>)
 800f438:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	691b      	ldr	r3, [r3, #16]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d019      	beq.n	800f476 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f44a:	e853 3f00 	ldrex	r3, [r3]
 800f44e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800f456:	677b      	str	r3, [r7, #116]	; 0x74
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	461a      	mov	r2, r3
 800f45e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f460:	637b      	str	r3, [r7, #52]	; 0x34
 800f462:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f466:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f468:	e841 2300 	strex	r3, r2, [r1]
 800f46c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f470:	2b00      	cmp	r3, #0
 800f472:	d1e6      	bne.n	800f442 <UART_Start_Receive_IT+0x1be>
 800f474:	e018      	b.n	800f4a8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	e853 3f00 	ldrex	r3, [r3]
 800f482:	613b      	str	r3, [r7, #16]
   return(result);
 800f484:	693b      	ldr	r3, [r7, #16]
 800f486:	f043 0320 	orr.w	r3, r3, #32
 800f48a:	67bb      	str	r3, [r7, #120]	; 0x78
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	461a      	mov	r2, r3
 800f492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f494:	623b      	str	r3, [r7, #32]
 800f496:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f498:	69f9      	ldr	r1, [r7, #28]
 800f49a:	6a3a      	ldr	r2, [r7, #32]
 800f49c:	e841 2300 	strex	r3, r2, [r1]
 800f4a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f4a2:	69bb      	ldr	r3, [r7, #24]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d1e6      	bne.n	800f476 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800f4a8:	2300      	movs	r3, #0
}
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	378c      	adds	r7, #140	; 0x8c
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	0800fc65 	.word	0x0800fc65
 800f4bc:	0800f905 	.word	0x0800f905
 800f4c0:	0800f74d 	.word	0x0800f74d
 800f4c4:	0800f595 	.word	0x0800f595

0800f4c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b095      	sub	sp, #84	; 0x54
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4d8:	e853 3f00 	ldrex	r3, [r3]
 800f4dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f4e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	461a      	mov	r2, r3
 800f4ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4ee:	643b      	str	r3, [r7, #64]	; 0x40
 800f4f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f4f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f4f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f4f6:	e841 2300 	strex	r3, r2, [r1]
 800f4fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d1e6      	bne.n	800f4d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	3308      	adds	r3, #8
 800f508:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	e853 3f00 	ldrex	r3, [r3]
 800f510:	61fb      	str	r3, [r7, #28]
   return(result);
 800f512:	69fa      	ldr	r2, [r7, #28]
 800f514:	4b1e      	ldr	r3, [pc, #120]	; (800f590 <UART_EndRxTransfer+0xc8>)
 800f516:	4013      	ands	r3, r2
 800f518:	64bb      	str	r3, [r7, #72]	; 0x48
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	3308      	adds	r3, #8
 800f520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f522:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f524:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f52a:	e841 2300 	strex	r3, r2, [r1]
 800f52e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f532:	2b00      	cmp	r3, #0
 800f534:	d1e5      	bne.n	800f502 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d118      	bne.n	800f570 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	e853 3f00 	ldrex	r3, [r3]
 800f54a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	f023 0310 	bic.w	r3, r3, #16
 800f552:	647b      	str	r3, [r7, #68]	; 0x44
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	461a      	mov	r2, r3
 800f55a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f55c:	61bb      	str	r3, [r7, #24]
 800f55e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f560:	6979      	ldr	r1, [r7, #20]
 800f562:	69ba      	ldr	r2, [r7, #24]
 800f564:	e841 2300 	strex	r3, r2, [r1]
 800f568:	613b      	str	r3, [r7, #16]
   return(result);
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d1e6      	bne.n	800f53e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2220      	movs	r2, #32
 800f574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f584:	bf00      	nop
 800f586:	3754      	adds	r7, #84	; 0x54
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr
 800f590:	effffffe 	.word	0xeffffffe

0800f594 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b09c      	sub	sp, #112	; 0x70
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f5a2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5ac:	2b22      	cmp	r3, #34	; 0x22
 800f5ae:	f040 80be 	bne.w	800f72e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f5bc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f5c0:	b2d9      	uxtb	r1, r3
 800f5c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f5c6:	b2da      	uxtb	r2, r3
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5cc:	400a      	ands	r2, r1
 800f5ce:	b2d2      	uxtb	r2, r2
 800f5d0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5d6:	1c5a      	adds	r2, r3, #1
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5e2:	b29b      	uxth	r3, r3
 800f5e4:	3b01      	subs	r3, #1
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f5f4:	b29b      	uxth	r3, r3
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	f040 80a1 	bne.w	800f73e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f604:	e853 3f00 	ldrex	r3, [r3]
 800f608:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f60a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f60c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f610:	66bb      	str	r3, [r7, #104]	; 0x68
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	461a      	mov	r2, r3
 800f618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f61a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f61c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f61e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f620:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f622:	e841 2300 	strex	r3, r2, [r1]
 800f626:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d1e6      	bne.n	800f5fc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	3308      	adds	r3, #8
 800f634:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f638:	e853 3f00 	ldrex	r3, [r3]
 800f63c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f63e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f640:	f023 0301 	bic.w	r3, r3, #1
 800f644:	667b      	str	r3, [r7, #100]	; 0x64
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	3308      	adds	r3, #8
 800f64c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f64e:	647a      	str	r2, [r7, #68]	; 0x44
 800f650:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f652:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f656:	e841 2300 	strex	r3, r2, [r1]
 800f65a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d1e5      	bne.n	800f62e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2220      	movs	r2, #32
 800f666:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	2200      	movs	r2, #0
 800f66e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	2200      	movs	r2, #0
 800f674:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a33      	ldr	r2, [pc, #204]	; (800f748 <UART_RxISR_8BIT+0x1b4>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d01f      	beq.n	800f6c0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	685b      	ldr	r3, [r3, #4]
 800f686:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d018      	beq.n	800f6c0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f696:	e853 3f00 	ldrex	r3, [r3]
 800f69a:	623b      	str	r3, [r7, #32]
   return(result);
 800f69c:	6a3b      	ldr	r3, [r7, #32]
 800f69e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f6a2:	663b      	str	r3, [r7, #96]	; 0x60
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	461a      	mov	r2, r3
 800f6aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6ac:	633b      	str	r3, [r7, #48]	; 0x30
 800f6ae:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f6b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6b4:	e841 2300 	strex	r3, r2, [r1]
 800f6b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d1e6      	bne.n	800f68e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6c4:	2b01      	cmp	r3, #1
 800f6c6:	d12e      	bne.n	800f726 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	e853 3f00 	ldrex	r3, [r3]
 800f6da:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f023 0310 	bic.w	r3, r3, #16
 800f6e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	461a      	mov	r2, r3
 800f6ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6ec:	61fb      	str	r3, [r7, #28]
 800f6ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6f0:	69b9      	ldr	r1, [r7, #24]
 800f6f2:	69fa      	ldr	r2, [r7, #28]
 800f6f4:	e841 2300 	strex	r3, r2, [r1]
 800f6f8:	617b      	str	r3, [r7, #20]
   return(result);
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d1e6      	bne.n	800f6ce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	69db      	ldr	r3, [r3, #28]
 800f706:	f003 0310 	and.w	r3, r3, #16
 800f70a:	2b10      	cmp	r3, #16
 800f70c:	d103      	bne.n	800f716 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	2210      	movs	r2, #16
 800f714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f71c:	4619      	mov	r1, r3
 800f71e:	6878      	ldr	r0, [r7, #4]
 800f720:	f7fe fd84 	bl	800e22c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f724:	e00b      	b.n	800f73e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7fe fd6c 	bl	800e204 <HAL_UART_RxCpltCallback>
}
 800f72c:	e007      	b.n	800f73e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	699a      	ldr	r2, [r3, #24]
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f042 0208 	orr.w	r2, r2, #8
 800f73c:	619a      	str	r2, [r3, #24]
}
 800f73e:	bf00      	nop
 800f740:	3770      	adds	r7, #112	; 0x70
 800f742:	46bd      	mov	sp, r7
 800f744:	bd80      	pop	{r7, pc}
 800f746:	bf00      	nop
 800f748:	58000c00 	.word	0x58000c00

0800f74c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b09c      	sub	sp, #112	; 0x70
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f75a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f764:	2b22      	cmp	r3, #34	; 0x22
 800f766:	f040 80be 	bne.w	800f8e6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f770:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f778:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800f77a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800f77e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800f782:	4013      	ands	r3, r2
 800f784:	b29a      	uxth	r2, r3
 800f786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f788:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f78e:	1c9a      	adds	r2, r3, #2
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	3b01      	subs	r3, #1
 800f79e:	b29a      	uxth	r2, r3
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f040 80a1 	bne.w	800f8f6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7bc:	e853 3f00 	ldrex	r3, [r3]
 800f7c0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800f7c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f7c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f7c8:	667b      	str	r3, [r7, #100]	; 0x64
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7d2:	657b      	str	r3, [r7, #84]	; 0x54
 800f7d4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f7d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f7da:	e841 2300 	strex	r3, r2, [r1]
 800f7de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d1e6      	bne.n	800f7b4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	3308      	adds	r3, #8
 800f7ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7f0:	e853 3f00 	ldrex	r3, [r3]
 800f7f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f8:	f023 0301 	bic.w	r3, r3, #1
 800f7fc:	663b      	str	r3, [r7, #96]	; 0x60
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	3308      	adds	r3, #8
 800f804:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f806:	643a      	str	r2, [r7, #64]	; 0x40
 800f808:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f80a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f80c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f80e:	e841 2300 	strex	r3, r2, [r1]
 800f812:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f816:	2b00      	cmp	r3, #0
 800f818:	d1e5      	bne.n	800f7e6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2220      	movs	r2, #32
 800f81e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2200      	movs	r2, #0
 800f826:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2200      	movs	r2, #0
 800f82c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	4a33      	ldr	r2, [pc, #204]	; (800f900 <UART_RxISR_16BIT+0x1b4>)
 800f834:	4293      	cmp	r3, r2
 800f836:	d01f      	beq.n	800f878 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f842:	2b00      	cmp	r3, #0
 800f844:	d018      	beq.n	800f878 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f84c:	6a3b      	ldr	r3, [r7, #32]
 800f84e:	e853 3f00 	ldrex	r3, [r3]
 800f852:	61fb      	str	r3, [r7, #28]
   return(result);
 800f854:	69fb      	ldr	r3, [r7, #28]
 800f856:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f85a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	461a      	mov	r2, r3
 800f862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f864:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f866:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f868:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f86a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f86c:	e841 2300 	strex	r3, r2, [r1]
 800f870:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f874:	2b00      	cmp	r3, #0
 800f876:	d1e6      	bne.n	800f846 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d12e      	bne.n	800f8de <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2200      	movs	r2, #0
 800f884:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	e853 3f00 	ldrex	r3, [r3]
 800f892:	60bb      	str	r3, [r7, #8]
   return(result);
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	f023 0310 	bic.w	r3, r3, #16
 800f89a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8a4:	61bb      	str	r3, [r7, #24]
 800f8a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a8:	6979      	ldr	r1, [r7, #20]
 800f8aa:	69ba      	ldr	r2, [r7, #24]
 800f8ac:	e841 2300 	strex	r3, r2, [r1]
 800f8b0:	613b      	str	r3, [r7, #16]
   return(result);
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1e6      	bne.n	800f886 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	69db      	ldr	r3, [r3, #28]
 800f8be:	f003 0310 	and.w	r3, r3, #16
 800f8c2:	2b10      	cmp	r3, #16
 800f8c4:	d103      	bne.n	800f8ce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	2210      	movs	r2, #16
 800f8cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f7fe fca8 	bl	800e22c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800f8dc:	e00b      	b.n	800f8f6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f7fe fc90 	bl	800e204 <HAL_UART_RxCpltCallback>
}
 800f8e4:	e007      	b.n	800f8f6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	699a      	ldr	r2, [r3, #24]
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f042 0208 	orr.w	r2, r2, #8
 800f8f4:	619a      	str	r2, [r3, #24]
}
 800f8f6:	bf00      	nop
 800f8f8:	3770      	adds	r7, #112	; 0x70
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bd80      	pop	{r7, pc}
 800f8fe:	bf00      	nop
 800f900:	58000c00 	.word	0x58000c00

0800f904 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b0ac      	sub	sp, #176	; 0xb0
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f912:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	69db      	ldr	r3, [r3, #28]
 800f91c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	689b      	ldr	r3, [r3, #8]
 800f930:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f93a:	2b22      	cmp	r3, #34	; 0x22
 800f93c:	f040 8180 	bne.w	800fc40 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800f946:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800f94a:	e123      	b.n	800fb94 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f952:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800f956:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800f95a:	b2d9      	uxtb	r1, r3
 800f95c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800f960:	b2da      	uxtb	r2, r3
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f966:	400a      	ands	r2, r1
 800f968:	b2d2      	uxtb	r2, r2
 800f96a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f970:	1c5a      	adds	r2, r3, #1
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	3b01      	subs	r3, #1
 800f980:	b29a      	uxth	r2, r3
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	69db      	ldr	r3, [r3, #28]
 800f98e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800f992:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f996:	f003 0307 	and.w	r3, r3, #7
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d053      	beq.n	800fa46 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f99e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f9a2:	f003 0301 	and.w	r3, r3, #1
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d011      	beq.n	800f9ce <UART_RxISR_8BIT_FIFOEN+0xca>
 800f9aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f9ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d00b      	beq.n	800f9ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	2201      	movs	r2, #1
 800f9bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9c4:	f043 0201 	orr.w	r2, r3, #1
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f9ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f9d2:	f003 0302 	and.w	r3, r3, #2
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d011      	beq.n	800f9fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 800f9da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f9de:	f003 0301 	and.w	r3, r3, #1
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d00b      	beq.n	800f9fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	2202      	movs	r2, #2
 800f9ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f9f4:	f043 0204 	orr.w	r2, r3, #4
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f9fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa02:	f003 0304 	and.w	r3, r3, #4
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d011      	beq.n	800fa2e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800fa0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fa0e:	f003 0301 	and.w	r3, r3, #1
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d00b      	beq.n	800fa2e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	2204      	movs	r2, #4
 800fa1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa24:	f043 0202 	orr.w	r2, r3, #2
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d006      	beq.n	800fa46 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa38:	6878      	ldr	r0, [r7, #4]
 800fa3a:	f7fe fbed 	bl	800e218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2200      	movs	r2, #0
 800fa42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f040 80a0 	bne.w	800fb94 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fa5c:	e853 3f00 	ldrex	r3, [r3]
 800fa60:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800fa62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fa68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	461a      	mov	r2, r3
 800fa72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fa76:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fa78:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800fa7c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fa7e:	e841 2300 	strex	r3, r2, [r1]
 800fa82:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800fa84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d1e4      	bne.n	800fa54 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	3308      	adds	r3, #8
 800fa90:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa94:	e853 3f00 	ldrex	r3, [r3]
 800fa98:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800fa9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fa9c:	4b6e      	ldr	r3, [pc, #440]	; (800fc58 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800fa9e:	4013      	ands	r3, r2
 800faa0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	3308      	adds	r3, #8
 800faaa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800faae:	66ba      	str	r2, [r7, #104]	; 0x68
 800fab0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fab2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800fab4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fab6:	e841 2300 	strex	r3, r2, [r1]
 800faba:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800fabc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d1e3      	bne.n	800fa8a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	2220      	movs	r2, #32
 800fac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	4a60      	ldr	r2, [pc, #384]	; (800fc5c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d021      	beq.n	800fb24 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800faea:	2b00      	cmp	r3, #0
 800faec:	d01a      	beq.n	800fb24 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800faf6:	e853 3f00 	ldrex	r3, [r3]
 800fafa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800fafc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fafe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fb02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fb10:	657b      	str	r3, [r7, #84]	; 0x54
 800fb12:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fb16:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fb18:	e841 2300 	strex	r3, r2, [r1]
 800fb1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fb1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d1e4      	bne.n	800faee <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb28:	2b01      	cmp	r3, #1
 800fb2a:	d130      	bne.n	800fb8e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb3a:	e853 3f00 	ldrex	r3, [r3]
 800fb3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb42:	f023 0310 	bic.w	r3, r3, #16
 800fb46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	461a      	mov	r2, r3
 800fb50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb54:	643b      	str	r3, [r7, #64]	; 0x40
 800fb56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fb5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fb5c:	e841 2300 	strex	r3, r2, [r1]
 800fb60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d1e4      	bne.n	800fb32 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	69db      	ldr	r3, [r3, #28]
 800fb6e:	f003 0310 	and.w	r3, r3, #16
 800fb72:	2b10      	cmp	r3, #16
 800fb74:	d103      	bne.n	800fb7e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	2210      	movs	r2, #16
 800fb7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800fb84:	4619      	mov	r1, r3
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7fe fb50 	bl	800e22c <HAL_UARTEx_RxEventCallback>
 800fb8c:	e002      	b.n	800fb94 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f7fe fb38 	bl	800e204 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fb94:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d006      	beq.n	800fbaa <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800fb9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fba0:	f003 0320 	and.w	r3, r3, #32
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f47f aed1 	bne.w	800f94c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fbb0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800fbb4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d049      	beq.n	800fc50 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fbc2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800fbc6:	429a      	cmp	r2, r3
 800fbc8:	d242      	bcs.n	800fc50 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	3308      	adds	r3, #8
 800fbd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbd2:	6a3b      	ldr	r3, [r7, #32]
 800fbd4:	e853 3f00 	ldrex	r3, [r3]
 800fbd8:	61fb      	str	r3, [r7, #28]
   return(result);
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fbe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	3308      	adds	r3, #8
 800fbea:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fbee:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fbf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fbf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbf6:	e841 2300 	strex	r3, r2, [r1]
 800fbfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d1e3      	bne.n	800fbca <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4a16      	ldr	r2, [pc, #88]	; (800fc60 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800fc06:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	e853 3f00 	ldrex	r3, [r3]
 800fc14:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	f043 0320 	orr.w	r3, r3, #32
 800fc1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	461a      	mov	r2, r3
 800fc26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fc2a:	61bb      	str	r3, [r7, #24]
 800fc2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc2e:	6979      	ldr	r1, [r7, #20]
 800fc30:	69ba      	ldr	r2, [r7, #24]
 800fc32:	e841 2300 	strex	r3, r2, [r1]
 800fc36:	613b      	str	r3, [r7, #16]
   return(result);
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1e4      	bne.n	800fc08 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800fc3e:	e007      	b.n	800fc50 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	699a      	ldr	r2, [r3, #24]
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f042 0208 	orr.w	r2, r2, #8
 800fc4e:	619a      	str	r2, [r3, #24]
}
 800fc50:	bf00      	nop
 800fc52:	37b0      	adds	r7, #176	; 0xb0
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}
 800fc58:	effffffe 	.word	0xeffffffe
 800fc5c:	58000c00 	.word	0x58000c00
 800fc60:	0800f595 	.word	0x0800f595

0800fc64 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b0ae      	sub	sp, #184	; 0xb8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc72:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	69db      	ldr	r3, [r3, #28]
 800fc7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	689b      	ldr	r3, [r3, #8]
 800fc90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc9a:	2b22      	cmp	r3, #34	; 0x22
 800fc9c:	f040 8184 	bne.w	800ffa8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800fca6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fcaa:	e127      	b.n	800fefc <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800fcbe:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800fcc2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800fcc6:	4013      	ands	r3, r2
 800fcc8:	b29a      	uxth	r2, r3
 800fcca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fcce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcd4:	1c9a      	adds	r2, r3, #2
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	3b01      	subs	r3, #1
 800fce4:	b29a      	uxth	r2, r3
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	69db      	ldr	r3, [r3, #28]
 800fcf2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800fcf6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fcfa:	f003 0307 	and.w	r3, r3, #7
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d053      	beq.n	800fdaa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fd02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fd06:	f003 0301 	and.w	r3, r3, #1
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d011      	beq.n	800fd32 <UART_RxISR_16BIT_FIFOEN+0xce>
 800fd0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fd12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00b      	beq.n	800fd32 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd28:	f043 0201 	orr.w	r2, r3, #1
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd32:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fd36:	f003 0302 	and.w	r3, r3, #2
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d011      	beq.n	800fd62 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800fd3e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fd42:	f003 0301 	and.w	r3, r3, #1
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d00b      	beq.n	800fd62 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	2202      	movs	r2, #2
 800fd50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd58:	f043 0204 	orr.w	r2, r3, #4
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fd62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fd66:	f003 0304 	and.w	r3, r3, #4
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d011      	beq.n	800fd92 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800fd6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fd72:	f003 0301 	and.w	r3, r3, #1
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d00b      	beq.n	800fd92 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	2204      	movs	r2, #4
 800fd80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd88:	f043 0202 	orr.w	r2, r3, #2
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d006      	beq.n	800fdaa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f7fe fa3b 	bl	800e218 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2200      	movs	r2, #0
 800fda6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	f040 80a2 	bne.w	800fefc <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fdc0:	e853 3f00 	ldrex	r3, [r3]
 800fdc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fdc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fdc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fdcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fdda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fdde:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fde2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fde6:	e841 2300 	strex	r3, r2, [r1]
 800fdea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fdec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1e2      	bne.n	800fdb8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	3308      	adds	r3, #8
 800fdf8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fdfc:	e853 3f00 	ldrex	r3, [r3]
 800fe00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fe02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe04:	4b6e      	ldr	r3, [pc, #440]	; (800ffc0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800fe06:	4013      	ands	r3, r2
 800fe08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	3308      	adds	r3, #8
 800fe12:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fe16:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fe18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fe1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fe1e:	e841 2300 	strex	r3, r2, [r1]
 800fe22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fe24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1e3      	bne.n	800fdf2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	2220      	movs	r2, #32
 800fe2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2200      	movs	r2, #0
 800fe36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	2200      	movs	r2, #0
 800fe3c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	4a60      	ldr	r2, [pc, #384]	; (800ffc4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800fe44:	4293      	cmp	r3, r2
 800fe46:	d021      	beq.n	800fe8c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d01a      	beq.n	800fe8c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe5e:	e853 3f00 	ldrex	r3, [r3]
 800fe62:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fe64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800fe6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	461a      	mov	r2, r3
 800fe74:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fe78:	65bb      	str	r3, [r7, #88]	; 0x58
 800fe7a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe7c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fe80:	e841 2300 	strex	r3, r2, [r1]
 800fe84:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fe86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d1e4      	bne.n	800fe56 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d130      	bne.n	800fef6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2200      	movs	r2, #0
 800fe98:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	e853 3f00 	ldrex	r3, [r3]
 800fea6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feaa:	f023 0310 	bic.w	r3, r3, #16
 800feae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	461a      	mov	r2, r3
 800feb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800febc:	647b      	str	r3, [r7, #68]	; 0x44
 800febe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fec0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fec4:	e841 2300 	strex	r3, r2, [r1]
 800fec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800feca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d1e4      	bne.n	800fe9a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	69db      	ldr	r3, [r3, #28]
 800fed6:	f003 0310 	and.w	r3, r3, #16
 800feda:	2b10      	cmp	r3, #16
 800fedc:	d103      	bne.n	800fee6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	2210      	movs	r2, #16
 800fee4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800feec:	4619      	mov	r1, r3
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f7fe f99c 	bl	800e22c <HAL_UARTEx_RxEventCallback>
 800fef4:	e002      	b.n	800fefc <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f7fe f984 	bl	800e204 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800fefc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d006      	beq.n	800ff12 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800ff04:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ff08:	f003 0320 	and.w	r3, r3, #32
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	f47f aecd 	bne.w	800fcac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ff18:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800ff1c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d049      	beq.n	800ffb8 <UART_RxISR_16BIT_FIFOEN+0x354>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ff2a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d242      	bcs.n	800ffb8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	3308      	adds	r3, #8
 800ff38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	e853 3f00 	ldrex	r3, [r3]
 800ff40:	623b      	str	r3, [r7, #32]
   return(result);
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ff48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	3308      	adds	r3, #8
 800ff52:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff56:	633a      	str	r2, [r7, #48]	; 0x30
 800ff58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ff5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ff5e:	e841 2300 	strex	r3, r2, [r1]
 800ff62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ff64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d1e3      	bne.n	800ff32 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	4a16      	ldr	r2, [pc, #88]	; (800ffc8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ff6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	e853 3f00 	ldrex	r3, [r3]
 800ff7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f043 0320 	orr.w	r3, r3, #32
 800ff84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	461a      	mov	r2, r3
 800ff8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ff92:	61fb      	str	r3, [r7, #28]
 800ff94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff96:	69b9      	ldr	r1, [r7, #24]
 800ff98:	69fa      	ldr	r2, [r7, #28]
 800ff9a:	e841 2300 	strex	r3, r2, [r1]
 800ff9e:	617b      	str	r3, [r7, #20]
   return(result);
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1e4      	bne.n	800ff70 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ffa6:	e007      	b.n	800ffb8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	699a      	ldr	r2, [r3, #24]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	f042 0208 	orr.w	r2, r2, #8
 800ffb6:	619a      	str	r2, [r3, #24]
}
 800ffb8:	bf00      	nop
 800ffba:	37b8      	adds	r7, #184	; 0xb8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	effffffe 	.word	0xeffffffe
 800ffc4:	58000c00 	.word	0x58000c00
 800ffc8:	0800f74d 	.word	0x0800f74d

0800ffcc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b085      	sub	sp, #20
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	d101      	bne.n	800ffe2 <HAL_UARTEx_DisableFifoMode+0x16>
 800ffde:	2302      	movs	r3, #2
 800ffe0:	e027      	b.n	8010032 <HAL_UARTEx_DisableFifoMode+0x66>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	2224      	movs	r2, #36	; 0x24
 800ffee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f022 0201 	bic.w	r2, r2, #1
 8010008:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010010:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2200      	movs	r2, #0
 8010016:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68fa      	ldr	r2, [r7, #12]
 801001e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2220      	movs	r2, #32
 8010024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	2200      	movs	r2, #0
 801002c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010030:	2300      	movs	r3, #0
}
 8010032:	4618      	mov	r0, r3
 8010034:	3714      	adds	r7, #20
 8010036:	46bd      	mov	sp, r7
 8010038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003c:	4770      	bx	lr

0801003e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b084      	sub	sp, #16
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
 8010046:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801004e:	2b01      	cmp	r3, #1
 8010050:	d101      	bne.n	8010056 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010052:	2302      	movs	r3, #2
 8010054:	e02d      	b.n	80100b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	2201      	movs	r2, #1
 801005a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2224      	movs	r2, #36	; 0x24
 8010062:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	681a      	ldr	r2, [r3, #0]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	f022 0201 	bic.w	r2, r2, #1
 801007c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	683a      	ldr	r2, [r7, #0]
 801008e:	430a      	orrs	r2, r1
 8010090:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010092:	6878      	ldr	r0, [r7, #4]
 8010094:	f000 f850 	bl	8010138 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	68fa      	ldr	r2, [r7, #12]
 801009e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2220      	movs	r2, #32
 80100a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	2200      	movs	r2, #0
 80100ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80100b0:	2300      	movs	r3, #0
}
 80100b2:	4618      	mov	r0, r3
 80100b4:	3710      	adds	r7, #16
 80100b6:	46bd      	mov	sp, r7
 80100b8:	bd80      	pop	{r7, pc}

080100ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80100ba:	b580      	push	{r7, lr}
 80100bc:	b084      	sub	sp, #16
 80100be:	af00      	add	r7, sp, #0
 80100c0:	6078      	str	r0, [r7, #4]
 80100c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d101      	bne.n	80100d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80100ce:	2302      	movs	r3, #2
 80100d0:	e02d      	b.n	801012e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2201      	movs	r2, #1
 80100d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	2224      	movs	r2, #36	; 0x24
 80100de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	681a      	ldr	r2, [r3, #0]
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f022 0201 	bic.w	r2, r2, #1
 80100f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	689b      	ldr	r3, [r3, #8]
 8010100:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	683a      	ldr	r2, [r7, #0]
 801010a:	430a      	orrs	r2, r1
 801010c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f000 f812 	bl	8010138 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	68fa      	ldr	r2, [r7, #12]
 801011a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	2220      	movs	r2, #32
 8010120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	2200      	movs	r2, #0
 8010128:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801012c:	2300      	movs	r3, #0
}
 801012e:	4618      	mov	r0, r3
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
	...

08010138 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010138:	b480      	push	{r7}
 801013a:	b085      	sub	sp, #20
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010144:	2b00      	cmp	r3, #0
 8010146:	d108      	bne.n	801015a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	2201      	movs	r2, #1
 801014c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2201      	movs	r2, #1
 8010154:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010158:	e031      	b.n	80101be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801015a:	2310      	movs	r3, #16
 801015c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801015e:	2310      	movs	r3, #16
 8010160:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	689b      	ldr	r3, [r3, #8]
 8010168:	0e5b      	lsrs	r3, r3, #25
 801016a:	b2db      	uxtb	r3, r3
 801016c:	f003 0307 	and.w	r3, r3, #7
 8010170:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	689b      	ldr	r3, [r3, #8]
 8010178:	0f5b      	lsrs	r3, r3, #29
 801017a:	b2db      	uxtb	r3, r3
 801017c:	f003 0307 	and.w	r3, r3, #7
 8010180:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010182:	7bbb      	ldrb	r3, [r7, #14]
 8010184:	7b3a      	ldrb	r2, [r7, #12]
 8010186:	4911      	ldr	r1, [pc, #68]	; (80101cc <UARTEx_SetNbDataToProcess+0x94>)
 8010188:	5c8a      	ldrb	r2, [r1, r2]
 801018a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801018e:	7b3a      	ldrb	r2, [r7, #12]
 8010190:	490f      	ldr	r1, [pc, #60]	; (80101d0 <UARTEx_SetNbDataToProcess+0x98>)
 8010192:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010194:	fb93 f3f2 	sdiv	r3, r3, r2
 8010198:	b29a      	uxth	r2, r3
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80101a0:	7bfb      	ldrb	r3, [r7, #15]
 80101a2:	7b7a      	ldrb	r2, [r7, #13]
 80101a4:	4909      	ldr	r1, [pc, #36]	; (80101cc <UARTEx_SetNbDataToProcess+0x94>)
 80101a6:	5c8a      	ldrb	r2, [r1, r2]
 80101a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80101ac:	7b7a      	ldrb	r2, [r7, #13]
 80101ae:	4908      	ldr	r1, [pc, #32]	; (80101d0 <UARTEx_SetNbDataToProcess+0x98>)
 80101b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80101b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80101be:	bf00      	nop
 80101c0:	3714      	adds	r7, #20
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr
 80101ca:	bf00      	nop
 80101cc:	0801566c 	.word	0x0801566c
 80101d0:	08015674 	.word	0x08015674

080101d4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80101d4:	b084      	sub	sp, #16
 80101d6:	b480      	push	{r7}
 80101d8:	b085      	sub	sp, #20
 80101da:	af00      	add	r7, sp, #0
 80101dc:	6078      	str	r0, [r7, #4]
 80101de:	f107 001c 	add.w	r0, r7, #28
 80101e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80101e6:	2300      	movs	r3, #0
 80101e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80101ea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80101ec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80101ee:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80101f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80101f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80101f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80101f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80101f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80101fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80101fc:	68fa      	ldr	r2, [r7, #12]
 80101fe:	4313      	orrs	r3, r2
 8010200:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	685a      	ldr	r2, [r3, #4]
 8010206:	4b07      	ldr	r3, [pc, #28]	; (8010224 <SDMMC_Init+0x50>)
 8010208:	4013      	ands	r3, r2
 801020a:	68fa      	ldr	r2, [r7, #12]
 801020c:	431a      	orrs	r2, r3
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3714      	adds	r7, #20
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	b004      	add	sp, #16
 8010220:	4770      	bx	lr
 8010222:	bf00      	nop
 8010224:	ffc02c00 	.word	0xffc02c00

08010228 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010236:	4618      	mov	r0, r3
 8010238:	370c      	adds	r7, #12
 801023a:	46bd      	mov	sp, r7
 801023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010240:	4770      	bx	lr

08010242 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010242:	b480      	push	{r7}
 8010244:	b083      	sub	sp, #12
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	f043 0203 	orr.w	r2, r3, #3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010256:	2300      	movs	r3, #0
}
 8010258:	4618      	mov	r0, r3
 801025a:	370c      	adds	r7, #12
 801025c:	46bd      	mov	sp, r7
 801025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010262:	4770      	bx	lr

08010264 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010264:	b480      	push	{r7}
 8010266:	b083      	sub	sp, #12
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f003 0303 	and.w	r3, r3, #3
}
 8010274:	4618      	mov	r0, r3
 8010276:	370c      	adds	r7, #12
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010280:	b480      	push	{r7}
 8010282:	b085      	sub	sp, #20
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801028a:	2300      	movs	r3, #0
 801028c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801028e:	683b      	ldr	r3, [r7, #0]
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010296:	683b      	ldr	r3, [r7, #0]
 8010298:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801029e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80102a0:	683b      	ldr	r3, [r7, #0]
 80102a2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80102a4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80102aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80102ac:	68fa      	ldr	r2, [r7, #12]
 80102ae:	4313      	orrs	r3, r2
 80102b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	68da      	ldr	r2, [r3, #12]
 80102b6:	4b06      	ldr	r3, [pc, #24]	; (80102d0 <SDMMC_SendCommand+0x50>)
 80102b8:	4013      	ands	r3, r2
 80102ba:	68fa      	ldr	r2, [r7, #12]
 80102bc:	431a      	orrs	r2, r3
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80102c2:	2300      	movs	r3, #0
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3714      	adds	r7, #20
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr
 80102d0:	fffee0c0 	.word	0xfffee0c0

080102d4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80102d4:	b480      	push	{r7}
 80102d6:	b083      	sub	sp, #12
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	691b      	ldr	r3, [r3, #16]
 80102e0:	b2db      	uxtb	r3, r3
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	370c      	adds	r7, #12
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr

080102ee <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80102ee:	b480      	push	{r7}
 80102f0:	b085      	sub	sp, #20
 80102f2:	af00      	add	r7, sp, #0
 80102f4:	6078      	str	r0, [r7, #4]
 80102f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	3314      	adds	r3, #20
 80102fc:	461a      	mov	r2, r3
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	4413      	add	r3, r2
 8010302:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	681b      	ldr	r3, [r3, #0]
}
 8010308:	4618      	mov	r0, r3
 801030a:	3714      	adds	r7, #20
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8010314:	b480      	push	{r7}
 8010316:	b085      	sub	sp, #20
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801031e:	2300      	movs	r3, #0
 8010320:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010322:	683b      	ldr	r3, [r7, #0]
 8010324:	681a      	ldr	r2, [r3, #0]
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	685a      	ldr	r2, [r3, #4]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801033a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010340:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8010346:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010348:	68fa      	ldr	r2, [r7, #12]
 801034a:	4313      	orrs	r3, r2
 801034c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010352:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	431a      	orrs	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801035e:	2300      	movs	r3, #0

}
 8010360:	4618      	mov	r0, r3
 8010362:	3714      	adds	r7, #20
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b088      	sub	sp, #32
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801037a:	2310      	movs	r3, #16
 801037c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801037e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010384:	2300      	movs	r3, #0
 8010386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801038c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801038e:	f107 0308 	add.w	r3, r7, #8
 8010392:	4619      	mov	r1, r3
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7ff ff73 	bl	8010280 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801039a:	f241 3288 	movw	r2, #5000	; 0x1388
 801039e:	2110      	movs	r1, #16
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 f935 	bl	8010610 <SDMMC_GetCmdResp1>
 80103a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103a8:	69fb      	ldr	r3, [r7, #28]
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3720      	adds	r7, #32
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b088      	sub	sp, #32
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
 80103ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80103c0:	2307      	movs	r3, #7
 80103c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80103c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80103ca:	2300      	movs	r3, #0
 80103cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80103ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80103d4:	f107 0308 	add.w	r3, r7, #8
 80103d8:	4619      	mov	r1, r3
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f7ff ff50 	bl	8010280 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80103e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80103e4:	2107      	movs	r1, #7
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f000 f912 	bl	8010610 <SDMMC_GetCmdResp1>
 80103ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ee:	69fb      	ldr	r3, [r7, #28]
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3720      	adds	r7, #32
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b088      	sub	sp, #32
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010400:	2300      	movs	r3, #0
 8010402:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010404:	2300      	movs	r3, #0
 8010406:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010408:	2300      	movs	r3, #0
 801040a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801040c:	2300      	movs	r3, #0
 801040e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010414:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010416:	f107 0308 	add.w	r3, r7, #8
 801041a:	4619      	mov	r1, r3
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7ff ff2f 	bl	8010280 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010422:	6878      	ldr	r0, [r7, #4]
 8010424:	f000 fa70 	bl	8010908 <SDMMC_GetCmdError>
 8010428:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801042a:	69fb      	ldr	r3, [r7, #28]
}
 801042c:	4618      	mov	r0, r3
 801042e:	3720      	adds	r7, #32
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b088      	sub	sp, #32
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801043c:	2300      	movs	r3, #0
 801043e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010440:	2302      	movs	r3, #2
 8010442:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010444:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010448:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801044a:	2300      	movs	r3, #0
 801044c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801044e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010452:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010454:	f107 0308 	add.w	r3, r7, #8
 8010458:	4619      	mov	r1, r3
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7ff ff10 	bl	8010280 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010460:	6878      	ldr	r0, [r7, #4]
 8010462:	f000 f9c7 	bl	80107f4 <SDMMC_GetCmdResp2>
 8010466:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010468:	69fb      	ldr	r3, [r7, #28]
}
 801046a:	4618      	mov	r0, r3
 801046c:	3720      	adds	r7, #32
 801046e:	46bd      	mov	sp, r7
 8010470:	bd80      	pop	{r7, pc}

08010472 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010472:	b580      	push	{r7, lr}
 8010474:	b088      	sub	sp, #32
 8010476:	af00      	add	r7, sp, #0
 8010478:	6078      	str	r0, [r7, #4]
 801047a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010480:	2309      	movs	r3, #9
 8010482:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010484:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010488:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801048a:	2300      	movs	r3, #0
 801048c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801048e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010492:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010494:	f107 0308 	add.w	r3, r7, #8
 8010498:	4619      	mov	r1, r3
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7ff fef0 	bl	8010280 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f000 f9a7 	bl	80107f4 <SDMMC_GetCmdResp2>
 80104a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104a8:	69fb      	ldr	r3, [r7, #28]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3720      	adds	r7, #32
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b088      	sub	sp, #32
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	460b      	mov	r3, r1
 80104bc:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 80104be:	887b      	ldrh	r3, [r7, #2]
 80104c0:	041b      	lsls	r3, r3, #16
 80104c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80104c4:	2303      	movs	r3, #3
 80104c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80104c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80104cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80104ce:	2300      	movs	r3, #0
 80104d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80104d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80104d8:	f107 0308 	add.w	r3, r7, #8
 80104dc:	4619      	mov	r1, r3
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7ff fece 	bl	8010280 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 80104e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80104e8:	2103      	movs	r1, #3
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f000 f890 	bl	8010610 <SDMMC_GetCmdResp1>
 80104f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104f2:	69fb      	ldr	r3, [r7, #28]
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3720      	adds	r7, #32
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b088      	sub	sp, #32
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801050a:	230d      	movs	r3, #13
 801050c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801050e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010512:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010514:	2300      	movs	r3, #0
 8010516:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010518:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801051c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801051e:	f107 0308 	add.w	r3, r7, #8
 8010522:	4619      	mov	r1, r3
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7ff feab 	bl	8010280 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 801052a:	f241 3288 	movw	r2, #5000	; 0x1388
 801052e:	210d      	movs	r1, #13
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f000 f86d 	bl	8010610 <SDMMC_GetCmdResp1>
 8010536:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010538:	69fb      	ldr	r3, [r7, #28]
}
 801053a:	4618      	mov	r0, r3
 801053c:	3720      	adds	r7, #32
 801053e:	46bd      	mov	sp, r7
 8010540:	bd80      	pop	{r7, pc}

08010542 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010542:	b580      	push	{r7, lr}
 8010544:	b088      	sub	sp, #32
 8010546:	af00      	add	r7, sp, #0
 8010548:	6078      	str	r0, [r7, #4]
 801054a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8010550:	2301      	movs	r3, #1
 8010552:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010554:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010558:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801055a:	2300      	movs	r3, #0
 801055c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801055e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010562:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010564:	f107 0308 	add.w	r3, r7, #8
 8010568:	4619      	mov	r1, r3
 801056a:	6878      	ldr	r0, [r7, #4]
 801056c:	f7ff fe88 	bl	8010280 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f000 f989 	bl	8010888 <SDMMC_GetCmdResp3>
 8010576:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010578:	69fb      	ldr	r3, [r7, #28]
}
 801057a:	4618      	mov	r0, r3
 801057c:	3720      	adds	r7, #32
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b088      	sub	sp, #32
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
 801058a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 801058c:	683b      	ldr	r3, [r7, #0]
 801058e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8010590:	2306      	movs	r3, #6
 8010592:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010598:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801059a:	2300      	movs	r3, #0
 801059c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801059e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105a4:	f107 0308 	add.w	r3, r7, #8
 80105a8:	4619      	mov	r1, r3
 80105aa:	6878      	ldr	r0, [r7, #4]
 80105ac:	f7ff fe68 	bl	8010280 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 80105b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80105b4:	2106      	movs	r1, #6
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 f82a 	bl	8010610 <SDMMC_GetCmdResp1>
 80105bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80105be:	69fb      	ldr	r3, [r7, #28]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	3720      	adds	r7, #32
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}

080105c8 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b088      	sub	sp, #32
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80105d6:	2308      	movs	r3, #8
 80105d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80105da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80105e0:	2300      	movs	r3, #0
 80105e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80105e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80105ea:	f107 0308 	add.w	r3, r7, #8
 80105ee:	4619      	mov	r1, r3
 80105f0:	6878      	ldr	r0, [r7, #4]
 80105f2:	f7ff fe45 	bl	8010280 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 80105f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80105fa:	2108      	movs	r1, #8
 80105fc:	6878      	ldr	r0, [r7, #4]
 80105fe:	f000 f807 	bl	8010610 <SDMMC_GetCmdResp1>
 8010602:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010604:	69fb      	ldr	r3, [r7, #28]
}
 8010606:	4618      	mov	r0, r3
 8010608:	3720      	adds	r7, #32
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
	...

08010610 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b088      	sub	sp, #32
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	460b      	mov	r3, r1
 801061a:	607a      	str	r2, [r7, #4]
 801061c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801061e:	4b70      	ldr	r3, [pc, #448]	; (80107e0 <SDMMC_GetCmdResp1+0x1d0>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	4a70      	ldr	r2, [pc, #448]	; (80107e4 <SDMMC_GetCmdResp1+0x1d4>)
 8010624:	fba2 2303 	umull	r2, r3, r2, r3
 8010628:	0a5a      	lsrs	r2, r3, #9
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	fb02 f303 	mul.w	r3, r2, r3
 8010630:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010632:	69fb      	ldr	r3, [r7, #28]
 8010634:	1e5a      	subs	r2, r3, #1
 8010636:	61fa      	str	r2, [r7, #28]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d102      	bne.n	8010642 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801063c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010640:	e0c9      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010646:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010648:	69ba      	ldr	r2, [r7, #24]
 801064a:	4b67      	ldr	r3, [pc, #412]	; (80107e8 <SDMMC_GetCmdResp1+0x1d8>)
 801064c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801064e:	2b00      	cmp	r3, #0
 8010650:	d0ef      	beq.n	8010632 <SDMMC_GetCmdResp1+0x22>
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1ea      	bne.n	8010632 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010660:	f003 0304 	and.w	r3, r3, #4
 8010664:	2b00      	cmp	r3, #0
 8010666:	d004      	beq.n	8010672 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	2204      	movs	r2, #4
 801066c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801066e:	2304      	movs	r3, #4
 8010670:	e0b1      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010676:	f003 0301 	and.w	r3, r3, #1
 801067a:	2b00      	cmp	r3, #0
 801067c:	d004      	beq.n	8010688 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801067e:	68fb      	ldr	r3, [r7, #12]
 8010680:	2201      	movs	r2, #1
 8010682:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010684:	2301      	movs	r3, #1
 8010686:	e0a6      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	4a58      	ldr	r2, [pc, #352]	; (80107ec <SDMMC_GetCmdResp1+0x1dc>)
 801068c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801068e:	68f8      	ldr	r0, [r7, #12]
 8010690:	f7ff fe20 	bl	80102d4 <SDMMC_GetCommandResponse>
 8010694:	4603      	mov	r3, r0
 8010696:	461a      	mov	r2, r3
 8010698:	7afb      	ldrb	r3, [r7, #11]
 801069a:	4293      	cmp	r3, r2
 801069c:	d001      	beq.n	80106a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801069e:	2301      	movs	r3, #1
 80106a0:	e099      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80106a2:	2100      	movs	r1, #0
 80106a4:	68f8      	ldr	r0, [r7, #12]
 80106a6:	f7ff fe22 	bl	80102ee <SDMMC_GetResponse>
 80106aa:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	4b50      	ldr	r3, [pc, #320]	; (80107f0 <SDMMC_GetCmdResp1+0x1e0>)
 80106b0:	4013      	ands	r3, r2
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d101      	bne.n	80106ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80106b6:	2300      	movs	r3, #0
 80106b8:	e08d      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80106ba:	697b      	ldr	r3, [r7, #20]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	da02      	bge.n	80106c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80106c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80106c4:	e087      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d001      	beq.n	80106d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80106d0:	2340      	movs	r3, #64	; 0x40
 80106d2:	e080      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d001      	beq.n	80106e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80106de:	2380      	movs	r3, #128	; 0x80
 80106e0:	e079      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d002      	beq.n	80106f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80106ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80106f0:	e071      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d002      	beq.n	8010702 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80106fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010700:	e069      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010708:	2b00      	cmp	r3, #0
 801070a:	d002      	beq.n	8010712 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801070c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010710:	e061      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010712:	697b      	ldr	r3, [r7, #20]
 8010714:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010718:	2b00      	cmp	r3, #0
 801071a:	d002      	beq.n	8010722 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801071c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010720:	e059      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010728:	2b00      	cmp	r3, #0
 801072a:	d002      	beq.n	8010732 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801072c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010730:	e051      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010738:	2b00      	cmp	r3, #0
 801073a:	d002      	beq.n	8010742 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801073c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010740:	e049      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010748:	2b00      	cmp	r3, #0
 801074a:	d002      	beq.n	8010752 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801074c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010750:	e041      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010758:	2b00      	cmp	r3, #0
 801075a:	d002      	beq.n	8010762 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801075c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010760:	e039      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010768:	2b00      	cmp	r3, #0
 801076a:	d002      	beq.n	8010772 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801076c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010770:	e031      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010778:	2b00      	cmp	r3, #0
 801077a:	d002      	beq.n	8010782 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801077c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010780:	e029      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010788:	2b00      	cmp	r3, #0
 801078a:	d002      	beq.n	8010792 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801078c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010790:	e021      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010798:	2b00      	cmp	r3, #0
 801079a:	d002      	beq.n	80107a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801079c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80107a0:	e019      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d002      	beq.n	80107b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80107ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80107b0:	e011      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80107b2:	697b      	ldr	r3, [r7, #20]
 80107b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d002      	beq.n	80107c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80107bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80107c0:	e009      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80107c2:	697b      	ldr	r3, [r7, #20]
 80107c4:	f003 0308 	and.w	r3, r3, #8
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d002      	beq.n	80107d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80107cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80107d0:	e001      	b.n	80107d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80107d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80107d6:	4618      	mov	r0, r3
 80107d8:	3720      	adds	r7, #32
 80107da:	46bd      	mov	sp, r7
 80107dc:	bd80      	pop	{r7, pc}
 80107de:	bf00      	nop
 80107e0:	24000010 	.word	0x24000010
 80107e4:	10624dd3 	.word	0x10624dd3
 80107e8:	00200045 	.word	0x00200045
 80107ec:	002000c5 	.word	0x002000c5
 80107f0:	fdffe008 	.word	0xfdffe008

080107f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80107f4:	b480      	push	{r7}
 80107f6:	b085      	sub	sp, #20
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80107fc:	4b1f      	ldr	r3, [pc, #124]	; (801087c <SDMMC_GetCmdResp2+0x88>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	4a1f      	ldr	r2, [pc, #124]	; (8010880 <SDMMC_GetCmdResp2+0x8c>)
 8010802:	fba2 2303 	umull	r2, r3, r2, r3
 8010806:	0a5b      	lsrs	r3, r3, #9
 8010808:	f241 3288 	movw	r2, #5000	; 0x1388
 801080c:	fb02 f303 	mul.w	r3, r2, r3
 8010810:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	1e5a      	subs	r2, r3, #1
 8010816:	60fa      	str	r2, [r7, #12]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d102      	bne.n	8010822 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801081c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010820:	e026      	b.n	8010870 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010826:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010828:	68bb      	ldr	r3, [r7, #8]
 801082a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801082e:	2b00      	cmp	r3, #0
 8010830:	d0ef      	beq.n	8010812 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010838:	2b00      	cmp	r3, #0
 801083a:	d1ea      	bne.n	8010812 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010840:	f003 0304 	and.w	r3, r3, #4
 8010844:	2b00      	cmp	r3, #0
 8010846:	d004      	beq.n	8010852 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010848:	687b      	ldr	r3, [r7, #4]
 801084a:	2204      	movs	r2, #4
 801084c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801084e:	2304      	movs	r3, #4
 8010850:	e00e      	b.n	8010870 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010856:	f003 0301 	and.w	r3, r3, #1
 801085a:	2b00      	cmp	r3, #0
 801085c:	d004      	beq.n	8010868 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2201      	movs	r2, #1
 8010862:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010864:	2301      	movs	r3, #1
 8010866:	e003      	b.n	8010870 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	4a06      	ldr	r2, [pc, #24]	; (8010884 <SDMMC_GetCmdResp2+0x90>)
 801086c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3714      	adds	r7, #20
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr
 801087c:	24000010 	.word	0x24000010
 8010880:	10624dd3 	.word	0x10624dd3
 8010884:	002000c5 	.word	0x002000c5

08010888 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8010888:	b480      	push	{r7}
 801088a:	b085      	sub	sp, #20
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010890:	4b1a      	ldr	r3, [pc, #104]	; (80108fc <SDMMC_GetCmdResp3+0x74>)
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	4a1a      	ldr	r2, [pc, #104]	; (8010900 <SDMMC_GetCmdResp3+0x78>)
 8010896:	fba2 2303 	umull	r2, r3, r2, r3
 801089a:	0a5b      	lsrs	r3, r3, #9
 801089c:	f241 3288 	movw	r2, #5000	; 0x1388
 80108a0:	fb02 f303 	mul.w	r3, r2, r3
 80108a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	1e5a      	subs	r2, r3, #1
 80108aa:	60fa      	str	r2, [r7, #12]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d102      	bne.n	80108b6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80108b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80108b4:	e01b      	b.n	80108ee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d0ef      	beq.n	80108a6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d1ea      	bne.n	80108a6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108d4:	f003 0304 	and.w	r3, r3, #4
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d004      	beq.n	80108e6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2204      	movs	r2, #4
 80108e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108e2:	2304      	movs	r3, #4
 80108e4:	e003      	b.n	80108ee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	4a06      	ldr	r2, [pc, #24]	; (8010904 <SDMMC_GetCmdResp3+0x7c>)
 80108ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3714      	adds	r7, #20
 80108f2:	46bd      	mov	sp, r7
 80108f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f8:	4770      	bx	lr
 80108fa:	bf00      	nop
 80108fc:	24000010 	.word	0x24000010
 8010900:	10624dd3 	.word	0x10624dd3
 8010904:	002000c5 	.word	0x002000c5

08010908 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8010908:	b480      	push	{r7}
 801090a:	b085      	sub	sp, #20
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010910:	4b11      	ldr	r3, [pc, #68]	; (8010958 <SDMMC_GetCmdError+0x50>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	4a11      	ldr	r2, [pc, #68]	; (801095c <SDMMC_GetCmdError+0x54>)
 8010916:	fba2 2303 	umull	r2, r3, r2, r3
 801091a:	0a5b      	lsrs	r3, r3, #9
 801091c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010920:	fb02 f303 	mul.w	r3, r2, r3
 8010924:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	1e5a      	subs	r2, r3, #1
 801092a:	60fa      	str	r2, [r7, #12]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d102      	bne.n	8010936 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010934:	e009      	b.n	801094a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801093a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801093e:	2b00      	cmp	r3, #0
 8010940:	d0f1      	beq.n	8010926 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4a06      	ldr	r2, [pc, #24]	; (8010960 <SDMMC_GetCmdError+0x58>)
 8010946:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8010948:	2300      	movs	r3, #0
}
 801094a:	4618      	mov	r0, r3
 801094c:	3714      	adds	r7, #20
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop
 8010958:	24000010 	.word	0x24000010
 801095c:	10624dd3 	.word	0x10624dd3
 8010960:	002000c5 	.word	0x002000c5

08010964 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010964:	b084      	sub	sp, #16
 8010966:	b580      	push	{r7, lr}
 8010968:	b084      	sub	sp, #16
 801096a:	af00      	add	r7, sp, #0
 801096c:	6078      	str	r0, [r7, #4]
 801096e:	f107 001c 	add.w	r0, r7, #28
 8010972:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010978:	2b01      	cmp	r3, #1
 801097a:	d120      	bne.n	80109be <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010980:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	68da      	ldr	r2, [r3, #12]
 801098c:	4b2a      	ldr	r3, [pc, #168]	; (8010a38 <USB_CoreInit+0xd4>)
 801098e:	4013      	ands	r3, r2
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	68db      	ldr	r3, [r3, #12]
 8010998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80109a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	d105      	bne.n	80109b2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	68db      	ldr	r3, [r3, #12]
 80109aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f000 faac 	bl	8010f10 <USB_CoreReset>
 80109b8:	4603      	mov	r3, r0
 80109ba:	73fb      	strb	r3, [r7, #15]
 80109bc:	e01a      	b.n	80109f4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	68db      	ldr	r3, [r3, #12]
 80109c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 faa0 	bl	8010f10 <USB_CoreReset>
 80109d0:	4603      	mov	r3, r0
 80109d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80109d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d106      	bne.n	80109e8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	639a      	str	r2, [r3, #56]	; 0x38
 80109e6:	e005      	b.n	80109f4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80109f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f6:	2b01      	cmp	r3, #1
 80109f8:	d116      	bne.n	8010a28 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80109fe:	b29a      	uxth	r2, r3
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010a08:	4b0c      	ldr	r3, [pc, #48]	; (8010a3c <USB_CoreInit+0xd8>)
 8010a0a:	4313      	orrs	r3, r2
 8010a0c:	687a      	ldr	r2, [r7, #4]
 8010a0e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	689b      	ldr	r3, [r3, #8]
 8010a14:	f043 0206 	orr.w	r2, r3, #6
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	689b      	ldr	r3, [r3, #8]
 8010a20:	f043 0220 	orr.w	r2, r3, #32
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3710      	adds	r7, #16
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010a34:	b004      	add	sp, #16
 8010a36:	4770      	bx	lr
 8010a38:	ffbdffbf 	.word	0xffbdffbf
 8010a3c:	03ee0000 	.word	0x03ee0000

08010a40 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a40:	b480      	push	{r7}
 8010a42:	b083      	sub	sp, #12
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	689b      	ldr	r3, [r3, #8]
 8010a4c:	f023 0201 	bic.w	r2, r3, #1
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010a54:	2300      	movs	r3, #0
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	370c      	adds	r7, #12
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr

08010a62 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010a62:	b580      	push	{r7, lr}
 8010a64:	b084      	sub	sp, #16
 8010a66:	af00      	add	r7, sp, #0
 8010a68:	6078      	str	r0, [r7, #4]
 8010a6a:	460b      	mov	r3, r1
 8010a6c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	68db      	ldr	r3, [r3, #12]
 8010a76:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010a7e:	78fb      	ldrb	r3, [r7, #3]
 8010a80:	2b01      	cmp	r3, #1
 8010a82:	d115      	bne.n	8010ab0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010a90:	2001      	movs	r0, #1
 8010a92:	f7f2 fff3 	bl	8003a7c <HAL_Delay>
      ms++;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 fa29 	bl	8010ef4 <USB_GetMode>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d01e      	beq.n	8010ae6 <USB_SetCurrentMode+0x84>
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	2b31      	cmp	r3, #49	; 0x31
 8010aac:	d9f0      	bls.n	8010a90 <USB_SetCurrentMode+0x2e>
 8010aae:	e01a      	b.n	8010ae6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010ab0:	78fb      	ldrb	r3, [r7, #3]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d115      	bne.n	8010ae2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010ac2:	2001      	movs	r0, #1
 8010ac4:	f7f2 ffda 	bl	8003a7c <HAL_Delay>
      ms++;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	3301      	adds	r3, #1
 8010acc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010ace:	6878      	ldr	r0, [r7, #4]
 8010ad0:	f000 fa10 	bl	8010ef4 <USB_GetMode>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d005      	beq.n	8010ae6 <USB_SetCurrentMode+0x84>
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	2b31      	cmp	r3, #49	; 0x31
 8010ade:	d9f0      	bls.n	8010ac2 <USB_SetCurrentMode+0x60>
 8010ae0:	e001      	b.n	8010ae6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	e005      	b.n	8010af2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2b32      	cmp	r3, #50	; 0x32
 8010aea:	d101      	bne.n	8010af0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010aec:	2301      	movs	r3, #1
 8010aee:	e000      	b.n	8010af2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010af0:	2300      	movs	r3, #0
}
 8010af2:	4618      	mov	r0, r3
 8010af4:	3710      	adds	r7, #16
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}
	...

08010afc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010afc:	b084      	sub	sp, #16
 8010afe:	b580      	push	{r7, lr}
 8010b00:	b086      	sub	sp, #24
 8010b02:	af00      	add	r7, sp, #0
 8010b04:	6078      	str	r0, [r7, #4]
 8010b06:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010b0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010b16:	2300      	movs	r3, #0
 8010b18:	613b      	str	r3, [r7, #16]
 8010b1a:	e009      	b.n	8010b30 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	3340      	adds	r3, #64	; 0x40
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	4413      	add	r3, r2
 8010b26:	2200      	movs	r2, #0
 8010b28:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	613b      	str	r3, [r7, #16]
 8010b30:	693b      	ldr	r3, [r7, #16]
 8010b32:	2b0e      	cmp	r3, #14
 8010b34:	d9f2      	bls.n	8010b1c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d11c      	bne.n	8010b76 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b42:	685b      	ldr	r3, [r3, #4]
 8010b44:	68fa      	ldr	r2, [r7, #12]
 8010b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b4a:	f043 0302 	orr.w	r3, r3, #2
 8010b4e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b54:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	601a      	str	r2, [r3, #0]
 8010b74:	e005      	b.n	8010b82 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b7a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010b88:	461a      	mov	r2, r3
 8010b8a:	2300      	movs	r3, #0
 8010b8c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b94:	4619      	mov	r1, r3
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	680b      	ldr	r3, [r1, #0]
 8010ba0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d10c      	bne.n	8010bc2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d104      	bne.n	8010bb8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010bae:	2100      	movs	r1, #0
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f000 f965 	bl	8010e80 <USB_SetDevSpeed>
 8010bb6:	e008      	b.n	8010bca <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010bb8:	2101      	movs	r1, #1
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f000 f960 	bl	8010e80 <USB_SetDevSpeed>
 8010bc0:	e003      	b.n	8010bca <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010bc2:	2103      	movs	r1, #3
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f000 f95b 	bl	8010e80 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010bca:	2110      	movs	r1, #16
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 f8f3 	bl	8010db8 <USB_FlushTxFifo>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d001      	beq.n	8010bdc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f000 f91f 	bl	8010e20 <USB_FlushRxFifo>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d001      	beq.n	8010bec <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010be8:	2301      	movs	r3, #1
 8010bea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bfe:	461a      	mov	r2, r3
 8010c00:	2300      	movs	r3, #0
 8010c02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	2300      	movs	r3, #0
 8010c0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010c10:	2300      	movs	r3, #0
 8010c12:	613b      	str	r3, [r7, #16]
 8010c14:	e043      	b.n	8010c9e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010c16:	693b      	ldr	r3, [r7, #16]
 8010c18:	015a      	lsls	r2, r3, #5
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	4413      	add	r3, r2
 8010c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010c28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010c2c:	d118      	bne.n	8010c60 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010c2e:	693b      	ldr	r3, [r7, #16]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d10a      	bne.n	8010c4a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	015a      	lsls	r2, r3, #5
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	4413      	add	r3, r2
 8010c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c40:	461a      	mov	r2, r3
 8010c42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010c46:	6013      	str	r3, [r2, #0]
 8010c48:	e013      	b.n	8010c72 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	015a      	lsls	r2, r3, #5
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	4413      	add	r3, r2
 8010c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c56:	461a      	mov	r2, r3
 8010c58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010c5c:	6013      	str	r3, [r2, #0]
 8010c5e:	e008      	b.n	8010c72 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	015a      	lsls	r2, r3, #5
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	4413      	add	r3, r2
 8010c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	2300      	movs	r3, #0
 8010c70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	015a      	lsls	r2, r3, #5
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	4413      	add	r3, r2
 8010c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c7e:	461a      	mov	r2, r3
 8010c80:	2300      	movs	r3, #0
 8010c82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	015a      	lsls	r2, r3, #5
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	4413      	add	r3, r2
 8010c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c90:	461a      	mov	r2, r3
 8010c92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010c96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	3301      	adds	r3, #1
 8010c9c:	613b      	str	r3, [r7, #16]
 8010c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca0:	693a      	ldr	r2, [r7, #16]
 8010ca2:	429a      	cmp	r2, r3
 8010ca4:	d3b7      	bcc.n	8010c16 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	613b      	str	r3, [r7, #16]
 8010caa:	e043      	b.n	8010d34 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	015a      	lsls	r2, r3, #5
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	4413      	add	r3, r2
 8010cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010cc2:	d118      	bne.n	8010cf6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010cc4:	693b      	ldr	r3, [r7, #16]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d10a      	bne.n	8010ce0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	015a      	lsls	r2, r3, #5
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	4413      	add	r3, r2
 8010cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cd6:	461a      	mov	r2, r3
 8010cd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010cdc:	6013      	str	r3, [r2, #0]
 8010cde:	e013      	b.n	8010d08 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010ce0:	693b      	ldr	r3, [r7, #16]
 8010ce2:	015a      	lsls	r2, r3, #5
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	4413      	add	r3, r2
 8010ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cec:	461a      	mov	r2, r3
 8010cee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010cf2:	6013      	str	r3, [r2, #0]
 8010cf4:	e008      	b.n	8010d08 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010cf6:	693b      	ldr	r3, [r7, #16]
 8010cf8:	015a      	lsls	r2, r3, #5
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	4413      	add	r3, r2
 8010cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d02:	461a      	mov	r2, r3
 8010d04:	2300      	movs	r3, #0
 8010d06:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010d08:	693b      	ldr	r3, [r7, #16]
 8010d0a:	015a      	lsls	r2, r3, #5
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	4413      	add	r3, r2
 8010d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d14:	461a      	mov	r2, r3
 8010d16:	2300      	movs	r3, #0
 8010d18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	015a      	lsls	r2, r3, #5
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	4413      	add	r3, r2
 8010d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d26:	461a      	mov	r2, r3
 8010d28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010d2c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d2e:	693b      	ldr	r3, [r7, #16]
 8010d30:	3301      	adds	r3, #1
 8010d32:	613b      	str	r3, [r7, #16]
 8010d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d36:	693a      	ldr	r2, [r7, #16]
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d3b7      	bcc.n	8010cac <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d42:	691b      	ldr	r3, [r3, #16]
 8010d44:	68fa      	ldr	r2, [r7, #12]
 8010d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010d4e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2200      	movs	r2, #0
 8010d54:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010d5c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d105      	bne.n	8010d70 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	699b      	ldr	r3, [r3, #24]
 8010d68:	f043 0210 	orr.w	r2, r3, #16
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	699a      	ldr	r2, [r3, #24]
 8010d74:	4b0e      	ldr	r3, [pc, #56]	; (8010db0 <USB_DevInit+0x2b4>)
 8010d76:	4313      	orrs	r3, r2
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d005      	beq.n	8010d8e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	699b      	ldr	r3, [r3, #24]
 8010d86:	f043 0208 	orr.w	r2, r3, #8
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d105      	bne.n	8010da0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	699a      	ldr	r2, [r3, #24]
 8010d98:	4b06      	ldr	r3, [pc, #24]	; (8010db4 <USB_DevInit+0x2b8>)
 8010d9a:	4313      	orrs	r3, r2
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3718      	adds	r7, #24
 8010da6:	46bd      	mov	sp, r7
 8010da8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010dac:	b004      	add	sp, #16
 8010dae:	4770      	bx	lr
 8010db0:	803c3800 	.word	0x803c3800
 8010db4:	40000004 	.word	0x40000004

08010db8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b085      	sub	sp, #20
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	3301      	adds	r3, #1
 8010dca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	4a13      	ldr	r2, [pc, #76]	; (8010e1c <USB_FlushTxFifo+0x64>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d901      	bls.n	8010dd8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010dd4:	2303      	movs	r3, #3
 8010dd6:	e01b      	b.n	8010e10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	691b      	ldr	r3, [r3, #16]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	daf2      	bge.n	8010dc6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010de0:	2300      	movs	r3, #0
 8010de2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	019b      	lsls	r3, r3, #6
 8010de8:	f043 0220 	orr.w	r2, r3, #32
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	3301      	adds	r3, #1
 8010df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	4a08      	ldr	r2, [pc, #32]	; (8010e1c <USB_FlushTxFifo+0x64>)
 8010dfa:	4293      	cmp	r3, r2
 8010dfc:	d901      	bls.n	8010e02 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010dfe:	2303      	movs	r3, #3
 8010e00:	e006      	b.n	8010e10 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	691b      	ldr	r3, [r3, #16]
 8010e06:	f003 0320 	and.w	r3, r3, #32
 8010e0a:	2b20      	cmp	r3, #32
 8010e0c:	d0f0      	beq.n	8010df0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010e0e:	2300      	movs	r3, #0
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3714      	adds	r7, #20
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr
 8010e1c:	00030d40 	.word	0x00030d40

08010e20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010e20:	b480      	push	{r7}
 8010e22:	b085      	sub	sp, #20
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	4a11      	ldr	r2, [pc, #68]	; (8010e7c <USB_FlushRxFifo+0x5c>)
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d901      	bls.n	8010e3e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010e3a:	2303      	movs	r3, #3
 8010e3c:	e018      	b.n	8010e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	691b      	ldr	r3, [r3, #16]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	daf2      	bge.n	8010e2c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010e46:	2300      	movs	r3, #0
 8010e48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	2210      	movs	r2, #16
 8010e4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	3301      	adds	r3, #1
 8010e54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	4a08      	ldr	r2, [pc, #32]	; (8010e7c <USB_FlushRxFifo+0x5c>)
 8010e5a:	4293      	cmp	r3, r2
 8010e5c:	d901      	bls.n	8010e62 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010e5e:	2303      	movs	r3, #3
 8010e60:	e006      	b.n	8010e70 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	691b      	ldr	r3, [r3, #16]
 8010e66:	f003 0310 	and.w	r3, r3, #16
 8010e6a:	2b10      	cmp	r3, #16
 8010e6c:	d0f0      	beq.n	8010e50 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010e6e:	2300      	movs	r3, #0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3714      	adds	r7, #20
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr
 8010e7c:	00030d40 	.word	0x00030d40

08010e80 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010e80:	b480      	push	{r7}
 8010e82:	b085      	sub	sp, #20
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	460b      	mov	r3, r1
 8010e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	78fb      	ldrb	r3, [r7, #3]
 8010e9a:	68f9      	ldr	r1, [r7, #12]
 8010e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010ea0:	4313      	orrs	r3, r2
 8010ea2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010ea4:	2300      	movs	r3, #0
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3714      	adds	r7, #20
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr

08010eb2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010eb2:	b480      	push	{r7}
 8010eb4:	b085      	sub	sp, #20
 8010eb6:	af00      	add	r7, sp, #0
 8010eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	68fa      	ldr	r2, [r7, #12]
 8010ec8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ecc:	f023 0303 	bic.w	r3, r3, #3
 8010ed0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ed8:	685b      	ldr	r3, [r3, #4]
 8010eda:	68fa      	ldr	r2, [r7, #12]
 8010edc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ee0:	f043 0302 	orr.w	r3, r3, #2
 8010ee4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010ee6:	2300      	movs	r3, #0
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3714      	adds	r7, #20
 8010eec:	46bd      	mov	sp, r7
 8010eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef2:	4770      	bx	lr

08010ef4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	695b      	ldr	r3, [r3, #20]
 8010f00:	f003 0301 	and.w	r3, r3, #1
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	370c      	adds	r7, #12
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr

08010f10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b085      	sub	sp, #20
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	4a13      	ldr	r2, [pc, #76]	; (8010f74 <USB_CoreReset+0x64>)
 8010f26:	4293      	cmp	r3, r2
 8010f28:	d901      	bls.n	8010f2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010f2a:	2303      	movs	r3, #3
 8010f2c:	e01b      	b.n	8010f66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	691b      	ldr	r3, [r3, #16]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	daf2      	bge.n	8010f1c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010f36:	2300      	movs	r3, #0
 8010f38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	691b      	ldr	r3, [r3, #16]
 8010f3e:	f043 0201 	orr.w	r2, r3, #1
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	3301      	adds	r3, #1
 8010f4a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	4a09      	ldr	r2, [pc, #36]	; (8010f74 <USB_CoreReset+0x64>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	d901      	bls.n	8010f58 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010f54:	2303      	movs	r3, #3
 8010f56:	e006      	b.n	8010f66 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	691b      	ldr	r3, [r3, #16]
 8010f5c:	f003 0301 	and.w	r3, r3, #1
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d0f0      	beq.n	8010f46 <USB_CoreReset+0x36>

  return HAL_OK;
 8010f64:	2300      	movs	r3, #0
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3714      	adds	r7, #20
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	00030d40 	.word	0x00030d40

08010f78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010f7c:	4904      	ldr	r1, [pc, #16]	; (8010f90 <MX_FATFS_Init+0x18>)
 8010f7e:	4805      	ldr	r0, [pc, #20]	; (8010f94 <MX_FATFS_Init+0x1c>)
 8010f80:	f001 fb28 	bl	80125d4 <FATFS_LinkDriver>
 8010f84:	4603      	mov	r3, r0
 8010f86:	461a      	mov	r2, r3
 8010f88:	4b03      	ldr	r3, [pc, #12]	; (8010f98 <MX_FATFS_Init+0x20>)
 8010f8a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010f8c:	bf00      	nop
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	240011d0 	.word	0x240011d0
 8010f94:	24000020 	.word	0x24000020
 8010f98:	240011cc 	.word	0x240011cc

08010f9c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b083      	sub	sp, #12
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8010fa6:	4b06      	ldr	r3, [pc, #24]	; (8010fc0 <USER_initialize+0x24>)
 8010fa8:	2201      	movs	r2, #1
 8010faa:	701a      	strb	r2, [r3, #0]
    return Stat;
 8010fac:	4b04      	ldr	r3, [pc, #16]	; (8010fc0 <USER_initialize+0x24>)
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	370c      	adds	r7, #12
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr
 8010fbe:	bf00      	nop
 8010fc0:	2400001d 	.word	0x2400001d

08010fc4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b083      	sub	sp, #12
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	4603      	mov	r3, r0
 8010fcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8010fce:	4b06      	ldr	r3, [pc, #24]	; (8010fe8 <USER_status+0x24>)
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	701a      	strb	r2, [r3, #0]
    return Stat;
 8010fd4:	4b04      	ldr	r3, [pc, #16]	; (8010fe8 <USER_status+0x24>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	370c      	adds	r7, #12
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr
 8010fe6:	bf00      	nop
 8010fe8:	2400001d 	.word	0x2400001d

08010fec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b085      	sub	sp, #20
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	60b9      	str	r1, [r7, #8]
 8010ff4:	607a      	str	r2, [r7, #4]
 8010ff6:	603b      	str	r3, [r7, #0]
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8010ffc:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8010ffe:	4618      	mov	r0, r3
 8011000:	3714      	adds	r7, #20
 8011002:	46bd      	mov	sp, r7
 8011004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011008:	4770      	bx	lr

0801100a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 801100a:	b480      	push	{r7}
 801100c:	b085      	sub	sp, #20
 801100e:	af00      	add	r7, sp, #0
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	607a      	str	r2, [r7, #4]
 8011014:	603b      	str	r3, [r7, #0]
 8011016:	4603      	mov	r3, r0
 8011018:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 801101a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 801101c:	4618      	mov	r0, r3
 801101e:	3714      	adds	r7, #20
 8011020:	46bd      	mov	sp, r7
 8011022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011026:	4770      	bx	lr

08011028 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8011028:	b480      	push	{r7}
 801102a:	b085      	sub	sp, #20
 801102c:	af00      	add	r7, sp, #0
 801102e:	4603      	mov	r3, r0
 8011030:	603a      	str	r2, [r7, #0]
 8011032:	71fb      	strb	r3, [r7, #7]
 8011034:	460b      	mov	r3, r1
 8011036:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8011038:	2301      	movs	r3, #1
 801103a:	73fb      	strb	r3, [r7, #15]
    return res;
 801103c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 801103e:	4618      	mov	r0, r3
 8011040:	3714      	adds	r7, #20
 8011042:	46bd      	mov	sp, r7
 8011044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011048:	4770      	bx	lr
	...

0801104c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b084      	sub	sp, #16
 8011050:	af00      	add	r7, sp, #0
 8011052:	4603      	mov	r3, r0
 8011054:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011056:	79fb      	ldrb	r3, [r7, #7]
 8011058:	4a08      	ldr	r2, [pc, #32]	; (801107c <disk_status+0x30>)
 801105a:	009b      	lsls	r3, r3, #2
 801105c:	4413      	add	r3, r2
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	685b      	ldr	r3, [r3, #4]
 8011062:	79fa      	ldrb	r2, [r7, #7]
 8011064:	4905      	ldr	r1, [pc, #20]	; (801107c <disk_status+0x30>)
 8011066:	440a      	add	r2, r1
 8011068:	7a12      	ldrb	r2, [r2, #8]
 801106a:	4610      	mov	r0, r2
 801106c:	4798      	blx	r3
 801106e:	4603      	mov	r3, r0
 8011070:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011072:	7bfb      	ldrb	r3, [r7, #15]
}
 8011074:	4618      	mov	r0, r3
 8011076:	3710      	adds	r7, #16
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	240011fc 	.word	0x240011fc

08011080 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b084      	sub	sp, #16
 8011084:	af00      	add	r7, sp, #0
 8011086:	4603      	mov	r3, r0
 8011088:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801108a:	2300      	movs	r3, #0
 801108c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801108e:	79fb      	ldrb	r3, [r7, #7]
 8011090:	4a0d      	ldr	r2, [pc, #52]	; (80110c8 <disk_initialize+0x48>)
 8011092:	5cd3      	ldrb	r3, [r2, r3]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d111      	bne.n	80110bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011098:	79fb      	ldrb	r3, [r7, #7]
 801109a:	4a0b      	ldr	r2, [pc, #44]	; (80110c8 <disk_initialize+0x48>)
 801109c:	2101      	movs	r1, #1
 801109e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80110a0:	79fb      	ldrb	r3, [r7, #7]
 80110a2:	4a09      	ldr	r2, [pc, #36]	; (80110c8 <disk_initialize+0x48>)
 80110a4:	009b      	lsls	r3, r3, #2
 80110a6:	4413      	add	r3, r2
 80110a8:	685b      	ldr	r3, [r3, #4]
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	79fa      	ldrb	r2, [r7, #7]
 80110ae:	4906      	ldr	r1, [pc, #24]	; (80110c8 <disk_initialize+0x48>)
 80110b0:	440a      	add	r2, r1
 80110b2:	7a12      	ldrb	r2, [r2, #8]
 80110b4:	4610      	mov	r0, r2
 80110b6:	4798      	blx	r3
 80110b8:	4603      	mov	r3, r0
 80110ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80110bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3710      	adds	r7, #16
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	240011fc 	.word	0x240011fc

080110cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80110cc:	b590      	push	{r4, r7, lr}
 80110ce:	b087      	sub	sp, #28
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60b9      	str	r1, [r7, #8]
 80110d4:	607a      	str	r2, [r7, #4]
 80110d6:	603b      	str	r3, [r7, #0]
 80110d8:	4603      	mov	r3, r0
 80110da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80110dc:	7bfb      	ldrb	r3, [r7, #15]
 80110de:	4a0a      	ldr	r2, [pc, #40]	; (8011108 <disk_read+0x3c>)
 80110e0:	009b      	lsls	r3, r3, #2
 80110e2:	4413      	add	r3, r2
 80110e4:	685b      	ldr	r3, [r3, #4]
 80110e6:	689c      	ldr	r4, [r3, #8]
 80110e8:	7bfb      	ldrb	r3, [r7, #15]
 80110ea:	4a07      	ldr	r2, [pc, #28]	; (8011108 <disk_read+0x3c>)
 80110ec:	4413      	add	r3, r2
 80110ee:	7a18      	ldrb	r0, [r3, #8]
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	687a      	ldr	r2, [r7, #4]
 80110f4:	68b9      	ldr	r1, [r7, #8]
 80110f6:	47a0      	blx	r4
 80110f8:	4603      	mov	r3, r0
 80110fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80110fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80110fe:	4618      	mov	r0, r3
 8011100:	371c      	adds	r7, #28
 8011102:	46bd      	mov	sp, r7
 8011104:	bd90      	pop	{r4, r7, pc}
 8011106:	bf00      	nop
 8011108:	240011fc 	.word	0x240011fc

0801110c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801110c:	b590      	push	{r4, r7, lr}
 801110e:	b087      	sub	sp, #28
 8011110:	af00      	add	r7, sp, #0
 8011112:	60b9      	str	r1, [r7, #8]
 8011114:	607a      	str	r2, [r7, #4]
 8011116:	603b      	str	r3, [r7, #0]
 8011118:	4603      	mov	r3, r0
 801111a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801111c:	7bfb      	ldrb	r3, [r7, #15]
 801111e:	4a0a      	ldr	r2, [pc, #40]	; (8011148 <disk_write+0x3c>)
 8011120:	009b      	lsls	r3, r3, #2
 8011122:	4413      	add	r3, r2
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	68dc      	ldr	r4, [r3, #12]
 8011128:	7bfb      	ldrb	r3, [r7, #15]
 801112a:	4a07      	ldr	r2, [pc, #28]	; (8011148 <disk_write+0x3c>)
 801112c:	4413      	add	r3, r2
 801112e:	7a18      	ldrb	r0, [r3, #8]
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	687a      	ldr	r2, [r7, #4]
 8011134:	68b9      	ldr	r1, [r7, #8]
 8011136:	47a0      	blx	r4
 8011138:	4603      	mov	r3, r0
 801113a:	75fb      	strb	r3, [r7, #23]
  return res;
 801113c:	7dfb      	ldrb	r3, [r7, #23]
}
 801113e:	4618      	mov	r0, r3
 8011140:	371c      	adds	r7, #28
 8011142:	46bd      	mov	sp, r7
 8011144:	bd90      	pop	{r4, r7, pc}
 8011146:	bf00      	nop
 8011148:	240011fc 	.word	0x240011fc

0801114c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 801114c:	b480      	push	{r7}
 801114e:	b085      	sub	sp, #20
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	3301      	adds	r3, #1
 8011158:	781b      	ldrb	r3, [r3, #0]
 801115a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 801115c:	89fb      	ldrh	r3, [r7, #14]
 801115e:	021b      	lsls	r3, r3, #8
 8011160:	b21a      	sxth	r2, r3
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	b21b      	sxth	r3, r3
 8011168:	4313      	orrs	r3, r2
 801116a:	b21b      	sxth	r3, r3
 801116c:	81fb      	strh	r3, [r7, #14]
	return rv;
 801116e:	89fb      	ldrh	r3, [r7, #14]
}
 8011170:	4618      	mov	r0, r3
 8011172:	3714      	adds	r7, #20
 8011174:	46bd      	mov	sp, r7
 8011176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117a:	4770      	bx	lr

0801117c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 801117c:	b480      	push	{r7}
 801117e:	b085      	sub	sp, #20
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	3303      	adds	r3, #3
 8011188:	781b      	ldrb	r3, [r3, #0]
 801118a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	021b      	lsls	r3, r3, #8
 8011190:	687a      	ldr	r2, [r7, #4]
 8011192:	3202      	adds	r2, #2
 8011194:	7812      	ldrb	r2, [r2, #0]
 8011196:	4313      	orrs	r3, r2
 8011198:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	021b      	lsls	r3, r3, #8
 801119e:	687a      	ldr	r2, [r7, #4]
 80111a0:	3201      	adds	r2, #1
 80111a2:	7812      	ldrb	r2, [r2, #0]
 80111a4:	4313      	orrs	r3, r2
 80111a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	021b      	lsls	r3, r3, #8
 80111ac:	687a      	ldr	r2, [r7, #4]
 80111ae:	7812      	ldrb	r2, [r2, #0]
 80111b0:	4313      	orrs	r3, r2
 80111b2:	60fb      	str	r3, [r7, #12]
	return rv;
 80111b4:	68fb      	ldr	r3, [r7, #12]
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3714      	adds	r7, #20
 80111ba:	46bd      	mov	sp, r7
 80111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c0:	4770      	bx	lr

080111c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80111c2:	b480      	push	{r7}
 80111c4:	b083      	sub	sp, #12
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	6078      	str	r0, [r7, #4]
 80111ca:	460b      	mov	r3, r1
 80111cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	1c5a      	adds	r2, r3, #1
 80111d2:	607a      	str	r2, [r7, #4]
 80111d4:	887a      	ldrh	r2, [r7, #2]
 80111d6:	b2d2      	uxtb	r2, r2
 80111d8:	701a      	strb	r2, [r3, #0]
 80111da:	887b      	ldrh	r3, [r7, #2]
 80111dc:	0a1b      	lsrs	r3, r3, #8
 80111de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	1c5a      	adds	r2, r3, #1
 80111e4:	607a      	str	r2, [r7, #4]
 80111e6:	887a      	ldrh	r2, [r7, #2]
 80111e8:	b2d2      	uxtb	r2, r2
 80111ea:	701a      	strb	r2, [r3, #0]
}
 80111ec:	bf00      	nop
 80111ee:	370c      	adds	r7, #12
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr

080111f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80111f8:	b480      	push	{r7}
 80111fa:	b083      	sub	sp, #12
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	6078      	str	r0, [r7, #4]
 8011200:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	1c5a      	adds	r2, r3, #1
 8011206:	607a      	str	r2, [r7, #4]
 8011208:	683a      	ldr	r2, [r7, #0]
 801120a:	b2d2      	uxtb	r2, r2
 801120c:	701a      	strb	r2, [r3, #0]
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	0a1b      	lsrs	r3, r3, #8
 8011212:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	1c5a      	adds	r2, r3, #1
 8011218:	607a      	str	r2, [r7, #4]
 801121a:	683a      	ldr	r2, [r7, #0]
 801121c:	b2d2      	uxtb	r2, r2
 801121e:	701a      	strb	r2, [r3, #0]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	0a1b      	lsrs	r3, r3, #8
 8011224:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	1c5a      	adds	r2, r3, #1
 801122a:	607a      	str	r2, [r7, #4]
 801122c:	683a      	ldr	r2, [r7, #0]
 801122e:	b2d2      	uxtb	r2, r2
 8011230:	701a      	strb	r2, [r3, #0]
 8011232:	683b      	ldr	r3, [r7, #0]
 8011234:	0a1b      	lsrs	r3, r3, #8
 8011236:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	1c5a      	adds	r2, r3, #1
 801123c:	607a      	str	r2, [r7, #4]
 801123e:	683a      	ldr	r2, [r7, #0]
 8011240:	b2d2      	uxtb	r2, r2
 8011242:	701a      	strb	r2, [r3, #0]
}
 8011244:	bf00      	nop
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr

08011250 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011250:	b480      	push	{r7}
 8011252:	b087      	sub	sp, #28
 8011254:	af00      	add	r7, sp, #0
 8011256:	60f8      	str	r0, [r7, #12]
 8011258:	60b9      	str	r1, [r7, #8]
 801125a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011260:	697b      	ldr	r3, [r7, #20]
 8011262:	1c5a      	adds	r2, r3, #1
 8011264:	617a      	str	r2, [r7, #20]
 8011266:	68ba      	ldr	r2, [r7, #8]
 8011268:	b2d2      	uxtb	r2, r2
 801126a:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	3b01      	subs	r3, #1
 8011270:	607b      	str	r3, [r7, #4]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1f3      	bne.n	8011260 <mem_set+0x10>
}
 8011278:	bf00      	nop
 801127a:	bf00      	nop
 801127c:	371c      	adds	r7, #28
 801127e:	46bd      	mov	sp, r7
 8011280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011284:	4770      	bx	lr

08011286 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011286:	b480      	push	{r7}
 8011288:	b089      	sub	sp, #36	; 0x24
 801128a:	af00      	add	r7, sp, #0
 801128c:	60f8      	str	r0, [r7, #12]
 801128e:	60b9      	str	r1, [r7, #8]
 8011290:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	61fb      	str	r3, [r7, #28]
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801129a:	2300      	movs	r3, #0
 801129c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801129e:	69fb      	ldr	r3, [r7, #28]
 80112a0:	1c5a      	adds	r2, r3, #1
 80112a2:	61fa      	str	r2, [r7, #28]
 80112a4:	781b      	ldrb	r3, [r3, #0]
 80112a6:	4619      	mov	r1, r3
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	1c5a      	adds	r2, r3, #1
 80112ac:	61ba      	str	r2, [r7, #24]
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	1acb      	subs	r3, r1, r3
 80112b2:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	3b01      	subs	r3, #1
 80112b8:	607b      	str	r3, [r7, #4]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d002      	beq.n	80112c6 <mem_cmp+0x40>
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d0eb      	beq.n	801129e <mem_cmp+0x18>

	return r;
 80112c6:	697b      	ldr	r3, [r7, #20]
}
 80112c8:	4618      	mov	r0, r3
 80112ca:	3724      	adds	r7, #36	; 0x24
 80112cc:	46bd      	mov	sp, r7
 80112ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d2:	4770      	bx	lr

080112d4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
 80112dc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80112de:	e002      	b.n	80112e6 <chk_chr+0x12>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	3301      	adds	r3, #1
 80112e4:	607b      	str	r3, [r7, #4]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	781b      	ldrb	r3, [r3, #0]
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d005      	beq.n	80112fa <chk_chr+0x26>
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	461a      	mov	r2, r3
 80112f4:	683b      	ldr	r3, [r7, #0]
 80112f6:	4293      	cmp	r3, r2
 80112f8:	d1f2      	bne.n	80112e0 <chk_chr+0xc>
	return *str;
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	781b      	ldrb	r3, [r3, #0]
}
 80112fe:	4618      	mov	r0, r3
 8011300:	370c      	adds	r7, #12
 8011302:	46bd      	mov	sp, r7
 8011304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011308:	4770      	bx	lr
	...

0801130c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 801130c:	b480      	push	{r7}
 801130e:	b085      	sub	sp, #20
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011314:	2300      	movs	r3, #0
 8011316:	60fb      	str	r3, [r7, #12]
 8011318:	e010      	b.n	801133c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801131a:	4a0d      	ldr	r2, [pc, #52]	; (8011350 <clear_lock+0x44>)
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	011b      	lsls	r3, r3, #4
 8011320:	4413      	add	r3, r2
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	687a      	ldr	r2, [r7, #4]
 8011326:	429a      	cmp	r2, r3
 8011328:	d105      	bne.n	8011336 <clear_lock+0x2a>
 801132a:	4a09      	ldr	r2, [pc, #36]	; (8011350 <clear_lock+0x44>)
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	011b      	lsls	r3, r3, #4
 8011330:	4413      	add	r3, r2
 8011332:	2200      	movs	r2, #0
 8011334:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	3301      	adds	r3, #1
 801133a:	60fb      	str	r3, [r7, #12]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	2b01      	cmp	r3, #1
 8011340:	d9eb      	bls.n	801131a <clear_lock+0xe>
	}
}
 8011342:	bf00      	nop
 8011344:	bf00      	nop
 8011346:	3714      	adds	r7, #20
 8011348:	46bd      	mov	sp, r7
 801134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134e:	4770      	bx	lr
 8011350:	240011dc 	.word	0x240011dc

08011354 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b086      	sub	sp, #24
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 801135c:	2300      	movs	r3, #0
 801135e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	78db      	ldrb	r3, [r3, #3]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d034      	beq.n	80113d2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801136c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	7858      	ldrb	r0, [r3, #1]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011378:	2301      	movs	r3, #1
 801137a:	697a      	ldr	r2, [r7, #20]
 801137c:	f7ff fec6 	bl	801110c <disk_write>
 8011380:	4603      	mov	r3, r0
 8011382:	2b00      	cmp	r3, #0
 8011384:	d002      	beq.n	801138c <sync_window+0x38>
			res = FR_DISK_ERR;
 8011386:	2301      	movs	r3, #1
 8011388:	73fb      	strb	r3, [r7, #15]
 801138a:	e022      	b.n	80113d2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	2200      	movs	r2, #0
 8011390:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6a1b      	ldr	r3, [r3, #32]
 8011396:	697a      	ldr	r2, [r7, #20]
 8011398:	1ad2      	subs	r2, r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	699b      	ldr	r3, [r3, #24]
 801139e:	429a      	cmp	r2, r3
 80113a0:	d217      	bcs.n	80113d2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	789b      	ldrb	r3, [r3, #2]
 80113a6:	613b      	str	r3, [r7, #16]
 80113a8:	e010      	b.n	80113cc <sync_window+0x78>
					wsect += fs->fsize;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	699b      	ldr	r3, [r3, #24]
 80113ae:	697a      	ldr	r2, [r7, #20]
 80113b0:	4413      	add	r3, r2
 80113b2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	7858      	ldrb	r0, [r3, #1]
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80113be:	2301      	movs	r3, #1
 80113c0:	697a      	ldr	r2, [r7, #20]
 80113c2:	f7ff fea3 	bl	801110c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	3b01      	subs	r3, #1
 80113ca:	613b      	str	r3, [r7, #16]
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d8eb      	bhi.n	80113aa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80113d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3718      	adds	r7, #24
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80113e6:	2300      	movs	r3, #0
 80113e8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113ee:	683a      	ldr	r2, [r7, #0]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d01b      	beq.n	801142c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f7ff ffad 	bl	8011354 <sync_window>
 80113fa:	4603      	mov	r3, r0
 80113fc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80113fe:	7bfb      	ldrb	r3, [r7, #15]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d113      	bne.n	801142c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	7858      	ldrb	r0, [r3, #1]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801140e:	2301      	movs	r3, #1
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	f7ff fe5b 	bl	80110cc <disk_read>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	d004      	beq.n	8011426 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 801141c:	f04f 33ff 	mov.w	r3, #4294967295
 8011420:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011422:	2301      	movs	r3, #1
 8011424:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	683a      	ldr	r2, [r7, #0]
 801142a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 801142c:	7bfb      	ldrb	r3, [r7, #15]
}
 801142e:	4618      	mov	r0, r3
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}

08011436 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011436:	b480      	push	{r7}
 8011438:	b083      	sub	sp, #12
 801143a:	af00      	add	r7, sp, #0
 801143c:	6078      	str	r0, [r7, #4]
 801143e:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	3b02      	subs	r3, #2
 8011444:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	695b      	ldr	r3, [r3, #20]
 801144a:	3b02      	subs	r3, #2
 801144c:	683a      	ldr	r2, [r7, #0]
 801144e:	429a      	cmp	r2, r3
 8011450:	d301      	bcc.n	8011456 <clust2sect+0x20>
 8011452:	2300      	movs	r3, #0
 8011454:	e008      	b.n	8011468 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	895b      	ldrh	r3, [r3, #10]
 801145a:	461a      	mov	r2, r3
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	fb03 f202 	mul.w	r2, r3, r2
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011466:	4413      	add	r3, r2
}
 8011468:	4618      	mov	r0, r3
 801146a:	370c      	adds	r7, #12
 801146c:	46bd      	mov	sp, r7
 801146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011472:	4770      	bx	lr

08011474 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	2b01      	cmp	r3, #1
 8011488:	d904      	bls.n	8011494 <get_fat+0x20>
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	695b      	ldr	r3, [r3, #20]
 801148e:	683a      	ldr	r2, [r7, #0]
 8011490:	429a      	cmp	r2, r3
 8011492:	d302      	bcc.n	801149a <get_fat+0x26>
		val = 1;	/* Internal error */
 8011494:	2301      	movs	r3, #1
 8011496:	617b      	str	r3, [r7, #20]
 8011498:	e08f      	b.n	80115ba <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801149a:	f04f 33ff 	mov.w	r3, #4294967295
 801149e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	2b03      	cmp	r3, #3
 80114a6:	d062      	beq.n	801156e <get_fat+0xfa>
 80114a8:	2b03      	cmp	r3, #3
 80114aa:	dc7c      	bgt.n	80115a6 <get_fat+0x132>
 80114ac:	2b01      	cmp	r3, #1
 80114ae:	d002      	beq.n	80114b6 <get_fat+0x42>
 80114b0:	2b02      	cmp	r3, #2
 80114b2:	d042      	beq.n	801153a <get_fat+0xc6>
 80114b4:	e077      	b.n	80115a6 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	60fb      	str	r3, [r7, #12]
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	085b      	lsrs	r3, r3, #1
 80114be:	68fa      	ldr	r2, [r7, #12]
 80114c0:	4413      	add	r3, r2
 80114c2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	6a1a      	ldr	r2, [r3, #32]
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	0a5b      	lsrs	r3, r3, #9
 80114cc:	4413      	add	r3, r2
 80114ce:	4619      	mov	r1, r3
 80114d0:	6938      	ldr	r0, [r7, #16]
 80114d2:	f7ff ff83 	bl	80113dc <move_window>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d167      	bne.n	80115ac <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	1c5a      	adds	r2, r3, #1
 80114e0:	60fa      	str	r2, [r7, #12]
 80114e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80114e6:	693a      	ldr	r2, [r7, #16]
 80114e8:	4413      	add	r3, r2
 80114ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114ee:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	6a1a      	ldr	r2, [r3, #32]
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	0a5b      	lsrs	r3, r3, #9
 80114f8:	4413      	add	r3, r2
 80114fa:	4619      	mov	r1, r3
 80114fc:	6938      	ldr	r0, [r7, #16]
 80114fe:	f7ff ff6d 	bl	80113dc <move_window>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d153      	bne.n	80115b0 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801150e:	693a      	ldr	r2, [r7, #16]
 8011510:	4413      	add	r3, r2
 8011512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011516:	021b      	lsls	r3, r3, #8
 8011518:	461a      	mov	r2, r3
 801151a:	68bb      	ldr	r3, [r7, #8]
 801151c:	4313      	orrs	r3, r2
 801151e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	f003 0301 	and.w	r3, r3, #1
 8011526:	2b00      	cmp	r3, #0
 8011528:	d002      	beq.n	8011530 <get_fat+0xbc>
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	091b      	lsrs	r3, r3, #4
 801152e:	e002      	b.n	8011536 <get_fat+0xc2>
 8011530:	68bb      	ldr	r3, [r7, #8]
 8011532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011536:	617b      	str	r3, [r7, #20]
			break;
 8011538:	e03f      	b.n	80115ba <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	6a1a      	ldr	r2, [r3, #32]
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	0a1b      	lsrs	r3, r3, #8
 8011542:	4413      	add	r3, r2
 8011544:	4619      	mov	r1, r3
 8011546:	6938      	ldr	r0, [r7, #16]
 8011548:	f7ff ff48 	bl	80113dc <move_window>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d130      	bne.n	80115b4 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011552:	693b      	ldr	r3, [r7, #16]
 8011554:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	005b      	lsls	r3, r3, #1
 801155c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011560:	4413      	add	r3, r2
 8011562:	4618      	mov	r0, r3
 8011564:	f7ff fdf2 	bl	801114c <ld_word>
 8011568:	4603      	mov	r3, r0
 801156a:	617b      	str	r3, [r7, #20]
			break;
 801156c:	e025      	b.n	80115ba <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801156e:	693b      	ldr	r3, [r7, #16]
 8011570:	6a1a      	ldr	r2, [r3, #32]
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	09db      	lsrs	r3, r3, #7
 8011576:	4413      	add	r3, r2
 8011578:	4619      	mov	r1, r3
 801157a:	6938      	ldr	r0, [r7, #16]
 801157c:	f7ff ff2e 	bl	80113dc <move_window>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d118      	bne.n	80115b8 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801158c:	683b      	ldr	r3, [r7, #0]
 801158e:	009b      	lsls	r3, r3, #2
 8011590:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011594:	4413      	add	r3, r2
 8011596:	4618      	mov	r0, r3
 8011598:	f7ff fdf0 	bl	801117c <ld_dword>
 801159c:	4603      	mov	r3, r0
 801159e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80115a2:	617b      	str	r3, [r7, #20]
			break;
 80115a4:	e009      	b.n	80115ba <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80115a6:	2301      	movs	r3, #1
 80115a8:	617b      	str	r3, [r7, #20]
 80115aa:	e006      	b.n	80115ba <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115ac:	bf00      	nop
 80115ae:	e004      	b.n	80115ba <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80115b0:	bf00      	nop
 80115b2:	e002      	b.n	80115ba <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80115b4:	bf00      	nop
 80115b6:	e000      	b.n	80115ba <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80115b8:	bf00      	nop
		}
	}

	return val;
 80115ba:	697b      	ldr	r3, [r7, #20]
}
 80115bc:	4618      	mov	r0, r3
 80115be:	3718      	adds	r7, #24
 80115c0:	46bd      	mov	sp, r7
 80115c2:	bd80      	pop	{r7, pc}

080115c4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80115c4:	b590      	push	{r4, r7, lr}
 80115c6:	b089      	sub	sp, #36	; 0x24
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	60f8      	str	r0, [r7, #12]
 80115cc:	60b9      	str	r1, [r7, #8]
 80115ce:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80115d0:	2302      	movs	r3, #2
 80115d2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	2b01      	cmp	r3, #1
 80115d8:	f240 80d9 	bls.w	801178e <put_fat+0x1ca>
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	695b      	ldr	r3, [r3, #20]
 80115e0:	68ba      	ldr	r2, [r7, #8]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	f080 80d3 	bcs.w	801178e <put_fat+0x1ca>
		switch (fs->fs_type) {
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	781b      	ldrb	r3, [r3, #0]
 80115ec:	2b03      	cmp	r3, #3
 80115ee:	f000 8096 	beq.w	801171e <put_fat+0x15a>
 80115f2:	2b03      	cmp	r3, #3
 80115f4:	f300 80cb 	bgt.w	801178e <put_fat+0x1ca>
 80115f8:	2b01      	cmp	r3, #1
 80115fa:	d002      	beq.n	8011602 <put_fat+0x3e>
 80115fc:	2b02      	cmp	r3, #2
 80115fe:	d06e      	beq.n	80116de <put_fat+0x11a>
 8011600:	e0c5      	b.n	801178e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	61bb      	str	r3, [r7, #24]
 8011606:	69bb      	ldr	r3, [r7, #24]
 8011608:	085b      	lsrs	r3, r3, #1
 801160a:	69ba      	ldr	r2, [r7, #24]
 801160c:	4413      	add	r3, r2
 801160e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	6a1a      	ldr	r2, [r3, #32]
 8011614:	69bb      	ldr	r3, [r7, #24]
 8011616:	0a5b      	lsrs	r3, r3, #9
 8011618:	4413      	add	r3, r2
 801161a:	4619      	mov	r1, r3
 801161c:	68f8      	ldr	r0, [r7, #12]
 801161e:	f7ff fedd 	bl	80113dc <move_window>
 8011622:	4603      	mov	r3, r0
 8011624:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011626:	7ffb      	ldrb	r3, [r7, #31]
 8011628:	2b00      	cmp	r3, #0
 801162a:	f040 80a9 	bne.w	8011780 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011634:	69bb      	ldr	r3, [r7, #24]
 8011636:	1c59      	adds	r1, r3, #1
 8011638:	61b9      	str	r1, [r7, #24]
 801163a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801163e:	4413      	add	r3, r2
 8011640:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	f003 0301 	and.w	r3, r3, #1
 8011648:	2b00      	cmp	r3, #0
 801164a:	d00d      	beq.n	8011668 <put_fat+0xa4>
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	b25b      	sxtb	r3, r3
 8011652:	f003 030f 	and.w	r3, r3, #15
 8011656:	b25a      	sxtb	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	b2db      	uxtb	r3, r3
 801165c:	011b      	lsls	r3, r3, #4
 801165e:	b25b      	sxtb	r3, r3
 8011660:	4313      	orrs	r3, r2
 8011662:	b25b      	sxtb	r3, r3
 8011664:	b2db      	uxtb	r3, r3
 8011666:	e001      	b.n	801166c <put_fat+0xa8>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	b2db      	uxtb	r3, r3
 801166c:	697a      	ldr	r2, [r7, #20]
 801166e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2201      	movs	r2, #1
 8011674:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	6a1a      	ldr	r2, [r3, #32]
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	0a5b      	lsrs	r3, r3, #9
 801167e:	4413      	add	r3, r2
 8011680:	4619      	mov	r1, r3
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f7ff feaa 	bl	80113dc <move_window>
 8011688:	4603      	mov	r3, r0
 801168a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801168c:	7ffb      	ldrb	r3, [r7, #31]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d178      	bne.n	8011784 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011698:	69bb      	ldr	r3, [r7, #24]
 801169a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801169e:	4413      	add	r3, r2
 80116a0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80116a2:	68bb      	ldr	r3, [r7, #8]
 80116a4:	f003 0301 	and.w	r3, r3, #1
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d003      	beq.n	80116b4 <put_fat+0xf0>
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	091b      	lsrs	r3, r3, #4
 80116b0:	b2db      	uxtb	r3, r3
 80116b2:	e00e      	b.n	80116d2 <put_fat+0x10e>
 80116b4:	697b      	ldr	r3, [r7, #20]
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	b25b      	sxtb	r3, r3
 80116ba:	f023 030f 	bic.w	r3, r3, #15
 80116be:	b25a      	sxtb	r2, r3
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	0a1b      	lsrs	r3, r3, #8
 80116c4:	b25b      	sxtb	r3, r3
 80116c6:	f003 030f 	and.w	r3, r3, #15
 80116ca:	b25b      	sxtb	r3, r3
 80116cc:	4313      	orrs	r3, r2
 80116ce:	b25b      	sxtb	r3, r3
 80116d0:	b2db      	uxtb	r3, r3
 80116d2:	697a      	ldr	r2, [r7, #20]
 80116d4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2201      	movs	r2, #1
 80116da:	70da      	strb	r2, [r3, #3]
			break;
 80116dc:	e057      	b.n	801178e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	6a1a      	ldr	r2, [r3, #32]
 80116e2:	68bb      	ldr	r3, [r7, #8]
 80116e4:	0a1b      	lsrs	r3, r3, #8
 80116e6:	4413      	add	r3, r2
 80116e8:	4619      	mov	r1, r3
 80116ea:	68f8      	ldr	r0, [r7, #12]
 80116ec:	f7ff fe76 	bl	80113dc <move_window>
 80116f0:	4603      	mov	r3, r0
 80116f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116f4:	7ffb      	ldrb	r3, [r7, #31]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d146      	bne.n	8011788 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	005b      	lsls	r3, r3, #1
 8011704:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8011708:	4413      	add	r3, r2
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	b292      	uxth	r2, r2
 801170e:	4611      	mov	r1, r2
 8011710:	4618      	mov	r0, r3
 8011712:	f7ff fd56 	bl	80111c2 <st_word>
			fs->wflag = 1;
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	2201      	movs	r2, #1
 801171a:	70da      	strb	r2, [r3, #3]
			break;
 801171c:	e037      	b.n	801178e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	6a1a      	ldr	r2, [r3, #32]
 8011722:	68bb      	ldr	r3, [r7, #8]
 8011724:	09db      	lsrs	r3, r3, #7
 8011726:	4413      	add	r3, r2
 8011728:	4619      	mov	r1, r3
 801172a:	68f8      	ldr	r0, [r7, #12]
 801172c:	f7ff fe56 	bl	80113dc <move_window>
 8011730:	4603      	mov	r3, r0
 8011732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011734:	7ffb      	ldrb	r3, [r7, #31]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d128      	bne.n	801178c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011746:	68bb      	ldr	r3, [r7, #8]
 8011748:	009b      	lsls	r3, r3, #2
 801174a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801174e:	4413      	add	r3, r2
 8011750:	4618      	mov	r0, r3
 8011752:	f7ff fd13 	bl	801117c <ld_dword>
 8011756:	4603      	mov	r3, r0
 8011758:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801175c:	4323      	orrs	r3, r4
 801175e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801176e:	4413      	add	r3, r2
 8011770:	6879      	ldr	r1, [r7, #4]
 8011772:	4618      	mov	r0, r3
 8011774:	f7ff fd40 	bl	80111f8 <st_dword>
			fs->wflag = 1;
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	2201      	movs	r2, #1
 801177c:	70da      	strb	r2, [r3, #3]
			break;
 801177e:	e006      	b.n	801178e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011780:	bf00      	nop
 8011782:	e004      	b.n	801178e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011784:	bf00      	nop
 8011786:	e002      	b.n	801178e <put_fat+0x1ca>
			if (res != FR_OK) break;
 8011788:	bf00      	nop
 801178a:	e000      	b.n	801178e <put_fat+0x1ca>
			if (res != FR_OK) break;
 801178c:	bf00      	nop
		}
	}
	return res;
 801178e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011790:	4618      	mov	r0, r3
 8011792:	3724      	adds	r7, #36	; 0x24
 8011794:	46bd      	mov	sp, r7
 8011796:	bd90      	pop	{r4, r7, pc}

08011798 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b088      	sub	sp, #32
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d10d      	bne.n	80117ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80117ae:	693b      	ldr	r3, [r7, #16]
 80117b0:	68db      	ldr	r3, [r3, #12]
 80117b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80117b4:	69bb      	ldr	r3, [r7, #24]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d004      	beq.n	80117c4 <create_chain+0x2c>
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	695b      	ldr	r3, [r3, #20]
 80117be:	69ba      	ldr	r2, [r7, #24]
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d31b      	bcc.n	80117fc <create_chain+0x64>
 80117c4:	2301      	movs	r3, #1
 80117c6:	61bb      	str	r3, [r7, #24]
 80117c8:	e018      	b.n	80117fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80117ca:	6839      	ldr	r1, [r7, #0]
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f7ff fe51 	bl	8011474 <get_fat>
 80117d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2b01      	cmp	r3, #1
 80117d8:	d801      	bhi.n	80117de <create_chain+0x46>
 80117da:	2301      	movs	r3, #1
 80117dc:	e070      	b.n	80118c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117e4:	d101      	bne.n	80117ea <create_chain+0x52>
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	e06a      	b.n	80118c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80117ea:	693b      	ldr	r3, [r7, #16]
 80117ec:	695b      	ldr	r3, [r3, #20]
 80117ee:	68fa      	ldr	r2, [r7, #12]
 80117f0:	429a      	cmp	r2, r3
 80117f2:	d201      	bcs.n	80117f8 <create_chain+0x60>
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	e063      	b.n	80118c0 <create_chain+0x128>
		scl = clst;
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80117fc:	69bb      	ldr	r3, [r7, #24]
 80117fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	3301      	adds	r3, #1
 8011804:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	695b      	ldr	r3, [r3, #20]
 801180a:	69fa      	ldr	r2, [r7, #28]
 801180c:	429a      	cmp	r2, r3
 801180e:	d307      	bcc.n	8011820 <create_chain+0x88>
				ncl = 2;
 8011810:	2302      	movs	r3, #2
 8011812:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011814:	69fa      	ldr	r2, [r7, #28]
 8011816:	69bb      	ldr	r3, [r7, #24]
 8011818:	429a      	cmp	r2, r3
 801181a:	d901      	bls.n	8011820 <create_chain+0x88>
 801181c:	2300      	movs	r3, #0
 801181e:	e04f      	b.n	80118c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011820:	69f9      	ldr	r1, [r7, #28]
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f7ff fe26 	bl	8011474 <get_fat>
 8011828:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d00e      	beq.n	801184e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2b01      	cmp	r3, #1
 8011834:	d003      	beq.n	801183e <create_chain+0xa6>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f1b3 3fff 	cmp.w	r3, #4294967295
 801183c:	d101      	bne.n	8011842 <create_chain+0xaa>
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	e03e      	b.n	80118c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011842:	69fa      	ldr	r2, [r7, #28]
 8011844:	69bb      	ldr	r3, [r7, #24]
 8011846:	429a      	cmp	r2, r3
 8011848:	d1da      	bne.n	8011800 <create_chain+0x68>
 801184a:	2300      	movs	r3, #0
 801184c:	e038      	b.n	80118c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801184e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011850:	f04f 32ff 	mov.w	r2, #4294967295
 8011854:	69f9      	ldr	r1, [r7, #28]
 8011856:	6938      	ldr	r0, [r7, #16]
 8011858:	f7ff feb4 	bl	80115c4 <put_fat>
 801185c:	4603      	mov	r3, r0
 801185e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011860:	7dfb      	ldrb	r3, [r7, #23]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d109      	bne.n	801187a <create_chain+0xe2>
 8011866:	683b      	ldr	r3, [r7, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d006      	beq.n	801187a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801186c:	69fa      	ldr	r2, [r7, #28]
 801186e:	6839      	ldr	r1, [r7, #0]
 8011870:	6938      	ldr	r0, [r7, #16]
 8011872:	f7ff fea7 	bl	80115c4 <put_fat>
 8011876:	4603      	mov	r3, r0
 8011878:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801187a:	7dfb      	ldrb	r3, [r7, #23]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d116      	bne.n	80118ae <create_chain+0x116>
		fs->last_clst = ncl;
 8011880:	693b      	ldr	r3, [r7, #16]
 8011882:	69fa      	ldr	r2, [r7, #28]
 8011884:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	691a      	ldr	r2, [r3, #16]
 801188a:	693b      	ldr	r3, [r7, #16]
 801188c:	695b      	ldr	r3, [r3, #20]
 801188e:	3b02      	subs	r3, #2
 8011890:	429a      	cmp	r2, r3
 8011892:	d804      	bhi.n	801189e <create_chain+0x106>
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	691b      	ldr	r3, [r3, #16]
 8011898:	1e5a      	subs	r2, r3, #1
 801189a:	693b      	ldr	r3, [r7, #16]
 801189c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	791b      	ldrb	r3, [r3, #4]
 80118a2:	f043 0301 	orr.w	r3, r3, #1
 80118a6:	b2da      	uxtb	r2, r3
 80118a8:	693b      	ldr	r3, [r7, #16]
 80118aa:	711a      	strb	r2, [r3, #4]
 80118ac:	e007      	b.n	80118be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80118ae:	7dfb      	ldrb	r3, [r7, #23]
 80118b0:	2b01      	cmp	r3, #1
 80118b2:	d102      	bne.n	80118ba <create_chain+0x122>
 80118b4:	f04f 33ff 	mov.w	r3, #4294967295
 80118b8:	e000      	b.n	80118bc <create_chain+0x124>
 80118ba:	2301      	movs	r3, #1
 80118bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80118be:	69fb      	ldr	r3, [r7, #28]
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3720      	adds	r7, #32
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}

080118c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b086      	sub	sp, #24
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
 80118d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80118de:	d204      	bcs.n	80118ea <dir_sdi+0x22>
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	f003 031f 	and.w	r3, r3, #31
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d001      	beq.n	80118ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80118ea:	2302      	movs	r3, #2
 80118ec:	e063      	b.n	80119b6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	683a      	ldr	r2, [r7, #0]
 80118f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	689b      	ldr	r3, [r3, #8]
 80118f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d106      	bne.n	801190e <dir_sdi+0x46>
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	2b02      	cmp	r3, #2
 8011906:	d902      	bls.n	801190e <dir_sdi+0x46>
		clst = fs->dirbase;
 8011908:	693b      	ldr	r3, [r7, #16]
 801190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801190c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801190e:	697b      	ldr	r3, [r7, #20]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d10c      	bne.n	801192e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	095b      	lsrs	r3, r3, #5
 8011918:	693a      	ldr	r2, [r7, #16]
 801191a:	8912      	ldrh	r2, [r2, #8]
 801191c:	4293      	cmp	r3, r2
 801191e:	d301      	bcc.n	8011924 <dir_sdi+0x5c>
 8011920:	2302      	movs	r3, #2
 8011922:	e048      	b.n	80119b6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	61da      	str	r2, [r3, #28]
 801192c:	e029      	b.n	8011982 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801192e:	693b      	ldr	r3, [r7, #16]
 8011930:	895b      	ldrh	r3, [r3, #10]
 8011932:	025b      	lsls	r3, r3, #9
 8011934:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011936:	e019      	b.n	801196c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6979      	ldr	r1, [r7, #20]
 801193c:	4618      	mov	r0, r3
 801193e:	f7ff fd99 	bl	8011474 <get_fat>
 8011942:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011944:	697b      	ldr	r3, [r7, #20]
 8011946:	f1b3 3fff 	cmp.w	r3, #4294967295
 801194a:	d101      	bne.n	8011950 <dir_sdi+0x88>
 801194c:	2301      	movs	r3, #1
 801194e:	e032      	b.n	80119b6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011950:	697b      	ldr	r3, [r7, #20]
 8011952:	2b01      	cmp	r3, #1
 8011954:	d904      	bls.n	8011960 <dir_sdi+0x98>
 8011956:	693b      	ldr	r3, [r7, #16]
 8011958:	695b      	ldr	r3, [r3, #20]
 801195a:	697a      	ldr	r2, [r7, #20]
 801195c:	429a      	cmp	r2, r3
 801195e:	d301      	bcc.n	8011964 <dir_sdi+0x9c>
 8011960:	2302      	movs	r3, #2
 8011962:	e028      	b.n	80119b6 <dir_sdi+0xee>
			ofs -= csz;
 8011964:	683a      	ldr	r2, [r7, #0]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	1ad3      	subs	r3, r2, r3
 801196a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801196c:	683a      	ldr	r2, [r7, #0]
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	429a      	cmp	r2, r3
 8011972:	d2e1      	bcs.n	8011938 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8011974:	6979      	ldr	r1, [r7, #20]
 8011976:	6938      	ldr	r0, [r7, #16]
 8011978:	f7ff fd5d 	bl	8011436 <clust2sect>
 801197c:	4602      	mov	r2, r0
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	697a      	ldr	r2, [r7, #20]
 8011986:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	69db      	ldr	r3, [r3, #28]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d101      	bne.n	8011994 <dir_sdi+0xcc>
 8011990:	2302      	movs	r3, #2
 8011992:	e010      	b.n	80119b6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	69da      	ldr	r2, [r3, #28]
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	0a5b      	lsrs	r3, r3, #9
 801199c:	441a      	add	r2, r3
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80119a2:	693b      	ldr	r3, [r7, #16]
 80119a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119ae:	441a      	add	r2, r3
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3718      	adds	r7, #24
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}

080119be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80119be:	b580      	push	{r7, lr}
 80119c0:	b086      	sub	sp, #24
 80119c2:	af00      	add	r7, sp, #0
 80119c4:	6078      	str	r0, [r7, #4]
 80119c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	695b      	ldr	r3, [r3, #20]
 80119d2:	3320      	adds	r3, #32
 80119d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	69db      	ldr	r3, [r3, #28]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d003      	beq.n	80119e6 <dir_next+0x28>
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80119e4:	d301      	bcc.n	80119ea <dir_next+0x2c>
 80119e6:	2304      	movs	r3, #4
 80119e8:	e0aa      	b.n	8011b40 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	f040 8098 	bne.w	8011b26 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	69db      	ldr	r3, [r3, #28]
 80119fa:	1c5a      	adds	r2, r3, #1
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	699b      	ldr	r3, [r3, #24]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d10b      	bne.n	8011a20 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	095b      	lsrs	r3, r3, #5
 8011a0c:	68fa      	ldr	r2, [r7, #12]
 8011a0e:	8912      	ldrh	r2, [r2, #8]
 8011a10:	4293      	cmp	r3, r2
 8011a12:	f0c0 8088 	bcc.w	8011b26 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2200      	movs	r2, #0
 8011a1a:	61da      	str	r2, [r3, #28]
 8011a1c:	2304      	movs	r3, #4
 8011a1e:	e08f      	b.n	8011b40 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011a20:	68bb      	ldr	r3, [r7, #8]
 8011a22:	0a5b      	lsrs	r3, r3, #9
 8011a24:	68fa      	ldr	r2, [r7, #12]
 8011a26:	8952      	ldrh	r2, [r2, #10]
 8011a28:	3a01      	subs	r2, #1
 8011a2a:	4013      	ands	r3, r2
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d17a      	bne.n	8011b26 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011a30:	687a      	ldr	r2, [r7, #4]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	699b      	ldr	r3, [r3, #24]
 8011a36:	4619      	mov	r1, r3
 8011a38:	4610      	mov	r0, r2
 8011a3a:	f7ff fd1b 	bl	8011474 <get_fat>
 8011a3e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011a40:	697b      	ldr	r3, [r7, #20]
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d801      	bhi.n	8011a4a <dir_next+0x8c>
 8011a46:	2302      	movs	r3, #2
 8011a48:	e07a      	b.n	8011b40 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011a4a:	697b      	ldr	r3, [r7, #20]
 8011a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a50:	d101      	bne.n	8011a56 <dir_next+0x98>
 8011a52:	2301      	movs	r3, #1
 8011a54:	e074      	b.n	8011b40 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	695b      	ldr	r3, [r3, #20]
 8011a5a:	697a      	ldr	r2, [r7, #20]
 8011a5c:	429a      	cmp	r2, r3
 8011a5e:	d358      	bcc.n	8011b12 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d104      	bne.n	8011a70 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2200      	movs	r2, #0
 8011a6a:	61da      	str	r2, [r3, #28]
 8011a6c:	2304      	movs	r3, #4
 8011a6e:	e067      	b.n	8011b40 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011a70:	687a      	ldr	r2, [r7, #4]
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	699b      	ldr	r3, [r3, #24]
 8011a76:	4619      	mov	r1, r3
 8011a78:	4610      	mov	r0, r2
 8011a7a:	f7ff fe8d 	bl	8011798 <create_chain>
 8011a7e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d101      	bne.n	8011a8a <dir_next+0xcc>
 8011a86:	2307      	movs	r3, #7
 8011a88:	e05a      	b.n	8011b40 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011a8a:	697b      	ldr	r3, [r7, #20]
 8011a8c:	2b01      	cmp	r3, #1
 8011a8e:	d101      	bne.n	8011a94 <dir_next+0xd6>
 8011a90:	2302      	movs	r3, #2
 8011a92:	e055      	b.n	8011b40 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a9a:	d101      	bne.n	8011aa0 <dir_next+0xe2>
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e04f      	b.n	8011b40 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011aa0:	68f8      	ldr	r0, [r7, #12]
 8011aa2:	f7ff fc57 	bl	8011354 <sync_window>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d001      	beq.n	8011ab0 <dir_next+0xf2>
 8011aac:	2301      	movs	r3, #1
 8011aae:	e047      	b.n	8011b40 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	3330      	adds	r3, #48	; 0x30
 8011ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ab8:	2100      	movs	r1, #0
 8011aba:	4618      	mov	r0, r3
 8011abc:	f7ff fbc8 	bl	8011250 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	613b      	str	r3, [r7, #16]
 8011ac4:	6979      	ldr	r1, [r7, #20]
 8011ac6:	68f8      	ldr	r0, [r7, #12]
 8011ac8:	f7ff fcb5 	bl	8011436 <clust2sect>
 8011acc:	4602      	mov	r2, r0
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	62da      	str	r2, [r3, #44]	; 0x2c
 8011ad2:	e012      	b.n	8011afa <dir_next+0x13c>
						fs->wflag = 1;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011ada:	68f8      	ldr	r0, [r7, #12]
 8011adc:	f7ff fc3a 	bl	8011354 <sync_window>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d001      	beq.n	8011aea <dir_next+0x12c>
 8011ae6:	2301      	movs	r3, #1
 8011ae8:	e02a      	b.n	8011b40 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	3301      	adds	r3, #1
 8011aee:	613b      	str	r3, [r7, #16]
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af4:	1c5a      	adds	r2, r3, #1
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	62da      	str	r2, [r3, #44]	; 0x2c
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	895b      	ldrh	r3, [r3, #10]
 8011afe:	461a      	mov	r2, r3
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	4293      	cmp	r3, r2
 8011b04:	d3e6      	bcc.n	8011ad4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b0a:	693b      	ldr	r3, [r7, #16]
 8011b0c:	1ad2      	subs	r2, r2, r3
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	697a      	ldr	r2, [r7, #20]
 8011b16:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011b18:	6979      	ldr	r1, [r7, #20]
 8011b1a:	68f8      	ldr	r0, [r7, #12]
 8011b1c:	f7ff fc8b 	bl	8011436 <clust2sect>
 8011b20:	4602      	mov	r2, r0
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	68ba      	ldr	r2, [r7, #8]
 8011b2a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011b2c:	68fb      	ldr	r3, [r7, #12]
 8011b2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b38:	441a      	add	r2, r3
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3718      	adds	r7, #24
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b084      	sub	sp, #16
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	331a      	adds	r3, #26
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7ff faf8 	bl	801114c <ld_word>
 8011b5c:	4603      	mov	r3, r0
 8011b5e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	2b03      	cmp	r3, #3
 8011b66:	d109      	bne.n	8011b7c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	3314      	adds	r3, #20
 8011b6c:	4618      	mov	r0, r3
 8011b6e:	f7ff faed 	bl	801114c <ld_word>
 8011b72:	4603      	mov	r3, r0
 8011b74:	041b      	lsls	r3, r3, #16
 8011b76:	68fa      	ldr	r2, [r7, #12]
 8011b78:	4313      	orrs	r3, r2
 8011b7a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3710      	adds	r7, #16
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}

08011b86 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011b86:	b580      	push	{r7, lr}
 8011b88:	b086      	sub	sp, #24
 8011b8a:	af00      	add	r7, sp, #0
 8011b8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011b94:	2100      	movs	r1, #0
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f7ff fe96 	bl	80118c8 <dir_sdi>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011ba0:	7dfb      	ldrb	r3, [r7, #23]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d001      	beq.n	8011baa <dir_find+0x24>
 8011ba6:	7dfb      	ldrb	r3, [r7, #23]
 8011ba8:	e03e      	b.n	8011c28 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	69db      	ldr	r3, [r3, #28]
 8011bae:	4619      	mov	r1, r3
 8011bb0:	6938      	ldr	r0, [r7, #16]
 8011bb2:	f7ff fc13 	bl	80113dc <move_window>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011bba:	7dfb      	ldrb	r3, [r7, #23]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d12f      	bne.n	8011c20 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	6a1b      	ldr	r3, [r3, #32]
 8011bc4:	781b      	ldrb	r3, [r3, #0]
 8011bc6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011bc8:	7bfb      	ldrb	r3, [r7, #15]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d102      	bne.n	8011bd4 <dir_find+0x4e>
 8011bce:	2304      	movs	r3, #4
 8011bd0:	75fb      	strb	r3, [r7, #23]
 8011bd2:	e028      	b.n	8011c26 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	6a1b      	ldr	r3, [r3, #32]
 8011bd8:	330b      	adds	r3, #11
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011be0:	b2da      	uxtb	r2, r3
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6a1b      	ldr	r3, [r3, #32]
 8011bea:	330b      	adds	r3, #11
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	f003 0308 	and.w	r3, r3, #8
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d10a      	bne.n	8011c0c <dir_find+0x86>
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	6a18      	ldr	r0, [r3, #32]
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	3324      	adds	r3, #36	; 0x24
 8011bfe:	220b      	movs	r2, #11
 8011c00:	4619      	mov	r1, r3
 8011c02:	f7ff fb40 	bl	8011286 <mem_cmp>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d00b      	beq.n	8011c24 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011c0c:	2100      	movs	r1, #0
 8011c0e:	6878      	ldr	r0, [r7, #4]
 8011c10:	f7ff fed5 	bl	80119be <dir_next>
 8011c14:	4603      	mov	r3, r0
 8011c16:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011c18:	7dfb      	ldrb	r3, [r7, #23]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d0c5      	beq.n	8011baa <dir_find+0x24>
 8011c1e:	e002      	b.n	8011c26 <dir_find+0xa0>
		if (res != FR_OK) break;
 8011c20:	bf00      	nop
 8011c22:	e000      	b.n	8011c26 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011c24:	bf00      	nop

	return res;
 8011c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3718      	adds	r7, #24
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b086      	sub	sp, #24
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8011c3a:	683b      	ldr	r3, [r7, #0]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	69db      	ldr	r3, [r3, #28]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d04e      	beq.n	8011ce6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	613b      	str	r3, [r7, #16]
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8011c50:	e021      	b.n	8011c96 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	6a1a      	ldr	r2, [r3, #32]
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	1c59      	adds	r1, r3, #1
 8011c5a:	6179      	str	r1, [r7, #20]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8011c62:	7bfb      	ldrb	r3, [r7, #15]
 8011c64:	2b20      	cmp	r3, #32
 8011c66:	d100      	bne.n	8011c6a <get_fileinfo+0x3a>
 8011c68:	e015      	b.n	8011c96 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8011c6a:	7bfb      	ldrb	r3, [r7, #15]
 8011c6c:	2b05      	cmp	r3, #5
 8011c6e:	d101      	bne.n	8011c74 <get_fileinfo+0x44>
 8011c70:	23e5      	movs	r3, #229	; 0xe5
 8011c72:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8011c74:	697b      	ldr	r3, [r7, #20]
 8011c76:	2b09      	cmp	r3, #9
 8011c78:	d106      	bne.n	8011c88 <get_fileinfo+0x58>
 8011c7a:	693b      	ldr	r3, [r7, #16]
 8011c7c:	1c5a      	adds	r2, r3, #1
 8011c7e:	613a      	str	r2, [r7, #16]
 8011c80:	683a      	ldr	r2, [r7, #0]
 8011c82:	4413      	add	r3, r2
 8011c84:	222e      	movs	r2, #46	; 0x2e
 8011c86:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8011c88:	693b      	ldr	r3, [r7, #16]
 8011c8a:	1c5a      	adds	r2, r3, #1
 8011c8c:	613a      	str	r2, [r7, #16]
 8011c8e:	683a      	ldr	r2, [r7, #0]
 8011c90:	4413      	add	r3, r2
 8011c92:	7bfa      	ldrb	r2, [r7, #15]
 8011c94:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8011c96:	697b      	ldr	r3, [r7, #20]
 8011c98:	2b0a      	cmp	r3, #10
 8011c9a:	d9da      	bls.n	8011c52 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8011c9c:	683a      	ldr	r2, [r7, #0]
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	4413      	add	r3, r2
 8011ca2:	3309      	adds	r3, #9
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6a1b      	ldr	r3, [r3, #32]
 8011cac:	7ada      	ldrb	r2, [r3, #11]
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6a1b      	ldr	r3, [r3, #32]
 8011cb6:	331c      	adds	r3, #28
 8011cb8:	4618      	mov	r0, r3
 8011cba:	f7ff fa5f 	bl	801117c <ld_dword>
 8011cbe:	4602      	mov	r2, r0
 8011cc0:	683b      	ldr	r3, [r7, #0]
 8011cc2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6a1b      	ldr	r3, [r3, #32]
 8011cc8:	3316      	adds	r3, #22
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f7ff fa56 	bl	801117c <ld_dword>
 8011cd0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	b29a      	uxth	r2, r3
 8011cd6:	683b      	ldr	r3, [r7, #0]
 8011cd8:	80da      	strh	r2, [r3, #6]
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	0c1b      	lsrs	r3, r3, #16
 8011cde:	b29a      	uxth	r2, r3
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	809a      	strh	r2, [r3, #4]
 8011ce4:	e000      	b.n	8011ce8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011ce6:	bf00      	nop
}
 8011ce8:	3718      	adds	r7, #24
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
	...

08011cf0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b088      	sub	sp, #32
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	60fb      	str	r3, [r7, #12]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	3324      	adds	r3, #36	; 0x24
 8011d04:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8011d06:	220b      	movs	r2, #11
 8011d08:	2120      	movs	r1, #32
 8011d0a:	68b8      	ldr	r0, [r7, #8]
 8011d0c:	f7ff faa0 	bl	8011250 <mem_set>
	si = i = 0; ni = 8;
 8011d10:	2300      	movs	r3, #0
 8011d12:	613b      	str	r3, [r7, #16]
 8011d14:	693b      	ldr	r3, [r7, #16]
 8011d16:	61fb      	str	r3, [r7, #28]
 8011d18:	2308      	movs	r3, #8
 8011d1a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8011d1c:	69fb      	ldr	r3, [r7, #28]
 8011d1e:	1c5a      	adds	r2, r3, #1
 8011d20:	61fa      	str	r2, [r7, #28]
 8011d22:	68fa      	ldr	r2, [r7, #12]
 8011d24:	4413      	add	r3, r2
 8011d26:	781b      	ldrb	r3, [r3, #0]
 8011d28:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011d2a:	7efb      	ldrb	r3, [r7, #27]
 8011d2c:	2b20      	cmp	r3, #32
 8011d2e:	d94e      	bls.n	8011dce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8011d30:	7efb      	ldrb	r3, [r7, #27]
 8011d32:	2b2f      	cmp	r3, #47	; 0x2f
 8011d34:	d006      	beq.n	8011d44 <create_name+0x54>
 8011d36:	7efb      	ldrb	r3, [r7, #27]
 8011d38:	2b5c      	cmp	r3, #92	; 0x5c
 8011d3a:	d110      	bne.n	8011d5e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011d3c:	e002      	b.n	8011d44 <create_name+0x54>
 8011d3e:	69fb      	ldr	r3, [r7, #28]
 8011d40:	3301      	adds	r3, #1
 8011d42:	61fb      	str	r3, [r7, #28]
 8011d44:	68fa      	ldr	r2, [r7, #12]
 8011d46:	69fb      	ldr	r3, [r7, #28]
 8011d48:	4413      	add	r3, r2
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	2b2f      	cmp	r3, #47	; 0x2f
 8011d4e:	d0f6      	beq.n	8011d3e <create_name+0x4e>
 8011d50:	68fa      	ldr	r2, [r7, #12]
 8011d52:	69fb      	ldr	r3, [r7, #28]
 8011d54:	4413      	add	r3, r2
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	2b5c      	cmp	r3, #92	; 0x5c
 8011d5a:	d0f0      	beq.n	8011d3e <create_name+0x4e>
			break;
 8011d5c:	e038      	b.n	8011dd0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8011d5e:	7efb      	ldrb	r3, [r7, #27]
 8011d60:	2b2e      	cmp	r3, #46	; 0x2e
 8011d62:	d003      	beq.n	8011d6c <create_name+0x7c>
 8011d64:	693a      	ldr	r2, [r7, #16]
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	429a      	cmp	r2, r3
 8011d6a:	d30c      	bcc.n	8011d86 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011d6c:	697b      	ldr	r3, [r7, #20]
 8011d6e:	2b0b      	cmp	r3, #11
 8011d70:	d002      	beq.n	8011d78 <create_name+0x88>
 8011d72:	7efb      	ldrb	r3, [r7, #27]
 8011d74:	2b2e      	cmp	r3, #46	; 0x2e
 8011d76:	d001      	beq.n	8011d7c <create_name+0x8c>
 8011d78:	2306      	movs	r3, #6
 8011d7a:	e044      	b.n	8011e06 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011d7c:	2308      	movs	r3, #8
 8011d7e:	613b      	str	r3, [r7, #16]
 8011d80:	230b      	movs	r3, #11
 8011d82:	617b      	str	r3, [r7, #20]
			continue;
 8011d84:	e022      	b.n	8011dcc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011d86:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	da04      	bge.n	8011d98 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8011d8e:	7efb      	ldrb	r3, [r7, #27]
 8011d90:	3b80      	subs	r3, #128	; 0x80
 8011d92:	4a1f      	ldr	r2, [pc, #124]	; (8011e10 <create_name+0x120>)
 8011d94:	5cd3      	ldrb	r3, [r2, r3]
 8011d96:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011d98:	7efb      	ldrb	r3, [r7, #27]
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	481d      	ldr	r0, [pc, #116]	; (8011e14 <create_name+0x124>)
 8011d9e:	f7ff fa99 	bl	80112d4 <chk_chr>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d001      	beq.n	8011dac <create_name+0xbc>
 8011da8:	2306      	movs	r3, #6
 8011daa:	e02c      	b.n	8011e06 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011dac:	7efb      	ldrb	r3, [r7, #27]
 8011dae:	2b60      	cmp	r3, #96	; 0x60
 8011db0:	d905      	bls.n	8011dbe <create_name+0xce>
 8011db2:	7efb      	ldrb	r3, [r7, #27]
 8011db4:	2b7a      	cmp	r3, #122	; 0x7a
 8011db6:	d802      	bhi.n	8011dbe <create_name+0xce>
 8011db8:	7efb      	ldrb	r3, [r7, #27]
 8011dba:	3b20      	subs	r3, #32
 8011dbc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8011dbe:	693b      	ldr	r3, [r7, #16]
 8011dc0:	1c5a      	adds	r2, r3, #1
 8011dc2:	613a      	str	r2, [r7, #16]
 8011dc4:	68ba      	ldr	r2, [r7, #8]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	7efa      	ldrb	r2, [r7, #27]
 8011dca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8011dcc:	e7a6      	b.n	8011d1c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011dce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011dd0:	68fa      	ldr	r2, [r7, #12]
 8011dd2:	69fb      	ldr	r3, [r7, #28]
 8011dd4:	441a      	add	r2, r3
 8011dd6:	683b      	ldr	r3, [r7, #0]
 8011dd8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8011dda:	693b      	ldr	r3, [r7, #16]
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d101      	bne.n	8011de4 <create_name+0xf4>
 8011de0:	2306      	movs	r3, #6
 8011de2:	e010      	b.n	8011e06 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	2be5      	cmp	r3, #229	; 0xe5
 8011dea:	d102      	bne.n	8011df2 <create_name+0x102>
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	2205      	movs	r2, #5
 8011df0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011df2:	7efb      	ldrb	r3, [r7, #27]
 8011df4:	2b20      	cmp	r3, #32
 8011df6:	d801      	bhi.n	8011dfc <create_name+0x10c>
 8011df8:	2204      	movs	r2, #4
 8011dfa:	e000      	b.n	8011dfe <create_name+0x10e>
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	330b      	adds	r3, #11
 8011e02:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011e04:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011e06:	4618      	mov	r0, r3
 8011e08:	3720      	adds	r7, #32
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	bd80      	pop	{r7, pc}
 8011e0e:	bf00      	nop
 8011e10:	0801567c 	.word	0x0801567c
 8011e14:	0801558c 	.word	0x0801558c

08011e18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
 8011e20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011e2c:	e002      	b.n	8011e34 <follow_path+0x1c>
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	3301      	adds	r3, #1
 8011e32:	603b      	str	r3, [r7, #0]
 8011e34:	683b      	ldr	r3, [r7, #0]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	2b2f      	cmp	r3, #47	; 0x2f
 8011e3a:	d0f8      	beq.n	8011e2e <follow_path+0x16>
 8011e3c:	683b      	ldr	r3, [r7, #0]
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	2b5c      	cmp	r3, #92	; 0x5c
 8011e42:	d0f4      	beq.n	8011e2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	2200      	movs	r2, #0
 8011e48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	2b1f      	cmp	r3, #31
 8011e50:	d80a      	bhi.n	8011e68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	2280      	movs	r2, #128	; 0x80
 8011e56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011e5a:	2100      	movs	r1, #0
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f7ff fd33 	bl	80118c8 <dir_sdi>
 8011e62:	4603      	mov	r3, r0
 8011e64:	75fb      	strb	r3, [r7, #23]
 8011e66:	e043      	b.n	8011ef0 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011e68:	463b      	mov	r3, r7
 8011e6a:	4619      	mov	r1, r3
 8011e6c:	6878      	ldr	r0, [r7, #4]
 8011e6e:	f7ff ff3f 	bl	8011cf0 <create_name>
 8011e72:	4603      	mov	r3, r0
 8011e74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d134      	bne.n	8011ee6 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f7ff fe82 	bl	8011b86 <dir_find>
 8011e82:	4603      	mov	r3, r0
 8011e84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011e8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011e8e:	7dfb      	ldrb	r3, [r7, #23]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d00a      	beq.n	8011eaa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011e94:	7dfb      	ldrb	r3, [r7, #23]
 8011e96:	2b04      	cmp	r3, #4
 8011e98:	d127      	bne.n	8011eea <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011e9a:	7afb      	ldrb	r3, [r7, #11]
 8011e9c:	f003 0304 	and.w	r3, r3, #4
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d122      	bne.n	8011eea <follow_path+0xd2>
 8011ea4:	2305      	movs	r3, #5
 8011ea6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011ea8:	e01f      	b.n	8011eea <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011eaa:	7afb      	ldrb	r3, [r7, #11]
 8011eac:	f003 0304 	and.w	r3, r3, #4
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d11c      	bne.n	8011eee <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011eb4:	693b      	ldr	r3, [r7, #16]
 8011eb6:	799b      	ldrb	r3, [r3, #6]
 8011eb8:	f003 0310 	and.w	r3, r3, #16
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d102      	bne.n	8011ec6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011ec0:	2305      	movs	r3, #5
 8011ec2:	75fb      	strb	r3, [r7, #23]
 8011ec4:	e014      	b.n	8011ef0 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	695b      	ldr	r3, [r3, #20]
 8011ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ed4:	4413      	add	r3, r2
 8011ed6:	4619      	mov	r1, r3
 8011ed8:	68f8      	ldr	r0, [r7, #12]
 8011eda:	f7ff fe35 	bl	8011b48 <ld_clust>
 8011ede:	4602      	mov	r2, r0
 8011ee0:	693b      	ldr	r3, [r7, #16]
 8011ee2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011ee4:	e7c0      	b.n	8011e68 <follow_path+0x50>
			if (res != FR_OK) break;
 8011ee6:	bf00      	nop
 8011ee8:	e002      	b.n	8011ef0 <follow_path+0xd8>
				break;
 8011eea:	bf00      	nop
 8011eec:	e000      	b.n	8011ef0 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011eee:	bf00      	nop
			}
		}
	}

	return res;
 8011ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	3718      	adds	r7, #24
 8011ef6:	46bd      	mov	sp, r7
 8011ef8:	bd80      	pop	{r7, pc}

08011efa <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011efa:	b480      	push	{r7}
 8011efc:	b087      	sub	sp, #28
 8011efe:	af00      	add	r7, sp, #0
 8011f00:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011f02:	f04f 33ff 	mov.w	r3, #4294967295
 8011f06:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d031      	beq.n	8011f74 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	617b      	str	r3, [r7, #20]
 8011f16:	e002      	b.n	8011f1e <get_ldnumber+0x24>
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	3301      	adds	r3, #1
 8011f1c:	617b      	str	r3, [r7, #20]
 8011f1e:	697b      	ldr	r3, [r7, #20]
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	2b20      	cmp	r3, #32
 8011f24:	d903      	bls.n	8011f2e <get_ldnumber+0x34>
 8011f26:	697b      	ldr	r3, [r7, #20]
 8011f28:	781b      	ldrb	r3, [r3, #0]
 8011f2a:	2b3a      	cmp	r3, #58	; 0x3a
 8011f2c:	d1f4      	bne.n	8011f18 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011f2e:	697b      	ldr	r3, [r7, #20]
 8011f30:	781b      	ldrb	r3, [r3, #0]
 8011f32:	2b3a      	cmp	r3, #58	; 0x3a
 8011f34:	d11c      	bne.n	8011f70 <get_ldnumber+0x76>
			tp = *path;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	1c5a      	adds	r2, r3, #1
 8011f40:	60fa      	str	r2, [r7, #12]
 8011f42:	781b      	ldrb	r3, [r3, #0]
 8011f44:	3b30      	subs	r3, #48	; 0x30
 8011f46:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	2b09      	cmp	r3, #9
 8011f4c:	d80e      	bhi.n	8011f6c <get_ldnumber+0x72>
 8011f4e:	68fa      	ldr	r2, [r7, #12]
 8011f50:	697b      	ldr	r3, [r7, #20]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	d10a      	bne.n	8011f6c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011f56:	68bb      	ldr	r3, [r7, #8]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d107      	bne.n	8011f6c <get_ldnumber+0x72>
					vol = (int)i;
 8011f5c:	68bb      	ldr	r3, [r7, #8]
 8011f5e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011f60:	697b      	ldr	r3, [r7, #20]
 8011f62:	3301      	adds	r3, #1
 8011f64:	617b      	str	r3, [r7, #20]
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	697a      	ldr	r2, [r7, #20]
 8011f6a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	e002      	b.n	8011f76 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011f70:	2300      	movs	r3, #0
 8011f72:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011f74:	693b      	ldr	r3, [r7, #16]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	371c      	adds	r7, #28
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f80:	4770      	bx	lr
	...

08011f84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b082      	sub	sp, #8
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	6078      	str	r0, [r7, #4]
 8011f8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	2200      	movs	r2, #0
 8011f92:	70da      	strb	r2, [r3, #3]
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f04f 32ff 	mov.w	r2, #4294967295
 8011f9a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011f9c:	6839      	ldr	r1, [r7, #0]
 8011f9e:	6878      	ldr	r0, [r7, #4]
 8011fa0:	f7ff fa1c 	bl	80113dc <move_window>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d001      	beq.n	8011fae <check_fs+0x2a>
 8011faa:	2304      	movs	r3, #4
 8011fac:	e038      	b.n	8012020 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	3330      	adds	r3, #48	; 0x30
 8011fb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	f7ff f8c8 	bl	801114c <ld_word>
 8011fbc:	4603      	mov	r3, r0
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d001      	beq.n	8011fcc <check_fs+0x48>
 8011fc8:	2303      	movs	r3, #3
 8011fca:	e029      	b.n	8012020 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011fd2:	2be9      	cmp	r3, #233	; 0xe9
 8011fd4:	d009      	beq.n	8011fea <check_fs+0x66>
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011fdc:	2beb      	cmp	r3, #235	; 0xeb
 8011fde:	d11e      	bne.n	801201e <check_fs+0x9a>
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011fe6:	2b90      	cmp	r3, #144	; 0x90
 8011fe8:	d119      	bne.n	801201e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	3330      	adds	r3, #48	; 0x30
 8011fee:	3336      	adds	r3, #54	; 0x36
 8011ff0:	4618      	mov	r0, r3
 8011ff2:	f7ff f8c3 	bl	801117c <ld_dword>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011ffc:	4a0a      	ldr	r2, [pc, #40]	; (8012028 <check_fs+0xa4>)
 8011ffe:	4293      	cmp	r3, r2
 8012000:	d101      	bne.n	8012006 <check_fs+0x82>
 8012002:	2300      	movs	r3, #0
 8012004:	e00c      	b.n	8012020 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	3330      	adds	r3, #48	; 0x30
 801200a:	3352      	adds	r3, #82	; 0x52
 801200c:	4618      	mov	r0, r3
 801200e:	f7ff f8b5 	bl	801117c <ld_dword>
 8012012:	4603      	mov	r3, r0
 8012014:	4a05      	ldr	r2, [pc, #20]	; (801202c <check_fs+0xa8>)
 8012016:	4293      	cmp	r3, r2
 8012018:	d101      	bne.n	801201e <check_fs+0x9a>
 801201a:	2300      	movs	r3, #0
 801201c:	e000      	b.n	8012020 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801201e:	2302      	movs	r3, #2
}
 8012020:	4618      	mov	r0, r3
 8012022:	3708      	adds	r7, #8
 8012024:	46bd      	mov	sp, r7
 8012026:	bd80      	pop	{r7, pc}
 8012028:	00544146 	.word	0x00544146
 801202c:	33544146 	.word	0x33544146

08012030 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b096      	sub	sp, #88	; 0x58
 8012034:	af00      	add	r7, sp, #0
 8012036:	60f8      	str	r0, [r7, #12]
 8012038:	60b9      	str	r1, [r7, #8]
 801203a:	4613      	mov	r3, r2
 801203c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	2200      	movs	r2, #0
 8012042:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8012044:	68f8      	ldr	r0, [r7, #12]
 8012046:	f7ff ff58 	bl	8011efa <get_ldnumber>
 801204a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 801204c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801204e:	2b00      	cmp	r3, #0
 8012050:	da01      	bge.n	8012056 <find_volume+0x26>
 8012052:	230b      	movs	r3, #11
 8012054:	e22d      	b.n	80124b2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8012056:	4aa1      	ldr	r2, [pc, #644]	; (80122dc <find_volume+0x2ac>)
 8012058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801205a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801205e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012062:	2b00      	cmp	r3, #0
 8012064:	d101      	bne.n	801206a <find_volume+0x3a>
 8012066:	230c      	movs	r3, #12
 8012068:	e223      	b.n	80124b2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801206e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012070:	79fb      	ldrb	r3, [r7, #7]
 8012072:	f023 0301 	bic.w	r3, r3, #1
 8012076:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d01a      	beq.n	80120b6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012082:	785b      	ldrb	r3, [r3, #1]
 8012084:	4618      	mov	r0, r3
 8012086:	f7fe ffe1 	bl	801104c <disk_status>
 801208a:	4603      	mov	r3, r0
 801208c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012090:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012094:	f003 0301 	and.w	r3, r3, #1
 8012098:	2b00      	cmp	r3, #0
 801209a:	d10c      	bne.n	80120b6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801209c:	79fb      	ldrb	r3, [r7, #7]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d007      	beq.n	80120b2 <find_volume+0x82>
 80120a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80120a6:	f003 0304 	and.w	r3, r3, #4
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d001      	beq.n	80120b2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80120ae:	230a      	movs	r3, #10
 80120b0:	e1ff      	b.n	80124b2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80120b2:	2300      	movs	r3, #0
 80120b4:	e1fd      	b.n	80124b2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80120b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b8:	2200      	movs	r2, #0
 80120ba:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80120bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80120be:	b2da      	uxtb	r2, r3
 80120c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80120c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c6:	785b      	ldrb	r3, [r3, #1]
 80120c8:	4618      	mov	r0, r3
 80120ca:	f7fe ffd9 	bl	8011080 <disk_initialize>
 80120ce:	4603      	mov	r3, r0
 80120d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80120d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80120d8:	f003 0301 	and.w	r3, r3, #1
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d001      	beq.n	80120e4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80120e0:	2303      	movs	r3, #3
 80120e2:	e1e6      	b.n	80124b2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80120e4:	79fb      	ldrb	r3, [r7, #7]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d007      	beq.n	80120fa <find_volume+0xca>
 80120ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80120ee:	f003 0304 	and.w	r3, r3, #4
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d001      	beq.n	80120fa <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80120f6:	230a      	movs	r3, #10
 80120f8:	e1db      	b.n	80124b2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80120fa:	2300      	movs	r3, #0
 80120fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80120fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012100:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012102:	f7ff ff3f 	bl	8011f84 <check_fs>
 8012106:	4603      	mov	r3, r0
 8012108:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801210c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012110:	2b02      	cmp	r3, #2
 8012112:	d149      	bne.n	80121a8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012114:	2300      	movs	r3, #0
 8012116:	643b      	str	r3, [r7, #64]	; 0x40
 8012118:	e01e      	b.n	8012158 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801211a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801211c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012122:	011b      	lsls	r3, r3, #4
 8012124:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012128:	4413      	add	r3, r2
 801212a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801212c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801212e:	3304      	adds	r3, #4
 8012130:	781b      	ldrb	r3, [r3, #0]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d006      	beq.n	8012144 <find_volume+0x114>
 8012136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012138:	3308      	adds	r3, #8
 801213a:	4618      	mov	r0, r3
 801213c:	f7ff f81e 	bl	801117c <ld_dword>
 8012140:	4602      	mov	r2, r0
 8012142:	e000      	b.n	8012146 <find_volume+0x116>
 8012144:	2200      	movs	r2, #0
 8012146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012148:	009b      	lsls	r3, r3, #2
 801214a:	3358      	adds	r3, #88	; 0x58
 801214c:	443b      	add	r3, r7
 801214e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012154:	3301      	adds	r3, #1
 8012156:	643b      	str	r3, [r7, #64]	; 0x40
 8012158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801215a:	2b03      	cmp	r3, #3
 801215c:	d9dd      	bls.n	801211a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801215e:	2300      	movs	r3, #0
 8012160:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012162:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012164:	2b00      	cmp	r3, #0
 8012166:	d002      	beq.n	801216e <find_volume+0x13e>
 8012168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801216a:	3b01      	subs	r3, #1
 801216c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801216e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012170:	009b      	lsls	r3, r3, #2
 8012172:	3358      	adds	r3, #88	; 0x58
 8012174:	443b      	add	r3, r7
 8012176:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801217a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801217c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801217e:	2b00      	cmp	r3, #0
 8012180:	d005      	beq.n	801218e <find_volume+0x15e>
 8012182:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012184:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012186:	f7ff fefd 	bl	8011f84 <check_fs>
 801218a:	4603      	mov	r3, r0
 801218c:	e000      	b.n	8012190 <find_volume+0x160>
 801218e:	2303      	movs	r3, #3
 8012190:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012194:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012198:	2b01      	cmp	r3, #1
 801219a:	d905      	bls.n	80121a8 <find_volume+0x178>
 801219c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801219e:	3301      	adds	r3, #1
 80121a0:	643b      	str	r3, [r7, #64]	; 0x40
 80121a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121a4:	2b03      	cmp	r3, #3
 80121a6:	d9e2      	bls.n	801216e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80121a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121ac:	2b04      	cmp	r3, #4
 80121ae:	d101      	bne.n	80121b4 <find_volume+0x184>
 80121b0:	2301      	movs	r3, #1
 80121b2:	e17e      	b.n	80124b2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80121b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d901      	bls.n	80121c0 <find_volume+0x190>
 80121bc:	230d      	movs	r3, #13
 80121be:	e178      	b.n	80124b2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80121c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c2:	3330      	adds	r3, #48	; 0x30
 80121c4:	330b      	adds	r3, #11
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7fe ffc0 	bl	801114c <ld_word>
 80121cc:	4603      	mov	r3, r0
 80121ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80121d2:	d001      	beq.n	80121d8 <find_volume+0x1a8>
 80121d4:	230d      	movs	r3, #13
 80121d6:	e16c      	b.n	80124b2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80121d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121da:	3330      	adds	r3, #48	; 0x30
 80121dc:	3316      	adds	r3, #22
 80121de:	4618      	mov	r0, r3
 80121e0:	f7fe ffb4 	bl	801114c <ld_word>
 80121e4:	4603      	mov	r3, r0
 80121e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80121e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d106      	bne.n	80121fc <find_volume+0x1cc>
 80121ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121f0:	3330      	adds	r3, #48	; 0x30
 80121f2:	3324      	adds	r3, #36	; 0x24
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7fe ffc1 	bl	801117c <ld_dword>
 80121fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80121fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012200:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012204:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8012208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801220c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801220e:	789b      	ldrb	r3, [r3, #2]
 8012210:	2b01      	cmp	r3, #1
 8012212:	d005      	beq.n	8012220 <find_volume+0x1f0>
 8012214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012216:	789b      	ldrb	r3, [r3, #2]
 8012218:	2b02      	cmp	r3, #2
 801221a:	d001      	beq.n	8012220 <find_volume+0x1f0>
 801221c:	230d      	movs	r3, #13
 801221e:	e148      	b.n	80124b2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012222:	789b      	ldrb	r3, [r3, #2]
 8012224:	461a      	mov	r2, r3
 8012226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012228:	fb02 f303 	mul.w	r3, r2, r3
 801222c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801222e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012234:	b29a      	uxth	r2, r3
 8012236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012238:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801223a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801223c:	895b      	ldrh	r3, [r3, #10]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d008      	beq.n	8012254 <find_volume+0x224>
 8012242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012244:	895b      	ldrh	r3, [r3, #10]
 8012246:	461a      	mov	r2, r3
 8012248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801224a:	895b      	ldrh	r3, [r3, #10]
 801224c:	3b01      	subs	r3, #1
 801224e:	4013      	ands	r3, r2
 8012250:	2b00      	cmp	r3, #0
 8012252:	d001      	beq.n	8012258 <find_volume+0x228>
 8012254:	230d      	movs	r3, #13
 8012256:	e12c      	b.n	80124b2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801225a:	3330      	adds	r3, #48	; 0x30
 801225c:	3311      	adds	r3, #17
 801225e:	4618      	mov	r0, r3
 8012260:	f7fe ff74 	bl	801114c <ld_word>
 8012264:	4603      	mov	r3, r0
 8012266:	461a      	mov	r2, r3
 8012268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801226c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226e:	891b      	ldrh	r3, [r3, #8]
 8012270:	f003 030f 	and.w	r3, r3, #15
 8012274:	b29b      	uxth	r3, r3
 8012276:	2b00      	cmp	r3, #0
 8012278:	d001      	beq.n	801227e <find_volume+0x24e>
 801227a:	230d      	movs	r3, #13
 801227c:	e119      	b.n	80124b2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801227e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012280:	3330      	adds	r3, #48	; 0x30
 8012282:	3313      	adds	r3, #19
 8012284:	4618      	mov	r0, r3
 8012286:	f7fe ff61 	bl	801114c <ld_word>
 801228a:	4603      	mov	r3, r0
 801228c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801228e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012290:	2b00      	cmp	r3, #0
 8012292:	d106      	bne.n	80122a2 <find_volume+0x272>
 8012294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012296:	3330      	adds	r3, #48	; 0x30
 8012298:	3320      	adds	r3, #32
 801229a:	4618      	mov	r0, r3
 801229c:	f7fe ff6e 	bl	801117c <ld_dword>
 80122a0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80122a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122a4:	3330      	adds	r3, #48	; 0x30
 80122a6:	330e      	adds	r3, #14
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7fe ff4f 	bl	801114c <ld_word>
 80122ae:	4603      	mov	r3, r0
 80122b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80122b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d101      	bne.n	80122bc <find_volume+0x28c>
 80122b8:	230d      	movs	r3, #13
 80122ba:	e0fa      	b.n	80124b2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80122bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80122be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122c0:	4413      	add	r3, r2
 80122c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122c4:	8912      	ldrh	r2, [r2, #8]
 80122c6:	0912      	lsrs	r2, r2, #4
 80122c8:	b292      	uxth	r2, r2
 80122ca:	4413      	add	r3, r2
 80122cc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80122ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d2:	429a      	cmp	r2, r3
 80122d4:	d204      	bcs.n	80122e0 <find_volume+0x2b0>
 80122d6:	230d      	movs	r3, #13
 80122d8:	e0eb      	b.n	80124b2 <find_volume+0x482>
 80122da:	bf00      	nop
 80122dc:	240011d4 	.word	0x240011d4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80122e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e4:	1ad3      	subs	r3, r2, r3
 80122e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80122e8:	8952      	ldrh	r2, [r2, #10]
 80122ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80122ee:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80122f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d101      	bne.n	80122fa <find_volume+0x2ca>
 80122f6:	230d      	movs	r3, #13
 80122f8:	e0db      	b.n	80124b2 <find_volume+0x482>
		fmt = FS_FAT32;
 80122fa:	2303      	movs	r3, #3
 80122fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012302:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012306:	4293      	cmp	r3, r2
 8012308:	d802      	bhi.n	8012310 <find_volume+0x2e0>
 801230a:	2302      	movs	r3, #2
 801230c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012312:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012316:	4293      	cmp	r3, r2
 8012318:	d802      	bhi.n	8012320 <find_volume+0x2f0>
 801231a:	2301      	movs	r3, #1
 801231c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012322:	1c9a      	adds	r2, r3, #2
 8012324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012326:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8012328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801232a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801232c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801232e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012332:	441a      	add	r2, r3
 8012334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012336:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8012338:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233c:	441a      	add	r2, r3
 801233e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012340:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8012342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012346:	2b03      	cmp	r3, #3
 8012348:	d11e      	bne.n	8012388 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801234a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801234c:	3330      	adds	r3, #48	; 0x30
 801234e:	332a      	adds	r3, #42	; 0x2a
 8012350:	4618      	mov	r0, r3
 8012352:	f7fe fefb 	bl	801114c <ld_word>
 8012356:	4603      	mov	r3, r0
 8012358:	2b00      	cmp	r3, #0
 801235a:	d001      	beq.n	8012360 <find_volume+0x330>
 801235c:	230d      	movs	r3, #13
 801235e:	e0a8      	b.n	80124b2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012362:	891b      	ldrh	r3, [r3, #8]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d001      	beq.n	801236c <find_volume+0x33c>
 8012368:	230d      	movs	r3, #13
 801236a:	e0a2      	b.n	80124b2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801236c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801236e:	3330      	adds	r3, #48	; 0x30
 8012370:	332c      	adds	r3, #44	; 0x2c
 8012372:	4618      	mov	r0, r3
 8012374:	f7fe ff02 	bl	801117c <ld_dword>
 8012378:	4602      	mov	r2, r0
 801237a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801237c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012380:	695b      	ldr	r3, [r3, #20]
 8012382:	009b      	lsls	r3, r3, #2
 8012384:	647b      	str	r3, [r7, #68]	; 0x44
 8012386:	e01f      	b.n	80123c8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801238a:	891b      	ldrh	r3, [r3, #8]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d101      	bne.n	8012394 <find_volume+0x364>
 8012390:	230d      	movs	r3, #13
 8012392:	e08e      	b.n	80124b2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012396:	6a1a      	ldr	r2, [r3, #32]
 8012398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801239a:	441a      	add	r2, r3
 801239c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801239e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80123a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80123a4:	2b02      	cmp	r3, #2
 80123a6:	d103      	bne.n	80123b0 <find_volume+0x380>
 80123a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123aa:	695b      	ldr	r3, [r3, #20]
 80123ac:	005b      	lsls	r3, r3, #1
 80123ae:	e00a      	b.n	80123c6 <find_volume+0x396>
 80123b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123b2:	695a      	ldr	r2, [r3, #20]
 80123b4:	4613      	mov	r3, r2
 80123b6:	005b      	lsls	r3, r3, #1
 80123b8:	4413      	add	r3, r2
 80123ba:	085a      	lsrs	r2, r3, #1
 80123bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123be:	695b      	ldr	r3, [r3, #20]
 80123c0:	f003 0301 	and.w	r3, r3, #1
 80123c4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80123c6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80123c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ca:	699a      	ldr	r2, [r3, #24]
 80123cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123ce:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80123d2:	0a5b      	lsrs	r3, r3, #9
 80123d4:	429a      	cmp	r2, r3
 80123d6:	d201      	bcs.n	80123dc <find_volume+0x3ac>
 80123d8:	230d      	movs	r3, #13
 80123da:	e06a      	b.n	80124b2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80123dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123de:	f04f 32ff 	mov.w	r2, #4294967295
 80123e2:	611a      	str	r2, [r3, #16]
 80123e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123e6:	691a      	ldr	r2, [r3, #16]
 80123e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ea:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80123ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ee:	2280      	movs	r2, #128	; 0x80
 80123f0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80123f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80123f6:	2b03      	cmp	r3, #3
 80123f8:	d149      	bne.n	801248e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80123fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fc:	3330      	adds	r3, #48	; 0x30
 80123fe:	3330      	adds	r3, #48	; 0x30
 8012400:	4618      	mov	r0, r3
 8012402:	f7fe fea3 	bl	801114c <ld_word>
 8012406:	4603      	mov	r3, r0
 8012408:	2b01      	cmp	r3, #1
 801240a:	d140      	bne.n	801248e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 801240c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801240e:	3301      	adds	r3, #1
 8012410:	4619      	mov	r1, r3
 8012412:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012414:	f7fe ffe2 	bl	80113dc <move_window>
 8012418:	4603      	mov	r3, r0
 801241a:	2b00      	cmp	r3, #0
 801241c:	d137      	bne.n	801248e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 801241e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012420:	2200      	movs	r2, #0
 8012422:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012426:	3330      	adds	r3, #48	; 0x30
 8012428:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801242c:	4618      	mov	r0, r3
 801242e:	f7fe fe8d 	bl	801114c <ld_word>
 8012432:	4603      	mov	r3, r0
 8012434:	461a      	mov	r2, r3
 8012436:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801243a:	429a      	cmp	r2, r3
 801243c:	d127      	bne.n	801248e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801243e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012440:	3330      	adds	r3, #48	; 0x30
 8012442:	4618      	mov	r0, r3
 8012444:	f7fe fe9a 	bl	801117c <ld_dword>
 8012448:	4603      	mov	r3, r0
 801244a:	4a1c      	ldr	r2, [pc, #112]	; (80124bc <find_volume+0x48c>)
 801244c:	4293      	cmp	r3, r2
 801244e:	d11e      	bne.n	801248e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012452:	3330      	adds	r3, #48	; 0x30
 8012454:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012458:	4618      	mov	r0, r3
 801245a:	f7fe fe8f 	bl	801117c <ld_dword>
 801245e:	4603      	mov	r3, r0
 8012460:	4a17      	ldr	r2, [pc, #92]	; (80124c0 <find_volume+0x490>)
 8012462:	4293      	cmp	r3, r2
 8012464:	d113      	bne.n	801248e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012468:	3330      	adds	r3, #48	; 0x30
 801246a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801246e:	4618      	mov	r0, r3
 8012470:	f7fe fe84 	bl	801117c <ld_dword>
 8012474:	4602      	mov	r2, r0
 8012476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012478:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801247a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801247c:	3330      	adds	r3, #48	; 0x30
 801247e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012482:	4618      	mov	r0, r3
 8012484:	f7fe fe7a 	bl	801117c <ld_dword>
 8012488:	4602      	mov	r2, r0
 801248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012490:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012494:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012496:	4b0b      	ldr	r3, [pc, #44]	; (80124c4 <find_volume+0x494>)
 8012498:	881b      	ldrh	r3, [r3, #0]
 801249a:	3301      	adds	r3, #1
 801249c:	b29a      	uxth	r2, r3
 801249e:	4b09      	ldr	r3, [pc, #36]	; (80124c4 <find_volume+0x494>)
 80124a0:	801a      	strh	r2, [r3, #0]
 80124a2:	4b08      	ldr	r3, [pc, #32]	; (80124c4 <find_volume+0x494>)
 80124a4:	881a      	ldrh	r2, [r3, #0]
 80124a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124a8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80124aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80124ac:	f7fe ff2e 	bl	801130c <clear_lock>
#endif
	return FR_OK;
 80124b0:	2300      	movs	r3, #0
}
 80124b2:	4618      	mov	r0, r3
 80124b4:	3758      	adds	r7, #88	; 0x58
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	41615252 	.word	0x41615252
 80124c0:	61417272 	.word	0x61417272
 80124c4:	240011d8 	.word	0x240011d8

080124c8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b090      	sub	sp, #64	; 0x40
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
 80124d0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80124d2:	f107 010c 	add.w	r1, r7, #12
 80124d6:	1d3b      	adds	r3, r7, #4
 80124d8:	2200      	movs	r2, #0
 80124da:	4618      	mov	r0, r3
 80124dc:	f7ff fda8 	bl	8012030 <find_volume>
 80124e0:	4603      	mov	r3, r0
 80124e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80124e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d11f      	bne.n	801252e <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80124ee:	687a      	ldr	r2, [r7, #4]
 80124f0:	f107 030c 	add.w	r3, r7, #12
 80124f4:	4611      	mov	r1, r2
 80124f6:	4618      	mov	r0, r3
 80124f8:	f7ff fc8e 	bl	8011e18 <follow_path>
 80124fc:	4603      	mov	r3, r0
 80124fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8012502:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012506:	2b00      	cmp	r3, #0
 8012508:	d111      	bne.n	801252e <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 801250a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801250e:	b25b      	sxtb	r3, r3
 8012510:	2b00      	cmp	r3, #0
 8012512:	da03      	bge.n	801251c <f_stat+0x54>
				res = FR_INVALID_NAME;
 8012514:	2306      	movs	r3, #6
 8012516:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801251a:	e008      	b.n	801252e <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801251c:	683b      	ldr	r3, [r7, #0]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d005      	beq.n	801252e <f_stat+0x66>
 8012522:	f107 030c 	add.w	r3, r7, #12
 8012526:	6839      	ldr	r1, [r7, #0]
 8012528:	4618      	mov	r0, r3
 801252a:	f7ff fb81 	bl	8011c30 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801252e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012532:	4618      	mov	r0, r3
 8012534:	3740      	adds	r7, #64	; 0x40
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}
	...

0801253c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801253c:	b480      	push	{r7}
 801253e:	b087      	sub	sp, #28
 8012540:	af00      	add	r7, sp, #0
 8012542:	60f8      	str	r0, [r7, #12]
 8012544:	60b9      	str	r1, [r7, #8]
 8012546:	4613      	mov	r3, r2
 8012548:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801254a:	2301      	movs	r3, #1
 801254c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801254e:	2300      	movs	r3, #0
 8012550:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012552:	4b1f      	ldr	r3, [pc, #124]	; (80125d0 <FATFS_LinkDriverEx+0x94>)
 8012554:	7a5b      	ldrb	r3, [r3, #9]
 8012556:	b2db      	uxtb	r3, r3
 8012558:	2b00      	cmp	r3, #0
 801255a:	d131      	bne.n	80125c0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801255c:	4b1c      	ldr	r3, [pc, #112]	; (80125d0 <FATFS_LinkDriverEx+0x94>)
 801255e:	7a5b      	ldrb	r3, [r3, #9]
 8012560:	b2db      	uxtb	r3, r3
 8012562:	461a      	mov	r2, r3
 8012564:	4b1a      	ldr	r3, [pc, #104]	; (80125d0 <FATFS_LinkDriverEx+0x94>)
 8012566:	2100      	movs	r1, #0
 8012568:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801256a:	4b19      	ldr	r3, [pc, #100]	; (80125d0 <FATFS_LinkDriverEx+0x94>)
 801256c:	7a5b      	ldrb	r3, [r3, #9]
 801256e:	b2db      	uxtb	r3, r3
 8012570:	4a17      	ldr	r2, [pc, #92]	; (80125d0 <FATFS_LinkDriverEx+0x94>)
 8012572:	009b      	lsls	r3, r3, #2
 8012574:	4413      	add	r3, r2
 8012576:	68fa      	ldr	r2, [r7, #12]
 8012578:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801257a:	4b15      	ldr	r3, [pc, #84]	; (80125d0 <FATFS_LinkDriverEx+0x94>)
 801257c:	7a5b      	ldrb	r3, [r3, #9]
 801257e:	b2db      	uxtb	r3, r3
 8012580:	461a      	mov	r2, r3
 8012582:	4b13      	ldr	r3, [pc, #76]	; (80125d0 <FATFS_LinkDriverEx+0x94>)
 8012584:	4413      	add	r3, r2
 8012586:	79fa      	ldrb	r2, [r7, #7]
 8012588:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801258a:	4b11      	ldr	r3, [pc, #68]	; (80125d0 <FATFS_LinkDriverEx+0x94>)
 801258c:	7a5b      	ldrb	r3, [r3, #9]
 801258e:	b2db      	uxtb	r3, r3
 8012590:	1c5a      	adds	r2, r3, #1
 8012592:	b2d1      	uxtb	r1, r2
 8012594:	4a0e      	ldr	r2, [pc, #56]	; (80125d0 <FATFS_LinkDriverEx+0x94>)
 8012596:	7251      	strb	r1, [r2, #9]
 8012598:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801259a:	7dbb      	ldrb	r3, [r7, #22]
 801259c:	3330      	adds	r3, #48	; 0x30
 801259e:	b2da      	uxtb	r2, r3
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	3301      	adds	r3, #1
 80125a8:	223a      	movs	r2, #58	; 0x3a
 80125aa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	3302      	adds	r3, #2
 80125b0:	222f      	movs	r2, #47	; 0x2f
 80125b2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80125b4:	68bb      	ldr	r3, [r7, #8]
 80125b6:	3303      	adds	r3, #3
 80125b8:	2200      	movs	r2, #0
 80125ba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80125bc:	2300      	movs	r3, #0
 80125be:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80125c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80125c2:	4618      	mov	r0, r3
 80125c4:	371c      	adds	r7, #28
 80125c6:	46bd      	mov	sp, r7
 80125c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125cc:	4770      	bx	lr
 80125ce:	bf00      	nop
 80125d0:	240011fc 	.word	0x240011fc

080125d4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b082      	sub	sp, #8
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
 80125dc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80125de:	2200      	movs	r2, #0
 80125e0:	6839      	ldr	r1, [r7, #0]
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7ff ffaa 	bl	801253c <FATFS_LinkDriverEx>
 80125e8:	4603      	mov	r3, r0
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	3708      	adds	r7, #8
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bd80      	pop	{r7, pc}

080125f2 <checkint>:
 80125f2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80125f6:	2b7e      	cmp	r3, #126	; 0x7e
 80125f8:	dd10      	ble.n	801261c <checkint+0x2a>
 80125fa:	2b96      	cmp	r3, #150	; 0x96
 80125fc:	dc0c      	bgt.n	8012618 <checkint+0x26>
 80125fe:	2201      	movs	r2, #1
 8012600:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8012604:	fa02 f303 	lsl.w	r3, r2, r3
 8012608:	1e5a      	subs	r2, r3, #1
 801260a:	4202      	tst	r2, r0
 801260c:	d106      	bne.n	801261c <checkint+0x2a>
 801260e:	4203      	tst	r3, r0
 8012610:	bf0c      	ite	eq
 8012612:	2002      	moveq	r0, #2
 8012614:	2001      	movne	r0, #1
 8012616:	4770      	bx	lr
 8012618:	2002      	movs	r0, #2
 801261a:	4770      	bx	lr
 801261c:	2000      	movs	r0, #0
 801261e:	4770      	bx	lr

08012620 <powf>:
 8012620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012622:	ee10 1a10 	vmov	r1, s0
 8012626:	ee10 4a90 	vmov	r4, s1
 801262a:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801262e:	0062      	lsls	r2, r4, #1
 8012630:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8012634:	eef0 7a40 	vmov.f32	s15, s0
 8012638:	f102 30ff 	add.w	r0, r2, #4294967295
 801263c:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8012640:	d252      	bcs.n	80126e8 <powf+0xc8>
 8012642:	4298      	cmp	r0, r3
 8012644:	d252      	bcs.n	80126ec <powf+0xcc>
 8012646:	2000      	movs	r0, #0
 8012648:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 801264c:	4a9e      	ldr	r2, [pc, #632]	; (80128c8 <powf+0x2a8>)
 801264e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8012652:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8012656:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 801265a:	0ddb      	lsrs	r3, r3, #23
 801265c:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8012660:	05db      	lsls	r3, r3, #23
 8012662:	ed94 5b00 	vldr	d5, [r4]
 8012666:	1ac9      	subs	r1, r1, r3
 8012668:	ee07 1a90 	vmov	s15, r1
 801266c:	15db      	asrs	r3, r3, #23
 801266e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8012672:	eea5 6b07 	vfma.f64	d6, d5, d7
 8012676:	ed94 5b02 	vldr	d5, [r4, #8]
 801267a:	ee26 2b06 	vmul.f64	d2, d6, d6
 801267e:	ee22 1b02 	vmul.f64	d1, d2, d2
 8012682:	ee07 3a90 	vmov	s15, r3
 8012686:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 801268a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801268e:	ee37 7b05 	vadd.f64	d7, d7, d5
 8012692:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 8012696:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 801269a:	eea6 3b05 	vfma.f64	d3, d6, d5
 801269e:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 80126a2:	eea6 5b04 	vfma.f64	d5, d6, d4
 80126a6:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 80126aa:	eea6 7b04 	vfma.f64	d7, d6, d4
 80126ae:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 80126b2:	eea2 7b05 	vfma.f64	d7, d2, d5
 80126b6:	eea3 7b01 	vfma.f64	d7, d3, d1
 80126ba:	ee26 6b07 	vmul.f64	d6, d6, d7
 80126be:	ee16 3a90 	vmov	r3, s13
 80126c2:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80126c6:	f248 03bf 	movw	r3, #32959	; 0x80bf
 80126ca:	429a      	cmp	r2, r3
 80126cc:	f0c0 80b0 	bcc.w	8012830 <powf+0x210>
 80126d0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80128a8 <powf+0x288>
 80126d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80126d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126dc:	dd78      	ble.n	80127d0 <powf+0x1b0>
 80126de:	b003      	add	sp, #12
 80126e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80126e4:	f000 b91a 	b.w	801291c <__math_oflowf>
 80126e8:	4298      	cmp	r0, r3
 80126ea:	d32d      	bcc.n	8012748 <powf+0x128>
 80126ec:	b952      	cbnz	r2, 8012704 <powf+0xe4>
 80126ee:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 80126f2:	0049      	lsls	r1, r1, #1
 80126f4:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 80126f8:	f240 80c8 	bls.w	801288c <powf+0x26c>
 80126fc:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8012700:	b003      	add	sp, #12
 8012702:	bd30      	pop	{r4, r5, pc}
 8012704:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8012708:	d105      	bne.n	8012716 <powf+0xf6>
 801270a:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801270e:	0064      	lsls	r4, r4, #1
 8012710:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8012714:	e7f0      	b.n	80126f8 <powf+0xd8>
 8012716:	0049      	lsls	r1, r1, #1
 8012718:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 801271c:	d8ee      	bhi.n	80126fc <powf+0xdc>
 801271e:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8012722:	d1eb      	bne.n	80126fc <powf+0xdc>
 8012724:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8012728:	f000 80b0 	beq.w	801288c <powf+0x26c>
 801272c:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 8012730:	ea6f 0404 	mvn.w	r4, r4
 8012734:	bf34      	ite	cc
 8012736:	2100      	movcc	r1, #0
 8012738:	2101      	movcs	r1, #1
 801273a:	0fe4      	lsrs	r4, r4, #31
 801273c:	42a1      	cmp	r1, r4
 801273e:	f040 80a8 	bne.w	8012892 <powf+0x272>
 8012742:	ee20 0aa0 	vmul.f32	s0, s1, s1
 8012746:	e7db      	b.n	8012700 <powf+0xe0>
 8012748:	004d      	lsls	r5, r1, #1
 801274a:	1e6a      	subs	r2, r5, #1
 801274c:	429a      	cmp	r2, r3
 801274e:	d31c      	bcc.n	801278a <powf+0x16a>
 8012750:	2900      	cmp	r1, #0
 8012752:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012756:	da0f      	bge.n	8012778 <powf+0x158>
 8012758:	ee10 0a90 	vmov	r0, s1
 801275c:	f7ff ff49 	bl	80125f2 <checkint>
 8012760:	2801      	cmp	r0, #1
 8012762:	d109      	bne.n	8012778 <powf+0x158>
 8012764:	eeb1 0a40 	vneg.f32	s0, s0
 8012768:	b945      	cbnz	r5, 801277c <powf+0x15c>
 801276a:	2c00      	cmp	r4, #0
 801276c:	dac8      	bge.n	8012700 <powf+0xe0>
 801276e:	b003      	add	sp, #12
 8012770:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012774:	f000 b8d8 	b.w	8012928 <__math_divzerof>
 8012778:	2000      	movs	r0, #0
 801277a:	e7f5      	b.n	8012768 <powf+0x148>
 801277c:	2c00      	cmp	r4, #0
 801277e:	dabf      	bge.n	8012700 <powf+0xe0>
 8012780:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012784:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012788:	e7ba      	b.n	8012700 <powf+0xe0>
 801278a:	2900      	cmp	r1, #0
 801278c:	da1e      	bge.n	80127cc <powf+0x1ac>
 801278e:	ee10 0a90 	vmov	r0, s1
 8012792:	f7ff ff2e 	bl	80125f2 <checkint>
 8012796:	b920      	cbnz	r0, 80127a2 <powf+0x182>
 8012798:	b003      	add	sp, #12
 801279a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801279e:	f000 b8d5 	b.w	801294c <__math_invalidf>
 80127a2:	1e43      	subs	r3, r0, #1
 80127a4:	4258      	negs	r0, r3
 80127a6:	4158      	adcs	r0, r3
 80127a8:	0400      	lsls	r0, r0, #16
 80127aa:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80127ae:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80127b2:	f4bf af49 	bcs.w	8012648 <powf+0x28>
 80127b6:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80128cc <powf+0x2ac>
 80127ba:	ee27 0a87 	vmul.f32	s0, s15, s14
 80127be:	ee10 3a10 	vmov	r3, s0
 80127c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80127c6:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 80127ca:	e73d      	b.n	8012648 <powf+0x28>
 80127cc:	2000      	movs	r0, #0
 80127ce:	e7ee      	b.n	80127ae <powf+0x18e>
 80127d0:	ed9f 7b37 	vldr	d7, [pc, #220]	; 80128b0 <powf+0x290>
 80127d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80127d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127dc:	dd10      	ble.n	8012800 <powf+0x1e0>
 80127de:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 80127e2:	2800      	cmp	r0, #0
 80127e4:	d158      	bne.n	8012898 <powf+0x278>
 80127e6:	9300      	str	r3, [sp, #0]
 80127e8:	eddd 7a00 	vldr	s15, [sp]
 80127ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80127f4:	eef4 7a47 	vcmp.f32	s15, s14
 80127f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127fc:	f47f af6f 	bne.w	80126de <powf+0xbe>
 8012800:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80128b8 <powf+0x298>
 8012804:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801280c:	d804      	bhi.n	8012818 <powf+0x1f8>
 801280e:	b003      	add	sp, #12
 8012810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012814:	f000 b876 	b.w	8012904 <__math_uflowf>
 8012818:	ed9f 7b29 	vldr	d7, [pc, #164]	; 80128c0 <powf+0x2a0>
 801281c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012824:	d504      	bpl.n	8012830 <powf+0x210>
 8012826:	b003      	add	sp, #12
 8012828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801282c:	f000 b870 	b.w	8012910 <__math_may_uflowf>
 8012830:	4b27      	ldr	r3, [pc, #156]	; (80128d0 <powf+0x2b0>)
 8012832:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8012836:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 801283a:	ee36 7b05 	vadd.f64	d7, d6, d5
 801283e:	ee17 2a10 	vmov	r2, s14
 8012842:	ee37 7b45 	vsub.f64	d7, d7, d5
 8012846:	f002 011f 	and.w	r1, r2, #31
 801284a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801284e:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 8012852:	ee27 4b07 	vmul.f64	d4, d7, d7
 8012856:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801285a:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801285e:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8012862:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012866:	686d      	ldr	r5, [r5, #4]
 8012868:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801286c:	1882      	adds	r2, r0, r2
 801286e:	2300      	movs	r3, #0
 8012870:	1918      	adds	r0, r3, r4
 8012872:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 8012876:	eea7 0b05 	vfma.f64	d0, d7, d5
 801287a:	ec41 0b17 	vmov	d7, r0, r1
 801287e:	eea6 0b04 	vfma.f64	d0, d6, d4
 8012882:	ee20 0b07 	vmul.f64	d0, d0, d7
 8012886:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801288a:	e739      	b.n	8012700 <powf+0xe0>
 801288c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8012890:	e736      	b.n	8012700 <powf+0xe0>
 8012892:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80128d4 <powf+0x2b4>
 8012896:	e733      	b.n	8012700 <powf+0xe0>
 8012898:	9301      	str	r3, [sp, #4]
 801289a:	eddd 7a01 	vldr	s15, [sp, #4]
 801289e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80128a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80128a6:	e7a5      	b.n	80127f4 <powf+0x1d4>
 80128a8:	ffd1d571 	.word	0xffd1d571
 80128ac:	405fffff 	.word	0x405fffff
 80128b0:	ffa3aae2 	.word	0xffa3aae2
 80128b4:	405fffff 	.word	0x405fffff
 80128b8:	00000000 	.word	0x00000000
 80128bc:	c062c000 	.word	0xc062c000
 80128c0:	00000000 	.word	0x00000000
 80128c4:	c062a000 	.word	0xc062a000
 80128c8:	08015848 	.word	0x08015848
 80128cc:	4b000000 	.word	0x4b000000
 80128d0:	08015700 	.word	0x08015700
 80128d4:	00000000 	.word	0x00000000

080128d8 <with_errnof>:
 80128d8:	b513      	push	{r0, r1, r4, lr}
 80128da:	4604      	mov	r4, r0
 80128dc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80128e0:	f000 fee2 	bl	80136a8 <__errno>
 80128e4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80128e8:	6004      	str	r4, [r0, #0]
 80128ea:	b002      	add	sp, #8
 80128ec:	bd10      	pop	{r4, pc}

080128ee <xflowf>:
 80128ee:	b130      	cbz	r0, 80128fe <xflowf+0x10>
 80128f0:	eef1 7a40 	vneg.f32	s15, s0
 80128f4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80128f8:	2022      	movs	r0, #34	; 0x22
 80128fa:	f7ff bfed 	b.w	80128d8 <with_errnof>
 80128fe:	eef0 7a40 	vmov.f32	s15, s0
 8012902:	e7f7      	b.n	80128f4 <xflowf+0x6>

08012904 <__math_uflowf>:
 8012904:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801290c <__math_uflowf+0x8>
 8012908:	f7ff bff1 	b.w	80128ee <xflowf>
 801290c:	10000000 	.word	0x10000000

08012910 <__math_may_uflowf>:
 8012910:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012918 <__math_may_uflowf+0x8>
 8012914:	f7ff bfeb 	b.w	80128ee <xflowf>
 8012918:	1a200000 	.word	0x1a200000

0801291c <__math_oflowf>:
 801291c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012924 <__math_oflowf+0x8>
 8012920:	f7ff bfe5 	b.w	80128ee <xflowf>
 8012924:	70000000 	.word	0x70000000

08012928 <__math_divzerof>:
 8012928:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8012948 <__math_divzerof+0x20>
 801292c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8012930:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012934:	2800      	cmp	r0, #0
 8012936:	f04f 0022 	mov.w	r0, #34	; 0x22
 801293a:	fe47 7a27 	vseleq.f32	s15, s14, s15
 801293e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012942:	f7ff bfc9 	b.w	80128d8 <with_errnof>
 8012946:	bf00      	nop
 8012948:	00000000 	.word	0x00000000

0801294c <__math_invalidf>:
 801294c:	eef0 7a40 	vmov.f32	s15, s0
 8012950:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012954:	eef4 7a67 	vcmp.f32	s15, s15
 8012958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801295c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8012960:	d602      	bvs.n	8012968 <__math_invalidf+0x1c>
 8012962:	2021      	movs	r0, #33	; 0x21
 8012964:	f7ff bfb8 	b.w	80128d8 <with_errnof>
 8012968:	4770      	bx	lr
	...

0801296c <malloc>:
 801296c:	4b02      	ldr	r3, [pc, #8]	; (8012978 <malloc+0xc>)
 801296e:	4601      	mov	r1, r0
 8012970:	6818      	ldr	r0, [r3, #0]
 8012972:	f000 b823 	b.w	80129bc <_malloc_r>
 8012976:	bf00      	nop
 8012978:	2400008c 	.word	0x2400008c

0801297c <sbrk_aligned>:
 801297c:	b570      	push	{r4, r5, r6, lr}
 801297e:	4e0e      	ldr	r6, [pc, #56]	; (80129b8 <sbrk_aligned+0x3c>)
 8012980:	460c      	mov	r4, r1
 8012982:	6831      	ldr	r1, [r6, #0]
 8012984:	4605      	mov	r5, r0
 8012986:	b911      	cbnz	r1, 801298e <sbrk_aligned+0x12>
 8012988:	f000 fe6c 	bl	8013664 <_sbrk_r>
 801298c:	6030      	str	r0, [r6, #0]
 801298e:	4621      	mov	r1, r4
 8012990:	4628      	mov	r0, r5
 8012992:	f000 fe67 	bl	8013664 <_sbrk_r>
 8012996:	1c43      	adds	r3, r0, #1
 8012998:	d00a      	beq.n	80129b0 <sbrk_aligned+0x34>
 801299a:	1cc4      	adds	r4, r0, #3
 801299c:	f024 0403 	bic.w	r4, r4, #3
 80129a0:	42a0      	cmp	r0, r4
 80129a2:	d007      	beq.n	80129b4 <sbrk_aligned+0x38>
 80129a4:	1a21      	subs	r1, r4, r0
 80129a6:	4628      	mov	r0, r5
 80129a8:	f000 fe5c 	bl	8013664 <_sbrk_r>
 80129ac:	3001      	adds	r0, #1
 80129ae:	d101      	bne.n	80129b4 <sbrk_aligned+0x38>
 80129b0:	f04f 34ff 	mov.w	r4, #4294967295
 80129b4:	4620      	mov	r0, r4
 80129b6:	bd70      	pop	{r4, r5, r6, pc}
 80129b8:	2400120c 	.word	0x2400120c

080129bc <_malloc_r>:
 80129bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129c0:	1ccd      	adds	r5, r1, #3
 80129c2:	f025 0503 	bic.w	r5, r5, #3
 80129c6:	3508      	adds	r5, #8
 80129c8:	2d0c      	cmp	r5, #12
 80129ca:	bf38      	it	cc
 80129cc:	250c      	movcc	r5, #12
 80129ce:	2d00      	cmp	r5, #0
 80129d0:	4607      	mov	r7, r0
 80129d2:	db01      	blt.n	80129d8 <_malloc_r+0x1c>
 80129d4:	42a9      	cmp	r1, r5
 80129d6:	d905      	bls.n	80129e4 <_malloc_r+0x28>
 80129d8:	230c      	movs	r3, #12
 80129da:	603b      	str	r3, [r7, #0]
 80129dc:	2600      	movs	r6, #0
 80129de:	4630      	mov	r0, r6
 80129e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012ab8 <_malloc_r+0xfc>
 80129e8:	f000 f868 	bl	8012abc <__malloc_lock>
 80129ec:	f8d8 3000 	ldr.w	r3, [r8]
 80129f0:	461c      	mov	r4, r3
 80129f2:	bb5c      	cbnz	r4, 8012a4c <_malloc_r+0x90>
 80129f4:	4629      	mov	r1, r5
 80129f6:	4638      	mov	r0, r7
 80129f8:	f7ff ffc0 	bl	801297c <sbrk_aligned>
 80129fc:	1c43      	adds	r3, r0, #1
 80129fe:	4604      	mov	r4, r0
 8012a00:	d155      	bne.n	8012aae <_malloc_r+0xf2>
 8012a02:	f8d8 4000 	ldr.w	r4, [r8]
 8012a06:	4626      	mov	r6, r4
 8012a08:	2e00      	cmp	r6, #0
 8012a0a:	d145      	bne.n	8012a98 <_malloc_r+0xdc>
 8012a0c:	2c00      	cmp	r4, #0
 8012a0e:	d048      	beq.n	8012aa2 <_malloc_r+0xe6>
 8012a10:	6823      	ldr	r3, [r4, #0]
 8012a12:	4631      	mov	r1, r6
 8012a14:	4638      	mov	r0, r7
 8012a16:	eb04 0903 	add.w	r9, r4, r3
 8012a1a:	f000 fe23 	bl	8013664 <_sbrk_r>
 8012a1e:	4581      	cmp	r9, r0
 8012a20:	d13f      	bne.n	8012aa2 <_malloc_r+0xe6>
 8012a22:	6821      	ldr	r1, [r4, #0]
 8012a24:	1a6d      	subs	r5, r5, r1
 8012a26:	4629      	mov	r1, r5
 8012a28:	4638      	mov	r0, r7
 8012a2a:	f7ff ffa7 	bl	801297c <sbrk_aligned>
 8012a2e:	3001      	adds	r0, #1
 8012a30:	d037      	beq.n	8012aa2 <_malloc_r+0xe6>
 8012a32:	6823      	ldr	r3, [r4, #0]
 8012a34:	442b      	add	r3, r5
 8012a36:	6023      	str	r3, [r4, #0]
 8012a38:	f8d8 3000 	ldr.w	r3, [r8]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d038      	beq.n	8012ab2 <_malloc_r+0xf6>
 8012a40:	685a      	ldr	r2, [r3, #4]
 8012a42:	42a2      	cmp	r2, r4
 8012a44:	d12b      	bne.n	8012a9e <_malloc_r+0xe2>
 8012a46:	2200      	movs	r2, #0
 8012a48:	605a      	str	r2, [r3, #4]
 8012a4a:	e00f      	b.n	8012a6c <_malloc_r+0xb0>
 8012a4c:	6822      	ldr	r2, [r4, #0]
 8012a4e:	1b52      	subs	r2, r2, r5
 8012a50:	d41f      	bmi.n	8012a92 <_malloc_r+0xd6>
 8012a52:	2a0b      	cmp	r2, #11
 8012a54:	d917      	bls.n	8012a86 <_malloc_r+0xca>
 8012a56:	1961      	adds	r1, r4, r5
 8012a58:	42a3      	cmp	r3, r4
 8012a5a:	6025      	str	r5, [r4, #0]
 8012a5c:	bf18      	it	ne
 8012a5e:	6059      	strne	r1, [r3, #4]
 8012a60:	6863      	ldr	r3, [r4, #4]
 8012a62:	bf08      	it	eq
 8012a64:	f8c8 1000 	streq.w	r1, [r8]
 8012a68:	5162      	str	r2, [r4, r5]
 8012a6a:	604b      	str	r3, [r1, #4]
 8012a6c:	4638      	mov	r0, r7
 8012a6e:	f104 060b 	add.w	r6, r4, #11
 8012a72:	f000 f829 	bl	8012ac8 <__malloc_unlock>
 8012a76:	f026 0607 	bic.w	r6, r6, #7
 8012a7a:	1d23      	adds	r3, r4, #4
 8012a7c:	1af2      	subs	r2, r6, r3
 8012a7e:	d0ae      	beq.n	80129de <_malloc_r+0x22>
 8012a80:	1b9b      	subs	r3, r3, r6
 8012a82:	50a3      	str	r3, [r4, r2]
 8012a84:	e7ab      	b.n	80129de <_malloc_r+0x22>
 8012a86:	42a3      	cmp	r3, r4
 8012a88:	6862      	ldr	r2, [r4, #4]
 8012a8a:	d1dd      	bne.n	8012a48 <_malloc_r+0x8c>
 8012a8c:	f8c8 2000 	str.w	r2, [r8]
 8012a90:	e7ec      	b.n	8012a6c <_malloc_r+0xb0>
 8012a92:	4623      	mov	r3, r4
 8012a94:	6864      	ldr	r4, [r4, #4]
 8012a96:	e7ac      	b.n	80129f2 <_malloc_r+0x36>
 8012a98:	4634      	mov	r4, r6
 8012a9a:	6876      	ldr	r6, [r6, #4]
 8012a9c:	e7b4      	b.n	8012a08 <_malloc_r+0x4c>
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	e7cc      	b.n	8012a3c <_malloc_r+0x80>
 8012aa2:	230c      	movs	r3, #12
 8012aa4:	603b      	str	r3, [r7, #0]
 8012aa6:	4638      	mov	r0, r7
 8012aa8:	f000 f80e 	bl	8012ac8 <__malloc_unlock>
 8012aac:	e797      	b.n	80129de <_malloc_r+0x22>
 8012aae:	6025      	str	r5, [r4, #0]
 8012ab0:	e7dc      	b.n	8012a6c <_malloc_r+0xb0>
 8012ab2:	605b      	str	r3, [r3, #4]
 8012ab4:	deff      	udf	#255	; 0xff
 8012ab6:	bf00      	nop
 8012ab8:	24001208 	.word	0x24001208

08012abc <__malloc_lock>:
 8012abc:	4801      	ldr	r0, [pc, #4]	; (8012ac4 <__malloc_lock+0x8>)
 8012abe:	f7f0 bf22 	b.w	8003906 <__retarget_lock_acquire_recursive>
 8012ac2:	bf00      	nop
 8012ac4:	240011c4 	.word	0x240011c4

08012ac8 <__malloc_unlock>:
 8012ac8:	4801      	ldr	r0, [pc, #4]	; (8012ad0 <__malloc_unlock+0x8>)
 8012aca:	f7f0 bf30 	b.w	800392e <__retarget_lock_release_recursive>
 8012ace:	bf00      	nop
 8012ad0:	240011c4 	.word	0x240011c4

08012ad4 <__cvt>:
 8012ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ad6:	ed2d 8b02 	vpush	{d8}
 8012ada:	eeb0 8b40 	vmov.f64	d8, d0
 8012ade:	b085      	sub	sp, #20
 8012ae0:	4617      	mov	r7, r2
 8012ae2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8012ae4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8012ae6:	ee18 2a90 	vmov	r2, s17
 8012aea:	f025 0520 	bic.w	r5, r5, #32
 8012aee:	2a00      	cmp	r2, #0
 8012af0:	bfb6      	itet	lt
 8012af2:	222d      	movlt	r2, #45	; 0x2d
 8012af4:	2200      	movge	r2, #0
 8012af6:	eeb1 8b40 	vneglt.f64	d8, d0
 8012afa:	2d46      	cmp	r5, #70	; 0x46
 8012afc:	460c      	mov	r4, r1
 8012afe:	701a      	strb	r2, [r3, #0]
 8012b00:	d004      	beq.n	8012b0c <__cvt+0x38>
 8012b02:	2d45      	cmp	r5, #69	; 0x45
 8012b04:	d100      	bne.n	8012b08 <__cvt+0x34>
 8012b06:	3401      	adds	r4, #1
 8012b08:	2102      	movs	r1, #2
 8012b0a:	e000      	b.n	8012b0e <__cvt+0x3a>
 8012b0c:	2103      	movs	r1, #3
 8012b0e:	ab03      	add	r3, sp, #12
 8012b10:	9301      	str	r3, [sp, #4]
 8012b12:	ab02      	add	r3, sp, #8
 8012b14:	9300      	str	r3, [sp, #0]
 8012b16:	4622      	mov	r2, r4
 8012b18:	4633      	mov	r3, r6
 8012b1a:	eeb0 0b48 	vmov.f64	d0, d8
 8012b1e:	f000 fe77 	bl	8013810 <_dtoa_r>
 8012b22:	2d47      	cmp	r5, #71	; 0x47
 8012b24:	d101      	bne.n	8012b2a <__cvt+0x56>
 8012b26:	07fb      	lsls	r3, r7, #31
 8012b28:	d51a      	bpl.n	8012b60 <__cvt+0x8c>
 8012b2a:	2d46      	cmp	r5, #70	; 0x46
 8012b2c:	eb00 0204 	add.w	r2, r0, r4
 8012b30:	d10c      	bne.n	8012b4c <__cvt+0x78>
 8012b32:	7803      	ldrb	r3, [r0, #0]
 8012b34:	2b30      	cmp	r3, #48	; 0x30
 8012b36:	d107      	bne.n	8012b48 <__cvt+0x74>
 8012b38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012b3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b40:	bf1c      	itt	ne
 8012b42:	f1c4 0401 	rsbne	r4, r4, #1
 8012b46:	6034      	strne	r4, [r6, #0]
 8012b48:	6833      	ldr	r3, [r6, #0]
 8012b4a:	441a      	add	r2, r3
 8012b4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b54:	bf08      	it	eq
 8012b56:	9203      	streq	r2, [sp, #12]
 8012b58:	2130      	movs	r1, #48	; 0x30
 8012b5a:	9b03      	ldr	r3, [sp, #12]
 8012b5c:	4293      	cmp	r3, r2
 8012b5e:	d307      	bcc.n	8012b70 <__cvt+0x9c>
 8012b60:	9b03      	ldr	r3, [sp, #12]
 8012b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b64:	1a1b      	subs	r3, r3, r0
 8012b66:	6013      	str	r3, [r2, #0]
 8012b68:	b005      	add	sp, #20
 8012b6a:	ecbd 8b02 	vpop	{d8}
 8012b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b70:	1c5c      	adds	r4, r3, #1
 8012b72:	9403      	str	r4, [sp, #12]
 8012b74:	7019      	strb	r1, [r3, #0]
 8012b76:	e7f0      	b.n	8012b5a <__cvt+0x86>

08012b78 <__exponent>:
 8012b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b7a:	4603      	mov	r3, r0
 8012b7c:	2900      	cmp	r1, #0
 8012b7e:	bfb8      	it	lt
 8012b80:	4249      	neglt	r1, r1
 8012b82:	f803 2b02 	strb.w	r2, [r3], #2
 8012b86:	bfb4      	ite	lt
 8012b88:	222d      	movlt	r2, #45	; 0x2d
 8012b8a:	222b      	movge	r2, #43	; 0x2b
 8012b8c:	2909      	cmp	r1, #9
 8012b8e:	7042      	strb	r2, [r0, #1]
 8012b90:	dd2a      	ble.n	8012be8 <__exponent+0x70>
 8012b92:	f10d 0207 	add.w	r2, sp, #7
 8012b96:	4617      	mov	r7, r2
 8012b98:	260a      	movs	r6, #10
 8012b9a:	4694      	mov	ip, r2
 8012b9c:	fb91 f5f6 	sdiv	r5, r1, r6
 8012ba0:	fb06 1415 	mls	r4, r6, r5, r1
 8012ba4:	3430      	adds	r4, #48	; 0x30
 8012ba6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8012baa:	460c      	mov	r4, r1
 8012bac:	2c63      	cmp	r4, #99	; 0x63
 8012bae:	f102 32ff 	add.w	r2, r2, #4294967295
 8012bb2:	4629      	mov	r1, r5
 8012bb4:	dcf1      	bgt.n	8012b9a <__exponent+0x22>
 8012bb6:	3130      	adds	r1, #48	; 0x30
 8012bb8:	f1ac 0402 	sub.w	r4, ip, #2
 8012bbc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012bc0:	1c41      	adds	r1, r0, #1
 8012bc2:	4622      	mov	r2, r4
 8012bc4:	42ba      	cmp	r2, r7
 8012bc6:	d30a      	bcc.n	8012bde <__exponent+0x66>
 8012bc8:	f10d 0209 	add.w	r2, sp, #9
 8012bcc:	eba2 020c 	sub.w	r2, r2, ip
 8012bd0:	42bc      	cmp	r4, r7
 8012bd2:	bf88      	it	hi
 8012bd4:	2200      	movhi	r2, #0
 8012bd6:	4413      	add	r3, r2
 8012bd8:	1a18      	subs	r0, r3, r0
 8012bda:	b003      	add	sp, #12
 8012bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012bde:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012be2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8012be6:	e7ed      	b.n	8012bc4 <__exponent+0x4c>
 8012be8:	2330      	movs	r3, #48	; 0x30
 8012bea:	3130      	adds	r1, #48	; 0x30
 8012bec:	7083      	strb	r3, [r0, #2]
 8012bee:	70c1      	strb	r1, [r0, #3]
 8012bf0:	1d03      	adds	r3, r0, #4
 8012bf2:	e7f1      	b.n	8012bd8 <__exponent+0x60>
 8012bf4:	0000      	movs	r0, r0
	...

08012bf8 <_printf_float>:
 8012bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bfc:	b08b      	sub	sp, #44	; 0x2c
 8012bfe:	460c      	mov	r4, r1
 8012c00:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8012c04:	4616      	mov	r6, r2
 8012c06:	461f      	mov	r7, r3
 8012c08:	4605      	mov	r5, r0
 8012c0a:	f000 fcf3 	bl	80135f4 <_localeconv_r>
 8012c0e:	f8d0 b000 	ldr.w	fp, [r0]
 8012c12:	4658      	mov	r0, fp
 8012c14:	f7ed fbcc 	bl	80003b0 <strlen>
 8012c18:	2300      	movs	r3, #0
 8012c1a:	9308      	str	r3, [sp, #32]
 8012c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8012c20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012c24:	6822      	ldr	r2, [r4, #0]
 8012c26:	3307      	adds	r3, #7
 8012c28:	f023 0307 	bic.w	r3, r3, #7
 8012c2c:	f103 0108 	add.w	r1, r3, #8
 8012c30:	f8c8 1000 	str.w	r1, [r8]
 8012c34:	ed93 0b00 	vldr	d0, [r3]
 8012c38:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8012e98 <_printf_float+0x2a0>
 8012c3c:	eeb0 7bc0 	vabs.f64	d7, d0
 8012c40:	eeb4 7b46 	vcmp.f64	d7, d6
 8012c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c48:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8012c4c:	4682      	mov	sl, r0
 8012c4e:	dd24      	ble.n	8012c9a <_printf_float+0xa2>
 8012c50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c58:	d502      	bpl.n	8012c60 <_printf_float+0x68>
 8012c5a:	232d      	movs	r3, #45	; 0x2d
 8012c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c60:	498f      	ldr	r1, [pc, #572]	; (8012ea0 <_printf_float+0x2a8>)
 8012c62:	4b90      	ldr	r3, [pc, #576]	; (8012ea4 <_printf_float+0x2ac>)
 8012c64:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8012c68:	bf94      	ite	ls
 8012c6a:	4688      	movls	r8, r1
 8012c6c:	4698      	movhi	r8, r3
 8012c6e:	2303      	movs	r3, #3
 8012c70:	6123      	str	r3, [r4, #16]
 8012c72:	f022 0204 	bic.w	r2, r2, #4
 8012c76:	2300      	movs	r3, #0
 8012c78:	6022      	str	r2, [r4, #0]
 8012c7a:	9304      	str	r3, [sp, #16]
 8012c7c:	9700      	str	r7, [sp, #0]
 8012c7e:	4633      	mov	r3, r6
 8012c80:	aa09      	add	r2, sp, #36	; 0x24
 8012c82:	4621      	mov	r1, r4
 8012c84:	4628      	mov	r0, r5
 8012c86:	f000 f9d1 	bl	801302c <_printf_common>
 8012c8a:	3001      	adds	r0, #1
 8012c8c:	f040 808a 	bne.w	8012da4 <_printf_float+0x1ac>
 8012c90:	f04f 30ff 	mov.w	r0, #4294967295
 8012c94:	b00b      	add	sp, #44	; 0x2c
 8012c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c9a:	eeb4 0b40 	vcmp.f64	d0, d0
 8012c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca2:	d709      	bvc.n	8012cb8 <_printf_float+0xc0>
 8012ca4:	ee10 3a90 	vmov	r3, s1
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	bfbc      	itt	lt
 8012cac:	232d      	movlt	r3, #45	; 0x2d
 8012cae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012cb2:	497d      	ldr	r1, [pc, #500]	; (8012ea8 <_printf_float+0x2b0>)
 8012cb4:	4b7d      	ldr	r3, [pc, #500]	; (8012eac <_printf_float+0x2b4>)
 8012cb6:	e7d5      	b.n	8012c64 <_printf_float+0x6c>
 8012cb8:	6863      	ldr	r3, [r4, #4]
 8012cba:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8012cbe:	9104      	str	r1, [sp, #16]
 8012cc0:	1c59      	adds	r1, r3, #1
 8012cc2:	d13c      	bne.n	8012d3e <_printf_float+0x146>
 8012cc4:	2306      	movs	r3, #6
 8012cc6:	6063      	str	r3, [r4, #4]
 8012cc8:	2300      	movs	r3, #0
 8012cca:	9303      	str	r3, [sp, #12]
 8012ccc:	ab08      	add	r3, sp, #32
 8012cce:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012cd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8012cd6:	ab07      	add	r3, sp, #28
 8012cd8:	6861      	ldr	r1, [r4, #4]
 8012cda:	9300      	str	r3, [sp, #0]
 8012cdc:	6022      	str	r2, [r4, #0]
 8012cde:	f10d 031b 	add.w	r3, sp, #27
 8012ce2:	4628      	mov	r0, r5
 8012ce4:	f7ff fef6 	bl	8012ad4 <__cvt>
 8012ce8:	9b04      	ldr	r3, [sp, #16]
 8012cea:	9907      	ldr	r1, [sp, #28]
 8012cec:	2b47      	cmp	r3, #71	; 0x47
 8012cee:	4680      	mov	r8, r0
 8012cf0:	d108      	bne.n	8012d04 <_printf_float+0x10c>
 8012cf2:	1cc8      	adds	r0, r1, #3
 8012cf4:	db02      	blt.n	8012cfc <_printf_float+0x104>
 8012cf6:	6863      	ldr	r3, [r4, #4]
 8012cf8:	4299      	cmp	r1, r3
 8012cfa:	dd41      	ble.n	8012d80 <_printf_float+0x188>
 8012cfc:	f1a9 0902 	sub.w	r9, r9, #2
 8012d00:	fa5f f989 	uxtb.w	r9, r9
 8012d04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012d08:	d820      	bhi.n	8012d4c <_printf_float+0x154>
 8012d0a:	3901      	subs	r1, #1
 8012d0c:	464a      	mov	r2, r9
 8012d0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012d12:	9107      	str	r1, [sp, #28]
 8012d14:	f7ff ff30 	bl	8012b78 <__exponent>
 8012d18:	9a08      	ldr	r2, [sp, #32]
 8012d1a:	9004      	str	r0, [sp, #16]
 8012d1c:	1813      	adds	r3, r2, r0
 8012d1e:	2a01      	cmp	r2, #1
 8012d20:	6123      	str	r3, [r4, #16]
 8012d22:	dc02      	bgt.n	8012d2a <_printf_float+0x132>
 8012d24:	6822      	ldr	r2, [r4, #0]
 8012d26:	07d2      	lsls	r2, r2, #31
 8012d28:	d501      	bpl.n	8012d2e <_printf_float+0x136>
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	6123      	str	r3, [r4, #16]
 8012d2e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d0a2      	beq.n	8012c7c <_printf_float+0x84>
 8012d36:	232d      	movs	r3, #45	; 0x2d
 8012d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d3c:	e79e      	b.n	8012c7c <_printf_float+0x84>
 8012d3e:	9904      	ldr	r1, [sp, #16]
 8012d40:	2947      	cmp	r1, #71	; 0x47
 8012d42:	d1c1      	bne.n	8012cc8 <_printf_float+0xd0>
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d1bf      	bne.n	8012cc8 <_printf_float+0xd0>
 8012d48:	2301      	movs	r3, #1
 8012d4a:	e7bc      	b.n	8012cc6 <_printf_float+0xce>
 8012d4c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8012d50:	d118      	bne.n	8012d84 <_printf_float+0x18c>
 8012d52:	2900      	cmp	r1, #0
 8012d54:	6863      	ldr	r3, [r4, #4]
 8012d56:	dd0b      	ble.n	8012d70 <_printf_float+0x178>
 8012d58:	6121      	str	r1, [r4, #16]
 8012d5a:	b913      	cbnz	r3, 8012d62 <_printf_float+0x16a>
 8012d5c:	6822      	ldr	r2, [r4, #0]
 8012d5e:	07d0      	lsls	r0, r2, #31
 8012d60:	d502      	bpl.n	8012d68 <_printf_float+0x170>
 8012d62:	3301      	adds	r3, #1
 8012d64:	440b      	add	r3, r1
 8012d66:	6123      	str	r3, [r4, #16]
 8012d68:	2300      	movs	r3, #0
 8012d6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8012d6c:	9304      	str	r3, [sp, #16]
 8012d6e:	e7de      	b.n	8012d2e <_printf_float+0x136>
 8012d70:	b913      	cbnz	r3, 8012d78 <_printf_float+0x180>
 8012d72:	6822      	ldr	r2, [r4, #0]
 8012d74:	07d2      	lsls	r2, r2, #31
 8012d76:	d501      	bpl.n	8012d7c <_printf_float+0x184>
 8012d78:	3302      	adds	r3, #2
 8012d7a:	e7f4      	b.n	8012d66 <_printf_float+0x16e>
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e7f2      	b.n	8012d66 <_printf_float+0x16e>
 8012d80:	f04f 0967 	mov.w	r9, #103	; 0x67
 8012d84:	9b08      	ldr	r3, [sp, #32]
 8012d86:	4299      	cmp	r1, r3
 8012d88:	db05      	blt.n	8012d96 <_printf_float+0x19e>
 8012d8a:	6823      	ldr	r3, [r4, #0]
 8012d8c:	6121      	str	r1, [r4, #16]
 8012d8e:	07d8      	lsls	r0, r3, #31
 8012d90:	d5ea      	bpl.n	8012d68 <_printf_float+0x170>
 8012d92:	1c4b      	adds	r3, r1, #1
 8012d94:	e7e7      	b.n	8012d66 <_printf_float+0x16e>
 8012d96:	2900      	cmp	r1, #0
 8012d98:	bfd4      	ite	le
 8012d9a:	f1c1 0202 	rsble	r2, r1, #2
 8012d9e:	2201      	movgt	r2, #1
 8012da0:	4413      	add	r3, r2
 8012da2:	e7e0      	b.n	8012d66 <_printf_float+0x16e>
 8012da4:	6823      	ldr	r3, [r4, #0]
 8012da6:	055a      	lsls	r2, r3, #21
 8012da8:	d407      	bmi.n	8012dba <_printf_float+0x1c2>
 8012daa:	6923      	ldr	r3, [r4, #16]
 8012dac:	4642      	mov	r2, r8
 8012dae:	4631      	mov	r1, r6
 8012db0:	4628      	mov	r0, r5
 8012db2:	47b8      	blx	r7
 8012db4:	3001      	adds	r0, #1
 8012db6:	d12a      	bne.n	8012e0e <_printf_float+0x216>
 8012db8:	e76a      	b.n	8012c90 <_printf_float+0x98>
 8012dba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8012dbe:	f240 80e0 	bls.w	8012f82 <_printf_float+0x38a>
 8012dc2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012dc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dce:	d133      	bne.n	8012e38 <_printf_float+0x240>
 8012dd0:	4a37      	ldr	r2, [pc, #220]	; (8012eb0 <_printf_float+0x2b8>)
 8012dd2:	2301      	movs	r3, #1
 8012dd4:	4631      	mov	r1, r6
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	47b8      	blx	r7
 8012dda:	3001      	adds	r0, #1
 8012ddc:	f43f af58 	beq.w	8012c90 <_printf_float+0x98>
 8012de0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	db02      	blt.n	8012dee <_printf_float+0x1f6>
 8012de8:	6823      	ldr	r3, [r4, #0]
 8012dea:	07d8      	lsls	r0, r3, #31
 8012dec:	d50f      	bpl.n	8012e0e <_printf_float+0x216>
 8012dee:	4653      	mov	r3, sl
 8012df0:	465a      	mov	r2, fp
 8012df2:	4631      	mov	r1, r6
 8012df4:	4628      	mov	r0, r5
 8012df6:	47b8      	blx	r7
 8012df8:	3001      	adds	r0, #1
 8012dfa:	f43f af49 	beq.w	8012c90 <_printf_float+0x98>
 8012dfe:	f04f 0800 	mov.w	r8, #0
 8012e02:	f104 091a 	add.w	r9, r4, #26
 8012e06:	9b08      	ldr	r3, [sp, #32]
 8012e08:	3b01      	subs	r3, #1
 8012e0a:	4543      	cmp	r3, r8
 8012e0c:	dc09      	bgt.n	8012e22 <_printf_float+0x22a>
 8012e0e:	6823      	ldr	r3, [r4, #0]
 8012e10:	079b      	lsls	r3, r3, #30
 8012e12:	f100 8106 	bmi.w	8013022 <_printf_float+0x42a>
 8012e16:	68e0      	ldr	r0, [r4, #12]
 8012e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e1a:	4298      	cmp	r0, r3
 8012e1c:	bfb8      	it	lt
 8012e1e:	4618      	movlt	r0, r3
 8012e20:	e738      	b.n	8012c94 <_printf_float+0x9c>
 8012e22:	2301      	movs	r3, #1
 8012e24:	464a      	mov	r2, r9
 8012e26:	4631      	mov	r1, r6
 8012e28:	4628      	mov	r0, r5
 8012e2a:	47b8      	blx	r7
 8012e2c:	3001      	adds	r0, #1
 8012e2e:	f43f af2f 	beq.w	8012c90 <_printf_float+0x98>
 8012e32:	f108 0801 	add.w	r8, r8, #1
 8012e36:	e7e6      	b.n	8012e06 <_printf_float+0x20e>
 8012e38:	9b07      	ldr	r3, [sp, #28]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	dc3a      	bgt.n	8012eb4 <_printf_float+0x2bc>
 8012e3e:	4a1c      	ldr	r2, [pc, #112]	; (8012eb0 <_printf_float+0x2b8>)
 8012e40:	2301      	movs	r3, #1
 8012e42:	4631      	mov	r1, r6
 8012e44:	4628      	mov	r0, r5
 8012e46:	47b8      	blx	r7
 8012e48:	3001      	adds	r0, #1
 8012e4a:	f43f af21 	beq.w	8012c90 <_printf_float+0x98>
 8012e4e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8012e52:	4313      	orrs	r3, r2
 8012e54:	d102      	bne.n	8012e5c <_printf_float+0x264>
 8012e56:	6823      	ldr	r3, [r4, #0]
 8012e58:	07d9      	lsls	r1, r3, #31
 8012e5a:	d5d8      	bpl.n	8012e0e <_printf_float+0x216>
 8012e5c:	4653      	mov	r3, sl
 8012e5e:	465a      	mov	r2, fp
 8012e60:	4631      	mov	r1, r6
 8012e62:	4628      	mov	r0, r5
 8012e64:	47b8      	blx	r7
 8012e66:	3001      	adds	r0, #1
 8012e68:	f43f af12 	beq.w	8012c90 <_printf_float+0x98>
 8012e6c:	f04f 0900 	mov.w	r9, #0
 8012e70:	f104 0a1a 	add.w	sl, r4, #26
 8012e74:	9b07      	ldr	r3, [sp, #28]
 8012e76:	425b      	negs	r3, r3
 8012e78:	454b      	cmp	r3, r9
 8012e7a:	dc01      	bgt.n	8012e80 <_printf_float+0x288>
 8012e7c:	9b08      	ldr	r3, [sp, #32]
 8012e7e:	e795      	b.n	8012dac <_printf_float+0x1b4>
 8012e80:	2301      	movs	r3, #1
 8012e82:	4652      	mov	r2, sl
 8012e84:	4631      	mov	r1, r6
 8012e86:	4628      	mov	r0, r5
 8012e88:	47b8      	blx	r7
 8012e8a:	3001      	adds	r0, #1
 8012e8c:	f43f af00 	beq.w	8012c90 <_printf_float+0x98>
 8012e90:	f109 0901 	add.w	r9, r9, #1
 8012e94:	e7ee      	b.n	8012e74 <_printf_float+0x27c>
 8012e96:	bf00      	nop
 8012e98:	ffffffff 	.word	0xffffffff
 8012e9c:	7fefffff 	.word	0x7fefffff
 8012ea0:	08015970 	.word	0x08015970
 8012ea4:	08015974 	.word	0x08015974
 8012ea8:	08015978 	.word	0x08015978
 8012eac:	0801597c 	.word	0x0801597c
 8012eb0:	08015980 	.word	0x08015980
 8012eb4:	9a08      	ldr	r2, [sp, #32]
 8012eb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012eb8:	429a      	cmp	r2, r3
 8012eba:	bfa8      	it	ge
 8012ebc:	461a      	movge	r2, r3
 8012ebe:	2a00      	cmp	r2, #0
 8012ec0:	4691      	mov	r9, r2
 8012ec2:	dc38      	bgt.n	8012f36 <_printf_float+0x33e>
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	9305      	str	r3, [sp, #20]
 8012ec8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ecc:	f104 021a 	add.w	r2, r4, #26
 8012ed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012ed2:	9905      	ldr	r1, [sp, #20]
 8012ed4:	9304      	str	r3, [sp, #16]
 8012ed6:	eba3 0309 	sub.w	r3, r3, r9
 8012eda:	428b      	cmp	r3, r1
 8012edc:	dc33      	bgt.n	8012f46 <_printf_float+0x34e>
 8012ede:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	db3c      	blt.n	8012f60 <_printf_float+0x368>
 8012ee6:	6823      	ldr	r3, [r4, #0]
 8012ee8:	07da      	lsls	r2, r3, #31
 8012eea:	d439      	bmi.n	8012f60 <_printf_float+0x368>
 8012eec:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8012ef0:	eba2 0903 	sub.w	r9, r2, r3
 8012ef4:	9b04      	ldr	r3, [sp, #16]
 8012ef6:	1ad2      	subs	r2, r2, r3
 8012ef8:	4591      	cmp	r9, r2
 8012efa:	bfa8      	it	ge
 8012efc:	4691      	movge	r9, r2
 8012efe:	f1b9 0f00 	cmp.w	r9, #0
 8012f02:	dc35      	bgt.n	8012f70 <_printf_float+0x378>
 8012f04:	f04f 0800 	mov.w	r8, #0
 8012f08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012f0c:	f104 0a1a 	add.w	sl, r4, #26
 8012f10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012f14:	1a9b      	subs	r3, r3, r2
 8012f16:	eba3 0309 	sub.w	r3, r3, r9
 8012f1a:	4543      	cmp	r3, r8
 8012f1c:	f77f af77 	ble.w	8012e0e <_printf_float+0x216>
 8012f20:	2301      	movs	r3, #1
 8012f22:	4652      	mov	r2, sl
 8012f24:	4631      	mov	r1, r6
 8012f26:	4628      	mov	r0, r5
 8012f28:	47b8      	blx	r7
 8012f2a:	3001      	adds	r0, #1
 8012f2c:	f43f aeb0 	beq.w	8012c90 <_printf_float+0x98>
 8012f30:	f108 0801 	add.w	r8, r8, #1
 8012f34:	e7ec      	b.n	8012f10 <_printf_float+0x318>
 8012f36:	4613      	mov	r3, r2
 8012f38:	4631      	mov	r1, r6
 8012f3a:	4642      	mov	r2, r8
 8012f3c:	4628      	mov	r0, r5
 8012f3e:	47b8      	blx	r7
 8012f40:	3001      	adds	r0, #1
 8012f42:	d1bf      	bne.n	8012ec4 <_printf_float+0x2cc>
 8012f44:	e6a4      	b.n	8012c90 <_printf_float+0x98>
 8012f46:	2301      	movs	r3, #1
 8012f48:	4631      	mov	r1, r6
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	9204      	str	r2, [sp, #16]
 8012f4e:	47b8      	blx	r7
 8012f50:	3001      	adds	r0, #1
 8012f52:	f43f ae9d 	beq.w	8012c90 <_printf_float+0x98>
 8012f56:	9b05      	ldr	r3, [sp, #20]
 8012f58:	9a04      	ldr	r2, [sp, #16]
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	9305      	str	r3, [sp, #20]
 8012f5e:	e7b7      	b.n	8012ed0 <_printf_float+0x2d8>
 8012f60:	4653      	mov	r3, sl
 8012f62:	465a      	mov	r2, fp
 8012f64:	4631      	mov	r1, r6
 8012f66:	4628      	mov	r0, r5
 8012f68:	47b8      	blx	r7
 8012f6a:	3001      	adds	r0, #1
 8012f6c:	d1be      	bne.n	8012eec <_printf_float+0x2f4>
 8012f6e:	e68f      	b.n	8012c90 <_printf_float+0x98>
 8012f70:	9a04      	ldr	r2, [sp, #16]
 8012f72:	464b      	mov	r3, r9
 8012f74:	4442      	add	r2, r8
 8012f76:	4631      	mov	r1, r6
 8012f78:	4628      	mov	r0, r5
 8012f7a:	47b8      	blx	r7
 8012f7c:	3001      	adds	r0, #1
 8012f7e:	d1c1      	bne.n	8012f04 <_printf_float+0x30c>
 8012f80:	e686      	b.n	8012c90 <_printf_float+0x98>
 8012f82:	9a08      	ldr	r2, [sp, #32]
 8012f84:	2a01      	cmp	r2, #1
 8012f86:	dc01      	bgt.n	8012f8c <_printf_float+0x394>
 8012f88:	07db      	lsls	r3, r3, #31
 8012f8a:	d537      	bpl.n	8012ffc <_printf_float+0x404>
 8012f8c:	2301      	movs	r3, #1
 8012f8e:	4642      	mov	r2, r8
 8012f90:	4631      	mov	r1, r6
 8012f92:	4628      	mov	r0, r5
 8012f94:	47b8      	blx	r7
 8012f96:	3001      	adds	r0, #1
 8012f98:	f43f ae7a 	beq.w	8012c90 <_printf_float+0x98>
 8012f9c:	4653      	mov	r3, sl
 8012f9e:	465a      	mov	r2, fp
 8012fa0:	4631      	mov	r1, r6
 8012fa2:	4628      	mov	r0, r5
 8012fa4:	47b8      	blx	r7
 8012fa6:	3001      	adds	r0, #1
 8012fa8:	f43f ae72 	beq.w	8012c90 <_printf_float+0x98>
 8012fac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8012fb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fb8:	9b08      	ldr	r3, [sp, #32]
 8012fba:	d01a      	beq.n	8012ff2 <_printf_float+0x3fa>
 8012fbc:	3b01      	subs	r3, #1
 8012fbe:	f108 0201 	add.w	r2, r8, #1
 8012fc2:	4631      	mov	r1, r6
 8012fc4:	4628      	mov	r0, r5
 8012fc6:	47b8      	blx	r7
 8012fc8:	3001      	adds	r0, #1
 8012fca:	d10e      	bne.n	8012fea <_printf_float+0x3f2>
 8012fcc:	e660      	b.n	8012c90 <_printf_float+0x98>
 8012fce:	2301      	movs	r3, #1
 8012fd0:	464a      	mov	r2, r9
 8012fd2:	4631      	mov	r1, r6
 8012fd4:	4628      	mov	r0, r5
 8012fd6:	47b8      	blx	r7
 8012fd8:	3001      	adds	r0, #1
 8012fda:	f43f ae59 	beq.w	8012c90 <_printf_float+0x98>
 8012fde:	f108 0801 	add.w	r8, r8, #1
 8012fe2:	9b08      	ldr	r3, [sp, #32]
 8012fe4:	3b01      	subs	r3, #1
 8012fe6:	4543      	cmp	r3, r8
 8012fe8:	dcf1      	bgt.n	8012fce <_printf_float+0x3d6>
 8012fea:	9b04      	ldr	r3, [sp, #16]
 8012fec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012ff0:	e6dd      	b.n	8012dae <_printf_float+0x1b6>
 8012ff2:	f04f 0800 	mov.w	r8, #0
 8012ff6:	f104 091a 	add.w	r9, r4, #26
 8012ffa:	e7f2      	b.n	8012fe2 <_printf_float+0x3ea>
 8012ffc:	2301      	movs	r3, #1
 8012ffe:	4642      	mov	r2, r8
 8013000:	e7df      	b.n	8012fc2 <_printf_float+0x3ca>
 8013002:	2301      	movs	r3, #1
 8013004:	464a      	mov	r2, r9
 8013006:	4631      	mov	r1, r6
 8013008:	4628      	mov	r0, r5
 801300a:	47b8      	blx	r7
 801300c:	3001      	adds	r0, #1
 801300e:	f43f ae3f 	beq.w	8012c90 <_printf_float+0x98>
 8013012:	f108 0801 	add.w	r8, r8, #1
 8013016:	68e3      	ldr	r3, [r4, #12]
 8013018:	9909      	ldr	r1, [sp, #36]	; 0x24
 801301a:	1a5b      	subs	r3, r3, r1
 801301c:	4543      	cmp	r3, r8
 801301e:	dcf0      	bgt.n	8013002 <_printf_float+0x40a>
 8013020:	e6f9      	b.n	8012e16 <_printf_float+0x21e>
 8013022:	f04f 0800 	mov.w	r8, #0
 8013026:	f104 0919 	add.w	r9, r4, #25
 801302a:	e7f4      	b.n	8013016 <_printf_float+0x41e>

0801302c <_printf_common>:
 801302c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013030:	4616      	mov	r6, r2
 8013032:	4699      	mov	r9, r3
 8013034:	688a      	ldr	r2, [r1, #8]
 8013036:	690b      	ldr	r3, [r1, #16]
 8013038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801303c:	4293      	cmp	r3, r2
 801303e:	bfb8      	it	lt
 8013040:	4613      	movlt	r3, r2
 8013042:	6033      	str	r3, [r6, #0]
 8013044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013048:	4607      	mov	r7, r0
 801304a:	460c      	mov	r4, r1
 801304c:	b10a      	cbz	r2, 8013052 <_printf_common+0x26>
 801304e:	3301      	adds	r3, #1
 8013050:	6033      	str	r3, [r6, #0]
 8013052:	6823      	ldr	r3, [r4, #0]
 8013054:	0699      	lsls	r1, r3, #26
 8013056:	bf42      	ittt	mi
 8013058:	6833      	ldrmi	r3, [r6, #0]
 801305a:	3302      	addmi	r3, #2
 801305c:	6033      	strmi	r3, [r6, #0]
 801305e:	6825      	ldr	r5, [r4, #0]
 8013060:	f015 0506 	ands.w	r5, r5, #6
 8013064:	d106      	bne.n	8013074 <_printf_common+0x48>
 8013066:	f104 0a19 	add.w	sl, r4, #25
 801306a:	68e3      	ldr	r3, [r4, #12]
 801306c:	6832      	ldr	r2, [r6, #0]
 801306e:	1a9b      	subs	r3, r3, r2
 8013070:	42ab      	cmp	r3, r5
 8013072:	dc26      	bgt.n	80130c2 <_printf_common+0x96>
 8013074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013078:	1e13      	subs	r3, r2, #0
 801307a:	6822      	ldr	r2, [r4, #0]
 801307c:	bf18      	it	ne
 801307e:	2301      	movne	r3, #1
 8013080:	0692      	lsls	r2, r2, #26
 8013082:	d42b      	bmi.n	80130dc <_printf_common+0xb0>
 8013084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013088:	4649      	mov	r1, r9
 801308a:	4638      	mov	r0, r7
 801308c:	47c0      	blx	r8
 801308e:	3001      	adds	r0, #1
 8013090:	d01e      	beq.n	80130d0 <_printf_common+0xa4>
 8013092:	6823      	ldr	r3, [r4, #0]
 8013094:	6922      	ldr	r2, [r4, #16]
 8013096:	f003 0306 	and.w	r3, r3, #6
 801309a:	2b04      	cmp	r3, #4
 801309c:	bf02      	ittt	eq
 801309e:	68e5      	ldreq	r5, [r4, #12]
 80130a0:	6833      	ldreq	r3, [r6, #0]
 80130a2:	1aed      	subeq	r5, r5, r3
 80130a4:	68a3      	ldr	r3, [r4, #8]
 80130a6:	bf0c      	ite	eq
 80130a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80130ac:	2500      	movne	r5, #0
 80130ae:	4293      	cmp	r3, r2
 80130b0:	bfc4      	itt	gt
 80130b2:	1a9b      	subgt	r3, r3, r2
 80130b4:	18ed      	addgt	r5, r5, r3
 80130b6:	2600      	movs	r6, #0
 80130b8:	341a      	adds	r4, #26
 80130ba:	42b5      	cmp	r5, r6
 80130bc:	d11a      	bne.n	80130f4 <_printf_common+0xc8>
 80130be:	2000      	movs	r0, #0
 80130c0:	e008      	b.n	80130d4 <_printf_common+0xa8>
 80130c2:	2301      	movs	r3, #1
 80130c4:	4652      	mov	r2, sl
 80130c6:	4649      	mov	r1, r9
 80130c8:	4638      	mov	r0, r7
 80130ca:	47c0      	blx	r8
 80130cc:	3001      	adds	r0, #1
 80130ce:	d103      	bne.n	80130d8 <_printf_common+0xac>
 80130d0:	f04f 30ff 	mov.w	r0, #4294967295
 80130d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130d8:	3501      	adds	r5, #1
 80130da:	e7c6      	b.n	801306a <_printf_common+0x3e>
 80130dc:	18e1      	adds	r1, r4, r3
 80130de:	1c5a      	adds	r2, r3, #1
 80130e0:	2030      	movs	r0, #48	; 0x30
 80130e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80130e6:	4422      	add	r2, r4
 80130e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80130ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80130f0:	3302      	adds	r3, #2
 80130f2:	e7c7      	b.n	8013084 <_printf_common+0x58>
 80130f4:	2301      	movs	r3, #1
 80130f6:	4622      	mov	r2, r4
 80130f8:	4649      	mov	r1, r9
 80130fa:	4638      	mov	r0, r7
 80130fc:	47c0      	blx	r8
 80130fe:	3001      	adds	r0, #1
 8013100:	d0e6      	beq.n	80130d0 <_printf_common+0xa4>
 8013102:	3601      	adds	r6, #1
 8013104:	e7d9      	b.n	80130ba <_printf_common+0x8e>
	...

08013108 <_printf_i>:
 8013108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801310c:	7e0f      	ldrb	r7, [r1, #24]
 801310e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013110:	2f78      	cmp	r7, #120	; 0x78
 8013112:	4691      	mov	r9, r2
 8013114:	4680      	mov	r8, r0
 8013116:	460c      	mov	r4, r1
 8013118:	469a      	mov	sl, r3
 801311a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801311e:	d807      	bhi.n	8013130 <_printf_i+0x28>
 8013120:	2f62      	cmp	r7, #98	; 0x62
 8013122:	d80a      	bhi.n	801313a <_printf_i+0x32>
 8013124:	2f00      	cmp	r7, #0
 8013126:	f000 80d4 	beq.w	80132d2 <_printf_i+0x1ca>
 801312a:	2f58      	cmp	r7, #88	; 0x58
 801312c:	f000 80c0 	beq.w	80132b0 <_printf_i+0x1a8>
 8013130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013138:	e03a      	b.n	80131b0 <_printf_i+0xa8>
 801313a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801313e:	2b15      	cmp	r3, #21
 8013140:	d8f6      	bhi.n	8013130 <_printf_i+0x28>
 8013142:	a101      	add	r1, pc, #4	; (adr r1, 8013148 <_printf_i+0x40>)
 8013144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013148:	080131a1 	.word	0x080131a1
 801314c:	080131b5 	.word	0x080131b5
 8013150:	08013131 	.word	0x08013131
 8013154:	08013131 	.word	0x08013131
 8013158:	08013131 	.word	0x08013131
 801315c:	08013131 	.word	0x08013131
 8013160:	080131b5 	.word	0x080131b5
 8013164:	08013131 	.word	0x08013131
 8013168:	08013131 	.word	0x08013131
 801316c:	08013131 	.word	0x08013131
 8013170:	08013131 	.word	0x08013131
 8013174:	080132b9 	.word	0x080132b9
 8013178:	080131e1 	.word	0x080131e1
 801317c:	08013273 	.word	0x08013273
 8013180:	08013131 	.word	0x08013131
 8013184:	08013131 	.word	0x08013131
 8013188:	080132db 	.word	0x080132db
 801318c:	08013131 	.word	0x08013131
 8013190:	080131e1 	.word	0x080131e1
 8013194:	08013131 	.word	0x08013131
 8013198:	08013131 	.word	0x08013131
 801319c:	0801327b 	.word	0x0801327b
 80131a0:	682b      	ldr	r3, [r5, #0]
 80131a2:	1d1a      	adds	r2, r3, #4
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	602a      	str	r2, [r5, #0]
 80131a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80131ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80131b0:	2301      	movs	r3, #1
 80131b2:	e09f      	b.n	80132f4 <_printf_i+0x1ec>
 80131b4:	6820      	ldr	r0, [r4, #0]
 80131b6:	682b      	ldr	r3, [r5, #0]
 80131b8:	0607      	lsls	r7, r0, #24
 80131ba:	f103 0104 	add.w	r1, r3, #4
 80131be:	6029      	str	r1, [r5, #0]
 80131c0:	d501      	bpl.n	80131c6 <_printf_i+0xbe>
 80131c2:	681e      	ldr	r6, [r3, #0]
 80131c4:	e003      	b.n	80131ce <_printf_i+0xc6>
 80131c6:	0646      	lsls	r6, r0, #25
 80131c8:	d5fb      	bpl.n	80131c2 <_printf_i+0xba>
 80131ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80131ce:	2e00      	cmp	r6, #0
 80131d0:	da03      	bge.n	80131da <_printf_i+0xd2>
 80131d2:	232d      	movs	r3, #45	; 0x2d
 80131d4:	4276      	negs	r6, r6
 80131d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131da:	485a      	ldr	r0, [pc, #360]	; (8013344 <_printf_i+0x23c>)
 80131dc:	230a      	movs	r3, #10
 80131de:	e012      	b.n	8013206 <_printf_i+0xfe>
 80131e0:	682b      	ldr	r3, [r5, #0]
 80131e2:	6820      	ldr	r0, [r4, #0]
 80131e4:	1d19      	adds	r1, r3, #4
 80131e6:	6029      	str	r1, [r5, #0]
 80131e8:	0605      	lsls	r5, r0, #24
 80131ea:	d501      	bpl.n	80131f0 <_printf_i+0xe8>
 80131ec:	681e      	ldr	r6, [r3, #0]
 80131ee:	e002      	b.n	80131f6 <_printf_i+0xee>
 80131f0:	0641      	lsls	r1, r0, #25
 80131f2:	d5fb      	bpl.n	80131ec <_printf_i+0xe4>
 80131f4:	881e      	ldrh	r6, [r3, #0]
 80131f6:	4853      	ldr	r0, [pc, #332]	; (8013344 <_printf_i+0x23c>)
 80131f8:	2f6f      	cmp	r7, #111	; 0x6f
 80131fa:	bf0c      	ite	eq
 80131fc:	2308      	moveq	r3, #8
 80131fe:	230a      	movne	r3, #10
 8013200:	2100      	movs	r1, #0
 8013202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013206:	6865      	ldr	r5, [r4, #4]
 8013208:	60a5      	str	r5, [r4, #8]
 801320a:	2d00      	cmp	r5, #0
 801320c:	bfa2      	ittt	ge
 801320e:	6821      	ldrge	r1, [r4, #0]
 8013210:	f021 0104 	bicge.w	r1, r1, #4
 8013214:	6021      	strge	r1, [r4, #0]
 8013216:	b90e      	cbnz	r6, 801321c <_printf_i+0x114>
 8013218:	2d00      	cmp	r5, #0
 801321a:	d04b      	beq.n	80132b4 <_printf_i+0x1ac>
 801321c:	4615      	mov	r5, r2
 801321e:	fbb6 f1f3 	udiv	r1, r6, r3
 8013222:	fb03 6711 	mls	r7, r3, r1, r6
 8013226:	5dc7      	ldrb	r7, [r0, r7]
 8013228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801322c:	4637      	mov	r7, r6
 801322e:	42bb      	cmp	r3, r7
 8013230:	460e      	mov	r6, r1
 8013232:	d9f4      	bls.n	801321e <_printf_i+0x116>
 8013234:	2b08      	cmp	r3, #8
 8013236:	d10b      	bne.n	8013250 <_printf_i+0x148>
 8013238:	6823      	ldr	r3, [r4, #0]
 801323a:	07de      	lsls	r6, r3, #31
 801323c:	d508      	bpl.n	8013250 <_printf_i+0x148>
 801323e:	6923      	ldr	r3, [r4, #16]
 8013240:	6861      	ldr	r1, [r4, #4]
 8013242:	4299      	cmp	r1, r3
 8013244:	bfde      	ittt	le
 8013246:	2330      	movle	r3, #48	; 0x30
 8013248:	f805 3c01 	strble.w	r3, [r5, #-1]
 801324c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013250:	1b52      	subs	r2, r2, r5
 8013252:	6122      	str	r2, [r4, #16]
 8013254:	f8cd a000 	str.w	sl, [sp]
 8013258:	464b      	mov	r3, r9
 801325a:	aa03      	add	r2, sp, #12
 801325c:	4621      	mov	r1, r4
 801325e:	4640      	mov	r0, r8
 8013260:	f7ff fee4 	bl	801302c <_printf_common>
 8013264:	3001      	adds	r0, #1
 8013266:	d14a      	bne.n	80132fe <_printf_i+0x1f6>
 8013268:	f04f 30ff 	mov.w	r0, #4294967295
 801326c:	b004      	add	sp, #16
 801326e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013272:	6823      	ldr	r3, [r4, #0]
 8013274:	f043 0320 	orr.w	r3, r3, #32
 8013278:	6023      	str	r3, [r4, #0]
 801327a:	4833      	ldr	r0, [pc, #204]	; (8013348 <_printf_i+0x240>)
 801327c:	2778      	movs	r7, #120	; 0x78
 801327e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013282:	6823      	ldr	r3, [r4, #0]
 8013284:	6829      	ldr	r1, [r5, #0]
 8013286:	061f      	lsls	r7, r3, #24
 8013288:	f851 6b04 	ldr.w	r6, [r1], #4
 801328c:	d402      	bmi.n	8013294 <_printf_i+0x18c>
 801328e:	065f      	lsls	r7, r3, #25
 8013290:	bf48      	it	mi
 8013292:	b2b6      	uxthmi	r6, r6
 8013294:	07df      	lsls	r7, r3, #31
 8013296:	bf48      	it	mi
 8013298:	f043 0320 	orrmi.w	r3, r3, #32
 801329c:	6029      	str	r1, [r5, #0]
 801329e:	bf48      	it	mi
 80132a0:	6023      	strmi	r3, [r4, #0]
 80132a2:	b91e      	cbnz	r6, 80132ac <_printf_i+0x1a4>
 80132a4:	6823      	ldr	r3, [r4, #0]
 80132a6:	f023 0320 	bic.w	r3, r3, #32
 80132aa:	6023      	str	r3, [r4, #0]
 80132ac:	2310      	movs	r3, #16
 80132ae:	e7a7      	b.n	8013200 <_printf_i+0xf8>
 80132b0:	4824      	ldr	r0, [pc, #144]	; (8013344 <_printf_i+0x23c>)
 80132b2:	e7e4      	b.n	801327e <_printf_i+0x176>
 80132b4:	4615      	mov	r5, r2
 80132b6:	e7bd      	b.n	8013234 <_printf_i+0x12c>
 80132b8:	682b      	ldr	r3, [r5, #0]
 80132ba:	6826      	ldr	r6, [r4, #0]
 80132bc:	6961      	ldr	r1, [r4, #20]
 80132be:	1d18      	adds	r0, r3, #4
 80132c0:	6028      	str	r0, [r5, #0]
 80132c2:	0635      	lsls	r5, r6, #24
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	d501      	bpl.n	80132cc <_printf_i+0x1c4>
 80132c8:	6019      	str	r1, [r3, #0]
 80132ca:	e002      	b.n	80132d2 <_printf_i+0x1ca>
 80132cc:	0670      	lsls	r0, r6, #25
 80132ce:	d5fb      	bpl.n	80132c8 <_printf_i+0x1c0>
 80132d0:	8019      	strh	r1, [r3, #0]
 80132d2:	2300      	movs	r3, #0
 80132d4:	6123      	str	r3, [r4, #16]
 80132d6:	4615      	mov	r5, r2
 80132d8:	e7bc      	b.n	8013254 <_printf_i+0x14c>
 80132da:	682b      	ldr	r3, [r5, #0]
 80132dc:	1d1a      	adds	r2, r3, #4
 80132de:	602a      	str	r2, [r5, #0]
 80132e0:	681d      	ldr	r5, [r3, #0]
 80132e2:	6862      	ldr	r2, [r4, #4]
 80132e4:	2100      	movs	r1, #0
 80132e6:	4628      	mov	r0, r5
 80132e8:	f7ed f812 	bl	8000310 <memchr>
 80132ec:	b108      	cbz	r0, 80132f2 <_printf_i+0x1ea>
 80132ee:	1b40      	subs	r0, r0, r5
 80132f0:	6060      	str	r0, [r4, #4]
 80132f2:	6863      	ldr	r3, [r4, #4]
 80132f4:	6123      	str	r3, [r4, #16]
 80132f6:	2300      	movs	r3, #0
 80132f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132fc:	e7aa      	b.n	8013254 <_printf_i+0x14c>
 80132fe:	6923      	ldr	r3, [r4, #16]
 8013300:	462a      	mov	r2, r5
 8013302:	4649      	mov	r1, r9
 8013304:	4640      	mov	r0, r8
 8013306:	47d0      	blx	sl
 8013308:	3001      	adds	r0, #1
 801330a:	d0ad      	beq.n	8013268 <_printf_i+0x160>
 801330c:	6823      	ldr	r3, [r4, #0]
 801330e:	079b      	lsls	r3, r3, #30
 8013310:	d413      	bmi.n	801333a <_printf_i+0x232>
 8013312:	68e0      	ldr	r0, [r4, #12]
 8013314:	9b03      	ldr	r3, [sp, #12]
 8013316:	4298      	cmp	r0, r3
 8013318:	bfb8      	it	lt
 801331a:	4618      	movlt	r0, r3
 801331c:	e7a6      	b.n	801326c <_printf_i+0x164>
 801331e:	2301      	movs	r3, #1
 8013320:	4632      	mov	r2, r6
 8013322:	4649      	mov	r1, r9
 8013324:	4640      	mov	r0, r8
 8013326:	47d0      	blx	sl
 8013328:	3001      	adds	r0, #1
 801332a:	d09d      	beq.n	8013268 <_printf_i+0x160>
 801332c:	3501      	adds	r5, #1
 801332e:	68e3      	ldr	r3, [r4, #12]
 8013330:	9903      	ldr	r1, [sp, #12]
 8013332:	1a5b      	subs	r3, r3, r1
 8013334:	42ab      	cmp	r3, r5
 8013336:	dcf2      	bgt.n	801331e <_printf_i+0x216>
 8013338:	e7eb      	b.n	8013312 <_printf_i+0x20a>
 801333a:	2500      	movs	r5, #0
 801333c:	f104 0619 	add.w	r6, r4, #25
 8013340:	e7f5      	b.n	801332e <_printf_i+0x226>
 8013342:	bf00      	nop
 8013344:	08015982 	.word	0x08015982
 8013348:	08015993 	.word	0x08015993

0801334c <std>:
 801334c:	2300      	movs	r3, #0
 801334e:	b510      	push	{r4, lr}
 8013350:	4604      	mov	r4, r0
 8013352:	e9c0 3300 	strd	r3, r3, [r0]
 8013356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801335a:	6083      	str	r3, [r0, #8]
 801335c:	8181      	strh	r1, [r0, #12]
 801335e:	6643      	str	r3, [r0, #100]	; 0x64
 8013360:	81c2      	strh	r2, [r0, #14]
 8013362:	6183      	str	r3, [r0, #24]
 8013364:	4619      	mov	r1, r3
 8013366:	2208      	movs	r2, #8
 8013368:	305c      	adds	r0, #92	; 0x5c
 801336a:	f000 f93a 	bl	80135e2 <memset>
 801336e:	4b0d      	ldr	r3, [pc, #52]	; (80133a4 <std+0x58>)
 8013370:	6263      	str	r3, [r4, #36]	; 0x24
 8013372:	4b0d      	ldr	r3, [pc, #52]	; (80133a8 <std+0x5c>)
 8013374:	62a3      	str	r3, [r4, #40]	; 0x28
 8013376:	4b0d      	ldr	r3, [pc, #52]	; (80133ac <std+0x60>)
 8013378:	62e3      	str	r3, [r4, #44]	; 0x2c
 801337a:	4b0d      	ldr	r3, [pc, #52]	; (80133b0 <std+0x64>)
 801337c:	6323      	str	r3, [r4, #48]	; 0x30
 801337e:	4b0d      	ldr	r3, [pc, #52]	; (80133b4 <std+0x68>)
 8013380:	6224      	str	r4, [r4, #32]
 8013382:	429c      	cmp	r4, r3
 8013384:	d006      	beq.n	8013394 <std+0x48>
 8013386:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801338a:	4294      	cmp	r4, r2
 801338c:	d002      	beq.n	8013394 <std+0x48>
 801338e:	33d0      	adds	r3, #208	; 0xd0
 8013390:	429c      	cmp	r4, r3
 8013392:	d105      	bne.n	80133a0 <std+0x54>
 8013394:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801339c:	f7f0 ba8d 	b.w	80038ba <__retarget_lock_init_recursive>
 80133a0:	bd10      	pop	{r4, pc}
 80133a2:	bf00      	nop
 80133a4:	0801355d 	.word	0x0801355d
 80133a8:	0801357f 	.word	0x0801357f
 80133ac:	080135b7 	.word	0x080135b7
 80133b0:	080135db 	.word	0x080135db
 80133b4:	24001210 	.word	0x24001210

080133b8 <stdio_exit_handler>:
 80133b8:	4a02      	ldr	r2, [pc, #8]	; (80133c4 <stdio_exit_handler+0xc>)
 80133ba:	4903      	ldr	r1, [pc, #12]	; (80133c8 <stdio_exit_handler+0x10>)
 80133bc:	4803      	ldr	r0, [pc, #12]	; (80133cc <stdio_exit_handler+0x14>)
 80133be:	f000 b869 	b.w	8013494 <_fwalk_sglue>
 80133c2:	bf00      	nop
 80133c4:	24000034 	.word	0x24000034
 80133c8:	080150bd 	.word	0x080150bd
 80133cc:	24000040 	.word	0x24000040

080133d0 <cleanup_stdio>:
 80133d0:	6841      	ldr	r1, [r0, #4]
 80133d2:	4b0c      	ldr	r3, [pc, #48]	; (8013404 <cleanup_stdio+0x34>)
 80133d4:	4299      	cmp	r1, r3
 80133d6:	b510      	push	{r4, lr}
 80133d8:	4604      	mov	r4, r0
 80133da:	d001      	beq.n	80133e0 <cleanup_stdio+0x10>
 80133dc:	f001 fe6e 	bl	80150bc <_fflush_r>
 80133e0:	68a1      	ldr	r1, [r4, #8]
 80133e2:	4b09      	ldr	r3, [pc, #36]	; (8013408 <cleanup_stdio+0x38>)
 80133e4:	4299      	cmp	r1, r3
 80133e6:	d002      	beq.n	80133ee <cleanup_stdio+0x1e>
 80133e8:	4620      	mov	r0, r4
 80133ea:	f001 fe67 	bl	80150bc <_fflush_r>
 80133ee:	68e1      	ldr	r1, [r4, #12]
 80133f0:	4b06      	ldr	r3, [pc, #24]	; (801340c <cleanup_stdio+0x3c>)
 80133f2:	4299      	cmp	r1, r3
 80133f4:	d004      	beq.n	8013400 <cleanup_stdio+0x30>
 80133f6:	4620      	mov	r0, r4
 80133f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133fc:	f001 be5e 	b.w	80150bc <_fflush_r>
 8013400:	bd10      	pop	{r4, pc}
 8013402:	bf00      	nop
 8013404:	24001210 	.word	0x24001210
 8013408:	24001278 	.word	0x24001278
 801340c:	240012e0 	.word	0x240012e0

08013410 <global_stdio_init.part.0>:
 8013410:	b510      	push	{r4, lr}
 8013412:	4b0b      	ldr	r3, [pc, #44]	; (8013440 <global_stdio_init.part.0+0x30>)
 8013414:	4c0b      	ldr	r4, [pc, #44]	; (8013444 <global_stdio_init.part.0+0x34>)
 8013416:	4a0c      	ldr	r2, [pc, #48]	; (8013448 <global_stdio_init.part.0+0x38>)
 8013418:	601a      	str	r2, [r3, #0]
 801341a:	4620      	mov	r0, r4
 801341c:	2200      	movs	r2, #0
 801341e:	2104      	movs	r1, #4
 8013420:	f7ff ff94 	bl	801334c <std>
 8013424:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013428:	2201      	movs	r2, #1
 801342a:	2109      	movs	r1, #9
 801342c:	f7ff ff8e 	bl	801334c <std>
 8013430:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013434:	2202      	movs	r2, #2
 8013436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801343a:	2112      	movs	r1, #18
 801343c:	f7ff bf86 	b.w	801334c <std>
 8013440:	24001348 	.word	0x24001348
 8013444:	24001210 	.word	0x24001210
 8013448:	080133b9 	.word	0x080133b9

0801344c <__sfp_lock_acquire>:
 801344c:	4801      	ldr	r0, [pc, #4]	; (8013454 <__sfp_lock_acquire+0x8>)
 801344e:	f7f0 ba5a 	b.w	8003906 <__retarget_lock_acquire_recursive>
 8013452:	bf00      	nop
 8013454:	240011c0 	.word	0x240011c0

08013458 <__sfp_lock_release>:
 8013458:	4801      	ldr	r0, [pc, #4]	; (8013460 <__sfp_lock_release+0x8>)
 801345a:	f7f0 ba68 	b.w	800392e <__retarget_lock_release_recursive>
 801345e:	bf00      	nop
 8013460:	240011c0 	.word	0x240011c0

08013464 <__sinit>:
 8013464:	b510      	push	{r4, lr}
 8013466:	4604      	mov	r4, r0
 8013468:	f7ff fff0 	bl	801344c <__sfp_lock_acquire>
 801346c:	6a23      	ldr	r3, [r4, #32]
 801346e:	b11b      	cbz	r3, 8013478 <__sinit+0x14>
 8013470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013474:	f7ff bff0 	b.w	8013458 <__sfp_lock_release>
 8013478:	4b04      	ldr	r3, [pc, #16]	; (801348c <__sinit+0x28>)
 801347a:	6223      	str	r3, [r4, #32]
 801347c:	4b04      	ldr	r3, [pc, #16]	; (8013490 <__sinit+0x2c>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d1f5      	bne.n	8013470 <__sinit+0xc>
 8013484:	f7ff ffc4 	bl	8013410 <global_stdio_init.part.0>
 8013488:	e7f2      	b.n	8013470 <__sinit+0xc>
 801348a:	bf00      	nop
 801348c:	080133d1 	.word	0x080133d1
 8013490:	24001348 	.word	0x24001348

08013494 <_fwalk_sglue>:
 8013494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013498:	4607      	mov	r7, r0
 801349a:	4688      	mov	r8, r1
 801349c:	4614      	mov	r4, r2
 801349e:	2600      	movs	r6, #0
 80134a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80134a4:	f1b9 0901 	subs.w	r9, r9, #1
 80134a8:	d505      	bpl.n	80134b6 <_fwalk_sglue+0x22>
 80134aa:	6824      	ldr	r4, [r4, #0]
 80134ac:	2c00      	cmp	r4, #0
 80134ae:	d1f7      	bne.n	80134a0 <_fwalk_sglue+0xc>
 80134b0:	4630      	mov	r0, r6
 80134b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134b6:	89ab      	ldrh	r3, [r5, #12]
 80134b8:	2b01      	cmp	r3, #1
 80134ba:	d907      	bls.n	80134cc <_fwalk_sglue+0x38>
 80134bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134c0:	3301      	adds	r3, #1
 80134c2:	d003      	beq.n	80134cc <_fwalk_sglue+0x38>
 80134c4:	4629      	mov	r1, r5
 80134c6:	4638      	mov	r0, r7
 80134c8:	47c0      	blx	r8
 80134ca:	4306      	orrs	r6, r0
 80134cc:	3568      	adds	r5, #104	; 0x68
 80134ce:	e7e9      	b.n	80134a4 <_fwalk_sglue+0x10>

080134d0 <iprintf>:
 80134d0:	b40f      	push	{r0, r1, r2, r3}
 80134d2:	b507      	push	{r0, r1, r2, lr}
 80134d4:	4906      	ldr	r1, [pc, #24]	; (80134f0 <iprintf+0x20>)
 80134d6:	ab04      	add	r3, sp, #16
 80134d8:	6808      	ldr	r0, [r1, #0]
 80134da:	f853 2b04 	ldr.w	r2, [r3], #4
 80134de:	6881      	ldr	r1, [r0, #8]
 80134e0:	9301      	str	r3, [sp, #4]
 80134e2:	f001 fc4b 	bl	8014d7c <_vfiprintf_r>
 80134e6:	b003      	add	sp, #12
 80134e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80134ec:	b004      	add	sp, #16
 80134ee:	4770      	bx	lr
 80134f0:	2400008c 	.word	0x2400008c

080134f4 <sniprintf>:
 80134f4:	b40c      	push	{r2, r3}
 80134f6:	b530      	push	{r4, r5, lr}
 80134f8:	4b17      	ldr	r3, [pc, #92]	; (8013558 <sniprintf+0x64>)
 80134fa:	1e0c      	subs	r4, r1, #0
 80134fc:	681d      	ldr	r5, [r3, #0]
 80134fe:	b09d      	sub	sp, #116	; 0x74
 8013500:	da08      	bge.n	8013514 <sniprintf+0x20>
 8013502:	238b      	movs	r3, #139	; 0x8b
 8013504:	602b      	str	r3, [r5, #0]
 8013506:	f04f 30ff 	mov.w	r0, #4294967295
 801350a:	b01d      	add	sp, #116	; 0x74
 801350c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013510:	b002      	add	sp, #8
 8013512:	4770      	bx	lr
 8013514:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013518:	f8ad 3014 	strh.w	r3, [sp, #20]
 801351c:	bf14      	ite	ne
 801351e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013522:	4623      	moveq	r3, r4
 8013524:	9304      	str	r3, [sp, #16]
 8013526:	9307      	str	r3, [sp, #28]
 8013528:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801352c:	9002      	str	r0, [sp, #8]
 801352e:	9006      	str	r0, [sp, #24]
 8013530:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013534:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013536:	ab21      	add	r3, sp, #132	; 0x84
 8013538:	a902      	add	r1, sp, #8
 801353a:	4628      	mov	r0, r5
 801353c:	9301      	str	r3, [sp, #4]
 801353e:	f001 faf5 	bl	8014b2c <_svfiprintf_r>
 8013542:	1c43      	adds	r3, r0, #1
 8013544:	bfbc      	itt	lt
 8013546:	238b      	movlt	r3, #139	; 0x8b
 8013548:	602b      	strlt	r3, [r5, #0]
 801354a:	2c00      	cmp	r4, #0
 801354c:	d0dd      	beq.n	801350a <sniprintf+0x16>
 801354e:	9b02      	ldr	r3, [sp, #8]
 8013550:	2200      	movs	r2, #0
 8013552:	701a      	strb	r2, [r3, #0]
 8013554:	e7d9      	b.n	801350a <sniprintf+0x16>
 8013556:	bf00      	nop
 8013558:	2400008c 	.word	0x2400008c

0801355c <__sread>:
 801355c:	b510      	push	{r4, lr}
 801355e:	460c      	mov	r4, r1
 8013560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013564:	f000 f86c 	bl	8013640 <_read_r>
 8013568:	2800      	cmp	r0, #0
 801356a:	bfab      	itete	ge
 801356c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801356e:	89a3      	ldrhlt	r3, [r4, #12]
 8013570:	181b      	addge	r3, r3, r0
 8013572:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013576:	bfac      	ite	ge
 8013578:	6563      	strge	r3, [r4, #84]	; 0x54
 801357a:	81a3      	strhlt	r3, [r4, #12]
 801357c:	bd10      	pop	{r4, pc}

0801357e <__swrite>:
 801357e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013582:	461f      	mov	r7, r3
 8013584:	898b      	ldrh	r3, [r1, #12]
 8013586:	05db      	lsls	r3, r3, #23
 8013588:	4605      	mov	r5, r0
 801358a:	460c      	mov	r4, r1
 801358c:	4616      	mov	r6, r2
 801358e:	d505      	bpl.n	801359c <__swrite+0x1e>
 8013590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013594:	2302      	movs	r3, #2
 8013596:	2200      	movs	r2, #0
 8013598:	f000 f840 	bl	801361c <_lseek_r>
 801359c:	89a3      	ldrh	r3, [r4, #12]
 801359e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80135a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80135a6:	81a3      	strh	r3, [r4, #12]
 80135a8:	4632      	mov	r2, r6
 80135aa:	463b      	mov	r3, r7
 80135ac:	4628      	mov	r0, r5
 80135ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80135b2:	f000 b867 	b.w	8013684 <_write_r>

080135b6 <__sseek>:
 80135b6:	b510      	push	{r4, lr}
 80135b8:	460c      	mov	r4, r1
 80135ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135be:	f000 f82d 	bl	801361c <_lseek_r>
 80135c2:	1c43      	adds	r3, r0, #1
 80135c4:	89a3      	ldrh	r3, [r4, #12]
 80135c6:	bf15      	itete	ne
 80135c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80135ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80135ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80135d2:	81a3      	strheq	r3, [r4, #12]
 80135d4:	bf18      	it	ne
 80135d6:	81a3      	strhne	r3, [r4, #12]
 80135d8:	bd10      	pop	{r4, pc}

080135da <__sclose>:
 80135da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80135de:	f000 b80d 	b.w	80135fc <_close_r>

080135e2 <memset>:
 80135e2:	4402      	add	r2, r0
 80135e4:	4603      	mov	r3, r0
 80135e6:	4293      	cmp	r3, r2
 80135e8:	d100      	bne.n	80135ec <memset+0xa>
 80135ea:	4770      	bx	lr
 80135ec:	f803 1b01 	strb.w	r1, [r3], #1
 80135f0:	e7f9      	b.n	80135e6 <memset+0x4>
	...

080135f4 <_localeconv_r>:
 80135f4:	4800      	ldr	r0, [pc, #0]	; (80135f8 <_localeconv_r+0x4>)
 80135f6:	4770      	bx	lr
 80135f8:	24000180 	.word	0x24000180

080135fc <_close_r>:
 80135fc:	b538      	push	{r3, r4, r5, lr}
 80135fe:	4d06      	ldr	r5, [pc, #24]	; (8013618 <_close_r+0x1c>)
 8013600:	2300      	movs	r3, #0
 8013602:	4604      	mov	r4, r0
 8013604:	4608      	mov	r0, r1
 8013606:	602b      	str	r3, [r5, #0]
 8013608:	f7ef ffd5 	bl	80035b6 <_close>
 801360c:	1c43      	adds	r3, r0, #1
 801360e:	d102      	bne.n	8013616 <_close_r+0x1a>
 8013610:	682b      	ldr	r3, [r5, #0]
 8013612:	b103      	cbz	r3, 8013616 <_close_r+0x1a>
 8013614:	6023      	str	r3, [r4, #0]
 8013616:	bd38      	pop	{r3, r4, r5, pc}
 8013618:	2400134c 	.word	0x2400134c

0801361c <_lseek_r>:
 801361c:	b538      	push	{r3, r4, r5, lr}
 801361e:	4d07      	ldr	r5, [pc, #28]	; (801363c <_lseek_r+0x20>)
 8013620:	4604      	mov	r4, r0
 8013622:	4608      	mov	r0, r1
 8013624:	4611      	mov	r1, r2
 8013626:	2200      	movs	r2, #0
 8013628:	602a      	str	r2, [r5, #0]
 801362a:	461a      	mov	r2, r3
 801362c:	f7ef ffea 	bl	8003604 <_lseek>
 8013630:	1c43      	adds	r3, r0, #1
 8013632:	d102      	bne.n	801363a <_lseek_r+0x1e>
 8013634:	682b      	ldr	r3, [r5, #0]
 8013636:	b103      	cbz	r3, 801363a <_lseek_r+0x1e>
 8013638:	6023      	str	r3, [r4, #0]
 801363a:	bd38      	pop	{r3, r4, r5, pc}
 801363c:	2400134c 	.word	0x2400134c

08013640 <_read_r>:
 8013640:	b538      	push	{r3, r4, r5, lr}
 8013642:	4d07      	ldr	r5, [pc, #28]	; (8013660 <_read_r+0x20>)
 8013644:	4604      	mov	r4, r0
 8013646:	4608      	mov	r0, r1
 8013648:	4611      	mov	r1, r2
 801364a:	2200      	movs	r2, #0
 801364c:	602a      	str	r2, [r5, #0]
 801364e:	461a      	mov	r2, r3
 8013650:	f7ef ff78 	bl	8003544 <_read>
 8013654:	1c43      	adds	r3, r0, #1
 8013656:	d102      	bne.n	801365e <_read_r+0x1e>
 8013658:	682b      	ldr	r3, [r5, #0]
 801365a:	b103      	cbz	r3, 801365e <_read_r+0x1e>
 801365c:	6023      	str	r3, [r4, #0]
 801365e:	bd38      	pop	{r3, r4, r5, pc}
 8013660:	2400134c 	.word	0x2400134c

08013664 <_sbrk_r>:
 8013664:	b538      	push	{r3, r4, r5, lr}
 8013666:	4d06      	ldr	r5, [pc, #24]	; (8013680 <_sbrk_r+0x1c>)
 8013668:	2300      	movs	r3, #0
 801366a:	4604      	mov	r4, r0
 801366c:	4608      	mov	r0, r1
 801366e:	602b      	str	r3, [r5, #0]
 8013670:	f7ef ffd6 	bl	8003620 <_sbrk>
 8013674:	1c43      	adds	r3, r0, #1
 8013676:	d102      	bne.n	801367e <_sbrk_r+0x1a>
 8013678:	682b      	ldr	r3, [r5, #0]
 801367a:	b103      	cbz	r3, 801367e <_sbrk_r+0x1a>
 801367c:	6023      	str	r3, [r4, #0]
 801367e:	bd38      	pop	{r3, r4, r5, pc}
 8013680:	2400134c 	.word	0x2400134c

08013684 <_write_r>:
 8013684:	b538      	push	{r3, r4, r5, lr}
 8013686:	4d07      	ldr	r5, [pc, #28]	; (80136a4 <_write_r+0x20>)
 8013688:	4604      	mov	r4, r0
 801368a:	4608      	mov	r0, r1
 801368c:	4611      	mov	r1, r2
 801368e:	2200      	movs	r2, #0
 8013690:	602a      	str	r2, [r5, #0]
 8013692:	461a      	mov	r2, r3
 8013694:	f7ef ff73 	bl	800357e <_write>
 8013698:	1c43      	adds	r3, r0, #1
 801369a:	d102      	bne.n	80136a2 <_write_r+0x1e>
 801369c:	682b      	ldr	r3, [r5, #0]
 801369e:	b103      	cbz	r3, 80136a2 <_write_r+0x1e>
 80136a0:	6023      	str	r3, [r4, #0]
 80136a2:	bd38      	pop	{r3, r4, r5, pc}
 80136a4:	2400134c 	.word	0x2400134c

080136a8 <__errno>:
 80136a8:	4b01      	ldr	r3, [pc, #4]	; (80136b0 <__errno+0x8>)
 80136aa:	6818      	ldr	r0, [r3, #0]
 80136ac:	4770      	bx	lr
 80136ae:	bf00      	nop
 80136b0:	2400008c 	.word	0x2400008c

080136b4 <__libc_init_array>:
 80136b4:	b570      	push	{r4, r5, r6, lr}
 80136b6:	4d0d      	ldr	r5, [pc, #52]	; (80136ec <__libc_init_array+0x38>)
 80136b8:	4c0d      	ldr	r4, [pc, #52]	; (80136f0 <__libc_init_array+0x3c>)
 80136ba:	1b64      	subs	r4, r4, r5
 80136bc:	10a4      	asrs	r4, r4, #2
 80136be:	2600      	movs	r6, #0
 80136c0:	42a6      	cmp	r6, r4
 80136c2:	d109      	bne.n	80136d8 <__libc_init_array+0x24>
 80136c4:	4d0b      	ldr	r5, [pc, #44]	; (80136f4 <__libc_init_array+0x40>)
 80136c6:	4c0c      	ldr	r4, [pc, #48]	; (80136f8 <__libc_init_array+0x44>)
 80136c8:	f001 ff4a 	bl	8015560 <_init>
 80136cc:	1b64      	subs	r4, r4, r5
 80136ce:	10a4      	asrs	r4, r4, #2
 80136d0:	2600      	movs	r6, #0
 80136d2:	42a6      	cmp	r6, r4
 80136d4:	d105      	bne.n	80136e2 <__libc_init_array+0x2e>
 80136d6:	bd70      	pop	{r4, r5, r6, pc}
 80136d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80136dc:	4798      	blx	r3
 80136de:	3601      	adds	r6, #1
 80136e0:	e7ee      	b.n	80136c0 <__libc_init_array+0xc>
 80136e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80136e6:	4798      	blx	r3
 80136e8:	3601      	adds	r6, #1
 80136ea:	e7f2      	b.n	80136d2 <__libc_init_array+0x1e>
 80136ec:	08015cec 	.word	0x08015cec
 80136f0:	08015cec 	.word	0x08015cec
 80136f4:	08015cec 	.word	0x08015cec
 80136f8:	08015cf0 	.word	0x08015cf0

080136fc <quorem>:
 80136fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013700:	6903      	ldr	r3, [r0, #16]
 8013702:	690c      	ldr	r4, [r1, #16]
 8013704:	42a3      	cmp	r3, r4
 8013706:	4607      	mov	r7, r0
 8013708:	db7e      	blt.n	8013808 <quorem+0x10c>
 801370a:	3c01      	subs	r4, #1
 801370c:	f101 0814 	add.w	r8, r1, #20
 8013710:	f100 0514 	add.w	r5, r0, #20
 8013714:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013718:	9301      	str	r3, [sp, #4]
 801371a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801371e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013722:	3301      	adds	r3, #1
 8013724:	429a      	cmp	r2, r3
 8013726:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801372a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801372e:	fbb2 f6f3 	udiv	r6, r2, r3
 8013732:	d331      	bcc.n	8013798 <quorem+0x9c>
 8013734:	f04f 0e00 	mov.w	lr, #0
 8013738:	4640      	mov	r0, r8
 801373a:	46ac      	mov	ip, r5
 801373c:	46f2      	mov	sl, lr
 801373e:	f850 2b04 	ldr.w	r2, [r0], #4
 8013742:	b293      	uxth	r3, r2
 8013744:	fb06 e303 	mla	r3, r6, r3, lr
 8013748:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801374c:	0c1a      	lsrs	r2, r3, #16
 801374e:	b29b      	uxth	r3, r3
 8013750:	ebaa 0303 	sub.w	r3, sl, r3
 8013754:	f8dc a000 	ldr.w	sl, [ip]
 8013758:	fa13 f38a 	uxtah	r3, r3, sl
 801375c:	fb06 220e 	mla	r2, r6, lr, r2
 8013760:	9300      	str	r3, [sp, #0]
 8013762:	9b00      	ldr	r3, [sp, #0]
 8013764:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013768:	b292      	uxth	r2, r2
 801376a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801376e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013772:	f8bd 3000 	ldrh.w	r3, [sp]
 8013776:	4581      	cmp	r9, r0
 8013778:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801377c:	f84c 3b04 	str.w	r3, [ip], #4
 8013780:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013784:	d2db      	bcs.n	801373e <quorem+0x42>
 8013786:	f855 300b 	ldr.w	r3, [r5, fp]
 801378a:	b92b      	cbnz	r3, 8013798 <quorem+0x9c>
 801378c:	9b01      	ldr	r3, [sp, #4]
 801378e:	3b04      	subs	r3, #4
 8013790:	429d      	cmp	r5, r3
 8013792:	461a      	mov	r2, r3
 8013794:	d32c      	bcc.n	80137f0 <quorem+0xf4>
 8013796:	613c      	str	r4, [r7, #16]
 8013798:	4638      	mov	r0, r7
 801379a:	f001 f86d 	bl	8014878 <__mcmp>
 801379e:	2800      	cmp	r0, #0
 80137a0:	db22      	blt.n	80137e8 <quorem+0xec>
 80137a2:	3601      	adds	r6, #1
 80137a4:	4629      	mov	r1, r5
 80137a6:	2000      	movs	r0, #0
 80137a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80137ac:	f8d1 c000 	ldr.w	ip, [r1]
 80137b0:	b293      	uxth	r3, r2
 80137b2:	1ac3      	subs	r3, r0, r3
 80137b4:	0c12      	lsrs	r2, r2, #16
 80137b6:	fa13 f38c 	uxtah	r3, r3, ip
 80137ba:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80137be:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80137c2:	b29b      	uxth	r3, r3
 80137c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137c8:	45c1      	cmp	r9, r8
 80137ca:	f841 3b04 	str.w	r3, [r1], #4
 80137ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 80137d2:	d2e9      	bcs.n	80137a8 <quorem+0xac>
 80137d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80137d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80137dc:	b922      	cbnz	r2, 80137e8 <quorem+0xec>
 80137de:	3b04      	subs	r3, #4
 80137e0:	429d      	cmp	r5, r3
 80137e2:	461a      	mov	r2, r3
 80137e4:	d30a      	bcc.n	80137fc <quorem+0x100>
 80137e6:	613c      	str	r4, [r7, #16]
 80137e8:	4630      	mov	r0, r6
 80137ea:	b003      	add	sp, #12
 80137ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f0:	6812      	ldr	r2, [r2, #0]
 80137f2:	3b04      	subs	r3, #4
 80137f4:	2a00      	cmp	r2, #0
 80137f6:	d1ce      	bne.n	8013796 <quorem+0x9a>
 80137f8:	3c01      	subs	r4, #1
 80137fa:	e7c9      	b.n	8013790 <quorem+0x94>
 80137fc:	6812      	ldr	r2, [r2, #0]
 80137fe:	3b04      	subs	r3, #4
 8013800:	2a00      	cmp	r2, #0
 8013802:	d1f0      	bne.n	80137e6 <quorem+0xea>
 8013804:	3c01      	subs	r4, #1
 8013806:	e7eb      	b.n	80137e0 <quorem+0xe4>
 8013808:	2000      	movs	r0, #0
 801380a:	e7ee      	b.n	80137ea <quorem+0xee>
 801380c:	0000      	movs	r0, r0
	...

08013810 <_dtoa_r>:
 8013810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013814:	ed2d 8b02 	vpush	{d8}
 8013818:	69c5      	ldr	r5, [r0, #28]
 801381a:	b091      	sub	sp, #68	; 0x44
 801381c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013820:	ec59 8b10 	vmov	r8, r9, d0
 8013824:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8013826:	9106      	str	r1, [sp, #24]
 8013828:	4606      	mov	r6, r0
 801382a:	9208      	str	r2, [sp, #32]
 801382c:	930c      	str	r3, [sp, #48]	; 0x30
 801382e:	b975      	cbnz	r5, 801384e <_dtoa_r+0x3e>
 8013830:	2010      	movs	r0, #16
 8013832:	f7ff f89b 	bl	801296c <malloc>
 8013836:	4602      	mov	r2, r0
 8013838:	61f0      	str	r0, [r6, #28]
 801383a:	b920      	cbnz	r0, 8013846 <_dtoa_r+0x36>
 801383c:	4ba6      	ldr	r3, [pc, #664]	; (8013ad8 <_dtoa_r+0x2c8>)
 801383e:	21ef      	movs	r1, #239	; 0xef
 8013840:	48a6      	ldr	r0, [pc, #664]	; (8013adc <_dtoa_r+0x2cc>)
 8013842:	f001 fd21 	bl	8015288 <__assert_func>
 8013846:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801384a:	6005      	str	r5, [r0, #0]
 801384c:	60c5      	str	r5, [r0, #12]
 801384e:	69f3      	ldr	r3, [r6, #28]
 8013850:	6819      	ldr	r1, [r3, #0]
 8013852:	b151      	cbz	r1, 801386a <_dtoa_r+0x5a>
 8013854:	685a      	ldr	r2, [r3, #4]
 8013856:	604a      	str	r2, [r1, #4]
 8013858:	2301      	movs	r3, #1
 801385a:	4093      	lsls	r3, r2
 801385c:	608b      	str	r3, [r1, #8]
 801385e:	4630      	mov	r0, r6
 8013860:	f000 fdce 	bl	8014400 <_Bfree>
 8013864:	69f3      	ldr	r3, [r6, #28]
 8013866:	2200      	movs	r2, #0
 8013868:	601a      	str	r2, [r3, #0]
 801386a:	f1b9 0300 	subs.w	r3, r9, #0
 801386e:	bfbb      	ittet	lt
 8013870:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013874:	9303      	strlt	r3, [sp, #12]
 8013876:	2300      	movge	r3, #0
 8013878:	2201      	movlt	r2, #1
 801387a:	bfac      	ite	ge
 801387c:	6023      	strge	r3, [r4, #0]
 801387e:	6022      	strlt	r2, [r4, #0]
 8013880:	4b97      	ldr	r3, [pc, #604]	; (8013ae0 <_dtoa_r+0x2d0>)
 8013882:	9c03      	ldr	r4, [sp, #12]
 8013884:	43a3      	bics	r3, r4
 8013886:	d11c      	bne.n	80138c2 <_dtoa_r+0xb2>
 8013888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801388a:	f242 730f 	movw	r3, #9999	; 0x270f
 801388e:	6013      	str	r3, [r2, #0]
 8013890:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8013894:	ea53 0308 	orrs.w	r3, r3, r8
 8013898:	f000 84fb 	beq.w	8014292 <_dtoa_r+0xa82>
 801389c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801389e:	b963      	cbnz	r3, 80138ba <_dtoa_r+0xaa>
 80138a0:	4b90      	ldr	r3, [pc, #576]	; (8013ae4 <_dtoa_r+0x2d4>)
 80138a2:	e020      	b.n	80138e6 <_dtoa_r+0xd6>
 80138a4:	4b90      	ldr	r3, [pc, #576]	; (8013ae8 <_dtoa_r+0x2d8>)
 80138a6:	9301      	str	r3, [sp, #4]
 80138a8:	3308      	adds	r3, #8
 80138aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80138ac:	6013      	str	r3, [r2, #0]
 80138ae:	9801      	ldr	r0, [sp, #4]
 80138b0:	b011      	add	sp, #68	; 0x44
 80138b2:	ecbd 8b02 	vpop	{d8}
 80138b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ba:	4b8a      	ldr	r3, [pc, #552]	; (8013ae4 <_dtoa_r+0x2d4>)
 80138bc:	9301      	str	r3, [sp, #4]
 80138be:	3303      	adds	r3, #3
 80138c0:	e7f3      	b.n	80138aa <_dtoa_r+0x9a>
 80138c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80138c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80138ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ce:	d10c      	bne.n	80138ea <_dtoa_r+0xda>
 80138d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80138d2:	2301      	movs	r3, #1
 80138d4:	6013      	str	r3, [r2, #0]
 80138d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80138d8:	2b00      	cmp	r3, #0
 80138da:	f000 84d7 	beq.w	801428c <_dtoa_r+0xa7c>
 80138de:	4b83      	ldr	r3, [pc, #524]	; (8013aec <_dtoa_r+0x2dc>)
 80138e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80138e2:	6013      	str	r3, [r2, #0]
 80138e4:	3b01      	subs	r3, #1
 80138e6:	9301      	str	r3, [sp, #4]
 80138e8:	e7e1      	b.n	80138ae <_dtoa_r+0x9e>
 80138ea:	aa0e      	add	r2, sp, #56	; 0x38
 80138ec:	a90f      	add	r1, sp, #60	; 0x3c
 80138ee:	4630      	mov	r0, r6
 80138f0:	eeb0 0b48 	vmov.f64	d0, d8
 80138f4:	f001 f866 	bl	80149c4 <__d2b>
 80138f8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80138fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138fe:	4605      	mov	r5, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d046      	beq.n	8013992 <_dtoa_r+0x182>
 8013904:	eeb0 7b48 	vmov.f64	d7, d8
 8013908:	ee18 1a90 	vmov	r1, s17
 801390c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013910:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8013914:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8013918:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801391c:	2000      	movs	r0, #0
 801391e:	ee07 1a90 	vmov	s15, r1
 8013922:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8013926:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8013ac0 <_dtoa_r+0x2b0>
 801392a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801392e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8013ac8 <_dtoa_r+0x2b8>
 8013932:	eea7 6b05 	vfma.f64	d6, d7, d5
 8013936:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8013ad0 <_dtoa_r+0x2c0>
 801393a:	ee07 3a90 	vmov	s15, r3
 801393e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8013942:	eeb0 7b46 	vmov.f64	d7, d6
 8013946:	eea4 7b05 	vfma.f64	d7, d4, d5
 801394a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801394e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8013952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013956:	ee16 ba90 	vmov	fp, s13
 801395a:	9009      	str	r0, [sp, #36]	; 0x24
 801395c:	d508      	bpl.n	8013970 <_dtoa_r+0x160>
 801395e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013962:	eeb4 6b47 	vcmp.f64	d6, d7
 8013966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801396a:	bf18      	it	ne
 801396c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8013970:	f1bb 0f16 	cmp.w	fp, #22
 8013974:	d82b      	bhi.n	80139ce <_dtoa_r+0x1be>
 8013976:	495e      	ldr	r1, [pc, #376]	; (8013af0 <_dtoa_r+0x2e0>)
 8013978:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801397c:	ed91 7b00 	vldr	d7, [r1]
 8013980:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8013984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013988:	d501      	bpl.n	801398e <_dtoa_r+0x17e>
 801398a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801398e:	2100      	movs	r1, #0
 8013990:	e01e      	b.n	80139d0 <_dtoa_r+0x1c0>
 8013992:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013994:	4413      	add	r3, r2
 8013996:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801399a:	2920      	cmp	r1, #32
 801399c:	bfc1      	itttt	gt
 801399e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80139a2:	408c      	lslgt	r4, r1
 80139a4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80139a8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80139ac:	bfd6      	itet	le
 80139ae:	f1c1 0120 	rsble	r1, r1, #32
 80139b2:	4321      	orrgt	r1, r4
 80139b4:	fa08 f101 	lslle.w	r1, r8, r1
 80139b8:	ee07 1a90 	vmov	s15, r1
 80139bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80139c0:	3b01      	subs	r3, #1
 80139c2:	ee17 1a90 	vmov	r1, s15
 80139c6:	2001      	movs	r0, #1
 80139c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80139cc:	e7a7      	b.n	801391e <_dtoa_r+0x10e>
 80139ce:	2101      	movs	r1, #1
 80139d0:	1ad2      	subs	r2, r2, r3
 80139d2:	1e53      	subs	r3, r2, #1
 80139d4:	9305      	str	r3, [sp, #20]
 80139d6:	bf45      	ittet	mi
 80139d8:	f1c2 0301 	rsbmi	r3, r2, #1
 80139dc:	9304      	strmi	r3, [sp, #16]
 80139de:	2300      	movpl	r3, #0
 80139e0:	2300      	movmi	r3, #0
 80139e2:	bf4c      	ite	mi
 80139e4:	9305      	strmi	r3, [sp, #20]
 80139e6:	9304      	strpl	r3, [sp, #16]
 80139e8:	f1bb 0f00 	cmp.w	fp, #0
 80139ec:	910b      	str	r1, [sp, #44]	; 0x2c
 80139ee:	db18      	blt.n	8013a22 <_dtoa_r+0x212>
 80139f0:	9b05      	ldr	r3, [sp, #20]
 80139f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80139f6:	445b      	add	r3, fp
 80139f8:	9305      	str	r3, [sp, #20]
 80139fa:	2300      	movs	r3, #0
 80139fc:	9a06      	ldr	r2, [sp, #24]
 80139fe:	2a09      	cmp	r2, #9
 8013a00:	d848      	bhi.n	8013a94 <_dtoa_r+0x284>
 8013a02:	2a05      	cmp	r2, #5
 8013a04:	bfc4      	itt	gt
 8013a06:	3a04      	subgt	r2, #4
 8013a08:	9206      	strgt	r2, [sp, #24]
 8013a0a:	9a06      	ldr	r2, [sp, #24]
 8013a0c:	f1a2 0202 	sub.w	r2, r2, #2
 8013a10:	bfcc      	ite	gt
 8013a12:	2400      	movgt	r4, #0
 8013a14:	2401      	movle	r4, #1
 8013a16:	2a03      	cmp	r2, #3
 8013a18:	d847      	bhi.n	8013aaa <_dtoa_r+0x29a>
 8013a1a:	e8df f002 	tbb	[pc, r2]
 8013a1e:	2d0b      	.short	0x2d0b
 8013a20:	392b      	.short	0x392b
 8013a22:	9b04      	ldr	r3, [sp, #16]
 8013a24:	2200      	movs	r2, #0
 8013a26:	eba3 030b 	sub.w	r3, r3, fp
 8013a2a:	9304      	str	r3, [sp, #16]
 8013a2c:	920a      	str	r2, [sp, #40]	; 0x28
 8013a2e:	f1cb 0300 	rsb	r3, fp, #0
 8013a32:	e7e3      	b.n	80139fc <_dtoa_r+0x1ec>
 8013a34:	2200      	movs	r2, #0
 8013a36:	9207      	str	r2, [sp, #28]
 8013a38:	9a08      	ldr	r2, [sp, #32]
 8013a3a:	2a00      	cmp	r2, #0
 8013a3c:	dc38      	bgt.n	8013ab0 <_dtoa_r+0x2a0>
 8013a3e:	f04f 0a01 	mov.w	sl, #1
 8013a42:	46d1      	mov	r9, sl
 8013a44:	4652      	mov	r2, sl
 8013a46:	f8cd a020 	str.w	sl, [sp, #32]
 8013a4a:	69f7      	ldr	r7, [r6, #28]
 8013a4c:	2100      	movs	r1, #0
 8013a4e:	2004      	movs	r0, #4
 8013a50:	f100 0c14 	add.w	ip, r0, #20
 8013a54:	4594      	cmp	ip, r2
 8013a56:	d930      	bls.n	8013aba <_dtoa_r+0x2aa>
 8013a58:	6079      	str	r1, [r7, #4]
 8013a5a:	4630      	mov	r0, r6
 8013a5c:	930d      	str	r3, [sp, #52]	; 0x34
 8013a5e:	f000 fc8f 	bl	8014380 <_Balloc>
 8013a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a64:	9001      	str	r0, [sp, #4]
 8013a66:	4602      	mov	r2, r0
 8013a68:	2800      	cmp	r0, #0
 8013a6a:	d145      	bne.n	8013af8 <_dtoa_r+0x2e8>
 8013a6c:	4b21      	ldr	r3, [pc, #132]	; (8013af4 <_dtoa_r+0x2e4>)
 8013a6e:	f240 11af 	movw	r1, #431	; 0x1af
 8013a72:	e6e5      	b.n	8013840 <_dtoa_r+0x30>
 8013a74:	2201      	movs	r2, #1
 8013a76:	e7de      	b.n	8013a36 <_dtoa_r+0x226>
 8013a78:	2200      	movs	r2, #0
 8013a7a:	9207      	str	r2, [sp, #28]
 8013a7c:	9a08      	ldr	r2, [sp, #32]
 8013a7e:	eb0b 0a02 	add.w	sl, fp, r2
 8013a82:	f10a 0901 	add.w	r9, sl, #1
 8013a86:	464a      	mov	r2, r9
 8013a88:	2a01      	cmp	r2, #1
 8013a8a:	bfb8      	it	lt
 8013a8c:	2201      	movlt	r2, #1
 8013a8e:	e7dc      	b.n	8013a4a <_dtoa_r+0x23a>
 8013a90:	2201      	movs	r2, #1
 8013a92:	e7f2      	b.n	8013a7a <_dtoa_r+0x26a>
 8013a94:	2401      	movs	r4, #1
 8013a96:	2200      	movs	r2, #0
 8013a98:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8013a9c:	f04f 3aff 	mov.w	sl, #4294967295
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	46d1      	mov	r9, sl
 8013aa4:	2212      	movs	r2, #18
 8013aa6:	9108      	str	r1, [sp, #32]
 8013aa8:	e7cf      	b.n	8013a4a <_dtoa_r+0x23a>
 8013aaa:	2201      	movs	r2, #1
 8013aac:	9207      	str	r2, [sp, #28]
 8013aae:	e7f5      	b.n	8013a9c <_dtoa_r+0x28c>
 8013ab0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8013ab4:	46d1      	mov	r9, sl
 8013ab6:	4652      	mov	r2, sl
 8013ab8:	e7c7      	b.n	8013a4a <_dtoa_r+0x23a>
 8013aba:	3101      	adds	r1, #1
 8013abc:	0040      	lsls	r0, r0, #1
 8013abe:	e7c7      	b.n	8013a50 <_dtoa_r+0x240>
 8013ac0:	636f4361 	.word	0x636f4361
 8013ac4:	3fd287a7 	.word	0x3fd287a7
 8013ac8:	8b60c8b3 	.word	0x8b60c8b3
 8013acc:	3fc68a28 	.word	0x3fc68a28
 8013ad0:	509f79fb 	.word	0x509f79fb
 8013ad4:	3fd34413 	.word	0x3fd34413
 8013ad8:	080159b1 	.word	0x080159b1
 8013adc:	080159c8 	.word	0x080159c8
 8013ae0:	7ff00000 	.word	0x7ff00000
 8013ae4:	080159ad 	.word	0x080159ad
 8013ae8:	080159a4 	.word	0x080159a4
 8013aec:	08015981 	.word	0x08015981
 8013af0:	08015ab8 	.word	0x08015ab8
 8013af4:	08015a20 	.word	0x08015a20
 8013af8:	69f2      	ldr	r2, [r6, #28]
 8013afa:	9901      	ldr	r1, [sp, #4]
 8013afc:	6011      	str	r1, [r2, #0]
 8013afe:	f1b9 0f0e 	cmp.w	r9, #14
 8013b02:	d86c      	bhi.n	8013bde <_dtoa_r+0x3ce>
 8013b04:	2c00      	cmp	r4, #0
 8013b06:	d06a      	beq.n	8013bde <_dtoa_r+0x3ce>
 8013b08:	f1bb 0f00 	cmp.w	fp, #0
 8013b0c:	f340 80a0 	ble.w	8013c50 <_dtoa_r+0x440>
 8013b10:	4ac1      	ldr	r2, [pc, #772]	; (8013e18 <_dtoa_r+0x608>)
 8013b12:	f00b 010f 	and.w	r1, fp, #15
 8013b16:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8013b1a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8013b1e:	ed92 7b00 	vldr	d7, [r2]
 8013b22:	ea4f 122b 	mov.w	r2, fp, asr #4
 8013b26:	f000 8087 	beq.w	8013c38 <_dtoa_r+0x428>
 8013b2a:	49bc      	ldr	r1, [pc, #752]	; (8013e1c <_dtoa_r+0x60c>)
 8013b2c:	ed91 6b08 	vldr	d6, [r1, #32]
 8013b30:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013b34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013b38:	f002 020f 	and.w	r2, r2, #15
 8013b3c:	2103      	movs	r1, #3
 8013b3e:	48b7      	ldr	r0, [pc, #732]	; (8013e1c <_dtoa_r+0x60c>)
 8013b40:	2a00      	cmp	r2, #0
 8013b42:	d17b      	bne.n	8013c3c <_dtoa_r+0x42c>
 8013b44:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013b48:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013b4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013b50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013b52:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013b56:	2a00      	cmp	r2, #0
 8013b58:	f000 80a0 	beq.w	8013c9c <_dtoa_r+0x48c>
 8013b5c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8013b60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013b68:	f140 8098 	bpl.w	8013c9c <_dtoa_r+0x48c>
 8013b6c:	f1b9 0f00 	cmp.w	r9, #0
 8013b70:	f000 8094 	beq.w	8013c9c <_dtoa_r+0x48c>
 8013b74:	f1ba 0f00 	cmp.w	sl, #0
 8013b78:	dd2f      	ble.n	8013bda <_dtoa_r+0x3ca>
 8013b7a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8013b7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013b82:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013b86:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013b8a:	3101      	adds	r1, #1
 8013b8c:	4654      	mov	r4, sl
 8013b8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013b92:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8013b96:	ee07 1a90 	vmov	s15, r1
 8013b9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8013b9e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8013ba2:	ee15 7a90 	vmov	r7, s11
 8013ba6:	ec51 0b15 	vmov	r0, r1, d5
 8013baa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8013bae:	2c00      	cmp	r4, #0
 8013bb0:	d177      	bne.n	8013ca2 <_dtoa_r+0x492>
 8013bb2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013bb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013bba:	ec41 0b17 	vmov	d7, r0, r1
 8013bbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bc6:	f300 826a 	bgt.w	801409e <_dtoa_r+0x88e>
 8013bca:	eeb1 7b47 	vneg.f64	d7, d7
 8013bce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bd6:	f100 8260 	bmi.w	801409a <_dtoa_r+0x88a>
 8013bda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013be0:	2a00      	cmp	r2, #0
 8013be2:	f2c0 811d 	blt.w	8013e20 <_dtoa_r+0x610>
 8013be6:	f1bb 0f0e 	cmp.w	fp, #14
 8013bea:	f300 8119 	bgt.w	8013e20 <_dtoa_r+0x610>
 8013bee:	4b8a      	ldr	r3, [pc, #552]	; (8013e18 <_dtoa_r+0x608>)
 8013bf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013bf4:	ed93 6b00 	vldr	d6, [r3]
 8013bf8:	9b08      	ldr	r3, [sp, #32]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	f280 80b7 	bge.w	8013d6e <_dtoa_r+0x55e>
 8013c00:	f1b9 0f00 	cmp.w	r9, #0
 8013c04:	f300 80b3 	bgt.w	8013d6e <_dtoa_r+0x55e>
 8013c08:	f040 8246 	bne.w	8014098 <_dtoa_r+0x888>
 8013c0c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8013c10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013c14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013c18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c20:	464c      	mov	r4, r9
 8013c22:	464f      	mov	r7, r9
 8013c24:	f280 821c 	bge.w	8014060 <_dtoa_r+0x850>
 8013c28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013c2c:	2331      	movs	r3, #49	; 0x31
 8013c2e:	f808 3b01 	strb.w	r3, [r8], #1
 8013c32:	f10b 0b01 	add.w	fp, fp, #1
 8013c36:	e218      	b.n	801406a <_dtoa_r+0x85a>
 8013c38:	2102      	movs	r1, #2
 8013c3a:	e780      	b.n	8013b3e <_dtoa_r+0x32e>
 8013c3c:	07d4      	lsls	r4, r2, #31
 8013c3e:	d504      	bpl.n	8013c4a <_dtoa_r+0x43a>
 8013c40:	ed90 6b00 	vldr	d6, [r0]
 8013c44:	3101      	adds	r1, #1
 8013c46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013c4a:	1052      	asrs	r2, r2, #1
 8013c4c:	3008      	adds	r0, #8
 8013c4e:	e777      	b.n	8013b40 <_dtoa_r+0x330>
 8013c50:	d022      	beq.n	8013c98 <_dtoa_r+0x488>
 8013c52:	f1cb 0200 	rsb	r2, fp, #0
 8013c56:	4970      	ldr	r1, [pc, #448]	; (8013e18 <_dtoa_r+0x608>)
 8013c58:	f002 000f 	and.w	r0, r2, #15
 8013c5c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8013c60:	ed91 7b00 	vldr	d7, [r1]
 8013c64:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013c68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013c6c:	486b      	ldr	r0, [pc, #428]	; (8013e1c <_dtoa_r+0x60c>)
 8013c6e:	1112      	asrs	r2, r2, #4
 8013c70:	2400      	movs	r4, #0
 8013c72:	2102      	movs	r1, #2
 8013c74:	b92a      	cbnz	r2, 8013c82 <_dtoa_r+0x472>
 8013c76:	2c00      	cmp	r4, #0
 8013c78:	f43f af6a 	beq.w	8013b50 <_dtoa_r+0x340>
 8013c7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013c80:	e766      	b.n	8013b50 <_dtoa_r+0x340>
 8013c82:	07d7      	lsls	r7, r2, #31
 8013c84:	d505      	bpl.n	8013c92 <_dtoa_r+0x482>
 8013c86:	ed90 6b00 	vldr	d6, [r0]
 8013c8a:	3101      	adds	r1, #1
 8013c8c:	2401      	movs	r4, #1
 8013c8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013c92:	1052      	asrs	r2, r2, #1
 8013c94:	3008      	adds	r0, #8
 8013c96:	e7ed      	b.n	8013c74 <_dtoa_r+0x464>
 8013c98:	2102      	movs	r1, #2
 8013c9a:	e759      	b.n	8013b50 <_dtoa_r+0x340>
 8013c9c:	465a      	mov	r2, fp
 8013c9e:	464c      	mov	r4, r9
 8013ca0:	e775      	b.n	8013b8e <_dtoa_r+0x37e>
 8013ca2:	ec41 0b17 	vmov	d7, r0, r1
 8013ca6:	495c      	ldr	r1, [pc, #368]	; (8013e18 <_dtoa_r+0x608>)
 8013ca8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8013cac:	ed11 4b02 	vldr	d4, [r1, #-8]
 8013cb0:	9901      	ldr	r1, [sp, #4]
 8013cb2:	440c      	add	r4, r1
 8013cb4:	9907      	ldr	r1, [sp, #28]
 8013cb6:	b351      	cbz	r1, 8013d0e <_dtoa_r+0x4fe>
 8013cb8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8013cbc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8013cc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013cc4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8013cc8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013ccc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013cd0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013cd4:	ee14 1a90 	vmov	r1, s9
 8013cd8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013cdc:	3130      	adds	r1, #48	; 0x30
 8013cde:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013ce2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cea:	f808 1b01 	strb.w	r1, [r8], #1
 8013cee:	d439      	bmi.n	8013d64 <_dtoa_r+0x554>
 8013cf0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013cf4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013cfc:	d472      	bmi.n	8013de4 <_dtoa_r+0x5d4>
 8013cfe:	45a0      	cmp	r8, r4
 8013d00:	f43f af6b 	beq.w	8013bda <_dtoa_r+0x3ca>
 8013d04:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013d08:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013d0c:	e7e0      	b.n	8013cd0 <_dtoa_r+0x4c0>
 8013d0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013d12:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013d16:	4620      	mov	r0, r4
 8013d18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8013d1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013d20:	ee14 1a90 	vmov	r1, s9
 8013d24:	3130      	adds	r1, #48	; 0x30
 8013d26:	f808 1b01 	strb.w	r1, [r8], #1
 8013d2a:	45a0      	cmp	r8, r4
 8013d2c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013d30:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013d34:	d118      	bne.n	8013d68 <_dtoa_r+0x558>
 8013d36:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8013d3a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013d3e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8013d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d46:	dc4d      	bgt.n	8013de4 <_dtoa_r+0x5d4>
 8013d48:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013d4c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d54:	f57f af41 	bpl.w	8013bda <_dtoa_r+0x3ca>
 8013d58:	4680      	mov	r8, r0
 8013d5a:	3801      	subs	r0, #1
 8013d5c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8013d60:	2b30      	cmp	r3, #48	; 0x30
 8013d62:	d0f9      	beq.n	8013d58 <_dtoa_r+0x548>
 8013d64:	4693      	mov	fp, r2
 8013d66:	e02a      	b.n	8013dbe <_dtoa_r+0x5ae>
 8013d68:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013d6c:	e7d6      	b.n	8013d1c <_dtoa_r+0x50c>
 8013d6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d72:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8013d76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013d7a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8013d7e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8013d82:	ee15 3a10 	vmov	r3, s10
 8013d86:	3330      	adds	r3, #48	; 0x30
 8013d88:	f808 3b01 	strb.w	r3, [r8], #1
 8013d8c:	9b01      	ldr	r3, [sp, #4]
 8013d8e:	eba8 0303 	sub.w	r3, r8, r3
 8013d92:	4599      	cmp	r9, r3
 8013d94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013d98:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013d9c:	d133      	bne.n	8013e06 <_dtoa_r+0x5f6>
 8013d9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8013da2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013daa:	dc1a      	bgt.n	8013de2 <_dtoa_r+0x5d2>
 8013dac:	eeb4 7b46 	vcmp.f64	d7, d6
 8013db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013db4:	d103      	bne.n	8013dbe <_dtoa_r+0x5ae>
 8013db6:	ee15 3a10 	vmov	r3, s10
 8013dba:	07d9      	lsls	r1, r3, #31
 8013dbc:	d411      	bmi.n	8013de2 <_dtoa_r+0x5d2>
 8013dbe:	4629      	mov	r1, r5
 8013dc0:	4630      	mov	r0, r6
 8013dc2:	f000 fb1d 	bl	8014400 <_Bfree>
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013dca:	f888 3000 	strb.w	r3, [r8]
 8013dce:	f10b 0301 	add.w	r3, fp, #1
 8013dd2:	6013      	str	r3, [r2, #0]
 8013dd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	f43f ad69 	beq.w	80138ae <_dtoa_r+0x9e>
 8013ddc:	f8c3 8000 	str.w	r8, [r3]
 8013de0:	e565      	b.n	80138ae <_dtoa_r+0x9e>
 8013de2:	465a      	mov	r2, fp
 8013de4:	4643      	mov	r3, r8
 8013de6:	4698      	mov	r8, r3
 8013de8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8013dec:	2939      	cmp	r1, #57	; 0x39
 8013dee:	d106      	bne.n	8013dfe <_dtoa_r+0x5ee>
 8013df0:	9901      	ldr	r1, [sp, #4]
 8013df2:	4299      	cmp	r1, r3
 8013df4:	d1f7      	bne.n	8013de6 <_dtoa_r+0x5d6>
 8013df6:	9801      	ldr	r0, [sp, #4]
 8013df8:	2130      	movs	r1, #48	; 0x30
 8013dfa:	3201      	adds	r2, #1
 8013dfc:	7001      	strb	r1, [r0, #0]
 8013dfe:	7819      	ldrb	r1, [r3, #0]
 8013e00:	3101      	adds	r1, #1
 8013e02:	7019      	strb	r1, [r3, #0]
 8013e04:	e7ae      	b.n	8013d64 <_dtoa_r+0x554>
 8013e06:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013e0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e12:	d1b2      	bne.n	8013d7a <_dtoa_r+0x56a>
 8013e14:	e7d3      	b.n	8013dbe <_dtoa_r+0x5ae>
 8013e16:	bf00      	nop
 8013e18:	08015ab8 	.word	0x08015ab8
 8013e1c:	08015a90 	.word	0x08015a90
 8013e20:	9907      	ldr	r1, [sp, #28]
 8013e22:	2900      	cmp	r1, #0
 8013e24:	f000 80d0 	beq.w	8013fc8 <_dtoa_r+0x7b8>
 8013e28:	9906      	ldr	r1, [sp, #24]
 8013e2a:	2901      	cmp	r1, #1
 8013e2c:	f300 80b4 	bgt.w	8013f98 <_dtoa_r+0x788>
 8013e30:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013e32:	2900      	cmp	r1, #0
 8013e34:	f000 80ac 	beq.w	8013f90 <_dtoa_r+0x780>
 8013e38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8013e3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013e40:	461c      	mov	r4, r3
 8013e42:	9309      	str	r3, [sp, #36]	; 0x24
 8013e44:	9b04      	ldr	r3, [sp, #16]
 8013e46:	4413      	add	r3, r2
 8013e48:	9304      	str	r3, [sp, #16]
 8013e4a:	9b05      	ldr	r3, [sp, #20]
 8013e4c:	2101      	movs	r1, #1
 8013e4e:	4413      	add	r3, r2
 8013e50:	4630      	mov	r0, r6
 8013e52:	9305      	str	r3, [sp, #20]
 8013e54:	f000 fb8a 	bl	801456c <__i2b>
 8013e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013e5a:	4607      	mov	r7, r0
 8013e5c:	f1b8 0f00 	cmp.w	r8, #0
 8013e60:	d00d      	beq.n	8013e7e <_dtoa_r+0x66e>
 8013e62:	9a05      	ldr	r2, [sp, #20]
 8013e64:	2a00      	cmp	r2, #0
 8013e66:	dd0a      	ble.n	8013e7e <_dtoa_r+0x66e>
 8013e68:	4542      	cmp	r2, r8
 8013e6a:	9904      	ldr	r1, [sp, #16]
 8013e6c:	bfa8      	it	ge
 8013e6e:	4642      	movge	r2, r8
 8013e70:	1a89      	subs	r1, r1, r2
 8013e72:	9104      	str	r1, [sp, #16]
 8013e74:	9905      	ldr	r1, [sp, #20]
 8013e76:	eba8 0802 	sub.w	r8, r8, r2
 8013e7a:	1a8a      	subs	r2, r1, r2
 8013e7c:	9205      	str	r2, [sp, #20]
 8013e7e:	b303      	cbz	r3, 8013ec2 <_dtoa_r+0x6b2>
 8013e80:	9a07      	ldr	r2, [sp, #28]
 8013e82:	2a00      	cmp	r2, #0
 8013e84:	f000 80a5 	beq.w	8013fd2 <_dtoa_r+0x7c2>
 8013e88:	2c00      	cmp	r4, #0
 8013e8a:	dd13      	ble.n	8013eb4 <_dtoa_r+0x6a4>
 8013e8c:	4639      	mov	r1, r7
 8013e8e:	4622      	mov	r2, r4
 8013e90:	4630      	mov	r0, r6
 8013e92:	930d      	str	r3, [sp, #52]	; 0x34
 8013e94:	f000 fc2a 	bl	80146ec <__pow5mult>
 8013e98:	462a      	mov	r2, r5
 8013e9a:	4601      	mov	r1, r0
 8013e9c:	4607      	mov	r7, r0
 8013e9e:	4630      	mov	r0, r6
 8013ea0:	f000 fb7a 	bl	8014598 <__multiply>
 8013ea4:	4629      	mov	r1, r5
 8013ea6:	9009      	str	r0, [sp, #36]	; 0x24
 8013ea8:	4630      	mov	r0, r6
 8013eaa:	f000 faa9 	bl	8014400 <_Bfree>
 8013eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013eb2:	4615      	mov	r5, r2
 8013eb4:	1b1a      	subs	r2, r3, r4
 8013eb6:	d004      	beq.n	8013ec2 <_dtoa_r+0x6b2>
 8013eb8:	4629      	mov	r1, r5
 8013eba:	4630      	mov	r0, r6
 8013ebc:	f000 fc16 	bl	80146ec <__pow5mult>
 8013ec0:	4605      	mov	r5, r0
 8013ec2:	2101      	movs	r1, #1
 8013ec4:	4630      	mov	r0, r6
 8013ec6:	f000 fb51 	bl	801456c <__i2b>
 8013eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	4604      	mov	r4, r0
 8013ed0:	f340 8081 	ble.w	8013fd6 <_dtoa_r+0x7c6>
 8013ed4:	461a      	mov	r2, r3
 8013ed6:	4601      	mov	r1, r0
 8013ed8:	4630      	mov	r0, r6
 8013eda:	f000 fc07 	bl	80146ec <__pow5mult>
 8013ede:	9b06      	ldr	r3, [sp, #24]
 8013ee0:	2b01      	cmp	r3, #1
 8013ee2:	4604      	mov	r4, r0
 8013ee4:	dd7a      	ble.n	8013fdc <_dtoa_r+0x7cc>
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	9309      	str	r3, [sp, #36]	; 0x24
 8013eea:	6922      	ldr	r2, [r4, #16]
 8013eec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013ef0:	6910      	ldr	r0, [r2, #16]
 8013ef2:	f000 faed 	bl	80144d0 <__hi0bits>
 8013ef6:	f1c0 0020 	rsb	r0, r0, #32
 8013efa:	9b05      	ldr	r3, [sp, #20]
 8013efc:	4418      	add	r0, r3
 8013efe:	f010 001f 	ands.w	r0, r0, #31
 8013f02:	f000 8093 	beq.w	801402c <_dtoa_r+0x81c>
 8013f06:	f1c0 0220 	rsb	r2, r0, #32
 8013f0a:	2a04      	cmp	r2, #4
 8013f0c:	f340 8085 	ble.w	801401a <_dtoa_r+0x80a>
 8013f10:	9b04      	ldr	r3, [sp, #16]
 8013f12:	f1c0 001c 	rsb	r0, r0, #28
 8013f16:	4403      	add	r3, r0
 8013f18:	9304      	str	r3, [sp, #16]
 8013f1a:	9b05      	ldr	r3, [sp, #20]
 8013f1c:	4480      	add	r8, r0
 8013f1e:	4403      	add	r3, r0
 8013f20:	9305      	str	r3, [sp, #20]
 8013f22:	9b04      	ldr	r3, [sp, #16]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	dd05      	ble.n	8013f34 <_dtoa_r+0x724>
 8013f28:	4629      	mov	r1, r5
 8013f2a:	461a      	mov	r2, r3
 8013f2c:	4630      	mov	r0, r6
 8013f2e:	f000 fc37 	bl	80147a0 <__lshift>
 8013f32:	4605      	mov	r5, r0
 8013f34:	9b05      	ldr	r3, [sp, #20]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	dd05      	ble.n	8013f46 <_dtoa_r+0x736>
 8013f3a:	4621      	mov	r1, r4
 8013f3c:	461a      	mov	r2, r3
 8013f3e:	4630      	mov	r0, r6
 8013f40:	f000 fc2e 	bl	80147a0 <__lshift>
 8013f44:	4604      	mov	r4, r0
 8013f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d071      	beq.n	8014030 <_dtoa_r+0x820>
 8013f4c:	4621      	mov	r1, r4
 8013f4e:	4628      	mov	r0, r5
 8013f50:	f000 fc92 	bl	8014878 <__mcmp>
 8013f54:	2800      	cmp	r0, #0
 8013f56:	da6b      	bge.n	8014030 <_dtoa_r+0x820>
 8013f58:	2300      	movs	r3, #0
 8013f5a:	4629      	mov	r1, r5
 8013f5c:	220a      	movs	r2, #10
 8013f5e:	4630      	mov	r0, r6
 8013f60:	f000 fa70 	bl	8014444 <__multadd>
 8013f64:	9b07      	ldr	r3, [sp, #28]
 8013f66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013f6a:	4605      	mov	r5, r0
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f000 8197 	beq.w	80142a0 <_dtoa_r+0xa90>
 8013f72:	4639      	mov	r1, r7
 8013f74:	2300      	movs	r3, #0
 8013f76:	220a      	movs	r2, #10
 8013f78:	4630      	mov	r0, r6
 8013f7a:	f000 fa63 	bl	8014444 <__multadd>
 8013f7e:	f1ba 0f00 	cmp.w	sl, #0
 8013f82:	4607      	mov	r7, r0
 8013f84:	f300 8093 	bgt.w	80140ae <_dtoa_r+0x89e>
 8013f88:	9b06      	ldr	r3, [sp, #24]
 8013f8a:	2b02      	cmp	r3, #2
 8013f8c:	dc57      	bgt.n	801403e <_dtoa_r+0x82e>
 8013f8e:	e08e      	b.n	80140ae <_dtoa_r+0x89e>
 8013f90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013f96:	e751      	b.n	8013e3c <_dtoa_r+0x62c>
 8013f98:	f109 34ff 	add.w	r4, r9, #4294967295
 8013f9c:	42a3      	cmp	r3, r4
 8013f9e:	bfbf      	itttt	lt
 8013fa0:	1ae2      	sublt	r2, r4, r3
 8013fa2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013fa4:	189b      	addlt	r3, r3, r2
 8013fa6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013fa8:	bfae      	itee	ge
 8013faa:	1b1c      	subge	r4, r3, r4
 8013fac:	4623      	movlt	r3, r4
 8013fae:	2400      	movlt	r4, #0
 8013fb0:	f1b9 0f00 	cmp.w	r9, #0
 8013fb4:	bfb5      	itete	lt
 8013fb6:	9a04      	ldrlt	r2, [sp, #16]
 8013fb8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8013fbc:	eba2 0809 	sublt.w	r8, r2, r9
 8013fc0:	464a      	movge	r2, r9
 8013fc2:	bfb8      	it	lt
 8013fc4:	2200      	movlt	r2, #0
 8013fc6:	e73c      	b.n	8013e42 <_dtoa_r+0x632>
 8013fc8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013fcc:	9f07      	ldr	r7, [sp, #28]
 8013fce:	461c      	mov	r4, r3
 8013fd0:	e744      	b.n	8013e5c <_dtoa_r+0x64c>
 8013fd2:	461a      	mov	r2, r3
 8013fd4:	e770      	b.n	8013eb8 <_dtoa_r+0x6a8>
 8013fd6:	9b06      	ldr	r3, [sp, #24]
 8013fd8:	2b01      	cmp	r3, #1
 8013fda:	dc18      	bgt.n	801400e <_dtoa_r+0x7fe>
 8013fdc:	9b02      	ldr	r3, [sp, #8]
 8013fde:	b9b3      	cbnz	r3, 801400e <_dtoa_r+0x7fe>
 8013fe0:	9b03      	ldr	r3, [sp, #12]
 8013fe2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013fe6:	b9a2      	cbnz	r2, 8014012 <_dtoa_r+0x802>
 8013fe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013fec:	0d12      	lsrs	r2, r2, #20
 8013fee:	0512      	lsls	r2, r2, #20
 8013ff0:	b18a      	cbz	r2, 8014016 <_dtoa_r+0x806>
 8013ff2:	9b04      	ldr	r3, [sp, #16]
 8013ff4:	3301      	adds	r3, #1
 8013ff6:	9304      	str	r3, [sp, #16]
 8013ff8:	9b05      	ldr	r3, [sp, #20]
 8013ffa:	3301      	adds	r3, #1
 8013ffc:	9305      	str	r3, [sp, #20]
 8013ffe:	2301      	movs	r3, #1
 8014000:	9309      	str	r3, [sp, #36]	; 0x24
 8014002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014004:	2b00      	cmp	r3, #0
 8014006:	f47f af70 	bne.w	8013eea <_dtoa_r+0x6da>
 801400a:	2001      	movs	r0, #1
 801400c:	e775      	b.n	8013efa <_dtoa_r+0x6ea>
 801400e:	2300      	movs	r3, #0
 8014010:	e7f6      	b.n	8014000 <_dtoa_r+0x7f0>
 8014012:	9b02      	ldr	r3, [sp, #8]
 8014014:	e7f4      	b.n	8014000 <_dtoa_r+0x7f0>
 8014016:	9209      	str	r2, [sp, #36]	; 0x24
 8014018:	e7f3      	b.n	8014002 <_dtoa_r+0x7f2>
 801401a:	d082      	beq.n	8013f22 <_dtoa_r+0x712>
 801401c:	9b04      	ldr	r3, [sp, #16]
 801401e:	321c      	adds	r2, #28
 8014020:	4413      	add	r3, r2
 8014022:	9304      	str	r3, [sp, #16]
 8014024:	9b05      	ldr	r3, [sp, #20]
 8014026:	4490      	add	r8, r2
 8014028:	4413      	add	r3, r2
 801402a:	e779      	b.n	8013f20 <_dtoa_r+0x710>
 801402c:	4602      	mov	r2, r0
 801402e:	e7f5      	b.n	801401c <_dtoa_r+0x80c>
 8014030:	f1b9 0f00 	cmp.w	r9, #0
 8014034:	dc36      	bgt.n	80140a4 <_dtoa_r+0x894>
 8014036:	9b06      	ldr	r3, [sp, #24]
 8014038:	2b02      	cmp	r3, #2
 801403a:	dd33      	ble.n	80140a4 <_dtoa_r+0x894>
 801403c:	46ca      	mov	sl, r9
 801403e:	f1ba 0f00 	cmp.w	sl, #0
 8014042:	d10d      	bne.n	8014060 <_dtoa_r+0x850>
 8014044:	4621      	mov	r1, r4
 8014046:	4653      	mov	r3, sl
 8014048:	2205      	movs	r2, #5
 801404a:	4630      	mov	r0, r6
 801404c:	f000 f9fa 	bl	8014444 <__multadd>
 8014050:	4601      	mov	r1, r0
 8014052:	4604      	mov	r4, r0
 8014054:	4628      	mov	r0, r5
 8014056:	f000 fc0f 	bl	8014878 <__mcmp>
 801405a:	2800      	cmp	r0, #0
 801405c:	f73f ade4 	bgt.w	8013c28 <_dtoa_r+0x418>
 8014060:	9b08      	ldr	r3, [sp, #32]
 8014062:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014066:	ea6f 0b03 	mvn.w	fp, r3
 801406a:	f04f 0900 	mov.w	r9, #0
 801406e:	4621      	mov	r1, r4
 8014070:	4630      	mov	r0, r6
 8014072:	f000 f9c5 	bl	8014400 <_Bfree>
 8014076:	2f00      	cmp	r7, #0
 8014078:	f43f aea1 	beq.w	8013dbe <_dtoa_r+0x5ae>
 801407c:	f1b9 0f00 	cmp.w	r9, #0
 8014080:	d005      	beq.n	801408e <_dtoa_r+0x87e>
 8014082:	45b9      	cmp	r9, r7
 8014084:	d003      	beq.n	801408e <_dtoa_r+0x87e>
 8014086:	4649      	mov	r1, r9
 8014088:	4630      	mov	r0, r6
 801408a:	f000 f9b9 	bl	8014400 <_Bfree>
 801408e:	4639      	mov	r1, r7
 8014090:	4630      	mov	r0, r6
 8014092:	f000 f9b5 	bl	8014400 <_Bfree>
 8014096:	e692      	b.n	8013dbe <_dtoa_r+0x5ae>
 8014098:	2400      	movs	r4, #0
 801409a:	4627      	mov	r7, r4
 801409c:	e7e0      	b.n	8014060 <_dtoa_r+0x850>
 801409e:	4693      	mov	fp, r2
 80140a0:	4627      	mov	r7, r4
 80140a2:	e5c1      	b.n	8013c28 <_dtoa_r+0x418>
 80140a4:	9b07      	ldr	r3, [sp, #28]
 80140a6:	46ca      	mov	sl, r9
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	f000 8100 	beq.w	80142ae <_dtoa_r+0xa9e>
 80140ae:	f1b8 0f00 	cmp.w	r8, #0
 80140b2:	dd05      	ble.n	80140c0 <_dtoa_r+0x8b0>
 80140b4:	4639      	mov	r1, r7
 80140b6:	4642      	mov	r2, r8
 80140b8:	4630      	mov	r0, r6
 80140ba:	f000 fb71 	bl	80147a0 <__lshift>
 80140be:	4607      	mov	r7, r0
 80140c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d05d      	beq.n	8014182 <_dtoa_r+0x972>
 80140c6:	6879      	ldr	r1, [r7, #4]
 80140c8:	4630      	mov	r0, r6
 80140ca:	f000 f959 	bl	8014380 <_Balloc>
 80140ce:	4680      	mov	r8, r0
 80140d0:	b928      	cbnz	r0, 80140de <_dtoa_r+0x8ce>
 80140d2:	4b82      	ldr	r3, [pc, #520]	; (80142dc <_dtoa_r+0xacc>)
 80140d4:	4602      	mov	r2, r0
 80140d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 80140da:	f7ff bbb1 	b.w	8013840 <_dtoa_r+0x30>
 80140de:	693a      	ldr	r2, [r7, #16]
 80140e0:	3202      	adds	r2, #2
 80140e2:	0092      	lsls	r2, r2, #2
 80140e4:	f107 010c 	add.w	r1, r7, #12
 80140e8:	300c      	adds	r0, #12
 80140ea:	f001 f8bf 	bl	801526c <memcpy>
 80140ee:	2201      	movs	r2, #1
 80140f0:	4641      	mov	r1, r8
 80140f2:	4630      	mov	r0, r6
 80140f4:	f000 fb54 	bl	80147a0 <__lshift>
 80140f8:	9b01      	ldr	r3, [sp, #4]
 80140fa:	3301      	adds	r3, #1
 80140fc:	9304      	str	r3, [sp, #16]
 80140fe:	9b01      	ldr	r3, [sp, #4]
 8014100:	4453      	add	r3, sl
 8014102:	9308      	str	r3, [sp, #32]
 8014104:	9b02      	ldr	r3, [sp, #8]
 8014106:	f003 0301 	and.w	r3, r3, #1
 801410a:	46b9      	mov	r9, r7
 801410c:	9307      	str	r3, [sp, #28]
 801410e:	4607      	mov	r7, r0
 8014110:	9b04      	ldr	r3, [sp, #16]
 8014112:	4621      	mov	r1, r4
 8014114:	3b01      	subs	r3, #1
 8014116:	4628      	mov	r0, r5
 8014118:	9302      	str	r3, [sp, #8]
 801411a:	f7ff faef 	bl	80136fc <quorem>
 801411e:	4603      	mov	r3, r0
 8014120:	3330      	adds	r3, #48	; 0x30
 8014122:	9005      	str	r0, [sp, #20]
 8014124:	4649      	mov	r1, r9
 8014126:	4628      	mov	r0, r5
 8014128:	9309      	str	r3, [sp, #36]	; 0x24
 801412a:	f000 fba5 	bl	8014878 <__mcmp>
 801412e:	463a      	mov	r2, r7
 8014130:	4682      	mov	sl, r0
 8014132:	4621      	mov	r1, r4
 8014134:	4630      	mov	r0, r6
 8014136:	f000 fbbb 	bl	80148b0 <__mdiff>
 801413a:	68c2      	ldr	r2, [r0, #12]
 801413c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801413e:	4680      	mov	r8, r0
 8014140:	bb0a      	cbnz	r2, 8014186 <_dtoa_r+0x976>
 8014142:	4601      	mov	r1, r0
 8014144:	4628      	mov	r0, r5
 8014146:	f000 fb97 	bl	8014878 <__mcmp>
 801414a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801414c:	4602      	mov	r2, r0
 801414e:	4641      	mov	r1, r8
 8014150:	4630      	mov	r0, r6
 8014152:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8014156:	f000 f953 	bl	8014400 <_Bfree>
 801415a:	9b06      	ldr	r3, [sp, #24]
 801415c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801415e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8014162:	ea43 0102 	orr.w	r1, r3, r2
 8014166:	9b07      	ldr	r3, [sp, #28]
 8014168:	4319      	orrs	r1, r3
 801416a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801416c:	d10d      	bne.n	801418a <_dtoa_r+0x97a>
 801416e:	2b39      	cmp	r3, #57	; 0x39
 8014170:	d029      	beq.n	80141c6 <_dtoa_r+0x9b6>
 8014172:	f1ba 0f00 	cmp.w	sl, #0
 8014176:	dd01      	ble.n	801417c <_dtoa_r+0x96c>
 8014178:	9b05      	ldr	r3, [sp, #20]
 801417a:	3331      	adds	r3, #49	; 0x31
 801417c:	9a02      	ldr	r2, [sp, #8]
 801417e:	7013      	strb	r3, [r2, #0]
 8014180:	e775      	b.n	801406e <_dtoa_r+0x85e>
 8014182:	4638      	mov	r0, r7
 8014184:	e7b8      	b.n	80140f8 <_dtoa_r+0x8e8>
 8014186:	2201      	movs	r2, #1
 8014188:	e7e1      	b.n	801414e <_dtoa_r+0x93e>
 801418a:	f1ba 0f00 	cmp.w	sl, #0
 801418e:	db06      	blt.n	801419e <_dtoa_r+0x98e>
 8014190:	9906      	ldr	r1, [sp, #24]
 8014192:	ea41 0a0a 	orr.w	sl, r1, sl
 8014196:	9907      	ldr	r1, [sp, #28]
 8014198:	ea5a 0a01 	orrs.w	sl, sl, r1
 801419c:	d120      	bne.n	80141e0 <_dtoa_r+0x9d0>
 801419e:	2a00      	cmp	r2, #0
 80141a0:	ddec      	ble.n	801417c <_dtoa_r+0x96c>
 80141a2:	4629      	mov	r1, r5
 80141a4:	2201      	movs	r2, #1
 80141a6:	4630      	mov	r0, r6
 80141a8:	9304      	str	r3, [sp, #16]
 80141aa:	f000 faf9 	bl	80147a0 <__lshift>
 80141ae:	4621      	mov	r1, r4
 80141b0:	4605      	mov	r5, r0
 80141b2:	f000 fb61 	bl	8014878 <__mcmp>
 80141b6:	2800      	cmp	r0, #0
 80141b8:	9b04      	ldr	r3, [sp, #16]
 80141ba:	dc02      	bgt.n	80141c2 <_dtoa_r+0x9b2>
 80141bc:	d1de      	bne.n	801417c <_dtoa_r+0x96c>
 80141be:	07da      	lsls	r2, r3, #31
 80141c0:	d5dc      	bpl.n	801417c <_dtoa_r+0x96c>
 80141c2:	2b39      	cmp	r3, #57	; 0x39
 80141c4:	d1d8      	bne.n	8014178 <_dtoa_r+0x968>
 80141c6:	9a02      	ldr	r2, [sp, #8]
 80141c8:	2339      	movs	r3, #57	; 0x39
 80141ca:	7013      	strb	r3, [r2, #0]
 80141cc:	4643      	mov	r3, r8
 80141ce:	4698      	mov	r8, r3
 80141d0:	3b01      	subs	r3, #1
 80141d2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80141d6:	2a39      	cmp	r2, #57	; 0x39
 80141d8:	d051      	beq.n	801427e <_dtoa_r+0xa6e>
 80141da:	3201      	adds	r2, #1
 80141dc:	701a      	strb	r2, [r3, #0]
 80141de:	e746      	b.n	801406e <_dtoa_r+0x85e>
 80141e0:	2a00      	cmp	r2, #0
 80141e2:	dd03      	ble.n	80141ec <_dtoa_r+0x9dc>
 80141e4:	2b39      	cmp	r3, #57	; 0x39
 80141e6:	d0ee      	beq.n	80141c6 <_dtoa_r+0x9b6>
 80141e8:	3301      	adds	r3, #1
 80141ea:	e7c7      	b.n	801417c <_dtoa_r+0x96c>
 80141ec:	9a04      	ldr	r2, [sp, #16]
 80141ee:	9908      	ldr	r1, [sp, #32]
 80141f0:	f802 3c01 	strb.w	r3, [r2, #-1]
 80141f4:	428a      	cmp	r2, r1
 80141f6:	d02b      	beq.n	8014250 <_dtoa_r+0xa40>
 80141f8:	4629      	mov	r1, r5
 80141fa:	2300      	movs	r3, #0
 80141fc:	220a      	movs	r2, #10
 80141fe:	4630      	mov	r0, r6
 8014200:	f000 f920 	bl	8014444 <__multadd>
 8014204:	45b9      	cmp	r9, r7
 8014206:	4605      	mov	r5, r0
 8014208:	f04f 0300 	mov.w	r3, #0
 801420c:	f04f 020a 	mov.w	r2, #10
 8014210:	4649      	mov	r1, r9
 8014212:	4630      	mov	r0, r6
 8014214:	d107      	bne.n	8014226 <_dtoa_r+0xa16>
 8014216:	f000 f915 	bl	8014444 <__multadd>
 801421a:	4681      	mov	r9, r0
 801421c:	4607      	mov	r7, r0
 801421e:	9b04      	ldr	r3, [sp, #16]
 8014220:	3301      	adds	r3, #1
 8014222:	9304      	str	r3, [sp, #16]
 8014224:	e774      	b.n	8014110 <_dtoa_r+0x900>
 8014226:	f000 f90d 	bl	8014444 <__multadd>
 801422a:	4639      	mov	r1, r7
 801422c:	4681      	mov	r9, r0
 801422e:	2300      	movs	r3, #0
 8014230:	220a      	movs	r2, #10
 8014232:	4630      	mov	r0, r6
 8014234:	f000 f906 	bl	8014444 <__multadd>
 8014238:	4607      	mov	r7, r0
 801423a:	e7f0      	b.n	801421e <_dtoa_r+0xa0e>
 801423c:	f1ba 0f00 	cmp.w	sl, #0
 8014240:	9a01      	ldr	r2, [sp, #4]
 8014242:	bfcc      	ite	gt
 8014244:	46d0      	movgt	r8, sl
 8014246:	f04f 0801 	movle.w	r8, #1
 801424a:	4490      	add	r8, r2
 801424c:	f04f 0900 	mov.w	r9, #0
 8014250:	4629      	mov	r1, r5
 8014252:	2201      	movs	r2, #1
 8014254:	4630      	mov	r0, r6
 8014256:	9302      	str	r3, [sp, #8]
 8014258:	f000 faa2 	bl	80147a0 <__lshift>
 801425c:	4621      	mov	r1, r4
 801425e:	4605      	mov	r5, r0
 8014260:	f000 fb0a 	bl	8014878 <__mcmp>
 8014264:	2800      	cmp	r0, #0
 8014266:	dcb1      	bgt.n	80141cc <_dtoa_r+0x9bc>
 8014268:	d102      	bne.n	8014270 <_dtoa_r+0xa60>
 801426a:	9b02      	ldr	r3, [sp, #8]
 801426c:	07db      	lsls	r3, r3, #31
 801426e:	d4ad      	bmi.n	80141cc <_dtoa_r+0x9bc>
 8014270:	4643      	mov	r3, r8
 8014272:	4698      	mov	r8, r3
 8014274:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014278:	2a30      	cmp	r2, #48	; 0x30
 801427a:	d0fa      	beq.n	8014272 <_dtoa_r+0xa62>
 801427c:	e6f7      	b.n	801406e <_dtoa_r+0x85e>
 801427e:	9a01      	ldr	r2, [sp, #4]
 8014280:	429a      	cmp	r2, r3
 8014282:	d1a4      	bne.n	80141ce <_dtoa_r+0x9be>
 8014284:	f10b 0b01 	add.w	fp, fp, #1
 8014288:	2331      	movs	r3, #49	; 0x31
 801428a:	e778      	b.n	801417e <_dtoa_r+0x96e>
 801428c:	4b14      	ldr	r3, [pc, #80]	; (80142e0 <_dtoa_r+0xad0>)
 801428e:	f7ff bb2a 	b.w	80138e6 <_dtoa_r+0xd6>
 8014292:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014294:	2b00      	cmp	r3, #0
 8014296:	f47f ab05 	bne.w	80138a4 <_dtoa_r+0x94>
 801429a:	4b12      	ldr	r3, [pc, #72]	; (80142e4 <_dtoa_r+0xad4>)
 801429c:	f7ff bb23 	b.w	80138e6 <_dtoa_r+0xd6>
 80142a0:	f1ba 0f00 	cmp.w	sl, #0
 80142a4:	dc03      	bgt.n	80142ae <_dtoa_r+0xa9e>
 80142a6:	9b06      	ldr	r3, [sp, #24]
 80142a8:	2b02      	cmp	r3, #2
 80142aa:	f73f aec8 	bgt.w	801403e <_dtoa_r+0x82e>
 80142ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80142b2:	4621      	mov	r1, r4
 80142b4:	4628      	mov	r0, r5
 80142b6:	f7ff fa21 	bl	80136fc <quorem>
 80142ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80142be:	f808 3b01 	strb.w	r3, [r8], #1
 80142c2:	9a01      	ldr	r2, [sp, #4]
 80142c4:	eba8 0202 	sub.w	r2, r8, r2
 80142c8:	4592      	cmp	sl, r2
 80142ca:	ddb7      	ble.n	801423c <_dtoa_r+0xa2c>
 80142cc:	4629      	mov	r1, r5
 80142ce:	2300      	movs	r3, #0
 80142d0:	220a      	movs	r2, #10
 80142d2:	4630      	mov	r0, r6
 80142d4:	f000 f8b6 	bl	8014444 <__multadd>
 80142d8:	4605      	mov	r5, r0
 80142da:	e7ea      	b.n	80142b2 <_dtoa_r+0xaa2>
 80142dc:	08015a20 	.word	0x08015a20
 80142e0:	08015980 	.word	0x08015980
 80142e4:	080159a4 	.word	0x080159a4

080142e8 <_free_r>:
 80142e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80142ea:	2900      	cmp	r1, #0
 80142ec:	d044      	beq.n	8014378 <_free_r+0x90>
 80142ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80142f2:	9001      	str	r0, [sp, #4]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	f1a1 0404 	sub.w	r4, r1, #4
 80142fa:	bfb8      	it	lt
 80142fc:	18e4      	addlt	r4, r4, r3
 80142fe:	f7fe fbdd 	bl	8012abc <__malloc_lock>
 8014302:	4a1e      	ldr	r2, [pc, #120]	; (801437c <_free_r+0x94>)
 8014304:	9801      	ldr	r0, [sp, #4]
 8014306:	6813      	ldr	r3, [r2, #0]
 8014308:	b933      	cbnz	r3, 8014318 <_free_r+0x30>
 801430a:	6063      	str	r3, [r4, #4]
 801430c:	6014      	str	r4, [r2, #0]
 801430e:	b003      	add	sp, #12
 8014310:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014314:	f7fe bbd8 	b.w	8012ac8 <__malloc_unlock>
 8014318:	42a3      	cmp	r3, r4
 801431a:	d908      	bls.n	801432e <_free_r+0x46>
 801431c:	6825      	ldr	r5, [r4, #0]
 801431e:	1961      	adds	r1, r4, r5
 8014320:	428b      	cmp	r3, r1
 8014322:	bf01      	itttt	eq
 8014324:	6819      	ldreq	r1, [r3, #0]
 8014326:	685b      	ldreq	r3, [r3, #4]
 8014328:	1949      	addeq	r1, r1, r5
 801432a:	6021      	streq	r1, [r4, #0]
 801432c:	e7ed      	b.n	801430a <_free_r+0x22>
 801432e:	461a      	mov	r2, r3
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	b10b      	cbz	r3, 8014338 <_free_r+0x50>
 8014334:	42a3      	cmp	r3, r4
 8014336:	d9fa      	bls.n	801432e <_free_r+0x46>
 8014338:	6811      	ldr	r1, [r2, #0]
 801433a:	1855      	adds	r5, r2, r1
 801433c:	42a5      	cmp	r5, r4
 801433e:	d10b      	bne.n	8014358 <_free_r+0x70>
 8014340:	6824      	ldr	r4, [r4, #0]
 8014342:	4421      	add	r1, r4
 8014344:	1854      	adds	r4, r2, r1
 8014346:	42a3      	cmp	r3, r4
 8014348:	6011      	str	r1, [r2, #0]
 801434a:	d1e0      	bne.n	801430e <_free_r+0x26>
 801434c:	681c      	ldr	r4, [r3, #0]
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	6053      	str	r3, [r2, #4]
 8014352:	440c      	add	r4, r1
 8014354:	6014      	str	r4, [r2, #0]
 8014356:	e7da      	b.n	801430e <_free_r+0x26>
 8014358:	d902      	bls.n	8014360 <_free_r+0x78>
 801435a:	230c      	movs	r3, #12
 801435c:	6003      	str	r3, [r0, #0]
 801435e:	e7d6      	b.n	801430e <_free_r+0x26>
 8014360:	6825      	ldr	r5, [r4, #0]
 8014362:	1961      	adds	r1, r4, r5
 8014364:	428b      	cmp	r3, r1
 8014366:	bf04      	itt	eq
 8014368:	6819      	ldreq	r1, [r3, #0]
 801436a:	685b      	ldreq	r3, [r3, #4]
 801436c:	6063      	str	r3, [r4, #4]
 801436e:	bf04      	itt	eq
 8014370:	1949      	addeq	r1, r1, r5
 8014372:	6021      	streq	r1, [r4, #0]
 8014374:	6054      	str	r4, [r2, #4]
 8014376:	e7ca      	b.n	801430e <_free_r+0x26>
 8014378:	b003      	add	sp, #12
 801437a:	bd30      	pop	{r4, r5, pc}
 801437c:	24001208 	.word	0x24001208

08014380 <_Balloc>:
 8014380:	b570      	push	{r4, r5, r6, lr}
 8014382:	69c6      	ldr	r6, [r0, #28]
 8014384:	4604      	mov	r4, r0
 8014386:	460d      	mov	r5, r1
 8014388:	b976      	cbnz	r6, 80143a8 <_Balloc+0x28>
 801438a:	2010      	movs	r0, #16
 801438c:	f7fe faee 	bl	801296c <malloc>
 8014390:	4602      	mov	r2, r0
 8014392:	61e0      	str	r0, [r4, #28]
 8014394:	b920      	cbnz	r0, 80143a0 <_Balloc+0x20>
 8014396:	4b18      	ldr	r3, [pc, #96]	; (80143f8 <_Balloc+0x78>)
 8014398:	4818      	ldr	r0, [pc, #96]	; (80143fc <_Balloc+0x7c>)
 801439a:	216b      	movs	r1, #107	; 0x6b
 801439c:	f000 ff74 	bl	8015288 <__assert_func>
 80143a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80143a4:	6006      	str	r6, [r0, #0]
 80143a6:	60c6      	str	r6, [r0, #12]
 80143a8:	69e6      	ldr	r6, [r4, #28]
 80143aa:	68f3      	ldr	r3, [r6, #12]
 80143ac:	b183      	cbz	r3, 80143d0 <_Balloc+0x50>
 80143ae:	69e3      	ldr	r3, [r4, #28]
 80143b0:	68db      	ldr	r3, [r3, #12]
 80143b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80143b6:	b9b8      	cbnz	r0, 80143e8 <_Balloc+0x68>
 80143b8:	2101      	movs	r1, #1
 80143ba:	fa01 f605 	lsl.w	r6, r1, r5
 80143be:	1d72      	adds	r2, r6, #5
 80143c0:	0092      	lsls	r2, r2, #2
 80143c2:	4620      	mov	r0, r4
 80143c4:	f000 ff7e 	bl	80152c4 <_calloc_r>
 80143c8:	b160      	cbz	r0, 80143e4 <_Balloc+0x64>
 80143ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80143ce:	e00e      	b.n	80143ee <_Balloc+0x6e>
 80143d0:	2221      	movs	r2, #33	; 0x21
 80143d2:	2104      	movs	r1, #4
 80143d4:	4620      	mov	r0, r4
 80143d6:	f000 ff75 	bl	80152c4 <_calloc_r>
 80143da:	69e3      	ldr	r3, [r4, #28]
 80143dc:	60f0      	str	r0, [r6, #12]
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	d1e4      	bne.n	80143ae <_Balloc+0x2e>
 80143e4:	2000      	movs	r0, #0
 80143e6:	bd70      	pop	{r4, r5, r6, pc}
 80143e8:	6802      	ldr	r2, [r0, #0]
 80143ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80143ee:	2300      	movs	r3, #0
 80143f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80143f4:	e7f7      	b.n	80143e6 <_Balloc+0x66>
 80143f6:	bf00      	nop
 80143f8:	080159b1 	.word	0x080159b1
 80143fc:	08015a31 	.word	0x08015a31

08014400 <_Bfree>:
 8014400:	b570      	push	{r4, r5, r6, lr}
 8014402:	69c6      	ldr	r6, [r0, #28]
 8014404:	4605      	mov	r5, r0
 8014406:	460c      	mov	r4, r1
 8014408:	b976      	cbnz	r6, 8014428 <_Bfree+0x28>
 801440a:	2010      	movs	r0, #16
 801440c:	f7fe faae 	bl	801296c <malloc>
 8014410:	4602      	mov	r2, r0
 8014412:	61e8      	str	r0, [r5, #28]
 8014414:	b920      	cbnz	r0, 8014420 <_Bfree+0x20>
 8014416:	4b09      	ldr	r3, [pc, #36]	; (801443c <_Bfree+0x3c>)
 8014418:	4809      	ldr	r0, [pc, #36]	; (8014440 <_Bfree+0x40>)
 801441a:	218f      	movs	r1, #143	; 0x8f
 801441c:	f000 ff34 	bl	8015288 <__assert_func>
 8014420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014424:	6006      	str	r6, [r0, #0]
 8014426:	60c6      	str	r6, [r0, #12]
 8014428:	b13c      	cbz	r4, 801443a <_Bfree+0x3a>
 801442a:	69eb      	ldr	r3, [r5, #28]
 801442c:	6862      	ldr	r2, [r4, #4]
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014434:	6021      	str	r1, [r4, #0]
 8014436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801443a:	bd70      	pop	{r4, r5, r6, pc}
 801443c:	080159b1 	.word	0x080159b1
 8014440:	08015a31 	.word	0x08015a31

08014444 <__multadd>:
 8014444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014448:	690d      	ldr	r5, [r1, #16]
 801444a:	4607      	mov	r7, r0
 801444c:	460c      	mov	r4, r1
 801444e:	461e      	mov	r6, r3
 8014450:	f101 0c14 	add.w	ip, r1, #20
 8014454:	2000      	movs	r0, #0
 8014456:	f8dc 3000 	ldr.w	r3, [ip]
 801445a:	b299      	uxth	r1, r3
 801445c:	fb02 6101 	mla	r1, r2, r1, r6
 8014460:	0c1e      	lsrs	r6, r3, #16
 8014462:	0c0b      	lsrs	r3, r1, #16
 8014464:	fb02 3306 	mla	r3, r2, r6, r3
 8014468:	b289      	uxth	r1, r1
 801446a:	3001      	adds	r0, #1
 801446c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014470:	4285      	cmp	r5, r0
 8014472:	f84c 1b04 	str.w	r1, [ip], #4
 8014476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801447a:	dcec      	bgt.n	8014456 <__multadd+0x12>
 801447c:	b30e      	cbz	r6, 80144c2 <__multadd+0x7e>
 801447e:	68a3      	ldr	r3, [r4, #8]
 8014480:	42ab      	cmp	r3, r5
 8014482:	dc19      	bgt.n	80144b8 <__multadd+0x74>
 8014484:	6861      	ldr	r1, [r4, #4]
 8014486:	4638      	mov	r0, r7
 8014488:	3101      	adds	r1, #1
 801448a:	f7ff ff79 	bl	8014380 <_Balloc>
 801448e:	4680      	mov	r8, r0
 8014490:	b928      	cbnz	r0, 801449e <__multadd+0x5a>
 8014492:	4602      	mov	r2, r0
 8014494:	4b0c      	ldr	r3, [pc, #48]	; (80144c8 <__multadd+0x84>)
 8014496:	480d      	ldr	r0, [pc, #52]	; (80144cc <__multadd+0x88>)
 8014498:	21ba      	movs	r1, #186	; 0xba
 801449a:	f000 fef5 	bl	8015288 <__assert_func>
 801449e:	6922      	ldr	r2, [r4, #16]
 80144a0:	3202      	adds	r2, #2
 80144a2:	f104 010c 	add.w	r1, r4, #12
 80144a6:	0092      	lsls	r2, r2, #2
 80144a8:	300c      	adds	r0, #12
 80144aa:	f000 fedf 	bl	801526c <memcpy>
 80144ae:	4621      	mov	r1, r4
 80144b0:	4638      	mov	r0, r7
 80144b2:	f7ff ffa5 	bl	8014400 <_Bfree>
 80144b6:	4644      	mov	r4, r8
 80144b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80144bc:	3501      	adds	r5, #1
 80144be:	615e      	str	r6, [r3, #20]
 80144c0:	6125      	str	r5, [r4, #16]
 80144c2:	4620      	mov	r0, r4
 80144c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144c8:	08015a20 	.word	0x08015a20
 80144cc:	08015a31 	.word	0x08015a31

080144d0 <__hi0bits>:
 80144d0:	0c03      	lsrs	r3, r0, #16
 80144d2:	041b      	lsls	r3, r3, #16
 80144d4:	b9d3      	cbnz	r3, 801450c <__hi0bits+0x3c>
 80144d6:	0400      	lsls	r0, r0, #16
 80144d8:	2310      	movs	r3, #16
 80144da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80144de:	bf04      	itt	eq
 80144e0:	0200      	lsleq	r0, r0, #8
 80144e2:	3308      	addeq	r3, #8
 80144e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80144e8:	bf04      	itt	eq
 80144ea:	0100      	lsleq	r0, r0, #4
 80144ec:	3304      	addeq	r3, #4
 80144ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80144f2:	bf04      	itt	eq
 80144f4:	0080      	lsleq	r0, r0, #2
 80144f6:	3302      	addeq	r3, #2
 80144f8:	2800      	cmp	r0, #0
 80144fa:	db05      	blt.n	8014508 <__hi0bits+0x38>
 80144fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014500:	f103 0301 	add.w	r3, r3, #1
 8014504:	bf08      	it	eq
 8014506:	2320      	moveq	r3, #32
 8014508:	4618      	mov	r0, r3
 801450a:	4770      	bx	lr
 801450c:	2300      	movs	r3, #0
 801450e:	e7e4      	b.n	80144da <__hi0bits+0xa>

08014510 <__lo0bits>:
 8014510:	6803      	ldr	r3, [r0, #0]
 8014512:	f013 0207 	ands.w	r2, r3, #7
 8014516:	d00c      	beq.n	8014532 <__lo0bits+0x22>
 8014518:	07d9      	lsls	r1, r3, #31
 801451a:	d422      	bmi.n	8014562 <__lo0bits+0x52>
 801451c:	079a      	lsls	r2, r3, #30
 801451e:	bf49      	itett	mi
 8014520:	085b      	lsrmi	r3, r3, #1
 8014522:	089b      	lsrpl	r3, r3, #2
 8014524:	6003      	strmi	r3, [r0, #0]
 8014526:	2201      	movmi	r2, #1
 8014528:	bf5c      	itt	pl
 801452a:	6003      	strpl	r3, [r0, #0]
 801452c:	2202      	movpl	r2, #2
 801452e:	4610      	mov	r0, r2
 8014530:	4770      	bx	lr
 8014532:	b299      	uxth	r1, r3
 8014534:	b909      	cbnz	r1, 801453a <__lo0bits+0x2a>
 8014536:	0c1b      	lsrs	r3, r3, #16
 8014538:	2210      	movs	r2, #16
 801453a:	b2d9      	uxtb	r1, r3
 801453c:	b909      	cbnz	r1, 8014542 <__lo0bits+0x32>
 801453e:	3208      	adds	r2, #8
 8014540:	0a1b      	lsrs	r3, r3, #8
 8014542:	0719      	lsls	r1, r3, #28
 8014544:	bf04      	itt	eq
 8014546:	091b      	lsreq	r3, r3, #4
 8014548:	3204      	addeq	r2, #4
 801454a:	0799      	lsls	r1, r3, #30
 801454c:	bf04      	itt	eq
 801454e:	089b      	lsreq	r3, r3, #2
 8014550:	3202      	addeq	r2, #2
 8014552:	07d9      	lsls	r1, r3, #31
 8014554:	d403      	bmi.n	801455e <__lo0bits+0x4e>
 8014556:	085b      	lsrs	r3, r3, #1
 8014558:	f102 0201 	add.w	r2, r2, #1
 801455c:	d003      	beq.n	8014566 <__lo0bits+0x56>
 801455e:	6003      	str	r3, [r0, #0]
 8014560:	e7e5      	b.n	801452e <__lo0bits+0x1e>
 8014562:	2200      	movs	r2, #0
 8014564:	e7e3      	b.n	801452e <__lo0bits+0x1e>
 8014566:	2220      	movs	r2, #32
 8014568:	e7e1      	b.n	801452e <__lo0bits+0x1e>
	...

0801456c <__i2b>:
 801456c:	b510      	push	{r4, lr}
 801456e:	460c      	mov	r4, r1
 8014570:	2101      	movs	r1, #1
 8014572:	f7ff ff05 	bl	8014380 <_Balloc>
 8014576:	4602      	mov	r2, r0
 8014578:	b928      	cbnz	r0, 8014586 <__i2b+0x1a>
 801457a:	4b05      	ldr	r3, [pc, #20]	; (8014590 <__i2b+0x24>)
 801457c:	4805      	ldr	r0, [pc, #20]	; (8014594 <__i2b+0x28>)
 801457e:	f240 1145 	movw	r1, #325	; 0x145
 8014582:	f000 fe81 	bl	8015288 <__assert_func>
 8014586:	2301      	movs	r3, #1
 8014588:	6144      	str	r4, [r0, #20]
 801458a:	6103      	str	r3, [r0, #16]
 801458c:	bd10      	pop	{r4, pc}
 801458e:	bf00      	nop
 8014590:	08015a20 	.word	0x08015a20
 8014594:	08015a31 	.word	0x08015a31

08014598 <__multiply>:
 8014598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801459c:	4691      	mov	r9, r2
 801459e:	690a      	ldr	r2, [r1, #16]
 80145a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80145a4:	429a      	cmp	r2, r3
 80145a6:	bfb8      	it	lt
 80145a8:	460b      	movlt	r3, r1
 80145aa:	460c      	mov	r4, r1
 80145ac:	bfbc      	itt	lt
 80145ae:	464c      	movlt	r4, r9
 80145b0:	4699      	movlt	r9, r3
 80145b2:	6927      	ldr	r7, [r4, #16]
 80145b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80145b8:	68a3      	ldr	r3, [r4, #8]
 80145ba:	6861      	ldr	r1, [r4, #4]
 80145bc:	eb07 060a 	add.w	r6, r7, sl
 80145c0:	42b3      	cmp	r3, r6
 80145c2:	b085      	sub	sp, #20
 80145c4:	bfb8      	it	lt
 80145c6:	3101      	addlt	r1, #1
 80145c8:	f7ff feda 	bl	8014380 <_Balloc>
 80145cc:	b930      	cbnz	r0, 80145dc <__multiply+0x44>
 80145ce:	4602      	mov	r2, r0
 80145d0:	4b44      	ldr	r3, [pc, #272]	; (80146e4 <__multiply+0x14c>)
 80145d2:	4845      	ldr	r0, [pc, #276]	; (80146e8 <__multiply+0x150>)
 80145d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80145d8:	f000 fe56 	bl	8015288 <__assert_func>
 80145dc:	f100 0514 	add.w	r5, r0, #20
 80145e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80145e4:	462b      	mov	r3, r5
 80145e6:	2200      	movs	r2, #0
 80145e8:	4543      	cmp	r3, r8
 80145ea:	d321      	bcc.n	8014630 <__multiply+0x98>
 80145ec:	f104 0314 	add.w	r3, r4, #20
 80145f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80145f4:	f109 0314 	add.w	r3, r9, #20
 80145f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80145fc:	9202      	str	r2, [sp, #8]
 80145fe:	1b3a      	subs	r2, r7, r4
 8014600:	3a15      	subs	r2, #21
 8014602:	f022 0203 	bic.w	r2, r2, #3
 8014606:	3204      	adds	r2, #4
 8014608:	f104 0115 	add.w	r1, r4, #21
 801460c:	428f      	cmp	r7, r1
 801460e:	bf38      	it	cc
 8014610:	2204      	movcc	r2, #4
 8014612:	9201      	str	r2, [sp, #4]
 8014614:	9a02      	ldr	r2, [sp, #8]
 8014616:	9303      	str	r3, [sp, #12]
 8014618:	429a      	cmp	r2, r3
 801461a:	d80c      	bhi.n	8014636 <__multiply+0x9e>
 801461c:	2e00      	cmp	r6, #0
 801461e:	dd03      	ble.n	8014628 <__multiply+0x90>
 8014620:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014624:	2b00      	cmp	r3, #0
 8014626:	d05b      	beq.n	80146e0 <__multiply+0x148>
 8014628:	6106      	str	r6, [r0, #16]
 801462a:	b005      	add	sp, #20
 801462c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014630:	f843 2b04 	str.w	r2, [r3], #4
 8014634:	e7d8      	b.n	80145e8 <__multiply+0x50>
 8014636:	f8b3 a000 	ldrh.w	sl, [r3]
 801463a:	f1ba 0f00 	cmp.w	sl, #0
 801463e:	d024      	beq.n	801468a <__multiply+0xf2>
 8014640:	f104 0e14 	add.w	lr, r4, #20
 8014644:	46a9      	mov	r9, r5
 8014646:	f04f 0c00 	mov.w	ip, #0
 801464a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801464e:	f8d9 1000 	ldr.w	r1, [r9]
 8014652:	fa1f fb82 	uxth.w	fp, r2
 8014656:	b289      	uxth	r1, r1
 8014658:	fb0a 110b 	mla	r1, sl, fp, r1
 801465c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014660:	f8d9 2000 	ldr.w	r2, [r9]
 8014664:	4461      	add	r1, ip
 8014666:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801466a:	fb0a c20b 	mla	r2, sl, fp, ip
 801466e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014672:	b289      	uxth	r1, r1
 8014674:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014678:	4577      	cmp	r7, lr
 801467a:	f849 1b04 	str.w	r1, [r9], #4
 801467e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014682:	d8e2      	bhi.n	801464a <__multiply+0xb2>
 8014684:	9a01      	ldr	r2, [sp, #4]
 8014686:	f845 c002 	str.w	ip, [r5, r2]
 801468a:	9a03      	ldr	r2, [sp, #12]
 801468c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014690:	3304      	adds	r3, #4
 8014692:	f1b9 0f00 	cmp.w	r9, #0
 8014696:	d021      	beq.n	80146dc <__multiply+0x144>
 8014698:	6829      	ldr	r1, [r5, #0]
 801469a:	f104 0c14 	add.w	ip, r4, #20
 801469e:	46ae      	mov	lr, r5
 80146a0:	f04f 0a00 	mov.w	sl, #0
 80146a4:	f8bc b000 	ldrh.w	fp, [ip]
 80146a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80146ac:	fb09 220b 	mla	r2, r9, fp, r2
 80146b0:	4452      	add	r2, sl
 80146b2:	b289      	uxth	r1, r1
 80146b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80146b8:	f84e 1b04 	str.w	r1, [lr], #4
 80146bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80146c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80146c4:	f8be 1000 	ldrh.w	r1, [lr]
 80146c8:	fb09 110a 	mla	r1, r9, sl, r1
 80146cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80146d0:	4567      	cmp	r7, ip
 80146d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80146d6:	d8e5      	bhi.n	80146a4 <__multiply+0x10c>
 80146d8:	9a01      	ldr	r2, [sp, #4]
 80146da:	50a9      	str	r1, [r5, r2]
 80146dc:	3504      	adds	r5, #4
 80146de:	e799      	b.n	8014614 <__multiply+0x7c>
 80146e0:	3e01      	subs	r6, #1
 80146e2:	e79b      	b.n	801461c <__multiply+0x84>
 80146e4:	08015a20 	.word	0x08015a20
 80146e8:	08015a31 	.word	0x08015a31

080146ec <__pow5mult>:
 80146ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146f0:	4615      	mov	r5, r2
 80146f2:	f012 0203 	ands.w	r2, r2, #3
 80146f6:	4606      	mov	r6, r0
 80146f8:	460f      	mov	r7, r1
 80146fa:	d007      	beq.n	801470c <__pow5mult+0x20>
 80146fc:	4c25      	ldr	r4, [pc, #148]	; (8014794 <__pow5mult+0xa8>)
 80146fe:	3a01      	subs	r2, #1
 8014700:	2300      	movs	r3, #0
 8014702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014706:	f7ff fe9d 	bl	8014444 <__multadd>
 801470a:	4607      	mov	r7, r0
 801470c:	10ad      	asrs	r5, r5, #2
 801470e:	d03d      	beq.n	801478c <__pow5mult+0xa0>
 8014710:	69f4      	ldr	r4, [r6, #28]
 8014712:	b97c      	cbnz	r4, 8014734 <__pow5mult+0x48>
 8014714:	2010      	movs	r0, #16
 8014716:	f7fe f929 	bl	801296c <malloc>
 801471a:	4602      	mov	r2, r0
 801471c:	61f0      	str	r0, [r6, #28]
 801471e:	b928      	cbnz	r0, 801472c <__pow5mult+0x40>
 8014720:	4b1d      	ldr	r3, [pc, #116]	; (8014798 <__pow5mult+0xac>)
 8014722:	481e      	ldr	r0, [pc, #120]	; (801479c <__pow5mult+0xb0>)
 8014724:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014728:	f000 fdae 	bl	8015288 <__assert_func>
 801472c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014730:	6004      	str	r4, [r0, #0]
 8014732:	60c4      	str	r4, [r0, #12]
 8014734:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801473c:	b94c      	cbnz	r4, 8014752 <__pow5mult+0x66>
 801473e:	f240 2171 	movw	r1, #625	; 0x271
 8014742:	4630      	mov	r0, r6
 8014744:	f7ff ff12 	bl	801456c <__i2b>
 8014748:	2300      	movs	r3, #0
 801474a:	f8c8 0008 	str.w	r0, [r8, #8]
 801474e:	4604      	mov	r4, r0
 8014750:	6003      	str	r3, [r0, #0]
 8014752:	f04f 0900 	mov.w	r9, #0
 8014756:	07eb      	lsls	r3, r5, #31
 8014758:	d50a      	bpl.n	8014770 <__pow5mult+0x84>
 801475a:	4639      	mov	r1, r7
 801475c:	4622      	mov	r2, r4
 801475e:	4630      	mov	r0, r6
 8014760:	f7ff ff1a 	bl	8014598 <__multiply>
 8014764:	4639      	mov	r1, r7
 8014766:	4680      	mov	r8, r0
 8014768:	4630      	mov	r0, r6
 801476a:	f7ff fe49 	bl	8014400 <_Bfree>
 801476e:	4647      	mov	r7, r8
 8014770:	106d      	asrs	r5, r5, #1
 8014772:	d00b      	beq.n	801478c <__pow5mult+0xa0>
 8014774:	6820      	ldr	r0, [r4, #0]
 8014776:	b938      	cbnz	r0, 8014788 <__pow5mult+0x9c>
 8014778:	4622      	mov	r2, r4
 801477a:	4621      	mov	r1, r4
 801477c:	4630      	mov	r0, r6
 801477e:	f7ff ff0b 	bl	8014598 <__multiply>
 8014782:	6020      	str	r0, [r4, #0]
 8014784:	f8c0 9000 	str.w	r9, [r0]
 8014788:	4604      	mov	r4, r0
 801478a:	e7e4      	b.n	8014756 <__pow5mult+0x6a>
 801478c:	4638      	mov	r0, r7
 801478e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014792:	bf00      	nop
 8014794:	08015b80 	.word	0x08015b80
 8014798:	080159b1 	.word	0x080159b1
 801479c:	08015a31 	.word	0x08015a31

080147a0 <__lshift>:
 80147a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147a4:	460c      	mov	r4, r1
 80147a6:	6849      	ldr	r1, [r1, #4]
 80147a8:	6923      	ldr	r3, [r4, #16]
 80147aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80147ae:	68a3      	ldr	r3, [r4, #8]
 80147b0:	4607      	mov	r7, r0
 80147b2:	4691      	mov	r9, r2
 80147b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80147b8:	f108 0601 	add.w	r6, r8, #1
 80147bc:	42b3      	cmp	r3, r6
 80147be:	db0b      	blt.n	80147d8 <__lshift+0x38>
 80147c0:	4638      	mov	r0, r7
 80147c2:	f7ff fddd 	bl	8014380 <_Balloc>
 80147c6:	4605      	mov	r5, r0
 80147c8:	b948      	cbnz	r0, 80147de <__lshift+0x3e>
 80147ca:	4602      	mov	r2, r0
 80147cc:	4b28      	ldr	r3, [pc, #160]	; (8014870 <__lshift+0xd0>)
 80147ce:	4829      	ldr	r0, [pc, #164]	; (8014874 <__lshift+0xd4>)
 80147d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80147d4:	f000 fd58 	bl	8015288 <__assert_func>
 80147d8:	3101      	adds	r1, #1
 80147da:	005b      	lsls	r3, r3, #1
 80147dc:	e7ee      	b.n	80147bc <__lshift+0x1c>
 80147de:	2300      	movs	r3, #0
 80147e0:	f100 0114 	add.w	r1, r0, #20
 80147e4:	f100 0210 	add.w	r2, r0, #16
 80147e8:	4618      	mov	r0, r3
 80147ea:	4553      	cmp	r3, sl
 80147ec:	db33      	blt.n	8014856 <__lshift+0xb6>
 80147ee:	6920      	ldr	r0, [r4, #16]
 80147f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80147f4:	f104 0314 	add.w	r3, r4, #20
 80147f8:	f019 091f 	ands.w	r9, r9, #31
 80147fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014804:	d02b      	beq.n	801485e <__lshift+0xbe>
 8014806:	f1c9 0e20 	rsb	lr, r9, #32
 801480a:	468a      	mov	sl, r1
 801480c:	2200      	movs	r2, #0
 801480e:	6818      	ldr	r0, [r3, #0]
 8014810:	fa00 f009 	lsl.w	r0, r0, r9
 8014814:	4310      	orrs	r0, r2
 8014816:	f84a 0b04 	str.w	r0, [sl], #4
 801481a:	f853 2b04 	ldr.w	r2, [r3], #4
 801481e:	459c      	cmp	ip, r3
 8014820:	fa22 f20e 	lsr.w	r2, r2, lr
 8014824:	d8f3      	bhi.n	801480e <__lshift+0x6e>
 8014826:	ebac 0304 	sub.w	r3, ip, r4
 801482a:	3b15      	subs	r3, #21
 801482c:	f023 0303 	bic.w	r3, r3, #3
 8014830:	3304      	adds	r3, #4
 8014832:	f104 0015 	add.w	r0, r4, #21
 8014836:	4584      	cmp	ip, r0
 8014838:	bf38      	it	cc
 801483a:	2304      	movcc	r3, #4
 801483c:	50ca      	str	r2, [r1, r3]
 801483e:	b10a      	cbz	r2, 8014844 <__lshift+0xa4>
 8014840:	f108 0602 	add.w	r6, r8, #2
 8014844:	3e01      	subs	r6, #1
 8014846:	4638      	mov	r0, r7
 8014848:	612e      	str	r6, [r5, #16]
 801484a:	4621      	mov	r1, r4
 801484c:	f7ff fdd8 	bl	8014400 <_Bfree>
 8014850:	4628      	mov	r0, r5
 8014852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014856:	f842 0f04 	str.w	r0, [r2, #4]!
 801485a:	3301      	adds	r3, #1
 801485c:	e7c5      	b.n	80147ea <__lshift+0x4a>
 801485e:	3904      	subs	r1, #4
 8014860:	f853 2b04 	ldr.w	r2, [r3], #4
 8014864:	f841 2f04 	str.w	r2, [r1, #4]!
 8014868:	459c      	cmp	ip, r3
 801486a:	d8f9      	bhi.n	8014860 <__lshift+0xc0>
 801486c:	e7ea      	b.n	8014844 <__lshift+0xa4>
 801486e:	bf00      	nop
 8014870:	08015a20 	.word	0x08015a20
 8014874:	08015a31 	.word	0x08015a31

08014878 <__mcmp>:
 8014878:	b530      	push	{r4, r5, lr}
 801487a:	6902      	ldr	r2, [r0, #16]
 801487c:	690c      	ldr	r4, [r1, #16]
 801487e:	1b12      	subs	r2, r2, r4
 8014880:	d10e      	bne.n	80148a0 <__mcmp+0x28>
 8014882:	f100 0314 	add.w	r3, r0, #20
 8014886:	3114      	adds	r1, #20
 8014888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801488c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014898:	42a5      	cmp	r5, r4
 801489a:	d003      	beq.n	80148a4 <__mcmp+0x2c>
 801489c:	d305      	bcc.n	80148aa <__mcmp+0x32>
 801489e:	2201      	movs	r2, #1
 80148a0:	4610      	mov	r0, r2
 80148a2:	bd30      	pop	{r4, r5, pc}
 80148a4:	4283      	cmp	r3, r0
 80148a6:	d3f3      	bcc.n	8014890 <__mcmp+0x18>
 80148a8:	e7fa      	b.n	80148a0 <__mcmp+0x28>
 80148aa:	f04f 32ff 	mov.w	r2, #4294967295
 80148ae:	e7f7      	b.n	80148a0 <__mcmp+0x28>

080148b0 <__mdiff>:
 80148b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b4:	460c      	mov	r4, r1
 80148b6:	4606      	mov	r6, r0
 80148b8:	4611      	mov	r1, r2
 80148ba:	4620      	mov	r0, r4
 80148bc:	4690      	mov	r8, r2
 80148be:	f7ff ffdb 	bl	8014878 <__mcmp>
 80148c2:	1e05      	subs	r5, r0, #0
 80148c4:	d110      	bne.n	80148e8 <__mdiff+0x38>
 80148c6:	4629      	mov	r1, r5
 80148c8:	4630      	mov	r0, r6
 80148ca:	f7ff fd59 	bl	8014380 <_Balloc>
 80148ce:	b930      	cbnz	r0, 80148de <__mdiff+0x2e>
 80148d0:	4b3a      	ldr	r3, [pc, #232]	; (80149bc <__mdiff+0x10c>)
 80148d2:	4602      	mov	r2, r0
 80148d4:	f240 2137 	movw	r1, #567	; 0x237
 80148d8:	4839      	ldr	r0, [pc, #228]	; (80149c0 <__mdiff+0x110>)
 80148da:	f000 fcd5 	bl	8015288 <__assert_func>
 80148de:	2301      	movs	r3, #1
 80148e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80148e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148e8:	bfa4      	itt	ge
 80148ea:	4643      	movge	r3, r8
 80148ec:	46a0      	movge	r8, r4
 80148ee:	4630      	mov	r0, r6
 80148f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80148f4:	bfa6      	itte	ge
 80148f6:	461c      	movge	r4, r3
 80148f8:	2500      	movge	r5, #0
 80148fa:	2501      	movlt	r5, #1
 80148fc:	f7ff fd40 	bl	8014380 <_Balloc>
 8014900:	b920      	cbnz	r0, 801490c <__mdiff+0x5c>
 8014902:	4b2e      	ldr	r3, [pc, #184]	; (80149bc <__mdiff+0x10c>)
 8014904:	4602      	mov	r2, r0
 8014906:	f240 2145 	movw	r1, #581	; 0x245
 801490a:	e7e5      	b.n	80148d8 <__mdiff+0x28>
 801490c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014910:	6926      	ldr	r6, [r4, #16]
 8014912:	60c5      	str	r5, [r0, #12]
 8014914:	f104 0914 	add.w	r9, r4, #20
 8014918:	f108 0514 	add.w	r5, r8, #20
 801491c:	f100 0e14 	add.w	lr, r0, #20
 8014920:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014924:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014928:	f108 0210 	add.w	r2, r8, #16
 801492c:	46f2      	mov	sl, lr
 801492e:	2100      	movs	r1, #0
 8014930:	f859 3b04 	ldr.w	r3, [r9], #4
 8014934:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014938:	fa11 f88b 	uxtah	r8, r1, fp
 801493c:	b299      	uxth	r1, r3
 801493e:	0c1b      	lsrs	r3, r3, #16
 8014940:	eba8 0801 	sub.w	r8, r8, r1
 8014944:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014948:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801494c:	fa1f f888 	uxth.w	r8, r8
 8014950:	1419      	asrs	r1, r3, #16
 8014952:	454e      	cmp	r6, r9
 8014954:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014958:	f84a 3b04 	str.w	r3, [sl], #4
 801495c:	d8e8      	bhi.n	8014930 <__mdiff+0x80>
 801495e:	1b33      	subs	r3, r6, r4
 8014960:	3b15      	subs	r3, #21
 8014962:	f023 0303 	bic.w	r3, r3, #3
 8014966:	3304      	adds	r3, #4
 8014968:	3415      	adds	r4, #21
 801496a:	42a6      	cmp	r6, r4
 801496c:	bf38      	it	cc
 801496e:	2304      	movcc	r3, #4
 8014970:	441d      	add	r5, r3
 8014972:	4473      	add	r3, lr
 8014974:	469e      	mov	lr, r3
 8014976:	462e      	mov	r6, r5
 8014978:	4566      	cmp	r6, ip
 801497a:	d30e      	bcc.n	801499a <__mdiff+0xea>
 801497c:	f10c 0203 	add.w	r2, ip, #3
 8014980:	1b52      	subs	r2, r2, r5
 8014982:	f022 0203 	bic.w	r2, r2, #3
 8014986:	3d03      	subs	r5, #3
 8014988:	45ac      	cmp	ip, r5
 801498a:	bf38      	it	cc
 801498c:	2200      	movcc	r2, #0
 801498e:	4413      	add	r3, r2
 8014990:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014994:	b17a      	cbz	r2, 80149b6 <__mdiff+0x106>
 8014996:	6107      	str	r7, [r0, #16]
 8014998:	e7a4      	b.n	80148e4 <__mdiff+0x34>
 801499a:	f856 8b04 	ldr.w	r8, [r6], #4
 801499e:	fa11 f288 	uxtah	r2, r1, r8
 80149a2:	1414      	asrs	r4, r2, #16
 80149a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80149a8:	b292      	uxth	r2, r2
 80149aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80149ae:	f84e 2b04 	str.w	r2, [lr], #4
 80149b2:	1421      	asrs	r1, r4, #16
 80149b4:	e7e0      	b.n	8014978 <__mdiff+0xc8>
 80149b6:	3f01      	subs	r7, #1
 80149b8:	e7ea      	b.n	8014990 <__mdiff+0xe0>
 80149ba:	bf00      	nop
 80149bc:	08015a20 	.word	0x08015a20
 80149c0:	08015a31 	.word	0x08015a31

080149c4 <__d2b>:
 80149c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80149c8:	460f      	mov	r7, r1
 80149ca:	2101      	movs	r1, #1
 80149cc:	ec59 8b10 	vmov	r8, r9, d0
 80149d0:	4616      	mov	r6, r2
 80149d2:	f7ff fcd5 	bl	8014380 <_Balloc>
 80149d6:	4604      	mov	r4, r0
 80149d8:	b930      	cbnz	r0, 80149e8 <__d2b+0x24>
 80149da:	4602      	mov	r2, r0
 80149dc:	4b24      	ldr	r3, [pc, #144]	; (8014a70 <__d2b+0xac>)
 80149de:	4825      	ldr	r0, [pc, #148]	; (8014a74 <__d2b+0xb0>)
 80149e0:	f240 310f 	movw	r1, #783	; 0x30f
 80149e4:	f000 fc50 	bl	8015288 <__assert_func>
 80149e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80149ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80149f0:	bb2d      	cbnz	r5, 8014a3e <__d2b+0x7a>
 80149f2:	9301      	str	r3, [sp, #4]
 80149f4:	f1b8 0300 	subs.w	r3, r8, #0
 80149f8:	d026      	beq.n	8014a48 <__d2b+0x84>
 80149fa:	4668      	mov	r0, sp
 80149fc:	9300      	str	r3, [sp, #0]
 80149fe:	f7ff fd87 	bl	8014510 <__lo0bits>
 8014a02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014a06:	b1e8      	cbz	r0, 8014a44 <__d2b+0x80>
 8014a08:	f1c0 0320 	rsb	r3, r0, #32
 8014a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8014a10:	430b      	orrs	r3, r1
 8014a12:	40c2      	lsrs	r2, r0
 8014a14:	6163      	str	r3, [r4, #20]
 8014a16:	9201      	str	r2, [sp, #4]
 8014a18:	9b01      	ldr	r3, [sp, #4]
 8014a1a:	61a3      	str	r3, [r4, #24]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	bf14      	ite	ne
 8014a20:	2202      	movne	r2, #2
 8014a22:	2201      	moveq	r2, #1
 8014a24:	6122      	str	r2, [r4, #16]
 8014a26:	b1bd      	cbz	r5, 8014a58 <__d2b+0x94>
 8014a28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014a2c:	4405      	add	r5, r0
 8014a2e:	603d      	str	r5, [r7, #0]
 8014a30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014a34:	6030      	str	r0, [r6, #0]
 8014a36:	4620      	mov	r0, r4
 8014a38:	b003      	add	sp, #12
 8014a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a42:	e7d6      	b.n	80149f2 <__d2b+0x2e>
 8014a44:	6161      	str	r1, [r4, #20]
 8014a46:	e7e7      	b.n	8014a18 <__d2b+0x54>
 8014a48:	a801      	add	r0, sp, #4
 8014a4a:	f7ff fd61 	bl	8014510 <__lo0bits>
 8014a4e:	9b01      	ldr	r3, [sp, #4]
 8014a50:	6163      	str	r3, [r4, #20]
 8014a52:	3020      	adds	r0, #32
 8014a54:	2201      	movs	r2, #1
 8014a56:	e7e5      	b.n	8014a24 <__d2b+0x60>
 8014a58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014a5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014a60:	6038      	str	r0, [r7, #0]
 8014a62:	6918      	ldr	r0, [r3, #16]
 8014a64:	f7ff fd34 	bl	80144d0 <__hi0bits>
 8014a68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014a6c:	e7e2      	b.n	8014a34 <__d2b+0x70>
 8014a6e:	bf00      	nop
 8014a70:	08015a20 	.word	0x08015a20
 8014a74:	08015a31 	.word	0x08015a31

08014a78 <__ssputs_r>:
 8014a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a7c:	688e      	ldr	r6, [r1, #8]
 8014a7e:	461f      	mov	r7, r3
 8014a80:	42be      	cmp	r6, r7
 8014a82:	680b      	ldr	r3, [r1, #0]
 8014a84:	4682      	mov	sl, r0
 8014a86:	460c      	mov	r4, r1
 8014a88:	4690      	mov	r8, r2
 8014a8a:	d82c      	bhi.n	8014ae6 <__ssputs_r+0x6e>
 8014a8c:	898a      	ldrh	r2, [r1, #12]
 8014a8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014a92:	d026      	beq.n	8014ae2 <__ssputs_r+0x6a>
 8014a94:	6965      	ldr	r5, [r4, #20]
 8014a96:	6909      	ldr	r1, [r1, #16]
 8014a98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014a9c:	eba3 0901 	sub.w	r9, r3, r1
 8014aa0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014aa4:	1c7b      	adds	r3, r7, #1
 8014aa6:	444b      	add	r3, r9
 8014aa8:	106d      	asrs	r5, r5, #1
 8014aaa:	429d      	cmp	r5, r3
 8014aac:	bf38      	it	cc
 8014aae:	461d      	movcc	r5, r3
 8014ab0:	0553      	lsls	r3, r2, #21
 8014ab2:	d527      	bpl.n	8014b04 <__ssputs_r+0x8c>
 8014ab4:	4629      	mov	r1, r5
 8014ab6:	f7fd ff81 	bl	80129bc <_malloc_r>
 8014aba:	4606      	mov	r6, r0
 8014abc:	b360      	cbz	r0, 8014b18 <__ssputs_r+0xa0>
 8014abe:	6921      	ldr	r1, [r4, #16]
 8014ac0:	464a      	mov	r2, r9
 8014ac2:	f000 fbd3 	bl	801526c <memcpy>
 8014ac6:	89a3      	ldrh	r3, [r4, #12]
 8014ac8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ad0:	81a3      	strh	r3, [r4, #12]
 8014ad2:	6126      	str	r6, [r4, #16]
 8014ad4:	6165      	str	r5, [r4, #20]
 8014ad6:	444e      	add	r6, r9
 8014ad8:	eba5 0509 	sub.w	r5, r5, r9
 8014adc:	6026      	str	r6, [r4, #0]
 8014ade:	60a5      	str	r5, [r4, #8]
 8014ae0:	463e      	mov	r6, r7
 8014ae2:	42be      	cmp	r6, r7
 8014ae4:	d900      	bls.n	8014ae8 <__ssputs_r+0x70>
 8014ae6:	463e      	mov	r6, r7
 8014ae8:	6820      	ldr	r0, [r4, #0]
 8014aea:	4632      	mov	r2, r6
 8014aec:	4641      	mov	r1, r8
 8014aee:	f000 fba3 	bl	8015238 <memmove>
 8014af2:	68a3      	ldr	r3, [r4, #8]
 8014af4:	1b9b      	subs	r3, r3, r6
 8014af6:	60a3      	str	r3, [r4, #8]
 8014af8:	6823      	ldr	r3, [r4, #0]
 8014afa:	4433      	add	r3, r6
 8014afc:	6023      	str	r3, [r4, #0]
 8014afe:	2000      	movs	r0, #0
 8014b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b04:	462a      	mov	r2, r5
 8014b06:	f000 fc05 	bl	8015314 <_realloc_r>
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	2800      	cmp	r0, #0
 8014b0e:	d1e0      	bne.n	8014ad2 <__ssputs_r+0x5a>
 8014b10:	6921      	ldr	r1, [r4, #16]
 8014b12:	4650      	mov	r0, sl
 8014b14:	f7ff fbe8 	bl	80142e8 <_free_r>
 8014b18:	230c      	movs	r3, #12
 8014b1a:	f8ca 3000 	str.w	r3, [sl]
 8014b1e:	89a3      	ldrh	r3, [r4, #12]
 8014b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b24:	81a3      	strh	r3, [r4, #12]
 8014b26:	f04f 30ff 	mov.w	r0, #4294967295
 8014b2a:	e7e9      	b.n	8014b00 <__ssputs_r+0x88>

08014b2c <_svfiprintf_r>:
 8014b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b30:	4698      	mov	r8, r3
 8014b32:	898b      	ldrh	r3, [r1, #12]
 8014b34:	061b      	lsls	r3, r3, #24
 8014b36:	b09d      	sub	sp, #116	; 0x74
 8014b38:	4607      	mov	r7, r0
 8014b3a:	460d      	mov	r5, r1
 8014b3c:	4614      	mov	r4, r2
 8014b3e:	d50e      	bpl.n	8014b5e <_svfiprintf_r+0x32>
 8014b40:	690b      	ldr	r3, [r1, #16]
 8014b42:	b963      	cbnz	r3, 8014b5e <_svfiprintf_r+0x32>
 8014b44:	2140      	movs	r1, #64	; 0x40
 8014b46:	f7fd ff39 	bl	80129bc <_malloc_r>
 8014b4a:	6028      	str	r0, [r5, #0]
 8014b4c:	6128      	str	r0, [r5, #16]
 8014b4e:	b920      	cbnz	r0, 8014b5a <_svfiprintf_r+0x2e>
 8014b50:	230c      	movs	r3, #12
 8014b52:	603b      	str	r3, [r7, #0]
 8014b54:	f04f 30ff 	mov.w	r0, #4294967295
 8014b58:	e0d0      	b.n	8014cfc <_svfiprintf_r+0x1d0>
 8014b5a:	2340      	movs	r3, #64	; 0x40
 8014b5c:	616b      	str	r3, [r5, #20]
 8014b5e:	2300      	movs	r3, #0
 8014b60:	9309      	str	r3, [sp, #36]	; 0x24
 8014b62:	2320      	movs	r3, #32
 8014b64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b68:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b6c:	2330      	movs	r3, #48	; 0x30
 8014b6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014d14 <_svfiprintf_r+0x1e8>
 8014b72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b76:	f04f 0901 	mov.w	r9, #1
 8014b7a:	4623      	mov	r3, r4
 8014b7c:	469a      	mov	sl, r3
 8014b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b82:	b10a      	cbz	r2, 8014b88 <_svfiprintf_r+0x5c>
 8014b84:	2a25      	cmp	r2, #37	; 0x25
 8014b86:	d1f9      	bne.n	8014b7c <_svfiprintf_r+0x50>
 8014b88:	ebba 0b04 	subs.w	fp, sl, r4
 8014b8c:	d00b      	beq.n	8014ba6 <_svfiprintf_r+0x7a>
 8014b8e:	465b      	mov	r3, fp
 8014b90:	4622      	mov	r2, r4
 8014b92:	4629      	mov	r1, r5
 8014b94:	4638      	mov	r0, r7
 8014b96:	f7ff ff6f 	bl	8014a78 <__ssputs_r>
 8014b9a:	3001      	adds	r0, #1
 8014b9c:	f000 80a9 	beq.w	8014cf2 <_svfiprintf_r+0x1c6>
 8014ba0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ba2:	445a      	add	r2, fp
 8014ba4:	9209      	str	r2, [sp, #36]	; 0x24
 8014ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	f000 80a1 	beq.w	8014cf2 <_svfiprintf_r+0x1c6>
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8014bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014bba:	f10a 0a01 	add.w	sl, sl, #1
 8014bbe:	9304      	str	r3, [sp, #16]
 8014bc0:	9307      	str	r3, [sp, #28]
 8014bc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014bc6:	931a      	str	r3, [sp, #104]	; 0x68
 8014bc8:	4654      	mov	r4, sl
 8014bca:	2205      	movs	r2, #5
 8014bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bd0:	4850      	ldr	r0, [pc, #320]	; (8014d14 <_svfiprintf_r+0x1e8>)
 8014bd2:	f7eb fb9d 	bl	8000310 <memchr>
 8014bd6:	9a04      	ldr	r2, [sp, #16]
 8014bd8:	b9d8      	cbnz	r0, 8014c12 <_svfiprintf_r+0xe6>
 8014bda:	06d0      	lsls	r0, r2, #27
 8014bdc:	bf44      	itt	mi
 8014bde:	2320      	movmi	r3, #32
 8014be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014be4:	0711      	lsls	r1, r2, #28
 8014be6:	bf44      	itt	mi
 8014be8:	232b      	movmi	r3, #43	; 0x2b
 8014bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014bee:	f89a 3000 	ldrb.w	r3, [sl]
 8014bf2:	2b2a      	cmp	r3, #42	; 0x2a
 8014bf4:	d015      	beq.n	8014c22 <_svfiprintf_r+0xf6>
 8014bf6:	9a07      	ldr	r2, [sp, #28]
 8014bf8:	4654      	mov	r4, sl
 8014bfa:	2000      	movs	r0, #0
 8014bfc:	f04f 0c0a 	mov.w	ip, #10
 8014c00:	4621      	mov	r1, r4
 8014c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c06:	3b30      	subs	r3, #48	; 0x30
 8014c08:	2b09      	cmp	r3, #9
 8014c0a:	d94d      	bls.n	8014ca8 <_svfiprintf_r+0x17c>
 8014c0c:	b1b0      	cbz	r0, 8014c3c <_svfiprintf_r+0x110>
 8014c0e:	9207      	str	r2, [sp, #28]
 8014c10:	e014      	b.n	8014c3c <_svfiprintf_r+0x110>
 8014c12:	eba0 0308 	sub.w	r3, r0, r8
 8014c16:	fa09 f303 	lsl.w	r3, r9, r3
 8014c1a:	4313      	orrs	r3, r2
 8014c1c:	9304      	str	r3, [sp, #16]
 8014c1e:	46a2      	mov	sl, r4
 8014c20:	e7d2      	b.n	8014bc8 <_svfiprintf_r+0x9c>
 8014c22:	9b03      	ldr	r3, [sp, #12]
 8014c24:	1d19      	adds	r1, r3, #4
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	9103      	str	r1, [sp, #12]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	bfbb      	ittet	lt
 8014c2e:	425b      	neglt	r3, r3
 8014c30:	f042 0202 	orrlt.w	r2, r2, #2
 8014c34:	9307      	strge	r3, [sp, #28]
 8014c36:	9307      	strlt	r3, [sp, #28]
 8014c38:	bfb8      	it	lt
 8014c3a:	9204      	strlt	r2, [sp, #16]
 8014c3c:	7823      	ldrb	r3, [r4, #0]
 8014c3e:	2b2e      	cmp	r3, #46	; 0x2e
 8014c40:	d10c      	bne.n	8014c5c <_svfiprintf_r+0x130>
 8014c42:	7863      	ldrb	r3, [r4, #1]
 8014c44:	2b2a      	cmp	r3, #42	; 0x2a
 8014c46:	d134      	bne.n	8014cb2 <_svfiprintf_r+0x186>
 8014c48:	9b03      	ldr	r3, [sp, #12]
 8014c4a:	1d1a      	adds	r2, r3, #4
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	9203      	str	r2, [sp, #12]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	bfb8      	it	lt
 8014c54:	f04f 33ff 	movlt.w	r3, #4294967295
 8014c58:	3402      	adds	r4, #2
 8014c5a:	9305      	str	r3, [sp, #20]
 8014c5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014d24 <_svfiprintf_r+0x1f8>
 8014c60:	7821      	ldrb	r1, [r4, #0]
 8014c62:	2203      	movs	r2, #3
 8014c64:	4650      	mov	r0, sl
 8014c66:	f7eb fb53 	bl	8000310 <memchr>
 8014c6a:	b138      	cbz	r0, 8014c7c <_svfiprintf_r+0x150>
 8014c6c:	9b04      	ldr	r3, [sp, #16]
 8014c6e:	eba0 000a 	sub.w	r0, r0, sl
 8014c72:	2240      	movs	r2, #64	; 0x40
 8014c74:	4082      	lsls	r2, r0
 8014c76:	4313      	orrs	r3, r2
 8014c78:	3401      	adds	r4, #1
 8014c7a:	9304      	str	r3, [sp, #16]
 8014c7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c80:	4825      	ldr	r0, [pc, #148]	; (8014d18 <_svfiprintf_r+0x1ec>)
 8014c82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c86:	2206      	movs	r2, #6
 8014c88:	f7eb fb42 	bl	8000310 <memchr>
 8014c8c:	2800      	cmp	r0, #0
 8014c8e:	d038      	beq.n	8014d02 <_svfiprintf_r+0x1d6>
 8014c90:	4b22      	ldr	r3, [pc, #136]	; (8014d1c <_svfiprintf_r+0x1f0>)
 8014c92:	bb1b      	cbnz	r3, 8014cdc <_svfiprintf_r+0x1b0>
 8014c94:	9b03      	ldr	r3, [sp, #12]
 8014c96:	3307      	adds	r3, #7
 8014c98:	f023 0307 	bic.w	r3, r3, #7
 8014c9c:	3308      	adds	r3, #8
 8014c9e:	9303      	str	r3, [sp, #12]
 8014ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ca2:	4433      	add	r3, r6
 8014ca4:	9309      	str	r3, [sp, #36]	; 0x24
 8014ca6:	e768      	b.n	8014b7a <_svfiprintf_r+0x4e>
 8014ca8:	fb0c 3202 	mla	r2, ip, r2, r3
 8014cac:	460c      	mov	r4, r1
 8014cae:	2001      	movs	r0, #1
 8014cb0:	e7a6      	b.n	8014c00 <_svfiprintf_r+0xd4>
 8014cb2:	2300      	movs	r3, #0
 8014cb4:	3401      	adds	r4, #1
 8014cb6:	9305      	str	r3, [sp, #20]
 8014cb8:	4619      	mov	r1, r3
 8014cba:	f04f 0c0a 	mov.w	ip, #10
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cc4:	3a30      	subs	r2, #48	; 0x30
 8014cc6:	2a09      	cmp	r2, #9
 8014cc8:	d903      	bls.n	8014cd2 <_svfiprintf_r+0x1a6>
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d0c6      	beq.n	8014c5c <_svfiprintf_r+0x130>
 8014cce:	9105      	str	r1, [sp, #20]
 8014cd0:	e7c4      	b.n	8014c5c <_svfiprintf_r+0x130>
 8014cd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	2301      	movs	r3, #1
 8014cda:	e7f0      	b.n	8014cbe <_svfiprintf_r+0x192>
 8014cdc:	ab03      	add	r3, sp, #12
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	462a      	mov	r2, r5
 8014ce2:	4b0f      	ldr	r3, [pc, #60]	; (8014d20 <_svfiprintf_r+0x1f4>)
 8014ce4:	a904      	add	r1, sp, #16
 8014ce6:	4638      	mov	r0, r7
 8014ce8:	f7fd ff86 	bl	8012bf8 <_printf_float>
 8014cec:	1c42      	adds	r2, r0, #1
 8014cee:	4606      	mov	r6, r0
 8014cf0:	d1d6      	bne.n	8014ca0 <_svfiprintf_r+0x174>
 8014cf2:	89ab      	ldrh	r3, [r5, #12]
 8014cf4:	065b      	lsls	r3, r3, #25
 8014cf6:	f53f af2d 	bmi.w	8014b54 <_svfiprintf_r+0x28>
 8014cfa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014cfc:	b01d      	add	sp, #116	; 0x74
 8014cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d02:	ab03      	add	r3, sp, #12
 8014d04:	9300      	str	r3, [sp, #0]
 8014d06:	462a      	mov	r2, r5
 8014d08:	4b05      	ldr	r3, [pc, #20]	; (8014d20 <_svfiprintf_r+0x1f4>)
 8014d0a:	a904      	add	r1, sp, #16
 8014d0c:	4638      	mov	r0, r7
 8014d0e:	f7fe f9fb 	bl	8013108 <_printf_i>
 8014d12:	e7eb      	b.n	8014cec <_svfiprintf_r+0x1c0>
 8014d14:	08015b8c 	.word	0x08015b8c
 8014d18:	08015b96 	.word	0x08015b96
 8014d1c:	08012bf9 	.word	0x08012bf9
 8014d20:	08014a79 	.word	0x08014a79
 8014d24:	08015b92 	.word	0x08015b92

08014d28 <__sfputc_r>:
 8014d28:	6893      	ldr	r3, [r2, #8]
 8014d2a:	3b01      	subs	r3, #1
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	b410      	push	{r4}
 8014d30:	6093      	str	r3, [r2, #8]
 8014d32:	da08      	bge.n	8014d46 <__sfputc_r+0x1e>
 8014d34:	6994      	ldr	r4, [r2, #24]
 8014d36:	42a3      	cmp	r3, r4
 8014d38:	db01      	blt.n	8014d3e <__sfputc_r+0x16>
 8014d3a:	290a      	cmp	r1, #10
 8014d3c:	d103      	bne.n	8014d46 <__sfputc_r+0x1e>
 8014d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d42:	f000 b9e3 	b.w	801510c <__swbuf_r>
 8014d46:	6813      	ldr	r3, [r2, #0]
 8014d48:	1c58      	adds	r0, r3, #1
 8014d4a:	6010      	str	r0, [r2, #0]
 8014d4c:	7019      	strb	r1, [r3, #0]
 8014d4e:	4608      	mov	r0, r1
 8014d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d54:	4770      	bx	lr

08014d56 <__sfputs_r>:
 8014d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d58:	4606      	mov	r6, r0
 8014d5a:	460f      	mov	r7, r1
 8014d5c:	4614      	mov	r4, r2
 8014d5e:	18d5      	adds	r5, r2, r3
 8014d60:	42ac      	cmp	r4, r5
 8014d62:	d101      	bne.n	8014d68 <__sfputs_r+0x12>
 8014d64:	2000      	movs	r0, #0
 8014d66:	e007      	b.n	8014d78 <__sfputs_r+0x22>
 8014d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d6c:	463a      	mov	r2, r7
 8014d6e:	4630      	mov	r0, r6
 8014d70:	f7ff ffda 	bl	8014d28 <__sfputc_r>
 8014d74:	1c43      	adds	r3, r0, #1
 8014d76:	d1f3      	bne.n	8014d60 <__sfputs_r+0xa>
 8014d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d7c <_vfiprintf_r>:
 8014d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d80:	460d      	mov	r5, r1
 8014d82:	b09d      	sub	sp, #116	; 0x74
 8014d84:	4614      	mov	r4, r2
 8014d86:	4698      	mov	r8, r3
 8014d88:	4606      	mov	r6, r0
 8014d8a:	b118      	cbz	r0, 8014d94 <_vfiprintf_r+0x18>
 8014d8c:	6a03      	ldr	r3, [r0, #32]
 8014d8e:	b90b      	cbnz	r3, 8014d94 <_vfiprintf_r+0x18>
 8014d90:	f7fe fb68 	bl	8013464 <__sinit>
 8014d94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d96:	07d9      	lsls	r1, r3, #31
 8014d98:	d405      	bmi.n	8014da6 <_vfiprintf_r+0x2a>
 8014d9a:	89ab      	ldrh	r3, [r5, #12]
 8014d9c:	059a      	lsls	r2, r3, #22
 8014d9e:	d402      	bmi.n	8014da6 <_vfiprintf_r+0x2a>
 8014da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014da2:	f7ee fdb0 	bl	8003906 <__retarget_lock_acquire_recursive>
 8014da6:	89ab      	ldrh	r3, [r5, #12]
 8014da8:	071b      	lsls	r3, r3, #28
 8014daa:	d501      	bpl.n	8014db0 <_vfiprintf_r+0x34>
 8014dac:	692b      	ldr	r3, [r5, #16]
 8014dae:	b99b      	cbnz	r3, 8014dd8 <_vfiprintf_r+0x5c>
 8014db0:	4629      	mov	r1, r5
 8014db2:	4630      	mov	r0, r6
 8014db4:	f000 f9e8 	bl	8015188 <__swsetup_r>
 8014db8:	b170      	cbz	r0, 8014dd8 <_vfiprintf_r+0x5c>
 8014dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014dbc:	07dc      	lsls	r4, r3, #31
 8014dbe:	d504      	bpl.n	8014dca <_vfiprintf_r+0x4e>
 8014dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8014dc4:	b01d      	add	sp, #116	; 0x74
 8014dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dca:	89ab      	ldrh	r3, [r5, #12]
 8014dcc:	0598      	lsls	r0, r3, #22
 8014dce:	d4f7      	bmi.n	8014dc0 <_vfiprintf_r+0x44>
 8014dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014dd2:	f7ee fdac 	bl	800392e <__retarget_lock_release_recursive>
 8014dd6:	e7f3      	b.n	8014dc0 <_vfiprintf_r+0x44>
 8014dd8:	2300      	movs	r3, #0
 8014dda:	9309      	str	r3, [sp, #36]	; 0x24
 8014ddc:	2320      	movs	r3, #32
 8014dde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8014de6:	2330      	movs	r3, #48	; 0x30
 8014de8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014f9c <_vfiprintf_r+0x220>
 8014dec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014df0:	f04f 0901 	mov.w	r9, #1
 8014df4:	4623      	mov	r3, r4
 8014df6:	469a      	mov	sl, r3
 8014df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014dfc:	b10a      	cbz	r2, 8014e02 <_vfiprintf_r+0x86>
 8014dfe:	2a25      	cmp	r2, #37	; 0x25
 8014e00:	d1f9      	bne.n	8014df6 <_vfiprintf_r+0x7a>
 8014e02:	ebba 0b04 	subs.w	fp, sl, r4
 8014e06:	d00b      	beq.n	8014e20 <_vfiprintf_r+0xa4>
 8014e08:	465b      	mov	r3, fp
 8014e0a:	4622      	mov	r2, r4
 8014e0c:	4629      	mov	r1, r5
 8014e0e:	4630      	mov	r0, r6
 8014e10:	f7ff ffa1 	bl	8014d56 <__sfputs_r>
 8014e14:	3001      	adds	r0, #1
 8014e16:	f000 80a9 	beq.w	8014f6c <_vfiprintf_r+0x1f0>
 8014e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e1c:	445a      	add	r2, fp
 8014e1e:	9209      	str	r2, [sp, #36]	; 0x24
 8014e20:	f89a 3000 	ldrb.w	r3, [sl]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	f000 80a1 	beq.w	8014f6c <_vfiprintf_r+0x1f0>
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8014e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e34:	f10a 0a01 	add.w	sl, sl, #1
 8014e38:	9304      	str	r3, [sp, #16]
 8014e3a:	9307      	str	r3, [sp, #28]
 8014e3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e40:	931a      	str	r3, [sp, #104]	; 0x68
 8014e42:	4654      	mov	r4, sl
 8014e44:	2205      	movs	r2, #5
 8014e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e4a:	4854      	ldr	r0, [pc, #336]	; (8014f9c <_vfiprintf_r+0x220>)
 8014e4c:	f7eb fa60 	bl	8000310 <memchr>
 8014e50:	9a04      	ldr	r2, [sp, #16]
 8014e52:	b9d8      	cbnz	r0, 8014e8c <_vfiprintf_r+0x110>
 8014e54:	06d1      	lsls	r1, r2, #27
 8014e56:	bf44      	itt	mi
 8014e58:	2320      	movmi	r3, #32
 8014e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e5e:	0713      	lsls	r3, r2, #28
 8014e60:	bf44      	itt	mi
 8014e62:	232b      	movmi	r3, #43	; 0x2b
 8014e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e68:	f89a 3000 	ldrb.w	r3, [sl]
 8014e6c:	2b2a      	cmp	r3, #42	; 0x2a
 8014e6e:	d015      	beq.n	8014e9c <_vfiprintf_r+0x120>
 8014e70:	9a07      	ldr	r2, [sp, #28]
 8014e72:	4654      	mov	r4, sl
 8014e74:	2000      	movs	r0, #0
 8014e76:	f04f 0c0a 	mov.w	ip, #10
 8014e7a:	4621      	mov	r1, r4
 8014e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e80:	3b30      	subs	r3, #48	; 0x30
 8014e82:	2b09      	cmp	r3, #9
 8014e84:	d94d      	bls.n	8014f22 <_vfiprintf_r+0x1a6>
 8014e86:	b1b0      	cbz	r0, 8014eb6 <_vfiprintf_r+0x13a>
 8014e88:	9207      	str	r2, [sp, #28]
 8014e8a:	e014      	b.n	8014eb6 <_vfiprintf_r+0x13a>
 8014e8c:	eba0 0308 	sub.w	r3, r0, r8
 8014e90:	fa09 f303 	lsl.w	r3, r9, r3
 8014e94:	4313      	orrs	r3, r2
 8014e96:	9304      	str	r3, [sp, #16]
 8014e98:	46a2      	mov	sl, r4
 8014e9a:	e7d2      	b.n	8014e42 <_vfiprintf_r+0xc6>
 8014e9c:	9b03      	ldr	r3, [sp, #12]
 8014e9e:	1d19      	adds	r1, r3, #4
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	9103      	str	r1, [sp, #12]
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	bfbb      	ittet	lt
 8014ea8:	425b      	neglt	r3, r3
 8014eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8014eae:	9307      	strge	r3, [sp, #28]
 8014eb0:	9307      	strlt	r3, [sp, #28]
 8014eb2:	bfb8      	it	lt
 8014eb4:	9204      	strlt	r2, [sp, #16]
 8014eb6:	7823      	ldrb	r3, [r4, #0]
 8014eb8:	2b2e      	cmp	r3, #46	; 0x2e
 8014eba:	d10c      	bne.n	8014ed6 <_vfiprintf_r+0x15a>
 8014ebc:	7863      	ldrb	r3, [r4, #1]
 8014ebe:	2b2a      	cmp	r3, #42	; 0x2a
 8014ec0:	d134      	bne.n	8014f2c <_vfiprintf_r+0x1b0>
 8014ec2:	9b03      	ldr	r3, [sp, #12]
 8014ec4:	1d1a      	adds	r2, r3, #4
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	9203      	str	r2, [sp, #12]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	bfb8      	it	lt
 8014ece:	f04f 33ff 	movlt.w	r3, #4294967295
 8014ed2:	3402      	adds	r4, #2
 8014ed4:	9305      	str	r3, [sp, #20]
 8014ed6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014fac <_vfiprintf_r+0x230>
 8014eda:	7821      	ldrb	r1, [r4, #0]
 8014edc:	2203      	movs	r2, #3
 8014ede:	4650      	mov	r0, sl
 8014ee0:	f7eb fa16 	bl	8000310 <memchr>
 8014ee4:	b138      	cbz	r0, 8014ef6 <_vfiprintf_r+0x17a>
 8014ee6:	9b04      	ldr	r3, [sp, #16]
 8014ee8:	eba0 000a 	sub.w	r0, r0, sl
 8014eec:	2240      	movs	r2, #64	; 0x40
 8014eee:	4082      	lsls	r2, r0
 8014ef0:	4313      	orrs	r3, r2
 8014ef2:	3401      	adds	r4, #1
 8014ef4:	9304      	str	r3, [sp, #16]
 8014ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014efa:	4829      	ldr	r0, [pc, #164]	; (8014fa0 <_vfiprintf_r+0x224>)
 8014efc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f00:	2206      	movs	r2, #6
 8014f02:	f7eb fa05 	bl	8000310 <memchr>
 8014f06:	2800      	cmp	r0, #0
 8014f08:	d03f      	beq.n	8014f8a <_vfiprintf_r+0x20e>
 8014f0a:	4b26      	ldr	r3, [pc, #152]	; (8014fa4 <_vfiprintf_r+0x228>)
 8014f0c:	bb1b      	cbnz	r3, 8014f56 <_vfiprintf_r+0x1da>
 8014f0e:	9b03      	ldr	r3, [sp, #12]
 8014f10:	3307      	adds	r3, #7
 8014f12:	f023 0307 	bic.w	r3, r3, #7
 8014f16:	3308      	adds	r3, #8
 8014f18:	9303      	str	r3, [sp, #12]
 8014f1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f1c:	443b      	add	r3, r7
 8014f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8014f20:	e768      	b.n	8014df4 <_vfiprintf_r+0x78>
 8014f22:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f26:	460c      	mov	r4, r1
 8014f28:	2001      	movs	r0, #1
 8014f2a:	e7a6      	b.n	8014e7a <_vfiprintf_r+0xfe>
 8014f2c:	2300      	movs	r3, #0
 8014f2e:	3401      	adds	r4, #1
 8014f30:	9305      	str	r3, [sp, #20]
 8014f32:	4619      	mov	r1, r3
 8014f34:	f04f 0c0a 	mov.w	ip, #10
 8014f38:	4620      	mov	r0, r4
 8014f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f3e:	3a30      	subs	r2, #48	; 0x30
 8014f40:	2a09      	cmp	r2, #9
 8014f42:	d903      	bls.n	8014f4c <_vfiprintf_r+0x1d0>
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d0c6      	beq.n	8014ed6 <_vfiprintf_r+0x15a>
 8014f48:	9105      	str	r1, [sp, #20]
 8014f4a:	e7c4      	b.n	8014ed6 <_vfiprintf_r+0x15a>
 8014f4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f50:	4604      	mov	r4, r0
 8014f52:	2301      	movs	r3, #1
 8014f54:	e7f0      	b.n	8014f38 <_vfiprintf_r+0x1bc>
 8014f56:	ab03      	add	r3, sp, #12
 8014f58:	9300      	str	r3, [sp, #0]
 8014f5a:	462a      	mov	r2, r5
 8014f5c:	4b12      	ldr	r3, [pc, #72]	; (8014fa8 <_vfiprintf_r+0x22c>)
 8014f5e:	a904      	add	r1, sp, #16
 8014f60:	4630      	mov	r0, r6
 8014f62:	f7fd fe49 	bl	8012bf8 <_printf_float>
 8014f66:	4607      	mov	r7, r0
 8014f68:	1c78      	adds	r0, r7, #1
 8014f6a:	d1d6      	bne.n	8014f1a <_vfiprintf_r+0x19e>
 8014f6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f6e:	07d9      	lsls	r1, r3, #31
 8014f70:	d405      	bmi.n	8014f7e <_vfiprintf_r+0x202>
 8014f72:	89ab      	ldrh	r3, [r5, #12]
 8014f74:	059a      	lsls	r2, r3, #22
 8014f76:	d402      	bmi.n	8014f7e <_vfiprintf_r+0x202>
 8014f78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f7a:	f7ee fcd8 	bl	800392e <__retarget_lock_release_recursive>
 8014f7e:	89ab      	ldrh	r3, [r5, #12]
 8014f80:	065b      	lsls	r3, r3, #25
 8014f82:	f53f af1d 	bmi.w	8014dc0 <_vfiprintf_r+0x44>
 8014f86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f88:	e71c      	b.n	8014dc4 <_vfiprintf_r+0x48>
 8014f8a:	ab03      	add	r3, sp, #12
 8014f8c:	9300      	str	r3, [sp, #0]
 8014f8e:	462a      	mov	r2, r5
 8014f90:	4b05      	ldr	r3, [pc, #20]	; (8014fa8 <_vfiprintf_r+0x22c>)
 8014f92:	a904      	add	r1, sp, #16
 8014f94:	4630      	mov	r0, r6
 8014f96:	f7fe f8b7 	bl	8013108 <_printf_i>
 8014f9a:	e7e4      	b.n	8014f66 <_vfiprintf_r+0x1ea>
 8014f9c:	08015b8c 	.word	0x08015b8c
 8014fa0:	08015b96 	.word	0x08015b96
 8014fa4:	08012bf9 	.word	0x08012bf9
 8014fa8:	08014d57 	.word	0x08014d57
 8014fac:	08015b92 	.word	0x08015b92

08014fb0 <__sflush_r>:
 8014fb0:	898a      	ldrh	r2, [r1, #12]
 8014fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fb6:	4605      	mov	r5, r0
 8014fb8:	0710      	lsls	r0, r2, #28
 8014fba:	460c      	mov	r4, r1
 8014fbc:	d458      	bmi.n	8015070 <__sflush_r+0xc0>
 8014fbe:	684b      	ldr	r3, [r1, #4]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	dc05      	bgt.n	8014fd0 <__sflush_r+0x20>
 8014fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	dc02      	bgt.n	8014fd0 <__sflush_r+0x20>
 8014fca:	2000      	movs	r0, #0
 8014fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014fd2:	2e00      	cmp	r6, #0
 8014fd4:	d0f9      	beq.n	8014fca <__sflush_r+0x1a>
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014fdc:	682f      	ldr	r7, [r5, #0]
 8014fde:	6a21      	ldr	r1, [r4, #32]
 8014fe0:	602b      	str	r3, [r5, #0]
 8014fe2:	d032      	beq.n	801504a <__sflush_r+0x9a>
 8014fe4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014fe6:	89a3      	ldrh	r3, [r4, #12]
 8014fe8:	075a      	lsls	r2, r3, #29
 8014fea:	d505      	bpl.n	8014ff8 <__sflush_r+0x48>
 8014fec:	6863      	ldr	r3, [r4, #4]
 8014fee:	1ac0      	subs	r0, r0, r3
 8014ff0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ff2:	b10b      	cbz	r3, 8014ff8 <__sflush_r+0x48>
 8014ff4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014ff6:	1ac0      	subs	r0, r0, r3
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	4602      	mov	r2, r0
 8014ffc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ffe:	6a21      	ldr	r1, [r4, #32]
 8015000:	4628      	mov	r0, r5
 8015002:	47b0      	blx	r6
 8015004:	1c43      	adds	r3, r0, #1
 8015006:	89a3      	ldrh	r3, [r4, #12]
 8015008:	d106      	bne.n	8015018 <__sflush_r+0x68>
 801500a:	6829      	ldr	r1, [r5, #0]
 801500c:	291d      	cmp	r1, #29
 801500e:	d82b      	bhi.n	8015068 <__sflush_r+0xb8>
 8015010:	4a29      	ldr	r2, [pc, #164]	; (80150b8 <__sflush_r+0x108>)
 8015012:	410a      	asrs	r2, r1
 8015014:	07d6      	lsls	r6, r2, #31
 8015016:	d427      	bmi.n	8015068 <__sflush_r+0xb8>
 8015018:	2200      	movs	r2, #0
 801501a:	6062      	str	r2, [r4, #4]
 801501c:	04d9      	lsls	r1, r3, #19
 801501e:	6922      	ldr	r2, [r4, #16]
 8015020:	6022      	str	r2, [r4, #0]
 8015022:	d504      	bpl.n	801502e <__sflush_r+0x7e>
 8015024:	1c42      	adds	r2, r0, #1
 8015026:	d101      	bne.n	801502c <__sflush_r+0x7c>
 8015028:	682b      	ldr	r3, [r5, #0]
 801502a:	b903      	cbnz	r3, 801502e <__sflush_r+0x7e>
 801502c:	6560      	str	r0, [r4, #84]	; 0x54
 801502e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015030:	602f      	str	r7, [r5, #0]
 8015032:	2900      	cmp	r1, #0
 8015034:	d0c9      	beq.n	8014fca <__sflush_r+0x1a>
 8015036:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801503a:	4299      	cmp	r1, r3
 801503c:	d002      	beq.n	8015044 <__sflush_r+0x94>
 801503e:	4628      	mov	r0, r5
 8015040:	f7ff f952 	bl	80142e8 <_free_r>
 8015044:	2000      	movs	r0, #0
 8015046:	6360      	str	r0, [r4, #52]	; 0x34
 8015048:	e7c0      	b.n	8014fcc <__sflush_r+0x1c>
 801504a:	2301      	movs	r3, #1
 801504c:	4628      	mov	r0, r5
 801504e:	47b0      	blx	r6
 8015050:	1c41      	adds	r1, r0, #1
 8015052:	d1c8      	bne.n	8014fe6 <__sflush_r+0x36>
 8015054:	682b      	ldr	r3, [r5, #0]
 8015056:	2b00      	cmp	r3, #0
 8015058:	d0c5      	beq.n	8014fe6 <__sflush_r+0x36>
 801505a:	2b1d      	cmp	r3, #29
 801505c:	d001      	beq.n	8015062 <__sflush_r+0xb2>
 801505e:	2b16      	cmp	r3, #22
 8015060:	d101      	bne.n	8015066 <__sflush_r+0xb6>
 8015062:	602f      	str	r7, [r5, #0]
 8015064:	e7b1      	b.n	8014fca <__sflush_r+0x1a>
 8015066:	89a3      	ldrh	r3, [r4, #12]
 8015068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801506c:	81a3      	strh	r3, [r4, #12]
 801506e:	e7ad      	b.n	8014fcc <__sflush_r+0x1c>
 8015070:	690f      	ldr	r7, [r1, #16]
 8015072:	2f00      	cmp	r7, #0
 8015074:	d0a9      	beq.n	8014fca <__sflush_r+0x1a>
 8015076:	0793      	lsls	r3, r2, #30
 8015078:	680e      	ldr	r6, [r1, #0]
 801507a:	bf08      	it	eq
 801507c:	694b      	ldreq	r3, [r1, #20]
 801507e:	600f      	str	r7, [r1, #0]
 8015080:	bf18      	it	ne
 8015082:	2300      	movne	r3, #0
 8015084:	eba6 0807 	sub.w	r8, r6, r7
 8015088:	608b      	str	r3, [r1, #8]
 801508a:	f1b8 0f00 	cmp.w	r8, #0
 801508e:	dd9c      	ble.n	8014fca <__sflush_r+0x1a>
 8015090:	6a21      	ldr	r1, [r4, #32]
 8015092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015094:	4643      	mov	r3, r8
 8015096:	463a      	mov	r2, r7
 8015098:	4628      	mov	r0, r5
 801509a:	47b0      	blx	r6
 801509c:	2800      	cmp	r0, #0
 801509e:	dc06      	bgt.n	80150ae <__sflush_r+0xfe>
 80150a0:	89a3      	ldrh	r3, [r4, #12]
 80150a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150a6:	81a3      	strh	r3, [r4, #12]
 80150a8:	f04f 30ff 	mov.w	r0, #4294967295
 80150ac:	e78e      	b.n	8014fcc <__sflush_r+0x1c>
 80150ae:	4407      	add	r7, r0
 80150b0:	eba8 0800 	sub.w	r8, r8, r0
 80150b4:	e7e9      	b.n	801508a <__sflush_r+0xda>
 80150b6:	bf00      	nop
 80150b8:	dfbffffe 	.word	0xdfbffffe

080150bc <_fflush_r>:
 80150bc:	b538      	push	{r3, r4, r5, lr}
 80150be:	690b      	ldr	r3, [r1, #16]
 80150c0:	4605      	mov	r5, r0
 80150c2:	460c      	mov	r4, r1
 80150c4:	b913      	cbnz	r3, 80150cc <_fflush_r+0x10>
 80150c6:	2500      	movs	r5, #0
 80150c8:	4628      	mov	r0, r5
 80150ca:	bd38      	pop	{r3, r4, r5, pc}
 80150cc:	b118      	cbz	r0, 80150d6 <_fflush_r+0x1a>
 80150ce:	6a03      	ldr	r3, [r0, #32]
 80150d0:	b90b      	cbnz	r3, 80150d6 <_fflush_r+0x1a>
 80150d2:	f7fe f9c7 	bl	8013464 <__sinit>
 80150d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d0f3      	beq.n	80150c6 <_fflush_r+0xa>
 80150de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80150e0:	07d0      	lsls	r0, r2, #31
 80150e2:	d404      	bmi.n	80150ee <_fflush_r+0x32>
 80150e4:	0599      	lsls	r1, r3, #22
 80150e6:	d402      	bmi.n	80150ee <_fflush_r+0x32>
 80150e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150ea:	f7ee fc0c 	bl	8003906 <__retarget_lock_acquire_recursive>
 80150ee:	4628      	mov	r0, r5
 80150f0:	4621      	mov	r1, r4
 80150f2:	f7ff ff5d 	bl	8014fb0 <__sflush_r>
 80150f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150f8:	07da      	lsls	r2, r3, #31
 80150fa:	4605      	mov	r5, r0
 80150fc:	d4e4      	bmi.n	80150c8 <_fflush_r+0xc>
 80150fe:	89a3      	ldrh	r3, [r4, #12]
 8015100:	059b      	lsls	r3, r3, #22
 8015102:	d4e1      	bmi.n	80150c8 <_fflush_r+0xc>
 8015104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015106:	f7ee fc12 	bl	800392e <__retarget_lock_release_recursive>
 801510a:	e7dd      	b.n	80150c8 <_fflush_r+0xc>

0801510c <__swbuf_r>:
 801510c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801510e:	460e      	mov	r6, r1
 8015110:	4614      	mov	r4, r2
 8015112:	4605      	mov	r5, r0
 8015114:	b118      	cbz	r0, 801511e <__swbuf_r+0x12>
 8015116:	6a03      	ldr	r3, [r0, #32]
 8015118:	b90b      	cbnz	r3, 801511e <__swbuf_r+0x12>
 801511a:	f7fe f9a3 	bl	8013464 <__sinit>
 801511e:	69a3      	ldr	r3, [r4, #24]
 8015120:	60a3      	str	r3, [r4, #8]
 8015122:	89a3      	ldrh	r3, [r4, #12]
 8015124:	071a      	lsls	r2, r3, #28
 8015126:	d525      	bpl.n	8015174 <__swbuf_r+0x68>
 8015128:	6923      	ldr	r3, [r4, #16]
 801512a:	b31b      	cbz	r3, 8015174 <__swbuf_r+0x68>
 801512c:	6823      	ldr	r3, [r4, #0]
 801512e:	6922      	ldr	r2, [r4, #16]
 8015130:	1a98      	subs	r0, r3, r2
 8015132:	6963      	ldr	r3, [r4, #20]
 8015134:	b2f6      	uxtb	r6, r6
 8015136:	4283      	cmp	r3, r0
 8015138:	4637      	mov	r7, r6
 801513a:	dc04      	bgt.n	8015146 <__swbuf_r+0x3a>
 801513c:	4621      	mov	r1, r4
 801513e:	4628      	mov	r0, r5
 8015140:	f7ff ffbc 	bl	80150bc <_fflush_r>
 8015144:	b9e0      	cbnz	r0, 8015180 <__swbuf_r+0x74>
 8015146:	68a3      	ldr	r3, [r4, #8]
 8015148:	3b01      	subs	r3, #1
 801514a:	60a3      	str	r3, [r4, #8]
 801514c:	6823      	ldr	r3, [r4, #0]
 801514e:	1c5a      	adds	r2, r3, #1
 8015150:	6022      	str	r2, [r4, #0]
 8015152:	701e      	strb	r6, [r3, #0]
 8015154:	6962      	ldr	r2, [r4, #20]
 8015156:	1c43      	adds	r3, r0, #1
 8015158:	429a      	cmp	r2, r3
 801515a:	d004      	beq.n	8015166 <__swbuf_r+0x5a>
 801515c:	89a3      	ldrh	r3, [r4, #12]
 801515e:	07db      	lsls	r3, r3, #31
 8015160:	d506      	bpl.n	8015170 <__swbuf_r+0x64>
 8015162:	2e0a      	cmp	r6, #10
 8015164:	d104      	bne.n	8015170 <__swbuf_r+0x64>
 8015166:	4621      	mov	r1, r4
 8015168:	4628      	mov	r0, r5
 801516a:	f7ff ffa7 	bl	80150bc <_fflush_r>
 801516e:	b938      	cbnz	r0, 8015180 <__swbuf_r+0x74>
 8015170:	4638      	mov	r0, r7
 8015172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015174:	4621      	mov	r1, r4
 8015176:	4628      	mov	r0, r5
 8015178:	f000 f806 	bl	8015188 <__swsetup_r>
 801517c:	2800      	cmp	r0, #0
 801517e:	d0d5      	beq.n	801512c <__swbuf_r+0x20>
 8015180:	f04f 37ff 	mov.w	r7, #4294967295
 8015184:	e7f4      	b.n	8015170 <__swbuf_r+0x64>
	...

08015188 <__swsetup_r>:
 8015188:	b538      	push	{r3, r4, r5, lr}
 801518a:	4b2a      	ldr	r3, [pc, #168]	; (8015234 <__swsetup_r+0xac>)
 801518c:	4605      	mov	r5, r0
 801518e:	6818      	ldr	r0, [r3, #0]
 8015190:	460c      	mov	r4, r1
 8015192:	b118      	cbz	r0, 801519c <__swsetup_r+0x14>
 8015194:	6a03      	ldr	r3, [r0, #32]
 8015196:	b90b      	cbnz	r3, 801519c <__swsetup_r+0x14>
 8015198:	f7fe f964 	bl	8013464 <__sinit>
 801519c:	89a3      	ldrh	r3, [r4, #12]
 801519e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80151a2:	0718      	lsls	r0, r3, #28
 80151a4:	d422      	bmi.n	80151ec <__swsetup_r+0x64>
 80151a6:	06d9      	lsls	r1, r3, #27
 80151a8:	d407      	bmi.n	80151ba <__swsetup_r+0x32>
 80151aa:	2309      	movs	r3, #9
 80151ac:	602b      	str	r3, [r5, #0]
 80151ae:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80151b2:	81a3      	strh	r3, [r4, #12]
 80151b4:	f04f 30ff 	mov.w	r0, #4294967295
 80151b8:	e034      	b.n	8015224 <__swsetup_r+0x9c>
 80151ba:	0758      	lsls	r0, r3, #29
 80151bc:	d512      	bpl.n	80151e4 <__swsetup_r+0x5c>
 80151be:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80151c0:	b141      	cbz	r1, 80151d4 <__swsetup_r+0x4c>
 80151c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80151c6:	4299      	cmp	r1, r3
 80151c8:	d002      	beq.n	80151d0 <__swsetup_r+0x48>
 80151ca:	4628      	mov	r0, r5
 80151cc:	f7ff f88c 	bl	80142e8 <_free_r>
 80151d0:	2300      	movs	r3, #0
 80151d2:	6363      	str	r3, [r4, #52]	; 0x34
 80151d4:	89a3      	ldrh	r3, [r4, #12]
 80151d6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80151da:	81a3      	strh	r3, [r4, #12]
 80151dc:	2300      	movs	r3, #0
 80151de:	6063      	str	r3, [r4, #4]
 80151e0:	6923      	ldr	r3, [r4, #16]
 80151e2:	6023      	str	r3, [r4, #0]
 80151e4:	89a3      	ldrh	r3, [r4, #12]
 80151e6:	f043 0308 	orr.w	r3, r3, #8
 80151ea:	81a3      	strh	r3, [r4, #12]
 80151ec:	6923      	ldr	r3, [r4, #16]
 80151ee:	b94b      	cbnz	r3, 8015204 <__swsetup_r+0x7c>
 80151f0:	89a3      	ldrh	r3, [r4, #12]
 80151f2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80151f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151fa:	d003      	beq.n	8015204 <__swsetup_r+0x7c>
 80151fc:	4621      	mov	r1, r4
 80151fe:	4628      	mov	r0, r5
 8015200:	f000 f8fc 	bl	80153fc <__smakebuf_r>
 8015204:	89a0      	ldrh	r0, [r4, #12]
 8015206:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801520a:	f010 0301 	ands.w	r3, r0, #1
 801520e:	d00a      	beq.n	8015226 <__swsetup_r+0x9e>
 8015210:	2300      	movs	r3, #0
 8015212:	60a3      	str	r3, [r4, #8]
 8015214:	6963      	ldr	r3, [r4, #20]
 8015216:	425b      	negs	r3, r3
 8015218:	61a3      	str	r3, [r4, #24]
 801521a:	6923      	ldr	r3, [r4, #16]
 801521c:	b943      	cbnz	r3, 8015230 <__swsetup_r+0xa8>
 801521e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015222:	d1c4      	bne.n	80151ae <__swsetup_r+0x26>
 8015224:	bd38      	pop	{r3, r4, r5, pc}
 8015226:	0781      	lsls	r1, r0, #30
 8015228:	bf58      	it	pl
 801522a:	6963      	ldrpl	r3, [r4, #20]
 801522c:	60a3      	str	r3, [r4, #8]
 801522e:	e7f4      	b.n	801521a <__swsetup_r+0x92>
 8015230:	2000      	movs	r0, #0
 8015232:	e7f7      	b.n	8015224 <__swsetup_r+0x9c>
 8015234:	2400008c 	.word	0x2400008c

08015238 <memmove>:
 8015238:	4288      	cmp	r0, r1
 801523a:	b510      	push	{r4, lr}
 801523c:	eb01 0402 	add.w	r4, r1, r2
 8015240:	d902      	bls.n	8015248 <memmove+0x10>
 8015242:	4284      	cmp	r4, r0
 8015244:	4623      	mov	r3, r4
 8015246:	d807      	bhi.n	8015258 <memmove+0x20>
 8015248:	1e43      	subs	r3, r0, #1
 801524a:	42a1      	cmp	r1, r4
 801524c:	d008      	beq.n	8015260 <memmove+0x28>
 801524e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015256:	e7f8      	b.n	801524a <memmove+0x12>
 8015258:	4402      	add	r2, r0
 801525a:	4601      	mov	r1, r0
 801525c:	428a      	cmp	r2, r1
 801525e:	d100      	bne.n	8015262 <memmove+0x2a>
 8015260:	bd10      	pop	{r4, pc}
 8015262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801526a:	e7f7      	b.n	801525c <memmove+0x24>

0801526c <memcpy>:
 801526c:	440a      	add	r2, r1
 801526e:	4291      	cmp	r1, r2
 8015270:	f100 33ff 	add.w	r3, r0, #4294967295
 8015274:	d100      	bne.n	8015278 <memcpy+0xc>
 8015276:	4770      	bx	lr
 8015278:	b510      	push	{r4, lr}
 801527a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801527e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015282:	4291      	cmp	r1, r2
 8015284:	d1f9      	bne.n	801527a <memcpy+0xe>
 8015286:	bd10      	pop	{r4, pc}

08015288 <__assert_func>:
 8015288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801528a:	4614      	mov	r4, r2
 801528c:	461a      	mov	r2, r3
 801528e:	4b09      	ldr	r3, [pc, #36]	; (80152b4 <__assert_func+0x2c>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	4605      	mov	r5, r0
 8015294:	68d8      	ldr	r0, [r3, #12]
 8015296:	b14c      	cbz	r4, 80152ac <__assert_func+0x24>
 8015298:	4b07      	ldr	r3, [pc, #28]	; (80152b8 <__assert_func+0x30>)
 801529a:	9100      	str	r1, [sp, #0]
 801529c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80152a0:	4906      	ldr	r1, [pc, #24]	; (80152bc <__assert_func+0x34>)
 80152a2:	462b      	mov	r3, r5
 80152a4:	f000 f872 	bl	801538c <fiprintf>
 80152a8:	f000 f906 	bl	80154b8 <abort>
 80152ac:	4b04      	ldr	r3, [pc, #16]	; (80152c0 <__assert_func+0x38>)
 80152ae:	461c      	mov	r4, r3
 80152b0:	e7f3      	b.n	801529a <__assert_func+0x12>
 80152b2:	bf00      	nop
 80152b4:	2400008c 	.word	0x2400008c
 80152b8:	08015ba7 	.word	0x08015ba7
 80152bc:	08015bb4 	.word	0x08015bb4
 80152c0:	08015be2 	.word	0x08015be2

080152c4 <_calloc_r>:
 80152c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152c6:	fba1 2402 	umull	r2, r4, r1, r2
 80152ca:	b94c      	cbnz	r4, 80152e0 <_calloc_r+0x1c>
 80152cc:	4611      	mov	r1, r2
 80152ce:	9201      	str	r2, [sp, #4]
 80152d0:	f7fd fb74 	bl	80129bc <_malloc_r>
 80152d4:	9a01      	ldr	r2, [sp, #4]
 80152d6:	4605      	mov	r5, r0
 80152d8:	b930      	cbnz	r0, 80152e8 <_calloc_r+0x24>
 80152da:	4628      	mov	r0, r5
 80152dc:	b003      	add	sp, #12
 80152de:	bd30      	pop	{r4, r5, pc}
 80152e0:	220c      	movs	r2, #12
 80152e2:	6002      	str	r2, [r0, #0]
 80152e4:	2500      	movs	r5, #0
 80152e6:	e7f8      	b.n	80152da <_calloc_r+0x16>
 80152e8:	4621      	mov	r1, r4
 80152ea:	f7fe f97a 	bl	80135e2 <memset>
 80152ee:	e7f4      	b.n	80152da <_calloc_r+0x16>

080152f0 <__ascii_mbtowc>:
 80152f0:	b082      	sub	sp, #8
 80152f2:	b901      	cbnz	r1, 80152f6 <__ascii_mbtowc+0x6>
 80152f4:	a901      	add	r1, sp, #4
 80152f6:	b142      	cbz	r2, 801530a <__ascii_mbtowc+0x1a>
 80152f8:	b14b      	cbz	r3, 801530e <__ascii_mbtowc+0x1e>
 80152fa:	7813      	ldrb	r3, [r2, #0]
 80152fc:	600b      	str	r3, [r1, #0]
 80152fe:	7812      	ldrb	r2, [r2, #0]
 8015300:	1e10      	subs	r0, r2, #0
 8015302:	bf18      	it	ne
 8015304:	2001      	movne	r0, #1
 8015306:	b002      	add	sp, #8
 8015308:	4770      	bx	lr
 801530a:	4610      	mov	r0, r2
 801530c:	e7fb      	b.n	8015306 <__ascii_mbtowc+0x16>
 801530e:	f06f 0001 	mvn.w	r0, #1
 8015312:	e7f8      	b.n	8015306 <__ascii_mbtowc+0x16>

08015314 <_realloc_r>:
 8015314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015318:	4680      	mov	r8, r0
 801531a:	4614      	mov	r4, r2
 801531c:	460e      	mov	r6, r1
 801531e:	b921      	cbnz	r1, 801532a <_realloc_r+0x16>
 8015320:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015324:	4611      	mov	r1, r2
 8015326:	f7fd bb49 	b.w	80129bc <_malloc_r>
 801532a:	b92a      	cbnz	r2, 8015338 <_realloc_r+0x24>
 801532c:	f7fe ffdc 	bl	80142e8 <_free_r>
 8015330:	4625      	mov	r5, r4
 8015332:	4628      	mov	r0, r5
 8015334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015338:	f000 f8c5 	bl	80154c6 <_malloc_usable_size_r>
 801533c:	4284      	cmp	r4, r0
 801533e:	4607      	mov	r7, r0
 8015340:	d802      	bhi.n	8015348 <_realloc_r+0x34>
 8015342:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015346:	d812      	bhi.n	801536e <_realloc_r+0x5a>
 8015348:	4621      	mov	r1, r4
 801534a:	4640      	mov	r0, r8
 801534c:	f7fd fb36 	bl	80129bc <_malloc_r>
 8015350:	4605      	mov	r5, r0
 8015352:	2800      	cmp	r0, #0
 8015354:	d0ed      	beq.n	8015332 <_realloc_r+0x1e>
 8015356:	42bc      	cmp	r4, r7
 8015358:	4622      	mov	r2, r4
 801535a:	4631      	mov	r1, r6
 801535c:	bf28      	it	cs
 801535e:	463a      	movcs	r2, r7
 8015360:	f7ff ff84 	bl	801526c <memcpy>
 8015364:	4631      	mov	r1, r6
 8015366:	4640      	mov	r0, r8
 8015368:	f7fe ffbe 	bl	80142e8 <_free_r>
 801536c:	e7e1      	b.n	8015332 <_realloc_r+0x1e>
 801536e:	4635      	mov	r5, r6
 8015370:	e7df      	b.n	8015332 <_realloc_r+0x1e>

08015372 <__ascii_wctomb>:
 8015372:	b149      	cbz	r1, 8015388 <__ascii_wctomb+0x16>
 8015374:	2aff      	cmp	r2, #255	; 0xff
 8015376:	bf85      	ittet	hi
 8015378:	238a      	movhi	r3, #138	; 0x8a
 801537a:	6003      	strhi	r3, [r0, #0]
 801537c:	700a      	strbls	r2, [r1, #0]
 801537e:	f04f 30ff 	movhi.w	r0, #4294967295
 8015382:	bf98      	it	ls
 8015384:	2001      	movls	r0, #1
 8015386:	4770      	bx	lr
 8015388:	4608      	mov	r0, r1
 801538a:	4770      	bx	lr

0801538c <fiprintf>:
 801538c:	b40e      	push	{r1, r2, r3}
 801538e:	b503      	push	{r0, r1, lr}
 8015390:	4601      	mov	r1, r0
 8015392:	ab03      	add	r3, sp, #12
 8015394:	4805      	ldr	r0, [pc, #20]	; (80153ac <fiprintf+0x20>)
 8015396:	f853 2b04 	ldr.w	r2, [r3], #4
 801539a:	6800      	ldr	r0, [r0, #0]
 801539c:	9301      	str	r3, [sp, #4]
 801539e:	f7ff fced 	bl	8014d7c <_vfiprintf_r>
 80153a2:	b002      	add	sp, #8
 80153a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80153a8:	b003      	add	sp, #12
 80153aa:	4770      	bx	lr
 80153ac:	2400008c 	.word	0x2400008c

080153b0 <__swhatbuf_r>:
 80153b0:	b570      	push	{r4, r5, r6, lr}
 80153b2:	460c      	mov	r4, r1
 80153b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153b8:	2900      	cmp	r1, #0
 80153ba:	b096      	sub	sp, #88	; 0x58
 80153bc:	4615      	mov	r5, r2
 80153be:	461e      	mov	r6, r3
 80153c0:	da0d      	bge.n	80153de <__swhatbuf_r+0x2e>
 80153c2:	89a3      	ldrh	r3, [r4, #12]
 80153c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80153c8:	f04f 0100 	mov.w	r1, #0
 80153cc:	bf0c      	ite	eq
 80153ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80153d2:	2340      	movne	r3, #64	; 0x40
 80153d4:	2000      	movs	r0, #0
 80153d6:	6031      	str	r1, [r6, #0]
 80153d8:	602b      	str	r3, [r5, #0]
 80153da:	b016      	add	sp, #88	; 0x58
 80153dc:	bd70      	pop	{r4, r5, r6, pc}
 80153de:	466a      	mov	r2, sp
 80153e0:	f000 f848 	bl	8015474 <_fstat_r>
 80153e4:	2800      	cmp	r0, #0
 80153e6:	dbec      	blt.n	80153c2 <__swhatbuf_r+0x12>
 80153e8:	9901      	ldr	r1, [sp, #4]
 80153ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80153ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80153f2:	4259      	negs	r1, r3
 80153f4:	4159      	adcs	r1, r3
 80153f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80153fa:	e7eb      	b.n	80153d4 <__swhatbuf_r+0x24>

080153fc <__smakebuf_r>:
 80153fc:	898b      	ldrh	r3, [r1, #12]
 80153fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015400:	079d      	lsls	r5, r3, #30
 8015402:	4606      	mov	r6, r0
 8015404:	460c      	mov	r4, r1
 8015406:	d507      	bpl.n	8015418 <__smakebuf_r+0x1c>
 8015408:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801540c:	6023      	str	r3, [r4, #0]
 801540e:	6123      	str	r3, [r4, #16]
 8015410:	2301      	movs	r3, #1
 8015412:	6163      	str	r3, [r4, #20]
 8015414:	b002      	add	sp, #8
 8015416:	bd70      	pop	{r4, r5, r6, pc}
 8015418:	ab01      	add	r3, sp, #4
 801541a:	466a      	mov	r2, sp
 801541c:	f7ff ffc8 	bl	80153b0 <__swhatbuf_r>
 8015420:	9900      	ldr	r1, [sp, #0]
 8015422:	4605      	mov	r5, r0
 8015424:	4630      	mov	r0, r6
 8015426:	f7fd fac9 	bl	80129bc <_malloc_r>
 801542a:	b948      	cbnz	r0, 8015440 <__smakebuf_r+0x44>
 801542c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015430:	059a      	lsls	r2, r3, #22
 8015432:	d4ef      	bmi.n	8015414 <__smakebuf_r+0x18>
 8015434:	f023 0303 	bic.w	r3, r3, #3
 8015438:	f043 0302 	orr.w	r3, r3, #2
 801543c:	81a3      	strh	r3, [r4, #12]
 801543e:	e7e3      	b.n	8015408 <__smakebuf_r+0xc>
 8015440:	89a3      	ldrh	r3, [r4, #12]
 8015442:	6020      	str	r0, [r4, #0]
 8015444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015448:	81a3      	strh	r3, [r4, #12]
 801544a:	9b00      	ldr	r3, [sp, #0]
 801544c:	6163      	str	r3, [r4, #20]
 801544e:	9b01      	ldr	r3, [sp, #4]
 8015450:	6120      	str	r0, [r4, #16]
 8015452:	b15b      	cbz	r3, 801546c <__smakebuf_r+0x70>
 8015454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015458:	4630      	mov	r0, r6
 801545a:	f000 f81d 	bl	8015498 <_isatty_r>
 801545e:	b128      	cbz	r0, 801546c <__smakebuf_r+0x70>
 8015460:	89a3      	ldrh	r3, [r4, #12]
 8015462:	f023 0303 	bic.w	r3, r3, #3
 8015466:	f043 0301 	orr.w	r3, r3, #1
 801546a:	81a3      	strh	r3, [r4, #12]
 801546c:	89a3      	ldrh	r3, [r4, #12]
 801546e:	431d      	orrs	r5, r3
 8015470:	81a5      	strh	r5, [r4, #12]
 8015472:	e7cf      	b.n	8015414 <__smakebuf_r+0x18>

08015474 <_fstat_r>:
 8015474:	b538      	push	{r3, r4, r5, lr}
 8015476:	4d07      	ldr	r5, [pc, #28]	; (8015494 <_fstat_r+0x20>)
 8015478:	2300      	movs	r3, #0
 801547a:	4604      	mov	r4, r0
 801547c:	4608      	mov	r0, r1
 801547e:	4611      	mov	r1, r2
 8015480:	602b      	str	r3, [r5, #0]
 8015482:	f7ee f8a4 	bl	80035ce <_fstat>
 8015486:	1c43      	adds	r3, r0, #1
 8015488:	d102      	bne.n	8015490 <_fstat_r+0x1c>
 801548a:	682b      	ldr	r3, [r5, #0]
 801548c:	b103      	cbz	r3, 8015490 <_fstat_r+0x1c>
 801548e:	6023      	str	r3, [r4, #0]
 8015490:	bd38      	pop	{r3, r4, r5, pc}
 8015492:	bf00      	nop
 8015494:	2400134c 	.word	0x2400134c

08015498 <_isatty_r>:
 8015498:	b538      	push	{r3, r4, r5, lr}
 801549a:	4d06      	ldr	r5, [pc, #24]	; (80154b4 <_isatty_r+0x1c>)
 801549c:	2300      	movs	r3, #0
 801549e:	4604      	mov	r4, r0
 80154a0:	4608      	mov	r0, r1
 80154a2:	602b      	str	r3, [r5, #0]
 80154a4:	f7ee f8a3 	bl	80035ee <_isatty>
 80154a8:	1c43      	adds	r3, r0, #1
 80154aa:	d102      	bne.n	80154b2 <_isatty_r+0x1a>
 80154ac:	682b      	ldr	r3, [r5, #0]
 80154ae:	b103      	cbz	r3, 80154b2 <_isatty_r+0x1a>
 80154b0:	6023      	str	r3, [r4, #0]
 80154b2:	bd38      	pop	{r3, r4, r5, pc}
 80154b4:	2400134c 	.word	0x2400134c

080154b8 <abort>:
 80154b8:	b508      	push	{r3, lr}
 80154ba:	2006      	movs	r0, #6
 80154bc:	f000 f834 	bl	8015528 <raise>
 80154c0:	2001      	movs	r0, #1
 80154c2:	f7ee f835 	bl	8003530 <_exit>

080154c6 <_malloc_usable_size_r>:
 80154c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80154ca:	1f18      	subs	r0, r3, #4
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	bfbc      	itt	lt
 80154d0:	580b      	ldrlt	r3, [r1, r0]
 80154d2:	18c0      	addlt	r0, r0, r3
 80154d4:	4770      	bx	lr

080154d6 <_raise_r>:
 80154d6:	291f      	cmp	r1, #31
 80154d8:	b538      	push	{r3, r4, r5, lr}
 80154da:	4604      	mov	r4, r0
 80154dc:	460d      	mov	r5, r1
 80154de:	d904      	bls.n	80154ea <_raise_r+0x14>
 80154e0:	2316      	movs	r3, #22
 80154e2:	6003      	str	r3, [r0, #0]
 80154e4:	f04f 30ff 	mov.w	r0, #4294967295
 80154e8:	bd38      	pop	{r3, r4, r5, pc}
 80154ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80154ec:	b112      	cbz	r2, 80154f4 <_raise_r+0x1e>
 80154ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80154f2:	b94b      	cbnz	r3, 8015508 <_raise_r+0x32>
 80154f4:	4620      	mov	r0, r4
 80154f6:	f000 f831 	bl	801555c <_getpid_r>
 80154fa:	462a      	mov	r2, r5
 80154fc:	4601      	mov	r1, r0
 80154fe:	4620      	mov	r0, r4
 8015500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015504:	f000 b818 	b.w	8015538 <_kill_r>
 8015508:	2b01      	cmp	r3, #1
 801550a:	d00a      	beq.n	8015522 <_raise_r+0x4c>
 801550c:	1c59      	adds	r1, r3, #1
 801550e:	d103      	bne.n	8015518 <_raise_r+0x42>
 8015510:	2316      	movs	r3, #22
 8015512:	6003      	str	r3, [r0, #0]
 8015514:	2001      	movs	r0, #1
 8015516:	e7e7      	b.n	80154e8 <_raise_r+0x12>
 8015518:	2400      	movs	r4, #0
 801551a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801551e:	4628      	mov	r0, r5
 8015520:	4798      	blx	r3
 8015522:	2000      	movs	r0, #0
 8015524:	e7e0      	b.n	80154e8 <_raise_r+0x12>
	...

08015528 <raise>:
 8015528:	4b02      	ldr	r3, [pc, #8]	; (8015534 <raise+0xc>)
 801552a:	4601      	mov	r1, r0
 801552c:	6818      	ldr	r0, [r3, #0]
 801552e:	f7ff bfd2 	b.w	80154d6 <_raise_r>
 8015532:	bf00      	nop
 8015534:	2400008c 	.word	0x2400008c

08015538 <_kill_r>:
 8015538:	b538      	push	{r3, r4, r5, lr}
 801553a:	4d07      	ldr	r5, [pc, #28]	; (8015558 <_kill_r+0x20>)
 801553c:	2300      	movs	r3, #0
 801553e:	4604      	mov	r4, r0
 8015540:	4608      	mov	r0, r1
 8015542:	4611      	mov	r1, r2
 8015544:	602b      	str	r3, [r5, #0]
 8015546:	f7ed ffe3 	bl	8003510 <_kill>
 801554a:	1c43      	adds	r3, r0, #1
 801554c:	d102      	bne.n	8015554 <_kill_r+0x1c>
 801554e:	682b      	ldr	r3, [r5, #0]
 8015550:	b103      	cbz	r3, 8015554 <_kill_r+0x1c>
 8015552:	6023      	str	r3, [r4, #0]
 8015554:	bd38      	pop	{r3, r4, r5, pc}
 8015556:	bf00      	nop
 8015558:	2400134c 	.word	0x2400134c

0801555c <_getpid_r>:
 801555c:	f7ed bfd0 	b.w	8003500 <_getpid>

08015560 <_init>:
 8015560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015562:	bf00      	nop
 8015564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015566:	bc08      	pop	{r3}
 8015568:	469e      	mov	lr, r3
 801556a:	4770      	bx	lr

0801556c <_fini>:
 801556c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801556e:	bf00      	nop
 8015570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015572:	bc08      	pop	{r3}
 8015574:	469e      	mov	lr, r3
 8015576:	4770      	bx	lr
